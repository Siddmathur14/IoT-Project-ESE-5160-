
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000276fc  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002e8  20000000  000396fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000585c  200002f0  000399f0  000302f0  2**4
                  ALLOC
  3 .stack        00002004  20005b4c  0003f24c  000302f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
  6 .debug_info   0011f635  00000000  00000000  00030369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010c07  00000000  00000000  0014f99e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000122e7  00000000  00000000  001605a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003280  00000000  00000000  0017288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002ef8  00000000  00000000  00175b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a3d5  00000000  00000000  00178a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005b1f1  00000000  00000000  001a2dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000be0bc  00000000  00000000  001fdfca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000bbe8  00000000  00000000  002bc088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	50 7b 00 20 c9 a8 02 00 c1 a9 02 00 c1 a9 02 00     P{. ............
	...
   1202c:	61 9a 01 00 00 00 00 00 00 00 00 00 81 9b 01 00     a...............
   1203c:	c9 9b 01 00 c1 a9 02 00 c1 a9 02 00 c1 a9 02 00     ................
   1204c:	19 6a 02 00 45 5f 02 00 c1 a9 02 00 a9 2c 01 00     .j..E_.......,..
   1205c:	c1 a9 02 00 ed 2d 01 00 bd 70 02 00 d5 70 02 00     .....-...p...p..
   1206c:	ed 70 02 00 05 71 02 00 1d 71 02 00 35 71 02 00     .p...q...q..5q..
   1207c:	11 a8 02 00 25 a8 02 00 39 a8 02 00 4d 77 01 00     ....%...9...Mw..
   1208c:	61 77 01 00 75 77 01 00 00 00 00 00 00 00 00 00     aw..uw..........
   1209c:	31 2b 01 00 c1 a9 02 00 6d 2c 01 00 c1 a9 02 00     1+......m,......
   120ac:	c1 a9 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002f0 	.word	0x200002f0
   120d4:	00000000 	.word	0x00000000
   120d8:	000396fc 	.word	0x000396fc

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002f4 	.word	0x200002f4
   12108:	000396fc 	.word	0x000396fc
   1210c:	000396fc 	.word	0x000396fc
   12110:	00000000 	.word	0x00000000

00012114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12114:	b580      	push	{r7, lr}
   12116:	b082      	sub	sp, #8
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	2200      	movs	r2, #0
   12120:	701a      	strb	r2, [r3, #0]
}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	b002      	add	sp, #8
   12128:	bd80      	pop	{r7, pc}
	...

0001212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1212c:	b580      	push	{r7, lr}
   1212e:	b082      	sub	sp, #8
   12130:	af00      	add	r7, sp, #0
   12132:	0002      	movs	r2, r0
   12134:	6039      	str	r1, [r7, #0]
   12136:	1dfb      	adds	r3, r7, #7
   12138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1213a:	1dfb      	adds	r3, r7, #7
   1213c:	781b      	ldrb	r3, [r3, #0]
   1213e:	2b01      	cmp	r3, #1
   12140:	d00a      	beq.n	12158 <system_apb_clock_set_mask+0x2c>
   12142:	2b02      	cmp	r3, #2
   12144:	d00f      	beq.n	12166 <system_apb_clock_set_mask+0x3a>
   12146:	2b00      	cmp	r3, #0
   12148:	d114      	bne.n	12174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1214a:	4b0e      	ldr	r3, [pc, #56]	; (12184 <system_apb_clock_set_mask+0x58>)
   1214c:	4a0d      	ldr	r2, [pc, #52]	; (12184 <system_apb_clock_set_mask+0x58>)
   1214e:	6991      	ldr	r1, [r2, #24]
   12150:	683a      	ldr	r2, [r7, #0]
   12152:	430a      	orrs	r2, r1
   12154:	619a      	str	r2, [r3, #24]
			break;
   12156:	e00f      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12158:	4b0a      	ldr	r3, [pc, #40]	; (12184 <system_apb_clock_set_mask+0x58>)
   1215a:	4a0a      	ldr	r2, [pc, #40]	; (12184 <system_apb_clock_set_mask+0x58>)
   1215c:	69d1      	ldr	r1, [r2, #28]
   1215e:	683a      	ldr	r2, [r7, #0]
   12160:	430a      	orrs	r2, r1
   12162:	61da      	str	r2, [r3, #28]
			break;
   12164:	e008      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12166:	4b07      	ldr	r3, [pc, #28]	; (12184 <system_apb_clock_set_mask+0x58>)
   12168:	4a06      	ldr	r2, [pc, #24]	; (12184 <system_apb_clock_set_mask+0x58>)
   1216a:	6a11      	ldr	r1, [r2, #32]
   1216c:	683a      	ldr	r2, [r7, #0]
   1216e:	430a      	orrs	r2, r1
   12170:	621a      	str	r2, [r3, #32]
			break;
   12172:	e001      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12174:	2317      	movs	r3, #23
   12176:	e000      	b.n	1217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12178:	2300      	movs	r3, #0
}
   1217a:	0018      	movs	r0, r3
   1217c:	46bd      	mov	sp, r7
   1217e:	b002      	add	sp, #8
   12180:	bd80      	pop	{r7, pc}
   12182:	46c0      	nop			; (mov r8, r8)
   12184:	40000400 	.word	0x40000400

00012188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   12188:	b580      	push	{r7, lr}
   1218a:	b082      	sub	sp, #8
   1218c:	af00      	add	r7, sp, #0
   1218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12190:	687b      	ldr	r3, [r7, #4]
   12192:	2280      	movs	r2, #128	; 0x80
   12194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12196:	687b      	ldr	r3, [r7, #4]
   12198:	2200      	movs	r2, #0
   1219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1219c:	687b      	ldr	r3, [r7, #4]
   1219e:	2201      	movs	r2, #1
   121a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   121a2:	687b      	ldr	r3, [r7, #4]
   121a4:	2200      	movs	r2, #0
   121a6:	70da      	strb	r2, [r3, #3]
}
   121a8:	46c0      	nop			; (mov r8, r8)
   121aa:	46bd      	mov	sp, r7
   121ac:	b002      	add	sp, #8
   121ae:	bd80      	pop	{r7, pc}

000121b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   121b0:	b580      	push	{r7, lr}
   121b2:	b082      	sub	sp, #8
   121b4:	af00      	add	r7, sp, #0
   121b6:	0002      	movs	r2, r0
   121b8:	1dfb      	adds	r3, r7, #7
   121ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   121bc:	1dfb      	adds	r3, r7, #7
   121be:	781b      	ldrb	r3, [r3, #0]
   121c0:	2b00      	cmp	r3, #0
   121c2:	d002      	beq.n	121ca <system_voltage_reference_enable+0x1a>
   121c4:	2b01      	cmp	r3, #1
   121c6:	d007      	beq.n	121d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   121c8:	e00d      	b.n	121e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   121ca:	4b08      	ldr	r3, [pc, #32]	; (121ec <system_voltage_reference_enable+0x3c>)
   121cc:	4a07      	ldr	r2, [pc, #28]	; (121ec <system_voltage_reference_enable+0x3c>)
   121ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
   121d0:	2102      	movs	r1, #2
   121d2:	430a      	orrs	r2, r1
   121d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   121d6:	e006      	b.n	121e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   121d8:	4b04      	ldr	r3, [pc, #16]	; (121ec <system_voltage_reference_enable+0x3c>)
   121da:	4a04      	ldr	r2, [pc, #16]	; (121ec <system_voltage_reference_enable+0x3c>)
   121dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
   121de:	2104      	movs	r1, #4
   121e0:	430a      	orrs	r2, r1
   121e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   121e4:	46c0      	nop			; (mov r8, r8)
	}
}
   121e6:	46bd      	mov	sp, r7
   121e8:	b002      	add	sp, #8
   121ea:	bd80      	pop	{r7, pc}
   121ec:	40000800 	.word	0x40000800

000121f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   121f0:	b580      	push	{r7, lr}
   121f2:	b084      	sub	sp, #16
   121f4:	af00      	add	r7, sp, #0
   121f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   121f8:	687b      	ldr	r3, [r7, #4]
   121fa:	681b      	ldr	r3, [r3, #0]
   121fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   121fe:	68fb      	ldr	r3, [r7, #12]
   12200:	7e5b      	ldrb	r3, [r3, #25]
   12202:	b2db      	uxtb	r3, r3
   12204:	b25b      	sxtb	r3, r3
   12206:	2b00      	cmp	r3, #0
   12208:	da01      	bge.n	1220e <adc_is_syncing+0x1e>
		return true;
   1220a:	2301      	movs	r3, #1
   1220c:	e000      	b.n	12210 <adc_is_syncing+0x20>
	}

	return false;
   1220e:	2300      	movs	r3, #0
}
   12210:	0018      	movs	r0, r3
   12212:	46bd      	mov	sp, r7
   12214:	b004      	add	sp, #16
   12216:	bd80      	pop	{r7, pc}

00012218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   12218:	b580      	push	{r7, lr}
   1221a:	b082      	sub	sp, #8
   1221c:	af00      	add	r7, sp, #0
   1221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	2200      	movs	r2, #0
   12224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   12226:	687b      	ldr	r3, [r7, #4]
   12228:	2200      	movs	r2, #0
   1222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1222c:	687b      	ldr	r3, [r7, #4]
   1222e:	2200      	movs	r2, #0
   12230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   12232:	687b      	ldr	r3, [r7, #4]
   12234:	2200      	movs	r2, #0
   12236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   12238:	687b      	ldr	r3, [r7, #4]
   1223a:	2200      	movs	r2, #0
   1223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1223e:	687b      	ldr	r3, [r7, #4]
   12240:	2200      	movs	r2, #0
   12242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   12244:	687b      	ldr	r3, [r7, #4]
   12246:	2200      	movs	r2, #0
   12248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1224a:	687b      	ldr	r3, [r7, #4]
   1224c:	2200      	movs	r2, #0
   1224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   12250:	687b      	ldr	r3, [r7, #4]
   12252:	2200      	movs	r2, #0
   12254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   12256:	687b      	ldr	r3, [r7, #4]
   12258:	22c0      	movs	r2, #192	; 0xc0
   1225a:	0152      	lsls	r2, r2, #5
   1225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1225e:	687b      	ldr	r3, [r7, #4]
   12260:	2200      	movs	r2, #0
   12262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   12264:	687b      	ldr	r3, [r7, #4]
   12266:	2200      	movs	r2, #0
   12268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1226a:	687b      	ldr	r3, [r7, #4]
   1226c:	2200      	movs	r2, #0
   1226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	2200      	movs	r2, #0
   12274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   12276:	687b      	ldr	r3, [r7, #4]
   12278:	2200      	movs	r2, #0
   1227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	222a      	movs	r2, #42	; 0x2a
   12280:	2100      	movs	r1, #0
   12282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   12284:	687b      	ldr	r3, [r7, #4]
   12286:	2200      	movs	r2, #0
   12288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1228a:	687b      	ldr	r3, [r7, #4]
   1228c:	2200      	movs	r2, #0
   1228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	2224      	movs	r2, #36	; 0x24
   12294:	2100      	movs	r1, #0
   12296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   12298:	687b      	ldr	r3, [r7, #4]
   1229a:	2200      	movs	r2, #0
   1229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1229e:	687b      	ldr	r3, [r7, #4]
   122a0:	2200      	movs	r2, #0
   122a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   122a4:	687b      	ldr	r3, [r7, #4]
   122a6:	2200      	movs	r2, #0
   122a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   122aa:	687b      	ldr	r3, [r7, #4]
   122ac:	222b      	movs	r2, #43	; 0x2b
   122ae:	2100      	movs	r1, #0
   122b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   122b2:	687b      	ldr	r3, [r7, #4]
   122b4:	222c      	movs	r2, #44	; 0x2c
   122b6:	2100      	movs	r1, #0
   122b8:	5499      	strb	r1, [r3, r2]
}
   122ba:	46c0      	nop			; (mov r8, r8)
   122bc:	46bd      	mov	sp, r7
   122be:	b002      	add	sp, #8
   122c0:	bd80      	pop	{r7, pc}
	...

000122c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   122c4:	b580      	push	{r7, lr}
   122c6:	b098      	sub	sp, #96	; 0x60
   122c8:	af00      	add	r7, sp, #0
   122ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   122cc:	230c      	movs	r3, #12
   122ce:	18fa      	adds	r2, r7, r3
   122d0:	4b15      	ldr	r3, [pc, #84]	; (12328 <_adc_configure_ain_pin+0x64>)
   122d2:	0010      	movs	r0, r2
   122d4:	0019      	movs	r1, r3
   122d6:	2350      	movs	r3, #80	; 0x50
   122d8:	001a      	movs	r2, r3
   122da:	4b14      	ldr	r3, [pc, #80]	; (1232c <_adc_configure_ain_pin+0x68>)
   122dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   122de:	4b14      	ldr	r3, [pc, #80]	; (12330 <_adc_configure_ain_pin+0x6c>)
   122e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   122e2:	687b      	ldr	r3, [r7, #4]
   122e4:	2b13      	cmp	r3, #19
   122e6:	d81a      	bhi.n	1231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   122e8:	230c      	movs	r3, #12
   122ea:	18fb      	adds	r3, r7, r3
   122ec:	687a      	ldr	r2, [r7, #4]
   122ee:	0092      	lsls	r2, r2, #2
   122f0:	58d3      	ldr	r3, [r2, r3]
   122f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   122f4:	2308      	movs	r3, #8
   122f6:	18fb      	adds	r3, r7, r3
   122f8:	0018      	movs	r0, r3
   122fa:	4b0e      	ldr	r3, [pc, #56]	; (12334 <_adc_configure_ain_pin+0x70>)
   122fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   122fe:	2308      	movs	r3, #8
   12300:	18fb      	adds	r3, r7, r3
   12302:	2200      	movs	r2, #0
   12304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   12306:	2308      	movs	r3, #8
   12308:	18fb      	adds	r3, r7, r3
   1230a:	2201      	movs	r2, #1
   1230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12310:	b2db      	uxtb	r3, r3
   12312:	2208      	movs	r2, #8
   12314:	18ba      	adds	r2, r7, r2
   12316:	0011      	movs	r1, r2
   12318:	0018      	movs	r0, r3
   1231a:	4b07      	ldr	r3, [pc, #28]	; (12338 <_adc_configure_ain_pin+0x74>)
   1231c:	4798      	blx	r3
	}
}
   1231e:	46c0      	nop			; (mov r8, r8)
   12320:	46bd      	mov	sp, r7
   12322:	b018      	add	sp, #96	; 0x60
   12324:	bd80      	pop	{r7, pc}
   12326:	46c0      	nop			; (mov r8, r8)
   12328:	00035420 	.word	0x00035420
   1232c:	0003400d 	.word	0x0003400d
   12330:	0000ffff 	.word	0x0000ffff
   12334:	00012189 	.word	0x00012189
   12338:	00029b99 	.word	0x00029b99

0001233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1233c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1233e:	b089      	sub	sp, #36	; 0x24
   12340:	af00      	add	r7, sp, #0
   12342:	6078      	str	r0, [r7, #4]
   12344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   12346:	231f      	movs	r3, #31
   12348:	18fb      	adds	r3, r7, r3
   1234a:	2200      	movs	r2, #0
   1234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1234e:	2310      	movs	r3, #16
   12350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   12352:	2317      	movs	r3, #23
   12354:	18fb      	adds	r3, r7, r3
   12356:	2200      	movs	r2, #0
   12358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1235a:	687b      	ldr	r3, [r7, #4]
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12360:	230c      	movs	r3, #12
   12362:	18fb      	adds	r3, r7, r3
   12364:	0018      	movs	r0, r3
   12366:	4bce      	ldr	r3, [pc, #824]	; (126a0 <_adc_set_config+0x364>)
   12368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1236a:	683b      	ldr	r3, [r7, #0]
   1236c:	781a      	ldrb	r2, [r3, #0]
   1236e:	230c      	movs	r3, #12
   12370:	18fb      	adds	r3, r7, r3
   12372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   12374:	230c      	movs	r3, #12
   12376:	18fb      	adds	r3, r7, r3
   12378:	0019      	movs	r1, r3
   1237a:	201e      	movs	r0, #30
   1237c:	4bc9      	ldr	r3, [pc, #804]	; (126a4 <_adc_set_config+0x368>)
   1237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   12380:	201e      	movs	r0, #30
   12382:	4bc9      	ldr	r3, [pc, #804]	; (126a8 <_adc_set_config+0x36c>)
   12384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   12386:	683b      	ldr	r3, [r7, #0]
   12388:	222c      	movs	r2, #44	; 0x2c
   1238a:	5c9b      	ldrb	r3, [r3, r2]
   1238c:	2b00      	cmp	r3, #0
   1238e:	d040      	beq.n	12412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   12390:	2316      	movs	r3, #22
   12392:	18fb      	adds	r3, r7, r3
   12394:	683a      	ldr	r2, [r7, #0]
   12396:	212b      	movs	r1, #43	; 0x2b
   12398:	5c52      	ldrb	r2, [r2, r1]
   1239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1239c:	683b      	ldr	r3, [r7, #0]
   1239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   123a0:	2315      	movs	r3, #21
   123a2:	18fb      	adds	r3, r7, r3
   123a4:	2216      	movs	r2, #22
   123a6:	18ba      	adds	r2, r7, r2
   123a8:	7812      	ldrb	r2, [r2, #0]
   123aa:	188a      	adds	r2, r1, r2
   123ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   123ae:	683b      	ldr	r3, [r7, #0]
   123b0:	222c      	movs	r2, #44	; 0x2c
   123b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   123b4:	230f      	movs	r3, #15
   123b6:	18fb      	adds	r3, r7, r3
   123b8:	2215      	movs	r2, #21
   123ba:	18ba      	adds	r2, r7, r2
   123bc:	7812      	ldrb	r2, [r2, #0]
   123be:	188a      	adds	r2, r1, r2
   123c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   123c2:	e018      	b.n	123f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   123c4:	2316      	movs	r3, #22
   123c6:	18fb      	adds	r3, r7, r3
   123c8:	781b      	ldrb	r3, [r3, #0]
   123ca:	220f      	movs	r2, #15
   123cc:	4013      	ands	r3, r2
   123ce:	683a      	ldr	r2, [r7, #0]
   123d0:	7b12      	ldrb	r2, [r2, #12]
   123d2:	189b      	adds	r3, r3, r2
   123d4:	0018      	movs	r0, r3
   123d6:	4bb5      	ldr	r3, [pc, #724]	; (126ac <_adc_set_config+0x370>)
   123d8:	4798      	blx	r3
			start_pin++;
   123da:	2315      	movs	r3, #21
   123dc:	18fb      	adds	r3, r7, r3
   123de:	781a      	ldrb	r2, [r3, #0]
   123e0:	2315      	movs	r3, #21
   123e2:	18fb      	adds	r3, r7, r3
   123e4:	3201      	adds	r2, #1
   123e6:	701a      	strb	r2, [r3, #0]
			offset++;
   123e8:	2316      	movs	r3, #22
   123ea:	18fb      	adds	r3, r7, r3
   123ec:	781a      	ldrb	r2, [r3, #0]
   123ee:	2316      	movs	r3, #22
   123f0:	18fb      	adds	r3, r7, r3
   123f2:	3201      	adds	r2, #1
   123f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   123f6:	2315      	movs	r3, #21
   123f8:	18fa      	adds	r2, r7, r3
   123fa:	230f      	movs	r3, #15
   123fc:	18fb      	adds	r3, r7, r3
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	429a      	cmp	r2, r3
   12404:	d3de      	bcc.n	123c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   12406:	683b      	ldr	r3, [r7, #0]
   12408:	89db      	ldrh	r3, [r3, #14]
   1240a:	0018      	movs	r0, r3
   1240c:	4ba7      	ldr	r3, [pc, #668]	; (126ac <_adc_set_config+0x370>)
   1240e:	4798      	blx	r3
   12410:	e009      	b.n	12426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   12412:	683b      	ldr	r3, [r7, #0]
   12414:	7b1b      	ldrb	r3, [r3, #12]
   12416:	0018      	movs	r0, r3
   12418:	4ba4      	ldr	r3, [pc, #656]	; (126ac <_adc_set_config+0x370>)
   1241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1241c:	683b      	ldr	r3, [r7, #0]
   1241e:	89db      	ldrh	r3, [r3, #14]
   12420:	0018      	movs	r0, r3
   12422:	4ba2      	ldr	r3, [pc, #648]	; (126ac <_adc_set_config+0x370>)
   12424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   12426:	683b      	ldr	r3, [r7, #0]
   12428:	7d5b      	ldrb	r3, [r3, #21]
   1242a:	009b      	lsls	r3, r3, #2
   1242c:	b2da      	uxtb	r2, r3
   1242e:	693b      	ldr	r3, [r7, #16]
   12430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12432:	683b      	ldr	r3, [r7, #0]
   12434:	7d9b      	ldrb	r3, [r3, #22]
   12436:	01db      	lsls	r3, r3, #7
   12438:	b25a      	sxtb	r2, r3
			(config->reference);
   1243a:	683b      	ldr	r3, [r7, #0]
   1243c:	785b      	ldrb	r3, [r3, #1]
   1243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12440:	4313      	orrs	r3, r2
   12442:	b25b      	sxtb	r3, r3
   12444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   12446:	693b      	ldr	r3, [r7, #16]
   12448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1244a:	683b      	ldr	r3, [r7, #0]
   1244c:	791b      	ldrb	r3, [r3, #4]
   1244e:	2b34      	cmp	r3, #52	; 0x34
   12450:	d846      	bhi.n	124e0 <_adc_set_config+0x1a4>
   12452:	009a      	lsls	r2, r3, #2
   12454:	4b96      	ldr	r3, [pc, #600]	; (126b0 <_adc_set_config+0x374>)
   12456:	18d3      	adds	r3, r2, r3
   12458:	681b      	ldr	r3, [r3, #0]
   1245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1245c:	231f      	movs	r3, #31
   1245e:	18fb      	adds	r3, r7, r3
   12460:	683a      	ldr	r2, [r7, #0]
   12462:	7c52      	ldrb	r2, [r2, #17]
   12464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   12466:	2317      	movs	r3, #23
   12468:	18fb      	adds	r3, r7, r3
   1246a:	683a      	ldr	r2, [r7, #0]
   1246c:	7c12      	ldrb	r2, [r2, #16]
   1246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   12470:	2310      	movs	r3, #16
   12472:	61bb      	str	r3, [r7, #24]
		break;
   12474:	e036      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   12476:	231f      	movs	r3, #31
   12478:	18fb      	adds	r3, r7, r3
   1247a:	2201      	movs	r2, #1
   1247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1247e:	2317      	movs	r3, #23
   12480:	18fb      	adds	r3, r7, r3
   12482:	2202      	movs	r2, #2
   12484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   12486:	2310      	movs	r3, #16
   12488:	61bb      	str	r3, [r7, #24]
		break;
   1248a:	e02b      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1248c:	231f      	movs	r3, #31
   1248e:	18fb      	adds	r3, r7, r3
   12490:	2202      	movs	r2, #2
   12492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   12494:	2317      	movs	r3, #23
   12496:	18fb      	adds	r3, r7, r3
   12498:	2204      	movs	r2, #4
   1249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1249c:	2310      	movs	r3, #16
   1249e:	61bb      	str	r3, [r7, #24]
		break;
   124a0:	e020      	b.n	124e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   124a2:	231f      	movs	r3, #31
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	2201      	movs	r2, #1
   124a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   124aa:	2317      	movs	r3, #23
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	2206      	movs	r2, #6
   124b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   124b2:	2310      	movs	r3, #16
   124b4:	61bb      	str	r3, [r7, #24]
		break;
   124b6:	e015      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   124b8:	231f      	movs	r3, #31
   124ba:	18fb      	adds	r3, r7, r3
   124bc:	2200      	movs	r2, #0
   124be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   124c0:	2317      	movs	r3, #23
   124c2:	18fb      	adds	r3, r7, r3
   124c4:	2208      	movs	r2, #8
   124c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   124c8:	2310      	movs	r3, #16
   124ca:	61bb      	str	r3, [r7, #24]
		break;
   124cc:	e00a      	b.n	124e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   124ce:	2330      	movs	r3, #48	; 0x30
   124d0:	61bb      	str	r3, [r7, #24]
		break;
   124d2:	e007      	b.n	124e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   124d4:	2320      	movs	r3, #32
   124d6:	61bb      	str	r3, [r7, #24]
		break;
   124d8:	e004      	b.n	124e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   124da:	2300      	movs	r3, #0
   124dc:	61bb      	str	r3, [r7, #24]
		break;
   124de:	e001      	b.n	124e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   124e0:	2317      	movs	r3, #23
   124e2:	e1ae      	b.n	12842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   124e4:	231f      	movs	r3, #31
   124e6:	18fb      	adds	r3, r7, r3
   124e8:	781b      	ldrb	r3, [r3, #0]
   124ea:	011b      	lsls	r3, r3, #4
   124ec:	b2db      	uxtb	r3, r3
   124ee:	2270      	movs	r2, #112	; 0x70
   124f0:	4013      	ands	r3, r2
   124f2:	b2da      	uxtb	r2, r3
   124f4:	2317      	movs	r3, #23
   124f6:	18fb      	adds	r3, r7, r3
   124f8:	781b      	ldrb	r3, [r3, #0]
   124fa:	4313      	orrs	r3, r2
   124fc:	b2da      	uxtb	r2, r3
   124fe:	693b      	ldr	r3, [r7, #16]
   12500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   12502:	683b      	ldr	r3, [r7, #0]
   12504:	7ddb      	ldrb	r3, [r3, #23]
   12506:	2b3f      	cmp	r3, #63	; 0x3f
   12508:	d901      	bls.n	1250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1250a:	2317      	movs	r3, #23
   1250c:	e199      	b.n	12842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1250e:	683b      	ldr	r3, [r7, #0]
   12510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   12512:	693b      	ldr	r3, [r7, #16]
   12514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   12516:	46c0      	nop			; (mov r8, r8)
   12518:	687b      	ldr	r3, [r7, #4]
   1251a:	0018      	movs	r0, r3
   1251c:	4b65      	ldr	r3, [pc, #404]	; (126b4 <_adc_set_config+0x378>)
   1251e:	4798      	blx	r3
   12520:	1e03      	subs	r3, r0, #0
   12522:	d1f9      	bne.n	12518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   12524:	683b      	ldr	r3, [r7, #0]
   12526:	885a      	ldrh	r2, [r3, #2]
   12528:	69bb      	ldr	r3, [r7, #24]
   1252a:	b29b      	uxth	r3, r3
   1252c:	4313      	orrs	r3, r2
   1252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   12530:	683b      	ldr	r3, [r7, #0]
   12532:	2124      	movs	r1, #36	; 0x24
   12534:	5c5b      	ldrb	r3, [r3, r1]
   12536:	b29b      	uxth	r3, r3
   12538:	00db      	lsls	r3, r3, #3
   1253a:	b29b      	uxth	r3, r3
			resolution |
   1253c:	4313      	orrs	r3, r2
   1253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12540:	683b      	ldr	r3, [r7, #0]
   12542:	7d1b      	ldrb	r3, [r3, #20]
   12544:	b29b      	uxth	r3, r3
   12546:	009b      	lsls	r3, r3, #2
   12548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1254a:	4313      	orrs	r3, r2
   1254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1254e:	683b      	ldr	r3, [r7, #0]
   12550:	7c9b      	ldrb	r3, [r3, #18]
   12552:	b29b      	uxth	r3, r3
   12554:	18db      	adds	r3, r3, r3
   12556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12558:	4313      	orrs	r3, r2
   1255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1255c:	683b      	ldr	r3, [r7, #0]
   1255e:	7cdb      	ldrb	r3, [r3, #19]
   12560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   12562:	4313      	orrs	r3, r2
   12564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   12566:	693b      	ldr	r3, [r7, #16]
   12568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1256a:	683b      	ldr	r3, [r7, #0]
   1256c:	7e1b      	ldrb	r3, [r3, #24]
   1256e:	2b00      	cmp	r3, #0
   12570:	d100      	bne.n	12574 <_adc_set_config+0x238>
   12572:	e0c4      	b.n	126fe <_adc_set_config+0x3c2>
		switch (resolution) {
   12574:	69bb      	ldr	r3, [r7, #24]
   12576:	2b10      	cmp	r3, #16
   12578:	d100      	bne.n	1257c <_adc_set_config+0x240>
   1257a:	e076      	b.n	1266a <_adc_set_config+0x32e>
   1257c:	d802      	bhi.n	12584 <_adc_set_config+0x248>
   1257e:	2b00      	cmp	r3, #0
   12580:	d04d      	beq.n	1261e <_adc_set_config+0x2e2>
   12582:	e0bc      	b.n	126fe <_adc_set_config+0x3c2>
   12584:	2b20      	cmp	r3, #32
   12586:	d023      	beq.n	125d0 <_adc_set_config+0x294>
   12588:	2b30      	cmp	r3, #48	; 0x30
   1258a:	d000      	beq.n	1258e <_adc_set_config+0x252>
   1258c:	e0b7      	b.n	126fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1258e:	683b      	ldr	r3, [r7, #0]
   12590:	7cdb      	ldrb	r3, [r3, #19]
   12592:	2b00      	cmp	r3, #0
   12594:	d011      	beq.n	125ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   12596:	683b      	ldr	r3, [r7, #0]
   12598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1259a:	2b7f      	cmp	r3, #127	; 0x7f
   1259c:	dc0b      	bgt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1259e:	683b      	ldr	r3, [r7, #0]
   125a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   125a2:	3380      	adds	r3, #128	; 0x80
   125a4:	db07      	blt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   125a6:	683b      	ldr	r3, [r7, #0]
   125a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   125aa:	2b7f      	cmp	r3, #127	; 0x7f
   125ac:	dc03      	bgt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   125ae:	683b      	ldr	r3, [r7, #0]
   125b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   125b2:	3380      	adds	r3, #128	; 0x80
   125b4:	da01      	bge.n	125ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   125b6:	2317      	movs	r3, #23
   125b8:	e143      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	69db      	ldr	r3, [r3, #28]
   125be:	2bff      	cmp	r3, #255	; 0xff
   125c0:	dc04      	bgt.n	125cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   125c2:	683b      	ldr	r3, [r7, #0]
   125c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   125c6:	2bff      	cmp	r3, #255	; 0xff
   125c8:	dc00      	bgt.n	125cc <_adc_set_config+0x290>
   125ca:	e091      	b.n	126f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   125cc:	2317      	movs	r3, #23
   125ce:	e138      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   125d0:	683b      	ldr	r3, [r7, #0]
   125d2:	7cdb      	ldrb	r3, [r3, #19]
   125d4:	2b00      	cmp	r3, #0
   125d6:	d015      	beq.n	12604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   125d8:	683b      	ldr	r3, [r7, #0]
   125da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   125dc:	4a36      	ldr	r2, [pc, #216]	; (126b8 <_adc_set_config+0x37c>)
   125de:	4293      	cmp	r3, r2
   125e0:	dc0e      	bgt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   125e2:	683b      	ldr	r3, [r7, #0]
   125e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   125e6:	4a35      	ldr	r2, [pc, #212]	; (126bc <_adc_set_config+0x380>)
   125e8:	4293      	cmp	r3, r2
   125ea:	db09      	blt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   125ec:	683b      	ldr	r3, [r7, #0]
   125ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   125f0:	4a31      	ldr	r2, [pc, #196]	; (126b8 <_adc_set_config+0x37c>)
   125f2:	4293      	cmp	r3, r2
   125f4:	dc04      	bgt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   125f6:	683b      	ldr	r3, [r7, #0]
   125f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   125fa:	4a30      	ldr	r2, [pc, #192]	; (126bc <_adc_set_config+0x380>)
   125fc:	4293      	cmp	r3, r2
   125fe:	da01      	bge.n	12604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   12600:	2317      	movs	r3, #23
   12602:	e11e      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   12604:	683b      	ldr	r3, [r7, #0]
   12606:	69db      	ldr	r3, [r3, #28]
   12608:	4a2d      	ldr	r2, [pc, #180]	; (126c0 <_adc_set_config+0x384>)
   1260a:	4293      	cmp	r3, r2
   1260c:	dc05      	bgt.n	1261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1260e:	683b      	ldr	r3, [r7, #0]
   12610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   12612:	4a2b      	ldr	r2, [pc, #172]	; (126c0 <_adc_set_config+0x384>)
   12614:	4293      	cmp	r3, r2
   12616:	dc00      	bgt.n	1261a <_adc_set_config+0x2de>
   12618:	e06c      	b.n	126f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1261a:	2317      	movs	r3, #23
   1261c:	e111      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1261e:	683b      	ldr	r3, [r7, #0]
   12620:	7cdb      	ldrb	r3, [r3, #19]
   12622:	2b00      	cmp	r3, #0
   12624:	d015      	beq.n	12652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   12626:	683b      	ldr	r3, [r7, #0]
   12628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1262a:	4a26      	ldr	r2, [pc, #152]	; (126c4 <_adc_set_config+0x388>)
   1262c:	4293      	cmp	r3, r2
   1262e:	dc0e      	bgt.n	1264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   12630:	683b      	ldr	r3, [r7, #0]
   12632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   12634:	4a24      	ldr	r2, [pc, #144]	; (126c8 <_adc_set_config+0x38c>)
   12636:	4293      	cmp	r3, r2
   12638:	db09      	blt.n	1264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1263a:	683b      	ldr	r3, [r7, #0]
   1263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1263e:	4a21      	ldr	r2, [pc, #132]	; (126c4 <_adc_set_config+0x388>)
   12640:	4293      	cmp	r3, r2
   12642:	dc04      	bgt.n	1264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   12644:	683b      	ldr	r3, [r7, #0]
   12646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   12648:	4a1f      	ldr	r2, [pc, #124]	; (126c8 <_adc_set_config+0x38c>)
   1264a:	4293      	cmp	r3, r2
   1264c:	da01      	bge.n	12652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1264e:	2317      	movs	r3, #23
   12650:	e0f7      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   12652:	683b      	ldr	r3, [r7, #0]
   12654:	69db      	ldr	r3, [r3, #28]
   12656:	4a1d      	ldr	r2, [pc, #116]	; (126cc <_adc_set_config+0x390>)
   12658:	4293      	cmp	r3, r2
   1265a:	dc04      	bgt.n	12666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1265c:	683b      	ldr	r3, [r7, #0]
   1265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   12660:	4a1a      	ldr	r2, [pc, #104]	; (126cc <_adc_set_config+0x390>)
   12662:	4293      	cmp	r3, r2
   12664:	dd48      	ble.n	126f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   12666:	2317      	movs	r3, #23
   12668:	e0eb      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1266a:	683b      	ldr	r3, [r7, #0]
   1266c:	7cdb      	ldrb	r3, [r3, #19]
   1266e:	2b00      	cmp	r3, #0
   12670:	d032      	beq.n	126d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   12672:	683b      	ldr	r3, [r7, #0]
   12674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   12676:	4a16      	ldr	r2, [pc, #88]	; (126d0 <_adc_set_config+0x394>)
   12678:	4293      	cmp	r3, r2
   1267a:	dc0e      	bgt.n	1269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1267c:	683b      	ldr	r3, [r7, #0]
   1267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   12680:	4a14      	ldr	r2, [pc, #80]	; (126d4 <_adc_set_config+0x398>)
   12682:	4293      	cmp	r3, r2
   12684:	db09      	blt.n	1269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   12686:	683b      	ldr	r3, [r7, #0]
   12688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1268a:	4a11      	ldr	r2, [pc, #68]	; (126d0 <_adc_set_config+0x394>)
   1268c:	4293      	cmp	r3, r2
   1268e:	dc04      	bgt.n	1269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   12690:	683b      	ldr	r3, [r7, #0]
   12692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   12694:	4a0f      	ldr	r2, [pc, #60]	; (126d4 <_adc_set_config+0x398>)
   12696:	4293      	cmp	r3, r2
   12698:	da1e      	bge.n	126d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1269a:	2317      	movs	r3, #23
   1269c:	e0d1      	b.n	12842 <_adc_set_config+0x506>
   1269e:	46c0      	nop			; (mov r8, r8)
   126a0:	00012115 	.word	0x00012115
   126a4:	00029839 	.word	0x00029839
   126a8:	0002987d 	.word	0x0002987d
   126ac:	000122c5 	.word	0x000122c5
   126b0:	00035470 	.word	0x00035470
   126b4:	000121f1 	.word	0x000121f1
   126b8:	000001ff 	.word	0x000001ff
   126bc:	fffffe00 	.word	0xfffffe00
   126c0:	000003ff 	.word	0x000003ff
   126c4:	000007ff 	.word	0x000007ff
   126c8:	fffff800 	.word	0xfffff800
   126cc:	00000fff 	.word	0x00000fff
   126d0:	00007fff 	.word	0x00007fff
   126d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	69db      	ldr	r3, [r3, #28]
   126dc:	4a5b      	ldr	r2, [pc, #364]	; (1284c <_adc_set_config+0x510>)
   126de:	4293      	cmp	r3, r2
   126e0:	dc04      	bgt.n	126ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   126e2:	683b      	ldr	r3, [r7, #0]
   126e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   126e6:	4a59      	ldr	r2, [pc, #356]	; (1284c <_adc_set_config+0x510>)
   126e8:	4293      	cmp	r3, r2
   126ea:	dd07      	ble.n	126fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   126ec:	2317      	movs	r3, #23
   126ee:	e0a8      	b.n	12842 <_adc_set_config+0x506>
			break;
   126f0:	46c0      	nop			; (mov r8, r8)
   126f2:	e004      	b.n	126fe <_adc_set_config+0x3c2>
			break;
   126f4:	46c0      	nop			; (mov r8, r8)
   126f6:	e002      	b.n	126fe <_adc_set_config+0x3c2>
			break;
   126f8:	46c0      	nop			; (mov r8, r8)
   126fa:	e000      	b.n	126fe <_adc_set_config+0x3c2>
			}
			break;
   126fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   126fe:	46c0      	nop			; (mov r8, r8)
   12700:	687b      	ldr	r3, [r7, #4]
   12702:	0018      	movs	r0, r3
   12704:	4b52      	ldr	r3, [pc, #328]	; (12850 <_adc_set_config+0x514>)
   12706:	4798      	blx	r3
   12708:	1e03      	subs	r3, r0, #0
   1270a:	d1f9      	bne.n	12700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1270c:	683b      	ldr	r3, [r7, #0]
   1270e:	7e1a      	ldrb	r2, [r3, #24]
   12710:	693b      	ldr	r3, [r7, #16]
   12712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   12714:	46c0      	nop			; (mov r8, r8)
   12716:	687b      	ldr	r3, [r7, #4]
   12718:	0018      	movs	r0, r3
   1271a:	4b4d      	ldr	r3, [pc, #308]	; (12850 <_adc_set_config+0x514>)
   1271c:	4798      	blx	r3
   1271e:	1e03      	subs	r3, r0, #0
   12720:	d1f9      	bne.n	12716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   12722:	683b      	ldr	r3, [r7, #0]
   12724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   12726:	b29a      	uxth	r2, r3
   12728:	693b      	ldr	r3, [r7, #16]
   1272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1272c:	46c0      	nop			; (mov r8, r8)
   1272e:	687b      	ldr	r3, [r7, #4]
   12730:	0018      	movs	r0, r3
   12732:	4b47      	ldr	r3, [pc, #284]	; (12850 <_adc_set_config+0x514>)
   12734:	4798      	blx	r3
   12736:	1e03      	subs	r3, r0, #0
   12738:	d1f9      	bne.n	1272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1273a:	683b      	ldr	r3, [r7, #0]
   1273c:	6a1b      	ldr	r3, [r3, #32]
   1273e:	b29a      	uxth	r2, r3
   12740:	693b      	ldr	r3, [r7, #16]
   12742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   12744:	2314      	movs	r3, #20
   12746:	18fb      	adds	r3, r7, r3
   12748:	683a      	ldr	r2, [r7, #0]
   1274a:	212c      	movs	r1, #44	; 0x2c
   1274c:	5c52      	ldrb	r2, [r2, r1]
   1274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   12750:	2314      	movs	r3, #20
   12752:	18fb      	adds	r3, r7, r3
   12754:	781b      	ldrb	r3, [r3, #0]
   12756:	2b00      	cmp	r3, #0
   12758:	d006      	beq.n	12768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1275a:	2314      	movs	r3, #20
   1275c:	18fb      	adds	r3, r7, r3
   1275e:	781a      	ldrb	r2, [r3, #0]
   12760:	2314      	movs	r3, #20
   12762:	18fb      	adds	r3, r7, r3
   12764:	3a01      	subs	r2, #1
   12766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   12768:	2314      	movs	r3, #20
   1276a:	18fb      	adds	r3, r7, r3
   1276c:	781b      	ldrb	r3, [r3, #0]
   1276e:	2b0f      	cmp	r3, #15
   12770:	d804      	bhi.n	1277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   12772:	683b      	ldr	r3, [r7, #0]
   12774:	222b      	movs	r2, #43	; 0x2b
   12776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   12778:	2b0f      	cmp	r3, #15
   1277a:	d901      	bls.n	12780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1277c:	2317      	movs	r3, #23
   1277e:	e060      	b.n	12842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   12780:	46c0      	nop			; (mov r8, r8)
   12782:	687b      	ldr	r3, [r7, #4]
   12784:	0018      	movs	r0, r3
   12786:	4b32      	ldr	r3, [pc, #200]	; (12850 <_adc_set_config+0x514>)
   12788:	4798      	blx	r3
   1278a:	1e03      	subs	r3, r0, #0
   1278c:	d1f9      	bne.n	12782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1278e:	683b      	ldr	r3, [r7, #0]
   12790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   12792:	683a      	ldr	r2, [r7, #0]
   12794:	212b      	movs	r1, #43	; 0x2b
   12796:	5c52      	ldrb	r2, [r2, r1]
   12798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1279c:	2214      	movs	r2, #20
   1279e:	18ba      	adds	r2, r7, r2
   127a0:	7812      	ldrb	r2, [r2, #0]
   127a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   127a4:	4313      	orrs	r3, r2
			config->negative_input |
   127a6:	683a      	ldr	r2, [r7, #0]
   127a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   127aa:	4313      	orrs	r3, r2
			config->positive_input;
   127ac:	683a      	ldr	r2, [r7, #0]
   127ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   127b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   127b2:	693b      	ldr	r3, [r7, #16]
   127b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   127b6:	683b      	ldr	r3, [r7, #0]
   127b8:	222a      	movs	r2, #42	; 0x2a
   127ba:	5c9a      	ldrb	r2, [r3, r2]
   127bc:	693b      	ldr	r3, [r7, #16]
   127be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   127c0:	693b      	ldr	r3, [r7, #16]
   127c2:	220f      	movs	r2, #15
   127c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   127c6:	683b      	ldr	r3, [r7, #0]
   127c8:	2224      	movs	r2, #36	; 0x24
   127ca:	5c9b      	ldrb	r3, [r3, r2]
   127cc:	2b00      	cmp	r3, #0
   127ce:	d01e      	beq.n	1280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   127d0:	683b      	ldr	r3, [r7, #0]
   127d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   127d4:	4a1f      	ldr	r2, [pc, #124]	; (12854 <_adc_set_config+0x518>)
   127d6:	4293      	cmp	r3, r2
   127d8:	d901      	bls.n	127de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   127da:	2317      	movs	r3, #23
   127dc:	e031      	b.n	12842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   127de:	683b      	ldr	r3, [r7, #0]
   127e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   127e2:	693b      	ldr	r3, [r7, #16]
   127e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   127e6:	683b      	ldr	r3, [r7, #0]
   127e8:	2228      	movs	r2, #40	; 0x28
   127ea:	5e9b      	ldrsh	r3, [r3, r2]
   127ec:	4a1a      	ldr	r2, [pc, #104]	; (12858 <_adc_set_config+0x51c>)
   127ee:	4293      	cmp	r3, r2
   127f0:	dc05      	bgt.n	127fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   127f2:	683b      	ldr	r3, [r7, #0]
   127f4:	2228      	movs	r2, #40	; 0x28
   127f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   127f8:	4a18      	ldr	r2, [pc, #96]	; (1285c <_adc_set_config+0x520>)
   127fa:	4293      	cmp	r3, r2
   127fc:	da01      	bge.n	12802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   127fe:	2317      	movs	r3, #23
   12800:	e01f      	b.n	12842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   12802:	683b      	ldr	r3, [r7, #0]
   12804:	2228      	movs	r2, #40	; 0x28
   12806:	5e9b      	ldrsh	r3, [r3, r2]
   12808:	b29a      	uxth	r2, r3
   1280a:	693b      	ldr	r3, [r7, #16]
   1280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1280e:	4b14      	ldr	r3, [pc, #80]	; (12860 <_adc_set_config+0x524>)
   12810:	681b      	ldr	r3, [r3, #0]
   12812:	08db      	lsrs	r3, r3, #3
   12814:	b29b      	uxth	r3, r3
   12816:	021b      	lsls	r3, r3, #8
   12818:	b29a      	uxth	r2, r3
   1281a:	23e0      	movs	r3, #224	; 0xe0
   1281c:	00db      	lsls	r3, r3, #3
   1281e:	4013      	ands	r3, r2
   12820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   12822:	4b10      	ldr	r3, [pc, #64]	; (12864 <_adc_set_config+0x528>)
   12824:	685c      	ldr	r4, [r3, #4]
   12826:	681b      	ldr	r3, [r3, #0]
   12828:	0161      	lsls	r1, r4, #5
   1282a:	0edd      	lsrs	r5, r3, #27
   1282c:	430d      	orrs	r5, r1
   1282e:	0ee6      	lsrs	r6, r4, #27
   12830:	b2ab      	uxth	r3, r5
   12832:	21ff      	movs	r1, #255	; 0xff
   12834:	400b      	ands	r3, r1
   12836:	b29b      	uxth	r3, r3
			) |
   12838:	4313      	orrs	r3, r2
   1283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1283c:	693b      	ldr	r3, [r7, #16]
   1283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   12840:	2300      	movs	r3, #0
}
   12842:	0018      	movs	r0, r3
   12844:	46bd      	mov	sp, r7
   12846:	b009      	add	sp, #36	; 0x24
   12848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1284a:	46c0      	nop			; (mov r8, r8)
   1284c:	0000ffff 	.word	0x0000ffff
   12850:	000121f1 	.word	0x000121f1
   12854:	00000fff 	.word	0x00000fff
   12858:	000007ff 	.word	0x000007ff
   1285c:	fffff800 	.word	0xfffff800
   12860:	00806024 	.word	0x00806024
   12864:	00806020 	.word	0x00806020

00012868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   12868:	b580      	push	{r7, lr}
   1286a:	b086      	sub	sp, #24
   1286c:	af00      	add	r7, sp, #0
   1286e:	60f8      	str	r0, [r7, #12]
   12870:	60b9      	str	r1, [r7, #8]
   12872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   12874:	68fb      	ldr	r3, [r7, #12]
   12876:	68ba      	ldr	r2, [r7, #8]
   12878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1287a:	2380      	movs	r3, #128	; 0x80
   1287c:	025b      	lsls	r3, r3, #9
   1287e:	0019      	movs	r1, r3
   12880:	2002      	movs	r0, #2
   12882:	4b32      	ldr	r3, [pc, #200]	; (1294c <adc_init+0xe4>)
   12884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   12886:	68bb      	ldr	r3, [r7, #8]
   12888:	781b      	ldrb	r3, [r3, #0]
   1288a:	b2db      	uxtb	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2301      	movs	r3, #1
   12890:	4013      	ands	r3, r2
   12892:	d001      	beq.n	12898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   12894:	2305      	movs	r3, #5
   12896:	e055      	b.n	12944 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   12898:	68bb      	ldr	r3, [r7, #8]
   1289a:	781b      	ldrb	r3, [r3, #0]
   1289c:	b2db      	uxtb	r3, r3
   1289e:	001a      	movs	r2, r3
   128a0:	2302      	movs	r3, #2
   128a2:	4013      	ands	r3, r2
   128a4:	d001      	beq.n	128aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   128a6:	231c      	movs	r3, #28
   128a8:	e04c      	b.n	12944 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	785a      	ldrb	r2, [r3, #1]
   128ae:	68fb      	ldr	r3, [r7, #12]
   128b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	791b      	ldrb	r3, [r3, #4]
   128b6:	2b00      	cmp	r3, #0
   128b8:	d102      	bne.n	128c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   128ba:	2001      	movs	r0, #1
   128bc:	4b24      	ldr	r3, [pc, #144]	; (12950 <adc_init+0xe8>)
   128be:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   128c0:	2317      	movs	r3, #23
   128c2:	18fb      	adds	r3, r7, r3
   128c4:	2200      	movs	r2, #0
   128c6:	701a      	strb	r2, [r3, #0]
   128c8:	e00e      	b.n	128e8 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   128ca:	2317      	movs	r3, #23
   128cc:	18fb      	adds	r3, r7, r3
   128ce:	781a      	ldrb	r2, [r3, #0]
   128d0:	68fb      	ldr	r3, [r7, #12]
   128d2:	3202      	adds	r2, #2
   128d4:	0092      	lsls	r2, r2, #2
   128d6:	2100      	movs	r1, #0
   128d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   128da:	2317      	movs	r3, #23
   128dc:	18fb      	adds	r3, r7, r3
   128de:	781a      	ldrb	r2, [r3, #0]
   128e0:	2317      	movs	r3, #23
   128e2:	18fb      	adds	r3, r7, r3
   128e4:	3201      	adds	r2, #1
   128e6:	701a      	strb	r2, [r3, #0]
   128e8:	2317      	movs	r3, #23
   128ea:	18fb      	adds	r3, r7, r3
   128ec:	781b      	ldrb	r3, [r3, #0]
   128ee:	2b02      	cmp	r3, #2
   128f0:	d9eb      	bls.n	128ca <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   128f2:	68fb      	ldr	r3, [r7, #12]
   128f4:	2200      	movs	r2, #0
   128f6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   128f8:	68fb      	ldr	r3, [r7, #12]
   128fa:	2200      	movs	r2, #0
   128fc:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   128fe:	68fb      	ldr	r3, [r7, #12]
   12900:	2200      	movs	r2, #0
   12902:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   12904:	68fb      	ldr	r3, [r7, #12]
   12906:	2200      	movs	r2, #0
   12908:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1290a:	4b12      	ldr	r3, [pc, #72]	; (12954 <adc_init+0xec>)
   1290c:	68fa      	ldr	r2, [r7, #12]
   1290e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   12910:	687b      	ldr	r3, [r7, #4]
   12912:	222a      	movs	r2, #42	; 0x2a
   12914:	5c9b      	ldrb	r3, [r3, r2]
   12916:	2b00      	cmp	r3, #0
   12918:	d10a      	bne.n	12930 <adc_init+0xc8>
			!config->freerunning) {
   1291a:	687b      	ldr	r3, [r7, #4]
   1291c:	7d1b      	ldrb	r3, [r3, #20]
   1291e:	2201      	movs	r2, #1
   12920:	4053      	eors	r3, r2
   12922:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   12924:	2b00      	cmp	r3, #0
   12926:	d003      	beq.n	12930 <adc_init+0xc8>
		module_inst->software_trigger = true;
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	2201      	movs	r2, #1
   1292c:	775a      	strb	r2, [r3, #29]
   1292e:	e002      	b.n	12936 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   12930:	68fb      	ldr	r3, [r7, #12]
   12932:	2200      	movs	r2, #0
   12934:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   12936:	687a      	ldr	r2, [r7, #4]
   12938:	68fb      	ldr	r3, [r7, #12]
   1293a:	0011      	movs	r1, r2
   1293c:	0018      	movs	r0, r3
   1293e:	4b06      	ldr	r3, [pc, #24]	; (12958 <adc_init+0xf0>)
   12940:	4798      	blx	r3
   12942:	0003      	movs	r3, r0
}
   12944:	0018      	movs	r0, r3
   12946:	46bd      	mov	sp, r7
   12948:	b006      	add	sp, #24
   1294a:	bd80      	pop	{r7, pc}
   1294c:	0001212d 	.word	0x0001212d
   12950:	000121b1 	.word	0x000121b1
   12954:	2000458c 	.word	0x2000458c
   12958:	0001233d 	.word	0x0001233d

0001295c <adc_is_syncing>:
{
   1295c:	b580      	push	{r7, lr}
   1295e:	b084      	sub	sp, #16
   12960:	af00      	add	r7, sp, #0
   12962:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	681b      	ldr	r3, [r3, #0]
   12968:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1296a:	68fb      	ldr	r3, [r7, #12]
   1296c:	7e5b      	ldrb	r3, [r3, #25]
   1296e:	b2db      	uxtb	r3, r3
   12970:	b25b      	sxtb	r3, r3
   12972:	2b00      	cmp	r3, #0
   12974:	da01      	bge.n	1297a <adc_is_syncing+0x1e>
		return true;
   12976:	2301      	movs	r3, #1
   12978:	e000      	b.n	1297c <adc_is_syncing+0x20>
	return false;
   1297a:	2300      	movs	r3, #0
}
   1297c:	0018      	movs	r0, r3
   1297e:	46bd      	mov	sp, r7
   12980:	b004      	add	sp, #16
   12982:	bd80      	pop	{r7, pc}

00012984 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12984:	b580      	push	{r7, lr}
   12986:	b084      	sub	sp, #16
   12988:	af00      	add	r7, sp, #0
   1298a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1298c:	687b      	ldr	r3, [r7, #4]
   1298e:	681b      	ldr	r3, [r3, #0]
   12990:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12992:	46c0      	nop			; (mov r8, r8)
   12994:	687b      	ldr	r3, [r7, #4]
   12996:	0018      	movs	r0, r3
   12998:	4b0b      	ldr	r3, [pc, #44]	; (129c8 <adc_start_conversion+0x44>)
   1299a:	4798      	blx	r3
   1299c:	1e03      	subs	r3, r0, #0
   1299e:	d1f9      	bne.n	12994 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   129a0:	68fb      	ldr	r3, [r7, #12]
   129a2:	7b1b      	ldrb	r3, [r3, #12]
   129a4:	b2db      	uxtb	r3, r3
   129a6:	2202      	movs	r2, #2
   129a8:	4313      	orrs	r3, r2
   129aa:	b2da      	uxtb	r2, r3
   129ac:	68fb      	ldr	r3, [r7, #12]
   129ae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   129b0:	46c0      	nop			; (mov r8, r8)
   129b2:	687b      	ldr	r3, [r7, #4]
   129b4:	0018      	movs	r0, r3
   129b6:	4b04      	ldr	r3, [pc, #16]	; (129c8 <adc_start_conversion+0x44>)
   129b8:	4798      	blx	r3
   129ba:	1e03      	subs	r3, r0, #0
   129bc:	d1f9      	bne.n	129b2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   129be:	46c0      	nop			; (mov r8, r8)
   129c0:	46bd      	mov	sp, r7
   129c2:	b004      	add	sp, #16
   129c4:	bd80      	pop	{r7, pc}
   129c6:	46c0      	nop			; (mov r8, r8)
   129c8:	0001295d 	.word	0x0001295d

000129cc <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   129cc:	b580      	push	{r7, lr}
   129ce:	b084      	sub	sp, #16
   129d0:	af00      	add	r7, sp, #0
   129d2:	6078      	str	r0, [r7, #4]
   129d4:	000a      	movs	r2, r1
   129d6:	1cfb      	adds	r3, r7, #3
   129d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   129da:	687b      	ldr	r3, [r7, #4]
   129dc:	681b      	ldr	r3, [r3, #0]
   129de:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   129e0:	68fb      	ldr	r3, [r7, #12]
   129e2:	1cfa      	adds	r2, r7, #3
   129e4:	7812      	ldrb	r2, [r2, #0]
   129e6:	759a      	strb	r2, [r3, #22]
}
   129e8:	46c0      	nop			; (mov r8, r8)
   129ea:	46bd      	mov	sp, r7
   129ec:	b004      	add	sp, #16
   129ee:	bd80      	pop	{r7, pc}

000129f0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   129f0:	b580      	push	{r7, lr}
   129f2:	b084      	sub	sp, #16
   129f4:	af00      	add	r7, sp, #0
   129f6:	0002      	movs	r2, r0
   129f8:	1dfb      	adds	r3, r7, #7
   129fa:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   129fc:	1dfb      	adds	r3, r7, #7
   129fe:	781a      	ldrb	r2, [r3, #0]
   12a00:	4b47      	ldr	r3, [pc, #284]	; (12b20 <_adc_interrupt_handler+0x130>)
   12a02:	0092      	lsls	r2, r2, #2
   12a04:	58d3      	ldr	r3, [r2, r3]
   12a06:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12a08:	68fb      	ldr	r3, [r7, #12]
   12a0a:	681b      	ldr	r3, [r3, #0]
   12a0c:	7e1b      	ldrb	r3, [r3, #24]
   12a0e:	b2da      	uxtb	r2, r3
   12a10:	68fb      	ldr	r3, [r7, #12]
   12a12:	681b      	ldr	r3, [r3, #0]
   12a14:	7ddb      	ldrb	r3, [r3, #23]
   12a16:	b2db      	uxtb	r3, r3
   12a18:	4013      	ands	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12a1e:	68bb      	ldr	r3, [r7, #8]
   12a20:	2201      	movs	r2, #1
   12a22:	4013      	ands	r3, r2
   12a24:	d045      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12a26:	68fb      	ldr	r3, [r7, #12]
   12a28:	681b      	ldr	r3, [r3, #0]
   12a2a:	2201      	movs	r2, #1
   12a2c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12a2e:	46c0      	nop			; (mov r8, r8)
   12a30:	68fb      	ldr	r3, [r7, #12]
   12a32:	0018      	movs	r0, r3
   12a34:	4b3b      	ldr	r3, [pc, #236]	; (12b24 <_adc_interrupt_handler+0x134>)
   12a36:	4798      	blx	r3
   12a38:	1e03      	subs	r3, r0, #0
   12a3a:	d1f9      	bne.n	12a30 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12a3c:	68fb      	ldr	r3, [r7, #12]
   12a3e:	695b      	ldr	r3, [r3, #20]
   12a40:	1c99      	adds	r1, r3, #2
   12a42:	68fa      	ldr	r2, [r7, #12]
   12a44:	6151      	str	r1, [r2, #20]
   12a46:	68fa      	ldr	r2, [r7, #12]
   12a48:	6812      	ldr	r2, [r2, #0]
   12a4a:	8b52      	ldrh	r2, [r2, #26]
   12a4c:	b292      	uxth	r2, r2
   12a4e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12a50:	68fb      	ldr	r3, [r7, #12]
   12a52:	8b1b      	ldrh	r3, [r3, #24]
   12a54:	b29b      	uxth	r3, r3
   12a56:	3b01      	subs	r3, #1
   12a58:	b29b      	uxth	r3, r3
   12a5a:	68fa      	ldr	r2, [r7, #12]
   12a5c:	1c19      	adds	r1, r3, #0
   12a5e:	8311      	strh	r1, [r2, #24]
   12a60:	2b00      	cmp	r3, #0
   12a62:	d008      	beq.n	12a76 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12a64:	68fb      	ldr	r3, [r7, #12]
   12a66:	7f5b      	ldrb	r3, [r3, #29]
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d022      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12a6c:	68fb      	ldr	r3, [r7, #12]
   12a6e:	0018      	movs	r0, r3
   12a70:	4b2d      	ldr	r3, [pc, #180]	; (12b28 <_adc_interrupt_handler+0x138>)
   12a72:	4798      	blx	r3
   12a74:	e01d      	b.n	12ab2 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12a76:	68fb      	ldr	r3, [r7, #12]
   12a78:	2101      	movs	r1, #1
   12a7a:	0018      	movs	r0, r3
   12a7c:	4b2b      	ldr	r3, [pc, #172]	; (12b2c <_adc_interrupt_handler+0x13c>)
   12a7e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12a80:	68fb      	ldr	r3, [r7, #12]
   12a82:	7f1b      	ldrb	r3, [r3, #28]
   12a84:	b2db      	uxtb	r3, r3
   12a86:	2b05      	cmp	r3, #5
   12a88:	d113      	bne.n	12ab2 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12a8a:	68fb      	ldr	r3, [r7, #12]
   12a8c:	2200      	movs	r2, #0
   12a8e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12a90:	68fb      	ldr	r3, [r7, #12]
   12a92:	7edb      	ldrb	r3, [r3, #27]
   12a94:	001a      	movs	r2, r3
   12a96:	2301      	movs	r3, #1
   12a98:	4013      	ands	r3, r2
   12a9a:	d00a      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12a9c:	68fb      	ldr	r3, [r7, #12]
   12a9e:	7e9b      	ldrb	r3, [r3, #26]
   12aa0:	001a      	movs	r2, r3
   12aa2:	2301      	movs	r3, #1
   12aa4:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12aa6:	d004      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12aa8:	68fb      	ldr	r3, [r7, #12]
   12aaa:	689b      	ldr	r3, [r3, #8]
   12aac:	68fa      	ldr	r2, [r7, #12]
   12aae:	0010      	movs	r0, r2
   12ab0:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12ab2:	68bb      	ldr	r3, [r7, #8]
   12ab4:	2204      	movs	r2, #4
   12ab6:	4013      	ands	r3, r2
   12ab8:	d014      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12aba:	68fb      	ldr	r3, [r7, #12]
   12abc:	681b      	ldr	r3, [r3, #0]
   12abe:	2204      	movs	r2, #4
   12ac0:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ac2:	68fb      	ldr	r3, [r7, #12]
   12ac4:	7edb      	ldrb	r3, [r3, #27]
   12ac6:	001a      	movs	r2, r3
   12ac8:	2302      	movs	r3, #2
   12aca:	4013      	ands	r3, r2
   12acc:	d00a      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12ace:	68fb      	ldr	r3, [r7, #12]
   12ad0:	7e9b      	ldrb	r3, [r3, #26]
   12ad2:	001a      	movs	r2, r3
   12ad4:	2302      	movs	r3, #2
   12ad6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ad8:	d004      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12ada:	68fb      	ldr	r3, [r7, #12]
   12adc:	68db      	ldr	r3, [r3, #12]
   12ade:	68fa      	ldr	r2, [r7, #12]
   12ae0:	0010      	movs	r0, r2
   12ae2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12ae4:	68bb      	ldr	r3, [r7, #8]
   12ae6:	2202      	movs	r2, #2
   12ae8:	4013      	ands	r3, r2
   12aea:	d014      	beq.n	12b16 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12aec:	68fb      	ldr	r3, [r7, #12]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	2202      	movs	r2, #2
   12af2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12af4:	68fb      	ldr	r3, [r7, #12]
   12af6:	7edb      	ldrb	r3, [r3, #27]
   12af8:	001a      	movs	r2, r3
   12afa:	2304      	movs	r3, #4
   12afc:	4013      	ands	r3, r2
   12afe:	d00a      	beq.n	12b16 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7e9b      	ldrb	r3, [r3, #26]
   12b04:	001a      	movs	r2, r3
   12b06:	2304      	movs	r3, #4
   12b08:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12b0a:	d004      	beq.n	12b16 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	691b      	ldr	r3, [r3, #16]
   12b10:	68fa      	ldr	r2, [r7, #12]
   12b12:	0010      	movs	r0, r2
   12b14:	4798      	blx	r3
		}
	}
}
   12b16:	46c0      	nop			; (mov r8, r8)
   12b18:	46bd      	mov	sp, r7
   12b1a:	b004      	add	sp, #16
   12b1c:	bd80      	pop	{r7, pc}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	2000458c 	.word	0x2000458c
   12b24:	0001295d 	.word	0x0001295d
   12b28:	00012985 	.word	0x00012985
   12b2c:	000129cd 	.word	0x000129cd

00012b30 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12b30:	b580      	push	{r7, lr}
   12b32:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12b34:	2000      	movs	r0, #0
   12b36:	4b02      	ldr	r3, [pc, #8]	; (12b40 <ADC_Handler+0x10>)
   12b38:	4798      	blx	r3
}
   12b3a:	46c0      	nop			; (mov r8, r8)
   12b3c:	46bd      	mov	sp, r7
   12b3e:	bd80      	pop	{r7, pc}
   12b40:	000129f1 	.word	0x000129f1

00012b44 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12b44:	b580      	push	{r7, lr}
   12b46:	b082      	sub	sp, #8
   12b48:	af00      	add	r7, sp, #0
   12b4a:	0002      	movs	r2, r0
   12b4c:	1dfb      	adds	r3, r7, #7
   12b4e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12b50:	4a07      	ldr	r2, [pc, #28]	; (12b70 <system_interrupt_disable+0x2c>)
   12b52:	1dfb      	adds	r3, r7, #7
   12b54:	781b      	ldrb	r3, [r3, #0]
   12b56:	0019      	movs	r1, r3
   12b58:	231f      	movs	r3, #31
   12b5a:	400b      	ands	r3, r1
   12b5c:	2101      	movs	r1, #1
   12b5e:	4099      	lsls	r1, r3
   12b60:	000b      	movs	r3, r1
   12b62:	0019      	movs	r1, r3
   12b64:	2380      	movs	r3, #128	; 0x80
   12b66:	50d1      	str	r1, [r2, r3]
}
   12b68:	46c0      	nop			; (mov r8, r8)
   12b6a:	46bd      	mov	sp, r7
   12b6c:	b002      	add	sp, #8
   12b6e:	bd80      	pop	{r7, pc}
   12b70:	e000e100 	.word	0xe000e100

00012b74 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12b74:	b580      	push	{r7, lr}
   12b76:	b084      	sub	sp, #16
   12b78:	af00      	add	r7, sp, #0
   12b7a:	0002      	movs	r2, r0
   12b7c:	1dfb      	adds	r3, r7, #7
   12b7e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12b80:	1dfb      	adds	r3, r7, #7
   12b82:	781a      	ldrb	r2, [r3, #0]
   12b84:	4b37      	ldr	r3, [pc, #220]	; (12c64 <_dac_interrupt_handler+0xf0>)
   12b86:	0092      	lsls	r2, r2, #2
   12b88:	58d3      	ldr	r3, [r2, r3]
   12b8a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12b8c:	68fb      	ldr	r3, [r7, #12]
   12b8e:	681b      	ldr	r3, [r3, #0]
   12b90:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12b92:	68bb      	ldr	r3, [r7, #8]
   12b94:	799b      	ldrb	r3, [r3, #6]
   12b96:	b2db      	uxtb	r3, r3
   12b98:	001a      	movs	r2, r3
   12b9a:	2301      	movs	r3, #1
   12b9c:	4013      	ands	r3, r2
   12b9e:	d00e      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12ba0:	68bb      	ldr	r3, [r7, #8]
   12ba2:	2201      	movs	r2, #1
   12ba4:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12ba6:	68fb      	ldr	r3, [r7, #12]
   12ba8:	3314      	adds	r3, #20
   12baa:	2b00      	cmp	r3, #0
   12bac:	d007      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12bae:	68fb      	ldr	r3, [r7, #12]
   12bb0:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12bb2:	2b00      	cmp	r3, #0
   12bb4:	d003      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12bb6:	68fb      	ldr	r3, [r7, #12]
   12bb8:	699b      	ldr	r3, [r3, #24]
   12bba:	2000      	movs	r0, #0
   12bbc:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12bbe:	68bb      	ldr	r3, [r7, #8]
   12bc0:	799b      	ldrb	r3, [r3, #6]
   12bc2:	b2db      	uxtb	r3, r3
   12bc4:	001a      	movs	r2, r3
   12bc6:	2302      	movs	r3, #2
   12bc8:	4013      	ands	r3, r2
   12bca:	d047      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12bcc:	68bb      	ldr	r3, [r7, #8]
   12bce:	2202      	movs	r2, #2
   12bd0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12bd2:	68fb      	ldr	r3, [r7, #12]
   12bd4:	899b      	ldrh	r3, [r3, #12]
   12bd6:	b29b      	uxth	r3, r3
   12bd8:	2b00      	cmp	r3, #0
   12bda:	d033      	beq.n	12c44 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12bdc:	68fb      	ldr	r3, [r7, #12]
   12bde:	689a      	ldr	r2, [r3, #8]
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	89db      	ldrh	r3, [r3, #14]
   12be4:	b29b      	uxth	r3, r3
   12be6:	1c59      	adds	r1, r3, #1
   12be8:	b288      	uxth	r0, r1
   12bea:	68f9      	ldr	r1, [r7, #12]
   12bec:	81c8      	strh	r0, [r1, #14]
   12bee:	005b      	lsls	r3, r3, #1
   12bf0:	18d3      	adds	r3, r2, r3
   12bf2:	881b      	ldrh	r3, [r3, #0]
   12bf4:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12bf6:	68bb      	ldr	r3, [r7, #8]
   12bf8:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12bfa:	68fb      	ldr	r3, [r7, #12]
   12bfc:	899b      	ldrh	r3, [r3, #12]
   12bfe:	b29b      	uxth	r3, r3
   12c00:	3b01      	subs	r3, #1
   12c02:	b29a      	uxth	r2, r3
   12c04:	68fb      	ldr	r3, [r7, #12]
   12c06:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	899b      	ldrh	r3, [r3, #12]
   12c0c:	b29b      	uxth	r3, r3
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d118      	bne.n	12c44 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12c12:	68fb      	ldr	r3, [r7, #12]
   12c14:	2220      	movs	r2, #32
   12c16:	2100      	movs	r1, #0
   12c18:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12c1a:	68bb      	ldr	r3, [r7, #8]
   12c1c:	2202      	movs	r2, #2
   12c1e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12c20:	68bb      	ldr	r3, [r7, #8]
   12c22:	2202      	movs	r2, #2
   12c24:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12c26:	2019      	movs	r0, #25
   12c28:	4b0f      	ldr	r3, [pc, #60]	; (12c68 <_dac_interrupt_handler+0xf4>)
   12c2a:	4798      	blx	r3

				if ((module->callback) &&
   12c2c:	68fb      	ldr	r3, [r7, #12]
   12c2e:	3314      	adds	r3, #20
   12c30:	2b00      	cmp	r3, #0
   12c32:	d007      	beq.n	12c44 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12c34:	68fb      	ldr	r3, [r7, #12]
   12c36:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12c38:	2b00      	cmp	r3, #0
   12c3a:	d003      	beq.n	12c44 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12c3c:	68fb      	ldr	r3, [r7, #12]
   12c3e:	69db      	ldr	r3, [r3, #28]
   12c40:	2000      	movs	r0, #0
   12c42:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12c44:	68fb      	ldr	r3, [r7, #12]
   12c46:	3314      	adds	r3, #20
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d007      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12c50:	2b00      	cmp	r3, #0
   12c52:	d003      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	695b      	ldr	r3, [r3, #20]
   12c58:	2000      	movs	r0, #0
   12c5a:	4798      	blx	r3
		}
	}
}
   12c5c:	46c0      	nop			; (mov r8, r8)
   12c5e:	46bd      	mov	sp, r7
   12c60:	b004      	add	sp, #16
   12c62:	bd80      	pop	{r7, pc}
   12c64:	20004590 	.word	0x20004590
   12c68:	00012b45 	.word	0x00012b45

00012c6c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12c6c:	b580      	push	{r7, lr}
   12c6e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12c70:	2000      	movs	r0, #0
   12c72:	4b02      	ldr	r3, [pc, #8]	; (12c7c <DAC_Handler+0x10>)
   12c74:	4798      	blx	r3
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	bd80      	pop	{r7, pc}
   12c7c:	00012b75 	.word	0x00012b75

00012c80 <system_interrupt_enter_critical_section>:
{
   12c80:	b580      	push	{r7, lr}
   12c82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12c84:	4b02      	ldr	r3, [pc, #8]	; (12c90 <system_interrupt_enter_critical_section+0x10>)
   12c86:	4798      	blx	r3
}
   12c88:	46c0      	nop			; (mov r8, r8)
   12c8a:	46bd      	mov	sp, r7
   12c8c:	bd80      	pop	{r7, pc}
   12c8e:	46c0      	nop			; (mov r8, r8)
   12c90:	00025ba5 	.word	0x00025ba5

00012c94 <system_interrupt_leave_critical_section>:
{
   12c94:	b580      	push	{r7, lr}
   12c96:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12c98:	4b02      	ldr	r3, [pc, #8]	; (12ca4 <system_interrupt_leave_critical_section+0x10>)
   12c9a:	4798      	blx	r3
}
   12c9c:	46c0      	nop			; (mov r8, r8)
   12c9e:	46bd      	mov	sp, r7
   12ca0:	bd80      	pop	{r7, pc}
   12ca2:	46c0      	nop			; (mov r8, r8)
   12ca4:	00025bf9 	.word	0x00025bf9

00012ca8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12ca8:	b580      	push	{r7, lr}
   12caa:	b086      	sub	sp, #24
   12cac:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12cae:	4b49      	ldr	r3, [pc, #292]	; (12dd4 <DMAC_Handler+0x12c>)
   12cb0:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12cb2:	4b49      	ldr	r3, [pc, #292]	; (12dd8 <DMAC_Handler+0x130>)
   12cb4:	8c1b      	ldrh	r3, [r3, #32]
   12cb6:	b29b      	uxth	r3, r3
   12cb8:	b2da      	uxtb	r2, r3
   12cba:	2317      	movs	r3, #23
   12cbc:	18fb      	adds	r3, r7, r3
   12cbe:	210f      	movs	r1, #15
   12cc0:	400a      	ands	r2, r1
   12cc2:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12cc4:	2317      	movs	r3, #23
   12cc6:	18fb      	adds	r3, r7, r3
   12cc8:	781a      	ldrb	r2, [r3, #0]
   12cca:	4b44      	ldr	r3, [pc, #272]	; (12ddc <DMAC_Handler+0x134>)
   12ccc:	0092      	lsls	r2, r2, #2
   12cce:	58d3      	ldr	r3, [r2, r3]
   12cd0:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12cd2:	4a41      	ldr	r2, [pc, #260]	; (12dd8 <DMAC_Handler+0x130>)
   12cd4:	693b      	ldr	r3, [r7, #16]
   12cd6:	781b      	ldrb	r3, [r3, #0]
   12cd8:	210f      	movs	r1, #15
   12cda:	400b      	ands	r3, r1
   12cdc:	b2d9      	uxtb	r1, r3
   12cde:	233f      	movs	r3, #63	; 0x3f
   12ce0:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12ce2:	493d      	ldr	r1, [pc, #244]	; (12dd8 <DMAC_Handler+0x130>)
   12ce4:	230f      	movs	r3, #15
   12ce6:	18fb      	adds	r3, r7, r3
   12ce8:	224e      	movs	r2, #78	; 0x4e
   12cea:	5c8a      	ldrb	r2, [r1, r2]
   12cec:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12cee:	693b      	ldr	r3, [r7, #16]
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	4a3b      	ldr	r2, [pc, #236]	; (12de0 <DMAC_Handler+0x138>)
   12cf4:	011b      	lsls	r3, r3, #4
   12cf6:	18d3      	adds	r3, r2, r3
   12cf8:	3302      	adds	r3, #2
   12cfa:	881b      	ldrh	r3, [r3, #0]
   12cfc:	b29b      	uxth	r3, r3
   12cfe:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12d00:	693b      	ldr	r3, [r7, #16]
   12d02:	781b      	ldrb	r3, [r3, #0]
   12d04:	4a37      	ldr	r2, [pc, #220]	; (12de4 <DMAC_Handler+0x13c>)
   12d06:	011b      	lsls	r3, r3, #4
   12d08:	18d3      	adds	r3, r2, r3
   12d0a:	3302      	adds	r3, #2
   12d0c:	881b      	ldrh	r3, [r3, #0]
   12d0e:	b29b      	uxth	r3, r3
   12d10:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12d12:	68ba      	ldr	r2, [r7, #8]
   12d14:	687b      	ldr	r3, [r7, #4]
   12d16:	1ad2      	subs	r2, r2, r3
   12d18:	693b      	ldr	r3, [r7, #16]
   12d1a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12d1c:	230f      	movs	r3, #15
   12d1e:	18fb      	adds	r3, r7, r3
   12d20:	781b      	ldrb	r3, [r3, #0]
   12d22:	2201      	movs	r2, #1
   12d24:	4013      	ands	r3, r2
   12d26:	d016      	beq.n	12d56 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12d28:	4a2b      	ldr	r2, [pc, #172]	; (12dd8 <DMAC_Handler+0x130>)
   12d2a:	234e      	movs	r3, #78	; 0x4e
   12d2c:	2101      	movs	r1, #1
   12d2e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12d30:	693b      	ldr	r3, [r7, #16]
   12d32:	2210      	movs	r2, #16
   12d34:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12d36:	693b      	ldr	r3, [r7, #16]
   12d38:	7c1b      	ldrb	r3, [r3, #16]
   12d3a:	001a      	movs	r2, r3
   12d3c:	2301      	movs	r3, #1
   12d3e:	4013      	ands	r3, r2
   12d40:	d042      	beq.n	12dc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12d42:	693b      	ldr	r3, [r7, #16]
   12d44:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12d46:	2b00      	cmp	r3, #0
   12d48:	d03e      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	685b      	ldr	r3, [r3, #4]
   12d4e:	693a      	ldr	r2, [r7, #16]
   12d50:	0010      	movs	r0, r2
   12d52:	4798      	blx	r3
   12d54:	e038      	b.n	12dc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12d56:	230f      	movs	r3, #15
   12d58:	18fb      	adds	r3, r7, r3
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	2202      	movs	r2, #2
   12d5e:	4013      	ands	r3, r2
   12d60:	d016      	beq.n	12d90 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12d62:	4a1d      	ldr	r2, [pc, #116]	; (12dd8 <DMAC_Handler+0x130>)
   12d64:	234e      	movs	r3, #78	; 0x4e
   12d66:	2102      	movs	r1, #2
   12d68:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12d6a:	693b      	ldr	r3, [r7, #16]
   12d6c:	2200      	movs	r2, #0
   12d6e:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12d70:	693b      	ldr	r3, [r7, #16]
   12d72:	7c1b      	ldrb	r3, [r3, #16]
   12d74:	001a      	movs	r2, r3
   12d76:	2302      	movs	r3, #2
   12d78:	4013      	ands	r3, r2
   12d7a:	d025      	beq.n	12dc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12d7c:	693b      	ldr	r3, [r7, #16]
   12d7e:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12d80:	2b00      	cmp	r3, #0
   12d82:	d021      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12d84:	693b      	ldr	r3, [r7, #16]
   12d86:	689b      	ldr	r3, [r3, #8]
   12d88:	693a      	ldr	r2, [r7, #16]
   12d8a:	0010      	movs	r0, r2
   12d8c:	4798      	blx	r3
   12d8e:	e01b      	b.n	12dc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12d90:	230f      	movs	r3, #15
   12d92:	18fb      	adds	r3, r7, r3
   12d94:	781b      	ldrb	r3, [r3, #0]
   12d96:	2204      	movs	r2, #4
   12d98:	4013      	ands	r3, r2
   12d9a:	d015      	beq.n	12dc8 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12d9c:	4a0e      	ldr	r2, [pc, #56]	; (12dd8 <DMAC_Handler+0x130>)
   12d9e:	234e      	movs	r3, #78	; 0x4e
   12da0:	2104      	movs	r1, #4
   12da2:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12da4:	693b      	ldr	r3, [r7, #16]
   12da6:	2206      	movs	r2, #6
   12da8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12daa:	693b      	ldr	r3, [r7, #16]
   12dac:	7c1b      	ldrb	r3, [r3, #16]
   12dae:	001a      	movs	r2, r3
   12db0:	2304      	movs	r3, #4
   12db2:	4013      	ands	r3, r2
   12db4:	d008      	beq.n	12dc8 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12db6:	693b      	ldr	r3, [r7, #16]
   12db8:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12dba:	2b00      	cmp	r3, #0
   12dbc:	d004      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12dbe:	693b      	ldr	r3, [r7, #16]
   12dc0:	68db      	ldr	r3, [r3, #12]
   12dc2:	693a      	ldr	r2, [r7, #16]
   12dc4:	0010      	movs	r0, r2
   12dc6:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12dc8:	4b07      	ldr	r3, [pc, #28]	; (12de8 <DMAC_Handler+0x140>)
   12dca:	4798      	blx	r3
}
   12dcc:	46c0      	nop			; (mov r8, r8)
   12dce:	46bd      	mov	sp, r7
   12dd0:	b006      	add	sp, #24
   12dd2:	bd80      	pop	{r7, pc}
   12dd4:	00012c81 	.word	0x00012c81
   12dd8:	41004800 	.word	0x41004800
   12ddc:	20000360 	.word	0x20000360
   12de0:	200045a0 	.word	0x200045a0
   12de4:	20000310 	.word	0x20000310
   12de8:	00012c95 	.word	0x00012c95

00012dec <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12dec:	b580      	push	{r7, lr}
   12dee:	b082      	sub	sp, #8
   12df0:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12df2:	4b15      	ldr	r3, [pc, #84]	; (12e48 <EVSYS_Handler+0x5c>)
   12df4:	691b      	ldr	r3, [r3, #16]
   12df6:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12df8:	4b14      	ldr	r3, [pc, #80]	; (12e4c <EVSYS_Handler+0x60>)
   12dfa:	699b      	ldr	r3, [r3, #24]
   12dfc:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12dfe:	4b12      	ldr	r3, [pc, #72]	; (12e48 <EVSYS_Handler+0x5c>)
   12e00:	689a      	ldr	r2, [r3, #8]
   12e02:	683b      	ldr	r3, [r7, #0]
   12e04:	431a      	orrs	r2, r3
   12e06:	4b10      	ldr	r3, [pc, #64]	; (12e48 <EVSYS_Handler+0x5c>)
   12e08:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12e0a:	4b10      	ldr	r3, [pc, #64]	; (12e4c <EVSYS_Handler+0x60>)
   12e0c:	4a10      	ldr	r2, [pc, #64]	; (12e50 <EVSYS_Handler+0x64>)
   12e0e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12e10:	e008      	b.n	12e24 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12e12:	687b      	ldr	r3, [r7, #4]
   12e14:	685a      	ldr	r2, [r3, #4]
   12e16:	687b      	ldr	r3, [r7, #4]
   12e18:	681b      	ldr	r3, [r3, #0]
   12e1a:	0018      	movs	r0, r3
   12e1c:	4790      	blx	r2
		current_hook = current_hook->next;
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	689b      	ldr	r3, [r3, #8]
   12e22:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12e24:	687b      	ldr	r3, [r7, #4]
   12e26:	2b00      	cmp	r3, #0
   12e28:	d1f3      	bne.n	12e12 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12e2a:	4b07      	ldr	r3, [pc, #28]	; (12e48 <EVSYS_Handler+0x5c>)
   12e2c:	68db      	ldr	r3, [r3, #12]
   12e2e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12e30:	4b05      	ldr	r3, [pc, #20]	; (12e48 <EVSYS_Handler+0x5c>)
   12e32:	689b      	ldr	r3, [r3, #8]
   12e34:	683a      	ldr	r2, [r7, #0]
   12e36:	43d2      	mvns	r2, r2
   12e38:	401a      	ands	r2, r3
   12e3a:	4b03      	ldr	r3, [pc, #12]	; (12e48 <EVSYS_Handler+0x5c>)
   12e3c:	609a      	str	r2, [r3, #8]
}
   12e3e:	46c0      	nop			; (mov r8, r8)
   12e40:	46bd      	mov	sp, r7
   12e42:	b002      	add	sp, #8
   12e44:	bd80      	pop	{r7, pc}
   12e46:	46c0      	nop			; (mov r8, r8)
   12e48:	20000000 	.word	0x20000000
   12e4c:	42000400 	.word	0x42000400
   12e50:	0f0fffff 	.word	0x0f0fffff

00012e54 <system_apb_clock_set_mask>:
{
   12e54:	b580      	push	{r7, lr}
   12e56:	b082      	sub	sp, #8
   12e58:	af00      	add	r7, sp, #0
   12e5a:	0002      	movs	r2, r0
   12e5c:	6039      	str	r1, [r7, #0]
   12e5e:	1dfb      	adds	r3, r7, #7
   12e60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12e62:	1dfb      	adds	r3, r7, #7
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	2b01      	cmp	r3, #1
   12e68:	d00a      	beq.n	12e80 <system_apb_clock_set_mask+0x2c>
   12e6a:	2b02      	cmp	r3, #2
   12e6c:	d00f      	beq.n	12e8e <system_apb_clock_set_mask+0x3a>
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d114      	bne.n	12e9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   12e72:	4b0e      	ldr	r3, [pc, #56]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e74:	4a0d      	ldr	r2, [pc, #52]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e76:	6991      	ldr	r1, [r2, #24]
   12e78:	683a      	ldr	r2, [r7, #0]
   12e7a:	430a      	orrs	r2, r1
   12e7c:	619a      	str	r2, [r3, #24]
			break;
   12e7e:	e00f      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12e80:	4b0a      	ldr	r3, [pc, #40]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e82:	4a0a      	ldr	r2, [pc, #40]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e84:	69d1      	ldr	r1, [r2, #28]
   12e86:	683a      	ldr	r2, [r7, #0]
   12e88:	430a      	orrs	r2, r1
   12e8a:	61da      	str	r2, [r3, #28]
			break;
   12e8c:	e008      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   12e8e:	4b07      	ldr	r3, [pc, #28]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e90:	4a06      	ldr	r2, [pc, #24]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e92:	6a11      	ldr	r1, [r2, #32]
   12e94:	683a      	ldr	r2, [r7, #0]
   12e96:	430a      	orrs	r2, r1
   12e98:	621a      	str	r2, [r3, #32]
			break;
   12e9a:	e001      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   12e9c:	2317      	movs	r3, #23
   12e9e:	e000      	b.n	12ea2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12ea0:	2300      	movs	r3, #0
}
   12ea2:	0018      	movs	r0, r3
   12ea4:	46bd      	mov	sp, r7
   12ea6:	b002      	add	sp, #8
   12ea8:	bd80      	pop	{r7, pc}
   12eaa:	46c0      	nop			; (mov r8, r8)
   12eac:	40000400 	.word	0x40000400

00012eb0 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12eb0:	b580      	push	{r7, lr}
   12eb2:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   12eb4:	2102      	movs	r1, #2
   12eb6:	2002      	movs	r0, #2
   12eb8:	4b07      	ldr	r3, [pc, #28]	; (12ed8 <_system_events_init+0x28>)
   12eba:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12ebc:	4b07      	ldr	r3, [pc, #28]	; (12edc <_system_events_init+0x2c>)
   12ebe:	2201      	movs	r2, #1
   12ec0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   12ec2:	46c0      	nop			; (mov r8, r8)
   12ec4:	4b05      	ldr	r3, [pc, #20]	; (12edc <_system_events_init+0x2c>)
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b2db      	uxtb	r3, r3
   12eca:	001a      	movs	r2, r3
   12ecc:	2301      	movs	r3, #1
   12ece:	4013      	ands	r3, r2
   12ed0:	d1f8      	bne.n	12ec4 <_system_events_init+0x14>
	}
}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	46bd      	mov	sp, r7
   12ed6:	bd80      	pop	{r7, pc}
   12ed8:	00012e55 	.word	0x00012e55
   12edc:	42000400 	.word	0x42000400

00012ee0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12ee0:	b580      	push	{r7, lr}
   12ee2:	b084      	sub	sp, #16
   12ee4:	af00      	add	r7, sp, #0
   12ee6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12ee8:	687b      	ldr	r3, [r7, #4]
   12eea:	681b      	ldr	r3, [r3, #0]
   12eec:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12eee:	68fb      	ldr	r3, [r7, #12]
   12ef0:	69db      	ldr	r3, [r3, #28]
   12ef2:	2207      	movs	r2, #7
   12ef4:	4013      	ands	r3, r2
   12ef6:	1e5a      	subs	r2, r3, #1
   12ef8:	4193      	sbcs	r3, r2
   12efa:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   12efc:	0018      	movs	r0, r3
   12efe:	46bd      	mov	sp, r7
   12f00:	b004      	add	sp, #16
   12f02:	bd80      	pop	{r7, pc}

00012f04 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   12f04:	b580      	push	{r7, lr}
   12f06:	b082      	sub	sp, #8
   12f08:	af00      	add	r7, sp, #0
   12f0a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   12f0c:	46c0      	nop			; (mov r8, r8)
   12f0e:	687b      	ldr	r3, [r7, #4]
   12f10:	0018      	movs	r0, r3
   12f12:	4b04      	ldr	r3, [pc, #16]	; (12f24 <_i2c_master_wait_for_sync+0x20>)
   12f14:	4798      	blx	r3
   12f16:	1e03      	subs	r3, r0, #0
   12f18:	d1f9      	bne.n	12f0e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   12f1a:	46c0      	nop			; (mov r8, r8)
   12f1c:	46bd      	mov	sp, r7
   12f1e:	b002      	add	sp, #8
   12f20:	bd80      	pop	{r7, pc}
   12f22:	46c0      	nop			; (mov r8, r8)
   12f24:	00012ee1 	.word	0x00012ee1

00012f28 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   12f28:	b580      	push	{r7, lr}
   12f2a:	b084      	sub	sp, #16
   12f2c:	af00      	add	r7, sp, #0
   12f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12f30:	687b      	ldr	r3, [r7, #4]
   12f32:	681b      	ldr	r3, [r3, #0]
   12f34:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12f36:	68fb      	ldr	r3, [r7, #12]
   12f38:	681b      	ldr	r3, [r3, #0]
   12f3a:	011b      	lsls	r3, r3, #4
   12f3c:	0fdb      	lsrs	r3, r3, #31
   12f3e:	b2db      	uxtb	r3, r3
   12f40:	001a      	movs	r2, r3
   12f42:	230b      	movs	r3, #11
   12f44:	18fb      	adds	r3, r7, r3
   12f46:	1e51      	subs	r1, r2, #1
   12f48:	418a      	sbcs	r2, r1
   12f4a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12f4c:	2308      	movs	r3, #8
   12f4e:	18fb      	adds	r3, r7, r3
   12f50:	687a      	ldr	r2, [r7, #4]
   12f52:	8b52      	ldrh	r2, [r2, #26]
   12f54:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12f56:	687b      	ldr	r3, [r7, #4]
   12f58:	8b9b      	ldrh	r3, [r3, #28]
   12f5a:	b29a      	uxth	r2, r3
   12f5c:	2308      	movs	r3, #8
   12f5e:	18fb      	adds	r3, r7, r3
   12f60:	2108      	movs	r1, #8
   12f62:	1879      	adds	r1, r7, r1
   12f64:	8809      	ldrh	r1, [r1, #0]
   12f66:	1a8a      	subs	r2, r1, r2
   12f68:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	8b9b      	ldrh	r3, [r3, #28]
   12f6e:	b29b      	uxth	r3, r3
   12f70:	3b01      	subs	r3, #1
   12f72:	b29a      	uxth	r2, r3
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12f78:	230b      	movs	r3, #11
   12f7a:	18fb      	adds	r3, r7, r3
   12f7c:	781b      	ldrb	r3, [r3, #0]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d010      	beq.n	12fa4 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   12f82:	687b      	ldr	r3, [r7, #4]
   12f84:	7adb      	ldrb	r3, [r3, #11]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d01c      	beq.n	12fc4 <_i2c_master_read+0x9c>
   12f8a:	687b      	ldr	r3, [r7, #4]
   12f8c:	8b9b      	ldrh	r3, [r3, #28]
   12f8e:	b29b      	uxth	r3, r3
   12f90:	2b01      	cmp	r3, #1
   12f92:	d117      	bne.n	12fc4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12f94:	68fb      	ldr	r3, [r7, #12]
   12f96:	685b      	ldr	r3, [r3, #4]
   12f98:	2280      	movs	r2, #128	; 0x80
   12f9a:	02d2      	lsls	r2, r2, #11
   12f9c:	431a      	orrs	r2, r3
   12f9e:	68fb      	ldr	r3, [r7, #12]
   12fa0:	605a      	str	r2, [r3, #4]
   12fa2:	e00f      	b.n	12fc4 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   12fa4:	687b      	ldr	r3, [r7, #4]
   12fa6:	7adb      	ldrb	r3, [r3, #11]
   12fa8:	2b00      	cmp	r3, #0
   12faa:	d00b      	beq.n	12fc4 <_i2c_master_read+0x9c>
   12fac:	687b      	ldr	r3, [r7, #4]
   12fae:	8b9b      	ldrh	r3, [r3, #28]
   12fb0:	b29b      	uxth	r3, r3
   12fb2:	2b00      	cmp	r3, #0
   12fb4:	d106      	bne.n	12fc4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12fb6:	68fb      	ldr	r3, [r7, #12]
   12fb8:	685b      	ldr	r3, [r3, #4]
   12fba:	2280      	movs	r2, #128	; 0x80
   12fbc:	02d2      	lsls	r2, r2, #11
   12fbe:	431a      	orrs	r2, r3
   12fc0:	68fb      	ldr	r3, [r7, #12]
   12fc2:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   12fc4:	687b      	ldr	r3, [r7, #4]
   12fc6:	8b9b      	ldrh	r3, [r3, #28]
   12fc8:	b29b      	uxth	r3, r3
   12fca:	2b00      	cmp	r3, #0
   12fcc:	d10e      	bne.n	12fec <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12fce:	687b      	ldr	r3, [r7, #4]
   12fd0:	7a9b      	ldrb	r3, [r3, #10]
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d00a      	beq.n	12fec <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12fd6:	687b      	ldr	r3, [r7, #4]
   12fd8:	0018      	movs	r0, r3
   12fda:	4b0e      	ldr	r3, [pc, #56]	; (13014 <_i2c_master_read+0xec>)
   12fdc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12fde:	68fb      	ldr	r3, [r7, #12]
   12fe0:	685b      	ldr	r3, [r3, #4]
   12fe2:	22c0      	movs	r2, #192	; 0xc0
   12fe4:	0292      	lsls	r2, r2, #10
   12fe6:	431a      	orrs	r2, r3
   12fe8:	68fb      	ldr	r3, [r7, #12]
   12fea:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   12fec:	687b      	ldr	r3, [r7, #4]
   12fee:	0018      	movs	r0, r3
   12ff0:	4b08      	ldr	r3, [pc, #32]	; (13014 <_i2c_master_read+0xec>)
   12ff2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   12ff4:	687b      	ldr	r3, [r7, #4]
   12ff6:	6a1a      	ldr	r2, [r3, #32]
   12ff8:	2308      	movs	r3, #8
   12ffa:	18fb      	adds	r3, r7, r3
   12ffc:	881b      	ldrh	r3, [r3, #0]
   12ffe:	18d3      	adds	r3, r2, r3
   13000:	68fa      	ldr	r2, [r7, #12]
   13002:	2128      	movs	r1, #40	; 0x28
   13004:	5c52      	ldrb	r2, [r2, r1]
   13006:	b2d2      	uxtb	r2, r2
   13008:	701a      	strb	r2, [r3, #0]
}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	46bd      	mov	sp, r7
   1300e:	b004      	add	sp, #16
   13010:	bd80      	pop	{r7, pc}
   13012:	46c0      	nop			; (mov r8, r8)
   13014:	00012f05 	.word	0x00012f05

00013018 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13018:	b580      	push	{r7, lr}
   1301a:	b084      	sub	sp, #16
   1301c:	af00      	add	r7, sp, #0
   1301e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13020:	687b      	ldr	r3, [r7, #4]
   13022:	681b      	ldr	r3, [r3, #0]
   13024:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13026:	68fb      	ldr	r3, [r7, #12]
   13028:	8b5b      	ldrh	r3, [r3, #26]
   1302a:	b29b      	uxth	r3, r3
   1302c:	001a      	movs	r2, r3
   1302e:	2304      	movs	r3, #4
   13030:	4013      	ands	r3, r2
   13032:	d004      	beq.n	1303e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13034:	687b      	ldr	r3, [r7, #4]
   13036:	2225      	movs	r2, #37	; 0x25
   13038:	211e      	movs	r1, #30
   1303a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1303c:	e024      	b.n	13088 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1303e:	230a      	movs	r3, #10
   13040:	18fb      	adds	r3, r7, r3
   13042:	687a      	ldr	r2, [r7, #4]
   13044:	8b52      	ldrh	r2, [r2, #26]
   13046:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	8b9b      	ldrh	r3, [r3, #28]
   1304c:	b29a      	uxth	r2, r3
   1304e:	230a      	movs	r3, #10
   13050:	18fb      	adds	r3, r7, r3
   13052:	210a      	movs	r1, #10
   13054:	1879      	adds	r1, r7, r1
   13056:	8809      	ldrh	r1, [r1, #0]
   13058:	1a8a      	subs	r2, r1, r2
   1305a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1305c:	687b      	ldr	r3, [r7, #4]
   1305e:	8b9b      	ldrh	r3, [r3, #28]
   13060:	b29b      	uxth	r3, r3
   13062:	3b01      	subs	r3, #1
   13064:	b29a      	uxth	r2, r3
   13066:	687b      	ldr	r3, [r7, #4]
   13068:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   1306a:	687b      	ldr	r3, [r7, #4]
   1306c:	0018      	movs	r0, r3
   1306e:	4b08      	ldr	r3, [pc, #32]	; (13090 <_i2c_master_write+0x78>)
   13070:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   13072:	687b      	ldr	r3, [r7, #4]
   13074:	6a1a      	ldr	r2, [r3, #32]
   13076:	230a      	movs	r3, #10
   13078:	18fb      	adds	r3, r7, r3
   1307a:	881b      	ldrh	r3, [r3, #0]
   1307c:	18d3      	adds	r3, r2, r3
   1307e:	781b      	ldrb	r3, [r3, #0]
   13080:	b2d9      	uxtb	r1, r3
   13082:	68fb      	ldr	r3, [r7, #12]
   13084:	2228      	movs	r2, #40	; 0x28
   13086:	5499      	strb	r1, [r3, r2]
}
   13088:	46bd      	mov	sp, r7
   1308a:	b004      	add	sp, #16
   1308c:	bd80      	pop	{r7, pc}
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	00012f05 	.word	0x00012f05

00013094 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   13094:	b580      	push	{r7, lr}
   13096:	b084      	sub	sp, #16
   13098:	af00      	add	r7, sp, #0
   1309a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1309c:	687b      	ldr	r3, [r7, #4]
   1309e:	681b      	ldr	r3, [r3, #0]
   130a0:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   130a2:	68fb      	ldr	r3, [r7, #12]
   130a4:	7e1b      	ldrb	r3, [r3, #24]
   130a6:	b2db      	uxtb	r3, r3
   130a8:	001a      	movs	r2, r3
   130aa:	2301      	movs	r3, #1
   130ac:	4013      	ands	r3, r2
   130ae:	d02b      	beq.n	13108 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   130b0:	68fb      	ldr	r3, [r7, #12]
   130b2:	2201      	movs	r2, #1
   130b4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   130b6:	68fb      	ldr	r3, [r7, #12]
   130b8:	8b5b      	ldrh	r3, [r3, #26]
   130ba:	b29b      	uxth	r3, r3
   130bc:	001a      	movs	r2, r3
   130be:	2302      	movs	r3, #2
   130c0:	4013      	ands	r3, r2
   130c2:	d004      	beq.n	130ce <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   130c4:	687b      	ldr	r3, [r7, #4]
   130c6:	2225      	movs	r2, #37	; 0x25
   130c8:	2141      	movs	r1, #65	; 0x41
   130ca:	5499      	strb	r1, [r3, r2]
   130cc:	e01c      	b.n	13108 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   130ce:	68fb      	ldr	r3, [r7, #12]
   130d0:	8b5b      	ldrh	r3, [r3, #26]
   130d2:	b29b      	uxth	r3, r3
   130d4:	001a      	movs	r2, r3
   130d6:	2304      	movs	r3, #4
   130d8:	4013      	ands	r3, r2
   130da:	d015      	beq.n	13108 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   130dc:	687b      	ldr	r3, [r7, #4]
   130de:	2225      	movs	r2, #37	; 0x25
   130e0:	2118      	movs	r1, #24
   130e2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   130e4:	687b      	ldr	r3, [r7, #4]
   130e6:	2200      	movs	r2, #0
   130e8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	7a9b      	ldrb	r3, [r3, #10]
   130ee:	2b00      	cmp	r3, #0
   130f0:	d00a      	beq.n	13108 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   130f2:	687b      	ldr	r3, [r7, #4]
   130f4:	0018      	movs	r0, r3
   130f6:	4b13      	ldr	r3, [pc, #76]	; (13144 <_i2c_master_async_address_response+0xb0>)
   130f8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   130fa:	68fb      	ldr	r3, [r7, #12]
   130fc:	685b      	ldr	r3, [r3, #4]
   130fe:	22c0      	movs	r2, #192	; 0xc0
   13100:	0292      	lsls	r2, r2, #10
   13102:	431a      	orrs	r2, r3
   13104:	68fb      	ldr	r3, [r7, #12]
   13106:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13108:	687b      	ldr	r3, [r7, #4]
   1310a:	8b9b      	ldrh	r3, [r3, #28]
   1310c:	b29a      	uxth	r2, r3
   1310e:	687b      	ldr	r3, [r7, #4]
   13110:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13112:	687b      	ldr	r3, [r7, #4]
   13114:	2225      	movs	r2, #37	; 0x25
   13116:	5c9b      	ldrb	r3, [r3, r2]
   13118:	b2db      	uxtb	r3, r3
   1311a:	2b05      	cmp	r3, #5
   1311c:	d10e      	bne.n	1313c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1311e:	687b      	ldr	r3, [r7, #4]
   13120:	2224      	movs	r2, #36	; 0x24
   13122:	5c9b      	ldrb	r3, [r3, r2]
   13124:	b2db      	uxtb	r3, r3
   13126:	2b00      	cmp	r3, #0
   13128:	d104      	bne.n	13134 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1312a:	687b      	ldr	r3, [r7, #4]
   1312c:	0018      	movs	r0, r3
   1312e:	4b06      	ldr	r3, [pc, #24]	; (13148 <_i2c_master_async_address_response+0xb4>)
   13130:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13132:	e003      	b.n	1313c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b04      	ldr	r3, [pc, #16]	; (1314c <_i2c_master_async_address_response+0xb8>)
   1313a:	4798      	blx	r3
}
   1313c:	46c0      	nop			; (mov r8, r8)
   1313e:	46bd      	mov	sp, r7
   13140:	b004      	add	sp, #16
   13142:	bd80      	pop	{r7, pc}
   13144:	00012f05 	.word	0x00012f05
   13148:	00013019 	.word	0x00013019
   1314c:	00012f29 	.word	0x00012f29

00013150 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   13150:	b580      	push	{r7, lr}
   13152:	b084      	sub	sp, #16
   13154:	af00      	add	r7, sp, #0
   13156:	60f8      	str	r0, [r7, #12]
   13158:	60b9      	str	r1, [r7, #8]
   1315a:	1dfb      	adds	r3, r7, #7
   1315c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   1315e:	1dfb      	adds	r3, r7, #7
   13160:	781b      	ldrb	r3, [r3, #0]
   13162:	68fa      	ldr	r2, [r7, #12]
   13164:	3302      	adds	r3, #2
   13166:	009b      	lsls	r3, r3, #2
   13168:	18d3      	adds	r3, r2, r3
   1316a:	3304      	adds	r3, #4
   1316c:	68ba      	ldr	r2, [r7, #8]
   1316e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   13170:	68fb      	ldr	r3, [r7, #12]
   13172:	7e1b      	ldrb	r3, [r3, #24]
   13174:	b2db      	uxtb	r3, r3
   13176:	b25a      	sxtb	r2, r3
   13178:	1dfb      	adds	r3, r7, #7
   1317a:	781b      	ldrb	r3, [r3, #0]
   1317c:	2101      	movs	r1, #1
   1317e:	4099      	lsls	r1, r3
   13180:	000b      	movs	r3, r1
   13182:	b25b      	sxtb	r3, r3
   13184:	4313      	orrs	r3, r2
   13186:	b25b      	sxtb	r3, r3
   13188:	b2da      	uxtb	r2, r3
   1318a:	68fb      	ldr	r3, [r7, #12]
   1318c:	761a      	strb	r2, [r3, #24]
}
   1318e:	46c0      	nop			; (mov r8, r8)
   13190:	46bd      	mov	sp, r7
   13192:	b004      	add	sp, #16
   13194:	bd80      	pop	{r7, pc}
	...

00013198 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13198:	b590      	push	{r4, r7, lr}
   1319a:	b087      	sub	sp, #28
   1319c:	af00      	add	r7, sp, #0
   1319e:	6078      	str	r0, [r7, #4]
   131a0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	681b      	ldr	r3, [r3, #0]
   131a6:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   131a8:	683b      	ldr	r3, [r7, #0]
   131aa:	685a      	ldr	r2, [r3, #4]
   131ac:	687b      	ldr	r3, [r7, #4]
   131ae:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   131b0:	683b      	ldr	r3, [r7, #0]
   131b2:	885a      	ldrh	r2, [r3, #2]
   131b4:	687b      	ldr	r3, [r7, #4]
   131b6:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   131b8:	687b      	ldr	r3, [r7, #4]
   131ba:	2224      	movs	r2, #36	; 0x24
   131bc:	2101      	movs	r1, #1
   131be:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   131c0:	687b      	ldr	r3, [r7, #4]
   131c2:	2225      	movs	r2, #37	; 0x25
   131c4:	2105      	movs	r1, #5
   131c6:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   131c8:	693b      	ldr	r3, [r7, #16]
   131ca:	681b      	ldr	r3, [r3, #0]
   131cc:	011b      	lsls	r3, r3, #4
   131ce:	0fdb      	lsrs	r3, r3, #31
   131d0:	b2db      	uxtb	r3, r3
   131d2:	001a      	movs	r2, r3
   131d4:	230f      	movs	r3, #15
   131d6:	18fb      	adds	r3, r7, r3
   131d8:	1e51      	subs	r1, r2, #1
   131da:	418a      	sbcs	r2, r1
   131dc:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   131de:	683b      	ldr	r3, [r7, #0]
   131e0:	7a5b      	ldrb	r3, [r3, #9]
   131e2:	2b00      	cmp	r3, #0
   131e4:	d006      	beq.n	131f4 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   131e6:	683b      	ldr	r3, [r7, #0]
   131e8:	7a9a      	ldrb	r2, [r3, #10]
   131ea:	687b      	ldr	r3, [r7, #4]
   131ec:	0011      	movs	r1, r2
   131ee:	0018      	movs	r0, r3
   131f0:	4b3b      	ldr	r3, [pc, #236]	; (132e0 <_i2c_master_read_packet+0x148>)
   131f2:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   131f4:	230f      	movs	r3, #15
   131f6:	18fb      	adds	r3, r7, r3
   131f8:	781b      	ldrb	r3, [r3, #0]
   131fa:	2b00      	cmp	r3, #0
   131fc:	d00b      	beq.n	13216 <_i2c_master_read_packet+0x7e>
   131fe:	683b      	ldr	r3, [r7, #0]
   13200:	885b      	ldrh	r3, [r3, #2]
   13202:	2b01      	cmp	r3, #1
   13204:	d107      	bne.n	13216 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13206:	693b      	ldr	r3, [r7, #16]
   13208:	685b      	ldr	r3, [r3, #4]
   1320a:	2280      	movs	r2, #128	; 0x80
   1320c:	02d2      	lsls	r2, r2, #11
   1320e:	431a      	orrs	r2, r3
   13210:	693b      	ldr	r3, [r7, #16]
   13212:	605a      	str	r2, [r3, #4]
   13214:	e005      	b.n	13222 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13216:	693b      	ldr	r3, [r7, #16]
   13218:	685b      	ldr	r3, [r3, #4]
   1321a:	4a32      	ldr	r2, [pc, #200]	; (132e4 <_i2c_master_read_packet+0x14c>)
   1321c:	401a      	ands	r2, r3
   1321e:	693b      	ldr	r3, [r7, #16]
   13220:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13222:	683b      	ldr	r3, [r7, #0]
   13224:	7a1b      	ldrb	r3, [r3, #8]
   13226:	2b00      	cmp	r3, #0
   13228:	d045      	beq.n	132b6 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1322a:	683b      	ldr	r3, [r7, #0]
   1322c:	881b      	ldrh	r3, [r3, #0]
   1322e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13230:	683b      	ldr	r3, [r7, #0]
   13232:	7a5b      	ldrb	r3, [r3, #9]
   13234:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13236:	4313      	orrs	r3, r2
   13238:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1323a:	2380      	movs	r3, #128	; 0x80
   1323c:	021b      	lsls	r3, r3, #8
   1323e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13240:	693b      	ldr	r3, [r7, #16]
   13242:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13244:	2317      	movs	r3, #23
   13246:	18fc      	adds	r4, r7, r3
   13248:	687b      	ldr	r3, [r7, #4]
   1324a:	0018      	movs	r0, r3
   1324c:	4b26      	ldr	r3, [pc, #152]	; (132e8 <_i2c_master_read_packet+0x150>)
   1324e:	4798      	blx	r3
   13250:	0003      	movs	r3, r0
   13252:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13254:	693b      	ldr	r3, [r7, #16]
   13256:	685b      	ldr	r3, [r3, #4]
   13258:	4a22      	ldr	r2, [pc, #136]	; (132e4 <_i2c_master_read_packet+0x14c>)
   1325a:	401a      	ands	r2, r3
   1325c:	693b      	ldr	r3, [r7, #16]
   1325e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13260:	2317      	movs	r3, #23
   13262:	18fb      	adds	r3, r7, r3
   13264:	781b      	ldrb	r3, [r3, #0]
   13266:	2b00      	cmp	r3, #0
   13268:	d107      	bne.n	1327a <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   1326a:	2317      	movs	r3, #23
   1326c:	18fc      	adds	r4, r7, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	0018      	movs	r0, r3
   13272:	4b1e      	ldr	r3, [pc, #120]	; (132ec <_i2c_master_read_packet+0x154>)
   13274:	4798      	blx	r3
   13276:	0003      	movs	r3, r0
   13278:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   1327a:	2317      	movs	r3, #23
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	781b      	ldrb	r3, [r3, #0]
   13280:	2b00      	cmp	r3, #0
   13282:	d114      	bne.n	132ae <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   13284:	693b      	ldr	r3, [r7, #16]
   13286:	2203      	movs	r2, #3
   13288:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	881b      	ldrh	r3, [r3, #0]
   1328e:	0a1b      	lsrs	r3, r3, #8
   13290:	b29b      	uxth	r3, r3
   13292:	2278      	movs	r2, #120	; 0x78
   13294:	4313      	orrs	r3, r2
   13296:	b29b      	uxth	r3, r3
   13298:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1329a:	683b      	ldr	r3, [r7, #0]
   1329c:	7a5b      	ldrb	r3, [r3, #9]
   1329e:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   132a0:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   132a2:	2201      	movs	r2, #1
   132a4:	4313      	orrs	r3, r2
   132a6:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   132a8:	693b      	ldr	r3, [r7, #16]
   132aa:	625a      	str	r2, [r3, #36]	; 0x24
   132ac:	e012      	b.n	132d4 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   132ae:	2317      	movs	r3, #23
   132b0:	18fb      	adds	r3, r7, r3
   132b2:	781b      	ldrb	r3, [r3, #0]
   132b4:	e00f      	b.n	132d6 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   132b6:	693b      	ldr	r3, [r7, #16]
   132b8:	2203      	movs	r2, #3
   132ba:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   132bc:	683b      	ldr	r3, [r7, #0]
   132be:	881b      	ldrh	r3, [r3, #0]
   132c0:	005b      	lsls	r3, r3, #1
   132c2:	2201      	movs	r2, #1
   132c4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   132c6:	683b      	ldr	r3, [r7, #0]
   132c8:	7a5b      	ldrb	r3, [r3, #9]
   132ca:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   132cc:	4313      	orrs	r3, r2
   132ce:	001a      	movs	r2, r3
   132d0:	693b      	ldr	r3, [r7, #16]
   132d2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   132d4:	2300      	movs	r3, #0
}
   132d6:	0018      	movs	r0, r3
   132d8:	46bd      	mov	sp, r7
   132da:	b007      	add	sp, #28
   132dc:	bd90      	pop	{r4, r7, pc}
   132de:	46c0      	nop			; (mov r8, r8)
   132e0:	000176f9 	.word	0x000176f9
   132e4:	fffbffff 	.word	0xfffbffff
   132e8:	0001769b 	.word	0x0001769b
   132ec:	0001763d 	.word	0x0001763d

000132f0 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f0:	b580      	push	{r7, lr}
   132f2:	b082      	sub	sp, #8
   132f4:	af00      	add	r7, sp, #0
   132f6:	6078      	str	r0, [r7, #4]
   132f8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   132fa:	687b      	ldr	r3, [r7, #4]
   132fc:	8b9b      	ldrh	r3, [r3, #28]
   132fe:	b29b      	uxth	r3, r3
   13300:	2b00      	cmp	r3, #0
   13302:	d001      	beq.n	13308 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13304:	2305      	movs	r3, #5
   13306:	e00c      	b.n	13322 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13308:	687b      	ldr	r3, [r7, #4]
   1330a:	2201      	movs	r2, #1
   1330c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1330e:	687b      	ldr	r3, [r7, #4]
   13310:	2201      	movs	r2, #1
   13312:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13314:	683a      	ldr	r2, [r7, #0]
   13316:	687b      	ldr	r3, [r7, #4]
   13318:	0011      	movs	r1, r2
   1331a:	0018      	movs	r0, r3
   1331c:	4b03      	ldr	r3, [pc, #12]	; (1332c <i2c_master_read_packet_job+0x3c>)
   1331e:	4798      	blx	r3
   13320:	0003      	movs	r3, r0
}
   13322:	0018      	movs	r0, r3
   13324:	46bd      	mov	sp, r7
   13326:	b002      	add	sp, #8
   13328:	bd80      	pop	{r7, pc}
   1332a:	46c0      	nop			; (mov r8, r8)
   1332c:	00013199 	.word	0x00013199

00013330 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13330:	b580      	push	{r7, lr}
   13332:	b084      	sub	sp, #16
   13334:	af00      	add	r7, sp, #0
   13336:	6078      	str	r0, [r7, #4]
   13338:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1333a:	687b      	ldr	r3, [r7, #4]
   1333c:	681b      	ldr	r3, [r3, #0]
   1333e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13340:	683b      	ldr	r3, [r7, #0]
   13342:	7a5b      	ldrb	r3, [r3, #9]
   13344:	2b00      	cmp	r3, #0
   13346:	d006      	beq.n	13356 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13348:	683b      	ldr	r3, [r7, #0]
   1334a:	7a9a      	ldrb	r2, [r3, #10]
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	0011      	movs	r1, r2
   13350:	0018      	movs	r0, r3
   13352:	4b1e      	ldr	r3, [pc, #120]	; (133cc <_i2c_master_write_packet+0x9c>)
   13354:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13356:	68fb      	ldr	r3, [r7, #12]
   13358:	685b      	ldr	r3, [r3, #4]
   1335a:	4a1d      	ldr	r2, [pc, #116]	; (133d0 <_i2c_master_write_packet+0xa0>)
   1335c:	401a      	ands	r2, r3
   1335e:	68fb      	ldr	r3, [r7, #12]
   13360:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   13362:	683b      	ldr	r3, [r7, #0]
   13364:	685a      	ldr	r2, [r3, #4]
   13366:	687b      	ldr	r3, [r7, #4]
   13368:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   1336a:	683b      	ldr	r3, [r7, #0]
   1336c:	885a      	ldrh	r2, [r3, #2]
   1336e:	687b      	ldr	r3, [r7, #4]
   13370:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   13372:	687b      	ldr	r3, [r7, #4]
   13374:	2224      	movs	r2, #36	; 0x24
   13376:	2100      	movs	r1, #0
   13378:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   1337a:	687b      	ldr	r3, [r7, #4]
   1337c:	2225      	movs	r2, #37	; 0x25
   1337e:	2105      	movs	r1, #5
   13380:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   13382:	68fb      	ldr	r3, [r7, #12]
   13384:	2203      	movs	r2, #3
   13386:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   13388:	683b      	ldr	r3, [r7, #0]
   1338a:	7a1b      	ldrb	r3, [r3, #8]
   1338c:	2b00      	cmp	r3, #0
   1338e:	d00d      	beq.n	133ac <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	881b      	ldrh	r3, [r3, #0]
   13394:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13396:	683b      	ldr	r3, [r7, #0]
   13398:	7a5b      	ldrb	r3, [r3, #9]
   1339a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1339c:	4313      	orrs	r3, r2
   1339e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133a0:	2380      	movs	r3, #128	; 0x80
   133a2:	021b      	lsls	r3, r3, #8
   133a4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133a6:	68fb      	ldr	r3, [r7, #12]
   133a8:	625a      	str	r2, [r3, #36]	; 0x24
   133aa:	e009      	b.n	133c0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133ac:	683b      	ldr	r3, [r7, #0]
   133ae:	881b      	ldrh	r3, [r3, #0]
   133b0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   133b2:	683b      	ldr	r3, [r7, #0]
   133b4:	7a5b      	ldrb	r3, [r3, #9]
   133b6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133b8:	4313      	orrs	r3, r2
   133ba:	001a      	movs	r2, r3
   133bc:	68fb      	ldr	r3, [r7, #12]
   133be:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   133c0:	2300      	movs	r3, #0
}
   133c2:	0018      	movs	r0, r3
   133c4:	46bd      	mov	sp, r7
   133c6:	b004      	add	sp, #16
   133c8:	bd80      	pop	{r7, pc}
   133ca:	46c0      	nop			; (mov r8, r8)
   133cc:	000176f9 	.word	0x000176f9
   133d0:	fffbffff 	.word	0xfffbffff

000133d4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   133d4:	b580      	push	{r7, lr}
   133d6:	b082      	sub	sp, #8
   133d8:	af00      	add	r7, sp, #0
   133da:	6078      	str	r0, [r7, #4]
   133dc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   133de:	687b      	ldr	r3, [r7, #4]
   133e0:	8b9b      	ldrh	r3, [r3, #28]
   133e2:	b29b      	uxth	r3, r3
   133e4:	2b00      	cmp	r3, #0
   133e6:	d001      	beq.n	133ec <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   133e8:	2305      	movs	r3, #5
   133ea:	e00c      	b.n	13406 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   133ec:	687b      	ldr	r3, [r7, #4]
   133ee:	2201      	movs	r2, #1
   133f0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	2201      	movs	r2, #1
   133f6:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   133f8:	683a      	ldr	r2, [r7, #0]
   133fa:	687b      	ldr	r3, [r7, #4]
   133fc:	0011      	movs	r1, r2
   133fe:	0018      	movs	r0, r3
   13400:	4b03      	ldr	r3, [pc, #12]	; (13410 <i2c_master_write_packet_job+0x3c>)
   13402:	4798      	blx	r3
   13404:	0003      	movs	r3, r0
}
   13406:	0018      	movs	r0, r3
   13408:	46bd      	mov	sp, r7
   1340a:	b002      	add	sp, #8
   1340c:	bd80      	pop	{r7, pc}
   1340e:	46c0      	nop			; (mov r8, r8)
   13410:	00013331 	.word	0x00013331

00013414 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13414:	b580      	push	{r7, lr}
   13416:	b086      	sub	sp, #24
   13418:	af00      	add	r7, sp, #0
   1341a:	0002      	movs	r2, r0
   1341c:	1dfb      	adds	r3, r7, #7
   1341e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13420:	1dfb      	adds	r3, r7, #7
   13422:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13424:	4b93      	ldr	r3, [pc, #588]	; (13674 <_i2c_master_interrupt_handler+0x260>)
   13426:	0092      	lsls	r2, r2, #2
   13428:	58d3      	ldr	r3, [r2, r3]
   1342a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1342c:	697b      	ldr	r3, [r7, #20]
   1342e:	681b      	ldr	r3, [r3, #0]
   13430:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13432:	693b      	ldr	r3, [r7, #16]
   13434:	681b      	ldr	r3, [r3, #0]
   13436:	011b      	lsls	r3, r3, #4
   13438:	0fdb      	lsrs	r3, r3, #31
   1343a:	b2db      	uxtb	r3, r3
   1343c:	001a      	movs	r2, r3
   1343e:	230f      	movs	r3, #15
   13440:	18fb      	adds	r3, r7, r3
   13442:	1e51      	subs	r1, r2, #1
   13444:	418a      	sbcs	r2, r1
   13446:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13448:	230e      	movs	r3, #14
   1344a:	18fb      	adds	r3, r7, r3
   1344c:	697a      	ldr	r2, [r7, #20]
   1344e:	7e52      	ldrb	r2, [r2, #25]
   13450:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13452:	697b      	ldr	r3, [r7, #20]
   13454:	7e1b      	ldrb	r3, [r3, #24]
   13456:	b2da      	uxtb	r2, r3
   13458:	230e      	movs	r3, #14
   1345a:	18fb      	adds	r3, r7, r3
   1345c:	210e      	movs	r1, #14
   1345e:	1879      	adds	r1, r7, r1
   13460:	7809      	ldrb	r1, [r1, #0]
   13462:	400a      	ands	r2, r1
   13464:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13466:	697b      	ldr	r3, [r7, #20]
   13468:	8b5b      	ldrh	r3, [r3, #26]
   1346a:	b29b      	uxth	r3, r3
   1346c:	2b00      	cmp	r3, #0
   1346e:	d109      	bne.n	13484 <_i2c_master_interrupt_handler+0x70>
   13470:	697b      	ldr	r3, [r7, #20]
   13472:	8b9b      	ldrh	r3, [r3, #28]
   13474:	b29b      	uxth	r3, r3
   13476:	2b00      	cmp	r3, #0
   13478:	d004      	beq.n	13484 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   1347a:	697b      	ldr	r3, [r7, #20]
   1347c:	0018      	movs	r0, r3
   1347e:	4b7e      	ldr	r3, [pc, #504]	; (13678 <_i2c_master_interrupt_handler+0x264>)
   13480:	4798      	blx	r3
   13482:	e070      	b.n	13566 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13484:	697b      	ldr	r3, [r7, #20]
   13486:	8b5b      	ldrh	r3, [r3, #26]
   13488:	b29b      	uxth	r3, r3
   1348a:	2b00      	cmp	r3, #0
   1348c:	d039      	beq.n	13502 <_i2c_master_interrupt_handler+0xee>
   1348e:	697b      	ldr	r3, [r7, #20]
   13490:	8b9b      	ldrh	r3, [r3, #28]
   13492:	b29b      	uxth	r3, r3
   13494:	2b00      	cmp	r3, #0
   13496:	d134      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   13498:	697b      	ldr	r3, [r7, #20]
   1349a:	2225      	movs	r2, #37	; 0x25
   1349c:	5c9b      	ldrb	r3, [r3, r2]
   1349e:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   134a0:	2b05      	cmp	r3, #5
   134a2:	d12e      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   134a4:	697b      	ldr	r3, [r7, #20]
   134a6:	2224      	movs	r2, #36	; 0x24
   134a8:	5c9b      	ldrb	r3, [r3, r2]
   134aa:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   134ac:	2b00      	cmp	r3, #0
   134ae:	d128      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   134b0:	693b      	ldr	r3, [r7, #16]
   134b2:	2203      	movs	r2, #3
   134b4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   134b6:	697b      	ldr	r3, [r7, #20]
   134b8:	2200      	movs	r2, #0
   134ba:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   134bc:	697b      	ldr	r3, [r7, #20]
   134be:	2225      	movs	r2, #37	; 0x25
   134c0:	2100      	movs	r1, #0
   134c2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   134c4:	697b      	ldr	r3, [r7, #20]
   134c6:	7a9b      	ldrb	r3, [r3, #10]
   134c8:	2b00      	cmp	r3, #0
   134ca:	d00b      	beq.n	134e4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   134cc:	697b      	ldr	r3, [r7, #20]
   134ce:	0018      	movs	r0, r3
   134d0:	4b6a      	ldr	r3, [pc, #424]	; (1367c <_i2c_master_interrupt_handler+0x268>)
   134d2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   134d4:	693b      	ldr	r3, [r7, #16]
   134d6:	685b      	ldr	r3, [r3, #4]
   134d8:	22c0      	movs	r2, #192	; 0xc0
   134da:	0292      	lsls	r2, r2, #10
   134dc:	431a      	orrs	r2, r3
   134de:	693b      	ldr	r3, [r7, #16]
   134e0:	605a      	str	r2, [r3, #4]
   134e2:	e002      	b.n	134ea <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   134e4:	693b      	ldr	r3, [r7, #16]
   134e6:	2201      	movs	r2, #1
   134e8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   134ea:	230e      	movs	r3, #14
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	2201      	movs	r2, #1
   134f2:	4013      	ands	r3, r2
   134f4:	d037      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   134f6:	697b      	ldr	r3, [r7, #20]
   134f8:	68db      	ldr	r3, [r3, #12]
   134fa:	697a      	ldr	r2, [r7, #20]
   134fc:	0010      	movs	r0, r2
   134fe:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13500:	e031      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13502:	697b      	ldr	r3, [r7, #20]
   13504:	8b5b      	ldrh	r3, [r3, #26]
   13506:	b29b      	uxth	r3, r3
   13508:	2b00      	cmp	r3, #0
   1350a:	d02c      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
   1350c:	697b      	ldr	r3, [r7, #20]
   1350e:	8b9b      	ldrh	r3, [r3, #28]
   13510:	b29b      	uxth	r3, r3
   13512:	2b00      	cmp	r3, #0
   13514:	d027      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13516:	693b      	ldr	r3, [r7, #16]
   13518:	8b5b      	ldrh	r3, [r3, #26]
   1351a:	b29b      	uxth	r3, r3
   1351c:	001a      	movs	r2, r3
   1351e:	2320      	movs	r3, #32
   13520:	4013      	ands	r3, r2
   13522:	d111      	bne.n	13548 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13524:	230f      	movs	r3, #15
   13526:	18fb      	adds	r3, r7, r3
   13528:	781b      	ldrb	r3, [r3, #0]
   1352a:	2201      	movs	r2, #1
   1352c:	4053      	eors	r3, r2
   1352e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13530:	2b00      	cmp	r3, #0
   13532:	d104      	bne.n	1353e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13534:	697b      	ldr	r3, [r7, #20]
   13536:	8b9b      	ldrh	r3, [r3, #28]
   13538:	b29b      	uxth	r3, r3
   1353a:	2b01      	cmp	r3, #1
   1353c:	d004      	beq.n	13548 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1353e:	697b      	ldr	r3, [r7, #20]
   13540:	2225      	movs	r2, #37	; 0x25
   13542:	2141      	movs	r1, #65	; 0x41
   13544:	5499      	strb	r1, [r3, r2]
   13546:	e00e      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13548:	697b      	ldr	r3, [r7, #20]
   1354a:	2224      	movs	r2, #36	; 0x24
   1354c:	5c9b      	ldrb	r3, [r3, r2]
   1354e:	b2db      	uxtb	r3, r3
   13550:	2b00      	cmp	r3, #0
   13552:	d104      	bne.n	1355e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13554:	697b      	ldr	r3, [r7, #20]
   13556:	0018      	movs	r0, r3
   13558:	4b49      	ldr	r3, [pc, #292]	; (13680 <_i2c_master_interrupt_handler+0x26c>)
   1355a:	4798      	blx	r3
   1355c:	e003      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   1355e:	697b      	ldr	r3, [r7, #20]
   13560:	0018      	movs	r0, r3
   13562:	4b48      	ldr	r3, [pc, #288]	; (13684 <_i2c_master_interrupt_handler+0x270>)
   13564:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13566:	697b      	ldr	r3, [r7, #20]
   13568:	8b5b      	ldrh	r3, [r3, #26]
   1356a:	b29b      	uxth	r3, r3
   1356c:	2b00      	cmp	r3, #0
   1356e:	d047      	beq.n	13600 <_i2c_master_interrupt_handler+0x1ec>
   13570:	697b      	ldr	r3, [r7, #20]
   13572:	8b9b      	ldrh	r3, [r3, #28]
   13574:	b29b      	uxth	r3, r3
   13576:	2b00      	cmp	r3, #0
   13578:	d142      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   1357a:	697b      	ldr	r3, [r7, #20]
   1357c:	2225      	movs	r2, #37	; 0x25
   1357e:	5c9b      	ldrb	r3, [r3, r2]
   13580:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13582:	2b05      	cmp	r3, #5
   13584:	d13c      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   13586:	697b      	ldr	r3, [r7, #20]
   13588:	2224      	movs	r2, #36	; 0x24
   1358a:	5c9b      	ldrb	r3, [r3, r2]
   1358c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1358e:	2b01      	cmp	r3, #1
   13590:	d136      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	7e1b      	ldrb	r3, [r3, #24]
   13596:	b2db      	uxtb	r3, r3
   13598:	001a      	movs	r2, r3
   1359a:	2302      	movs	r3, #2
   1359c:	4013      	ands	r3, r2
   1359e:	d002      	beq.n	135a6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   135a0:	693b      	ldr	r3, [r7, #16]
   135a2:	2202      	movs	r2, #2
   135a4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   135a6:	693b      	ldr	r3, [r7, #16]
   135a8:	2203      	movs	r2, #3
   135aa:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   135ac:	697b      	ldr	r3, [r7, #20]
   135ae:	2200      	movs	r2, #0
   135b0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	2225      	movs	r2, #37	; 0x25
   135b6:	2100      	movs	r1, #0
   135b8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   135ba:	230e      	movs	r3, #14
   135bc:	18fb      	adds	r3, r7, r3
   135be:	781b      	ldrb	r3, [r3, #0]
   135c0:	2202      	movs	r2, #2
   135c2:	4013      	ands	r3, r2
   135c4:	d00b      	beq.n	135de <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	2224      	movs	r2, #36	; 0x24
   135ca:	5c9b      	ldrb	r3, [r3, r2]
   135cc:	b2db      	uxtb	r3, r3
   135ce:	2b01      	cmp	r3, #1
   135d0:	d105      	bne.n	135de <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   135d2:	697b      	ldr	r3, [r7, #20]
   135d4:	691b      	ldr	r3, [r3, #16]
   135d6:	697a      	ldr	r2, [r7, #20]
   135d8:	0010      	movs	r0, r2
   135da:	4798      	blx	r3
   135dc:	e010      	b.n	13600 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   135de:	230e      	movs	r3, #14
   135e0:	18fb      	adds	r3, r7, r3
   135e2:	781b      	ldrb	r3, [r3, #0]
   135e4:	2201      	movs	r2, #1
   135e6:	4013      	ands	r3, r2
   135e8:	d00a      	beq.n	13600 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   135ea:	697b      	ldr	r3, [r7, #20]
   135ec:	2224      	movs	r2, #36	; 0x24
   135ee:	5c9b      	ldrb	r3, [r3, r2]
   135f0:	b2db      	uxtb	r3, r3
   135f2:	2b00      	cmp	r3, #0
   135f4:	d104      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   135f6:	697b      	ldr	r3, [r7, #20]
   135f8:	68db      	ldr	r3, [r3, #12]
   135fa:	697a      	ldr	r2, [r7, #20]
   135fc:	0010      	movs	r0, r2
   135fe:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13600:	697b      	ldr	r3, [r7, #20]
   13602:	2225      	movs	r2, #37	; 0x25
   13604:	5c9b      	ldrb	r3, [r3, r2]
   13606:	b2db      	uxtb	r3, r3
   13608:	2b05      	cmp	r3, #5
   1360a:	d02e      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
   1360c:	697b      	ldr	r3, [r7, #20]
   1360e:	2225      	movs	r2, #37	; 0x25
   13610:	5c9b      	ldrb	r3, [r3, r2]
   13612:	b2db      	uxtb	r3, r3
   13614:	2b00      	cmp	r3, #0
   13616:	d028      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13618:	693b      	ldr	r3, [r7, #16]
   1361a:	2203      	movs	r2, #3
   1361c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1361e:	697b      	ldr	r3, [r7, #20]
   13620:	2200      	movs	r2, #0
   13622:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	2200      	movs	r2, #0
   13628:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1362a:	697b      	ldr	r3, [r7, #20]
   1362c:	2225      	movs	r2, #37	; 0x25
   1362e:	5c9b      	ldrb	r3, [r3, r2]
   13630:	b2db      	uxtb	r3, r3
   13632:	2b41      	cmp	r3, #65	; 0x41
   13634:	d00e      	beq.n	13654 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13636:	697b      	ldr	r3, [r7, #20]
   13638:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1363a:	2b00      	cmp	r3, #0
   1363c:	d00a      	beq.n	13654 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1363e:	697b      	ldr	r3, [r7, #20]
   13640:	0018      	movs	r0, r3
   13642:	4b0e      	ldr	r3, [pc, #56]	; (1367c <_i2c_master_interrupt_handler+0x268>)
   13644:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13646:	693b      	ldr	r3, [r7, #16]
   13648:	685b      	ldr	r3, [r3, #4]
   1364a:	22e0      	movs	r2, #224	; 0xe0
   1364c:	02d2      	lsls	r2, r2, #11
   1364e:	431a      	orrs	r2, r3
   13650:	693b      	ldr	r3, [r7, #16]
   13652:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13654:	230e      	movs	r3, #14
   13656:	18fb      	adds	r3, r7, r3
   13658:	781b      	ldrb	r3, [r3, #0]
   1365a:	2204      	movs	r2, #4
   1365c:	4013      	ands	r3, r2
   1365e:	d004      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13660:	697b      	ldr	r3, [r7, #20]
   13662:	695b      	ldr	r3, [r3, #20]
   13664:	697a      	ldr	r2, [r7, #20]
   13666:	0010      	movs	r0, r2
   13668:	4798      	blx	r3
		}
	}
}
   1366a:	46c0      	nop			; (mov r8, r8)
   1366c:	46bd      	mov	sp, r7
   1366e:	b006      	add	sp, #24
   13670:	bd80      	pop	{r7, pc}
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	20005ac0 	.word	0x20005ac0
   13678:	00013095 	.word	0x00013095
   1367c:	00012f05 	.word	0x00012f05
   13680:	00013019 	.word	0x00013019
   13684:	00012f29 	.word	0x00012f29

00013688 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13688:	b580      	push	{r7, lr}
   1368a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   1368c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13690:	4b02      	ldr	r3, [pc, #8]	; (1369c <NVIC_SystemReset+0x14>)
   13692:	4a03      	ldr	r2, [pc, #12]	; (136a0 <NVIC_SystemReset+0x18>)
   13694:	60da      	str	r2, [r3, #12]
   13696:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1369a:	e7fe      	b.n	1369a <NVIC_SystemReset+0x12>
   1369c:	e000ed00 	.word	0xe000ed00
   136a0:	05fa0004 	.word	0x05fa0004

000136a4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   136a4:	b580      	push	{r7, lr}
   136a6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   136a8:	4b02      	ldr	r3, [pc, #8]	; (136b4 <system_reset+0x10>)
   136aa:	4798      	blx	r3
}
   136ac:	46c0      	nop			; (mov r8, r8)
   136ae:	46bd      	mov	sp, r7
   136b0:	bd80      	pop	{r7, pc}
   136b2:	46c0      	nop			; (mov r8, r8)
   136b4:	00013689 	.word	0x00013689

000136b8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   136b8:	b580      	push	{r7, lr}
   136ba:	b086      	sub	sp, #24
   136bc:	af00      	add	r7, sp, #0
   136be:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   136c0:	4b96      	ldr	r3, [pc, #600]	; (1391c <vCommandConsoleTask+0x264>)
   136c2:	0018      	movs	r0, r3
   136c4:	4b96      	ldr	r3, [pc, #600]	; (13920 <vCommandConsoleTask+0x268>)
   136c6:	4798      	blx	r3
   // FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   136c8:	4b96      	ldr	r3, [pc, #600]	; (13924 <vCommandConsoleTask+0x26c>)
   136ca:	0018      	movs	r0, r3
   136cc:	4b94      	ldr	r3, [pc, #592]	; (13920 <vCommandConsoleTask+0x268>)
   136ce:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   136d0:	4b95      	ldr	r3, [pc, #596]	; (13928 <vCommandConsoleTask+0x270>)
   136d2:	0018      	movs	r0, r3
   136d4:	4b92      	ldr	r3, [pc, #584]	; (13920 <vCommandConsoleTask+0x268>)
   136d6:	4798      	blx	r3
   //  FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   // FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   // FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   // FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   136d8:	4b94      	ldr	r3, [pc, #592]	; (1392c <vCommandConsoleTask+0x274>)
   136da:	0018      	movs	r0, r3
   136dc:	4b90      	ldr	r3, [pc, #576]	; (13920 <vCommandConsoleTask+0x268>)
   136de:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTemperatureSensorGetTemperature);
   136e0:	4b93      	ldr	r3, [pc, #588]	; (13930 <vCommandConsoleTask+0x278>)
   136e2:	0018      	movs	r0, r3
   136e4:	4b8e      	ldr	r3, [pc, #568]	; (13920 <vCommandConsoleTask+0x268>)
   136e6:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   136e8:	2317      	movs	r3, #23
   136ea:	18fb      	adds	r3, r7, r3
   136ec:	2200      	movs	r2, #0
   136ee:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   136f0:	4b90      	ldr	r3, [pc, #576]	; (13934 <vCommandConsoleTask+0x27c>)
   136f2:	0018      	movs	r0, r3
   136f4:	4b90      	ldr	r3, [pc, #576]	; (13938 <vCommandConsoleTask+0x280>)
   136f6:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   136f8:	2203      	movs	r2, #3
   136fa:	2100      	movs	r1, #0
   136fc:	2001      	movs	r0, #1
   136fe:	4b8f      	ldr	r3, [pc, #572]	; (1393c <vCommandConsoleTask+0x284>)
   13700:	4798      	blx	r3
   13702:	0002      	movs	r2, r0
   13704:	4b8e      	ldr	r3, [pc, #568]	; (13940 <vCommandConsoleTask+0x288>)
   13706:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13708:	4b8d      	ldr	r3, [pc, #564]	; (13940 <vCommandConsoleTask+0x288>)
   1370a:	681b      	ldr	r3, [r3, #0]
   1370c:	2b00      	cmp	r3, #0
   1370e:	d107      	bne.n	13720 <vCommandConsoleTask+0x68>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13710:	4b8c      	ldr	r3, [pc, #560]	; (13944 <vCommandConsoleTask+0x28c>)
   13712:	0019      	movs	r1, r3
   13714:	2003      	movs	r0, #3
   13716:	4b8c      	ldr	r3, [pc, #560]	; (13948 <vCommandConsoleTask+0x290>)
   13718:	4798      	blx	r3
        vTaskSuspend(NULL);
   1371a:	2000      	movs	r0, #0
   1371c:	4b8b      	ldr	r3, [pc, #556]	; (1394c <vCommandConsoleTask+0x294>)
   1371e:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13720:	230c      	movs	r3, #12
   13722:	18fb      	adds	r3, r7, r3
   13724:	0018      	movs	r0, r3
   13726:	4b8a      	ldr	r3, [pc, #552]	; (13950 <vCommandConsoleTask+0x298>)
   13728:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   1372a:	230c      	movs	r3, #12
   1372c:	18fb      	adds	r3, r7, r3
   1372e:	781b      	ldrb	r3, [r3, #0]
   13730:	2b0a      	cmp	r3, #10
   13732:	d004      	beq.n	1373e <vCommandConsoleTask+0x86>
   13734:	230c      	movs	r3, #12
   13736:	18fb      	adds	r3, r7, r3
   13738:	781b      	ldrb	r3, [r3, #0]
   1373a:	2b0d      	cmp	r3, #13
   1373c:	d137      	bne.n	137ae <vCommandConsoleTask+0xf6>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   1373e:	4b85      	ldr	r3, [pc, #532]	; (13954 <vCommandConsoleTask+0x29c>)
   13740:	0018      	movs	r0, r3
   13742:	4b7d      	ldr	r3, [pc, #500]	; (13938 <vCommandConsoleTask+0x280>)
   13744:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   13746:	4b84      	ldr	r3, [pc, #528]	; (13958 <vCommandConsoleTask+0x2a0>)
   13748:	2200      	movs	r2, #0
   1374a:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   1374c:	4b83      	ldr	r3, [pc, #524]	; (1395c <vCommandConsoleTask+0x2a4>)
   1374e:	2200      	movs	r2, #0
   13750:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   13752:	4983      	ldr	r1, [pc, #524]	; (13960 <vCommandConsoleTask+0x2a8>)
   13754:	4b83      	ldr	r3, [pc, #524]	; (13964 <vCommandConsoleTask+0x2ac>)
   13756:	2231      	movs	r2, #49	; 0x31
   13758:	0018      	movs	r0, r3
   1375a:	4b83      	ldr	r3, [pc, #524]	; (13968 <vCommandConsoleTask+0x2b0>)
   1375c:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   1375e:	4b81      	ldr	r3, [pc, #516]	; (13964 <vCommandConsoleTask+0x2ac>)
   13760:	2231      	movs	r2, #49	; 0x31
   13762:	2100      	movs	r1, #0
   13764:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   13766:	4981      	ldr	r1, [pc, #516]	; (1396c <vCommandConsoleTask+0x2b4>)
   13768:	4b7d      	ldr	r3, [pc, #500]	; (13960 <vCommandConsoleTask+0x2a8>)
   1376a:	2264      	movs	r2, #100	; 0x64
   1376c:	0018      	movs	r0, r3
   1376e:	4b80      	ldr	r3, [pc, #512]	; (13970 <vCommandConsoleTask+0x2b8>)
   13770:	4798      	blx	r3
   13772:	0003      	movs	r3, r0
   13774:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13776:	4b7d      	ldr	r3, [pc, #500]	; (1396c <vCommandConsoleTask+0x2b4>)
   13778:	2263      	movs	r2, #99	; 0x63
   1377a:	2100      	movs	r1, #0
   1377c:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   1377e:	4b7b      	ldr	r3, [pc, #492]	; (1396c <vCommandConsoleTask+0x2b4>)
   13780:	0018      	movs	r0, r3
   13782:	4b6d      	ldr	r3, [pc, #436]	; (13938 <vCommandConsoleTask+0x280>)
   13784:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   13786:	693b      	ldr	r3, [r7, #16]
   13788:	2b00      	cmp	r3, #0
   1378a:	d1ec      	bne.n	13766 <vCommandConsoleTask+0xae>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   1378c:	2317      	movs	r3, #23
   1378e:	18fb      	adds	r3, r7, r3
   13790:	2200      	movs	r2, #0
   13792:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13794:	4b72      	ldr	r3, [pc, #456]	; (13960 <vCommandConsoleTask+0x2a8>)
   13796:	2232      	movs	r2, #50	; 0x32
   13798:	2100      	movs	r1, #0
   1379a:	0018      	movs	r0, r3
   1379c:	4b75      	ldr	r3, [pc, #468]	; (13974 <vCommandConsoleTask+0x2bc>)
   1379e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   137a0:	4b72      	ldr	r3, [pc, #456]	; (1396c <vCommandConsoleTask+0x2b4>)
   137a2:	2264      	movs	r2, #100	; 0x64
   137a4:	2100      	movs	r1, #0
   137a6:	0018      	movs	r0, r3
   137a8:	4b72      	ldr	r3, [pc, #456]	; (13974 <vCommandConsoleTask+0x2bc>)
   137aa:	4798      	blx	r3
   137ac:	e0b5      	b.n	1391a <vCommandConsoleTask+0x262>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   137ae:	4b6a      	ldr	r3, [pc, #424]	; (13958 <vCommandConsoleTask+0x2a0>)
   137b0:	781b      	ldrb	r3, [r3, #0]
   137b2:	2b00      	cmp	r3, #0
   137b4:	d059      	beq.n	1386a <vCommandConsoleTask+0x1b2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   137b6:	4b69      	ldr	r3, [pc, #420]	; (1395c <vCommandConsoleTask+0x2a4>)
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2b03      	cmp	r3, #3
   137bc:	d80c      	bhi.n	137d8 <vCommandConsoleTask+0x120>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   137be:	4b67      	ldr	r3, [pc, #412]	; (1395c <vCommandConsoleTask+0x2a4>)
   137c0:	781b      	ldrb	r3, [r3, #0]
   137c2:	1c5a      	adds	r2, r3, #1
   137c4:	b2d1      	uxtb	r1, r2
   137c6:	4a65      	ldr	r2, [pc, #404]	; (1395c <vCommandConsoleTask+0x2a4>)
   137c8:	7011      	strb	r1, [r2, #0]
   137ca:	001a      	movs	r2, r3
   137cc:	230c      	movs	r3, #12
   137ce:	18fb      	adds	r3, r7, r3
   137d0:	7819      	ldrb	r1, [r3, #0]
   137d2:	4b69      	ldr	r3, [pc, #420]	; (13978 <vCommandConsoleTask+0x2c0>)
   137d4:	5499      	strb	r1, [r3, r2]
   137d6:	e005      	b.n	137e4 <vCommandConsoleTask+0x12c>
                } else {
                    isEscapeCode = false;
   137d8:	4b5f      	ldr	r3, [pc, #380]	; (13958 <vCommandConsoleTask+0x2a0>)
   137da:	2200      	movs	r2, #0
   137dc:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   137de:	4b5f      	ldr	r3, [pc, #380]	; (1395c <vCommandConsoleTask+0x2a4>)
   137e0:	2200      	movs	r2, #0
   137e2:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   137e4:	4b5d      	ldr	r3, [pc, #372]	; (1395c <vCommandConsoleTask+0x2a4>)
   137e6:	781b      	ldrb	r3, [r3, #0]
   137e8:	2b01      	cmp	r3, #1
   137ea:	d999      	bls.n	13720 <vCommandConsoleTask+0x68>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   137ec:	4a63      	ldr	r2, [pc, #396]	; (1397c <vCommandConsoleTask+0x2c4>)
   137ee:	4b62      	ldr	r3, [pc, #392]	; (13978 <vCommandConsoleTask+0x2c0>)
   137f0:	0011      	movs	r1, r2
   137f2:	0018      	movs	r0, r3
   137f4:	4b62      	ldr	r3, [pc, #392]	; (13980 <vCommandConsoleTask+0x2c8>)
   137f6:	4798      	blx	r3
   137f8:	1e03      	subs	r3, r0, #0
   137fa:	d02f      	beq.n	1385c <vCommandConsoleTask+0x1a4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   137fc:	4961      	ldr	r1, [pc, #388]	; (13984 <vCommandConsoleTask+0x2cc>)
   137fe:	4b58      	ldr	r3, [pc, #352]	; (13960 <vCommandConsoleTask+0x2a8>)
   13800:	221b      	movs	r2, #27
   13802:	0018      	movs	r0, r3
   13804:	4b60      	ldr	r3, [pc, #384]	; (13988 <vCommandConsoleTask+0x2d0>)
   13806:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13808:	4b55      	ldr	r3, [pc, #340]	; (13960 <vCommandConsoleTask+0x2a8>)
   1380a:	0018      	movs	r0, r3
   1380c:	4b4a      	ldr	r3, [pc, #296]	; (13938 <vCommandConsoleTask+0x280>)
   1380e:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13810:	2317      	movs	r3, #23
   13812:	18fb      	adds	r3, r7, r3
   13814:	2200      	movs	r2, #0
   13816:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13818:	4b51      	ldr	r3, [pc, #324]	; (13960 <vCommandConsoleTask+0x2a8>)
   1381a:	2232      	movs	r2, #50	; 0x32
   1381c:	2100      	movs	r1, #0
   1381e:	0018      	movs	r0, r3
   13820:	4b54      	ldr	r3, [pc, #336]	; (13974 <vCommandConsoleTask+0x2bc>)
   13822:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   13824:	494f      	ldr	r1, [pc, #316]	; (13964 <vCommandConsoleTask+0x2ac>)
   13826:	4b4e      	ldr	r3, [pc, #312]	; (13960 <vCommandConsoleTask+0x2a8>)
   13828:	2231      	movs	r2, #49	; 0x31
   1382a:	0018      	movs	r0, r3
   1382c:	4b4e      	ldr	r3, [pc, #312]	; (13968 <vCommandConsoleTask+0x2b0>)
   1382e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13830:	4b4b      	ldr	r3, [pc, #300]	; (13960 <vCommandConsoleTask+0x2a8>)
   13832:	0018      	movs	r0, r3
   13834:	4b55      	ldr	r3, [pc, #340]	; (1398c <vCommandConsoleTask+0x2d4>)
   13836:	4798      	blx	r3
   13838:	0003      	movs	r3, r0
   1383a:	2b30      	cmp	r3, #48	; 0x30
   1383c:	d806      	bhi.n	1384c <vCommandConsoleTask+0x194>
   1383e:	4b49      	ldr	r3, [pc, #292]	; (13964 <vCommandConsoleTask+0x2ac>)
   13840:	0018      	movs	r0, r3
   13842:	4b52      	ldr	r3, [pc, #328]	; (1398c <vCommandConsoleTask+0x2d4>)
   13844:	4798      	blx	r3
   13846:	0003      	movs	r3, r0
   13848:	b2da      	uxtb	r2, r3
   1384a:	e000      	b.n	1384e <vCommandConsoleTask+0x196>
   1384c:	2231      	movs	r2, #49	; 0x31
   1384e:	2317      	movs	r3, #23
   13850:	18fb      	adds	r3, r7, r3
   13852:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   13854:	4b42      	ldr	r3, [pc, #264]	; (13960 <vCommandConsoleTask+0x2a8>)
   13856:	0018      	movs	r0, r3
   13858:	4b37      	ldr	r3, [pc, #220]	; (13938 <vCommandConsoleTask+0x280>)
   1385a:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   1385c:	4b3e      	ldr	r3, [pc, #248]	; (13958 <vCommandConsoleTask+0x2a0>)
   1385e:	2200      	movs	r2, #0
   13860:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13862:	4b3e      	ldr	r3, [pc, #248]	; (1395c <vCommandConsoleTask+0x2a4>)
   13864:	2200      	movs	r2, #0
   13866:	701a      	strb	r2, [r3, #0]
   13868:	e75a      	b.n	13720 <vCommandConsoleTask+0x68>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   1386a:	230c      	movs	r3, #12
   1386c:	18fb      	adds	r3, r7, r3
   1386e:	781b      	ldrb	r3, [r3, #0]
   13870:	2b0d      	cmp	r3, #13
   13872:	d100      	bne.n	13876 <vCommandConsoleTask+0x1be>
   13874:	e754      	b.n	13720 <vCommandConsoleTask+0x68>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13876:	230c      	movs	r3, #12
   13878:	18fb      	adds	r3, r7, r3
   1387a:	781b      	ldrb	r3, [r3, #0]
   1387c:	2b08      	cmp	r3, #8
   1387e:	d004      	beq.n	1388a <vCommandConsoleTask+0x1d2>
   13880:	230c      	movs	r3, #12
   13882:	18fb      	adds	r3, r7, r3
   13884:	781b      	ldrb	r3, [r3, #0]
   13886:	2b7f      	cmp	r3, #127	; 0x7f
   13888:	d11c      	bne.n	138c4 <vCommandConsoleTask+0x20c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   1388a:	2308      	movs	r3, #8
   1388c:	18fb      	adds	r3, r7, r3
   1388e:	4a40      	ldr	r2, [pc, #256]	; (13990 <vCommandConsoleTask+0x2d8>)
   13890:	6812      	ldr	r2, [r2, #0]
   13892:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13894:	2308      	movs	r3, #8
   13896:	18fb      	adds	r3, r7, r3
   13898:	0018      	movs	r0, r3
   1389a:	4b27      	ldr	r3, [pc, #156]	; (13938 <vCommandConsoleTask+0x280>)
   1389c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   1389e:	2317      	movs	r3, #23
   138a0:	18fb      	adds	r3, r7, r3
   138a2:	781b      	ldrb	r3, [r3, #0]
   138a4:	2b00      	cmp	r3, #0
   138a6:	d037      	beq.n	13918 <vCommandConsoleTask+0x260>
                    cInputIndex--;
   138a8:	2317      	movs	r3, #23
   138aa:	18fb      	adds	r3, r7, r3
   138ac:	781a      	ldrb	r2, [r3, #0]
   138ae:	2317      	movs	r3, #23
   138b0:	18fb      	adds	r3, r7, r3
   138b2:	3a01      	subs	r2, #1
   138b4:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   138b6:	2317      	movs	r3, #23
   138b8:	18fb      	adds	r3, r7, r3
   138ba:	781b      	ldrb	r3, [r3, #0]
   138bc:	4a28      	ldr	r2, [pc, #160]	; (13960 <vCommandConsoleTask+0x2a8>)
   138be:	2100      	movs	r1, #0
   138c0:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   138c2:	e029      	b.n	13918 <vCommandConsoleTask+0x260>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   138c4:	230c      	movs	r3, #12
   138c6:	18fb      	adds	r3, r7, r3
   138c8:	781b      	ldrb	r3, [r3, #0]
   138ca:	2b1b      	cmp	r3, #27
   138cc:	d106      	bne.n	138dc <vCommandConsoleTask+0x224>
                isEscapeCode = true;  // Next characters will be code arguments
   138ce:	4b22      	ldr	r3, [pc, #136]	; (13958 <vCommandConsoleTask+0x2a0>)
   138d0:	2201      	movs	r2, #1
   138d2:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   138d4:	4b21      	ldr	r3, [pc, #132]	; (1395c <vCommandConsoleTask+0x2a4>)
   138d6:	2200      	movs	r2, #0
   138d8:	701a      	strb	r2, [r3, #0]
   138da:	e721      	b.n	13720 <vCommandConsoleTask+0x68>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   138dc:	2317      	movs	r3, #23
   138de:	18fb      	adds	r3, r7, r3
   138e0:	781b      	ldrb	r3, [r3, #0]
   138e2:	2b31      	cmp	r3, #49	; 0x31
   138e4:	d80e      	bhi.n	13904 <vCommandConsoleTask+0x24c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   138e6:	2317      	movs	r3, #23
   138e8:	18fb      	adds	r3, r7, r3
   138ea:	781b      	ldrb	r3, [r3, #0]
   138ec:	220c      	movs	r2, #12
   138ee:	18ba      	adds	r2, r7, r2
   138f0:	7811      	ldrb	r1, [r2, #0]
   138f2:	4a1b      	ldr	r2, [pc, #108]	; (13960 <vCommandConsoleTask+0x2a8>)
   138f4:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   138f6:	2317      	movs	r3, #23
   138f8:	18fb      	adds	r3, r7, r3
   138fa:	781a      	ldrb	r2, [r3, #0]
   138fc:	2317      	movs	r3, #23
   138fe:	18fb      	adds	r3, r7, r3
   13900:	3201      	adds	r2, #1
   13902:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13904:	230c      	movs	r3, #12
   13906:	18fb      	adds	r3, r7, r3
   13908:	2200      	movs	r2, #0
   1390a:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   1390c:	230c      	movs	r3, #12
   1390e:	18fb      	adds	r3, r7, r3
   13910:	0018      	movs	r0, r3
   13912:	4b09      	ldr	r3, [pc, #36]	; (13938 <vCommandConsoleTask+0x280>)
   13914:	4798      	blx	r3
   13916:	e703      	b.n	13720 <vCommandConsoleTask+0x68>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13918:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   1391a:	e701      	b.n	13720 <vCommandConsoleTask+0x68>
   1391c:	00035728 	.word	0x00035728
   13920:	00017841 	.word	0x00017841
   13924:	00035768 	.word	0x00035768
   13928:	00035738 	.word	0x00035738
   1392c:	00035758 	.word	0x00035758
   13930:	00035748 	.word	0x00035748
   13934:	00035544 	.word	0x00035544
   13938:	0001d765 	.word	0x0001d765
   1393c:	00019e05 	.word	0x00019e05
   13940:	200045f0 	.word	0x200045f0
   13944:	00035668 	.word	0x00035668
   13948:	0001d851 	.word	0x0001d851
   1394c:	0001bbf1 	.word	0x0001bbf1
   13950:	00013995 	.word	0x00013995
   13954:	00035688 	.word	0x00035688
   13958:	20000384 	.word	0x20000384
   1395c:	20000385 	.word	0x20000385
   13960:	200003bc 	.word	0x200003bc
   13964:	20000388 	.word	0x20000388
   13968:	0003442b 	.word	0x0003442b
   1396c:	200003f0 	.word	0x200003f0
   13970:	000178b1 	.word	0x000178b1
   13974:	00034043 	.word	0x00034043
   13978:	20000454 	.word	0x20000454
   1397c:	0003568c 	.word	0x0003568c
   13980:	00034345 	.word	0x00034345
   13984:	00035690 	.word	0x00035690
   13988:	00034301 	.word	0x00034301
   1398c:	000343fb 	.word	0x000343fb
   13990:	00035698 	.word	0x00035698

00013994 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13994:	b580      	push	{r7, lr}
   13996:	b084      	sub	sp, #16
   13998:	af00      	add	r7, sp, #0
   1399a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	0018      	movs	r0, r3
   139a0:	4b0c      	ldr	r3, [pc, #48]	; (139d4 <FreeRTOS_read+0x40>)
   139a2:	4798      	blx	r3
   139a4:	0003      	movs	r3, r0
   139a6:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   139a8:	e00d      	b.n	139c6 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   139aa:	4b0b      	ldr	r3, [pc, #44]	; (139d8 <FreeRTOS_read+0x44>)
   139ac:	681a      	ldr	r2, [r3, #0]
   139ae:	2301      	movs	r3, #1
   139b0:	425b      	negs	r3, r3
   139b2:	0019      	movs	r1, r3
   139b4:	0010      	movs	r0, r2
   139b6:	4b09      	ldr	r3, [pc, #36]	; (139dc <FreeRTOS_read+0x48>)
   139b8:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   139ba:	687b      	ldr	r3, [r7, #4]
   139bc:	0018      	movs	r0, r3
   139be:	4b05      	ldr	r3, [pc, #20]	; (139d4 <FreeRTOS_read+0x40>)
   139c0:	4798      	blx	r3
   139c2:	0003      	movs	r3, r0
   139c4:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   139c6:	68fb      	ldr	r3, [r7, #12]
   139c8:	3301      	adds	r3, #1
   139ca:	d0ee      	beq.n	139aa <FreeRTOS_read+0x16>
    }
}
   139cc:	46c0      	nop			; (mov r8, r8)
   139ce:	46bd      	mov	sp, r7
   139d0:	b004      	add	sp, #16
   139d2:	bd80      	pop	{r7, pc}
   139d4:	0001d801 	.word	0x0001d801
   139d8:	200045f0 	.word	0x200045f0
   139dc:	0001adbd 	.word	0x0001adbd

000139e0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   139e0:	b580      	push	{r7, lr}
   139e2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   139e4:	4b0a      	ldr	r3, [pc, #40]	; (13a10 <CliCharReadySemaphoreGiveFromISR+0x30>)
   139e6:	2200      	movs	r2, #0
   139e8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   139ea:	4b0a      	ldr	r3, [pc, #40]	; (13a14 <CliCharReadySemaphoreGiveFromISR+0x34>)
   139ec:	681b      	ldr	r3, [r3, #0]
   139ee:	4a08      	ldr	r2, [pc, #32]	; (13a10 <CliCharReadySemaphoreGiveFromISR+0x30>)
   139f0:	0011      	movs	r1, r2
   139f2:	0018      	movs	r0, r3
   139f4:	4b08      	ldr	r3, [pc, #32]	; (13a18 <CliCharReadySemaphoreGiveFromISR+0x38>)
   139f6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   139f8:	4b05      	ldr	r3, [pc, #20]	; (13a10 <CliCharReadySemaphoreGiveFromISR+0x30>)
   139fa:	681b      	ldr	r3, [r3, #0]
   139fc:	2b00      	cmp	r3, #0
   139fe:	d003      	beq.n	13a08 <CliCharReadySemaphoreGiveFromISR+0x28>
   13a00:	4b06      	ldr	r3, [pc, #24]	; (13a1c <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13a02:	2280      	movs	r2, #128	; 0x80
   13a04:	0552      	lsls	r2, r2, #21
   13a06:	601a      	str	r2, [r3, #0]
}
   13a08:	46c0      	nop			; (mov r8, r8)
   13a0a:	46bd      	mov	sp, r7
   13a0c:	bd80      	pop	{r7, pc}
   13a0e:	46c0      	nop			; (mov r8, r8)
   13a10:	20000458 	.word	0x20000458
   13a14:	200045f0 	.word	0x200045f0
   13a18:	0001a735 	.word	0x0001a735
   13a1c:	e000ed04 	.word	0xe000ed04

00013a20 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13a20:	b590      	push	{r4, r7, lr}
   13a22:	b087      	sub	sp, #28
   13a24:	af00      	add	r7, sp, #0
   13a26:	60f8      	str	r0, [r7, #12]
   13a28:	60b9      	str	r1, [r7, #8]
   13a2a:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13a2c:	2317      	movs	r3, #23
   13a2e:	18fb      	adds	r3, r7, r3
   13a30:	221b      	movs	r2, #27
   13a32:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13a34:	2317      	movs	r3, #23
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	781b      	ldrb	r3, [r3, #0]
   13a3a:	4a08      	ldr	r2, [pc, #32]	; (13a5c <xCliClearTerminalScreen+0x3c>)
   13a3c:	4808      	ldr	r0, [pc, #32]	; (13a60 <xCliClearTerminalScreen+0x40>)
   13a3e:	210f      	movs	r1, #15
   13a40:	4c08      	ldr	r4, [pc, #32]	; (13a64 <xCliClearTerminalScreen+0x44>)
   13a42:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13a44:	4a06      	ldr	r2, [pc, #24]	; (13a60 <xCliClearTerminalScreen+0x40>)
   13a46:	68b9      	ldr	r1, [r7, #8]
   13a48:	68fb      	ldr	r3, [r7, #12]
   13a4a:	0018      	movs	r0, r3
   13a4c:	4b05      	ldr	r3, [pc, #20]	; (13a64 <xCliClearTerminalScreen+0x44>)
   13a4e:	4798      	blx	r3
    return pdFALSE;
   13a50:	2300      	movs	r3, #0
}
   13a52:	0018      	movs	r0, r3
   13a54:	46bd      	mov	sp, r7
   13a56:	b007      	add	sp, #28
   13a58:	bd90      	pop	{r4, r7, pc}
   13a5a:	46c0      	nop			; (mov r8, r8)
   13a5c:	0003569c 	.word	0x0003569c
   13a60:	20000374 	.word	0x20000374
   13a64:	0003429d 	.word	0x0003429d

00013a68 <CLI_OTAU>:


// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13a68:	b580      	push	{r7, lr}
   13a6a:	b084      	sub	sp, #16
   13a6c:	af00      	add	r7, sp, #0
   13a6e:	60f8      	str	r0, [r7, #12]
   13a70:	60b9      	str	r1, [r7, #8]
   13a72:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13a74:	2002      	movs	r0, #2
   13a76:	4b06      	ldr	r3, [pc, #24]	; (13a90 <CLI_OTAU+0x28>)
   13a78:	4798      	blx	r3
    vTaskDelay(20000);
   13a7a:	4b06      	ldr	r3, [pc, #24]	; (13a94 <CLI_OTAU+0x2c>)
   13a7c:	0018      	movs	r0, r3
   13a7e:	4b06      	ldr	r3, [pc, #24]	; (13a98 <CLI_OTAU+0x30>)
   13a80:	4798      	blx	r3
	system_reset();
   13a82:	4b06      	ldr	r3, [pc, #24]	; (13a9c <CLI_OTAU+0x34>)
   13a84:	4798      	blx	r3
    return pdFALSE;
   13a86:	2300      	movs	r3, #0
}
   13a88:	0018      	movs	r0, r3
   13a8a:	46bd      	mov	sp, r7
   13a8c:	b004      	add	sp, #16
   13a8e:	bd80      	pop	{r7, pc}
   13a90:	00016e51 	.word	0x00016e51
   13a94:	00004e20 	.word	0x00004e20
   13a98:	0001bb11 	.word	0x0001bb11
   13a9c:	000136a5 	.word	0x000136a5

00013aa0 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13aa0:	b580      	push	{r7, lr}
   13aa2:	b084      	sub	sp, #16
   13aa4:	af00      	add	r7, sp, #0
   13aa6:	60f8      	str	r0, [r7, #12]
   13aa8:	60b9      	str	r1, [r7, #8]
   13aaa:	607a      	str	r2, [r7, #4]
    system_reset();
   13aac:	4b03      	ldr	r3, [pc, #12]	; (13abc <CLI_ResetDevice+0x1c>)
   13aae:	4798      	blx	r3
    return pdFALSE;
   13ab0:	2300      	movs	r3, #0
}
   13ab2:	0018      	movs	r0, r3
   13ab4:	46bd      	mov	sp, r7
   13ab6:	b004      	add	sp, #16
   13ab8:	bd80      	pop	{r7, pc}
   13aba:	46c0      	nop			; (mov r8, r8)
   13abc:	000136a5 	.word	0x000136a5

00013ac0 <CLI_TemperatureSensorGetTemperature>:
//     }
// }
volatile char mqtt_msg_temp1[64] = "{\"d\":{\"temp\":17}}\"";
static struct mqtt_module mqtt_inst;
BaseType_t CLI_TemperatureSensorGetTemperature(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
  {  
   13ac0:	b590      	push	{r4, r7, lr}
   13ac2:	b0a7      	sub	sp, #156	; 0x9c
   13ac4:	af00      	add	r7, sp, #0
   13ac6:	60f8      	str	r0, [r7, #12]
   13ac8:	60b9      	str	r1, [r7, #8]
   13aca:	607a      	str	r2, [r7, #4]
		snprintf((char *) buffer1, sizeof(buffer1), "Temp :  %d\r\n", buf);
		SerialConsoleWriteString(buffer1);*/
	
/////////////////////////////////SHTC3//////////////////////////////////////////////////////////////////////////////////////////////

		int32_t res = SHTC3_Init();  //(buffer, 2);
   13acc:	4b29      	ldr	r3, [pc, #164]	; (13b74 <CLI_TemperatureSensorGetTemperature+0xb4>)
   13ace:	4798      	blx	r3
   13ad0:	0003      	movs	r3, r0
   13ad2:	2294      	movs	r2, #148	; 0x94
   13ad4:	18ba      	adds	r2, r7, r2
   13ad6:	6013      	str	r3, [r2, #0]
		
		snprintf((char *) buffer1, sizeof(buffer1), "Status of wakeup : %d\r\n", res);
   13ad8:	2394      	movs	r3, #148	; 0x94
   13ada:	18fb      	adds	r3, r7, r3
   13adc:	681b      	ldr	r3, [r3, #0]
   13ade:	4a26      	ldr	r2, [pc, #152]	; (13b78 <CLI_TemperatureSensorGetTemperature+0xb8>)
   13ae0:	2114      	movs	r1, #20
   13ae2:	1878      	adds	r0, r7, r1
   13ae4:	2140      	movs	r1, #64	; 0x40
   13ae6:	4c25      	ldr	r4, [pc, #148]	; (13b7c <CLI_TemperatureSensorGetTemperature+0xbc>)
   13ae8:	47a0      	blx	r4
		SerialConsoleWriteString(buffer1);
   13aea:	2314      	movs	r3, #20
   13aec:	18fb      	adds	r3, r7, r3
   13aee:	0018      	movs	r0, r3
   13af0:	4b23      	ldr	r3, [pc, #140]	; (13b80 <CLI_TemperatureSensorGetTemperature+0xc0>)
   13af2:	4798      	blx	r3
		//int32_t id =  (buffer[0] << 8 | buffer[1]) ;
		//snprintf((char *) buffer1, sizeof(buffer1), "ID : 0b%x\r\n",id );
		//SerialConsoleWriteString(buffer1);
		res = SHTC3_Read_Data(buffer,2);
   13af4:	2354      	movs	r3, #84	; 0x54
   13af6:	18fb      	adds	r3, r7, r3
   13af8:	2102      	movs	r1, #2
   13afa:	0018      	movs	r0, r3
   13afc:	4b21      	ldr	r3, [pc, #132]	; (13b84 <CLI_TemperatureSensorGetTemperature+0xc4>)
   13afe:	4798      	blx	r3
   13b00:	0003      	movs	r3, r0
   13b02:	2294      	movs	r2, #148	; 0x94
   13b04:	18ba      	adds	r2, r7, r2
   13b06:	6013      	str	r3, [r2, #0]
		snprintf((char *) buffer1, sizeof(buffer1), "Status of read cmd : %d\r\n", res);
   13b08:	2394      	movs	r3, #148	; 0x94
   13b0a:	18fb      	adds	r3, r7, r3
   13b0c:	681b      	ldr	r3, [r3, #0]
   13b0e:	4a1e      	ldr	r2, [pc, #120]	; (13b88 <CLI_TemperatureSensorGetTemperature+0xc8>)
   13b10:	2114      	movs	r1, #20
   13b12:	1878      	adds	r0, r7, r1
   13b14:	2140      	movs	r1, #64	; 0x40
   13b16:	4c19      	ldr	r4, [pc, #100]	; (13b7c <CLI_TemperatureSensorGetTemperature+0xbc>)
   13b18:	47a0      	blx	r4
		SerialConsoleWriteString(buffer1);
   13b1a:	2314      	movs	r3, #20
   13b1c:	18fb      	adds	r3, r7, r3
   13b1e:	0018      	movs	r0, r3
   13b20:	4b17      	ldr	r3, [pc, #92]	; (13b80 <CLI_TemperatureSensorGetTemperature+0xc0>)
   13b22:	4798      	blx	r3
		int32_t temperature = (-45 + (((buffer[0] << 8 | buffer[1]) * 175) / 65536 ) );
   13b24:	2354      	movs	r3, #84	; 0x54
   13b26:	18fb      	adds	r3, r7, r3
   13b28:	781b      	ldrb	r3, [r3, #0]
   13b2a:	021b      	lsls	r3, r3, #8
   13b2c:	2254      	movs	r2, #84	; 0x54
   13b2e:	18ba      	adds	r2, r7, r2
   13b30:	7852      	ldrb	r2, [r2, #1]
   13b32:	4313      	orrs	r3, r2
   13b34:	22af      	movs	r2, #175	; 0xaf
   13b36:	4353      	muls	r3, r2
   13b38:	2b00      	cmp	r3, #0
   13b3a:	da02      	bge.n	13b42 <CLI_TemperatureSensorGetTemperature+0x82>
   13b3c:	4a13      	ldr	r2, [pc, #76]	; (13b8c <CLI_TemperatureSensorGetTemperature+0xcc>)
   13b3e:	4694      	mov	ip, r2
   13b40:	4463      	add	r3, ip
   13b42:	141b      	asrs	r3, r3, #16
   13b44:	3b2d      	subs	r3, #45	; 0x2d
   13b46:	613b      	str	r3, [r7, #16]
		snprintf((char *) buffer1, sizeof(buffer1), "Temp : %d\r\n",temperature );
   13b48:	693b      	ldr	r3, [r7, #16]
   13b4a:	4a11      	ldr	r2, [pc, #68]	; (13b90 <CLI_TemperatureSensorGetTemperature+0xd0>)
   13b4c:	2114      	movs	r1, #20
   13b4e:	1878      	adds	r0, r7, r1
   13b50:	2140      	movs	r1, #64	; 0x40
   13b52:	4c0a      	ldr	r4, [pc, #40]	; (13b7c <CLI_TemperatureSensorGetTemperature+0xbc>)
   13b54:	47a0      	blx	r4
		SerialConsoleWriteString(buffer1);
   13b56:	2314      	movs	r3, #20
   13b58:	18fb      	adds	r3, r7, r3
   13b5a:	0018      	movs	r0, r3
   13b5c:	4b08      	ldr	r3, [pc, #32]	; (13b80 <CLI_TemperatureSensorGetTemperature+0xc0>)
   13b5e:	4798      	blx	r3
		//snprintf(mqtt_msg_temp1, 63, "{\"d\":{\"temp\":%d}}", temperature);

        // mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp1, strlen(mqtt_msg_temp1), 1, 0);
		WifiAddTempDataToQueue(&temperature);
   13b60:	2310      	movs	r3, #16
   13b62:	18fb      	adds	r3, r7, r3
   13b64:	0018      	movs	r0, r3
   13b66:	4b0b      	ldr	r3, [pc, #44]	; (13b94 <CLI_TemperatureSensorGetTemperature+0xd4>)
   13b68:	4798      	blx	r3
			int state= MAX30100_INIT();
			snprintf((char *) buffer1, sizeof(buffer1), "Status of Init : %d\r\n",state );
			SerialConsoleWriteString(buffer1);*/
	

		return pdFALSE;
   13b6a:	2300      	movs	r3, #0
   }
   13b6c:	0018      	movs	r0, r3
   13b6e:	46bd      	mov	sp, r7
   13b70:	b027      	add	sp, #156	; 0x9c
   13b72:	bd90      	pop	{r4, r7, pc}
   13b74:	00015379 	.word	0x00015379
   13b78:	000356a4 	.word	0x000356a4
   13b7c:	0003429d 	.word	0x0003429d
   13b80:	0001d765 	.word	0x0001d765
   13b84:	000153c5 	.word	0x000153c5
   13b88:	000356bc 	.word	0x000356bc
   13b8c:	0000ffff 	.word	0x0000ffff
   13b90:	000356d8 	.word	0x000356d8
   13b94:	00016e85 	.word	0x00016e85

00013b98 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13b98:	b590      	push	{r4, r7, lr}
   13b9a:	b08f      	sub	sp, #60	; 0x3c
   13b9c:	af00      	add	r7, sp, #0
   13b9e:	60f8      	str	r0, [r7, #12]
   13ba0:	60b9      	str	r1, [r7, #8]
   13ba2:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13ba4:	2318      	movs	r3, #24
   13ba6:	18fb      	adds	r3, r7, r3
   13ba8:	2200      	movs	r2, #0
   13baa:	701a      	strb	r2, [r3, #0]
   13bac:	2318      	movs	r3, #24
   13bae:	18fb      	adds	r3, r7, r3
   13bb0:	2200      	movs	r2, #0
   13bb2:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13bb4:	2318      	movs	r3, #24
   13bb6:	18fb      	adds	r3, r7, r3
   13bb8:	2200      	movs	r2, #0
   13bba:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13bbc:	2318      	movs	r3, #24
   13bbe:	18fb      	adds	r3, r7, r3
   13bc0:	2200      	movs	r2, #0
   13bc2:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13bc4:	231c      	movs	r3, #28
   13bc6:	18fb      	adds	r3, r7, r3
   13bc8:	2200      	movs	r2, #0
   13bca:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13bcc:	231c      	movs	r3, #28
   13bce:	18fb      	adds	r3, r7, r3
   13bd0:	2214      	movs	r2, #20
   13bd2:	18ba      	adds	r2, r7, r2
   13bd4:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13bd6:	231c      	movs	r3, #28
   13bd8:	18fb      	adds	r3, r7, r3
   13bda:	2201      	movs	r2, #1
   13bdc:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13bde:	231c      	movs	r3, #28
   13be0:	18fb      	adds	r3, r7, r3
   13be2:	2218      	movs	r2, #24
   13be4:	18ba      	adds	r2, r7, r2
   13be6:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13be8:	231c      	movs	r3, #28
   13bea:	18fb      	adds	r3, r7, r3
   13bec:	2201      	movs	r2, #1
   13bee:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13bf0:	4b2a      	ldr	r3, [pc, #168]	; (13c9c <CLI_i2cScan+0x104>)
   13bf2:	0018      	movs	r0, r3
   13bf4:	4b2a      	ldr	r3, [pc, #168]	; (13ca0 <CLI_i2cScan+0x108>)
   13bf6:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13bf8:	2300      	movs	r3, #0
   13bfa:	637b      	str	r3, [r7, #52]	; 0x34
   13bfc:	e042      	b.n	13c84 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c00:	4a28      	ldr	r2, [pc, #160]	; (13ca4 <CLI_i2cScan+0x10c>)
   13c02:	4829      	ldr	r0, [pc, #164]	; (13ca8 <CLI_i2cScan+0x110>)
   13c04:	210f      	movs	r1, #15
   13c06:	4c29      	ldr	r4, [pc, #164]	; (13cac <CLI_i2cScan+0x114>)
   13c08:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13c0a:	4b27      	ldr	r3, [pc, #156]	; (13ca8 <CLI_i2cScan+0x110>)
   13c0c:	0018      	movs	r0, r3
   13c0e:	4b24      	ldr	r3, [pc, #144]	; (13ca0 <CLI_i2cScan+0x108>)
   13c10:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13c12:	2300      	movs	r3, #0
   13c14:	633b      	str	r3, [r7, #48]	; 0x30
   13c16:	e02b      	b.n	13c70 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c1a:	b2da      	uxtb	r2, r3
   13c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13c1e:	b2db      	uxtb	r3, r3
   13c20:	18d3      	adds	r3, r2, r3
   13c22:	b2da      	uxtb	r2, r3
   13c24:	231c      	movs	r3, #28
   13c26:	18fb      	adds	r3, r7, r3
   13c28:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   13c2a:	231c      	movs	r3, #28
   13c2c:	18fb      	adds	r3, r7, r3
   13c2e:	2264      	movs	r2, #100	; 0x64
   13c30:	2164      	movs	r1, #100	; 0x64
   13c32:	0018      	movs	r0, r3
   13c34:	4b1e      	ldr	r3, [pc, #120]	; (13cb0 <CLI_i2cScan+0x118>)
   13c36:	4798      	blx	r3
   13c38:	0003      	movs	r3, r0
   13c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13c3e:	2b00      	cmp	r3, #0
   13c40:	d10c      	bne.n	13c5c <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   13c42:	231c      	movs	r3, #28
   13c44:	18fb      	adds	r3, r7, r3
   13c46:	781b      	ldrb	r3, [r3, #0]
   13c48:	4a1a      	ldr	r2, [pc, #104]	; (13cb4 <CLI_i2cScan+0x11c>)
   13c4a:	4817      	ldr	r0, [pc, #92]	; (13ca8 <CLI_i2cScan+0x110>)
   13c4c:	210f      	movs	r1, #15
   13c4e:	4c17      	ldr	r4, [pc, #92]	; (13cac <CLI_i2cScan+0x114>)
   13c50:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13c52:	4b15      	ldr	r3, [pc, #84]	; (13ca8 <CLI_i2cScan+0x110>)
   13c54:	0018      	movs	r0, r3
   13c56:	4b12      	ldr	r3, [pc, #72]	; (13ca0 <CLI_i2cScan+0x108>)
   13c58:	4798      	blx	r3
   13c5a:	e006      	b.n	13c6a <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13c5c:	4b12      	ldr	r3, [pc, #72]	; (13ca8 <CLI_i2cScan+0x110>)
   13c5e:	4a16      	ldr	r2, [pc, #88]	; (13cb8 <CLI_i2cScan+0x120>)
   13c60:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   13c62:	4b11      	ldr	r3, [pc, #68]	; (13ca8 <CLI_i2cScan+0x110>)
   13c64:	0018      	movs	r0, r3
   13c66:	4b0e      	ldr	r3, [pc, #56]	; (13ca0 <CLI_i2cScan+0x108>)
   13c68:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13c6c:	3301      	adds	r3, #1
   13c6e:	633b      	str	r3, [r7, #48]	; 0x30
   13c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13c72:	2b0f      	cmp	r3, #15
   13c74:	ddd0      	ble.n	13c18 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13c76:	4b11      	ldr	r3, [pc, #68]	; (13cbc <CLI_i2cScan+0x124>)
   13c78:	0018      	movs	r0, r3
   13c7a:	4b09      	ldr	r3, [pc, #36]	; (13ca0 <CLI_i2cScan+0x108>)
   13c7c:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c80:	3310      	adds	r3, #16
   13c82:	637b      	str	r3, [r7, #52]	; 0x34
   13c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c86:	2b7f      	cmp	r3, #127	; 0x7f
   13c88:	ddb9      	ble.n	13bfe <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13c8a:	4b0c      	ldr	r3, [pc, #48]	; (13cbc <CLI_i2cScan+0x124>)
   13c8c:	0018      	movs	r0, r3
   13c8e:	4b04      	ldr	r3, [pc, #16]	; (13ca0 <CLI_i2cScan+0x108>)
   13c90:	4798      	blx	r3
			return pdFALSE;
   13c92:	2300      	movs	r3, #0

}
   13c94:	0018      	movs	r0, r3
   13c96:	46bd      	mov	sp, r7
   13c98:	b00f      	add	sp, #60	; 0x3c
   13c9a:	bd90      	pop	{r4, r7, pc}
   13c9c:	000356e4 	.word	0x000356e4
   13ca0:	0001d765 	.word	0x0001d765
   13ca4:	00035718 	.word	0x00035718
   13ca8:	20000374 	.word	0x20000374
   13cac:	0003429d 	.word	0x0003429d
   13cb0:	000151bd 	.word	0x000151bd
   13cb4:	00035720 	.word	0x00035720
   13cb8:	00202058 	.word	0x00202058
   13cbc:	00035688 	.word	0x00035688

00013cc0 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13cc0:	b590      	push	{r4, r7, lr}
   13cc2:	b085      	sub	sp, #20
   13cc4:	af00      	add	r7, sp, #0
   13cc6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   13cc8:	4b06      	ldr	r3, [pc, #24]	; (13ce4 <ControlAddGameData+0x24>)
   13cca:	6818      	ldr	r0, [r3, #0]
   13ccc:	6879      	ldr	r1, [r7, #4]
   13cce:	2300      	movs	r3, #0
   13cd0:	220a      	movs	r2, #10
   13cd2:	4c05      	ldr	r4, [pc, #20]	; (13ce8 <ControlAddGameData+0x28>)
   13cd4:	47a0      	blx	r4
   13cd6:	0003      	movs	r3, r0
   13cd8:	60fb      	str	r3, [r7, #12]
    return error;
   13cda:	68fb      	ldr	r3, [r7, #12]
}
   13cdc:	0018      	movs	r0, r3
   13cde:	46bd      	mov	sp, r7
   13ce0:	b005      	add	sp, #20
   13ce2:	bd90      	pop	{r4, r7, pc}
   13ce4:	2000045c 	.word	0x2000045c
   13ce8:	0001a0ad 	.word	0x0001a0ad

00013cec <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   13cec:	b580      	push	{r7, lr}
   13cee:	b084      	sub	sp, #16
   13cf0:	af00      	add	r7, sp, #0
   13cf2:	0002      	movs	r2, r0
   13cf4:	1dfb      	adds	r3, r7, #7
   13cf6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13cf8:	230f      	movs	r3, #15
   13cfa:	18fb      	adds	r3, r7, r3
   13cfc:	1dfa      	adds	r2, r7, #7
   13cfe:	7812      	ldrb	r2, [r2, #0]
   13d00:	09d2      	lsrs	r2, r2, #7
   13d02:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13d04:	230e      	movs	r3, #14
   13d06:	18fb      	adds	r3, r7, r3
   13d08:	1dfa      	adds	r2, r7, #7
   13d0a:	7812      	ldrb	r2, [r2, #0]
   13d0c:	0952      	lsrs	r2, r2, #5
   13d0e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13d10:	4b0d      	ldr	r3, [pc, #52]	; (13d48 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13d12:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   13d14:	230f      	movs	r3, #15
   13d16:	18fb      	adds	r3, r7, r3
   13d18:	781b      	ldrb	r3, [r3, #0]
   13d1a:	2b00      	cmp	r3, #0
   13d1c:	d10f      	bne.n	13d3e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13d1e:	230f      	movs	r3, #15
   13d20:	18fb      	adds	r3, r7, r3
   13d22:	781b      	ldrb	r3, [r3, #0]
   13d24:	009b      	lsls	r3, r3, #2
   13d26:	2210      	movs	r2, #16
   13d28:	4694      	mov	ip, r2
   13d2a:	44bc      	add	ip, r7
   13d2c:	4463      	add	r3, ip
   13d2e:	3b08      	subs	r3, #8
   13d30:	681a      	ldr	r2, [r3, #0]
   13d32:	230e      	movs	r3, #14
   13d34:	18fb      	adds	r3, r7, r3
   13d36:	781b      	ldrb	r3, [r3, #0]
   13d38:	01db      	lsls	r3, r3, #7
   13d3a:	18d3      	adds	r3, r2, r3
   13d3c:	e000      	b.n	13d40 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   13d3e:	2300      	movs	r3, #0
	}
}
   13d40:	0018      	movs	r0, r3
   13d42:	46bd      	mov	sp, r7
   13d44:	b004      	add	sp, #16
   13d46:	bd80      	pop	{r7, pc}
   13d48:	41004400 	.word	0x41004400

00013d4c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   13d4c:	b580      	push	{r7, lr}
   13d4e:	b082      	sub	sp, #8
   13d50:	af00      	add	r7, sp, #0
   13d52:	0002      	movs	r2, r0
   13d54:	1dfb      	adds	r3, r7, #7
   13d56:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13d58:	1dfb      	adds	r3, r7, #7
   13d5a:	781b      	ldrb	r3, [r3, #0]
   13d5c:	0018      	movs	r0, r3
   13d5e:	4b03      	ldr	r3, [pc, #12]	; (13d6c <port_get_group_from_gpio_pin+0x20>)
   13d60:	4798      	blx	r3
   13d62:	0003      	movs	r3, r0
}
   13d64:	0018      	movs	r0, r3
   13d66:	46bd      	mov	sp, r7
   13d68:	b002      	add	sp, #8
   13d6a:	bd80      	pop	{r7, pc}
   13d6c:	00013ced 	.word	0x00013ced

00013d70 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   13d70:	b580      	push	{r7, lr}
   13d72:	b082      	sub	sp, #8
   13d74:	af00      	add	r7, sp, #0
   13d76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   13d78:	687b      	ldr	r3, [r7, #4]
   13d7a:	2200      	movs	r2, #0
   13d7c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13d7e:	687b      	ldr	r3, [r7, #4]
   13d80:	2201      	movs	r2, #1
   13d82:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13d84:	687b      	ldr	r3, [r7, #4]
   13d86:	2200      	movs	r2, #0
   13d88:	709a      	strb	r2, [r3, #2]
}
   13d8a:	46c0      	nop			; (mov r8, r8)
   13d8c:	46bd      	mov	sp, r7
   13d8e:	b002      	add	sp, #8
   13d90:	bd80      	pop	{r7, pc}
	...

00013d94 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   13d94:	b580      	push	{r7, lr}
   13d96:	b084      	sub	sp, #16
   13d98:	af00      	add	r7, sp, #0
   13d9a:	0002      	movs	r2, r0
   13d9c:	1dfb      	adds	r3, r7, #7
   13d9e:	701a      	strb	r2, [r3, #0]
   13da0:	1dbb      	adds	r3, r7, #6
   13da2:	1c0a      	adds	r2, r1, #0
   13da4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13da6:	1dfb      	adds	r3, r7, #7
   13da8:	781b      	ldrb	r3, [r3, #0]
   13daa:	0018      	movs	r0, r3
   13dac:	4b0d      	ldr	r3, [pc, #52]	; (13de4 <port_pin_set_output_level+0x50>)
   13dae:	4798      	blx	r3
   13db0:	0003      	movs	r3, r0
   13db2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13db4:	1dfb      	adds	r3, r7, #7
   13db6:	781b      	ldrb	r3, [r3, #0]
   13db8:	221f      	movs	r2, #31
   13dba:	4013      	ands	r3, r2
   13dbc:	2201      	movs	r2, #1
   13dbe:	409a      	lsls	r2, r3
   13dc0:	0013      	movs	r3, r2
   13dc2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   13dc4:	1dbb      	adds	r3, r7, #6
   13dc6:	781b      	ldrb	r3, [r3, #0]
   13dc8:	2b00      	cmp	r3, #0
   13dca:	d003      	beq.n	13dd4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13dcc:	68fb      	ldr	r3, [r7, #12]
   13dce:	68ba      	ldr	r2, [r7, #8]
   13dd0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   13dd2:	e002      	b.n	13dda <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13dd4:	68fb      	ldr	r3, [r7, #12]
   13dd6:	68ba      	ldr	r2, [r7, #8]
   13dd8:	615a      	str	r2, [r3, #20]
}
   13dda:	46c0      	nop			; (mov r8, r8)
   13ddc:	46bd      	mov	sp, r7
   13dde:	b004      	add	sp, #16
   13de0:	bd80      	pop	{r7, pc}
   13de2:	46c0      	nop			; (mov r8, r8)
   13de4:	00013d4d 	.word	0x00013d4d

00013de8 <DRV2605_INIT>:

 * @return	Returns 0 if no errors.
 * @note
 */
int32_t DRV2605_INIT(void)
{
   13de8:	b580      	push	{r7, lr}
   13dea:	b094      	sub	sp, #80	; 0x50
   13dec:	af00      	add	r7, sp, #0
		uint8_t buffer1[64];
		struct port_config config_port_pin;//Define structure needed to configure a pin
		port_get_config_defaults(&config_port_pin); //Initialize structure with default configurations.
   13dee:	2308      	movs	r3, #8
   13df0:	18fb      	adds	r3, r7, r3
   13df2:	0018      	movs	r0, r3
   13df4:	4b17      	ldr	r3, [pc, #92]	; (13e54 <DRV2605_INIT+0x6c>)
   13df6:	4798      	blx	r3
		config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
   13df8:	2308      	movs	r3, #8
   13dfa:	18fb      	adds	r3, r7, r3
   13dfc:	2201      	movs	r2, #1
   13dfe:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA20, &config_port_pin);
   13e00:	2308      	movs	r3, #8
   13e02:	18fb      	adds	r3, r7, r3
   13e04:	0019      	movs	r1, r3
   13e06:	2014      	movs	r0, #20
   13e08:	4b13      	ldr	r3, [pc, #76]	; (13e58 <DRV2605_INIT+0x70>)
   13e0a:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA20, LED_0_INACTIVE); // make enable pin high
   13e0c:	2101      	movs	r1, #1
   13e0e:	2014      	movs	r0, #20
   13e10:	4b12      	ldr	r3, [pc, #72]	; (13e5c <DRV2605_INIT+0x74>)
   13e12:	4798      	blx	r3

		//Get a read from the status register
		//Want this to Read 0xE0, any other value than 0 and you have tripped the over-current protection=wrong motor

		uint16_t reg=STATUS_REG ;
   13e14:	1dbb      	adds	r3, r7, #6
   13e16:	2200      	movs	r2, #0
   13e18:	801a      	strh	r2, [r3, #0]
		uint8_t buffer[2];
		DRV2605Data.address = DRV2605_ADDR;
   13e1a:	4b11      	ldr	r3, [pc, #68]	; (13e60 <DRV2605_INIT+0x78>)
   13e1c:	225a      	movs	r2, #90	; 0x5a
   13e1e:	701a      	strb	r2, [r3, #0]
		DRV2605Data.msgOut = &reg;
   13e20:	4b0f      	ldr	r3, [pc, #60]	; (13e60 <DRV2605_INIT+0x78>)
   13e22:	1dba      	adds	r2, r7, #6
   13e24:	605a      	str	r2, [r3, #4]
		DRV2605Data.lenOut = 1;
   13e26:	4b0e      	ldr	r3, [pc, #56]	; (13e60 <DRV2605_INIT+0x78>)
   13e28:	2201      	movs	r2, #1
   13e2a:	81da      	strh	r2, [r3, #14]
		DRV2605Data.msgIn = buffer;
   13e2c:	4b0c      	ldr	r3, [pc, #48]	; (13e60 <DRV2605_INIT+0x78>)
   13e2e:	1d3a      	adds	r2, r7, #4
   13e30:	609a      	str	r2, [r3, #8]
		DRV2605Data.lenIn = sizeof(buffer);
   13e32:	4b0b      	ldr	r3, [pc, #44]	; (13e60 <DRV2605_INIT+0x78>)
   13e34:	2202      	movs	r2, #2
   13e36:	819a      	strh	r2, [r3, #12]

		int error = I2cReadDataWait(&DRV2605Data, 0xff, 0xff);
   13e38:	4b09      	ldr	r3, [pc, #36]	; (13e60 <DRV2605_INIT+0x78>)
   13e3a:	22ff      	movs	r2, #255	; 0xff
   13e3c:	21ff      	movs	r1, #255	; 0xff
   13e3e:	0018      	movs	r0, r3
   13e40:	4b08      	ldr	r3, [pc, #32]	; (13e64 <DRV2605_INIT+0x7c>)
   13e42:	4798      	blx	r3
   13e44:	0003      	movs	r3, r0
   13e46:	64fb      	str	r3, [r7, #76]	; 0x4c
		//snprintf((char *) buffer1, sizeof(buffer1), "Status Register 0x %x\r\n", buffer[0]);
		//	SerialConsoleWriteString(buffer1);
		return error;
   13e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   13e4a:	0018      	movs	r0, r3
   13e4c:	46bd      	mov	sp, r7
   13e4e:	b014      	add	sp, #80	; 0x50
   13e50:	bd80      	pop	{r7, pc}
   13e52:	46c0      	nop			; (mov r8, r8)
   13e54:	00013d71 	.word	0x00013d71
   13e58:	000263a9 	.word	0x000263a9
   13e5c:	00013d95 	.word	0x00013d95
   13e60:	20004658 	.word	0x20004658
   13e64:	000150a9 	.word	0x000150a9

00013e68 <DRV2605_MODE_SELECT>:

 * @return	Returns 0 if no errors.
 * @note
 */
int32_t DRV2605_MODE_SELECT(void)
{
   13e68:	b580      	push	{r7, lr}
   13e6a:	b092      	sub	sp, #72	; 0x48
   13e6c:	af00      	add	r7, sp, #0
	uint8_t buffer1[64];

	// out of standby
	uint16_t reg=DRV2605_REG_MODE;
   13e6e:	1cbb      	adds	r3, r7, #2
   13e70:	2201      	movs	r2, #1
   13e72:	801a      	strh	r2, [r3, #0]
	msgOutImu[0]=reg;
   13e74:	1cbb      	adds	r3, r7, #2
   13e76:	881b      	ldrh	r3, [r3, #0]
   13e78:	b2da      	uxtb	r2, r3
   13e7a:	4be4      	ldr	r3, [pc, #912]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13e7c:	701a      	strb	r2, [r3, #0]

	msgOutImu[1]=MODE;
   13e7e:	4be3      	ldr	r3, [pc, #908]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13e80:	2200      	movs	r2, #0
   13e82:	705a      	strb	r2, [r3, #1]
	uint8_t buffer[2];
	DRV2605Data.address = DRV2605_ADDR;
   13e84:	4be2      	ldr	r3, [pc, #904]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13e86:	225a      	movs	r2, #90	; 0x5a
   13e88:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   13e8a:	4be1      	ldr	r3, [pc, #900]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13e8c:	4adf      	ldr	r2, [pc, #892]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13e8e:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   13e90:	4bdf      	ldr	r3, [pc, #892]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13e92:	2202      	movs	r2, #2
   13e94:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   13e96:	4bde      	ldr	r3, [pc, #888]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13e98:	003a      	movs	r2, r7
   13e9a:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   13e9c:	4bdc      	ldr	r3, [pc, #880]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13e9e:	2200      	movs	r2, #0
   13ea0:	819a      	strh	r2, [r3, #12]
	
	int error = I2cWriteDataWait(&DRV2605Data, 0xff);
   13ea2:	4bdb      	ldr	r3, [pc, #876]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13ea4:	21ff      	movs	r1, #255	; 0xff
   13ea6:	0018      	movs	r0, r3
   13ea8:	4bda      	ldr	r3, [pc, #872]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   13eaa:	4798      	blx	r3
   13eac:	0003      	movs	r3, r0
   13eae:	647b      	str	r3, [r7, #68]	; 0x44
	
	
	// no real-time-playback
	msgOutImu[0]=DRV2605_REG_RTPIN ;
   13eb0:	4bd6      	ldr	r3, [pc, #856]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13eb2:	2202      	movs	r2, #2
   13eb4:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=RTPIN;	
   13eb6:	4bd5      	ldr	r3, [pc, #852]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13eb8:	2200      	movs	r2, #0
   13eba:	705a      	strb	r2, [r3, #1]
	DRV2605Data.address = DRV2605_ADDR;
   13ebc:	4bd4      	ldr	r3, [pc, #848]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13ebe:	225a      	movs	r2, #90	; 0x5a
   13ec0:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   13ec2:	4bd3      	ldr	r3, [pc, #844]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13ec4:	4ad1      	ldr	r2, [pc, #836]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13ec6:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   13ec8:	4bd1      	ldr	r3, [pc, #836]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13eca:	2202      	movs	r2, #2
   13ecc:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   13ece:	4bd0      	ldr	r3, [pc, #832]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13ed0:	003a      	movs	r2, r7
   13ed2:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   13ed4:	4bce      	ldr	r3, [pc, #824]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13ed6:	2200      	movs	r2, #0
   13ed8:	819a      	strh	r2, [r3, #12]
	error = I2cWriteDataWait(&DRV2605Data, 0xff);
   13eda:	4bcd      	ldr	r3, [pc, #820]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13edc:	21ff      	movs	r1, #255	; 0xff
   13ede:	0018      	movs	r0, r3
   13ee0:	4bcc      	ldr	r3, [pc, #816]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   13ee2:	4798      	blx	r3
   13ee4:	0003      	movs	r3, r0
   13ee6:	647b      	str	r3, [r7, #68]	; 0x44
	
	
	// strong click	
	msgOutImu[0]=DRV2605_REG_WAVESEQ1;
   13ee8:	4bc8      	ldr	r3, [pc, #800]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13eea:	2204      	movs	r2, #4
   13eec:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=WAVE_START;
   13eee:	4bc7      	ldr	r3, [pc, #796]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13ef0:	2201      	movs	r2, #1
   13ef2:	705a      	strb	r2, [r3, #1]

	DRV2605Data.address = DRV2605_ADDR;
   13ef4:	4bc6      	ldr	r3, [pc, #792]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13ef6:	225a      	movs	r2, #90	; 0x5a
   13ef8:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   13efa:	4bc5      	ldr	r3, [pc, #788]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13efc:	4ac3      	ldr	r2, [pc, #780]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13efe:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   13f00:	4bc3      	ldr	r3, [pc, #780]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f02:	2202      	movs	r2, #2
   13f04:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   13f06:	4bc2      	ldr	r3, [pc, #776]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f08:	003a      	movs	r2, r7
   13f0a:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   13f0c:	4bc0      	ldr	r3, [pc, #768]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f0e:	2200      	movs	r2, #0
   13f10:	819a      	strh	r2, [r3, #12]
	error = I2cWriteDataWait(&DRV2605Data, 0xff);
   13f12:	4bbf      	ldr	r3, [pc, #764]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f14:	21ff      	movs	r1, #255	; 0xff
   13f16:	0018      	movs	r0, r3
   13f18:	4bbe      	ldr	r3, [pc, #760]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   13f1a:	4798      	blx	r3
   13f1c:	0003      	movs	r3, r0
   13f1e:	647b      	str	r3, [r7, #68]	; 0x44
	
	

	// end sequence
	msgOutImu[0]=DRV2605_REG_WAVESEQ2;
   13f20:	4bba      	ldr	r3, [pc, #744]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f22:	2205      	movs	r2, #5
   13f24:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=WAVE_STOP;
   13f26:	4bb9      	ldr	r3, [pc, #740]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f28:	2200      	movs	r2, #0
   13f2a:	705a      	strb	r2, [r3, #1]
	
	DRV2605Data.address = DRV2605_ADDR;
   13f2c:	4bb8      	ldr	r3, [pc, #736]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f2e:	225a      	movs	r2, #90	; 0x5a
   13f30:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   13f32:	4bb7      	ldr	r3, [pc, #732]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f34:	4ab5      	ldr	r2, [pc, #724]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f36:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   13f38:	4bb5      	ldr	r3, [pc, #724]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f3a:	2202      	movs	r2, #2
   13f3c:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   13f3e:	4bb4      	ldr	r3, [pc, #720]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f40:	003a      	movs	r2, r7
   13f42:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   13f44:	4bb2      	ldr	r3, [pc, #712]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f46:	2200      	movs	r2, #0
   13f48:	819a      	strh	r2, [r3, #12]

	error = I2cWriteDataWait(&DRV2605Data, 0xff);
   13f4a:	4bb1      	ldr	r3, [pc, #708]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f4c:	21ff      	movs	r1, #255	; 0xff
   13f4e:	0018      	movs	r0, r3
   13f50:	4bb0      	ldr	r3, [pc, #704]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   13f52:	4798      	blx	r3
   13f54:	0003      	movs	r3, r0
   13f56:	647b      	str	r3, [r7, #68]	; 0x44
	
	
	// no overdrive 
	msgOutImu[0]=DRV2605_REG_OVERDRIVE;
   13f58:	4bac      	ldr	r3, [pc, #688]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f5a:	220d      	movs	r2, #13
   13f5c:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=NO_DRIVE;
   13f5e:	4bab      	ldr	r3, [pc, #684]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f60:	2200      	movs	r2, #0
   13f62:	705a      	strb	r2, [r3, #1]
	
	DRV2605Data.address = DRV2605_ADDR;
   13f64:	4baa      	ldr	r3, [pc, #680]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f66:	225a      	movs	r2, #90	; 0x5a
   13f68:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   13f6a:	4ba9      	ldr	r3, [pc, #676]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f6c:	4aa7      	ldr	r2, [pc, #668]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f6e:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   13f70:	4ba7      	ldr	r3, [pc, #668]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f72:	2202      	movs	r2, #2
   13f74:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   13f76:	4ba6      	ldr	r3, [pc, #664]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f78:	003a      	movs	r2, r7
   13f7a:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   13f7c:	4ba4      	ldr	r3, [pc, #656]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f7e:	2200      	movs	r2, #0
   13f80:	819a      	strh	r2, [r3, #12]

	error = I2cWriteDataWait(&DRV2605Data, 0xff);
   13f82:	4ba3      	ldr	r3, [pc, #652]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f84:	21ff      	movs	r1, #255	; 0xff
   13f86:	0018      	movs	r0, r3
   13f88:	4ba2      	ldr	r3, [pc, #648]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   13f8a:	4798      	blx	r3
   13f8c:	0003      	movs	r3, r0
   13f8e:	647b      	str	r3, [r7, #68]	; 0x44

	 
	 
	msgOutImu[0]=DRV2605_REG_SUSTAINPOS;	 
   13f90:	4b9e      	ldr	r3, [pc, #632]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f92:	220e      	movs	r2, #14
   13f94:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=SUSTAINPOS;
   13f96:	4b9d      	ldr	r3, [pc, #628]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13f98:	2200      	movs	r2, #0
   13f9a:	705a      	strb	r2, [r3, #1]
	DRV2605Data.address = DRV2605_ADDR;
   13f9c:	4b9c      	ldr	r3, [pc, #624]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13f9e:	225a      	movs	r2, #90	; 0x5a
   13fa0:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   13fa2:	4b9b      	ldr	r3, [pc, #620]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fa4:	4a99      	ldr	r2, [pc, #612]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13fa6:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   13fa8:	4b99      	ldr	r3, [pc, #612]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13faa:	2202      	movs	r2, #2
   13fac:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   13fae:	4b98      	ldr	r3, [pc, #608]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fb0:	003a      	movs	r2, r7
   13fb2:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   13fb4:	4b96      	ldr	r3, [pc, #600]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fb6:	2200      	movs	r2, #0
   13fb8:	819a      	strh	r2, [r3, #12]

	 error = I2cWriteDataWait(&DRV2605Data, 0xff);
   13fba:	4b95      	ldr	r3, [pc, #596]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fbc:	21ff      	movs	r1, #255	; 0xff
   13fbe:	0018      	movs	r0, r3
   13fc0:	4b94      	ldr	r3, [pc, #592]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   13fc2:	4798      	blx	r3
   13fc4:	0003      	movs	r3, r0
   13fc6:	647b      	str	r3, [r7, #68]	; 0x44
	 
	 
	 
	msgOutImu[0]=DRV2605_REG_SUSTAINNEG;	 
   13fc8:	4b90      	ldr	r3, [pc, #576]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13fca:	220f      	movs	r2, #15
   13fcc:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=SUSTAINNEG;
   13fce:	4b8f      	ldr	r3, [pc, #572]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13fd0:	2200      	movs	r2, #0
   13fd2:	705a      	strb	r2, [r3, #1]
	DRV2605Data.address = DRV2605_ADDR;
   13fd4:	4b8e      	ldr	r3, [pc, #568]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fd6:	225a      	movs	r2, #90	; 0x5a
   13fd8:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   13fda:	4b8d      	ldr	r3, [pc, #564]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fdc:	4a8b      	ldr	r2, [pc, #556]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   13fde:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   13fe0:	4b8b      	ldr	r3, [pc, #556]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fe2:	2202      	movs	r2, #2
   13fe4:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   13fe6:	4b8a      	ldr	r3, [pc, #552]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fe8:	003a      	movs	r2, r7
   13fea:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   13fec:	4b88      	ldr	r3, [pc, #544]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13fee:	2200      	movs	r2, #0
   13ff0:	819a      	strh	r2, [r3, #12]

	error = I2cWriteDataWait(&DRV2605Data, 0xff);
   13ff2:	4b87      	ldr	r3, [pc, #540]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   13ff4:	21ff      	movs	r1, #255	; 0xff
   13ff6:	0018      	movs	r0, r3
   13ff8:	4b86      	ldr	r3, [pc, #536]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   13ffa:	4798      	blx	r3
   13ffc:	0003      	movs	r3, r0
   13ffe:	647b      	str	r3, [r7, #68]	; 0x44
	 
	
    msgOutImu[0]=DRV2605_REG_BREAK ;	 
   14000:	4b82      	ldr	r3, [pc, #520]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14002:	2210      	movs	r2, #16
   14004:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=BREAK;
   14006:	4b81      	ldr	r3, [pc, #516]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14008:	2200      	movs	r2, #0
   1400a:	705a      	strb	r2, [r3, #1]
	DRV2605Data.address = DRV2605_ADDR;
   1400c:	4b80      	ldr	r3, [pc, #512]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1400e:	225a      	movs	r2, #90	; 0x5a
   14010:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   14012:	4b7f      	ldr	r3, [pc, #508]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14014:	4a7d      	ldr	r2, [pc, #500]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14016:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   14018:	4b7d      	ldr	r3, [pc, #500]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1401a:	2202      	movs	r2, #2
   1401c:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   1401e:	4b7c      	ldr	r3, [pc, #496]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14020:	003a      	movs	r2, r7
   14022:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   14024:	4b7a      	ldr	r3, [pc, #488]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14026:	2200      	movs	r2, #0
   14028:	819a      	strh	r2, [r3, #12]

	error = I2cWriteDataWait(&DRV2605Data, 0xff);
   1402a:	4b79      	ldr	r3, [pc, #484]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1402c:	21ff      	movs	r1, #255	; 0xff
   1402e:	0018      	movs	r0, r3
   14030:	4b78      	ldr	r3, [pc, #480]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   14032:	4798      	blx	r3
   14034:	0003      	movs	r3, r0
   14036:	647b      	str	r3, [r7, #68]	; 0x44
	 
	 
	
    msgOutImu[0]= DRV2605_REG_AUDIOMAX ;	 
   14038:	4b74      	ldr	r3, [pc, #464]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   1403a:	2213      	movs	r2, #19
   1403c:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=AUDIOMAX;
   1403e:	4b73      	ldr	r3, [pc, #460]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14040:	2264      	movs	r2, #100	; 0x64
   14042:	705a      	strb	r2, [r3, #1]
	DRV2605Data.address = DRV2605_ADDR;
   14044:	4b72      	ldr	r3, [pc, #456]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14046:	225a      	movs	r2, #90	; 0x5a
   14048:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   1404a:	4b71      	ldr	r3, [pc, #452]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1404c:	4a6f      	ldr	r2, [pc, #444]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   1404e:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   14050:	4b6f      	ldr	r3, [pc, #444]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14052:	2202      	movs	r2, #2
   14054:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   14056:	4b6e      	ldr	r3, [pc, #440]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14058:	003a      	movs	r2, r7
   1405a:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   1405c:	4b6c      	ldr	r3, [pc, #432]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1405e:	2200      	movs	r2, #0
   14060:	819a      	strh	r2, [r3, #12]

	 error = I2cWriteDataWait(&DRV2605Data, 0xff);
   14062:	4b6b      	ldr	r3, [pc, #428]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14064:	21ff      	movs	r1, #255	; 0xff
   14066:	0018      	movs	r0, r3
   14068:	4b6a      	ldr	r3, [pc, #424]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   1406a:	4798      	blx	r3
   1406c:	0003      	movs	r3, r0
   1406e:	647b      	str	r3, [r7, #68]	; 0x44


     // Reg Feedback 
	 reg=DRV2605_REG_FEEDBACK ;
   14070:	1cbb      	adds	r3, r7, #2
   14072:	221a      	movs	r2, #26
   14074:	801a      	strh	r2, [r3, #0]
	 DRV2605Data.address = DRV2605_ADDR;
   14076:	4b66      	ldr	r3, [pc, #408]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14078:	225a      	movs	r2, #90	; 0x5a
   1407a:	701a      	strb	r2, [r3, #0]
	 DRV2605Data.msgOut = &reg;
   1407c:	4b64      	ldr	r3, [pc, #400]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1407e:	1cba      	adds	r2, r7, #2
   14080:	605a      	str	r2, [r3, #4]
	 DRV2605Data.lenOut = 1;
   14082:	4b63      	ldr	r3, [pc, #396]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14084:	2201      	movs	r2, #1
   14086:	81da      	strh	r2, [r3, #14]
	 DRV2605Data.msgIn = buffer;
   14088:	4b61      	ldr	r3, [pc, #388]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1408a:	003a      	movs	r2, r7
   1408c:	609a      	str	r2, [r3, #8]
	 DRV2605Data.lenIn = sizeof(buffer);
   1408e:	4b60      	ldr	r3, [pc, #384]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14090:	2202      	movs	r2, #2
   14092:	819a      	strh	r2, [r3, #12]

	 error = I2cReadDataWait(&DRV2605Data, 0xff, 0xff);	 
   14094:	4b5e      	ldr	r3, [pc, #376]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14096:	22ff      	movs	r2, #255	; 0xff
   14098:	21ff      	movs	r1, #255	; 0xff
   1409a:	0018      	movs	r0, r3
   1409c:	4b5e      	ldr	r3, [pc, #376]	; (14218 <DRV2605_MODE_SELECT+0x3b0>)
   1409e:	4798      	blx	r3
   140a0:	0003      	movs	r3, r0
   140a2:	647b      	str	r3, [r7, #68]	; 0x44
	 msgOutImu[0]= DRV2605_REG_FEEDBACK ;	 
   140a4:	4b59      	ldr	r3, [pc, #356]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   140a6:	221a      	movs	r2, #26
   140a8:	701a      	strb	r2, [r3, #0]
	 msgOutImu[1]= buffer[0] & 0x7F;
   140aa:	003b      	movs	r3, r7
   140ac:	781b      	ldrb	r3, [r3, #0]
   140ae:	227f      	movs	r2, #127	; 0x7f
   140b0:	4013      	ands	r3, r2
   140b2:	b2da      	uxtb	r2, r3
   140b4:	4b55      	ldr	r3, [pc, #340]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   140b6:	705a      	strb	r2, [r3, #1]

	 DRV2605Data.address = DRV2605_ADDR;
   140b8:	4b55      	ldr	r3, [pc, #340]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140ba:	225a      	movs	r2, #90	; 0x5a
   140bc:	701a      	strb	r2, [r3, #0]
	 DRV2605Data.msgOut = &msgOutImu;
   140be:	4b54      	ldr	r3, [pc, #336]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140c0:	4a52      	ldr	r2, [pc, #328]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   140c2:	605a      	str	r2, [r3, #4]
	 DRV2605Data.lenOut = 2;
   140c4:	4b52      	ldr	r3, [pc, #328]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140c6:	2202      	movs	r2, #2
   140c8:	81da      	strh	r2, [r3, #14]
	 DRV2605Data.msgIn = buffer;
   140ca:	4b51      	ldr	r3, [pc, #324]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140cc:	003a      	movs	r2, r7
   140ce:	609a      	str	r2, [r3, #8]
	 DRV2605Data.lenIn = 0;
   140d0:	4b4f      	ldr	r3, [pc, #316]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140d2:	2200      	movs	r2, #0
   140d4:	819a      	strh	r2, [r3, #12]

	 error = I2cWriteDataWait(&DRV2605Data, 0xff);
   140d6:	4b4e      	ldr	r3, [pc, #312]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140d8:	21ff      	movs	r1, #255	; 0xff
   140da:	0018      	movs	r0, r3
   140dc:	4b4d      	ldr	r3, [pc, #308]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   140de:	4798      	blx	r3
   140e0:	0003      	movs	r3, r0
   140e2:	647b      	str	r3, [r7, #68]	; 0x44
	
	
	// Reg control 
    reg=DRV2605_REG_CONTROL3;
   140e4:	1cbb      	adds	r3, r7, #2
   140e6:	221d      	movs	r2, #29
   140e8:	801a      	strh	r2, [r3, #0]

	DRV2605Data.address = DRV2605_ADDR;
   140ea:	4b49      	ldr	r3, [pc, #292]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140ec:	225a      	movs	r2, #90	; 0x5a
   140ee:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &reg;
   140f0:	4b47      	ldr	r3, [pc, #284]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140f2:	1cba      	adds	r2, r7, #2
   140f4:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 1;
   140f6:	4b46      	ldr	r3, [pc, #280]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140f8:	2201      	movs	r2, #1
   140fa:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   140fc:	4b44      	ldr	r3, [pc, #272]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   140fe:	003a      	movs	r2, r7
   14100:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = sizeof(buffer);
   14102:	4b43      	ldr	r3, [pc, #268]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14104:	2202      	movs	r2, #2
   14106:	819a      	strh	r2, [r3, #12]

	 error = I2cReadDataWait(&DRV2605Data, 0xff, 0xff);	 
   14108:	4b41      	ldr	r3, [pc, #260]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1410a:	22ff      	movs	r2, #255	; 0xff
   1410c:	21ff      	movs	r1, #255	; 0xff
   1410e:	0018      	movs	r0, r3
   14110:	4b41      	ldr	r3, [pc, #260]	; (14218 <DRV2605_MODE_SELECT+0x3b0>)
   14112:	4798      	blx	r3
   14114:	0003      	movs	r3, r0
   14116:	647b      	str	r3, [r7, #68]	; 0x44
	 msgOutImu[0]= DRV2605_REG_CONTROL3;	 
   14118:	4b3c      	ldr	r3, [pc, #240]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   1411a:	221d      	movs	r2, #29
   1411c:	701a      	strb	r2, [r3, #0]
	 msgOutImu[1]= buffer[0]  | 0x20;
   1411e:	003b      	movs	r3, r7
   14120:	781b      	ldrb	r3, [r3, #0]
   14122:	2220      	movs	r2, #32
   14124:	4313      	orrs	r3, r2
   14126:	b2da      	uxtb	r2, r3
   14128:	4b38      	ldr	r3, [pc, #224]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   1412a:	705a      	strb	r2, [r3, #1]
	 DRV2605Data.address = DRV2605_ADDR;
   1412c:	4b38      	ldr	r3, [pc, #224]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1412e:	225a      	movs	r2, #90	; 0x5a
   14130:	701a      	strb	r2, [r3, #0]
	 DRV2605Data.msgOut = &msgOutImu;
   14132:	4b37      	ldr	r3, [pc, #220]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14134:	4a35      	ldr	r2, [pc, #212]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14136:	605a      	str	r2, [r3, #4]
	 DRV2605Data.lenOut = 2;
   14138:	4b35      	ldr	r3, [pc, #212]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1413a:	2202      	movs	r2, #2
   1413c:	81da      	strh	r2, [r3, #14]
	 DRV2605Data.msgIn = buffer;
   1413e:	4b34      	ldr	r3, [pc, #208]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14140:	003a      	movs	r2, r7
   14142:	609a      	str	r2, [r3, #8]
	 DRV2605Data.lenIn = 0;
   14144:	4b32      	ldr	r3, [pc, #200]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14146:	2200      	movs	r2, #0
   14148:	819a      	strh	r2, [r3, #12]

	 error = I2cWriteDataWait(&DRV2605Data, 0xff);	 
   1414a:	4b31      	ldr	r3, [pc, #196]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1414c:	21ff      	movs	r1, #255	; 0xff
   1414e:	0018      	movs	r0, r3
   14150:	4b30      	ldr	r3, [pc, #192]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   14152:	4798      	blx	r3
   14154:	0003      	movs	r3, r0
   14156:	647b      	str	r3, [r7, #68]	; 0x44
	 
	 
	 
	 //  writeRegister8(DRV2605_REG_MODE, mode);
	 // Mode Select
	 msgOutImu[0]= DRV2605_REG_MODE ;	 
   14158:	4b2c      	ldr	r3, [pc, #176]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   1415a:	2201      	movs	r2, #1
   1415c:	701a      	strb	r2, [r3, #0]
	 msgOutImu[1]=MODE;
   1415e:	4b2b      	ldr	r3, [pc, #172]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14160:	2200      	movs	r2, #0
   14162:	705a      	strb	r2, [r3, #1]
	 DRV2605Data.address = DRV2605_ADDR;
   14164:	4b2a      	ldr	r3, [pc, #168]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14166:	225a      	movs	r2, #90	; 0x5a
   14168:	701a      	strb	r2, [r3, #0]
	 DRV2605Data.msgOut = &msgOutImu;
   1416a:	4b29      	ldr	r3, [pc, #164]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1416c:	4a27      	ldr	r2, [pc, #156]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   1416e:	605a      	str	r2, [r3, #4]
	 DRV2605Data.lenOut = 2;
   14170:	4b27      	ldr	r3, [pc, #156]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14172:	2202      	movs	r2, #2
   14174:	81da      	strh	r2, [r3, #14]
	 DRV2605Data.msgIn = buffer;
   14176:	4b26      	ldr	r3, [pc, #152]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14178:	003a      	movs	r2, r7
   1417a:	609a      	str	r2, [r3, #8]
	 DRV2605Data.lenIn = 0;
   1417c:	4b24      	ldr	r3, [pc, #144]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1417e:	2200      	movs	r2, #0
   14180:	819a      	strh	r2, [r3, #12]

	 error = I2cWriteDataWait(&DRV2605Data, 0xff);	
   14182:	4b23      	ldr	r3, [pc, #140]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   14184:	21ff      	movs	r1, #255	; 0xff
   14186:	0018      	movs	r0, r3
   14188:	4b22      	ldr	r3, [pc, #136]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   1418a:	4798      	blx	r3
   1418c:	0003      	movs	r3, r0
   1418e:	647b      	str	r3, [r7, #68]	; 0x44
	 
	 /// set waveform end waveform   writeRegister8(DRV2605_REG_WAVESEQ1 + slot, w);
	 
	 
	// set waveform end waveform
	msgOutImu[0]= DRV2605_REG_WAVESEQ1 ;	 
   14190:	4b1e      	ldr	r3, [pc, #120]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14192:	2204      	movs	r2, #4
   14194:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=WAVE_START;
   14196:	4b1d      	ldr	r3, [pc, #116]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   14198:	2201      	movs	r2, #1
   1419a:	705a      	strb	r2, [r3, #1]
	DRV2605Data.address = DRV2605_ADDR;
   1419c:	4b1c      	ldr	r3, [pc, #112]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   1419e:	225a      	movs	r2, #90	; 0x5a
   141a0:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   141a2:	4b1b      	ldr	r3, [pc, #108]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141a4:	4a19      	ldr	r2, [pc, #100]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   141a6:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   141a8:	4b19      	ldr	r3, [pc, #100]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141aa:	2202      	movs	r2, #2
   141ac:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   141ae:	4b18      	ldr	r3, [pc, #96]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141b0:	003a      	movs	r2, r7
   141b2:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   141b4:	4b16      	ldr	r3, [pc, #88]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141b6:	2200      	movs	r2, #0
   141b8:	819a      	strh	r2, [r3, #12]

	error = I2cWriteDataWait(&DRV2605Data, 0xff);	
   141ba:	4b15      	ldr	r3, [pc, #84]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141bc:	21ff      	movs	r1, #255	; 0xff
   141be:	0018      	movs	r0, r3
   141c0:	4b14      	ldr	r3, [pc, #80]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   141c2:	4798      	blx	r3
   141c4:	0003      	movs	r3, r0
   141c6:	647b      	str	r3, [r7, #68]	; 0x44
	 
	 
	 
	msgOutImu[0]= DRV2605_REG_WAVESEQ2 ;	 
   141c8:	4b10      	ldr	r3, [pc, #64]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   141ca:	2205      	movs	r2, #5
   141cc:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=WAVE_STOP;
   141ce:	4b0f      	ldr	r3, [pc, #60]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   141d0:	2200      	movs	r2, #0
   141d2:	705a      	strb	r2, [r3, #1]
	DRV2605Data.address = DRV2605_ADDR;
   141d4:	4b0e      	ldr	r3, [pc, #56]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141d6:	225a      	movs	r2, #90	; 0x5a
   141d8:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   141da:	4b0d      	ldr	r3, [pc, #52]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141dc:	4a0b      	ldr	r2, [pc, #44]	; (1420c <DRV2605_MODE_SELECT+0x3a4>)
   141de:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   141e0:	4b0b      	ldr	r3, [pc, #44]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141e2:	2202      	movs	r2, #2
   141e4:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   141e6:	4b0a      	ldr	r3, [pc, #40]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141e8:	003a      	movs	r2, r7
   141ea:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   141ec:	4b08      	ldr	r3, [pc, #32]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141ee:	2200      	movs	r2, #0
   141f0:	819a      	strh	r2, [r3, #12]

	error = I2cWriteDataWait(&DRV2605Data, 0xff);	
   141f2:	4b07      	ldr	r3, [pc, #28]	; (14210 <DRV2605_MODE_SELECT+0x3a8>)
   141f4:	21ff      	movs	r1, #255	; 0xff
   141f6:	0018      	movs	r0, r3
   141f8:	4b06      	ldr	r3, [pc, #24]	; (14214 <DRV2605_MODE_SELECT+0x3ac>)
   141fa:	4798      	blx	r3
   141fc:	0003      	movs	r3, r0
   141fe:	647b      	str	r3, [r7, #68]	; 0x44
	 
	 
	return error;
   14200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   14202:	0018      	movs	r0, r3
   14204:	46bd      	mov	sp, r7
   14206:	b012      	add	sp, #72	; 0x48
   14208:	bd80      	pop	{r7, pc}
   1420a:	46c0      	nop			; (mov r8, r8)
   1420c:	20004618 	.word	0x20004618
   14210:	20004658 	.word	0x20004658
   14214:	00014fd1 	.word	0x00014fd1
   14218:	000150a9 	.word	0x000150a9

0001421c <DRV2605_DRIVE>:

 * @return	Returns 0 if no errors.
 * @note
 */
int32_t DRV2605_DRIVE(void)
{
   1421c:	b580      	push	{r7, lr}
   1421e:	b082      	sub	sp, #8
   14220:	af00      	add	r7, sp, #0
		int error;
		for(uint32_t i=0; i<1000; i++){
   14222:	2300      	movs	r3, #0
   14224:	603b      	str	r3, [r7, #0]
   14226:	e007      	b.n	14238 <DRV2605_DRIVE+0x1c>
			error =DRV2605_GO(0x01);
   14228:	2001      	movs	r0, #1
   1422a:	4b08      	ldr	r3, [pc, #32]	; (1424c <DRV2605_DRIVE+0x30>)
   1422c:	4798      	blx	r3
   1422e:	0003      	movs	r3, r0
   14230:	607b      	str	r3, [r7, #4]
		for(uint32_t i=0; i<1000; i++){
   14232:	683b      	ldr	r3, [r7, #0]
   14234:	3301      	adds	r3, #1
   14236:	603b      	str	r3, [r7, #0]
   14238:	683b      	ldr	r3, [r7, #0]
   1423a:	4a05      	ldr	r2, [pc, #20]	; (14250 <DRV2605_DRIVE+0x34>)
   1423c:	4293      	cmp	r3, r2
   1423e:	d9f3      	bls.n	14228 <DRV2605_DRIVE+0xc>
		}
		//vTaskDelay(5000);
	    //error =DRV2605_GO(0x00);
		//vTaskDelay(5000);
		 return error;
   14240:	687b      	ldr	r3, [r7, #4]

	}
   14242:	0018      	movs	r0, r3
   14244:	46bd      	mov	sp, r7
   14246:	b002      	add	sp, #8
   14248:	bd80      	pop	{r7, pc}
   1424a:	46c0      	nop			; (mov r8, r8)
   1424c:	00014255 	.word	0x00014255
   14250:	000003e7 	.word	0x000003e7

00014254 <DRV2605_GO>:
 * @details  Fill the GO register with 0x01

 * @return	Returns 0 if no errors.
 * @note
 */
int32_t DRV2605_GO(uint16_t state){
   14254:	b580      	push	{r7, lr}
   14256:	b096      	sub	sp, #88	; 0x58
   14258:	af00      	add	r7, sp, #0
   1425a:	0002      	movs	r2, r0
   1425c:	1dbb      	adds	r3, r7, #6
   1425e:	801a      	strh	r2, [r3, #0]
	uint8_t buffer1[64];
	uint16_t reg=DRV2605_REG_GO ;
   14260:	2356      	movs	r3, #86	; 0x56
   14262:	18fb      	adds	r3, r7, r3
   14264:	220c      	movs	r2, #12
   14266:	801a      	strh	r2, [r3, #0]
	msgOutImu[0]=reg;
   14268:	2356      	movs	r3, #86	; 0x56
   1426a:	18fb      	adds	r3, r7, r3
   1426c:	881b      	ldrh	r3, [r3, #0]
   1426e:	b2da      	uxtb	r2, r3
   14270:	4b11      	ldr	r3, [pc, #68]	; (142b8 <DRV2605_GO+0x64>)
   14272:	701a      	strb	r2, [r3, #0]
	msgOutImu[1]=state;
   14274:	1dbb      	adds	r3, r7, #6
   14276:	881b      	ldrh	r3, [r3, #0]
   14278:	b2da      	uxtb	r2, r3
   1427a:	4b0f      	ldr	r3, [pc, #60]	; (142b8 <DRV2605_GO+0x64>)
   1427c:	705a      	strb	r2, [r3, #1]
	uint8_t buffer[2];
	DRV2605Data.address = DRV2605_ADDR;
   1427e:	4b0f      	ldr	r3, [pc, #60]	; (142bc <DRV2605_GO+0x68>)
   14280:	225a      	movs	r2, #90	; 0x5a
   14282:	701a      	strb	r2, [r3, #0]
	DRV2605Data.msgOut = &msgOutImu;
   14284:	4b0d      	ldr	r3, [pc, #52]	; (142bc <DRV2605_GO+0x68>)
   14286:	4a0c      	ldr	r2, [pc, #48]	; (142b8 <DRV2605_GO+0x64>)
   14288:	605a      	str	r2, [r3, #4]
	DRV2605Data.lenOut = 2;
   1428a:	4b0c      	ldr	r3, [pc, #48]	; (142bc <DRV2605_GO+0x68>)
   1428c:	2202      	movs	r2, #2
   1428e:	81da      	strh	r2, [r3, #14]
	DRV2605Data.msgIn = buffer;
   14290:	4b0a      	ldr	r3, [pc, #40]	; (142bc <DRV2605_GO+0x68>)
   14292:	220c      	movs	r2, #12
   14294:	18ba      	adds	r2, r7, r2
   14296:	609a      	str	r2, [r3, #8]
	DRV2605Data.lenIn = 0;
   14298:	4b08      	ldr	r3, [pc, #32]	; (142bc <DRV2605_GO+0x68>)
   1429a:	2200      	movs	r2, #0
   1429c:	819a      	strh	r2, [r3, #12]

	int error = I2cWriteDataWait(&DRV2605Data, 0xff);
   1429e:	4b07      	ldr	r3, [pc, #28]	; (142bc <DRV2605_GO+0x68>)
   142a0:	21ff      	movs	r1, #255	; 0xff
   142a2:	0018      	movs	r0, r3
   142a4:	4b06      	ldr	r3, [pc, #24]	; (142c0 <DRV2605_GO+0x6c>)
   142a6:	4798      	blx	r3
   142a8:	0003      	movs	r3, r0
   142aa:	653b      	str	r3, [r7, #80]	; 0x50

	return error;
   142ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
   142ae:	0018      	movs	r0, r3
   142b0:	46bd      	mov	sp, r7
   142b2:	b016      	add	sp, #88	; 0x58
   142b4:	bd80      	pop	{r7, pc}
   142b6:	46c0      	nop			; (mov r8, r8)
   142b8:	20004618 	.word	0x20004618
   142bc:	20004658 	.word	0x20004658
   142c0:	00014fd1 	.word	0x00014fd1

000142c4 <system_interrupt_enable>:
{
   142c4:	b580      	push	{r7, lr}
   142c6:	b082      	sub	sp, #8
   142c8:	af00      	add	r7, sp, #0
   142ca:	0002      	movs	r2, r0
   142cc:	1dfb      	adds	r3, r7, #7
   142ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   142d0:	4b06      	ldr	r3, [pc, #24]	; (142ec <system_interrupt_enable+0x28>)
   142d2:	1dfa      	adds	r2, r7, #7
   142d4:	7812      	ldrb	r2, [r2, #0]
   142d6:	0011      	movs	r1, r2
   142d8:	221f      	movs	r2, #31
   142da:	400a      	ands	r2, r1
   142dc:	2101      	movs	r1, #1
   142de:	4091      	lsls	r1, r2
   142e0:	000a      	movs	r2, r1
   142e2:	601a      	str	r2, [r3, #0]
}
   142e4:	46c0      	nop			; (mov r8, r8)
   142e6:	46bd      	mov	sp, r7
   142e8:	b002      	add	sp, #8
   142ea:	bd80      	pop	{r7, pc}
   142ec:	e000e100 	.word	0xe000e100

000142f0 <adc_is_syncing>:
{
   142f0:	b580      	push	{r7, lr}
   142f2:	b084      	sub	sp, #16
   142f4:	af00      	add	r7, sp, #0
   142f6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   142f8:	687b      	ldr	r3, [r7, #4]
   142fa:	681b      	ldr	r3, [r3, #0]
   142fc:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   142fe:	68fb      	ldr	r3, [r7, #12]
   14300:	7e5b      	ldrb	r3, [r3, #25]
   14302:	b2db      	uxtb	r3, r3
   14304:	b25b      	sxtb	r3, r3
   14306:	2b00      	cmp	r3, #0
   14308:	da01      	bge.n	1430e <adc_is_syncing+0x1e>
		return true;
   1430a:	2301      	movs	r3, #1
   1430c:	e000      	b.n	14310 <adc_is_syncing+0x20>
	return false;
   1430e:	2300      	movs	r3, #0
}
   14310:	0018      	movs	r0, r3
   14312:	46bd      	mov	sp, r7
   14314:	b004      	add	sp, #16
   14316:	bd80      	pop	{r7, pc}

00014318 <adc_get_status>:
{
   14318:	b580      	push	{r7, lr}
   1431a:	b086      	sub	sp, #24
   1431c:	af00      	add	r7, sp, #0
   1431e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   14320:	687b      	ldr	r3, [r7, #4]
   14322:	681b      	ldr	r3, [r3, #0]
   14324:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
   14326:	693b      	ldr	r3, [r7, #16]
   14328:	7e1b      	ldrb	r3, [r3, #24]
   1432a:	b2db      	uxtb	r3, r3
   1432c:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
   1432e:	2300      	movs	r3, #0
   14330:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
   14332:	68fb      	ldr	r3, [r7, #12]
   14334:	2201      	movs	r2, #1
   14336:	4013      	ands	r3, r2
   14338:	d003      	beq.n	14342 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   1433a:	697b      	ldr	r3, [r7, #20]
   1433c:	2201      	movs	r2, #1
   1433e:	4313      	orrs	r3, r2
   14340:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
   14342:	68fb      	ldr	r3, [r7, #12]
   14344:	2204      	movs	r2, #4
   14346:	4013      	ands	r3, r2
   14348:	d003      	beq.n	14352 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   1434a:	697b      	ldr	r3, [r7, #20]
   1434c:	2202      	movs	r2, #2
   1434e:	4313      	orrs	r3, r2
   14350:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   14352:	68fb      	ldr	r3, [r7, #12]
   14354:	2202      	movs	r2, #2
   14356:	4013      	ands	r3, r2
   14358:	d003      	beq.n	14362 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   1435a:	697b      	ldr	r3, [r7, #20]
   1435c:	2204      	movs	r2, #4
   1435e:	4313      	orrs	r3, r2
   14360:	617b      	str	r3, [r7, #20]
	return status_flags;
   14362:	697b      	ldr	r3, [r7, #20]
}
   14364:	0018      	movs	r0, r3
   14366:	46bd      	mov	sp, r7
   14368:	b006      	add	sp, #24
   1436a:	bd80      	pop	{r7, pc}

0001436c <adc_clear_status>:
{
   1436c:	b580      	push	{r7, lr}
   1436e:	b084      	sub	sp, #16
   14370:	af00      	add	r7, sp, #0
   14372:	6078      	str	r0, [r7, #4]
   14374:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
   14376:	687b      	ldr	r3, [r7, #4]
   14378:	681b      	ldr	r3, [r3, #0]
   1437a:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
   1437c:	2300      	movs	r3, #0
   1437e:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
   14380:	683b      	ldr	r3, [r7, #0]
   14382:	2201      	movs	r2, #1
   14384:	4013      	ands	r3, r2
   14386:	d003      	beq.n	14390 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   14388:	68fb      	ldr	r3, [r7, #12]
   1438a:	2201      	movs	r2, #1
   1438c:	4313      	orrs	r3, r2
   1438e:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
   14390:	683b      	ldr	r3, [r7, #0]
   14392:	2202      	movs	r2, #2
   14394:	4013      	ands	r3, r2
   14396:	d003      	beq.n	143a0 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   14398:	68fb      	ldr	r3, [r7, #12]
   1439a:	2204      	movs	r2, #4
   1439c:	4313      	orrs	r3, r2
   1439e:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
   143a0:	683b      	ldr	r3, [r7, #0]
   143a2:	2204      	movs	r2, #4
   143a4:	4013      	ands	r3, r2
   143a6:	d003      	beq.n	143b0 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   143a8:	68fb      	ldr	r3, [r7, #12]
   143aa:	2202      	movs	r2, #2
   143ac:	4313      	orrs	r3, r2
   143ae:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
   143b0:	68fb      	ldr	r3, [r7, #12]
   143b2:	b2da      	uxtb	r2, r3
   143b4:	68bb      	ldr	r3, [r7, #8]
   143b6:	761a      	strb	r2, [r3, #24]
}
   143b8:	46c0      	nop			; (mov r8, r8)
   143ba:	46bd      	mov	sp, r7
   143bc:	b004      	add	sp, #16
   143be:	bd80      	pop	{r7, pc}

000143c0 <adc_enable>:
{
   143c0:	b580      	push	{r7, lr}
   143c2:	b084      	sub	sp, #16
   143c4:	af00      	add	r7, sp, #0
   143c6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   143c8:	687b      	ldr	r3, [r7, #4]
   143ca:	681b      	ldr	r3, [r3, #0]
   143cc:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   143ce:	46c0      	nop			; (mov r8, r8)
   143d0:	687b      	ldr	r3, [r7, #4]
   143d2:	0018      	movs	r0, r3
   143d4:	4b10      	ldr	r3, [pc, #64]	; (14418 <adc_enable+0x58>)
   143d6:	4798      	blx	r3
   143d8:	1e03      	subs	r3, r0, #0
   143da:	d1f9      	bne.n	143d0 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   143dc:	2017      	movs	r0, #23
   143de:	4b0f      	ldr	r3, [pc, #60]	; (1441c <adc_enable+0x5c>)
   143e0:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   143e2:	68fb      	ldr	r3, [r7, #12]
   143e4:	220f      	movs	r2, #15
   143e6:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   143e8:	68fb      	ldr	r3, [r7, #12]
   143ea:	220f      	movs	r2, #15
   143ec:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   143ee:	68fb      	ldr	r3, [r7, #12]
   143f0:	781b      	ldrb	r3, [r3, #0]
   143f2:	b2db      	uxtb	r3, r3
   143f4:	2202      	movs	r2, #2
   143f6:	4313      	orrs	r3, r2
   143f8:	b2da      	uxtb	r2, r3
   143fa:	68fb      	ldr	r3, [r7, #12]
   143fc:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
   143fe:	46c0      	nop			; (mov r8, r8)
   14400:	687b      	ldr	r3, [r7, #4]
   14402:	0018      	movs	r0, r3
   14404:	4b04      	ldr	r3, [pc, #16]	; (14418 <adc_enable+0x58>)
   14406:	4798      	blx	r3
   14408:	1e03      	subs	r3, r0, #0
   1440a:	d1f9      	bne.n	14400 <adc_enable+0x40>
	return STATUS_OK;
   1440c:	2300      	movs	r3, #0
}
   1440e:	0018      	movs	r0, r3
   14410:	46bd      	mov	sp, r7
   14412:	b004      	add	sp, #16
   14414:	bd80      	pop	{r7, pc}
   14416:	46c0      	nop			; (mov r8, r8)
   14418:	000142f1 	.word	0x000142f1
   1441c:	000142c5 	.word	0x000142c5

00014420 <adc_start_conversion>:
{
   14420:	b580      	push	{r7, lr}
   14422:	b084      	sub	sp, #16
   14424:	af00      	add	r7, sp, #0
   14426:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   14428:	687b      	ldr	r3, [r7, #4]
   1442a:	681b      	ldr	r3, [r3, #0]
   1442c:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1442e:	46c0      	nop			; (mov r8, r8)
   14430:	687b      	ldr	r3, [r7, #4]
   14432:	0018      	movs	r0, r3
   14434:	4b0b      	ldr	r3, [pc, #44]	; (14464 <adc_start_conversion+0x44>)
   14436:	4798      	blx	r3
   14438:	1e03      	subs	r3, r0, #0
   1443a:	d1f9      	bne.n	14430 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1443c:	68fb      	ldr	r3, [r7, #12]
   1443e:	7b1b      	ldrb	r3, [r3, #12]
   14440:	b2db      	uxtb	r3, r3
   14442:	2202      	movs	r2, #2
   14444:	4313      	orrs	r3, r2
   14446:	b2da      	uxtb	r2, r3
   14448:	68fb      	ldr	r3, [r7, #12]
   1444a:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1444c:	46c0      	nop			; (mov r8, r8)
   1444e:	687b      	ldr	r3, [r7, #4]
   14450:	0018      	movs	r0, r3
   14452:	4b04      	ldr	r3, [pc, #16]	; (14464 <adc_start_conversion+0x44>)
   14454:	4798      	blx	r3
   14456:	1e03      	subs	r3, r0, #0
   14458:	d1f9      	bne.n	1444e <adc_start_conversion+0x2e>
}
   1445a:	46c0      	nop			; (mov r8, r8)
   1445c:	46bd      	mov	sp, r7
   1445e:	b004      	add	sp, #16
   14460:	bd80      	pop	{r7, pc}
   14462:	46c0      	nop			; (mov r8, r8)
   14464:	000142f1 	.word	0x000142f1

00014468 <adc_read>:
{
   14468:	b580      	push	{r7, lr}
   1446a:	b084      	sub	sp, #16
   1446c:	af00      	add	r7, sp, #0
   1446e:	6078      	str	r0, [r7, #4]
   14470:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   14472:	687b      	ldr	r3, [r7, #4]
   14474:	0018      	movs	r0, r3
   14476:	4b18      	ldr	r3, [pc, #96]	; (144d8 <adc_read+0x70>)
   14478:	4798      	blx	r3
   1447a:	0002      	movs	r2, r0
   1447c:	2301      	movs	r3, #1
   1447e:	4013      	ands	r3, r2
   14480:	d101      	bne.n	14486 <adc_read+0x1e>
		return STATUS_BUSY;
   14482:	2305      	movs	r3, #5
   14484:	e023      	b.n	144ce <adc_read+0x66>
	Adc *const adc_module = module_inst->hw;
   14486:	687b      	ldr	r3, [r7, #4]
   14488:	681b      	ldr	r3, [r3, #0]
   1448a:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1448c:	46c0      	nop			; (mov r8, r8)
   1448e:	687b      	ldr	r3, [r7, #4]
   14490:	0018      	movs	r0, r3
   14492:	4b12      	ldr	r3, [pc, #72]	; (144dc <adc_read+0x74>)
   14494:	4798      	blx	r3
   14496:	1e03      	subs	r3, r0, #0
   14498:	d1f9      	bne.n	1448e <adc_read+0x26>
	*result = adc_module->RESULT.reg;
   1449a:	68fb      	ldr	r3, [r7, #12]
   1449c:	8b5b      	ldrh	r3, [r3, #26]
   1449e:	b29a      	uxth	r2, r3
   144a0:	683b      	ldr	r3, [r7, #0]
   144a2:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   144a4:	687b      	ldr	r3, [r7, #4]
   144a6:	2101      	movs	r1, #1
   144a8:	0018      	movs	r0, r3
   144aa:	4b0d      	ldr	r3, [pc, #52]	; (144e0 <adc_read+0x78>)
   144ac:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   144ae:	687b      	ldr	r3, [r7, #4]
   144b0:	0018      	movs	r0, r3
   144b2:	4b09      	ldr	r3, [pc, #36]	; (144d8 <adc_read+0x70>)
   144b4:	4798      	blx	r3
   144b6:	0002      	movs	r2, r0
   144b8:	2304      	movs	r3, #4
   144ba:	4013      	ands	r3, r2
   144bc:	d006      	beq.n	144cc <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   144be:	687b      	ldr	r3, [r7, #4]
   144c0:	2104      	movs	r1, #4
   144c2:	0018      	movs	r0, r3
   144c4:	4b06      	ldr	r3, [pc, #24]	; (144e0 <adc_read+0x78>)
   144c6:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   144c8:	231e      	movs	r3, #30
   144ca:	e000      	b.n	144ce <adc_read+0x66>
	return STATUS_OK;
   144cc:	2300      	movs	r3, #0
}
   144ce:	0018      	movs	r0, r3
   144d0:	46bd      	mov	sp, r7
   144d2:	b004      	add	sp, #16
   144d4:	bd80      	pop	{r7, pc}
   144d6:	46c0      	nop			; (mov r8, r8)
   144d8:	00014319 	.word	0x00014319
   144dc:	000142f1 	.word	0x000142f1
   144e0:	0001436d 	.word	0x0001436d

000144e4 <configure_adc>:

 * @return		Returns nothing.
 * @note
 */
void configure_adc(void)
{
   144e4:	b580      	push	{r7, lr}
   144e6:	b08c      	sub	sp, #48	; 0x30
   144e8:	af00      	add	r7, sp, #0

	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
   144ea:	003b      	movs	r3, r7
   144ec:	0018      	movs	r0, r3
   144ee:	4b15      	ldr	r3, [pc, #84]	; (14544 <configure_adc+0x60>)
   144f0:	4798      	blx	r3
	#if !(SAML21)
	#if !(SAMC21)
	config_adc.gain_factor     = ADC_GAIN_FACTOR_DIV2;
   144f2:	003b      	movs	r3, r7
   144f4:	22f0      	movs	r2, #240	; 0xf0
   144f6:	0512      	lsls	r2, r2, #20
   144f8:	609a      	str	r2, [r3, #8]
	#endif
	config_adc.resolution      = ADC_RESOLUTION_10BIT;
   144fa:	003b      	movs	r3, r7
   144fc:	2220      	movs	r2, #32
   144fe:	711a      	strb	r2, [r3, #4]
	#endif
	
	config_adc.clock_source = GCLK_GENERATOR_1;
   14500:	003b      	movs	r3, r7
   14502:	2201      	movs	r2, #1
   14504:	701a      	strb	r2, [r3, #0]

	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
   14506:	003b      	movs	r3, r7
   14508:	2280      	movs	r2, #128	; 0x80
   1450a:	0092      	lsls	r2, r2, #2
   1450c:	805a      	strh	r2, [r3, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
   1450e:	003b      	movs	r3, r7
   14510:	2202      	movs	r2, #2
   14512:	705a      	strb	r2, [r3, #1]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;
   14514:	003b      	movs	r3, r7
   14516:	2200      	movs	r2, #0
   14518:	731a      	strb	r2, [r3, #12]
	config_adc.freerunning     = true;
   1451a:	003b      	movs	r3, r7
   1451c:	2201      	movs	r2, #1
   1451e:	751a      	strb	r2, [r3, #20]
	config_adc.left_adjust     = false;
   14520:	003b      	movs	r3, r7
   14522:	2200      	movs	r2, #0
   14524:	749a      	strb	r2, [r3, #18]
	#if (SAMC21)
	adc_init(&adc_instance, ADC, &config_adc);
	#else
	adc_init(&adc_instance, ADC, &config_adc);
   14526:	003a      	movs	r2, r7
   14528:	4907      	ldr	r1, [pc, #28]	; (14548 <configure_adc+0x64>)
   1452a:	4b08      	ldr	r3, [pc, #32]	; (1454c <configure_adc+0x68>)
   1452c:	0018      	movs	r0, r3
   1452e:	4b08      	ldr	r3, [pc, #32]	; (14550 <configure_adc+0x6c>)
   14530:	4798      	blx	r3
	#endif
	adc_enable(&adc_instance);
   14532:	4b06      	ldr	r3, [pc, #24]	; (1454c <configure_adc+0x68>)
   14534:	0018      	movs	r0, r3
   14536:	4b07      	ldr	r3, [pc, #28]	; (14554 <configure_adc+0x70>)
   14538:	4798      	blx	r3
}
   1453a:	46c0      	nop			; (mov r8, r8)
   1453c:	46bd      	mov	sp, r7
   1453e:	b00c      	add	sp, #48	; 0x30
   14540:	bd80      	pop	{r7, pc}
   14542:	46c0      	nop			; (mov r8, r8)
   14544:	00012219 	.word	0x00012219
   14548:	42004000 	.word	0x42004000
   1454c:	200045f8 	.word	0x200045f8
   14550:	00012869 	.word	0x00012869
   14554:	000143c1 	.word	0x000143c1

00014558 <HeartRateTask>:

 * @return		Returns nothing.
 * @note
 */
void HeartRateTask(void *pvParameters)
{
   14558:	b580      	push	{r7, lr}
   1455a:	b094      	sub	sp, #80	; 0x50
   1455c:	af00      	add	r7, sp, #0
   1455e:	6078      	str	r0, [r7, #4]
	//vTaskDelay(5000);

	uint8_t rate=1000;
   14560:	234f      	movs	r3, #79	; 0x4f
   14562:	18fb      	adds	r3, r7, r3
   14564:	22e8      	movs	r2, #232	; 0xe8
   14566:	701a      	strb	r2, [r3, #0]
	uint8_t buffer1[64];
	samplesUntilReport = SAMPLES_PER_SERIAL_SAMPLE;
   14568:	220a      	movs	r2, #10
   1456a:	4b0e      	ldr	r3, [pc, #56]	; (145a4 <HeartRateTask+0x4c>)
   1456c:	701a      	strb	r2, [r3, #0]
	configure_adc();
   1456e:	4b0e      	ldr	r3, [pc, #56]	; (145a8 <HeartRateTask+0x50>)
   14570:	4798      	blx	r3

	if (!begin()) {
   14572:	4b0e      	ldr	r3, [pc, #56]	; (145ac <HeartRateTask+0x54>)
   14574:	4798      	blx	r3
	//SerialConsoleWriteString("Can't Initialize Pulserate Sensor\r\n");
	}
	
	while(1)
	{    
		 if (sawNewSample()) {
   14576:	4b0e      	ldr	r3, [pc, #56]	; (145b0 <HeartRateTask+0x58>)
   14578:	4798      	blx	r3
   1457a:	1e03      	subs	r3, r0, #0
   1457c:	d00e      	beq.n	1459c <HeartRateTask+0x44>
       Every so often, send the latest Sample.
       We don't print every sample, because our baud rate
       won't support that much I/O.
    */
				//	SerialConsoleWriteString("Saw New Sample \r\n");
			if (--samplesUntilReport == (uint8_t) 0) {
   1457e:	4b09      	ldr	r3, [pc, #36]	; (145a4 <HeartRateTask+0x4c>)
   14580:	781b      	ldrb	r3, [r3, #0]
   14582:	3b01      	subs	r3, #1
   14584:	b2da      	uxtb	r2, r3
   14586:	4b07      	ldr	r3, [pc, #28]	; (145a4 <HeartRateTask+0x4c>)
   14588:	701a      	strb	r2, [r3, #0]
   1458a:	4b06      	ldr	r3, [pc, #24]	; (145a4 <HeartRateTask+0x4c>)
   1458c:	781b      	ldrb	r3, [r3, #0]
   1458e:	2b00      	cmp	r3, #0
   14590:	d104      	bne.n	1459c <HeartRateTask+0x44>
				samplesUntilReport = SAMPLES_PER_SERIAL_SAMPLE;
   14592:	220a      	movs	r2, #10
   14594:	4b03      	ldr	r3, [pc, #12]	; (145a4 <HeartRateTask+0x4c>)
   14596:	701a      	strb	r2, [r3, #0]
				//SerialConsoleWriteString("samplesUntilReport \r\n");
				outputSample();
   14598:	4b06      	ldr	r3, [pc, #24]	; (145b4 <HeartRateTask+0x5c>)
   1459a:	4798      	blx	r3
			*/

			}	
		}
	
		vTaskDelay(10);
   1459c:	200a      	movs	r0, #10
   1459e:	4b06      	ldr	r3, [pc, #24]	; (145b8 <HeartRateTask+0x60>)
   145a0:	4798      	blx	r3
		 if (sawNewSample()) {
   145a2:	e7e8      	b.n	14576 <HeartRateTask+0x1e>
   145a4:	200046ac 	.word	0x200046ac
   145a8:	000144e5 	.word	0x000144e5
   145ac:	000145bd 	.word	0x000145bd
   145b0:	00014619 	.word	0x00014619
   145b4:	00014679 	.word	0x00014679
   145b8:	0001bb11 	.word	0x0001bb11

000145bc <begin>:
 * @details 	Initialize heart rate sensor

 * @return		Returns nothing.
 * @note
 */
bool begin(void){
   145bc:	b580      	push	{r7, lr}
   145be:	af00      	add	r7, sp, #0
	 NextSampleMicros = (xTaskGetTickCount()*configTICK_RATE_HZ)+ MICROS_PER_READ;
   145c0:	4b0f      	ldr	r3, [pc, #60]	; (14600 <begin+0x44>)
   145c2:	4798      	blx	r3
   145c4:	0002      	movs	r2, r0
   145c6:	23fa      	movs	r3, #250	; 0xfa
   145c8:	009b      	lsls	r3, r3, #2
   145ca:	435a      	muls	r2, r3
   145cc:	23fa      	movs	r3, #250	; 0xfa
   145ce:	00db      	lsls	r3, r3, #3
   145d0:	18d2      	adds	r2, r2, r3
   145d2:	4b0c      	ldr	r3, [pc, #48]	; (14604 <begin+0x48>)
   145d4:	601a      	str	r2, [r3, #0]
	 sampleIntervalMs = MICROS_PER_READ / 1000;
   145d6:	23fa      	movs	r3, #250	; 0xfa
   145d8:	00d8      	lsls	r0, r3, #3
   145da:	4b0b      	ldr	r3, [pc, #44]	; (14608 <begin+0x4c>)
   145dc:	22fa      	movs	r2, #250	; 0xfa
   145de:	0091      	lsls	r1, r2, #2
   145e0:	4798      	blx	r3
   145e2:	0003      	movs	r3, r0
   145e4:	001a      	movs	r2, r3
   145e6:	4b09      	ldr	r3, [pc, #36]	; (1460c <begin+0x50>)
   145e8:	601a      	str	r2, [r3, #0]
	 SawNewSample = false;
   145ea:	4b09      	ldr	r3, [pc, #36]	; (14610 <begin+0x54>)
   145ec:	2200      	movs	r2, #0
   145ee:	701a      	strb	r2, [r3, #0]
	 Paused = false;
   145f0:	4b08      	ldr	r3, [pc, #32]	; (14614 <begin+0x58>)
   145f2:	2200      	movs	r2, #0
   145f4:	701a      	strb	r2, [r3, #0]
	 return true;
   145f6:	2301      	movs	r3, #1
}
   145f8:	0018      	movs	r0, r3
   145fa:	46bd      	mov	sp, r7
   145fc:	bd80      	pop	{r7, pc}
   145fe:	46c0      	nop			; (mov r8, r8)
   14600:	0001bf59 	.word	0x0001bf59
   14604:	20004698 	.word	0x20004698
   14608:	00032389 	.word	0x00032389
   1460c:	20004694 	.word	0x20004694
   14610:	200046b8 	.word	0x200046b8
   14614:	200046c1 	.word	0x200046c1

00014618 <sawNewSample>:
 * @details 	Checks if there's a new sample

 * @return		Returns if there's a new sample or not (bool).
 * @note
 */
bool sawNewSample(void) {
   14618:	b580      	push	{r7, lr}
   1461a:	b082      	sub	sp, #8
   1461c:	af00      	add	r7, sp, #0
	if(!Paused){
   1461e:	4b12      	ldr	r3, [pc, #72]	; (14668 <sawNewSample+0x50>)
   14620:	781b      	ldrb	r3, [r3, #0]
   14622:	2201      	movs	r2, #1
   14624:	4053      	eors	r3, r2
   14626:	b2db      	uxtb	r3, r3
   14628:	2b00      	cmp	r3, #0
   1462a:	d018      	beq.n	1465e <sawNewSample+0x46>
		unsigned long nowMicros =  xTaskGetTickCount()*configTICK_RATE_HZ ;// micros();
   1462c:	4b0f      	ldr	r3, [pc, #60]	; (1466c <sawNewSample+0x54>)
   1462e:	4798      	blx	r3
   14630:	0002      	movs	r2, r0
   14632:	23fa      	movs	r3, #250	; 0xfa
   14634:	009b      	lsls	r3, r3, #2
   14636:	4353      	muls	r3, r2
   14638:	607b      	str	r3, [r7, #4]
		if ((long) (NextSampleMicros - nowMicros) > 0L) {
   1463a:	4b0d      	ldr	r3, [pc, #52]	; (14670 <sawNewSample+0x58>)
   1463c:	681a      	ldr	r2, [r3, #0]
   1463e:	687b      	ldr	r3, [r7, #4]
   14640:	1ad3      	subs	r3, r2, r3
   14642:	2b00      	cmp	r3, #0
   14644:	dd01      	ble.n	1464a <sawNewSample+0x32>
			return false;  // not time yet.
   14646:	2300      	movs	r3, #0
   14648:	e009      	b.n	1465e <sawNewSample+0x46>
		}
		NextSampleMicros = nowMicros + MICROS_PER_READ;
   1464a:	23fa      	movs	r3, #250	; 0xfa
   1464c:	00da      	lsls	r2, r3, #3
   1464e:	687b      	ldr	r3, [r7, #4]
   14650:	18d2      	adds	r2, r2, r3
   14652:	4b07      	ldr	r3, [pc, #28]	; (14670 <sawNewSample+0x58>)
   14654:	601a      	str	r2, [r3, #0]
		onSampleTime();
   14656:	4b07      	ldr	r3, [pc, #28]	; (14674 <sawNewSample+0x5c>)
   14658:	4798      	blx	r3
		return true;
   1465a:	2301      	movs	r3, #1
   1465c:	e7ff      	b.n	1465e <sawNewSample+0x46>
	}
}
   1465e:	0018      	movs	r0, r3
   14660:	46bd      	mov	sp, r7
   14662:	b002      	add	sp, #8
   14664:	bd80      	pop	{r7, pc}
   14666:	46c0      	nop			; (mov r8, r8)
   14668:	200046c1 	.word	0x200046c1
   1466c:	0001bf59 	.word	0x0001bf59
   14670:	20004698 	.word	0x20004698
   14674:	000146b1 	.word	0x000146b1

00014678 <outputSample>:
 * @details 	Adds the sample new sample queue

 * @return		Returns nothing.
 * @note
 */
void  outputSample(void){
   14678:	b580      	push	{r7, lr}
   1467a:	af00      	add	r7, sp, #0
		//SerialConsoleWriteString("Beat Detected \r\n");
		if(BPM>120){
   1467c:	4b0a      	ldr	r3, [pc, #40]	; (146a8 <outputSample+0x30>)
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	2b78      	cmp	r3, #120	; 0x78
   14682:	dd02      	ble.n	1468a <outputSample+0x12>
			BPM=120;
   14684:	4b08      	ldr	r3, [pc, #32]	; (146a8 <outputSample+0x30>)
   14686:	2278      	movs	r2, #120	; 0x78
   14688:	601a      	str	r2, [r3, #0]
		}
		if(BPM<30){
   1468a:	4b07      	ldr	r3, [pc, #28]	; (146a8 <outputSample+0x30>)
   1468c:	681b      	ldr	r3, [r3, #0]
   1468e:	2b1d      	cmp	r3, #29
   14690:	dc02      	bgt.n	14698 <outputSample+0x20>
			BPM=0;
   14692:	4b05      	ldr	r3, [pc, #20]	; (146a8 <outputSample+0x30>)
   14694:	2200      	movs	r2, #0
   14696:	601a      	str	r2, [r3, #0]
			//snprintf((char *) buffer1, sizeof(buffer1), "BPM: %d, IBI: %d, Signal: %d \r\n", BPM,IBI,Signal);
// 			snprintf((char *) buffer1, sizeof(buffer1), "%d,%d,%d,%d \r\n", BPM,IBI,Signal,xTaskGetTickCount()*configTICK_RATE_HZ );
// 			SerialConsoleWriteString(buffer1);
			//counter++;
//			if(counter++>10){
		WifiAddHeartrateDataToQueue(&BPM);
   14698:	4b03      	ldr	r3, [pc, #12]	; (146a8 <outputSample+0x30>)
   1469a:	0018      	movs	r0, r3
   1469c:	4b03      	ldr	r3, [pc, #12]	; (146ac <outputSample+0x34>)
   1469e:	4798      	blx	r3
// 			counter=0;
// 			}
//		vTaskDelay(500);			
}
   146a0:	46c0      	nop			; (mov r8, r8)
   146a2:	46bd      	mov	sp, r7
   146a4:	bd80      	pop	{r7, pc}
   146a6:	46c0      	nop			; (mov r8, r8)
   146a8:	200046bc 	.word	0x200046bc
   146ac:	00016eb1 	.word	0x00016eb1

000146b0 <onSampleTime>:
 * @details 	Sample time

 * @return		Returns nothing.
 * @note
 */
void onSampleTime(void) {
   146b0:	b580      	push	{r7, lr}
   146b2:	af00      	add	r7, sp, #0
     Read the voltage from each PulseSensor.
     We do this separately from processing the samples
     to minimize jitter in acquiring the signal.
  */

	readNextSample();
   146b4:	4b04      	ldr	r3, [pc, #16]	; (146c8 <onSampleTime+0x18>)
   146b6:	4798      	blx	r3

  // Process those samples.

	processLatestSample();
   146b8:	4b04      	ldr	r3, [pc, #16]	; (146cc <onSampleTime+0x1c>)
   146ba:	4798      	blx	r3

  // Set the flag that says we've read a sample since the Sketch checked.
	SawNewSample = true;
   146bc:	4b04      	ldr	r3, [pc, #16]	; (146d0 <onSampleTime+0x20>)
   146be:	2201      	movs	r2, #1
   146c0:	701a      	strb	r2, [r3, #0]

  // digitalWrite(timingPin,LOW); // optionally connect timingPin to oscilloscope to time algorithm run time
 }
   146c2:	46c0      	nop			; (mov r8, r8)
   146c4:	46bd      	mov	sp, r7
   146c6:	bd80      	pop	{r7, pc}
   146c8:	000146d5 	.word	0x000146d5
   146cc:	00014725 	.word	0x00014725
   146d0:	200046b8 	.word	0x200046b8

000146d4 <readNextSample>:
 * @details 	Read Next Sample from sensor 

 * @return		Returns nothing.
 * @note
 */
void readNextSample(void) {
   146d4:	b580      	push	{r7, lr}
   146d6:	af00      	add	r7, sp, #0
	
	// We assume assigning to an int is atomic.
	 adc_start_conversion(&adc_instance);
   146d8:	4b0c      	ldr	r3, [pc, #48]	; (1470c <readNextSample+0x38>)
   146da:	0018      	movs	r0, r3
   146dc:	4b0c      	ldr	r3, [pc, #48]	; (14710 <readNextSample+0x3c>)
   146de:	4798      	blx	r3

	do {
		
		status = adc_read(&adc_instance, &pulse);
   146e0:	4a0c      	ldr	r2, [pc, #48]	; (14714 <readNextSample+0x40>)
   146e2:	4b0a      	ldr	r3, [pc, #40]	; (1470c <readNextSample+0x38>)
   146e4:	0011      	movs	r1, r2
   146e6:	0018      	movs	r0, r3
   146e8:	4b0b      	ldr	r3, [pc, #44]	; (14718 <readNextSample+0x44>)
   146ea:	4798      	blx	r3
   146ec:	0003      	movs	r3, r0
   146ee:	001a      	movs	r2, r3
   146f0:	4b0a      	ldr	r3, [pc, #40]	; (1471c <readNextSample+0x48>)
   146f2:	701a      	strb	r2, [r3, #0]
		
	} while (status == STATUS_BUSY);
   146f4:	4b09      	ldr	r3, [pc, #36]	; (1471c <readNextSample+0x48>)
   146f6:	781b      	ldrb	r3, [r3, #0]
   146f8:	2b05      	cmp	r3, #5
   146fa:	d0f1      	beq.n	146e0 <readNextSample+0xc>
	Signal=pulse;
   146fc:	4b05      	ldr	r3, [pc, #20]	; (14714 <readNextSample+0x40>)
   146fe:	881b      	ldrh	r3, [r3, #0]
   14700:	001a      	movs	r2, r3
   14702:	4b07      	ldr	r3, [pc, #28]	; (14720 <readNextSample+0x4c>)
   14704:	601a      	str	r2, [r3, #0]
	
}
   14706:	46c0      	nop			; (mov r8, r8)
   14708:	46bd      	mov	sp, r7
   1470a:	bd80      	pop	{r7, pc}
   1470c:	200045f8 	.word	0x200045f8
   14710:	00014421 	.word	0x00014421
   14714:	200045f4 	.word	0x200045f4
   14718:	00014469 	.word	0x00014469
   1471c:	20004715 	.word	0x20004715
   14720:	200046c8 	.word	0x200046c8

00014724 <processLatestSample>:
 * @details 	Process new sample

 * @return		Returns nothing.
 * @note
 */
void processLatestSample(void) {
   14724:	b590      	push	{r4, r7, lr}
   14726:	b085      	sub	sp, #20
   14728:	af00      	add	r7, sp, #0
	// Serial.println(threshSetting);
	// Serial.print('\t');
	// Serial.println(thresh);
	sampleCounter += sampleIntervalMs;         // keep track of the time in mS with this variable
   1472a:	4b97      	ldr	r3, [pc, #604]	; (14988 <processLatestSample+0x264>)
   1472c:	681a      	ldr	r2, [r3, #0]
   1472e:	4b97      	ldr	r3, [pc, #604]	; (1498c <processLatestSample+0x268>)
   14730:	681b      	ldr	r3, [r3, #0]
   14732:	18d2      	adds	r2, r2, r3
   14734:	4b94      	ldr	r3, [pc, #592]	; (14988 <processLatestSample+0x264>)
   14736:	601a      	str	r2, [r3, #0]
	N = sampleCounter - lastBeatTime;      // monitor the time since the last beat to avoid noise
   14738:	4b93      	ldr	r3, [pc, #588]	; (14988 <processLatestSample+0x264>)
   1473a:	681a      	ldr	r2, [r3, #0]
   1473c:	4b94      	ldr	r3, [pc, #592]	; (14990 <processLatestSample+0x26c>)
   1473e:	681b      	ldr	r3, [r3, #0]
   14740:	1ad3      	subs	r3, r2, r3
   14742:	001a      	movs	r2, r3
   14744:	4b93      	ldr	r3, [pc, #588]	; (14994 <processLatestSample+0x270>)
   14746:	601a      	str	r2, [r3, #0]

	// Fade the Fading LED


	//  find the peak and trough of the pulse wave
	if (Signal < THRESHOLD && N > (IBI / 5) * 3) { // avoid dichrotic noise by waiting 3/5 of last IBI
   14748:	4b93      	ldr	r3, [pc, #588]	; (14998 <processLatestSample+0x274>)
   1474a:	681b      	ldr	r3, [r3, #0]
   1474c:	4a93      	ldr	r2, [pc, #588]	; (1499c <processLatestSample+0x278>)
   1474e:	4293      	cmp	r3, r2
   14750:	da18      	bge.n	14784 <processLatestSample+0x60>
   14752:	4b93      	ldr	r3, [pc, #588]	; (149a0 <processLatestSample+0x27c>)
   14754:	681a      	ldr	r2, [r3, #0]
   14756:	4b93      	ldr	r3, [pc, #588]	; (149a4 <processLatestSample+0x280>)
   14758:	2105      	movs	r1, #5
   1475a:	0010      	movs	r0, r2
   1475c:	4798      	blx	r3
   1475e:	0003      	movs	r3, r0
   14760:	001a      	movs	r2, r3
   14762:	0013      	movs	r3, r2
   14764:	005b      	lsls	r3, r3, #1
   14766:	189a      	adds	r2, r3, r2
   14768:	4b8a      	ldr	r3, [pc, #552]	; (14994 <processLatestSample+0x270>)
   1476a:	681b      	ldr	r3, [r3, #0]
   1476c:	429a      	cmp	r2, r3
   1476e:	da09      	bge.n	14784 <processLatestSample+0x60>
		if (Signal < T) {                        // T is the trough
   14770:	4b89      	ldr	r3, [pc, #548]	; (14998 <processLatestSample+0x274>)
   14772:	681a      	ldr	r2, [r3, #0]
   14774:	4b8c      	ldr	r3, [pc, #560]	; (149a8 <processLatestSample+0x284>)
   14776:	681b      	ldr	r3, [r3, #0]
   14778:	429a      	cmp	r2, r3
   1477a:	da03      	bge.n	14784 <processLatestSample+0x60>
			T = Signal;                            // keep track of lowest point in pulse wave
   1477c:	4b86      	ldr	r3, [pc, #536]	; (14998 <processLatestSample+0x274>)
   1477e:	681a      	ldr	r2, [r3, #0]
   14780:	4b89      	ldr	r3, [pc, #548]	; (149a8 <processLatestSample+0x284>)
   14782:	601a      	str	r2, [r3, #0]
			//SerialConsoleWriteString("(Signal < THRESHOLD && N > (IBI / 5) * 3) \r\n");
			
		}
	}

	if (Signal > THRESHOLD && Signal > P) {       // thresh condition helps avoid noise
   14784:	4b84      	ldr	r3, [pc, #528]	; (14998 <processLatestSample+0x274>)
   14786:	681b      	ldr	r3, [r3, #0]
   14788:	4a84      	ldr	r2, [pc, #528]	; (1499c <processLatestSample+0x278>)
   1478a:	4293      	cmp	r3, r2
   1478c:	dd09      	ble.n	147a2 <processLatestSample+0x7e>
   1478e:	4b82      	ldr	r3, [pc, #520]	; (14998 <processLatestSample+0x274>)
   14790:	681a      	ldr	r2, [r3, #0]
   14792:	4b86      	ldr	r3, [pc, #536]	; (149ac <processLatestSample+0x288>)
   14794:	681b      	ldr	r3, [r3, #0]
   14796:	429a      	cmp	r2, r3
   14798:	dd03      	ble.n	147a2 <processLatestSample+0x7e>
		P = Signal;                              // P is the peak
   1479a:	4b7f      	ldr	r3, [pc, #508]	; (14998 <processLatestSample+0x274>)
   1479c:	681a      	ldr	r2, [r3, #0]
   1479e:	4b83      	ldr	r3, [pc, #524]	; (149ac <processLatestSample+0x288>)
   147a0:	601a      	str	r2, [r3, #0]
	//SerialConsoleWriteString("(Signal > THRESHOLD && Signal > P) \r\n");
	}                                          // keep track of highest point in pulse wave

	//  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	// signal surges up in value every time there is a pulse
	if (N > 250) {                             // avoid high frequency noise
   147a2:	4b7c      	ldr	r3, [pc, #496]	; (14994 <processLatestSample+0x270>)
   147a4:	681b      	ldr	r3, [r3, #0]
   147a6:	2bfa      	cmp	r3, #250	; 0xfa
   147a8:	dc00      	bgt.n	147ac <processLatestSample+0x88>
   147aa:	e097      	b.n	148dc <processLatestSample+0x1b8>
		if ( (Signal > THRESHOLD) && (Pulse == false) && (N > (IBI / 5) * 3) ) {
   147ac:	4b7a      	ldr	r3, [pc, #488]	; (14998 <processLatestSample+0x274>)
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	4a7a      	ldr	r2, [pc, #488]	; (1499c <processLatestSample+0x278>)
   147b2:	4293      	cmp	r3, r2
   147b4:	dc00      	bgt.n	147b8 <processLatestSample+0x94>
   147b6:	e091      	b.n	148dc <processLatestSample+0x1b8>
   147b8:	4b7d      	ldr	r3, [pc, #500]	; (149b0 <processLatestSample+0x28c>)
   147ba:	781b      	ldrb	r3, [r3, #0]
   147bc:	b2db      	uxtb	r3, r3
   147be:	2201      	movs	r2, #1
   147c0:	4053      	eors	r3, r2
   147c2:	b2db      	uxtb	r3, r3
   147c4:	2b00      	cmp	r3, #0
   147c6:	d100      	bne.n	147ca <processLatestSample+0xa6>
   147c8:	e088      	b.n	148dc <processLatestSample+0x1b8>
   147ca:	4b75      	ldr	r3, [pc, #468]	; (149a0 <processLatestSample+0x27c>)
   147cc:	681a      	ldr	r2, [r3, #0]
   147ce:	4b75      	ldr	r3, [pc, #468]	; (149a4 <processLatestSample+0x280>)
   147d0:	2105      	movs	r1, #5
   147d2:	0010      	movs	r0, r2
   147d4:	4798      	blx	r3
   147d6:	0003      	movs	r3, r0
   147d8:	001a      	movs	r2, r3
   147da:	0013      	movs	r3, r2
   147dc:	005b      	lsls	r3, r3, #1
   147de:	189a      	adds	r2, r3, r2
   147e0:	4b6c      	ldr	r3, [pc, #432]	; (14994 <processLatestSample+0x270>)
   147e2:	681b      	ldr	r3, [r3, #0]
   147e4:	429a      	cmp	r2, r3
   147e6:	db00      	blt.n	147ea <processLatestSample+0xc6>
   147e8:	e078      	b.n	148dc <processLatestSample+0x1b8>
			Pulse = true;                          // set the Pulse flag when we think there is a pulse
   147ea:	4b71      	ldr	r3, [pc, #452]	; (149b0 <processLatestSample+0x28c>)
   147ec:	2201      	movs	r2, #1
   147ee:	701a      	strb	r2, [r3, #0]
			IBI = sampleCounter - lastBeatTime;    // measure time between beats in mS
   147f0:	4b65      	ldr	r3, [pc, #404]	; (14988 <processLatestSample+0x264>)
   147f2:	681a      	ldr	r2, [r3, #0]
   147f4:	4b66      	ldr	r3, [pc, #408]	; (14990 <processLatestSample+0x26c>)
   147f6:	681b      	ldr	r3, [r3, #0]
   147f8:	1ad3      	subs	r3, r2, r3
   147fa:	001a      	movs	r2, r3
   147fc:	4b68      	ldr	r3, [pc, #416]	; (149a0 <processLatestSample+0x27c>)
   147fe:	601a      	str	r2, [r3, #0]
			lastBeatTime = sampleCounter;          // keep track of time for next pulse
   14800:	4b61      	ldr	r3, [pc, #388]	; (14988 <processLatestSample+0x264>)
   14802:	681a      	ldr	r2, [r3, #0]
   14804:	4b62      	ldr	r3, [pc, #392]	; (14990 <processLatestSample+0x26c>)
   14806:	601a      	str	r2, [r3, #0]

			if (secondBeat) {                      // if this is the second beat, if secondBeat == TRUE
   14808:	4b6a      	ldr	r3, [pc, #424]	; (149b4 <processLatestSample+0x290>)
   1480a:	781b      	ldrb	r3, [r3, #0]
   1480c:	2b00      	cmp	r3, #0
   1480e:	d011      	beq.n	14834 <processLatestSample+0x110>
				secondBeat = false;                  // clear secondBeat flag
   14810:	4b68      	ldr	r3, [pc, #416]	; (149b4 <processLatestSample+0x290>)
   14812:	2200      	movs	r2, #0
   14814:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i <= 9; i++) {       // seed the running total to get a realisitic BPM at startup
   14816:	2300      	movs	r3, #0
   14818:	60fb      	str	r3, [r7, #12]
   1481a:	e008      	b.n	1482e <processLatestSample+0x10a>
					rate[i] = IBI;
   1481c:	4b60      	ldr	r3, [pc, #384]	; (149a0 <processLatestSample+0x27c>)
   1481e:	6819      	ldr	r1, [r3, #0]
   14820:	4b65      	ldr	r3, [pc, #404]	; (149b8 <processLatestSample+0x294>)
   14822:	68fa      	ldr	r2, [r7, #12]
   14824:	0092      	lsls	r2, r2, #2
   14826:	50d1      	str	r1, [r2, r3]
				for (int i = 0; i <= 9; i++) {       // seed the running total to get a realisitic BPM at startup
   14828:	68fb      	ldr	r3, [r7, #12]
   1482a:	3301      	adds	r3, #1
   1482c:	60fb      	str	r3, [r7, #12]
   1482e:	68fb      	ldr	r3, [r7, #12]
   14830:	2b09      	cmp	r3, #9
   14832:	ddf3      	ble.n	1481c <processLatestSample+0xf8>
				}
			}

			if (firstBeat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
   14834:	4b61      	ldr	r3, [pc, #388]	; (149bc <processLatestSample+0x298>)
   14836:	781b      	ldrb	r3, [r3, #0]
   14838:	2b00      	cmp	r3, #0
   1483a:	d006      	beq.n	1484a <processLatestSample+0x126>
				firstBeat = false;                   // clear firstBeat flag
   1483c:	4b5f      	ldr	r3, [pc, #380]	; (149bc <processLatestSample+0x298>)
   1483e:	2200      	movs	r2, #0
   14840:	701a      	strb	r2, [r3, #0]
				secondBeat = true;                   // set the second beat flag
   14842:	4b5c      	ldr	r3, [pc, #368]	; (149b4 <processLatestSample+0x290>)
   14844:	2201      	movs	r2, #1
   14846:	701a      	strb	r2, [r3, #0]
				// IBI value is unreliable so discard it
				return;
   14848:	e09a      	b.n	14980 <processLatestSample+0x25c>
			}

		//SerialConsoleWriteString("(Signal > THRESHOLD) && (Pulse == false) && (N > (IBI / 5) * 3) \r\n");

			// keep a running total of the last 10 IBI values
			uint16_t runningTotal = 0;                  // clear the runningTotal variable
   1484a:	230a      	movs	r3, #10
   1484c:	18fb      	adds	r3, r7, r3
   1484e:	2200      	movs	r2, #0
   14850:	801a      	strh	r2, [r3, #0]

			for (int i = 0; i <= 8; i++) {          // shift data in the rate array
   14852:	2300      	movs	r3, #0
   14854:	607b      	str	r3, [r7, #4]
   14856:	e017      	b.n	14888 <processLatestSample+0x164>
				rate[i] = rate[i + 1];                // and drop the oldest IBI value
   14858:	687b      	ldr	r3, [r7, #4]
   1485a:	1c5a      	adds	r2, r3, #1
   1485c:	4b56      	ldr	r3, [pc, #344]	; (149b8 <processLatestSample+0x294>)
   1485e:	0092      	lsls	r2, r2, #2
   14860:	58d1      	ldr	r1, [r2, r3]
   14862:	4b55      	ldr	r3, [pc, #340]	; (149b8 <processLatestSample+0x294>)
   14864:	687a      	ldr	r2, [r7, #4]
   14866:	0092      	lsls	r2, r2, #2
   14868:	50d1      	str	r1, [r2, r3]
				runningTotal += rate[i];              // add up the 9 oldest IBI values
   1486a:	4b53      	ldr	r3, [pc, #332]	; (149b8 <processLatestSample+0x294>)
   1486c:	687a      	ldr	r2, [r7, #4]
   1486e:	0092      	lsls	r2, r2, #2
   14870:	58d3      	ldr	r3, [r2, r3]
   14872:	b299      	uxth	r1, r3
   14874:	230a      	movs	r3, #10
   14876:	18fb      	adds	r3, r7, r3
   14878:	220a      	movs	r2, #10
   1487a:	18ba      	adds	r2, r7, r2
   1487c:	8812      	ldrh	r2, [r2, #0]
   1487e:	188a      	adds	r2, r1, r2
   14880:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i <= 8; i++) {          // shift data in the rate array
   14882:	687b      	ldr	r3, [r7, #4]
   14884:	3301      	adds	r3, #1
   14886:	607b      	str	r3, [r7, #4]
   14888:	687b      	ldr	r3, [r7, #4]
   1488a:	2b08      	cmp	r3, #8
   1488c:	dde4      	ble.n	14858 <processLatestSample+0x134>
			}

			rate[9] = IBI;                          // add the latest IBI to the rate array
   1488e:	4b44      	ldr	r3, [pc, #272]	; (149a0 <processLatestSample+0x27c>)
   14890:	681a      	ldr	r2, [r3, #0]
   14892:	4b49      	ldr	r3, [pc, #292]	; (149b8 <processLatestSample+0x294>)
   14894:	625a      	str	r2, [r3, #36]	; 0x24
			runningTotal += rate[9];                // add the latest IBI to runningTotal
   14896:	4b48      	ldr	r3, [pc, #288]	; (149b8 <processLatestSample+0x294>)
   14898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1489a:	b299      	uxth	r1, r3
   1489c:	230a      	movs	r3, #10
   1489e:	18fb      	adds	r3, r7, r3
   148a0:	220a      	movs	r2, #10
   148a2:	18ba      	adds	r2, r7, r2
   148a4:	8812      	ldrh	r2, [r2, #0]
   148a6:	188a      	adds	r2, r1, r2
   148a8:	801a      	strh	r2, [r3, #0]
			runningTotal /= 10;                     // average the last 10 IBI values
   148aa:	230a      	movs	r3, #10
   148ac:	18fc      	adds	r4, r7, r3
   148ae:	230a      	movs	r3, #10
   148b0:	18fb      	adds	r3, r7, r3
   148b2:	881a      	ldrh	r2, [r3, #0]
   148b4:	4b42      	ldr	r3, [pc, #264]	; (149c0 <processLatestSample+0x29c>)
   148b6:	210a      	movs	r1, #10
   148b8:	0010      	movs	r0, r2
   148ba:	4798      	blx	r3
   148bc:	0003      	movs	r3, r0
   148be:	8023      	strh	r3, [r4, #0]
			BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
   148c0:	230a      	movs	r3, #10
   148c2:	18fb      	adds	r3, r7, r3
   148c4:	881a      	ldrh	r2, [r3, #0]
   148c6:	4b37      	ldr	r3, [pc, #220]	; (149a4 <processLatestSample+0x280>)
   148c8:	0011      	movs	r1, r2
   148ca:	483e      	ldr	r0, [pc, #248]	; (149c4 <processLatestSample+0x2a0>)
   148cc:	4798      	blx	r3
   148ce:	0003      	movs	r3, r0
   148d0:	001a      	movs	r2, r3
   148d2:	4b3d      	ldr	r3, [pc, #244]	; (149c8 <processLatestSample+0x2a4>)
   148d4:	601a      	str	r2, [r3, #0]
			QS = true;                              // set Quantified Self flag (we detected a beat)
   148d6:	4b3d      	ldr	r3, [pc, #244]	; (149cc <processLatestSample+0x2a8>)
   148d8:	2201      	movs	r2, #1
   148da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (Signal < THRESHOLD && Pulse == true) {  // when the values are going down, the beat is over
   148dc:	4b2e      	ldr	r3, [pc, #184]	; (14998 <processLatestSample+0x274>)
   148de:	681b      	ldr	r3, [r3, #0]
   148e0:	4a2e      	ldr	r2, [pc, #184]	; (1499c <processLatestSample+0x278>)
   148e2:	4293      	cmp	r3, r2
   148e4:	da22      	bge.n	1492c <processLatestSample+0x208>
   148e6:	4b32      	ldr	r3, [pc, #200]	; (149b0 <processLatestSample+0x28c>)
   148e8:	781b      	ldrb	r3, [r3, #0]
   148ea:	b2db      	uxtb	r3, r3
   148ec:	2b00      	cmp	r3, #0
   148ee:	d01d      	beq.n	1492c <processLatestSample+0x208>
		Pulse = false;                         // reset the Pulse flag so we can do it again
   148f0:	4b2f      	ldr	r3, [pc, #188]	; (149b0 <processLatestSample+0x28c>)
   148f2:	2200      	movs	r2, #0
   148f4:	701a      	strb	r2, [r3, #0]
		amp = P - T;                           // get amplitude of the pulse wave
   148f6:	4b2d      	ldr	r3, [pc, #180]	; (149ac <processLatestSample+0x288>)
   148f8:	681a      	ldr	r2, [r3, #0]
   148fa:	4b2b      	ldr	r3, [pc, #172]	; (149a8 <processLatestSample+0x284>)
   148fc:	681b      	ldr	r3, [r3, #0]
   148fe:	1ad2      	subs	r2, r2, r3
   14900:	4b33      	ldr	r3, [pc, #204]	; (149d0 <processLatestSample+0x2ac>)
   14902:	601a      	str	r2, [r3, #0]
		thresh = amp / 2 + T;                  // set thresh at 50% of the amplitude
   14904:	4b32      	ldr	r3, [pc, #200]	; (149d0 <processLatestSample+0x2ac>)
   14906:	681b      	ldr	r3, [r3, #0]
   14908:	2b00      	cmp	r3, #0
   1490a:	da00      	bge.n	1490e <processLatestSample+0x1ea>
   1490c:	3301      	adds	r3, #1
   1490e:	105b      	asrs	r3, r3, #1
   14910:	001a      	movs	r2, r3
   14912:	4b25      	ldr	r3, [pc, #148]	; (149a8 <processLatestSample+0x284>)
   14914:	681b      	ldr	r3, [r3, #0]
   14916:	18d2      	adds	r2, r2, r3
   14918:	4b2e      	ldr	r3, [pc, #184]	; (149d4 <processLatestSample+0x2b0>)
   1491a:	601a      	str	r2, [r3, #0]
		P = thresh;                            // reset these for next time
   1491c:	4b2d      	ldr	r3, [pc, #180]	; (149d4 <processLatestSample+0x2b0>)
   1491e:	681a      	ldr	r2, [r3, #0]
   14920:	4b22      	ldr	r3, [pc, #136]	; (149ac <processLatestSample+0x288>)
   14922:	601a      	str	r2, [r3, #0]
		T = thresh;
   14924:	4b2b      	ldr	r3, [pc, #172]	; (149d4 <processLatestSample+0x2b0>)
   14926:	681a      	ldr	r2, [r3, #0]
   14928:	4b1f      	ldr	r3, [pc, #124]	; (149a8 <processLatestSample+0x284>)
   1492a:	601a      	str	r2, [r3, #0]
		//	SerialConsoleWriteString("(Signal < THRESHOLD && Pulse == true) \r\n");

	}

	if (N > 2500) {                          // if 2.5 seconds go by without a beat
   1492c:	4b19      	ldr	r3, [pc, #100]	; (14994 <processLatestSample+0x270>)
   1492e:	681b      	ldr	r3, [r3, #0]
   14930:	4a29      	ldr	r2, [pc, #164]	; (149d8 <processLatestSample+0x2b4>)
   14932:	4293      	cmp	r3, r2
   14934:	dd24      	ble.n	14980 <processLatestSample+0x25c>
		thresh = THRESHOLD;                // set thresh default
   14936:	4a19      	ldr	r2, [pc, #100]	; (1499c <processLatestSample+0x278>)
   14938:	4b26      	ldr	r3, [pc, #152]	; (149d4 <processLatestSample+0x2b0>)
   1493a:	601a      	str	r2, [r3, #0]
		P = 512;                               // set P default
   1493c:	4b1b      	ldr	r3, [pc, #108]	; (149ac <processLatestSample+0x288>)
   1493e:	2280      	movs	r2, #128	; 0x80
   14940:	0092      	lsls	r2, r2, #2
   14942:	601a      	str	r2, [r3, #0]
		T = 512;                               // set T default
   14944:	4b18      	ldr	r3, [pc, #96]	; (149a8 <processLatestSample+0x284>)
   14946:	2280      	movs	r2, #128	; 0x80
   14948:	0092      	lsls	r2, r2, #2
   1494a:	601a      	str	r2, [r3, #0]
		lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date
   1494c:	4b0e      	ldr	r3, [pc, #56]	; (14988 <processLatestSample+0x264>)
   1494e:	681a      	ldr	r2, [r3, #0]
   14950:	4b0f      	ldr	r3, [pc, #60]	; (14990 <processLatestSample+0x26c>)
   14952:	601a      	str	r2, [r3, #0]
		firstBeat = true;                      // set these to avoid noise
   14954:	4b19      	ldr	r3, [pc, #100]	; (149bc <processLatestSample+0x298>)
   14956:	2201      	movs	r2, #1
   14958:	701a      	strb	r2, [r3, #0]
		secondBeat = false;                    // when we get the heartbeat back
   1495a:	4b16      	ldr	r3, [pc, #88]	; (149b4 <processLatestSample+0x290>)
   1495c:	2200      	movs	r2, #0
   1495e:	701a      	strb	r2, [r3, #0]
		QS = false;
   14960:	4b1a      	ldr	r3, [pc, #104]	; (149cc <processLatestSample+0x2a8>)
   14962:	2200      	movs	r2, #0
   14964:	701a      	strb	r2, [r3, #0]
		BPM = 0;
   14966:	4b18      	ldr	r3, [pc, #96]	; (149c8 <processLatestSample+0x2a4>)
   14968:	2200      	movs	r2, #0
   1496a:	601a      	str	r2, [r3, #0]
		IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
   1496c:	4b0c      	ldr	r3, [pc, #48]	; (149a0 <processLatestSample+0x27c>)
   1496e:	2296      	movs	r2, #150	; 0x96
   14970:	0092      	lsls	r2, r2, #2
   14972:	601a      	str	r2, [r3, #0]
		Pulse = false;
   14974:	4b0e      	ldr	r3, [pc, #56]	; (149b0 <processLatestSample+0x28c>)
   14976:	2200      	movs	r2, #0
   14978:	701a      	strb	r2, [r3, #0]
		amp = 100;                  // beat amplitude 1/10 of input range.
   1497a:	4b15      	ldr	r3, [pc, #84]	; (149d0 <processLatestSample+0x2ac>)
   1497c:	2264      	movs	r2, #100	; 0x64
   1497e:	601a      	str	r2, [r3, #0]
		//SerialConsoleWriteString(" (N > 2500) \r\n");
	}
   14980:	46bd      	mov	sp, r7
   14982:	b005      	add	sp, #20
   14984:	bd90      	pop	{r4, r7, pc}
   14986:	46c0      	nop			; (mov r8, r8)
   14988:	2000469c 	.word	0x2000469c
   1498c:	20004694 	.word	0x20004694
   14990:	200046b0 	.word	0x200046b0
   14994:	20004668 	.word	0x20004668
   14998:	200046c8 	.word	0x200046c8
   1499c:	00000226 	.word	0x00000226
   149a0:	200046b4 	.word	0x200046b4
   149a4:	0003249d 	.word	0x0003249d
   149a8:	200046a8 	.word	0x200046a8
   149ac:	20004718 	.word	0x20004718
   149b0:	200046a0 	.word	0x200046a0
   149b4:	200046c0 	.word	0x200046c0
   149b8:	2000466c 	.word	0x2000466c
   149bc:	200046a1 	.word	0x200046a1
   149c0:	00032389 	.word	0x00032389
   149c4:	0000ea60 	.word	0x0000ea60
   149c8:	200046bc 	.word	0x200046bc
   149cc:	20004714 	.word	0x20004714
   149d0:	200046a4 	.word	0x200046a4
   149d4:	200046cc 	.word	0x200046cc
   149d8:	000009c4 	.word	0x000009c4

000149dc <system_interrupt_enable>:
{
   149dc:	b580      	push	{r7, lr}
   149de:	b082      	sub	sp, #8
   149e0:	af00      	add	r7, sp, #0
   149e2:	0002      	movs	r2, r0
   149e4:	1dfb      	adds	r3, r7, #7
   149e6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   149e8:	4b06      	ldr	r3, [pc, #24]	; (14a04 <system_interrupt_enable+0x28>)
   149ea:	1dfa      	adds	r2, r7, #7
   149ec:	7812      	ldrb	r2, [r2, #0]
   149ee:	0011      	movs	r1, r2
   149f0:	221f      	movs	r2, #31
   149f2:	400a      	ands	r2, r1
   149f4:	2101      	movs	r1, #1
   149f6:	4091      	lsls	r1, r2
   149f8:	000a      	movs	r2, r1
   149fa:	601a      	str	r2, [r3, #0]
}
   149fc:	46c0      	nop			; (mov r8, r8)
   149fe:	46bd      	mov	sp, r7
   14a00:	b002      	add	sp, #8
   14a02:	bd80      	pop	{r7, pc}
   14a04:	e000e100 	.word	0xe000e100

00014a08 <i2c_master_is_syncing>:
{
   14a08:	b580      	push	{r7, lr}
   14a0a:	b084      	sub	sp, #16
   14a0c:	af00      	add	r7, sp, #0
   14a0e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14a10:	687b      	ldr	r3, [r7, #4]
   14a12:	681b      	ldr	r3, [r3, #0]
   14a14:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14a16:	68fb      	ldr	r3, [r7, #12]
   14a18:	69db      	ldr	r3, [r3, #28]
   14a1a:	2207      	movs	r2, #7
   14a1c:	4013      	ands	r3, r2
   14a1e:	1e5a      	subs	r2, r3, #1
   14a20:	4193      	sbcs	r3, r2
   14a22:	b2db      	uxtb	r3, r3
}
   14a24:	0018      	movs	r0, r3
   14a26:	46bd      	mov	sp, r7
   14a28:	b004      	add	sp, #16
   14a2a:	bd80      	pop	{r7, pc}

00014a2c <_i2c_master_wait_for_sync>:
{
   14a2c:	b580      	push	{r7, lr}
   14a2e:	b082      	sub	sp, #8
   14a30:	af00      	add	r7, sp, #0
   14a32:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   14a34:	46c0      	nop			; (mov r8, r8)
   14a36:	687b      	ldr	r3, [r7, #4]
   14a38:	0018      	movs	r0, r3
   14a3a:	4b04      	ldr	r3, [pc, #16]	; (14a4c <_i2c_master_wait_for_sync+0x20>)
   14a3c:	4798      	blx	r3
   14a3e:	1e03      	subs	r3, r0, #0
   14a40:	d1f9      	bne.n	14a36 <_i2c_master_wait_for_sync+0xa>
}
   14a42:	46c0      	nop			; (mov r8, r8)
   14a44:	46bd      	mov	sp, r7
   14a46:	b002      	add	sp, #8
   14a48:	bd80      	pop	{r7, pc}
   14a4a:	46c0      	nop			; (mov r8, r8)
   14a4c:	00014a09 	.word	0x00014a09

00014a50 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   14a50:	b580      	push	{r7, lr}
   14a52:	b082      	sub	sp, #8
   14a54:	af00      	add	r7, sp, #0
   14a56:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14a58:	687b      	ldr	r3, [r7, #4]
   14a5a:	2264      	movs	r2, #100	; 0x64
   14a5c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   14a5e:	687b      	ldr	r3, [r7, #4]
   14a60:	4a1b      	ldr	r2, [pc, #108]	; (14ad0 <i2c_master_get_config_defaults+0x80>)
   14a62:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14a64:	687b      	ldr	r3, [r7, #4]
   14a66:	2200      	movs	r2, #0
   14a68:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14a6a:	687b      	ldr	r3, [r7, #4]
   14a6c:	2200      	movs	r2, #0
   14a6e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14a70:	687b      	ldr	r3, [r7, #4]
   14a72:	2200      	movs	r2, #0
   14a74:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14a76:	687b      	ldr	r3, [r7, #4]
   14a78:	2280      	movs	r2, #128	; 0x80
   14a7a:	0392      	lsls	r2, r2, #14
   14a7c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   14a7e:	687b      	ldr	r3, [r7, #4]
   14a80:	2201      	movs	r2, #1
   14a82:	4252      	negs	r2, r2
   14a84:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14a86:	687b      	ldr	r3, [r7, #4]
   14a88:	2201      	movs	r2, #1
   14a8a:	4252      	negs	r2, r2
   14a8c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14a8e:	687b      	ldr	r3, [r7, #4]
   14a90:	2200      	movs	r2, #0
   14a92:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14a94:	687b      	ldr	r3, [r7, #4]
   14a96:	2200      	movs	r2, #0
   14a98:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14a9a:	687b      	ldr	r3, [r7, #4]
   14a9c:	2224      	movs	r2, #36	; 0x24
   14a9e:	2100      	movs	r1, #0
   14aa0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14aa2:	687b      	ldr	r3, [r7, #4]
   14aa4:	2200      	movs	r2, #0
   14aa6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14aa8:	687b      	ldr	r3, [r7, #4]
   14aaa:	222c      	movs	r2, #44	; 0x2c
   14aac:	2100      	movs	r1, #0
   14aae:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14ab0:	687b      	ldr	r3, [r7, #4]
   14ab2:	222d      	movs	r2, #45	; 0x2d
   14ab4:	2100      	movs	r1, #0
   14ab6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14ab8:	687b      	ldr	r3, [r7, #4]
   14aba:	222e      	movs	r2, #46	; 0x2e
   14abc:	2100      	movs	r1, #0
   14abe:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14ac0:	687b      	ldr	r3, [r7, #4]
   14ac2:	22d7      	movs	r2, #215	; 0xd7
   14ac4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14ac6:	46c0      	nop			; (mov r8, r8)
   14ac8:	46bd      	mov	sp, r7
   14aca:	b002      	add	sp, #8
   14acc:	bd80      	pop	{r7, pc}
   14ace:	46c0      	nop			; (mov r8, r8)
   14ad0:	00000d48 	.word	0x00000d48

00014ad4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14ad4:	b580      	push	{r7, lr}
   14ad6:	b084      	sub	sp, #16
   14ad8:	af00      	add	r7, sp, #0
   14ada:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14adc:	687b      	ldr	r3, [r7, #4]
   14ade:	681b      	ldr	r3, [r3, #0]
   14ae0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14ae2:	2300      	movs	r3, #0
   14ae4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14ae6:	687b      	ldr	r3, [r7, #4]
   14ae8:	0018      	movs	r0, r3
   14aea:	4b14      	ldr	r3, [pc, #80]	; (14b3c <i2c_master_enable+0x68>)
   14aec:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14aee:	68bb      	ldr	r3, [r7, #8]
   14af0:	681b      	ldr	r3, [r3, #0]
   14af2:	2202      	movs	r2, #2
   14af4:	431a      	orrs	r2, r3
   14af6:	68bb      	ldr	r3, [r7, #8]
   14af8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14afa:	687b      	ldr	r3, [r7, #4]
   14afc:	681b      	ldr	r3, [r3, #0]
   14afe:	0018      	movs	r0, r3
   14b00:	4b0f      	ldr	r3, [pc, #60]	; (14b40 <i2c_master_enable+0x6c>)
   14b02:	4798      	blx	r3
   14b04:	0003      	movs	r3, r0
   14b06:	0018      	movs	r0, r3
   14b08:	4b0e      	ldr	r3, [pc, #56]	; (14b44 <i2c_master_enable+0x70>)
   14b0a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14b0c:	e00c      	b.n	14b28 <i2c_master_enable+0x54>
		timeout_counter++;
   14b0e:	68fb      	ldr	r3, [r7, #12]
   14b10:	3301      	adds	r3, #1
   14b12:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14b14:	687b      	ldr	r3, [r7, #4]
   14b16:	88db      	ldrh	r3, [r3, #6]
   14b18:	001a      	movs	r2, r3
   14b1a:	68fb      	ldr	r3, [r7, #12]
   14b1c:	429a      	cmp	r2, r3
   14b1e:	d803      	bhi.n	14b28 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14b20:	68bb      	ldr	r3, [r7, #8]
   14b22:	2210      	movs	r2, #16
   14b24:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14b26:	e006      	b.n	14b36 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14b28:	68bb      	ldr	r3, [r7, #8]
   14b2a:	8b5b      	ldrh	r3, [r3, #26]
   14b2c:	b29b      	uxth	r3, r3
   14b2e:	001a      	movs	r2, r3
   14b30:	2310      	movs	r3, #16
   14b32:	4013      	ands	r3, r2
   14b34:	d0eb      	beq.n	14b0e <i2c_master_enable+0x3a>
		}
	}
}
   14b36:	46bd      	mov	sp, r7
   14b38:	b004      	add	sp, #16
   14b3a:	bd80      	pop	{r7, pc}
   14b3c:	00014a2d 	.word	0x00014a2d
   14b40:	00027079 	.word	0x00027079
   14b44:	000149dd 	.word	0x000149dd

00014b48 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14b48:	b580      	push	{r7, lr}
   14b4a:	b082      	sub	sp, #8
   14b4c:	af00      	add	r7, sp, #0
   14b4e:	6078      	str	r0, [r7, #4]
   14b50:	000a      	movs	r2, r1
   14b52:	1cfb      	adds	r3, r7, #3
   14b54:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14b56:	687b      	ldr	r3, [r7, #4]
   14b58:	7e5b      	ldrb	r3, [r3, #25]
   14b5a:	b2db      	uxtb	r3, r3
   14b5c:	b25a      	sxtb	r2, r3
   14b5e:	1cfb      	adds	r3, r7, #3
   14b60:	781b      	ldrb	r3, [r3, #0]
   14b62:	2101      	movs	r1, #1
   14b64:	4099      	lsls	r1, r3
   14b66:	000b      	movs	r3, r1
   14b68:	b25b      	sxtb	r3, r3
   14b6a:	4313      	orrs	r3, r2
   14b6c:	b25b      	sxtb	r3, r3
   14b6e:	b2da      	uxtb	r2, r3
   14b70:	687b      	ldr	r3, [r7, #4]
   14b72:	765a      	strb	r2, [r3, #25]
}
   14b74:	46c0      	nop			; (mov r8, r8)
   14b76:	46bd      	mov	sp, r7
   14b78:	b002      	add	sp, #8
   14b7a:	bd80      	pop	{r7, pc}

00014b7c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14b7c:	b590      	push	{r4, r7, lr}
   14b7e:	b091      	sub	sp, #68	; 0x44
   14b80:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14b82:	2300      	movs	r3, #0
   14b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14b86:	233a      	movs	r3, #58	; 0x3a
   14b88:	18fb      	adds	r3, r7, r3
   14b8a:	2200      	movs	r2, #0
   14b8c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   14b8e:	1d3b      	adds	r3, r7, #4
   14b90:	0018      	movs	r0, r3
   14b92:	4b21      	ldr	r3, [pc, #132]	; (14c18 <I2cDriverConfigureSensorBus+0x9c>)
   14b94:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14b96:	1d3b      	adds	r3, r7, #4
   14b98:	4a20      	ldr	r2, [pc, #128]	; (14c1c <I2cDriverConfigureSensorBus+0xa0>)
   14b9a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14b9c:	1d3b      	adds	r3, r7, #4
   14b9e:	4a20      	ldr	r2, [pc, #128]	; (14c20 <I2cDriverConfigureSensorBus+0xa4>)
   14ba0:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   14ba2:	1d3b      	adds	r3, r7, #4
   14ba4:	22fa      	movs	r2, #250	; 0xfa
   14ba6:	0092      	lsls	r2, r2, #2
   14ba8:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14baa:	233b      	movs	r3, #59	; 0x3b
   14bac:	18fb      	adds	r3, r7, r3
   14bae:	2203      	movs	r2, #3
   14bb0:	701a      	strb	r2, [r3, #0]
   14bb2:	e01e      	b.n	14bf2 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14bb4:	233a      	movs	r3, #58	; 0x3a
   14bb6:	18fc      	adds	r4, r7, r3
   14bb8:	1d3a      	adds	r2, r7, #4
   14bba:	491a      	ldr	r1, [pc, #104]	; (14c24 <I2cDriverConfigureSensorBus+0xa8>)
   14bbc:	4b1a      	ldr	r3, [pc, #104]	; (14c28 <I2cDriverConfigureSensorBus+0xac>)
   14bbe:	0018      	movs	r0, r3
   14bc0:	4b1a      	ldr	r3, [pc, #104]	; (14c2c <I2cDriverConfigureSensorBus+0xb0>)
   14bc2:	4798      	blx	r3
   14bc4:	0003      	movs	r3, r0
   14bc6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14bc8:	233a      	movs	r3, #58	; 0x3a
   14bca:	18fb      	adds	r3, r7, r3
   14bcc:	781b      	ldrb	r3, [r3, #0]
   14bce:	2b00      	cmp	r3, #0
   14bd0:	d104      	bne.n	14bdc <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   14bd2:	233a      	movs	r3, #58	; 0x3a
   14bd4:	18fb      	adds	r3, r7, r3
   14bd6:	781b      	ldrb	r3, [r3, #0]
   14bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14bda:	e00f      	b.n	14bfc <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14bdc:	4b12      	ldr	r3, [pc, #72]	; (14c28 <I2cDriverConfigureSensorBus+0xac>)
   14bde:	0018      	movs	r0, r3
   14be0:	4b13      	ldr	r3, [pc, #76]	; (14c30 <I2cDriverConfigureSensorBus+0xb4>)
   14be2:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14be4:	233b      	movs	r3, #59	; 0x3b
   14be6:	18fb      	adds	r3, r7, r3
   14be8:	781a      	ldrb	r2, [r3, #0]
   14bea:	233b      	movs	r3, #59	; 0x3b
   14bec:	18fb      	adds	r3, r7, r3
   14bee:	3a01      	subs	r2, #1
   14bf0:	701a      	strb	r2, [r3, #0]
   14bf2:	233b      	movs	r3, #59	; 0x3b
   14bf4:	18fb      	adds	r3, r7, r3
   14bf6:	781b      	ldrb	r3, [r3, #0]
   14bf8:	2b00      	cmp	r3, #0
   14bfa:	d1db      	bne.n	14bb4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14bfe:	2b00      	cmp	r3, #0
   14c00:	d104      	bne.n	14c0c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14c02:	4b09      	ldr	r3, [pc, #36]	; (14c28 <I2cDriverConfigureSensorBus+0xac>)
   14c04:	0018      	movs	r0, r3
   14c06:	4b0b      	ldr	r3, [pc, #44]	; (14c34 <I2cDriverConfigureSensorBus+0xb8>)
   14c08:	4798      	blx	r3
   14c0a:	e000      	b.n	14c0e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14c0c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   14c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14c10:	0018      	movs	r0, r3
   14c12:	46bd      	mov	sp, r7
   14c14:	b011      	add	sp, #68	; 0x44
   14c16:	bd90      	pop	{r4, r7, pc}
   14c18:	00014a51 	.word	0x00014a51
   14c1c:	00080002 	.word	0x00080002
   14c20:	00090002 	.word	0x00090002
   14c24:	42000800 	.word	0x42000800
   14c28:	20004720 	.word	0x20004720
   14c2c:	000174a1 	.word	0x000174a1
   14c30:	000175d5 	.word	0x000175d5
   14c34:	00014ad5 	.word	0x00014ad5

00014c38 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14c38:	b580      	push	{r7, lr}
   14c3a:	b084      	sub	sp, #16
   14c3c:	af00      	add	r7, sp, #0
   14c3e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14c40:	4b0e      	ldr	r3, [pc, #56]	; (14c7c <I2cSensorsTxComplete+0x44>)
   14c42:	2200      	movs	r2, #0
   14c44:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14c46:	4b0d      	ldr	r3, [pc, #52]	; (14c7c <I2cSensorsTxComplete+0x44>)
   14c48:	2201      	movs	r2, #1
   14c4a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14c4c:	2300      	movs	r3, #0
   14c4e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14c50:	4b0b      	ldr	r3, [pc, #44]	; (14c80 <I2cSensorsTxComplete+0x48>)
   14c52:	681b      	ldr	r3, [r3, #0]
   14c54:	220c      	movs	r2, #12
   14c56:	18ba      	adds	r2, r7, r2
   14c58:	0011      	movs	r1, r2
   14c5a:	0018      	movs	r0, r3
   14c5c:	4b09      	ldr	r3, [pc, #36]	; (14c84 <I2cSensorsTxComplete+0x4c>)
   14c5e:	4798      	blx	r3
    sensorTransmitError = false;
   14c60:	4b09      	ldr	r3, [pc, #36]	; (14c88 <I2cSensorsTxComplete+0x50>)
   14c62:	2200      	movs	r2, #0
   14c64:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14c66:	68fb      	ldr	r3, [r7, #12]
   14c68:	2b00      	cmp	r3, #0
   14c6a:	d003      	beq.n	14c74 <I2cSensorsTxComplete+0x3c>
   14c6c:	4b07      	ldr	r3, [pc, #28]	; (14c8c <I2cSensorsTxComplete+0x54>)
   14c6e:	2280      	movs	r2, #128	; 0x80
   14c70:	0552      	lsls	r2, r2, #21
   14c72:	601a      	str	r2, [r3, #0]
}
   14c74:	46c0      	nop			; (mov r8, r8)
   14c76:	46bd      	mov	sp, r7
   14c78:	b004      	add	sp, #16
   14c7a:	bd80      	pop	{r7, pc}
   14c7c:	20000464 	.word	0x20000464
   14c80:	20004748 	.word	0x20004748
   14c84:	0001a735 	.word	0x0001a735
   14c88:	20000460 	.word	0x20000460
   14c8c:	e000ed04 	.word	0xe000ed04

00014c90 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14c90:	b580      	push	{r7, lr}
   14c92:	b084      	sub	sp, #16
   14c94:	af00      	add	r7, sp, #0
   14c96:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14c98:	4b0e      	ldr	r3, [pc, #56]	; (14cd4 <I2cSensorsRxComplete+0x44>)
   14c9a:	2200      	movs	r2, #0
   14c9c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14c9e:	4b0d      	ldr	r3, [pc, #52]	; (14cd4 <I2cSensorsRxComplete+0x44>)
   14ca0:	2201      	movs	r2, #1
   14ca2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14ca4:	2300      	movs	r3, #0
   14ca6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14ca8:	4b0b      	ldr	r3, [pc, #44]	; (14cd8 <I2cSensorsRxComplete+0x48>)
   14caa:	681b      	ldr	r3, [r3, #0]
   14cac:	220c      	movs	r2, #12
   14cae:	18ba      	adds	r2, r7, r2
   14cb0:	0011      	movs	r1, r2
   14cb2:	0018      	movs	r0, r3
   14cb4:	4b09      	ldr	r3, [pc, #36]	; (14cdc <I2cSensorsRxComplete+0x4c>)
   14cb6:	4798      	blx	r3
    sensorTransmitError = false;
   14cb8:	4b09      	ldr	r3, [pc, #36]	; (14ce0 <I2cSensorsRxComplete+0x50>)
   14cba:	2200      	movs	r2, #0
   14cbc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14cbe:	68fb      	ldr	r3, [r7, #12]
   14cc0:	2b00      	cmp	r3, #0
   14cc2:	d003      	beq.n	14ccc <I2cSensorsRxComplete+0x3c>
   14cc4:	4b07      	ldr	r3, [pc, #28]	; (14ce4 <I2cSensorsRxComplete+0x54>)
   14cc6:	2280      	movs	r2, #128	; 0x80
   14cc8:	0552      	lsls	r2, r2, #21
   14cca:	601a      	str	r2, [r3, #0]
}
   14ccc:	46c0      	nop			; (mov r8, r8)
   14cce:	46bd      	mov	sp, r7
   14cd0:	b004      	add	sp, #16
   14cd2:	bd80      	pop	{r7, pc}
   14cd4:	20000464 	.word	0x20000464
   14cd8:	20004748 	.word	0x20004748
   14cdc:	0001a735 	.word	0x0001a735
   14ce0:	20000460 	.word	0x20000460
   14ce4:	e000ed04 	.word	0xe000ed04

00014ce8 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14ce8:	b580      	push	{r7, lr}
   14cea:	b084      	sub	sp, #16
   14cec:	af00      	add	r7, sp, #0
   14cee:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14cf0:	4b0e      	ldr	r3, [pc, #56]	; (14d2c <I2cSensorsError+0x44>)
   14cf2:	2200      	movs	r2, #0
   14cf4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14cf6:	4b0d      	ldr	r3, [pc, #52]	; (14d2c <I2cSensorsError+0x44>)
   14cf8:	2201      	movs	r2, #1
   14cfa:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14cfc:	2300      	movs	r3, #0
   14cfe:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14d00:	4b0b      	ldr	r3, [pc, #44]	; (14d30 <I2cSensorsError+0x48>)
   14d02:	681b      	ldr	r3, [r3, #0]
   14d04:	220c      	movs	r2, #12
   14d06:	18ba      	adds	r2, r7, r2
   14d08:	0011      	movs	r1, r2
   14d0a:	0018      	movs	r0, r3
   14d0c:	4b09      	ldr	r3, [pc, #36]	; (14d34 <I2cSensorsError+0x4c>)
   14d0e:	4798      	blx	r3
    sensorTransmitError = true;
   14d10:	4b09      	ldr	r3, [pc, #36]	; (14d38 <I2cSensorsError+0x50>)
   14d12:	2201      	movs	r2, #1
   14d14:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14d16:	68fb      	ldr	r3, [r7, #12]
   14d18:	2b00      	cmp	r3, #0
   14d1a:	d003      	beq.n	14d24 <I2cSensorsError+0x3c>
   14d1c:	4b07      	ldr	r3, [pc, #28]	; (14d3c <I2cSensorsError+0x54>)
   14d1e:	2280      	movs	r2, #128	; 0x80
   14d20:	0552      	lsls	r2, r2, #21
   14d22:	601a      	str	r2, [r3, #0]
}
   14d24:	46c0      	nop			; (mov r8, r8)
   14d26:	46bd      	mov	sp, r7
   14d28:	b004      	add	sp, #16
   14d2a:	bd80      	pop	{r7, pc}
   14d2c:	20000464 	.word	0x20000464
   14d30:	20004748 	.word	0x20004748
   14d34:	0001a735 	.word	0x0001a735
   14d38:	20000460 	.word	0x20000460
   14d3c:	e000ed04 	.word	0xe000ed04

00014d40 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14d40:	b580      	push	{r7, lr}
   14d42:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14d44:	4911      	ldr	r1, [pc, #68]	; (14d8c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14d46:	4b12      	ldr	r3, [pc, #72]	; (14d90 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d48:	2200      	movs	r2, #0
   14d4a:	0018      	movs	r0, r3
   14d4c:	4b11      	ldr	r3, [pc, #68]	; (14d94 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14d4e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14d50:	4b0f      	ldr	r3, [pc, #60]	; (14d90 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d52:	2100      	movs	r1, #0
   14d54:	0018      	movs	r0, r3
   14d56:	4b10      	ldr	r3, [pc, #64]	; (14d98 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14d58:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14d5a:	4910      	ldr	r1, [pc, #64]	; (14d9c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14d5c:	4b0c      	ldr	r3, [pc, #48]	; (14d90 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d5e:	2201      	movs	r2, #1
   14d60:	0018      	movs	r0, r3
   14d62:	4b0c      	ldr	r3, [pc, #48]	; (14d94 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14d64:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14d66:	4b0a      	ldr	r3, [pc, #40]	; (14d90 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d68:	2101      	movs	r1, #1
   14d6a:	0018      	movs	r0, r3
   14d6c:	4b0a      	ldr	r3, [pc, #40]	; (14d98 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14d6e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14d70:	490b      	ldr	r1, [pc, #44]	; (14da0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14d72:	4b07      	ldr	r3, [pc, #28]	; (14d90 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d74:	2202      	movs	r2, #2
   14d76:	0018      	movs	r0, r3
   14d78:	4b06      	ldr	r3, [pc, #24]	; (14d94 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14d7a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14d7c:	4b04      	ldr	r3, [pc, #16]	; (14d90 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d7e:	2102      	movs	r1, #2
   14d80:	0018      	movs	r0, r3
   14d82:	4b05      	ldr	r3, [pc, #20]	; (14d98 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14d84:	4798      	blx	r3
}
   14d86:	46c0      	nop			; (mov r8, r8)
   14d88:	46bd      	mov	sp, r7
   14d8a:	bd80      	pop	{r7, pc}
   14d8c:	00014c39 	.word	0x00014c39
   14d90:	20004720 	.word	0x20004720
   14d94:	00013151 	.word	0x00013151
   14d98:	00014b49 	.word	0x00014b49
   14d9c:	00014c91 	.word	0x00014c91
   14da0:	00014ce9 	.word	0x00014ce9

00014da4 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14da4:	b580      	push	{r7, lr}
   14da6:	b082      	sub	sp, #8
   14da8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14daa:	2300      	movs	r3, #0
   14dac:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14dae:	4b14      	ldr	r3, [pc, #80]	; (14e00 <I2cInitializeDriver+0x5c>)
   14db0:	4798      	blx	r3
   14db2:	0003      	movs	r3, r0
   14db4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14db6:	687b      	ldr	r3, [r7, #4]
   14db8:	2b00      	cmp	r3, #0
   14dba:	d11a      	bne.n	14df2 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14dbc:	4b11      	ldr	r3, [pc, #68]	; (14e04 <I2cInitializeDriver+0x60>)
   14dbe:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14dc0:	2001      	movs	r0, #1
   14dc2:	4b11      	ldr	r3, [pc, #68]	; (14e08 <I2cInitializeDriver+0x64>)
   14dc4:	4798      	blx	r3
   14dc6:	0002      	movs	r2, r0
   14dc8:	4b10      	ldr	r3, [pc, #64]	; (14e0c <I2cInitializeDriver+0x68>)
   14dca:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14dcc:	2203      	movs	r2, #3
   14dce:	2100      	movs	r1, #0
   14dd0:	2001      	movs	r0, #1
   14dd2:	4b0f      	ldr	r3, [pc, #60]	; (14e10 <I2cInitializeDriver+0x6c>)
   14dd4:	4798      	blx	r3
   14dd6:	0002      	movs	r2, r0
   14dd8:	4b0e      	ldr	r3, [pc, #56]	; (14e14 <I2cInitializeDriver+0x70>)
   14dda:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14ddc:	4b0b      	ldr	r3, [pc, #44]	; (14e0c <I2cInitializeDriver+0x68>)
   14dde:	681b      	ldr	r3, [r3, #0]
   14de0:	2b00      	cmp	r3, #0
   14de2:	d003      	beq.n	14dec <I2cInitializeDriver+0x48>
   14de4:	4b0b      	ldr	r3, [pc, #44]	; (14e14 <I2cInitializeDriver+0x70>)
   14de6:	681b      	ldr	r3, [r3, #0]
   14de8:	2b00      	cmp	r3, #0
   14dea:	d103      	bne.n	14df4 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14dec:	2306      	movs	r3, #6
   14dee:	607b      	str	r3, [r7, #4]
        goto exit;
   14df0:	e000      	b.n	14df4 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14df2:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14df4:	687b      	ldr	r3, [r7, #4]
}
   14df6:	0018      	movs	r0, r3
   14df8:	46bd      	mov	sp, r7
   14dfa:	b002      	add	sp, #8
   14dfc:	bd80      	pop	{r7, pc}
   14dfe:	46c0      	nop			; (mov r8, r8)
   14e00:	00014b7d 	.word	0x00014b7d
   14e04:	00014d41 	.word	0x00014d41
   14e08:	0001a06d 	.word	0x0001a06d
   14e0c:	2000471c 	.word	0x2000471c
   14e10:	00019e05 	.word	0x00019e05
   14e14:	20004748 	.word	0x20004748

00014e18 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14e18:	b590      	push	{r4, r7, lr}
   14e1a:	b085      	sub	sp, #20
   14e1c:	af00      	add	r7, sp, #0
   14e1e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14e20:	2300      	movs	r3, #0
   14e22:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14e24:	687b      	ldr	r3, [r7, #4]
   14e26:	2b00      	cmp	r3, #0
   14e28:	d003      	beq.n	14e32 <I2cWriteData+0x1a>
   14e2a:	687b      	ldr	r3, [r7, #4]
   14e2c:	685b      	ldr	r3, [r3, #4]
   14e2e:	2b00      	cmp	r3, #0
   14e30:	d103      	bne.n	14e3a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14e32:	2308      	movs	r3, #8
   14e34:	425b      	negs	r3, r3
   14e36:	60fb      	str	r3, [r7, #12]
        goto exit;
   14e38:	e01f      	b.n	14e7a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14e3a:	687b      	ldr	r3, [r7, #4]
   14e3c:	781b      	ldrb	r3, [r3, #0]
   14e3e:	b29a      	uxth	r2, r3
   14e40:	4b10      	ldr	r3, [pc, #64]	; (14e84 <I2cWriteData+0x6c>)
   14e42:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14e44:	687b      	ldr	r3, [r7, #4]
   14e46:	685a      	ldr	r2, [r3, #4]
   14e48:	4b0e      	ldr	r3, [pc, #56]	; (14e84 <I2cWriteData+0x6c>)
   14e4a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14e4c:	687b      	ldr	r3, [r7, #4]
   14e4e:	89da      	ldrh	r2, [r3, #14]
   14e50:	4b0c      	ldr	r3, [pc, #48]	; (14e84 <I2cWriteData+0x6c>)
   14e52:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14e54:	230b      	movs	r3, #11
   14e56:	18fc      	adds	r4, r7, r3
   14e58:	4a0a      	ldr	r2, [pc, #40]	; (14e84 <I2cWriteData+0x6c>)
   14e5a:	4b0b      	ldr	r3, [pc, #44]	; (14e88 <I2cWriteData+0x70>)
   14e5c:	0011      	movs	r1, r2
   14e5e:	0018      	movs	r0, r3
   14e60:	4b0a      	ldr	r3, [pc, #40]	; (14e8c <I2cWriteData+0x74>)
   14e62:	4798      	blx	r3
   14e64:	0003      	movs	r3, r0
   14e66:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14e68:	230b      	movs	r3, #11
   14e6a:	18fb      	adds	r3, r7, r3
   14e6c:	781b      	ldrb	r3, [r3, #0]
   14e6e:	2b00      	cmp	r3, #0
   14e70:	d003      	beq.n	14e7a <I2cWriteData+0x62>
        error = ERROR_IO;
   14e72:	2306      	movs	r3, #6
   14e74:	425b      	negs	r3, r3
   14e76:	60fb      	str	r3, [r7, #12]
        goto exit;
   14e78:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14e7a:	68fb      	ldr	r3, [r7, #12]
}
   14e7c:	0018      	movs	r0, r3
   14e7e:	46bd      	mov	sp, r7
   14e80:	b005      	add	sp, #20
   14e82:	bd90      	pop	{r4, r7, pc}
   14e84:	2000474c 	.word	0x2000474c
   14e88:	20004720 	.word	0x20004720
   14e8c:	000133d5 	.word	0x000133d5

00014e90 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14e90:	b590      	push	{r4, r7, lr}
   14e92:	b085      	sub	sp, #20
   14e94:	af00      	add	r7, sp, #0
   14e96:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14e98:	2300      	movs	r3, #0
   14e9a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14e9c:	687b      	ldr	r3, [r7, #4]
   14e9e:	2b00      	cmp	r3, #0
   14ea0:	d003      	beq.n	14eaa <I2cReadData+0x1a>
   14ea2:	687b      	ldr	r3, [r7, #4]
   14ea4:	685b      	ldr	r3, [r3, #4]
   14ea6:	2b00      	cmp	r3, #0
   14ea8:	d103      	bne.n	14eb2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14eaa:	2308      	movs	r3, #8
   14eac:	425b      	negs	r3, r3
   14eae:	60fb      	str	r3, [r7, #12]
        goto exit;
   14eb0:	e01f      	b.n	14ef2 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14eb2:	687b      	ldr	r3, [r7, #4]
   14eb4:	781b      	ldrb	r3, [r3, #0]
   14eb6:	b29a      	uxth	r2, r3
   14eb8:	4b10      	ldr	r3, [pc, #64]	; (14efc <I2cReadData+0x6c>)
   14eba:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14ebc:	687b      	ldr	r3, [r7, #4]
   14ebe:	689a      	ldr	r2, [r3, #8]
   14ec0:	4b0e      	ldr	r3, [pc, #56]	; (14efc <I2cReadData+0x6c>)
   14ec2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14ec4:	687b      	ldr	r3, [r7, #4]
   14ec6:	899a      	ldrh	r2, [r3, #12]
   14ec8:	4b0c      	ldr	r3, [pc, #48]	; (14efc <I2cReadData+0x6c>)
   14eca:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14ecc:	230b      	movs	r3, #11
   14ece:	18fc      	adds	r4, r7, r3
   14ed0:	4a0a      	ldr	r2, [pc, #40]	; (14efc <I2cReadData+0x6c>)
   14ed2:	4b0b      	ldr	r3, [pc, #44]	; (14f00 <I2cReadData+0x70>)
   14ed4:	0011      	movs	r1, r2
   14ed6:	0018      	movs	r0, r3
   14ed8:	4b0a      	ldr	r3, [pc, #40]	; (14f04 <I2cReadData+0x74>)
   14eda:	4798      	blx	r3
   14edc:	0003      	movs	r3, r0
   14ede:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14ee0:	230b      	movs	r3, #11
   14ee2:	18fb      	adds	r3, r7, r3
   14ee4:	781b      	ldrb	r3, [r3, #0]
   14ee6:	2b00      	cmp	r3, #0
   14ee8:	d003      	beq.n	14ef2 <I2cReadData+0x62>
        error = ERROR_IO;
   14eea:	2306      	movs	r3, #6
   14eec:	425b      	negs	r3, r3
   14eee:	60fb      	str	r3, [r7, #12]
        goto exit;
   14ef0:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14ef2:	68fb      	ldr	r3, [r7, #12]
}
   14ef4:	0018      	movs	r0, r3
   14ef6:	46bd      	mov	sp, r7
   14ef8:	b005      	add	sp, #20
   14efa:	bd90      	pop	{r4, r7, pc}
   14efc:	2000474c 	.word	0x2000474c
   14f00:	20004720 	.word	0x20004720
   14f04:	000132f1 	.word	0x000132f1

00014f08 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14f08:	b590      	push	{r4, r7, lr}
   14f0a:	b083      	sub	sp, #12
   14f0c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14f0e:	2300      	movs	r3, #0
   14f10:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14f12:	4b09      	ldr	r3, [pc, #36]	; (14f38 <I2cFreeMutex+0x30>)
   14f14:	6818      	ldr	r0, [r3, #0]
   14f16:	2300      	movs	r3, #0
   14f18:	2200      	movs	r2, #0
   14f1a:	2100      	movs	r1, #0
   14f1c:	4c07      	ldr	r4, [pc, #28]	; (14f3c <I2cFreeMutex+0x34>)
   14f1e:	47a0      	blx	r4
   14f20:	0003      	movs	r3, r0
   14f22:	2b01      	cmp	r3, #1
   14f24:	d002      	beq.n	14f2c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14f26:	2314      	movs	r3, #20
   14f28:	425b      	negs	r3, r3
   14f2a:	607b      	str	r3, [r7, #4]
    }
    return error;
   14f2c:	687b      	ldr	r3, [r7, #4]
}
   14f2e:	0018      	movs	r0, r3
   14f30:	46bd      	mov	sp, r7
   14f32:	b003      	add	sp, #12
   14f34:	bd90      	pop	{r4, r7, pc}
   14f36:	46c0      	nop			; (mov r8, r8)
   14f38:	2000471c 	.word	0x2000471c
   14f3c:	0001a0ad 	.word	0x0001a0ad

00014f40 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14f40:	b580      	push	{r7, lr}
   14f42:	b084      	sub	sp, #16
   14f44:	af00      	add	r7, sp, #0
   14f46:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14f48:	2300      	movs	r3, #0
   14f4a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14f4c:	4b08      	ldr	r3, [pc, #32]	; (14f70 <I2cGetMutex+0x30>)
   14f4e:	681b      	ldr	r3, [r3, #0]
   14f50:	687a      	ldr	r2, [r7, #4]
   14f52:	0011      	movs	r1, r2
   14f54:	0018      	movs	r0, r3
   14f56:	4b07      	ldr	r3, [pc, #28]	; (14f74 <I2cGetMutex+0x34>)
   14f58:	4798      	blx	r3
   14f5a:	0003      	movs	r3, r0
   14f5c:	2b01      	cmp	r3, #1
   14f5e:	d002      	beq.n	14f66 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14f60:	231d      	movs	r3, #29
   14f62:	425b      	negs	r3, r3
   14f64:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14f66:	68fb      	ldr	r3, [r7, #12]
}
   14f68:	0018      	movs	r0, r3
   14f6a:	46bd      	mov	sp, r7
   14f6c:	b004      	add	sp, #16
   14f6e:	bd80      	pop	{r7, pc}
   14f70:	2000471c 	.word	0x2000471c
   14f74:	0001adbd 	.word	0x0001adbd

00014f78 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14f78:	b580      	push	{r7, lr}
   14f7a:	b084      	sub	sp, #16
   14f7c:	af00      	add	r7, sp, #0
   14f7e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14f80:	2300      	movs	r3, #0
   14f82:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14f84:	4b04      	ldr	r3, [pc, #16]	; (14f98 <I2cGetSemaphoreHandle+0x20>)
   14f86:	681a      	ldr	r2, [r3, #0]
   14f88:	687b      	ldr	r3, [r7, #4]
   14f8a:	601a      	str	r2, [r3, #0]
    return error;
   14f8c:	68fb      	ldr	r3, [r7, #12]
}
   14f8e:	0018      	movs	r0, r3
   14f90:	46bd      	mov	sp, r7
   14f92:	b004      	add	sp, #16
   14f94:	bd80      	pop	{r7, pc}
   14f96:	46c0      	nop			; (mov r8, r8)
   14f98:	20004748 	.word	0x20004748

00014f9c <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14f9c:	b580      	push	{r7, lr}
   14f9e:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14fa0:	4b02      	ldr	r3, [pc, #8]	; (14fac <I2cGetTaskErrorStatus+0x10>)
   14fa2:	781b      	ldrb	r3, [r3, #0]
}
   14fa4:	0018      	movs	r0, r3
   14fa6:	46bd      	mov	sp, r7
   14fa8:	bd80      	pop	{r7, pc}
   14faa:	46c0      	nop			; (mov r8, r8)
   14fac:	20000460 	.word	0x20000460

00014fb0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14fb0:	b580      	push	{r7, lr}
   14fb2:	b082      	sub	sp, #8
   14fb4:	af00      	add	r7, sp, #0
   14fb6:	0002      	movs	r2, r0
   14fb8:	1dfb      	adds	r3, r7, #7
   14fba:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14fbc:	4b03      	ldr	r3, [pc, #12]	; (14fcc <I2cSetTaskErrorStatus+0x1c>)
   14fbe:	1dfa      	adds	r2, r7, #7
   14fc0:	7812      	ldrb	r2, [r2, #0]
   14fc2:	701a      	strb	r2, [r3, #0]
}
   14fc4:	46c0      	nop			; (mov r8, r8)
   14fc6:	46bd      	mov	sp, r7
   14fc8:	b002      	add	sp, #8
   14fca:	bd80      	pop	{r7, pc}
   14fcc:	20000460 	.word	0x20000460

00014fd0 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14fd0:	b580      	push	{r7, lr}
   14fd2:	b084      	sub	sp, #16
   14fd4:	af00      	add	r7, sp, #0
   14fd6:	6078      	str	r0, [r7, #4]
   14fd8:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14fda:	2300      	movs	r3, #0
   14fdc:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14fde:	2300      	movs	r3, #0
   14fe0:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14fe2:	2396      	movs	r3, #150	; 0x96
   14fe4:	005b      	lsls	r3, r3, #1
   14fe6:	0018      	movs	r0, r3
   14fe8:	4b28      	ldr	r3, [pc, #160]	; (1508c <I2cWriteDataWait+0xbc>)
   14fea:	4798      	blx	r3
   14fec:	0003      	movs	r3, r0
   14fee:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14ff0:	68fb      	ldr	r3, [r7, #12]
   14ff2:	2b00      	cmp	r3, #0
   14ff4:	d138      	bne.n	15068 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14ff6:	2308      	movs	r3, #8
   14ff8:	18fb      	adds	r3, r7, r3
   14ffa:	0018      	movs	r0, r3
   14ffc:	4b24      	ldr	r3, [pc, #144]	; (15090 <I2cWriteDataWait+0xc0>)
   14ffe:	4798      	blx	r3
   15000:	0003      	movs	r3, r0
   15002:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15004:	68fb      	ldr	r3, [r7, #12]
   15006:	2b00      	cmp	r3, #0
   15008:	d130      	bne.n	1506c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1500a:	687b      	ldr	r3, [r7, #4]
   1500c:	0018      	movs	r0, r3
   1500e:	4b21      	ldr	r3, [pc, #132]	; (15094 <I2cWriteDataWait+0xc4>)
   15010:	4798      	blx	r3
   15012:	0003      	movs	r3, r0
   15014:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15016:	68fb      	ldr	r3, [r7, #12]
   15018:	2b00      	cmp	r3, #0
   1501a:	d12a      	bne.n	15072 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1501c:	68bb      	ldr	r3, [r7, #8]
   1501e:	683a      	ldr	r2, [r7, #0]
   15020:	0011      	movs	r1, r2
   15022:	0018      	movs	r0, r3
   15024:	4b1c      	ldr	r3, [pc, #112]	; (15098 <I2cWriteDataWait+0xc8>)
   15026:	4798      	blx	r3
   15028:	0003      	movs	r3, r0
   1502a:	2b01      	cmp	r3, #1
   1502c:	d111      	bne.n	15052 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1502e:	4b1b      	ldr	r3, [pc, #108]	; (1509c <I2cWriteDataWait+0xcc>)
   15030:	4798      	blx	r3
   15032:	1e03      	subs	r3, r0, #0
   15034:	d011      	beq.n	1505a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   15036:	2000      	movs	r0, #0
   15038:	4b19      	ldr	r3, [pc, #100]	; (150a0 <I2cWriteDataWait+0xd0>)
   1503a:	4798      	blx	r3
            if (error != ERROR_NONE) {
   1503c:	68fb      	ldr	r3, [r7, #12]
   1503e:	2b00      	cmp	r3, #0
   15040:	d003      	beq.n	1504a <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   15042:	2321      	movs	r3, #33	; 0x21
   15044:	425b      	negs	r3, r3
   15046:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   15048:	e014      	b.n	15074 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1504a:	2303      	movs	r3, #3
   1504c:	425b      	negs	r3, r3
   1504e:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   15050:	e010      	b.n	15074 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15052:	2303      	movs	r3, #3
   15054:	425b      	negs	r3, r3
   15056:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   15058:	e00c      	b.n	15074 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1505a:	4b12      	ldr	r3, [pc, #72]	; (150a4 <I2cWriteDataWait+0xd4>)
   1505c:	4798      	blx	r3
   1505e:	0002      	movs	r2, r0
   15060:	68fb      	ldr	r3, [r7, #12]
   15062:	4313      	orrs	r3, r2
   15064:	60fb      	str	r3, [r7, #12]
   15066:	e002      	b.n	1506e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   15068:	46c0      	nop			; (mov r8, r8)
   1506a:	e000      	b.n	1506e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1506c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1506e:	68fb      	ldr	r3, [r7, #12]
   15070:	e007      	b.n	15082 <I2cWriteDataWait+0xb2>
        goto exitError0;
   15072:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   15074:	4b0b      	ldr	r3, [pc, #44]	; (150a4 <I2cWriteDataWait+0xd4>)
   15076:	4798      	blx	r3
   15078:	0002      	movs	r2, r0
   1507a:	68fb      	ldr	r3, [r7, #12]
   1507c:	4313      	orrs	r3, r2
   1507e:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   15080:	68fb      	ldr	r3, [r7, #12]
}
   15082:	0018      	movs	r0, r3
   15084:	46bd      	mov	sp, r7
   15086:	b004      	add	sp, #16
   15088:	bd80      	pop	{r7, pc}
   1508a:	46c0      	nop			; (mov r8, r8)
   1508c:	00014f41 	.word	0x00014f41
   15090:	00014f79 	.word	0x00014f79
   15094:	00014e19 	.word	0x00014e19
   15098:	0001adbd 	.word	0x0001adbd
   1509c:	00014f9d 	.word	0x00014f9d
   150a0:	00014fb1 	.word	0x00014fb1
   150a4:	00014f09 	.word	0x00014f09

000150a8 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   150a8:	b580      	push	{r7, lr}
   150aa:	b086      	sub	sp, #24
   150ac:	af00      	add	r7, sp, #0
   150ae:	60f8      	str	r0, [r7, #12]
   150b0:	60b9      	str	r1, [r7, #8]
   150b2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   150b4:	2300      	movs	r3, #0
   150b6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   150b8:	2300      	movs	r3, #0
   150ba:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   150bc:	2396      	movs	r3, #150	; 0x96
   150be:	005b      	lsls	r3, r3, #1
   150c0:	0018      	movs	r0, r3
   150c2:	4b35      	ldr	r3, [pc, #212]	; (15198 <I2cReadDataWait+0xf0>)
   150c4:	4798      	blx	r3
   150c6:	0003      	movs	r3, r0
   150c8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   150ca:	697b      	ldr	r3, [r7, #20]
   150cc:	2b00      	cmp	r3, #0
   150ce:	d155      	bne.n	1517c <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   150d0:	2310      	movs	r3, #16
   150d2:	18fb      	adds	r3, r7, r3
   150d4:	0018      	movs	r0, r3
   150d6:	4b31      	ldr	r3, [pc, #196]	; (1519c <I2cReadDataWait+0xf4>)
   150d8:	4798      	blx	r3
   150da:	0003      	movs	r3, r0
   150dc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   150de:	697b      	ldr	r3, [r7, #20]
   150e0:	2b00      	cmp	r3, #0
   150e2:	d14d      	bne.n	15180 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   150e4:	68fb      	ldr	r3, [r7, #12]
   150e6:	0018      	movs	r0, r3
   150e8:	4b2d      	ldr	r3, [pc, #180]	; (151a0 <I2cReadDataWait+0xf8>)
   150ea:	4798      	blx	r3
   150ec:	0003      	movs	r3, r0
   150ee:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   150f0:	697b      	ldr	r3, [r7, #20]
   150f2:	2b00      	cmp	r3, #0
   150f4:	d147      	bne.n	15186 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   150f6:	693b      	ldr	r3, [r7, #16]
   150f8:	687a      	ldr	r2, [r7, #4]
   150fa:	0011      	movs	r1, r2
   150fc:	0018      	movs	r0, r3
   150fe:	4b29      	ldr	r3, [pc, #164]	; (151a4 <I2cReadDataWait+0xfc>)
   15100:	4798      	blx	r3
   15102:	0003      	movs	r3, r0
   15104:	2b01      	cmp	r3, #1
   15106:	d118      	bne.n	1513a <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15108:	4b27      	ldr	r3, [pc, #156]	; (151a8 <I2cReadDataWait+0x100>)
   1510a:	4798      	blx	r3
   1510c:	1e03      	subs	r3, r0, #0
   1510e:	d006      	beq.n	1511e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   15110:	2000      	movs	r0, #0
   15112:	4b26      	ldr	r3, [pc, #152]	; (151ac <I2cReadDataWait+0x104>)
   15114:	4798      	blx	r3
            error = ERROR_ABORTED;
   15116:	2303      	movs	r3, #3
   15118:	425b      	negs	r3, r3
   1511a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1511c:	e034      	b.n	15188 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1511e:	68bb      	ldr	r3, [r7, #8]
   15120:	0018      	movs	r0, r3
   15122:	4b23      	ldr	r3, [pc, #140]	; (151b0 <I2cReadDataWait+0x108>)
   15124:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   15126:	68fb      	ldr	r3, [r7, #12]
   15128:	0018      	movs	r0, r3
   1512a:	4b22      	ldr	r3, [pc, #136]	; (151b4 <I2cReadDataWait+0x10c>)
   1512c:	4798      	blx	r3
   1512e:	0003      	movs	r3, r0
   15130:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15132:	697b      	ldr	r3, [r7, #20]
   15134:	2b00      	cmp	r3, #0
   15136:	d004      	beq.n	15142 <I2cReadDataWait+0x9a>
        goto exitError0;
   15138:	e026      	b.n	15188 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1513a:	2303      	movs	r3, #3
   1513c:	425b      	negs	r3, r3
   1513e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15140:	e022      	b.n	15188 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15142:	693b      	ldr	r3, [r7, #16]
   15144:	687a      	ldr	r2, [r7, #4]
   15146:	0011      	movs	r1, r2
   15148:	0018      	movs	r0, r3
   1514a:	4b16      	ldr	r3, [pc, #88]	; (151a4 <I2cReadDataWait+0xfc>)
   1514c:	4798      	blx	r3
   1514e:	0003      	movs	r3, r0
   15150:	2b01      	cmp	r3, #1
   15152:	d10a      	bne.n	1516a <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15154:	4b14      	ldr	r3, [pc, #80]	; (151a8 <I2cReadDataWait+0x100>)
   15156:	4798      	blx	r3
   15158:	1e03      	subs	r3, r0, #0
   1515a:	d00a      	beq.n	15172 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   1515c:	2000      	movs	r0, #0
   1515e:	4b13      	ldr	r3, [pc, #76]	; (151ac <I2cReadDataWait+0x104>)
   15160:	4798      	blx	r3
            error = ERROR_ABORTED;
   15162:	2303      	movs	r3, #3
   15164:	425b      	negs	r3, r3
   15166:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15168:	e00e      	b.n	15188 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1516a:	2303      	movs	r3, #3
   1516c:	425b      	negs	r3, r3
   1516e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15170:	e00a      	b.n	15188 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   15172:	4b11      	ldr	r3, [pc, #68]	; (151b8 <I2cReadDataWait+0x110>)
   15174:	4798      	blx	r3
   15176:	0003      	movs	r3, r0
   15178:	617b      	str	r3, [r7, #20]
   1517a:	e002      	b.n	15182 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   1517c:	46c0      	nop			; (mov r8, r8)
   1517e:	e000      	b.n	15182 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15180:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15182:	697b      	ldr	r3, [r7, #20]
   15184:	e003      	b.n	1518e <I2cReadDataWait+0xe6>
        goto exitError0;
   15186:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15188:	4b0b      	ldr	r3, [pc, #44]	; (151b8 <I2cReadDataWait+0x110>)
   1518a:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   1518c:	697b      	ldr	r3, [r7, #20]
}
   1518e:	0018      	movs	r0, r3
   15190:	46bd      	mov	sp, r7
   15192:	b006      	add	sp, #24
   15194:	bd80      	pop	{r7, pc}
   15196:	46c0      	nop			; (mov r8, r8)
   15198:	00014f41 	.word	0x00014f41
   1519c:	00014f79 	.word	0x00014f79
   151a0:	00014e19 	.word	0x00014e19
   151a4:	0001adbd 	.word	0x0001adbd
   151a8:	00014f9d 	.word	0x00014f9d
   151ac:	00014fb1 	.word	0x00014fb1
   151b0:	0001bb11 	.word	0x0001bb11
   151b4:	00014e91 	.word	0x00014e91
   151b8:	00014f09 	.word	0x00014f09

000151bc <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   151bc:	b580      	push	{r7, lr}
   151be:	b086      	sub	sp, #24
   151c0:	af00      	add	r7, sp, #0
   151c2:	60f8      	str	r0, [r7, #12]
   151c4:	60b9      	str	r1, [r7, #8]
   151c6:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   151c8:	2300      	movs	r3, #0
   151ca:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   151cc:	2300      	movs	r3, #0
   151ce:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   151d0:	2396      	movs	r3, #150	; 0x96
   151d2:	005b      	lsls	r3, r3, #1
   151d4:	0018      	movs	r0, r3
   151d6:	4b24      	ldr	r3, [pc, #144]	; (15268 <I2cPingAddressWait+0xac>)
   151d8:	4798      	blx	r3
   151da:	0003      	movs	r3, r0
   151dc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   151de:	697b      	ldr	r3, [r7, #20]
   151e0:	2b00      	cmp	r3, #0
   151e2:	d133      	bne.n	1524c <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   151e4:	2310      	movs	r3, #16
   151e6:	18fb      	adds	r3, r7, r3
   151e8:	0018      	movs	r0, r3
   151ea:	4b20      	ldr	r3, [pc, #128]	; (1526c <I2cPingAddressWait+0xb0>)
   151ec:	4798      	blx	r3
   151ee:	0003      	movs	r3, r0
   151f0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   151f2:	697b      	ldr	r3, [r7, #20]
   151f4:	2b00      	cmp	r3, #0
   151f6:	d12b      	bne.n	15250 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   151f8:	68fb      	ldr	r3, [r7, #12]
   151fa:	0018      	movs	r0, r3
   151fc:	4b1c      	ldr	r3, [pc, #112]	; (15270 <I2cPingAddressWait+0xb4>)
   151fe:	4798      	blx	r3
   15200:	0003      	movs	r3, r0
   15202:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15204:	697b      	ldr	r3, [r7, #20]
   15206:	2b00      	cmp	r3, #0
   15208:	d125      	bne.n	15256 <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1520a:	693b      	ldr	r3, [r7, #16]
   1520c:	687a      	ldr	r2, [r7, #4]
   1520e:	0011      	movs	r1, r2
   15210:	0018      	movs	r0, r3
   15212:	4b18      	ldr	r3, [pc, #96]	; (15274 <I2cPingAddressWait+0xb8>)
   15214:	4798      	blx	r3
   15216:	0003      	movs	r3, r0
   15218:	2b01      	cmp	r3, #1
   1521a:	d113      	bne.n	15244 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1521c:	4b16      	ldr	r3, [pc, #88]	; (15278 <I2cPingAddressWait+0xbc>)
   1521e:	4798      	blx	r3
   15220:	1e03      	subs	r3, r0, #0
   15222:	d006      	beq.n	15232 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   15224:	2000      	movs	r0, #0
   15226:	4b15      	ldr	r3, [pc, #84]	; (1527c <I2cPingAddressWait+0xc0>)
   15228:	4798      	blx	r3
            error = ERROR_ABORTED;
   1522a:	2303      	movs	r3, #3
   1522c:	425b      	negs	r3, r3
   1522e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15230:	e012      	b.n	15258 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   15232:	68bb      	ldr	r3, [r7, #8]
   15234:	0018      	movs	r0, r3
   15236:	4b12      	ldr	r3, [pc, #72]	; (15280 <I2cPingAddressWait+0xc4>)
   15238:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   1523a:	4b12      	ldr	r3, [pc, #72]	; (15284 <I2cPingAddressWait+0xc8>)
   1523c:	4798      	blx	r3
   1523e:	0003      	movs	r3, r0
   15240:	617b      	str	r3, [r7, #20]
   15242:	e006      	b.n	15252 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   15244:	2303      	movs	r3, #3
   15246:	425b      	negs	r3, r3
   15248:	617b      	str	r3, [r7, #20]
        goto exitError0;
   1524a:	e005      	b.n	15258 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   1524c:	46c0      	nop			; (mov r8, r8)
   1524e:	e000      	b.n	15252 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   15250:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   15252:	697b      	ldr	r3, [r7, #20]
   15254:	e003      	b.n	1525e <I2cPingAddressWait+0xa2>
        goto exitError0;
   15256:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15258:	4b0a      	ldr	r3, [pc, #40]	; (15284 <I2cPingAddressWait+0xc8>)
   1525a:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   1525c:	697b      	ldr	r3, [r7, #20]
}
   1525e:	0018      	movs	r0, r3
   15260:	46bd      	mov	sp, r7
   15262:	b006      	add	sp, #24
   15264:	bd80      	pop	{r7, pc}
   15266:	46c0      	nop			; (mov r8, r8)
   15268:	00014f41 	.word	0x00014f41
   1526c:	00014f79 	.word	0x00014f79
   15270:	00014e19 	.word	0x00014e19
   15274:	0001adbd 	.word	0x0001adbd
   15278:	00014f9d 	.word	0x00014f9d
   1527c:	00014fb1 	.word	0x00014fb1
   15280:	0001bb11 	.word	0x0001bb11
   15284:	00014f09 	.word	0x00014f09

00015288 <SHTC3Task>:
 * @return		Returns nothing.
 * @note
 */

void SHTC3Task(void *pvParameters)	
{   
   15288:	b590      	push	{r4, r7, lr}
   1528a:	b0a7      	sub	sp, #156	; 0x9c
   1528c:	af00      	add	r7, sp, #0
   1528e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[64];
	uint8_t buffer1[64];
	SerialConsoleWriteString("SHTC3");
   15290:	4b2d      	ldr	r3, [pc, #180]	; (15348 <SHTC3Task+0xc0>)
   15292:	0018      	movs	r0, r3
   15294:	4b2d      	ldr	r3, [pc, #180]	; (1534c <SHTC3Task+0xc4>)
   15296:	4798      	blx	r3
	int32_t res = SHTC3_Init();  //(buffer, 2);
   15298:	4b2d      	ldr	r3, [pc, #180]	; (15350 <SHTC3Task+0xc8>)
   1529a:	4798      	blx	r3
   1529c:	0003      	movs	r3, r0
   1529e:	2294      	movs	r2, #148	; 0x94
   152a0:	18ba      	adds	r2, r7, r2
   152a2:	6013      	str	r3, [r2, #0]
	snprintf((char *) buffer1, sizeof(buffer1), "Status of wakeup : %d\r\n", res);
   152a4:	2394      	movs	r3, #148	; 0x94
   152a6:	18fb      	adds	r3, r7, r3
   152a8:	681b      	ldr	r3, [r3, #0]
   152aa:	4a2a      	ldr	r2, [pc, #168]	; (15354 <SHTC3Task+0xcc>)
   152ac:	2110      	movs	r1, #16
   152ae:	1878      	adds	r0, r7, r1
   152b0:	2140      	movs	r1, #64	; 0x40
   152b2:	4c29      	ldr	r4, [pc, #164]	; (15358 <SHTC3Task+0xd0>)
   152b4:	47a0      	blx	r4
	SerialConsoleWriteString(buffer1);
   152b6:	2310      	movs	r3, #16
   152b8:	18fb      	adds	r3, r7, r3
   152ba:	0018      	movs	r0, r3
   152bc:	4b23      	ldr	r3, [pc, #140]	; (1534c <SHTC3Task+0xc4>)
   152be:	4798      	blx	r3
		
	int32_t temperature = 0;
   152c0:	2300      	movs	r3, #0
   152c2:	60fb      	str	r3, [r7, #12]
	
		
	while(1)
	{    int task;
		// port_pin_toggle_output_level(PIN_PA23);
		res = SHTC3_Read_Data(buffer,2);
   152c4:	2350      	movs	r3, #80	; 0x50
   152c6:	18fb      	adds	r3, r7, r3
   152c8:	2102      	movs	r1, #2
   152ca:	0018      	movs	r0, r3
   152cc:	4b23      	ldr	r3, [pc, #140]	; (1535c <SHTC3Task+0xd4>)
   152ce:	4798      	blx	r3
   152d0:	0003      	movs	r3, r0
   152d2:	2294      	movs	r2, #148	; 0x94
   152d4:	18ba      	adds	r2, r7, r2
   152d6:	6013      	str	r3, [r2, #0]
		// snprintf((char *) buffer1, sizeof(buffer1), "Status of read cmd : %d\r\n", res);
		// SerialConsoleWriteString(buffer1);
		temperature = (-45 + (((buffer[0] << 8 | buffer[1]) * 175) / 65536 ) );
   152d8:	2350      	movs	r3, #80	; 0x50
   152da:	18fb      	adds	r3, r7, r3
   152dc:	781b      	ldrb	r3, [r3, #0]
   152de:	021b      	lsls	r3, r3, #8
   152e0:	2250      	movs	r2, #80	; 0x50
   152e2:	18ba      	adds	r2, r7, r2
   152e4:	7852      	ldrb	r2, [r2, #1]
   152e6:	4313      	orrs	r3, r2
   152e8:	22af      	movs	r2, #175	; 0xaf
   152ea:	4353      	muls	r3, r2
   152ec:	2b00      	cmp	r3, #0
   152ee:	da02      	bge.n	152f6 <SHTC3Task+0x6e>
   152f0:	4a1b      	ldr	r2, [pc, #108]	; (15360 <SHTC3Task+0xd8>)
   152f2:	4694      	mov	ip, r2
   152f4:	4463      	add	r3, ip
   152f6:	141b      	asrs	r3, r3, #16
   152f8:	3b2d      	subs	r3, #45	; 0x2d
   152fa:	60fb      	str	r3, [r7, #12]
		// snprintf((char *) buffer1, sizeof(buffer1), "Temp : %d\r\n",temperature );
		// SerialConsoleWriteString(buffer1);
		if(temperature>50){
   152fc:	68fb      	ldr	r3, [r7, #12]
   152fe:	2b32      	cmp	r3, #50	; 0x32
   15300:	dd16      	ble.n	15330 <SHTC3Task+0xa8>
			 int state= DRV2605_INIT();
   15302:	4b18      	ldr	r3, [pc, #96]	; (15364 <SHTC3Task+0xdc>)
   15304:	4798      	blx	r3
   15306:	0003      	movs	r3, r0
   15308:	2290      	movs	r2, #144	; 0x90
   1530a:	18ba      	adds	r2, r7, r2
   1530c:	6013      	str	r3, [r2, #0]
			 state= DRV2605_MODE_SELECT();
   1530e:	4b16      	ldr	r3, [pc, #88]	; (15368 <SHTC3Task+0xe0>)
   15310:	4798      	blx	r3
   15312:	0003      	movs	r3, r0
   15314:	2290      	movs	r2, #144	; 0x90
   15316:	18ba      	adds	r2, r7, r2
   15318:	6013      	str	r3, [r2, #0]
			 state= DRV2605_DRIVE();
   1531a:	4b14      	ldr	r3, [pc, #80]	; (1536c <SHTC3Task+0xe4>)
   1531c:	4798      	blx	r3
   1531e:	0003      	movs	r3, r0
   15320:	2290      	movs	r2, #144	; 0x90
   15322:	18ba      	adds	r2, r7, r2
   15324:	6013      	str	r3, [r2, #0]
			 WifiAddTempDataToQueue(&temperature);
   15326:	230c      	movs	r3, #12
   15328:	18fb      	adds	r3, r7, r3
   1532a:	0018      	movs	r0, r3
   1532c:	4b10      	ldr	r3, [pc, #64]	; (15370 <SHTC3Task+0xe8>)
   1532e:	4798      	blx	r3
		}
		WifiAddTempDataToQueue(&temperature);
   15330:	230c      	movs	r3, #12
   15332:	18fb      	adds	r3, r7, r3
   15334:	0018      	movs	r0, r3
   15336:	4b0e      	ldr	r3, [pc, #56]	; (15370 <SHTC3Task+0xe8>)
   15338:	4798      	blx	r3
		vTaskDelay(1000);
   1533a:	23fa      	movs	r3, #250	; 0xfa
   1533c:	009b      	lsls	r3, r3, #2
   1533e:	0018      	movs	r0, r3
   15340:	4b0c      	ldr	r3, [pc, #48]	; (15374 <SHTC3Task+0xec>)
   15342:	4798      	blx	r3
	{    int task;
   15344:	e7be      	b.n	152c4 <SHTC3Task+0x3c>
   15346:	46c0      	nop			; (mov r8, r8)
   15348:	00035778 	.word	0x00035778
   1534c:	0001d765 	.word	0x0001d765
   15350:	00015379 	.word	0x00015379
   15354:	00035780 	.word	0x00035780
   15358:	0003429d 	.word	0x0003429d
   1535c:	000153c5 	.word	0x000153c5
   15360:	0000ffff 	.word	0x0000ffff
   15364:	00013de9 	.word	0x00013de9
   15368:	00013e69 	.word	0x00013e69
   1536c:	0001421d 	.word	0x0001421d
   15370:	00016e85 	.word	0x00016e85
   15374:	0001bb11 	.word	0x0001bb11

00015378 <SHTC3_Init>:
 * @details 	Assumes I2C is already initialized

 * @return		Returns 0 if no errors.
 * @note
 */
int SHTC3_Init(void){
   15378:	b580      	push	{r7, lr}
   1537a:	b082      	sub	sp, #8
   1537c:	af00      	add	r7, sp, #0
	
	 //Sending wakeup command to initialize
     uint8_t cmd[] = {SHTC3_WAKEUP_CMD1, SHTC3_WAKEUP_CMD2};
   1537e:	003b      	movs	r3, r7
   15380:	4a0d      	ldr	r2, [pc, #52]	; (153b8 <SHTC3_Init+0x40>)
   15382:	8812      	ldrh	r2, [r2, #0]
   15384:	801a      	strh	r2, [r3, #0]

     SHTC3Data.address = SHTC3_ADDR;
   15386:	4b0d      	ldr	r3, [pc, #52]	; (153bc <SHTC3_Init+0x44>)
   15388:	2270      	movs	r2, #112	; 0x70
   1538a:	701a      	strb	r2, [r3, #0]
     SHTC3Data.msgOut = (const uint8_t *) &cmd[0];
   1538c:	4b0b      	ldr	r3, [pc, #44]	; (153bc <SHTC3_Init+0x44>)
   1538e:	003a      	movs	r2, r7
   15390:	605a      	str	r2, [r3, #4]
     SHTC3Data.lenOut = sizeof(cmd);
   15392:	4b0a      	ldr	r3, [pc, #40]	; (153bc <SHTC3_Init+0x44>)
   15394:	2202      	movs	r2, #2
   15396:	81da      	strh	r2, [r3, #14]
     SHTC3Data.lenIn = 0;
   15398:	4b08      	ldr	r3, [pc, #32]	; (153bc <SHTC3_Init+0x44>)
   1539a:	2200      	movs	r2, #0
   1539c:	819a      	strh	r2, [r3, #12]
     int32_t error = I2cWriteDataWait(&SHTC3Data, WAIT_TIME);
   1539e:	4b07      	ldr	r3, [pc, #28]	; (153bc <SHTC3_Init+0x44>)
   153a0:	21ff      	movs	r1, #255	; 0xff
   153a2:	0018      	movs	r0, r3
   153a4:	4b06      	ldr	r3, [pc, #24]	; (153c0 <SHTC3_Init+0x48>)
   153a6:	4798      	blx	r3
   153a8:	0003      	movs	r3, r0
   153aa:	607b      	str	r3, [r7, #4]
	
     return error;
   153ac:	687b      	ldr	r3, [r7, #4]
}
   153ae:	0018      	movs	r0, r3
   153b0:	46bd      	mov	sp, r7
   153b2:	b002      	add	sp, #8
   153b4:	bd80      	pop	{r7, pc}
   153b6:	46c0      	nop			; (mov r8, r8)
   153b8:	00035798 	.word	0x00035798
   153bc:	20004758 	.word	0x20004758
   153c0:	00014fd1 	.word	0x00014fd1

000153c4 <SHTC3_Read_Data>:
 * @details 	Assumes I2C is already initialized

 * @return		Returns 0 if no errors.
 * @note
 */
int32_t SHTC3_Read_Data(uint8_t *buffer, uint8_t count){
   153c4:	b580      	push	{r7, lr}
   153c6:	b084      	sub	sp, #16
   153c8:	af00      	add	r7, sp, #0
   153ca:	6078      	str	r0, [r7, #4]
   153cc:	000a      	movs	r2, r1
   153ce:	1cfb      	adds	r3, r7, #3
   153d0:	701a      	strb	r2, [r3, #0]
	
	//Sending command to measure temperature first, then RH, in normal power mode, no clock stretching
	uint8_t cmd[] = {SHT3_TH_NM_NCS_MEASURE_CMD1, SHT3_TH_NM_NCS_MEASURE_CMD2};
   153d2:	2308      	movs	r3, #8
   153d4:	18fb      	adds	r3, r7, r3
   153d6:	4a13      	ldr	r2, [pc, #76]	; (15424 <SHTC3_Read_Data+0x60>)
   153d8:	8812      	ldrh	r2, [r2, #0]
   153da:	801a      	strh	r2, [r3, #0]
	SHTC3Data.address = SHTC3_ADDR;
   153dc:	4b12      	ldr	r3, [pc, #72]	; (15428 <SHTC3_Read_Data+0x64>)
   153de:	2270      	movs	r2, #112	; 0x70
   153e0:	701a      	strb	r2, [r3, #0]
	SHTC3Data.msgOut = (const uint8_t*) &cmd[0];
   153e2:	4b11      	ldr	r3, [pc, #68]	; (15428 <SHTC3_Read_Data+0x64>)
   153e4:	2208      	movs	r2, #8
   153e6:	18ba      	adds	r2, r7, r2
   153e8:	605a      	str	r2, [r3, #4]
	SHTC3Data.lenOut = sizeof(cmd);
   153ea:	4b0f      	ldr	r3, [pc, #60]	; (15428 <SHTC3_Read_Data+0x64>)
   153ec:	2202      	movs	r2, #2
   153ee:	81da      	strh	r2, [r3, #14]
	SHTC3Data.msgIn = buffer;
   153f0:	4b0d      	ldr	r3, [pc, #52]	; (15428 <SHTC3_Read_Data+0x64>)
   153f2:	687a      	ldr	r2, [r7, #4]
   153f4:	609a      	str	r2, [r3, #8]
	SHTC3Data.lenIn = sizeof(buffer);
   153f6:	4b0c      	ldr	r3, [pc, #48]	; (15428 <SHTC3_Read_Data+0x64>)
   153f8:	2204      	movs	r2, #4
   153fa:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&SHTC3Data, WAIT_TIME, WAIT_TIME);
   153fc:	4b0a      	ldr	r3, [pc, #40]	; (15428 <SHTC3_Read_Data+0x64>)
   153fe:	22ff      	movs	r2, #255	; 0xff
   15400:	21ff      	movs	r1, #255	; 0xff
   15402:	0018      	movs	r0, r3
   15404:	4b09      	ldr	r3, [pc, #36]	; (1542c <SHTC3_Read_Data+0x68>)
   15406:	4798      	blx	r3
   15408:	0003      	movs	r3, r0
   1540a:	60fb      	str	r3, [r7, #12]

	if (ERROR_NONE != error) {
   1540c:	68fb      	ldr	r3, [r7, #12]
   1540e:	2b00      	cmp	r3, #0
   15410:	d003      	beq.n	1541a <SHTC3_Read_Data+0x56>
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15412:	4b07      	ldr	r3, [pc, #28]	; (15430 <SHTC3_Read_Data+0x6c>)
   15414:	0018      	movs	r0, r3
   15416:	4b07      	ldr	r3, [pc, #28]	; (15434 <SHTC3_Read_Data+0x70>)
   15418:	4798      	blx	r3
	}
	return error;
   1541a:	68fb      	ldr	r3, [r7, #12]
}
   1541c:	0018      	movs	r0, r3
   1541e:	46bd      	mov	sp, r7
   15420:	b004      	add	sp, #16
   15422:	bd80      	pop	{r7, pc}
   15424:	000357c0 	.word	0x000357c0
   15428:	20004758 	.word	0x20004758
   1542c:	000150a9 	.word	0x000150a9
   15430:	0003579c 	.word	0x0003579c
   15434:	0001d765 	.word	0x0001d765

00015438 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   15438:	b590      	push	{r4, r7, lr}
   1543a:	b083      	sub	sp, #12
   1543c:	af00      	add	r7, sp, #0
   1543e:	0004      	movs	r4, r0
   15440:	0008      	movs	r0, r1
   15442:	0011      	movs	r1, r2
   15444:	1dfb      	adds	r3, r7, #7
   15446:	1c22      	adds	r2, r4, #0
   15448:	701a      	strb	r2, [r3, #0]
   1544a:	1dbb      	adds	r3, r7, #6
   1544c:	1c02      	adds	r2, r0, #0
   1544e:	701a      	strb	r2, [r3, #0]
   15450:	1d7b      	adds	r3, r7, #5
   15452:	1c0a      	adds	r2, r1, #0
   15454:	701a      	strb	r2, [r3, #0]
    red = r;
   15456:	4b08      	ldr	r3, [pc, #32]	; (15478 <UIChangeColors+0x40>)
   15458:	1dfa      	adds	r2, r7, #7
   1545a:	7812      	ldrb	r2, [r2, #0]
   1545c:	701a      	strb	r2, [r3, #0]
    green = g;
   1545e:	4b07      	ldr	r3, [pc, #28]	; (1547c <UIChangeColors+0x44>)
   15460:	1dba      	adds	r2, r7, #6
   15462:	7812      	ldrb	r2, [r2, #0]
   15464:	701a      	strb	r2, [r3, #0]
    blue = b;
   15466:	4b06      	ldr	r3, [pc, #24]	; (15480 <UIChangeColors+0x48>)
   15468:	1d7a      	adds	r2, r7, #5
   1546a:	7812      	ldrb	r2, [r2, #0]
   1546c:	701a      	strb	r2, [r3, #0]
}
   1546e:	46c0      	nop			; (mov r8, r8)
   15470:	46bd      	mov	sp, r7
   15472:	b003      	add	sp, #12
   15474:	bd90      	pop	{r4, r7, pc}
   15476:	46c0      	nop			; (mov r8, r8)
   15478:	20000478 	.word	0x20000478
   1547c:	20000014 	.word	0x20000014
   15480:	20000015 	.word	0x20000015

00015484 <system_pinmux_get_group_from_gpio_pin>:
{
   15484:	b580      	push	{r7, lr}
   15486:	b084      	sub	sp, #16
   15488:	af00      	add	r7, sp, #0
   1548a:	0002      	movs	r2, r0
   1548c:	1dfb      	adds	r3, r7, #7
   1548e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15490:	230f      	movs	r3, #15
   15492:	18fb      	adds	r3, r7, r3
   15494:	1dfa      	adds	r2, r7, #7
   15496:	7812      	ldrb	r2, [r2, #0]
   15498:	09d2      	lsrs	r2, r2, #7
   1549a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1549c:	230e      	movs	r3, #14
   1549e:	18fb      	adds	r3, r7, r3
   154a0:	1dfa      	adds	r2, r7, #7
   154a2:	7812      	ldrb	r2, [r2, #0]
   154a4:	0952      	lsrs	r2, r2, #5
   154a6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   154a8:	4b0d      	ldr	r3, [pc, #52]	; (154e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   154aa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   154ac:	230f      	movs	r3, #15
   154ae:	18fb      	adds	r3, r7, r3
   154b0:	781b      	ldrb	r3, [r3, #0]
   154b2:	2b00      	cmp	r3, #0
   154b4:	d10f      	bne.n	154d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   154b6:	230f      	movs	r3, #15
   154b8:	18fb      	adds	r3, r7, r3
   154ba:	781b      	ldrb	r3, [r3, #0]
   154bc:	009b      	lsls	r3, r3, #2
   154be:	2210      	movs	r2, #16
   154c0:	4694      	mov	ip, r2
   154c2:	44bc      	add	ip, r7
   154c4:	4463      	add	r3, ip
   154c6:	3b08      	subs	r3, #8
   154c8:	681a      	ldr	r2, [r3, #0]
   154ca:	230e      	movs	r3, #14
   154cc:	18fb      	adds	r3, r7, r3
   154ce:	781b      	ldrb	r3, [r3, #0]
   154d0:	01db      	lsls	r3, r3, #7
   154d2:	18d3      	adds	r3, r2, r3
   154d4:	e000      	b.n	154d8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   154d6:	2300      	movs	r3, #0
}
   154d8:	0018      	movs	r0, r3
   154da:	46bd      	mov	sp, r7
   154dc:	b004      	add	sp, #16
   154de:	bd80      	pop	{r7, pc}
   154e0:	41004400 	.word	0x41004400

000154e4 <port_get_group_from_gpio_pin>:
{
   154e4:	b580      	push	{r7, lr}
   154e6:	b082      	sub	sp, #8
   154e8:	af00      	add	r7, sp, #0
   154ea:	0002      	movs	r2, r0
   154ec:	1dfb      	adds	r3, r7, #7
   154ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   154f0:	1dfb      	adds	r3, r7, #7
   154f2:	781b      	ldrb	r3, [r3, #0]
   154f4:	0018      	movs	r0, r3
   154f6:	4b03      	ldr	r3, [pc, #12]	; (15504 <port_get_group_from_gpio_pin+0x20>)
   154f8:	4798      	blx	r3
   154fa:	0003      	movs	r3, r0
}
   154fc:	0018      	movs	r0, r3
   154fe:	46bd      	mov	sp, r7
   15500:	b002      	add	sp, #8
   15502:	bd80      	pop	{r7, pc}
   15504:	00015485 	.word	0x00015485

00015508 <port_pin_set_output_level>:
{
   15508:	b580      	push	{r7, lr}
   1550a:	b084      	sub	sp, #16
   1550c:	af00      	add	r7, sp, #0
   1550e:	0002      	movs	r2, r0
   15510:	1dfb      	adds	r3, r7, #7
   15512:	701a      	strb	r2, [r3, #0]
   15514:	1dbb      	adds	r3, r7, #6
   15516:	1c0a      	adds	r2, r1, #0
   15518:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1551a:	1dfb      	adds	r3, r7, #7
   1551c:	781b      	ldrb	r3, [r3, #0]
   1551e:	0018      	movs	r0, r3
   15520:	4b0d      	ldr	r3, [pc, #52]	; (15558 <port_pin_set_output_level+0x50>)
   15522:	4798      	blx	r3
   15524:	0003      	movs	r3, r0
   15526:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15528:	1dfb      	adds	r3, r7, #7
   1552a:	781b      	ldrb	r3, [r3, #0]
   1552c:	221f      	movs	r2, #31
   1552e:	4013      	ands	r3, r2
   15530:	2201      	movs	r2, #1
   15532:	409a      	lsls	r2, r3
   15534:	0013      	movs	r3, r2
   15536:	60bb      	str	r3, [r7, #8]
	if (level) {
   15538:	1dbb      	adds	r3, r7, #6
   1553a:	781b      	ldrb	r3, [r3, #0]
   1553c:	2b00      	cmp	r3, #0
   1553e:	d003      	beq.n	15548 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15540:	68fb      	ldr	r3, [r7, #12]
   15542:	68ba      	ldr	r2, [r7, #8]
   15544:	619a      	str	r2, [r3, #24]
}
   15546:	e002      	b.n	1554e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15548:	68fb      	ldr	r3, [r7, #12]
   1554a:	68ba      	ldr	r2, [r7, #8]
   1554c:	615a      	str	r2, [r3, #20]
}
   1554e:	46c0      	nop			; (mov r8, r8)
   15550:	46bd      	mov	sp, r7
   15552:	b004      	add	sp, #16
   15554:	bd80      	pop	{r7, pc}
   15556:	46c0      	nop			; (mov r8, r8)
   15558:	000154e5 	.word	0x000154e5

0001555c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   1555c:	b580      	push	{r7, lr}
   1555e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15560:	4b02      	ldr	r3, [pc, #8]	; (1556c <init_state+0x10>)
   15562:	2200      	movs	r2, #0
   15564:	701a      	strb	r2, [r3, #0]
}
   15566:	46c0      	nop			; (mov r8, r8)
   15568:	46bd      	mov	sp, r7
   1556a:	bd80      	pop	{r7, pc}
   1556c:	20000495 	.word	0x20000495

00015570 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15570:	b580      	push	{r7, lr}
   15572:	b082      	sub	sp, #8
   15574:	af00      	add	r7, sp, #0
   15576:	0002      	movs	r2, r0
   15578:	1dfb      	adds	r3, r7, #7
   1557a:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   1557c:	1dfb      	adds	r3, r7, #7
   1557e:	781b      	ldrb	r3, [r3, #0]
   15580:	b25b      	sxtb	r3, r3
   15582:	43db      	mvns	r3, r3
   15584:	b25b      	sxtb	r3, r3
   15586:	4a06      	ldr	r2, [pc, #24]	; (155a0 <clear_state+0x30>)
   15588:	7812      	ldrb	r2, [r2, #0]
   1558a:	b252      	sxtb	r2, r2
   1558c:	4013      	ands	r3, r2
   1558e:	b25b      	sxtb	r3, r3
   15590:	b2da      	uxtb	r2, r3
   15592:	4b03      	ldr	r3, [pc, #12]	; (155a0 <clear_state+0x30>)
   15594:	701a      	strb	r2, [r3, #0]
}
   15596:	46c0      	nop			; (mov r8, r8)
   15598:	46bd      	mov	sp, r7
   1559a:	b002      	add	sp, #8
   1559c:	bd80      	pop	{r7, pc}
   1559e:	46c0      	nop			; (mov r8, r8)
   155a0:	20000495 	.word	0x20000495

000155a4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   155a4:	b580      	push	{r7, lr}
   155a6:	b082      	sub	sp, #8
   155a8:	af00      	add	r7, sp, #0
   155aa:	0002      	movs	r2, r0
   155ac:	1dfb      	adds	r3, r7, #7
   155ae:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   155b0:	4b05      	ldr	r3, [pc, #20]	; (155c8 <add_state+0x24>)
   155b2:	781a      	ldrb	r2, [r3, #0]
   155b4:	1dfb      	adds	r3, r7, #7
   155b6:	781b      	ldrb	r3, [r3, #0]
   155b8:	4313      	orrs	r3, r2
   155ba:	b2da      	uxtb	r2, r3
   155bc:	4b02      	ldr	r3, [pc, #8]	; (155c8 <add_state+0x24>)
   155be:	701a      	strb	r2, [r3, #0]
}
   155c0:	46c0      	nop			; (mov r8, r8)
   155c2:	46bd      	mov	sp, r7
   155c4:	b002      	add	sp, #8
   155c6:	bd80      	pop	{r7, pc}
   155c8:	20000495 	.word	0x20000495

000155cc <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   155cc:	b580      	push	{r7, lr}
   155ce:	b082      	sub	sp, #8
   155d0:	af00      	add	r7, sp, #0
   155d2:	0002      	movs	r2, r0
   155d4:	1dfb      	adds	r3, r7, #7
   155d6:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   155d8:	4b06      	ldr	r3, [pc, #24]	; (155f4 <is_state_set+0x28>)
   155da:	781b      	ldrb	r3, [r3, #0]
   155dc:	1dfa      	adds	r2, r7, #7
   155de:	7812      	ldrb	r2, [r2, #0]
   155e0:	4013      	ands	r3, r2
   155e2:	b2db      	uxtb	r3, r3
   155e4:	1e5a      	subs	r2, r3, #1
   155e6:	4193      	sbcs	r3, r2
   155e8:	b2db      	uxtb	r3, r3
}
   155ea:	0018      	movs	r0, r3
   155ec:	46bd      	mov	sp, r7
   155ee:	b002      	add	sp, #8
   155f0:	bd80      	pop	{r7, pc}
   155f2:	46c0      	nop			; (mov r8, r8)
   155f4:	20000495 	.word	0x20000495

000155f8 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   155f8:	b590      	push	{r4, r7, lr}
   155fa:	b085      	sub	sp, #20
   155fc:	af00      	add	r7, sp, #0
   155fe:	6078      	str	r0, [r7, #4]
   15600:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   15602:	687b      	ldr	r3, [r7, #4]
   15604:	2b00      	cmp	r3, #0
   15606:	d002      	beq.n	1560e <is_exist_file+0x16>
   15608:	683b      	ldr	r3, [r7, #0]
   1560a:	2b00      	cmp	r3, #0
   1560c:	d101      	bne.n	15612 <is_exist_file+0x1a>
        return false;
   1560e:	2300      	movs	r3, #0
   15610:	e013      	b.n	1563a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   15612:	230f      	movs	r3, #15
   15614:	18fc      	adds	r4, r7, r3
   15616:	6839      	ldr	r1, [r7, #0]
   15618:	4b0a      	ldr	r3, [pc, #40]	; (15644 <is_exist_file+0x4c>)
   1561a:	2200      	movs	r2, #0
   1561c:	0018      	movs	r0, r3
   1561e:	4b0a      	ldr	r3, [pc, #40]	; (15648 <is_exist_file+0x50>)
   15620:	4798      	blx	r3
   15622:	0003      	movs	r3, r0
   15624:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   15626:	4b07      	ldr	r3, [pc, #28]	; (15644 <is_exist_file+0x4c>)
   15628:	0018      	movs	r0, r3
   1562a:	4b08      	ldr	r3, [pc, #32]	; (1564c <is_exist_file+0x54>)
   1562c:	4798      	blx	r3
    return (ret == FR_OK);
   1562e:	230f      	movs	r3, #15
   15630:	18fb      	adds	r3, r7, r3
   15632:	781b      	ldrb	r3, [r3, #0]
   15634:	425a      	negs	r2, r3
   15636:	4153      	adcs	r3, r2
   15638:	b2db      	uxtb	r3, r3
}
   1563a:	0018      	movs	r0, r3
   1563c:	46bd      	mov	sp, r7
   1563e:	b005      	add	sp, #20
   15640:	bd90      	pop	{r4, r7, pc}
   15642:	46c0      	nop			; (mov r8, r8)
   15644:	200006c8 	.word	0x200006c8
   15648:	0002d2fd 	.word	0x0002d2fd
   1564c:	0002dcfd 	.word	0x0002dcfd

00015650 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   15650:	b580      	push	{r7, lr}
   15652:	b09e      	sub	sp, #120	; 0x78
   15654:	af00      	add	r7, sp, #0
   15656:	60f8      	str	r0, [r7, #12]
   15658:	60b9      	str	r1, [r7, #8]
   1565a:	1dfb      	adds	r3, r7, #7
   1565c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1565e:	2376      	movs	r3, #118	; 0x76
   15660:	18fb      	adds	r3, r7, r3
   15662:	2201      	movs	r2, #1
   15664:	801a      	strh	r2, [r3, #0]
   15666:	2374      	movs	r3, #116	; 0x74
   15668:	18fb      	adds	r3, r7, r3
   1566a:	2200      	movs	r2, #0
   1566c:	801a      	strh	r2, [r3, #0]
   1566e:	236e      	movs	r3, #110	; 0x6e
   15670:	18fb      	adds	r3, r7, r3
   15672:	2200      	movs	r2, #0
   15674:	801a      	strh	r2, [r3, #0]
   15676:	2372      	movs	r3, #114	; 0x72
   15678:	18fb      	adds	r3, r7, r3
   1567a:	2200      	movs	r2, #0
   1567c:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1567e:	2324      	movs	r3, #36	; 0x24
   15680:	18fb      	adds	r3, r7, r3
   15682:	0018      	movs	r0, r3
   15684:	2341      	movs	r3, #65	; 0x41
   15686:	001a      	movs	r2, r3
   15688:	2100      	movs	r1, #0
   1568a:	4b92      	ldr	r3, [pc, #584]	; (158d4 <rename_to_unique+0x284>)
   1568c:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1568e:	2318      	movs	r3, #24
   15690:	18fb      	adds	r3, r7, r3
   15692:	0018      	movs	r0, r3
   15694:	2309      	movs	r3, #9
   15696:	001a      	movs	r2, r3
   15698:	2100      	movs	r1, #0
   1569a:	4b8e      	ldr	r3, [pc, #568]	; (158d4 <rename_to_unique+0x284>)
   1569c:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   1569e:	2314      	movs	r3, #20
   156a0:	18fb      	adds	r3, r7, r3
   156a2:	2200      	movs	r2, #0
   156a4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   156a6:	2300      	movs	r3, #0
   156a8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   156aa:	2371      	movs	r3, #113	; 0x71
   156ac:	18fb      	adds	r3, r7, r3
   156ae:	2200      	movs	r2, #0
   156b0:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   156b2:	68bb      	ldr	r3, [r7, #8]
   156b4:	2b00      	cmp	r3, #0
   156b6:	d101      	bne.n	156bc <rename_to_unique+0x6c>
        return false;
   156b8:	2300      	movs	r3, #0
   156ba:	e106      	b.n	158ca <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   156bc:	68ba      	ldr	r2, [r7, #8]
   156be:	68fb      	ldr	r3, [r7, #12]
   156c0:	0011      	movs	r1, r2
   156c2:	0018      	movs	r0, r3
   156c4:	4b84      	ldr	r3, [pc, #528]	; (158d8 <rename_to_unique+0x288>)
   156c6:	4798      	blx	r3
   156c8:	0003      	movs	r3, r0
   156ca:	001a      	movs	r2, r3
   156cc:	2301      	movs	r3, #1
   156ce:	4053      	eors	r3, r2
   156d0:	b2db      	uxtb	r3, r3
   156d2:	2b00      	cmp	r3, #0
   156d4:	d001      	beq.n	156da <rename_to_unique+0x8a>
        return true;
   156d6:	2301      	movs	r3, #1
   156d8:	e0f7      	b.n	158ca <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   156da:	68bb      	ldr	r3, [r7, #8]
   156dc:	0018      	movs	r0, r3
   156de:	4b7f      	ldr	r3, [pc, #508]	; (158dc <rename_to_unique+0x28c>)
   156e0:	4798      	blx	r3
   156e2:	0003      	movs	r3, r0
   156e4:	2b40      	cmp	r3, #64	; 0x40
   156e6:	d901      	bls.n	156ec <rename_to_unique+0x9c>
        return false;
   156e8:	2300      	movs	r3, #0
   156ea:	e0ee      	b.n	158ca <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   156ec:	68bb      	ldr	r3, [r7, #8]
   156ee:	212e      	movs	r1, #46	; 0x2e
   156f0:	0018      	movs	r0, r3
   156f2:	4b7b      	ldr	r3, [pc, #492]	; (158e0 <rename_to_unique+0x290>)
   156f4:	4798      	blx	r3
   156f6:	0003      	movs	r3, r0
   156f8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   156fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   156fc:	2b00      	cmp	r3, #0
   156fe:	d052      	beq.n	157a6 <rename_to_unique+0x156>
        ext_len = strlen(p);
   15700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15702:	0018      	movs	r0, r3
   15704:	4b75      	ldr	r3, [pc, #468]	; (158dc <rename_to_unique+0x28c>)
   15706:	4798      	blx	r3
   15708:	0002      	movs	r2, r0
   1570a:	236e      	movs	r3, #110	; 0x6e
   1570c:	18fb      	adds	r3, r7, r3
   1570e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   15710:	236e      	movs	r3, #110	; 0x6e
   15712:	18fb      	adds	r3, r7, r3
   15714:	881b      	ldrh	r3, [r3, #0]
   15716:	2b07      	cmp	r3, #7
   15718:	d837      	bhi.n	1578a <rename_to_unique+0x13a>
            valid_ext = true;
   1571a:	2371      	movs	r3, #113	; 0x71
   1571c:	18fb      	adds	r3, r7, r3
   1571e:	2201      	movs	r2, #1
   15720:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   15722:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15724:	2318      	movs	r3, #24
   15726:	18fb      	adds	r3, r7, r3
   15728:	0011      	movs	r1, r2
   1572a:	0018      	movs	r0, r3
   1572c:	4b6d      	ldr	r3, [pc, #436]	; (158e4 <rename_to_unique+0x294>)
   1572e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15730:	68bb      	ldr	r3, [r7, #8]
   15732:	0018      	movs	r0, r3
   15734:	4b69      	ldr	r3, [pc, #420]	; (158dc <rename_to_unique+0x28c>)
   15736:	4798      	blx	r3
   15738:	0002      	movs	r2, r0
   1573a:	236e      	movs	r3, #110	; 0x6e
   1573c:	18fb      	adds	r3, r7, r3
   1573e:	881b      	ldrh	r3, [r3, #0]
   15740:	1ad3      	subs	r3, r2, r3
   15742:	2b3c      	cmp	r3, #60	; 0x3c
   15744:	d911      	bls.n	1576a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15746:	2374      	movs	r3, #116	; 0x74
   15748:	18fb      	adds	r3, r7, r3
   1574a:	226e      	movs	r2, #110	; 0x6e
   1574c:	18ba      	adds	r2, r7, r2
   1574e:	8812      	ldrh	r2, [r2, #0]
   15750:	213c      	movs	r1, #60	; 0x3c
   15752:	1a8a      	subs	r2, r1, r2
   15754:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15756:	2374      	movs	r3, #116	; 0x74
   15758:	18fb      	adds	r3, r7, r3
   1575a:	881a      	ldrh	r2, [r3, #0]
   1575c:	68b9      	ldr	r1, [r7, #8]
   1575e:	2324      	movs	r3, #36	; 0x24
   15760:	18fb      	adds	r3, r7, r3
   15762:	0018      	movs	r0, r3
   15764:	4b60      	ldr	r3, [pc, #384]	; (158e8 <rename_to_unique+0x298>)
   15766:	4798      	blx	r3
   15768:	e02a      	b.n	157c0 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1576a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1576c:	68bb      	ldr	r3, [r7, #8]
   1576e:	1ad2      	subs	r2, r2, r3
   15770:	2374      	movs	r3, #116	; 0x74
   15772:	18fb      	adds	r3, r7, r3
   15774:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15776:	2374      	movs	r3, #116	; 0x74
   15778:	18fb      	adds	r3, r7, r3
   1577a:	881a      	ldrh	r2, [r3, #0]
   1577c:	68b9      	ldr	r1, [r7, #8]
   1577e:	2324      	movs	r3, #36	; 0x24
   15780:	18fb      	adds	r3, r7, r3
   15782:	0018      	movs	r0, r3
   15784:	4b58      	ldr	r3, [pc, #352]	; (158e8 <rename_to_unique+0x298>)
   15786:	4798      	blx	r3
   15788:	e01a      	b.n	157c0 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1578a:	2374      	movs	r3, #116	; 0x74
   1578c:	18fb      	adds	r3, r7, r3
   1578e:	223c      	movs	r2, #60	; 0x3c
   15790:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   15792:	2374      	movs	r3, #116	; 0x74
   15794:	18fb      	adds	r3, r7, r3
   15796:	881a      	ldrh	r2, [r3, #0]
   15798:	68b9      	ldr	r1, [r7, #8]
   1579a:	2324      	movs	r3, #36	; 0x24
   1579c:	18fb      	adds	r3, r7, r3
   1579e:	0018      	movs	r0, r3
   157a0:	4b51      	ldr	r3, [pc, #324]	; (158e8 <rename_to_unique+0x298>)
   157a2:	4798      	blx	r3
   157a4:	e00c      	b.n	157c0 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   157a6:	2374      	movs	r3, #116	; 0x74
   157a8:	18fb      	adds	r3, r7, r3
   157aa:	223c      	movs	r2, #60	; 0x3c
   157ac:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   157ae:	2374      	movs	r3, #116	; 0x74
   157b0:	18fb      	adds	r3, r7, r3
   157b2:	881a      	ldrh	r2, [r3, #0]
   157b4:	68b9      	ldr	r1, [r7, #8]
   157b6:	2324      	movs	r3, #36	; 0x24
   157b8:	18fb      	adds	r3, r7, r3
   157ba:	0018      	movs	r0, r3
   157bc:	4b4a      	ldr	r3, [pc, #296]	; (158e8 <rename_to_unique+0x298>)
   157be:	4798      	blx	r3
    }

    name[name_len++] = '-';
   157c0:	2374      	movs	r3, #116	; 0x74
   157c2:	18fb      	adds	r3, r7, r3
   157c4:	881b      	ldrh	r3, [r3, #0]
   157c6:	2274      	movs	r2, #116	; 0x74
   157c8:	18ba      	adds	r2, r7, r2
   157ca:	1c59      	adds	r1, r3, #1
   157cc:	8011      	strh	r1, [r2, #0]
   157ce:	001a      	movs	r2, r3
   157d0:	2324      	movs	r3, #36	; 0x24
   157d2:	18fb      	adds	r3, r7, r3
   157d4:	212d      	movs	r1, #45	; 0x2d
   157d6:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   157d8:	2376      	movs	r3, #118	; 0x76
   157da:	18fb      	adds	r3, r7, r3
   157dc:	2200      	movs	r2, #0
   157de:	801a      	strh	r2, [r3, #0]
   157e0:	2372      	movs	r3, #114	; 0x72
   157e2:	18fb      	adds	r3, r7, r3
   157e4:	2201      	movs	r2, #1
   157e6:	801a      	strh	r2, [r3, #0]
   157e8:	e010      	b.n	1580c <rename_to_unique+0x1bc>
        count *= 10;
   157ea:	2372      	movs	r3, #114	; 0x72
   157ec:	18fa      	adds	r2, r7, r3
   157ee:	2372      	movs	r3, #114	; 0x72
   157f0:	18fb      	adds	r3, r7, r3
   157f2:	881b      	ldrh	r3, [r3, #0]
   157f4:	1c19      	adds	r1, r3, #0
   157f6:	0089      	lsls	r1, r1, #2
   157f8:	18cb      	adds	r3, r1, r3
   157fa:	18db      	adds	r3, r3, r3
   157fc:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   157fe:	2376      	movs	r3, #118	; 0x76
   15800:	18fb      	adds	r3, r7, r3
   15802:	881a      	ldrh	r2, [r3, #0]
   15804:	2376      	movs	r3, #118	; 0x76
   15806:	18fb      	adds	r3, r7, r3
   15808:	3201      	adds	r2, #1
   1580a:	801a      	strh	r2, [r3, #0]
   1580c:	2376      	movs	r3, #118	; 0x76
   1580e:	18fb      	adds	r3, r7, r3
   15810:	881b      	ldrh	r3, [r3, #0]
   15812:	2b02      	cmp	r3, #2
   15814:	d9e9      	bls.n	157ea <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   15816:	2376      	movs	r3, #118	; 0x76
   15818:	18fb      	adds	r3, r7, r3
   1581a:	2201      	movs	r2, #1
   1581c:	801a      	strh	r2, [r3, #0]
   1581e:	e04b      	b.n	158b8 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   15820:	2376      	movs	r3, #118	; 0x76
   15822:	18fb      	adds	r3, r7, r3
   15824:	881a      	ldrh	r2, [r3, #0]
   15826:	4931      	ldr	r1, [pc, #196]	; (158ec <rename_to_unique+0x29c>)
   15828:	2314      	movs	r3, #20
   1582a:	18fb      	adds	r3, r7, r3
   1582c:	0018      	movs	r0, r3
   1582e:	4b30      	ldr	r3, [pc, #192]	; (158f0 <rename_to_unique+0x2a0>)
   15830:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   15832:	2374      	movs	r3, #116	; 0x74
   15834:	18fb      	adds	r3, r7, r3
   15836:	881b      	ldrh	r3, [r3, #0]
   15838:	2224      	movs	r2, #36	; 0x24
   1583a:	18ba      	adds	r2, r7, r2
   1583c:	18d3      	adds	r3, r2, r3
   1583e:	2214      	movs	r2, #20
   15840:	18b9      	adds	r1, r7, r2
   15842:	2203      	movs	r2, #3
   15844:	0018      	movs	r0, r3
   15846:	4b28      	ldr	r3, [pc, #160]	; (158e8 <rename_to_unique+0x298>)
   15848:	4798      	blx	r3
        if (valid_ext) {
   1584a:	2371      	movs	r3, #113	; 0x71
   1584c:	18fb      	adds	r3, r7, r3
   1584e:	781b      	ldrb	r3, [r3, #0]
   15850:	2b00      	cmp	r3, #0
   15852:	d00c      	beq.n	1586e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15854:	2374      	movs	r3, #116	; 0x74
   15856:	18fb      	adds	r3, r7, r3
   15858:	881b      	ldrh	r3, [r3, #0]
   1585a:	3303      	adds	r3, #3
   1585c:	2224      	movs	r2, #36	; 0x24
   1585e:	18ba      	adds	r2, r7, r2
   15860:	18d3      	adds	r3, r2, r3
   15862:	2218      	movs	r2, #24
   15864:	18ba      	adds	r2, r7, r2
   15866:	0011      	movs	r1, r2
   15868:	0018      	movs	r0, r3
   1586a:	4b1e      	ldr	r3, [pc, #120]	; (158e4 <rename_to_unique+0x294>)
   1586c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1586e:	2324      	movs	r3, #36	; 0x24
   15870:	18fa      	adds	r2, r7, r3
   15872:	68fb      	ldr	r3, [r7, #12]
   15874:	0011      	movs	r1, r2
   15876:	0018      	movs	r0, r3
   15878:	4b17      	ldr	r3, [pc, #92]	; (158d8 <rename_to_unique+0x288>)
   1587a:	4798      	blx	r3
   1587c:	0003      	movs	r3, r0
   1587e:	001a      	movs	r2, r3
   15880:	2301      	movs	r3, #1
   15882:	4053      	eors	r3, r2
   15884:	b2db      	uxtb	r3, r3
   15886:	2b00      	cmp	r3, #0
   15888:	d00f      	beq.n	158aa <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   1588a:	1dfb      	adds	r3, r7, #7
   1588c:	781a      	ldrb	r2, [r3, #0]
   1588e:	68bb      	ldr	r3, [r7, #8]
   15890:	2100      	movs	r1, #0
   15892:	0018      	movs	r0, r3
   15894:	4b0f      	ldr	r3, [pc, #60]	; (158d4 <rename_to_unique+0x284>)
   15896:	4798      	blx	r3
            strcpy(file_path_name, name);
   15898:	2324      	movs	r3, #36	; 0x24
   1589a:	18fa      	adds	r2, r7, r3
   1589c:	68bb      	ldr	r3, [r7, #8]
   1589e:	0011      	movs	r1, r2
   158a0:	0018      	movs	r0, r3
   158a2:	4b10      	ldr	r3, [pc, #64]	; (158e4 <rename_to_unique+0x294>)
   158a4:	4798      	blx	r3
            return true;
   158a6:	2301      	movs	r3, #1
   158a8:	e00f      	b.n	158ca <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   158aa:	2376      	movs	r3, #118	; 0x76
   158ac:	18fb      	adds	r3, r7, r3
   158ae:	881a      	ldrh	r2, [r3, #0]
   158b0:	2376      	movs	r3, #118	; 0x76
   158b2:	18fb      	adds	r3, r7, r3
   158b4:	3201      	adds	r2, #1
   158b6:	801a      	strh	r2, [r3, #0]
   158b8:	2376      	movs	r3, #118	; 0x76
   158ba:	18fa      	adds	r2, r7, r3
   158bc:	2372      	movs	r3, #114	; 0x72
   158be:	18fb      	adds	r3, r7, r3
   158c0:	8812      	ldrh	r2, [r2, #0]
   158c2:	881b      	ldrh	r3, [r3, #0]
   158c4:	429a      	cmp	r2, r3
   158c6:	d3ab      	bcc.n	15820 <rename_to_unique+0x1d0>
        }
    }
    return false;
   158c8:	2300      	movs	r3, #0
}
   158ca:	0018      	movs	r0, r3
   158cc:	46bd      	mov	sp, r7
   158ce:	b01e      	add	sp, #120	; 0x78
   158d0:	bd80      	pop	{r7, pc}
   158d2:	46c0      	nop			; (mov r8, r8)
   158d4:	00034043 	.word	0x00034043
   158d8:	000155f9 	.word	0x000155f9
   158dc:	000343fb 	.word	0x000343fb
   158e0:	00034455 	.word	0x00034455
   158e4:	000343af 	.word	0x000343af
   158e8:	0003442b 	.word	0x0003442b
   158ec:	000357d8 	.word	0x000357d8
   158f0:	00034301 	.word	0x00034301

000158f4 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   158f4:	b590      	push	{r4, r7, lr}
   158f6:	b083      	sub	sp, #12
   158f8:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   158fa:	2001      	movs	r0, #1
   158fc:	4b22      	ldr	r3, [pc, #136]	; (15988 <start_download+0x94>)
   158fe:	4798      	blx	r3
   15900:	0003      	movs	r3, r0
   15902:	001a      	movs	r2, r3
   15904:	2301      	movs	r3, #1
   15906:	4053      	eors	r3, r2
   15908:	b2db      	uxtb	r3, r3
   1590a:	2b00      	cmp	r3, #0
   1590c:	d005      	beq.n	1591a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1590e:	4b1f      	ldr	r3, [pc, #124]	; (1598c <start_download+0x98>)
   15910:	0019      	movs	r1, r3
   15912:	2001      	movs	r0, #1
   15914:	4b1e      	ldr	r3, [pc, #120]	; (15990 <start_download+0x9c>)
   15916:	4798      	blx	r3
        return;
   15918:	e032      	b.n	15980 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1591a:	2002      	movs	r0, #2
   1591c:	4b1a      	ldr	r3, [pc, #104]	; (15988 <start_download+0x94>)
   1591e:	4798      	blx	r3
   15920:	0003      	movs	r3, r0
   15922:	001a      	movs	r2, r3
   15924:	2301      	movs	r3, #1
   15926:	4053      	eors	r3, r2
   15928:	b2db      	uxtb	r3, r3
   1592a:	2b00      	cmp	r3, #0
   1592c:	d005      	beq.n	1593a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1592e:	4b19      	ldr	r3, [pc, #100]	; (15994 <start_download+0xa0>)
   15930:	0019      	movs	r1, r3
   15932:	2001      	movs	r0, #1
   15934:	4b16      	ldr	r3, [pc, #88]	; (15990 <start_download+0x9c>)
   15936:	4798      	blx	r3
        return;
   15938:	e022      	b.n	15980 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1593a:	2004      	movs	r0, #4
   1593c:	4b12      	ldr	r3, [pc, #72]	; (15988 <start_download+0x94>)
   1593e:	4798      	blx	r3
   15940:	1e03      	subs	r3, r0, #0
   15942:	d005      	beq.n	15950 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   15944:	4b14      	ldr	r3, [pc, #80]	; (15998 <start_download+0xa4>)
   15946:	0019      	movs	r1, r3
   15948:	2001      	movs	r0, #1
   1594a:	4b11      	ldr	r3, [pc, #68]	; (15990 <start_download+0x9c>)
   1594c:	4798      	blx	r3
        return;
   1594e:	e017      	b.n	15980 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   15950:	2008      	movs	r0, #8
   15952:	4b0d      	ldr	r3, [pc, #52]	; (15988 <start_download+0x94>)
   15954:	4798      	blx	r3
   15956:	1e03      	subs	r3, r0, #0
   15958:	d005      	beq.n	15966 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1595a:	4b10      	ldr	r3, [pc, #64]	; (1599c <start_download+0xa8>)
   1595c:	0019      	movs	r1, r3
   1595e:	2001      	movs	r0, #1
   15960:	4b0b      	ldr	r3, [pc, #44]	; (15990 <start_download+0x9c>)
   15962:	4798      	blx	r3
        return;
   15964:	e00c      	b.n	15980 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   15966:	4b0e      	ldr	r3, [pc, #56]	; (159a0 <start_download+0xac>)
   15968:	0019      	movs	r1, r3
   1596a:	2001      	movs	r0, #1
   1596c:	4b08      	ldr	r3, [pc, #32]	; (15990 <start_download+0x9c>)
   1596e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15970:	490c      	ldr	r1, [pc, #48]	; (159a4 <start_download+0xb0>)
   15972:	480d      	ldr	r0, [pc, #52]	; (159a8 <start_download+0xb4>)
   15974:	2300      	movs	r3, #0
   15976:	9300      	str	r3, [sp, #0]
   15978:	2300      	movs	r3, #0
   1597a:	2201      	movs	r2, #1
   1597c:	4c0b      	ldr	r4, [pc, #44]	; (159ac <start_download+0xb8>)
   1597e:	47a0      	blx	r4
}
   15980:	46bd      	mov	sp, r7
   15982:	b001      	add	sp, #4
   15984:	bd90      	pop	{r4, r7, pc}
   15986:	46c0      	nop			; (mov r8, r8)
   15988:	000155cd 	.word	0x000155cd
   1598c:	000357e0 	.word	0x000357e0
   15990:	0001d851 	.word	0x0001d851
   15994:	0003580c 	.word	0x0003580c
   15998:	00035838 	.word	0x00035838
   1599c:	00035864 	.word	0x00035864
   159a0:	00035890 	.word	0x00035890
   159a4:	000358bc 	.word	0x000358bc
   159a8:	200047c0 	.word	0x200047c0
   159ac:	00030951 	.word	0x00030951

000159b0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   159b0:	b5b0      	push	{r4, r5, r7, lr}
   159b2:	b086      	sub	sp, #24
   159b4:	af00      	add	r7, sp, #0
   159b6:	6078      	str	r0, [r7, #4]
   159b8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   159ba:	687b      	ldr	r3, [r7, #4]
   159bc:	2b00      	cmp	r3, #0
   159be:	d002      	beq.n	159c6 <store_file_packet+0x16>
   159c0:	683b      	ldr	r3, [r7, #0]
   159c2:	2b00      	cmp	r3, #0
   159c4:	d105      	bne.n	159d2 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   159c6:	4b58      	ldr	r3, [pc, #352]	; (15b28 <store_file_packet+0x178>)
   159c8:	0019      	movs	r1, r3
   159ca:	2001      	movs	r0, #1
   159cc:	4b57      	ldr	r3, [pc, #348]	; (15b2c <store_file_packet+0x17c>)
   159ce:	4798      	blx	r3
        return;
   159d0:	e0a6      	b.n	15b20 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   159d2:	2008      	movs	r0, #8
   159d4:	4b56      	ldr	r3, [pc, #344]	; (15b30 <store_file_packet+0x180>)
   159d6:	4798      	blx	r3
   159d8:	0003      	movs	r3, r0
   159da:	001a      	movs	r2, r3
   159dc:	2301      	movs	r3, #1
   159de:	4053      	eors	r3, r2
   159e0:	b2db      	uxtb	r3, r3
   159e2:	2b00      	cmp	r3, #0
   159e4:	d055      	beq.n	15a92 <store_file_packet+0xe2>
        char *cp = NULL;
   159e6:	2300      	movs	r3, #0
   159e8:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   159ea:	4b52      	ldr	r3, [pc, #328]	; (15b34 <store_file_packet+0x184>)
   159ec:	2230      	movs	r2, #48	; 0x30
   159ee:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   159f0:	4b50      	ldr	r3, [pc, #320]	; (15b34 <store_file_packet+0x184>)
   159f2:	223a      	movs	r2, #58	; 0x3a
   159f4:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   159f6:	4b50      	ldr	r3, [pc, #320]	; (15b38 <store_file_packet+0x188>)
   159f8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   159fa:	e002      	b.n	15a02 <store_file_packet+0x52>
            cp--;
   159fc:	697b      	ldr	r3, [r7, #20]
   159fe:	3b01      	subs	r3, #1
   15a00:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15a02:	697b      	ldr	r3, [r7, #20]
   15a04:	781b      	ldrb	r3, [r3, #0]
   15a06:	2b2f      	cmp	r3, #47	; 0x2f
   15a08:	d1f8      	bne.n	159fc <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   15a0a:	697b      	ldr	r3, [r7, #20]
   15a0c:	0018      	movs	r0, r3
   15a0e:	4b4b      	ldr	r3, [pc, #300]	; (15b3c <store_file_packet+0x18c>)
   15a10:	4798      	blx	r3
   15a12:	0003      	movs	r3, r0
   15a14:	2b01      	cmp	r3, #1
   15a16:	d924      	bls.n	15a62 <store_file_packet+0xb2>
            cp++;
   15a18:	697b      	ldr	r3, [r7, #20]
   15a1a:	3301      	adds	r3, #1
   15a1c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   15a1e:	697a      	ldr	r2, [r7, #20]
   15a20:	4b47      	ldr	r3, [pc, #284]	; (15b40 <store_file_packet+0x190>)
   15a22:	0011      	movs	r1, r2
   15a24:	0018      	movs	r0, r3
   15a26:	4b47      	ldr	r3, [pc, #284]	; (15b44 <store_file_packet+0x194>)
   15a28:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15a2a:	4942      	ldr	r1, [pc, #264]	; (15b34 <store_file_packet+0x184>)
   15a2c:	4b46      	ldr	r3, [pc, #280]	; (15b48 <store_file_packet+0x198>)
   15a2e:	2240      	movs	r2, #64	; 0x40
   15a30:	0018      	movs	r0, r3
   15a32:	4b46      	ldr	r3, [pc, #280]	; (15b4c <store_file_packet+0x19c>)
   15a34:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   15a36:	4a3f      	ldr	r2, [pc, #252]	; (15b34 <store_file_packet+0x184>)
   15a38:	4b45      	ldr	r3, [pc, #276]	; (15b50 <store_file_packet+0x1a0>)
   15a3a:	0019      	movs	r1, r3
   15a3c:	2001      	movs	r0, #1
   15a3e:	4b3b      	ldr	r3, [pc, #236]	; (15b2c <store_file_packet+0x17c>)
   15a40:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15a42:	2313      	movs	r3, #19
   15a44:	18fc      	adds	r4, r7, r3
   15a46:	493b      	ldr	r1, [pc, #236]	; (15b34 <store_file_packet+0x184>)
   15a48:	4b3f      	ldr	r3, [pc, #252]	; (15b48 <store_file_packet+0x198>)
   15a4a:	220a      	movs	r2, #10
   15a4c:	0018      	movs	r0, r3
   15a4e:	4b41      	ldr	r3, [pc, #260]	; (15b54 <store_file_packet+0x1a4>)
   15a50:	4798      	blx	r3
   15a52:	0003      	movs	r3, r0
   15a54:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15a56:	2313      	movs	r3, #19
   15a58:	18fb      	adds	r3, r7, r3
   15a5a:	781b      	ldrb	r3, [r3, #0]
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	d012      	beq.n	15a86 <store_file_packet+0xd6>
   15a60:	e008      	b.n	15a74 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   15a62:	4b3d      	ldr	r3, [pc, #244]	; (15b58 <store_file_packet+0x1a8>)
   15a64:	0019      	movs	r1, r3
   15a66:	2001      	movs	r0, #1
   15a68:	4b30      	ldr	r3, [pc, #192]	; (15b2c <store_file_packet+0x17c>)
   15a6a:	4798      	blx	r3
            add_state(CANCELED);
   15a6c:	2020      	movs	r0, #32
   15a6e:	4b3b      	ldr	r3, [pc, #236]	; (15b5c <store_file_packet+0x1ac>)
   15a70:	4798      	blx	r3
            return;
   15a72:	e055      	b.n	15b20 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   15a74:	2313      	movs	r3, #19
   15a76:	18fb      	adds	r3, r7, r3
   15a78:	781a      	ldrb	r2, [r3, #0]
   15a7a:	4b39      	ldr	r3, [pc, #228]	; (15b60 <store_file_packet+0x1b0>)
   15a7c:	0019      	movs	r1, r3
   15a7e:	2001      	movs	r0, #1
   15a80:	4b2a      	ldr	r3, [pc, #168]	; (15b2c <store_file_packet+0x17c>)
   15a82:	4798      	blx	r3
            return;
   15a84:	e04c      	b.n	15b20 <store_file_packet+0x170>
        }

        received_file_size = 0;
   15a86:	4b37      	ldr	r3, [pc, #220]	; (15b64 <store_file_packet+0x1b4>)
   15a88:	2200      	movs	r2, #0
   15a8a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   15a8c:	2008      	movs	r0, #8
   15a8e:	4b33      	ldr	r3, [pc, #204]	; (15b5c <store_file_packet+0x1ac>)
   15a90:	4798      	blx	r3
    }

    if (data != NULL) {
   15a92:	687b      	ldr	r3, [r7, #4]
   15a94:	2b00      	cmp	r3, #0
   15a96:	d043      	beq.n	15b20 <store_file_packet+0x170>
        UINT wsize = 0;
   15a98:	2300      	movs	r3, #0
   15a9a:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   15a9c:	2313      	movs	r3, #19
   15a9e:	18fc      	adds	r4, r7, r3
   15aa0:	230c      	movs	r3, #12
   15aa2:	18fb      	adds	r3, r7, r3
   15aa4:	683a      	ldr	r2, [r7, #0]
   15aa6:	6879      	ldr	r1, [r7, #4]
   15aa8:	4827      	ldr	r0, [pc, #156]	; (15b48 <store_file_packet+0x198>)
   15aaa:	4d2f      	ldr	r5, [pc, #188]	; (15b68 <store_file_packet+0x1b8>)
   15aac:	47a8      	blx	r5
   15aae:	0003      	movs	r3, r0
   15ab0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15ab2:	2313      	movs	r3, #19
   15ab4:	18fb      	adds	r3, r7, r3
   15ab6:	781b      	ldrb	r3, [r3, #0]
   15ab8:	2b00      	cmp	r3, #0
   15aba:	d00c      	beq.n	15ad6 <store_file_packet+0x126>
            f_close(&file_object);
   15abc:	4b22      	ldr	r3, [pc, #136]	; (15b48 <store_file_packet+0x198>)
   15abe:	0018      	movs	r0, r3
   15ac0:	4b2a      	ldr	r3, [pc, #168]	; (15b6c <store_file_packet+0x1bc>)
   15ac2:	4798      	blx	r3
            add_state(CANCELED);
   15ac4:	2020      	movs	r0, #32
   15ac6:	4b25      	ldr	r3, [pc, #148]	; (15b5c <store_file_packet+0x1ac>)
   15ac8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   15aca:	4b29      	ldr	r3, [pc, #164]	; (15b70 <store_file_packet+0x1c0>)
   15acc:	0019      	movs	r1, r3
   15ace:	2001      	movs	r0, #1
   15ad0:	4b16      	ldr	r3, [pc, #88]	; (15b2c <store_file_packet+0x17c>)
   15ad2:	4798      	blx	r3
            return;
   15ad4:	e024      	b.n	15b20 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   15ad6:	4b23      	ldr	r3, [pc, #140]	; (15b64 <store_file_packet+0x1b4>)
   15ad8:	681a      	ldr	r2, [r3, #0]
   15ada:	68fb      	ldr	r3, [r7, #12]
   15adc:	18d2      	adds	r2, r2, r3
   15ade:	4b21      	ldr	r3, [pc, #132]	; (15b64 <store_file_packet+0x1b4>)
   15ae0:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   15ae2:	4b20      	ldr	r3, [pc, #128]	; (15b64 <store_file_packet+0x1b4>)
   15ae4:	681a      	ldr	r2, [r3, #0]
   15ae6:	4b23      	ldr	r3, [pc, #140]	; (15b74 <store_file_packet+0x1c4>)
   15ae8:	681b      	ldr	r3, [r3, #0]
   15aea:	4923      	ldr	r1, [pc, #140]	; (15b78 <store_file_packet+0x1c8>)
   15aec:	2001      	movs	r0, #1
   15aee:	4c0f      	ldr	r4, [pc, #60]	; (15b2c <store_file_packet+0x17c>)
   15af0:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   15af2:	4b1c      	ldr	r3, [pc, #112]	; (15b64 <store_file_packet+0x1b4>)
   15af4:	681a      	ldr	r2, [r3, #0]
   15af6:	4b1f      	ldr	r3, [pc, #124]	; (15b74 <store_file_packet+0x1c4>)
   15af8:	681b      	ldr	r3, [r3, #0]
   15afa:	429a      	cmp	r2, r3
   15afc:	d310      	bcc.n	15b20 <store_file_packet+0x170>
            f_close(&file_object);
   15afe:	4b12      	ldr	r3, [pc, #72]	; (15b48 <store_file_packet+0x198>)
   15b00:	0018      	movs	r0, r3
   15b02:	4b1a      	ldr	r3, [pc, #104]	; (15b6c <store_file_packet+0x1bc>)
   15b04:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   15b06:	4b1d      	ldr	r3, [pc, #116]	; (15b7c <store_file_packet+0x1cc>)
   15b08:	0019      	movs	r1, r3
   15b0a:	2001      	movs	r0, #1
   15b0c:	4b07      	ldr	r3, [pc, #28]	; (15b2c <store_file_packet+0x17c>)
   15b0e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   15b10:	2100      	movs	r1, #0
   15b12:	2017      	movs	r0, #23
   15b14:	4b1a      	ldr	r3, [pc, #104]	; (15b80 <store_file_packet+0x1d0>)
   15b16:	4798      	blx	r3
            add_state(COMPLETED);
   15b18:	2010      	movs	r0, #16
   15b1a:	4b10      	ldr	r3, [pc, #64]	; (15b5c <store_file_packet+0x1ac>)
   15b1c:	4798      	blx	r3
            return;
   15b1e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   15b20:	46bd      	mov	sp, r7
   15b22:	b006      	add	sp, #24
   15b24:	bdb0      	pop	{r4, r5, r7, pc}
   15b26:	46c0      	nop			; (mov r8, r8)
   15b28:	000358e4 	.word	0x000358e4
   15b2c:	0001d851 	.word	0x0001d851
   15b30:	000155cd 	.word	0x000155cd
   15b34:	2000009c 	.word	0x2000009c
   15b38:	000358e2 	.word	0x000358e2
   15b3c:	000343fb 	.word	0x000343fb
   15b40:	2000009e 	.word	0x2000009e
   15b44:	000343af 	.word	0x000343af
   15b48:	200006c8 	.word	0x200006c8
   15b4c:	00015651 	.word	0x00015651
   15b50:	00035948 	.word	0x00035948
   15b54:	0002d2fd 	.word	0x0002d2fd
   15b58:	00035908 	.word	0x00035908
   15b5c:	000155a5 	.word	0x000155a5
   15b60:	00035970 	.word	0x00035970
   15b64:	200006f0 	.word	0x200006f0
   15b68:	0002d82d 	.word	0x0002d82d
   15b6c:	0002dcfd 	.word	0x0002dcfd
   15b70:	000359a4 	.word	0x000359a4
   15b74:	200006ec 	.word	0x200006ec
   15b78:	000359e0 	.word	0x000359e0
   15b7c:	00035a14 	.word	0x00035a14
   15b80:	00015509 	.word	0x00015509

00015b84 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   15b84:	b590      	push	{r4, r7, lr}
   15b86:	b085      	sub	sp, #20
   15b88:	af00      	add	r7, sp, #0
   15b8a:	60f8      	str	r0, [r7, #12]
   15b8c:	60b9      	str	r1, [r7, #8]
   15b8e:	607a      	str	r2, [r7, #4]
    switch (type) {
   15b90:	68bb      	ldr	r3, [r7, #8]
   15b92:	2b04      	cmp	r3, #4
   15b94:	d900      	bls.n	15b98 <http_client_callback+0x14>
   15b96:	e077      	b.n	15c88 <http_client_callback+0x104>
   15b98:	68bb      	ldr	r3, [r7, #8]
   15b9a:	009a      	lsls	r2, r3, #2
   15b9c:	4b3c      	ldr	r3, [pc, #240]	; (15c90 <http_client_callback+0x10c>)
   15b9e:	18d3      	adds	r3, r2, r3
   15ba0:	681b      	ldr	r3, [r3, #0]
   15ba2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   15ba4:	4b3b      	ldr	r3, [pc, #236]	; (15c94 <http_client_callback+0x110>)
   15ba6:	0019      	movs	r1, r3
   15ba8:	2001      	movs	r0, #1
   15baa:	4b3b      	ldr	r3, [pc, #236]	; (15c98 <http_client_callback+0x114>)
   15bac:	4798      	blx	r3
            break;
   15bae:	e06b      	b.n	15c88 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   15bb0:	4b3a      	ldr	r3, [pc, #232]	; (15c9c <http_client_callback+0x118>)
   15bb2:	0019      	movs	r1, r3
   15bb4:	2001      	movs	r0, #1
   15bb6:	4b38      	ldr	r3, [pc, #224]	; (15c98 <http_client_callback+0x114>)
   15bb8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   15bba:	2004      	movs	r0, #4
   15bbc:	4b38      	ldr	r3, [pc, #224]	; (15ca0 <http_client_callback+0x11c>)
   15bbe:	4798      	blx	r3
            break;
   15bc0:	e062      	b.n	15c88 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   15bc2:	687b      	ldr	r3, [r7, #4]
   15bc4:	881b      	ldrh	r3, [r3, #0]
   15bc6:	001a      	movs	r2, r3
   15bc8:	687b      	ldr	r3, [r7, #4]
   15bca:	685b      	ldr	r3, [r3, #4]
   15bcc:	4935      	ldr	r1, [pc, #212]	; (15ca4 <http_client_callback+0x120>)
   15bce:	2001      	movs	r0, #1
   15bd0:	4c31      	ldr	r4, [pc, #196]	; (15c98 <http_client_callback+0x114>)
   15bd2:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   15bd4:	687b      	ldr	r3, [r7, #4]
   15bd6:	881b      	ldrh	r3, [r3, #0]
   15bd8:	2bc8      	cmp	r3, #200	; 0xc8
   15bda:	d10d      	bne.n	15bf8 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   15bdc:	687b      	ldr	r3, [r7, #4]
   15bde:	685a      	ldr	r2, [r3, #4]
   15be0:	4b31      	ldr	r3, [pc, #196]	; (15ca8 <http_client_callback+0x124>)
   15be2:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   15be4:	4b31      	ldr	r3, [pc, #196]	; (15cac <http_client_callback+0x128>)
   15be6:	2200      	movs	r2, #0
   15be8:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   15bea:	687b      	ldr	r3, [r7, #4]
   15bec:	685a      	ldr	r2, [r3, #4]
   15bee:	2380      	movs	r3, #128	; 0x80
   15bf0:	009b      	lsls	r3, r3, #2
   15bf2:	429a      	cmp	r2, r3
   15bf4:	d843      	bhi.n	15c7e <http_client_callback+0xfa>
   15bf6:	e003      	b.n	15c00 <http_client_callback+0x7c>
                add_state(CANCELED);
   15bf8:	2020      	movs	r0, #32
   15bfa:	4b29      	ldr	r3, [pc, #164]	; (15ca0 <http_client_callback+0x11c>)
   15bfc:	4798      	blx	r3
                return;
   15bfe:	e043      	b.n	15c88 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   15c00:	687b      	ldr	r3, [r7, #4]
   15c02:	689a      	ldr	r2, [r3, #8]
   15c04:	687b      	ldr	r3, [r7, #4]
   15c06:	685b      	ldr	r3, [r3, #4]
   15c08:	0019      	movs	r1, r3
   15c0a:	0010      	movs	r0, r2
   15c0c:	4b28      	ldr	r3, [pc, #160]	; (15cb0 <http_client_callback+0x12c>)
   15c0e:	4798      	blx	r3
                add_state(COMPLETED);
   15c10:	2010      	movs	r0, #16
   15c12:	4b23      	ldr	r3, [pc, #140]	; (15ca0 <http_client_callback+0x11c>)
   15c14:	4798      	blx	r3
            }
            break;
   15c16:	e032      	b.n	15c7e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   15c18:	687b      	ldr	r3, [r7, #4]
   15c1a:	685a      	ldr	r2, [r3, #4]
   15c1c:	687b      	ldr	r3, [r7, #4]
   15c1e:	681b      	ldr	r3, [r3, #0]
   15c20:	0019      	movs	r1, r3
   15c22:	0010      	movs	r0, r2
   15c24:	4b22      	ldr	r3, [pc, #136]	; (15cb0 <http_client_callback+0x12c>)
   15c26:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   15c28:	687b      	ldr	r3, [r7, #4]
   15c2a:	7a1b      	ldrb	r3, [r3, #8]
   15c2c:	2b00      	cmp	r3, #0
   15c2e:	d028      	beq.n	15c82 <http_client_callback+0xfe>
                add_state(COMPLETED);
   15c30:	2010      	movs	r0, #16
   15c32:	4b1b      	ldr	r3, [pc, #108]	; (15ca0 <http_client_callback+0x11c>)
   15c34:	4798      	blx	r3
            }

            break;
   15c36:	e024      	b.n	15c82 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   15c38:	687b      	ldr	r3, [r7, #4]
   15c3a:	681a      	ldr	r2, [r3, #0]
   15c3c:	4b1d      	ldr	r3, [pc, #116]	; (15cb4 <http_client_callback+0x130>)
   15c3e:	0019      	movs	r1, r3
   15c40:	2001      	movs	r0, #1
   15c42:	4b15      	ldr	r3, [pc, #84]	; (15c98 <http_client_callback+0x114>)
   15c44:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   15c46:	687b      	ldr	r3, [r7, #4]
   15c48:	681b      	ldr	r3, [r3, #0]
   15c4a:	330b      	adds	r3, #11
   15c4c:	d11b      	bne.n	15c86 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   15c4e:	2008      	movs	r0, #8
   15c50:	4b19      	ldr	r3, [pc, #100]	; (15cb8 <http_client_callback+0x134>)
   15c52:	4798      	blx	r3
   15c54:	1e03      	subs	r3, r0, #0
   15c56:	d006      	beq.n	15c66 <http_client_callback+0xe2>
                    f_close(&file_object);
   15c58:	4b18      	ldr	r3, [pc, #96]	; (15cbc <http_client_callback+0x138>)
   15c5a:	0018      	movs	r0, r3
   15c5c:	4b18      	ldr	r3, [pc, #96]	; (15cc0 <http_client_callback+0x13c>)
   15c5e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   15c60:	2008      	movs	r0, #8
   15c62:	4b18      	ldr	r3, [pc, #96]	; (15cc4 <http_client_callback+0x140>)
   15c64:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   15c66:	2004      	movs	r0, #4
   15c68:	4b13      	ldr	r3, [pc, #76]	; (15cb8 <http_client_callback+0x134>)
   15c6a:	4798      	blx	r3
   15c6c:	1e03      	subs	r3, r0, #0
   15c6e:	d002      	beq.n	15c76 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   15c70:	2004      	movs	r0, #4
   15c72:	4b14      	ldr	r3, [pc, #80]	; (15cc4 <http_client_callback+0x140>)
   15c74:	4798      	blx	r3
                }

                start_download();
   15c76:	4b14      	ldr	r3, [pc, #80]	; (15cc8 <http_client_callback+0x144>)
   15c78:	4798      	blx	r3
            }

            break;
   15c7a:	46c0      	nop			; (mov r8, r8)
   15c7c:	e003      	b.n	15c86 <http_client_callback+0x102>
            break;
   15c7e:	46c0      	nop			; (mov r8, r8)
   15c80:	e002      	b.n	15c88 <http_client_callback+0x104>
            break;
   15c82:	46c0      	nop			; (mov r8, r8)
   15c84:	e000      	b.n	15c88 <http_client_callback+0x104>
            break;
   15c86:	46c0      	nop			; (mov r8, r8)
    }
}
   15c88:	46bd      	mov	sp, r7
   15c8a:	b005      	add	sp, #20
   15c8c:	bd90      	pop	{r4, r7, pc}
   15c8e:	46c0      	nop			; (mov r8, r8)
   15c90:	000361b4 	.word	0x000361b4
   15c94:	00035a48 	.word	0x00035a48
   15c98:	0001d851 	.word	0x0001d851
   15c9c:	00035a80 	.word	0x00035a80
   15ca0:	000155a5 	.word	0x000155a5
   15ca4:	00035aac 	.word	0x00035aac
   15ca8:	200006ec 	.word	0x200006ec
   15cac:	200006f0 	.word	0x200006f0
   15cb0:	000159b1 	.word	0x000159b1
   15cb4:	00035ae8 	.word	0x00035ae8
   15cb8:	000155cd 	.word	0x000155cd
   15cbc:	200006c8 	.word	0x200006c8
   15cc0:	0002dcfd 	.word	0x0002dcfd
   15cc4:	00015571 	.word	0x00015571
   15cc8:	000158f5 	.word	0x000158f5

00015ccc <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   15ccc:	b580      	push	{r7, lr}
   15cce:	b082      	sub	sp, #8
   15cd0:	af00      	add	r7, sp, #0
   15cd2:	603a      	str	r2, [r7, #0]
   15cd4:	1dfb      	adds	r3, r7, #7
   15cd6:	1c02      	adds	r2, r0, #0
   15cd8:	701a      	strb	r2, [r3, #0]
   15cda:	1dbb      	adds	r3, r7, #6
   15cdc:	1c0a      	adds	r2, r1, #0
   15cde:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   15ce0:	683a      	ldr	r2, [r7, #0]
   15ce2:	1dbb      	adds	r3, r7, #6
   15ce4:	7819      	ldrb	r1, [r3, #0]
   15ce6:	1dfb      	adds	r3, r7, #7
   15ce8:	781b      	ldrb	r3, [r3, #0]
   15cea:	b25b      	sxtb	r3, r3
   15cec:	0018      	movs	r0, r3
   15cee:	4b03      	ldr	r3, [pc, #12]	; (15cfc <socket_cb+0x30>)
   15cf0:	4798      	blx	r3
}
   15cf2:	46c0      	nop			; (mov r8, r8)
   15cf4:	46bd      	mov	sp, r7
   15cf6:	b002      	add	sp, #8
   15cf8:	bd80      	pop	{r7, pc}
   15cfa:	46c0      	nop			; (mov r8, r8)
   15cfc:	00030661 	.word	0x00030661

00015d00 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   15d00:	b5b0      	push	{r4, r5, r7, lr}
   15d02:	b086      	sub	sp, #24
   15d04:	af04      	add	r7, sp, #16
   15d06:	6078      	str	r0, [r7, #4]
   15d08:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   15d0a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   15d0c:	22ff      	movs	r2, #255	; 0xff
   15d0e:	4013      	ands	r3, r2
   15d10:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   15d12:	683b      	ldr	r3, [r7, #0]
   15d14:	0a1b      	lsrs	r3, r3, #8
   15d16:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   15d18:	23ff      	movs	r3, #255	; 0xff
   15d1a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   15d1c:	683a      	ldr	r2, [r7, #0]
   15d1e:	0c12      	lsrs	r2, r2, #16
   15d20:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   15d22:	22ff      	movs	r2, #255	; 0xff
   15d24:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   15d26:	6839      	ldr	r1, [r7, #0]
   15d28:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   15d2a:	000d      	movs	r5, r1
   15d2c:	6878      	ldr	r0, [r7, #4]
   15d2e:	4909      	ldr	r1, [pc, #36]	; (15d54 <resolve_cb+0x54>)
   15d30:	9502      	str	r5, [sp, #8]
   15d32:	9201      	str	r2, [sp, #4]
   15d34:	9300      	str	r3, [sp, #0]
   15d36:	0023      	movs	r3, r4
   15d38:	0002      	movs	r2, r0
   15d3a:	2001      	movs	r0, #1
   15d3c:	4c06      	ldr	r4, [pc, #24]	; (15d58 <resolve_cb+0x58>)
   15d3e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   15d40:	683a      	ldr	r2, [r7, #0]
   15d42:	687b      	ldr	r3, [r7, #4]
   15d44:	0011      	movs	r1, r2
   15d46:	0018      	movs	r0, r3
   15d48:	4b04      	ldr	r3, [pc, #16]	; (15d5c <resolve_cb+0x5c>)
   15d4a:	4798      	blx	r3
}
   15d4c:	46c0      	nop			; (mov r8, r8)
   15d4e:	46bd      	mov	sp, r7
   15d50:	b002      	add	sp, #8
   15d52:	bdb0      	pop	{r4, r5, r7, pc}
   15d54:	00035b18 	.word	0x00035b18
   15d58:	0001d851 	.word	0x0001d851
   15d5c:	000307c5 	.word	0x000307c5

00015d60 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   15d60:	b590      	push	{r4, r7, lr}
   15d62:	b087      	sub	sp, #28
   15d64:	af02      	add	r7, sp, #8
   15d66:	0002      	movs	r2, r0
   15d68:	6039      	str	r1, [r7, #0]
   15d6a:	1dfb      	adds	r3, r7, #7
   15d6c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   15d6e:	1dfb      	adds	r3, r7, #7
   15d70:	781b      	ldrb	r3, [r3, #0]
   15d72:	2b2c      	cmp	r3, #44	; 0x2c
   15d74:	d002      	beq.n	15d7c <wifi_cb+0x1c>
   15d76:	2b32      	cmp	r3, #50	; 0x32
   15d78:	d03d      	beq.n	15df6 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   15d7a:	e06f      	b.n	15e5c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   15d7c:	683b      	ldr	r3, [r7, #0]
   15d7e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   15d80:	68fb      	ldr	r3, [r7, #12]
   15d82:	781b      	ldrb	r3, [r3, #0]
   15d84:	2b01      	cmp	r3, #1
   15d86:	d107      	bne.n	15d98 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   15d88:	4b36      	ldr	r3, [pc, #216]	; (15e64 <wifi_cb+0x104>)
   15d8a:	0019      	movs	r1, r3
   15d8c:	2001      	movs	r0, #1
   15d8e:	4b36      	ldr	r3, [pc, #216]	; (15e68 <wifi_cb+0x108>)
   15d90:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   15d92:	4b36      	ldr	r3, [pc, #216]	; (15e6c <wifi_cb+0x10c>)
   15d94:	4798      	blx	r3
            break;
   15d96:	e05e      	b.n	15e56 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   15d98:	68fb      	ldr	r3, [r7, #12]
   15d9a:	781b      	ldrb	r3, [r3, #0]
   15d9c:	2b00      	cmp	r3, #0
   15d9e:	d15a      	bne.n	15e56 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   15da0:	4b33      	ldr	r3, [pc, #204]	; (15e70 <wifi_cb+0x110>)
   15da2:	0019      	movs	r1, r3
   15da4:	2001      	movs	r0, #1
   15da6:	4b30      	ldr	r3, [pc, #192]	; (15e68 <wifi_cb+0x108>)
   15da8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   15daa:	2002      	movs	r0, #2
   15dac:	4b31      	ldr	r3, [pc, #196]	; (15e74 <wifi_cb+0x114>)
   15dae:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   15db0:	2008      	movs	r0, #8
   15db2:	4b31      	ldr	r3, [pc, #196]	; (15e78 <wifi_cb+0x118>)
   15db4:	4798      	blx	r3
   15db6:	1e03      	subs	r3, r0, #0
   15db8:	d006      	beq.n	15dc8 <wifi_cb+0x68>
                    f_close(&file_object);
   15dba:	4b30      	ldr	r3, [pc, #192]	; (15e7c <wifi_cb+0x11c>)
   15dbc:	0018      	movs	r0, r3
   15dbe:	4b30      	ldr	r3, [pc, #192]	; (15e80 <wifi_cb+0x120>)
   15dc0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   15dc2:	2008      	movs	r0, #8
   15dc4:	4b2b      	ldr	r3, [pc, #172]	; (15e74 <wifi_cb+0x114>)
   15dc6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   15dc8:	2004      	movs	r0, #4
   15dca:	4b2b      	ldr	r3, [pc, #172]	; (15e78 <wifi_cb+0x118>)
   15dcc:	4798      	blx	r3
   15dce:	1e03      	subs	r3, r0, #0
   15dd0:	d002      	beq.n	15dd8 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   15dd2:	2004      	movs	r0, #4
   15dd4:	4b27      	ldr	r3, [pc, #156]	; (15e74 <wifi_cb+0x114>)
   15dd6:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   15dd8:	4b2a      	ldr	r3, [pc, #168]	; (15e84 <wifi_cb+0x124>)
   15dda:	2101      	movs	r1, #1
   15ddc:	0018      	movs	r0, r3
   15dde:	4b2a      	ldr	r3, [pc, #168]	; (15e88 <wifi_cb+0x128>)
   15de0:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15de2:	4a2a      	ldr	r2, [pc, #168]	; (15e8c <wifi_cb+0x12c>)
   15de4:	482a      	ldr	r0, [pc, #168]	; (15e90 <wifi_cb+0x130>)
   15de6:	23ff      	movs	r3, #255	; 0xff
   15de8:	9300      	str	r3, [sp, #0]
   15dea:	0013      	movs	r3, r2
   15dec:	2202      	movs	r2, #2
   15dee:	2106      	movs	r1, #6
   15df0:	4c28      	ldr	r4, [pc, #160]	; (15e94 <wifi_cb+0x134>)
   15df2:	47a0      	blx	r4
            break;
   15df4:	e02f      	b.n	15e56 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   15df6:	683b      	ldr	r3, [r7, #0]
   15df8:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   15dfa:	68bb      	ldr	r3, [r7, #8]
   15dfc:	781b      	ldrb	r3, [r3, #0]
   15dfe:	0018      	movs	r0, r3
   15e00:	68bb      	ldr	r3, [r7, #8]
   15e02:	3301      	adds	r3, #1
   15e04:	781b      	ldrb	r3, [r3, #0]
   15e06:	001c      	movs	r4, r3
   15e08:	68bb      	ldr	r3, [r7, #8]
   15e0a:	3302      	adds	r3, #2
   15e0c:	781b      	ldrb	r3, [r3, #0]
   15e0e:	001a      	movs	r2, r3
   15e10:	68bb      	ldr	r3, [r7, #8]
   15e12:	3303      	adds	r3, #3
   15e14:	781b      	ldrb	r3, [r3, #0]
   15e16:	4920      	ldr	r1, [pc, #128]	; (15e98 <wifi_cb+0x138>)
   15e18:	9301      	str	r3, [sp, #4]
   15e1a:	9200      	str	r2, [sp, #0]
   15e1c:	0023      	movs	r3, r4
   15e1e:	0002      	movs	r2, r0
   15e20:	2001      	movs	r0, #1
   15e22:	4c11      	ldr	r4, [pc, #68]	; (15e68 <wifi_cb+0x108>)
   15e24:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   15e26:	2002      	movs	r0, #2
   15e28:	4b1c      	ldr	r3, [pc, #112]	; (15e9c <wifi_cb+0x13c>)
   15e2a:	4798      	blx	r3
            if (do_download_flag == 1) {
   15e2c:	4b1c      	ldr	r3, [pc, #112]	; (15ea0 <wifi_cb+0x140>)
   15e2e:	781b      	ldrb	r3, [r3, #0]
   15e30:	2b01      	cmp	r3, #1
   15e32:	d102      	bne.n	15e3a <wifi_cb+0xda>
                start_download();
   15e34:	4b1b      	ldr	r3, [pc, #108]	; (15ea4 <wifi_cb+0x144>)
   15e36:	4798      	blx	r3
        } break;
   15e38:	e00f      	b.n	15e5a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   15e3a:	4a1b      	ldr	r2, [pc, #108]	; (15ea8 <wifi_cb+0x148>)
   15e3c:	4b11      	ldr	r3, [pc, #68]	; (15e84 <wifi_cb+0x124>)
   15e3e:	0011      	movs	r1, r2
   15e40:	0018      	movs	r0, r3
   15e42:	4b1a      	ldr	r3, [pc, #104]	; (15eac <wifi_cb+0x14c>)
   15e44:	4798      	blx	r3
   15e46:	1e03      	subs	r3, r0, #0
   15e48:	d007      	beq.n	15e5a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15e4a:	4b19      	ldr	r3, [pc, #100]	; (15eb0 <wifi_cb+0x150>)
   15e4c:	0019      	movs	r1, r3
   15e4e:	2001      	movs	r0, #1
   15e50:	4b05      	ldr	r3, [pc, #20]	; (15e68 <wifi_cb+0x108>)
   15e52:	4798      	blx	r3
        } break;
   15e54:	e001      	b.n	15e5a <wifi_cb+0xfa>
            break;
   15e56:	46c0      	nop			; (mov r8, r8)
   15e58:	e000      	b.n	15e5c <wifi_cb+0xfc>
        } break;
   15e5a:	46c0      	nop			; (mov r8, r8)
    }
}
   15e5c:	46c0      	nop			; (mov r8, r8)
   15e5e:	46bd      	mov	sp, r7
   15e60:	b005      	add	sp, #20
   15e62:	bd90      	pop	{r4, r7, pc}
   15e64:	00035b48 	.word	0x00035b48
   15e68:	0001d851 	.word	0x0001d851
   15e6c:	00021e31 	.word	0x00021e31
   15e70:	00035b68 	.word	0x00035b68
   15e74:	00015571 	.word	0x00015571
   15e78:	000155cd 	.word	0x000155cd
   15e7c:	200006c8 	.word	0x200006c8
   15e80:	0002dcfd 	.word	0x0002dcfd
   15e84:	200006f4 	.word	0x200006f4
   15e88:	0002f30d 	.word	0x0002f30d
   15e8c:	00035b8c 	.word	0x00035b8c
   15e90:	00035b98 	.word	0x00035b98
   15e94:	0002195d 	.word	0x0002195d
   15e98:	00035ba0 	.word	0x00035ba0
   15e9c:	000155a5 	.word	0x000155a5
   15ea0:	20000494 	.word	0x20000494
   15ea4:	000158f5 	.word	0x000158f5
   15ea8:	000357c4 	.word	0x000357c4
   15eac:	0002f1d9 	.word	0x0002f1d9
   15eb0:	00035bc8 	.word	0x00035bc8

00015eb4 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   15eb4:	b590      	push	{r4, r7, lr}
   15eb6:	b083      	sub	sp, #12
   15eb8:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   15eba:	4b29      	ldr	r3, [pc, #164]	; (15f60 <init_storage+0xac>)
   15ebc:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   15ebe:	4b29      	ldr	r3, [pc, #164]	; (15f64 <init_storage+0xb0>)
   15ec0:	0019      	movs	r1, r3
   15ec2:	2001      	movs	r0, #1
   15ec4:	4b28      	ldr	r3, [pc, #160]	; (15f68 <init_storage+0xb4>)
   15ec6:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   15ec8:	1dfc      	adds	r4, r7, #7
   15eca:	2000      	movs	r0, #0
   15ecc:	4b27      	ldr	r3, [pc, #156]	; (15f6c <init_storage+0xb8>)
   15ece:	4798      	blx	r3
   15ed0:	0003      	movs	r3, r0
   15ed2:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   15ed4:	1dfb      	adds	r3, r7, #7
   15ed6:	781b      	ldrb	r3, [r3, #0]
   15ed8:	2b01      	cmp	r3, #1
   15eda:	d110      	bne.n	15efe <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   15edc:	4b24      	ldr	r3, [pc, #144]	; (15f70 <init_storage+0xbc>)
   15ede:	0019      	movs	r1, r3
   15ee0:	2001      	movs	r0, #1
   15ee2:	4b21      	ldr	r3, [pc, #132]	; (15f68 <init_storage+0xb4>)
   15ee4:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   15ee6:	4b23      	ldr	r3, [pc, #140]	; (15f74 <init_storage+0xc0>)
   15ee8:	0019      	movs	r1, r3
   15eea:	2001      	movs	r0, #1
   15eec:	4b1e      	ldr	r3, [pc, #120]	; (15f68 <init_storage+0xb4>)
   15eee:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   15ef0:	46c0      	nop			; (mov r8, r8)
   15ef2:	2000      	movs	r0, #0
   15ef4:	4b20      	ldr	r3, [pc, #128]	; (15f78 <init_storage+0xc4>)
   15ef6:	4798      	blx	r3
   15ef8:	0003      	movs	r3, r0
   15efa:	2b02      	cmp	r3, #2
   15efc:	d1f9      	bne.n	15ef2 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   15efe:	1dfb      	adds	r3, r7, #7
   15f00:	781b      	ldrb	r3, [r3, #0]
   15f02:	2b00      	cmp	r3, #0
   15f04:	d1e0      	bne.n	15ec8 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   15f06:	4b1d      	ldr	r3, [pc, #116]	; (15f7c <init_storage+0xc8>)
   15f08:	0019      	movs	r1, r3
   15f0a:	2001      	movs	r0, #1
   15f0c:	4b16      	ldr	r3, [pc, #88]	; (15f68 <init_storage+0xb4>)
   15f0e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   15f10:	238c      	movs	r3, #140	; 0x8c
   15f12:	009a      	lsls	r2, r3, #2
   15f14:	4b1a      	ldr	r3, [pc, #104]	; (15f80 <init_storage+0xcc>)
   15f16:	2100      	movs	r1, #0
   15f18:	0018      	movs	r0, r3
   15f1a:	4b1a      	ldr	r3, [pc, #104]	; (15f84 <init_storage+0xd0>)
   15f1c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   15f1e:	1dbc      	adds	r4, r7, #6
   15f20:	4b17      	ldr	r3, [pc, #92]	; (15f80 <init_storage+0xcc>)
   15f22:	0019      	movs	r1, r3
   15f24:	2000      	movs	r0, #0
   15f26:	4b18      	ldr	r3, [pc, #96]	; (15f88 <init_storage+0xd4>)
   15f28:	4798      	blx	r3
   15f2a:	0003      	movs	r3, r0
   15f2c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   15f2e:	1dbb      	adds	r3, r7, #6
   15f30:	781b      	ldrb	r3, [r3, #0]
   15f32:	2b0b      	cmp	r3, #11
   15f34:	d107      	bne.n	15f46 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   15f36:	1dbb      	adds	r3, r7, #6
   15f38:	781a      	ldrb	r2, [r3, #0]
   15f3a:	4b14      	ldr	r3, [pc, #80]	; (15f8c <init_storage+0xd8>)
   15f3c:	0019      	movs	r1, r3
   15f3e:	2001      	movs	r0, #1
   15f40:	4b09      	ldr	r3, [pc, #36]	; (15f68 <init_storage+0xb4>)
   15f42:	4798      	blx	r3
            return;
   15f44:	e008      	b.n	15f58 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   15f46:	4b12      	ldr	r3, [pc, #72]	; (15f90 <init_storage+0xdc>)
   15f48:	0019      	movs	r1, r3
   15f4a:	2001      	movs	r0, #1
   15f4c:	4b06      	ldr	r3, [pc, #24]	; (15f68 <init_storage+0xb4>)
   15f4e:	4798      	blx	r3
        add_state(STORAGE_READY);
   15f50:	2001      	movs	r0, #1
   15f52:	4b10      	ldr	r3, [pc, #64]	; (15f94 <init_storage+0xe0>)
   15f54:	4798      	blx	r3
        return;
   15f56:	46c0      	nop			; (mov r8, r8)
    }
}
   15f58:	46bd      	mov	sp, r7
   15f5a:	b003      	add	sp, #12
   15f5c:	bd90      	pop	{r4, r7, pc}
   15f5e:	46c0      	nop			; (mov r8, r8)
   15f60:	0001e669 	.word	0x0001e669
   15f64:	00035bec 	.word	0x00035bec
   15f68:	0001d851 	.word	0x0001d851
   15f6c:	0001eb45 	.word	0x0001eb45
   15f70:	00035c24 	.word	0x00035c24
   15f74:	00035c4c 	.word	0x00035c4c
   15f78:	0001e6b9 	.word	0x0001e6b9
   15f7c:	00035c80 	.word	0x00035c80
   15f80:	20000498 	.word	0x20000498
   15f84:	00034043 	.word	0x00034043
   15f88:	0002d2a5 	.word	0x0002d2a5
   15f8c:	00035ca4 	.word	0x00035ca4
   15f90:	00035cd4 	.word	0x00035cd4
   15f94:	000155a5 	.word	0x000155a5

00015f98 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   15f98:	b580      	push	{r7, lr}
   15f9a:	b082      	sub	sp, #8
   15f9c:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   15f9e:	1d3b      	adds	r3, r7, #4
   15fa0:	0018      	movs	r0, r3
   15fa2:	4b08      	ldr	r3, [pc, #32]	; (15fc4 <configure_timer+0x2c>)
   15fa4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   15fa6:	1d3a      	adds	r2, r7, #4
   15fa8:	4b07      	ldr	r3, [pc, #28]	; (15fc8 <configure_timer+0x30>)
   15faa:	0011      	movs	r1, r2
   15fac:	0018      	movs	r0, r3
   15fae:	4b07      	ldr	r3, [pc, #28]	; (15fcc <configure_timer+0x34>)
   15fb0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   15fb2:	4b05      	ldr	r3, [pc, #20]	; (15fc8 <configure_timer+0x30>)
   15fb4:	0018      	movs	r0, r3
   15fb6:	4b06      	ldr	r3, [pc, #24]	; (15fd0 <configure_timer+0x38>)
   15fb8:	4798      	blx	r3
}
   15fba:	46c0      	nop			; (mov r8, r8)
   15fbc:	46bd      	mov	sp, r7
   15fbe:	b002      	add	sp, #8
   15fc0:	bd80      	pop	{r7, pc}
   15fc2:	46c0      	nop			; (mov r8, r8)
   15fc4:	00031df5 	.word	0x00031df5
   15fc8:	20004768 	.word	0x20004768
   15fcc:	00031e19 	.word	0x00031e19
   15fd0:	00031f05 	.word	0x00031f05

00015fd4 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15fd4:	b580      	push	{r7, lr}
   15fd6:	b088      	sub	sp, #32
   15fd8:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   15fda:	003b      	movs	r3, r7
   15fdc:	0018      	movs	r0, r3
   15fde:	4b12      	ldr	r3, [pc, #72]	; (16028 <configure_http_client+0x54>)
   15fe0:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15fe2:	003b      	movs	r3, r7
   15fe4:	2280      	movs	r2, #128	; 0x80
   15fe6:	0092      	lsls	r2, r2, #2
   15fe8:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   15fea:	003b      	movs	r3, r7
   15fec:	4a0f      	ldr	r2, [pc, #60]	; (1602c <configure_http_client+0x58>)
   15fee:	605a      	str	r2, [r3, #4]
//     httpc_conf.port = 443;
//     httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15ff0:	003a      	movs	r2, r7
   15ff2:	4b0f      	ldr	r3, [pc, #60]	; (16030 <configure_http_client+0x5c>)
   15ff4:	0011      	movs	r1, r2
   15ff6:	0018      	movs	r0, r3
   15ff8:	4b0e      	ldr	r3, [pc, #56]	; (16034 <configure_http_client+0x60>)
   15ffa:	4798      	blx	r3
   15ffc:	0003      	movs	r3, r0
   15ffe:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   16000:	69fb      	ldr	r3, [r7, #28]
   16002:	2b00      	cmp	r3, #0
   16004:	da06      	bge.n	16014 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16006:	69fa      	ldr	r2, [r7, #28]
   16008:	4b0b      	ldr	r3, [pc, #44]	; (16038 <configure_http_client+0x64>)
   1600a:	0019      	movs	r1, r3
   1600c:	2001      	movs	r0, #1
   1600e:	4b0b      	ldr	r3, [pc, #44]	; (1603c <configure_http_client+0x68>)
   16010:	4798      	blx	r3
        while (1) {
   16012:	e7fe      	b.n	16012 <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   16014:	4a0a      	ldr	r2, [pc, #40]	; (16040 <configure_http_client+0x6c>)
   16016:	4b06      	ldr	r3, [pc, #24]	; (16030 <configure_http_client+0x5c>)
   16018:	0011      	movs	r1, r2
   1601a:	0018      	movs	r0, r3
   1601c:	4b09      	ldr	r3, [pc, #36]	; (16044 <configure_http_client+0x70>)
   1601e:	4798      	blx	r3
}
   16020:	46c0      	nop			; (mov r8, r8)
   16022:	46bd      	mov	sp, r7
   16024:	b008      	add	sp, #32
   16026:	bd80      	pop	{r7, pc}
   16028:	00030489 	.word	0x00030489
   1602c:	20004768 	.word	0x20004768
   16030:	200047c0 	.word	0x200047c0
   16034:	000304d5 	.word	0x000304d5
   16038:	00035cf8 	.word	0x00035cf8
   1603c:	0001d851 	.word	0x0001d851
   16040:	00015b85 	.word	0x00015b85
   16044:	000305c1 	.word	0x000305c1

00016048 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16048:	b580      	push	{r7, lr}
   1604a:	b082      	sub	sp, #8
   1604c:	af00      	add	r7, sp, #0
   1604e:	603a      	str	r2, [r7, #0]
   16050:	1dfb      	adds	r3, r7, #7
   16052:	1c02      	adds	r2, r0, #0
   16054:	701a      	strb	r2, [r3, #0]
   16056:	1dbb      	adds	r3, r7, #6
   16058:	1c0a      	adds	r2, r1, #0
   1605a:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   1605c:	683a      	ldr	r2, [r7, #0]
   1605e:	1dbb      	adds	r3, r7, #6
   16060:	7819      	ldrb	r1, [r3, #0]
   16062:	1dfb      	adds	r3, r7, #7
   16064:	781b      	ldrb	r3, [r3, #0]
   16066:	b25b      	sxtb	r3, r3
   16068:	0018      	movs	r0, r3
   1606a:	4b03      	ldr	r3, [pc, #12]	; (16078 <socket_event_handler+0x30>)
   1606c:	4798      	blx	r3
}
   1606e:	46c0      	nop			; (mov r8, r8)
   16070:	46bd      	mov	sp, r7
   16072:	b002      	add	sp, #8
   16074:	bd80      	pop	{r7, pc}
   16076:	46c0      	nop			; (mov r8, r8)
   16078:	0002f181 	.word	0x0002f181

0001607c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1607c:	b580      	push	{r7, lr}
   1607e:	b082      	sub	sp, #8
   16080:	af00      	add	r7, sp, #0
   16082:	6078      	str	r0, [r7, #4]
   16084:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   16086:	683a      	ldr	r2, [r7, #0]
   16088:	687b      	ldr	r3, [r7, #4]
   1608a:	0011      	movs	r1, r2
   1608c:	0018      	movs	r0, r3
   1608e:	4b03      	ldr	r3, [pc, #12]	; (1609c <socket_resolve_handler+0x20>)
   16090:	4798      	blx	r3
}
   16092:	46c0      	nop			; (mov r8, r8)
   16094:	46bd      	mov	sp, r7
   16096:	b002      	add	sp, #8
   16098:	bd80      	pop	{r7, pc}
   1609a:	46c0      	nop			; (mov r8, r8)
   1609c:	0002f1b5 	.word	0x0002f1b5

000160a0 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   160a0:	b590      	push	{r4, r7, lr}
   160a2:	b089      	sub	sp, #36	; 0x24
   160a4:	af02      	add	r7, sp, #8
   160a6:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   160a8:	2310      	movs	r3, #16
   160aa:	18fb      	adds	r3, r7, r3
   160ac:	2200      	movs	r2, #0
   160ae:	701a      	strb	r2, [r3, #0]
   160b0:	2310      	movs	r3, #16
   160b2:	18fb      	adds	r3, r7, r3
   160b4:	2200      	movs	r2, #0
   160b6:	705a      	strb	r2, [r3, #1]
   160b8:	2310      	movs	r3, #16
   160ba:	18fb      	adds	r3, r7, r3
   160bc:	2200      	movs	r2, #0
   160be:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   160c0:	687b      	ldr	r3, [r7, #4]
   160c2:	685b      	ldr	r3, [r3, #4]
   160c4:	685a      	ldr	r2, [r3, #4]
   160c6:	687b      	ldr	r3, [r7, #4]
   160c8:	685b      	ldr	r3, [r3, #4]
   160ca:	689b      	ldr	r3, [r3, #8]
   160cc:	492a      	ldr	r1, [pc, #168]	; (16178 <SubscribeHandlerLedTopic+0xd8>)
   160ce:	2001      	movs	r0, #1
   160d0:	4c2a      	ldr	r4, [pc, #168]	; (1617c <SubscribeHandlerLedTopic+0xdc>)
   160d2:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   160d4:	687b      	ldr	r3, [r7, #4]
   160d6:	681b      	ldr	r3, [r3, #0]
   160d8:	689b      	ldr	r3, [r3, #8]
   160da:	4929      	ldr	r1, [pc, #164]	; (16180 <SubscribeHandlerLedTopic+0xe0>)
   160dc:	2204      	movs	r2, #4
   160de:	0018      	movs	r0, r3
   160e0:	4b28      	ldr	r3, [pc, #160]	; (16184 <SubscribeHandlerLedTopic+0xe4>)
   160e2:	4798      	blx	r3
   160e4:	1e03      	subs	r3, r0, #0
   160e6:	d143      	bne.n	16170 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   160e8:	687b      	ldr	r3, [r7, #4]
   160ea:	681b      	ldr	r3, [r3, #0]
   160ec:	689b      	ldr	r3, [r3, #8]
   160ee:	3304      	adds	r3, #4
   160f0:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   160f2:	2300      	movs	r3, #0
   160f4:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   160f6:	e015      	b.n	16124 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   160f8:	697c      	ldr	r4, [r7, #20]
   160fa:	1c63      	adds	r3, r4, #1
   160fc:	617b      	str	r3, [r7, #20]
   160fe:	68fb      	ldr	r3, [r7, #12]
   16100:	220c      	movs	r2, #12
   16102:	18b9      	adds	r1, r7, r2
   16104:	220a      	movs	r2, #10
   16106:	0018      	movs	r0, r3
   16108:	4b1f      	ldr	r3, [pc, #124]	; (16188 <SubscribeHandlerLedTopic+0xe8>)
   1610a:	4798      	blx	r3
   1610c:	0003      	movs	r3, r0
   1610e:	b2da      	uxtb	r2, r3
   16110:	2310      	movs	r3, #16
   16112:	18fb      	adds	r3, r7, r3
   16114:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16116:	68fb      	ldr	r3, [r7, #12]
   16118:	781b      	ldrb	r3, [r3, #0]
   1611a:	2b2c      	cmp	r3, #44	; 0x2c
   1611c:	d10a      	bne.n	16134 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1611e:	68fb      	ldr	r3, [r7, #12]
   16120:	3301      	adds	r3, #1
   16122:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   16124:	697b      	ldr	r3, [r7, #20]
   16126:	2b02      	cmp	r3, #2
   16128:	dc05      	bgt.n	16136 <SubscribeHandlerLedTopic+0x96>
   1612a:	68fb      	ldr	r3, [r7, #12]
   1612c:	781b      	ldrb	r3, [r3, #0]
   1612e:	2b00      	cmp	r3, #0
   16130:	d1e2      	bne.n	160f8 <SubscribeHandlerLedTopic+0x58>
   16132:	e000      	b.n	16136 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   16134:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   16136:	2310      	movs	r3, #16
   16138:	18fb      	adds	r3, r7, r3
   1613a:	781b      	ldrb	r3, [r3, #0]
   1613c:	001a      	movs	r2, r3
   1613e:	2310      	movs	r3, #16
   16140:	18fb      	adds	r3, r7, r3
   16142:	785b      	ldrb	r3, [r3, #1]
   16144:	0018      	movs	r0, r3
   16146:	2310      	movs	r3, #16
   16148:	18fb      	adds	r3, r7, r3
   1614a:	789b      	ldrb	r3, [r3, #2]
   1614c:	490f      	ldr	r1, [pc, #60]	; (1618c <SubscribeHandlerLedTopic+0xec>)
   1614e:	9300      	str	r3, [sp, #0]
   16150:	0003      	movs	r3, r0
   16152:	2001      	movs	r0, #1
   16154:	4c09      	ldr	r4, [pc, #36]	; (1617c <SubscribeHandlerLedTopic+0xdc>)
   16156:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   16158:	2310      	movs	r3, #16
   1615a:	18fb      	adds	r3, r7, r3
   1615c:	7818      	ldrb	r0, [r3, #0]
   1615e:	2310      	movs	r3, #16
   16160:	18fb      	adds	r3, r7, r3
   16162:	7859      	ldrb	r1, [r3, #1]
   16164:	2310      	movs	r3, #16
   16166:	18fb      	adds	r3, r7, r3
   16168:	789b      	ldrb	r3, [r3, #2]
   1616a:	001a      	movs	r2, r3
   1616c:	4b08      	ldr	r3, [pc, #32]	; (16190 <SubscribeHandlerLedTopic+0xf0>)
   1616e:	4798      	blx	r3
    }
}
   16170:	46c0      	nop			; (mov r8, r8)
   16172:	46bd      	mov	sp, r7
   16174:	b007      	add	sp, #28
   16176:	bd90      	pop	{r4, r7, pc}
   16178:	00035d40 	.word	0x00035d40
   1617c:	0001d851 	.word	0x0001d851
   16180:	00035d48 	.word	0x00035d48
   16184:	00034409 	.word	0x00034409
   16188:	000345b5 	.word	0x000345b5
   1618c:	00035d50 	.word	0x00035d50
   16190:	00015439 	.word	0x00015439

00016194 <SubscribeHandlerGameTopic>:
// LogMessage(LOG_DEBUG_LVL, "\r\nButton topic received!\r\n");
// LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
// }

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   16194:	b590      	push	{r4, r7, lr}
   16196:	b08b      	sub	sp, #44	; 0x2c
   16198:	af00      	add	r7, sp, #0
   1619a:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   1619c:	230c      	movs	r3, #12
   1619e:	18fb      	adds	r3, r7, r3
   161a0:	2214      	movs	r2, #20
   161a2:	21ff      	movs	r1, #255	; 0xff
   161a4:	0018      	movs	r0, r3
   161a6:	4b48      	ldr	r3, [pc, #288]	; (162c8 <SubscribeHandlerGameTopic+0x134>)
   161a8:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   161aa:	687b      	ldr	r3, [r7, #4]
   161ac:	681b      	ldr	r3, [r3, #0]
   161ae:	689b      	ldr	r3, [r3, #8]
   161b0:	4946      	ldr	r1, [pc, #280]	; (162cc <SubscribeHandlerGameTopic+0x138>)
   161b2:	2209      	movs	r2, #9
   161b4:	0018      	movs	r0, r3
   161b6:	4b46      	ldr	r3, [pc, #280]	; (162d0 <SubscribeHandlerGameTopic+0x13c>)
   161b8:	4798      	blx	r3
   161ba:	1e03      	subs	r3, r0, #0
   161bc:	d166      	bne.n	1628c <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   161be:	4b45      	ldr	r3, [pc, #276]	; (162d4 <SubscribeHandlerGameTopic+0x140>)
   161c0:	0019      	movs	r1, r3
   161c2:	2001      	movs	r0, #1
   161c4:	4b44      	ldr	r3, [pc, #272]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   161c6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   161c8:	687b      	ldr	r3, [r7, #4]
   161ca:	685b      	ldr	r3, [r3, #4]
   161cc:	685a      	ldr	r2, [r3, #4]
   161ce:	687b      	ldr	r3, [r7, #4]
   161d0:	685b      	ldr	r3, [r3, #4]
   161d2:	689b      	ldr	r3, [r3, #8]
   161d4:	4941      	ldr	r1, [pc, #260]	; (162dc <SubscribeHandlerGameTopic+0x148>)
   161d6:	2001      	movs	r0, #1
   161d8:	4c3f      	ldr	r4, [pc, #252]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   161da:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   161dc:	687b      	ldr	r3, [r7, #4]
   161de:	681b      	ldr	r3, [r3, #0]
   161e0:	68da      	ldr	r2, [r3, #12]
   161e2:	687b      	ldr	r3, [r7, #4]
   161e4:	681b      	ldr	r3, [r3, #0]
   161e6:	689b      	ldr	r3, [r3, #8]
   161e8:	493d      	ldr	r1, [pc, #244]	; (162e0 <SubscribeHandlerGameTopic+0x14c>)
   161ea:	2001      	movs	r0, #1
   161ec:	4c3a      	ldr	r4, [pc, #232]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   161ee:	47a0      	blx	r4

        int nb = 0;
   161f0:	2300      	movs	r3, #0
   161f2:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   161f4:	687b      	ldr	r3, [r7, #4]
   161f6:	681b      	ldr	r3, [r3, #0]
   161f8:	689b      	ldr	r3, [r3, #8]
   161fa:	3309      	adds	r3, #9
   161fc:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   161fe:	e015      	b.n	1622c <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   16200:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   16202:	1c63      	adds	r3, r4, #1
   16204:	627b      	str	r3, [r7, #36]	; 0x24
   16206:	68bb      	ldr	r3, [r7, #8]
   16208:	2208      	movs	r2, #8
   1620a:	18b9      	adds	r1, r7, r2
   1620c:	220a      	movs	r2, #10
   1620e:	0018      	movs	r0, r3
   16210:	4b34      	ldr	r3, [pc, #208]	; (162e4 <SubscribeHandlerGameTopic+0x150>)
   16212:	4798      	blx	r3
   16214:	0003      	movs	r3, r0
   16216:	b2da      	uxtb	r2, r3
   16218:	230c      	movs	r3, #12
   1621a:	18fb      	adds	r3, r7, r3
   1621c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1621e:	68bb      	ldr	r3, [r7, #8]
   16220:	781b      	ldrb	r3, [r3, #0]
   16222:	2b2c      	cmp	r3, #44	; 0x2c
   16224:	d10a      	bne.n	1623c <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   16226:	68bb      	ldr	r3, [r7, #8]
   16228:	3301      	adds	r3, #1
   1622a:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1622e:	2b13      	cmp	r3, #19
   16230:	dc05      	bgt.n	1623e <SubscribeHandlerGameTopic+0xaa>
   16232:	68bb      	ldr	r3, [r7, #8]
   16234:	781b      	ldrb	r3, [r3, #0]
   16236:	2b00      	cmp	r3, #0
   16238:	d1e2      	bne.n	16200 <SubscribeHandlerGameTopic+0x6c>
   1623a:	e000      	b.n	1623e <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   1623c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1623e:	4b2a      	ldr	r3, [pc, #168]	; (162e8 <SubscribeHandlerGameTopic+0x154>)
   16240:	0019      	movs	r1, r3
   16242:	2001      	movs	r0, #1
   16244:	4b24      	ldr	r3, [pc, #144]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   16246:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16248:	2300      	movs	r3, #0
   1624a:	623b      	str	r3, [r7, #32]
   1624c:	e00d      	b.n	1626a <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1624e:	230c      	movs	r3, #12
   16250:	18fa      	adds	r2, r7, r3
   16252:	6a3b      	ldr	r3, [r7, #32]
   16254:	18d3      	adds	r3, r2, r3
   16256:	781b      	ldrb	r3, [r3, #0]
   16258:	001a      	movs	r2, r3
   1625a:	4b24      	ldr	r3, [pc, #144]	; (162ec <SubscribeHandlerGameTopic+0x158>)
   1625c:	0019      	movs	r1, r3
   1625e:	2001      	movs	r0, #1
   16260:	4b1d      	ldr	r3, [pc, #116]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   16262:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16264:	6a3b      	ldr	r3, [r7, #32]
   16266:	3301      	adds	r3, #1
   16268:	623b      	str	r3, [r7, #32]
   1626a:	6a3b      	ldr	r3, [r7, #32]
   1626c:	2b13      	cmp	r3, #19
   1626e:	ddee      	ble.n	1624e <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   16270:	230c      	movs	r3, #12
   16272:	18fb      	adds	r3, r7, r3
   16274:	0018      	movs	r0, r3
   16276:	4b1e      	ldr	r3, [pc, #120]	; (162f0 <SubscribeHandlerGameTopic+0x15c>)
   16278:	4798      	blx	r3
   1627a:	0003      	movs	r3, r0
   1627c:	2b01      	cmp	r3, #1
   1627e:	d11e      	bne.n	162be <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   16280:	4b1c      	ldr	r3, [pc, #112]	; (162f4 <SubscribeHandlerGameTopic+0x160>)
   16282:	0019      	movs	r1, r3
   16284:	2001      	movs	r0, #1
   16286:	4b14      	ldr	r3, [pc, #80]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   16288:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   1628a:	e018      	b.n	162be <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   1628c:	4b1a      	ldr	r3, [pc, #104]	; (162f8 <SubscribeHandlerGameTopic+0x164>)
   1628e:	0019      	movs	r1, r3
   16290:	2001      	movs	r0, #1
   16292:	4b11      	ldr	r3, [pc, #68]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   16294:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16296:	687b      	ldr	r3, [r7, #4]
   16298:	685b      	ldr	r3, [r3, #4]
   1629a:	685a      	ldr	r2, [r3, #4]
   1629c:	687b      	ldr	r3, [r7, #4]
   1629e:	685b      	ldr	r3, [r3, #4]
   162a0:	689b      	ldr	r3, [r3, #8]
   162a2:	490e      	ldr	r1, [pc, #56]	; (162dc <SubscribeHandlerGameTopic+0x148>)
   162a4:	2001      	movs	r0, #1
   162a6:	4c0c      	ldr	r4, [pc, #48]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   162a8:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   162aa:	687b      	ldr	r3, [r7, #4]
   162ac:	681b      	ldr	r3, [r3, #0]
   162ae:	68da      	ldr	r2, [r3, #12]
   162b0:	687b      	ldr	r3, [r7, #4]
   162b2:	681b      	ldr	r3, [r3, #0]
   162b4:	689b      	ldr	r3, [r3, #8]
   162b6:	490a      	ldr	r1, [pc, #40]	; (162e0 <SubscribeHandlerGameTopic+0x14c>)
   162b8:	2001      	movs	r0, #1
   162ba:	4c07      	ldr	r4, [pc, #28]	; (162d8 <SubscribeHandlerGameTopic+0x144>)
   162bc:	47a0      	blx	r4
}
   162be:	46c0      	nop			; (mov r8, r8)
   162c0:	46bd      	mov	sp, r7
   162c2:	b00b      	add	sp, #44	; 0x2c
   162c4:	bd90      	pop	{r4, r7, pc}
   162c6:	46c0      	nop			; (mov r8, r8)
   162c8:	00034043 	.word	0x00034043
   162cc:	00035d64 	.word	0x00035d64
   162d0:	00034409 	.word	0x00034409
   162d4:	00035d70 	.word	0x00035d70
   162d8:	0001d851 	.word	0x0001d851
   162dc:	00035d40 	.word	0x00035d40
   162e0:	00035d8c 	.word	0x00035d8c
   162e4:	000345b5 	.word	0x000345b5
   162e8:	00035d94 	.word	0x00035d94
   162ec:	00035da8 	.word	0x00035da8
   162f0:	00013cc1 	.word	0x00013cc1
   162f4:	00035dac 	.word	0x00035dac
   162f8:	00035dc8 	.word	0x00035dc8

000162fc <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{	uint8_t buffer1[64];
   162fc:	b590      	push	{r4, r7, lr}
   162fe:	b093      	sub	sp, #76	; 0x4c
   16300:	af00      	add	r7, sp, #0
   16302:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\n Button topic received!\r\n");
   16304:	4b1a      	ldr	r3, [pc, #104]	; (16370 <SubscribeHandlerImuTopic+0x74>)
   16306:	0019      	movs	r1, r3
   16308:	2001      	movs	r0, #1
   1630a:	4b1a      	ldr	r3, [pc, #104]	; (16374 <SubscribeHandlerImuTopic+0x78>)
   1630c:	4798      	blx	r3
		// if (strncmp((char *)msgData->message->payload, BUTTON_TOPIC_OFF, msgData->message->payloadlen) == 0) {
// 				 port_pin_set_output_level(PIN_PA11, LED_0_INACTIVE);
// 		 		} else if (strncmp((char *)msgData->message->payload, BUTTON_TOPIC_ON, msgData->message->payloadlen) == 0) {
// 		 		port_pin_set_output_level(PIN_PA11, LED_0_ACTIVE);
// 		 		// }
snprintf((char *) buffer1, sizeof(buffer1), "Temp : %s\r\n",msgData->message->payload );
   1630e:	687b      	ldr	r3, [r7, #4]
   16310:	681b      	ldr	r3, [r3, #0]
   16312:	689b      	ldr	r3, [r3, #8]
   16314:	4a18      	ldr	r2, [pc, #96]	; (16378 <SubscribeHandlerImuTopic+0x7c>)
   16316:	2108      	movs	r1, #8
   16318:	1878      	adds	r0, r7, r1
   1631a:	2140      	movs	r1, #64	; 0x40
   1631c:	4c17      	ldr	r4, [pc, #92]	; (1637c <SubscribeHandlerImuTopic+0x80>)
   1631e:	47a0      	blx	r4
		SerialConsoleWriteString(buffer1);
   16320:	2308      	movs	r3, #8
   16322:	18fb      	adds	r3, r7, r3
   16324:	0018      	movs	r0, r3
   16326:	4b16      	ldr	r3, [pc, #88]	; (16380 <SubscribeHandlerImuTopic+0x84>)
   16328:	4798      	blx	r3
	            if (strncmp(msgData->message->payload, "1", 1) == 0){
   1632a:	687b      	ldr	r3, [r7, #4]
   1632c:	681b      	ldr	r3, [r3, #0]
   1632e:	689b      	ldr	r3, [r3, #8]
   16330:	781a      	ldrb	r2, [r3, #0]
   16332:	4b14      	ldr	r3, [pc, #80]	; (16384 <SubscribeHandlerImuTopic+0x88>)
   16334:	781b      	ldrb	r3, [r3, #0]
   16336:	429a      	cmp	r2, r3
   16338:	d104      	bne.n	16344 <SubscribeHandlerImuTopic+0x48>
					port_pin_set_output_level(PIN_PA11, LED_0_ACTIVE);
   1633a:	2100      	movs	r1, #0
   1633c:	200b      	movs	r0, #11
   1633e:	4b12      	ldr	r3, [pc, #72]	; (16388 <SubscribeHandlerImuTopic+0x8c>)
   16340:	4798      	blx	r3
					SerialConsoleWriteString("No Val");
				}
// }
// 
//
 	}
   16342:	e010      	b.n	16366 <SubscribeHandlerImuTopic+0x6a>
				else if (strncmp(msgData->message->payload, "2", 1) == 0)
   16344:	687b      	ldr	r3, [r7, #4]
   16346:	681b      	ldr	r3, [r3, #0]
   16348:	689b      	ldr	r3, [r3, #8]
   1634a:	781a      	ldrb	r2, [r3, #0]
   1634c:	4b0f      	ldr	r3, [pc, #60]	; (1638c <SubscribeHandlerImuTopic+0x90>)
   1634e:	781b      	ldrb	r3, [r3, #0]
   16350:	429a      	cmp	r2, r3
   16352:	d104      	bne.n	1635e <SubscribeHandlerImuTopic+0x62>
					port_pin_set_output_level(PIN_PA11, LED_0_INACTIVE);
   16354:	2101      	movs	r1, #1
   16356:	200b      	movs	r0, #11
   16358:	4b0b      	ldr	r3, [pc, #44]	; (16388 <SubscribeHandlerImuTopic+0x8c>)
   1635a:	4798      	blx	r3
 	}
   1635c:	e003      	b.n	16366 <SubscribeHandlerImuTopic+0x6a>
					SerialConsoleWriteString("No Val");
   1635e:	4b0c      	ldr	r3, [pc, #48]	; (16390 <SubscribeHandlerImuTopic+0x94>)
   16360:	0018      	movs	r0, r3
   16362:	4b07      	ldr	r3, [pc, #28]	; (16380 <SubscribeHandlerImuTopic+0x84>)
   16364:	4798      	blx	r3
 	}
   16366:	46c0      	nop			; (mov r8, r8)
   16368:	46bd      	mov	sp, r7
   1636a:	b013      	add	sp, #76	; 0x4c
   1636c:	bd90      	pop	{r4, r7, pc}
   1636e:	46c0      	nop			; (mov r8, r8)
   16370:	00035df8 	.word	0x00035df8
   16374:	0001d851 	.word	0x0001d851
   16378:	00035e14 	.word	0x00035e14
   1637c:	0003429d 	.word	0x0003429d
   16380:	0001d765 	.word	0x0001d765
   16384:	00035e20 	.word	0x00035e20
   16388:	00015509 	.word	0x00015509
   1638c:	00035e24 	.word	0x00035e24
   16390:	00035e28 	.word	0x00035e28

00016394 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16394:	b590      	push	{r4, r7, lr}
   16396:	b08b      	sub	sp, #44	; 0x2c
   16398:	af06      	add	r7, sp, #24
   1639a:	60f8      	str	r0, [r7, #12]
   1639c:	60b9      	str	r1, [r7, #8]
   1639e:	607a      	str	r2, [r7, #4]
    switch (type) {
   163a0:	68bb      	ldr	r3, [r7, #8]
   163a2:	2b01      	cmp	r3, #1
   163a4:	d03b      	beq.n	1641e <mqtt_callback+0x8a>
   163a6:	2b05      	cmp	r3, #5
   163a8:	d05e      	beq.n	16468 <mqtt_callback+0xd4>
   163aa:	2b00      	cmp	r3, #0
   163ac:	d000      	beq.n	163b0 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   163ae:	e061      	b.n	16474 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   163b0:	687b      	ldr	r3, [r7, #4]
   163b2:	681b      	ldr	r3, [r3, #0]
   163b4:	2b00      	cmp	r3, #0
   163b6:	db25      	blt.n	16404 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   163b8:	4b30      	ldr	r3, [pc, #192]	; (1647c <mqtt_callback+0xe8>)
   163ba:	0019      	movs	r1, r3
   163bc:	2001      	movs	r0, #1
   163be:	4b30      	ldr	r3, [pc, #192]	; (16480 <mqtt_callback+0xec>)
   163c0:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   163c2:	4930      	ldr	r1, [pc, #192]	; (16484 <mqtt_callback+0xf0>)
   163c4:	4a30      	ldr	r2, [pc, #192]	; (16488 <mqtt_callback+0xf4>)
   163c6:	68f8      	ldr	r0, [r7, #12]
   163c8:	2300      	movs	r3, #0
   163ca:	9305      	str	r3, [sp, #20]
   163cc:	2300      	movs	r3, #0
   163ce:	9304      	str	r3, [sp, #16]
   163d0:	2300      	movs	r3, #0
   163d2:	9303      	str	r3, [sp, #12]
   163d4:	2300      	movs	r3, #0
   163d6:	9302      	str	r3, [sp, #8]
   163d8:	2300      	movs	r3, #0
   163da:	9301      	str	r3, [sp, #4]
   163dc:	4b2a      	ldr	r3, [pc, #168]	; (16488 <mqtt_callback+0xf4>)
   163de:	9300      	str	r3, [sp, #0]
   163e0:	000b      	movs	r3, r1
   163e2:	2101      	movs	r1, #1
   163e4:	4c29      	ldr	r4, [pc, #164]	; (1648c <mqtt_callback+0xf8>)
   163e6:	47a0      	blx	r4
   163e8:	1e03      	subs	r3, r0, #0
   163ea:	d005      	beq.n	163f8 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   163ec:	4b28      	ldr	r3, [pc, #160]	; (16490 <mqtt_callback+0xfc>)
   163ee:	0019      	movs	r1, r3
   163f0:	2001      	movs	r0, #1
   163f2:	4b23      	ldr	r3, [pc, #140]	; (16480 <mqtt_callback+0xec>)
   163f4:	4798      	blx	r3
        } break;
   163f6:	e03d      	b.n	16474 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   163f8:	4b26      	ldr	r3, [pc, #152]	; (16494 <mqtt_callback+0x100>)
   163fa:	0019      	movs	r1, r3
   163fc:	2001      	movs	r0, #1
   163fe:	4b20      	ldr	r3, [pc, #128]	; (16480 <mqtt_callback+0xec>)
   16400:	4798      	blx	r3
        } break;
   16402:	e037      	b.n	16474 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16404:	4a24      	ldr	r2, [pc, #144]	; (16498 <mqtt_callback+0x104>)
   16406:	4b25      	ldr	r3, [pc, #148]	; (1649c <mqtt_callback+0x108>)
   16408:	0019      	movs	r1, r3
   1640a:	2001      	movs	r0, #1
   1640c:	4b1c      	ldr	r3, [pc, #112]	; (16480 <mqtt_callback+0xec>)
   1640e:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16410:	4a21      	ldr	r2, [pc, #132]	; (16498 <mqtt_callback+0x104>)
   16412:	68fb      	ldr	r3, [r7, #12]
   16414:	0011      	movs	r1, r2
   16416:	0018      	movs	r0, r3
   16418:	4b21      	ldr	r3, [pc, #132]	; (164a0 <mqtt_callback+0x10c>)
   1641a:	4798      	blx	r3
        } break;
   1641c:	e02a      	b.n	16474 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1641e:	687b      	ldr	r3, [r7, #4]
   16420:	781b      	ldrb	r3, [r3, #0]
   16422:	2b00      	cmp	r3, #0
   16424:	d117      	bne.n	16456 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   16426:	4b1f      	ldr	r3, [pc, #124]	; (164a4 <mqtt_callback+0x110>)
   16428:	491f      	ldr	r1, [pc, #124]	; (164a8 <mqtt_callback+0x114>)
   1642a:	68f8      	ldr	r0, [r7, #12]
   1642c:	2202      	movs	r2, #2
   1642e:	4c1f      	ldr	r4, [pc, #124]	; (164ac <mqtt_callback+0x118>)
   16430:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   16432:	4b1f      	ldr	r3, [pc, #124]	; (164b0 <mqtt_callback+0x11c>)
   16434:	491f      	ldr	r1, [pc, #124]	; (164b4 <mqtt_callback+0x120>)
   16436:	68f8      	ldr	r0, [r7, #12]
   16438:	2202      	movs	r2, #2
   1643a:	4c1c      	ldr	r4, [pc, #112]	; (164ac <mqtt_callback+0x118>)
   1643c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   1643e:	4b1e      	ldr	r3, [pc, #120]	; (164b8 <mqtt_callback+0x124>)
   16440:	491e      	ldr	r1, [pc, #120]	; (164bc <mqtt_callback+0x128>)
   16442:	68f8      	ldr	r0, [r7, #12]
   16444:	2202      	movs	r2, #2
   16446:	4c19      	ldr	r4, [pc, #100]	; (164ac <mqtt_callback+0x118>)
   16448:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   1644a:	4b1d      	ldr	r3, [pc, #116]	; (164c0 <mqtt_callback+0x12c>)
   1644c:	0019      	movs	r1, r3
   1644e:	2001      	movs	r0, #1
   16450:	4b0b      	ldr	r3, [pc, #44]	; (16480 <mqtt_callback+0xec>)
   16452:	4798      	blx	r3
            break;
   16454:	e00e      	b.n	16474 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16456:	687b      	ldr	r3, [r7, #4]
   16458:	781b      	ldrb	r3, [r3, #0]
   1645a:	001a      	movs	r2, r3
   1645c:	4b19      	ldr	r3, [pc, #100]	; (164c4 <mqtt_callback+0x130>)
   1645e:	0019      	movs	r1, r3
   16460:	2001      	movs	r0, #1
   16462:	4b07      	ldr	r3, [pc, #28]	; (16480 <mqtt_callback+0xec>)
   16464:	4798      	blx	r3
            break;
   16466:	e005      	b.n	16474 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   16468:	4b17      	ldr	r3, [pc, #92]	; (164c8 <mqtt_callback+0x134>)
   1646a:	0019      	movs	r1, r3
   1646c:	2001      	movs	r0, #1
   1646e:	4b04      	ldr	r3, [pc, #16]	; (16480 <mqtt_callback+0xec>)
   16470:	4798      	blx	r3
            break;
   16472:	46c0      	nop			; (mov r8, r8)
}
   16474:	46c0      	nop			; (mov r8, r8)
   16476:	46bd      	mov	sp, r7
   16478:	b005      	add	sp, #20
   1647a:	bd90      	pop	{r4, r7, pc}
   1647c:	00035e9c 	.word	0x00035e9c
   16480:	0001d851 	.word	0x0001d851
   16484:	00035eb8 	.word	0x00035eb8
   16488:	00035ec4 	.word	0x00035ec4
   1648c:	0002f221 	.word	0x0002f221
   16490:	00035ecc 	.word	0x00035ecc
   16494:	00035ef4 	.word	0x00035ef4
   16498:	000357c4 	.word	0x000357c4
   1649c:	00035f10 	.word	0x00035f10
   164a0:	0002f1d9 	.word	0x0002f1d9
   164a4:	00016195 	.word	0x00016195
   164a8:	00035f48 	.word	0x00035f48
   164ac:	0002f3c1 	.word	0x0002f3c1
   164b0:	000160a1 	.word	0x000160a1
   164b4:	00035e78 	.word	0x00035e78
   164b8:	000162fd 	.word	0x000162fd
   164bc:	00035f5c 	.word	0x00035f5c
   164c0:	00035f70 	.word	0x00035f70
   164c4:	00035f84 	.word	0x00035f84
   164c8:	00035fb8 	.word	0x00035fb8

000164cc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   164cc:	b580      	push	{r7, lr}
   164ce:	b088      	sub	sp, #32
   164d0:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   164d2:	1d3b      	adds	r3, r7, #4
   164d4:	0018      	movs	r0, r3
   164d6:	4b1f      	ldr	r3, [pc, #124]	; (16554 <configure_mqtt+0x88>)
   164d8:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   164da:	1d3b      	adds	r3, r7, #4
   164dc:	4a1e      	ldr	r2, [pc, #120]	; (16558 <configure_mqtt+0x8c>)
   164de:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   164e0:	1d3b      	adds	r3, r7, #4
   164e2:	2280      	movs	r2, #128	; 0x80
   164e4:	0092      	lsls	r2, r2, #2
   164e6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   164e8:	1d3b      	adds	r3, r7, #4
   164ea:	4a1c      	ldr	r2, [pc, #112]	; (1655c <configure_mqtt+0x90>)
   164ec:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   164ee:	1d3b      	adds	r3, r7, #4
   164f0:	2280      	movs	r2, #128	; 0x80
   164f2:	0092      	lsls	r2, r2, #2
   164f4:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   164f6:	1d3b      	adds	r3, r7, #4
   164f8:	4a19      	ldr	r2, [pc, #100]	; (16560 <configure_mqtt+0x94>)
   164fa:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   164fc:	1d3b      	adds	r3, r7, #4
   164fe:	4a19      	ldr	r2, [pc, #100]	; (16564 <configure_mqtt+0x98>)
   16500:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16502:	1d3a      	adds	r2, r7, #4
   16504:	4b18      	ldr	r3, [pc, #96]	; (16568 <configure_mqtt+0x9c>)
   16506:	0011      	movs	r1, r2
   16508:	0018      	movs	r0, r3
   1650a:	4b18      	ldr	r3, [pc, #96]	; (1656c <configure_mqtt+0xa0>)
   1650c:	4798      	blx	r3
   1650e:	0003      	movs	r3, r0
   16510:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16512:	69fb      	ldr	r3, [r7, #28]
   16514:	2b00      	cmp	r3, #0
   16516:	da06      	bge.n	16526 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   16518:	69fa      	ldr	r2, [r7, #28]
   1651a:	4b15      	ldr	r3, [pc, #84]	; (16570 <configure_mqtt+0xa4>)
   1651c:	0019      	movs	r1, r3
   1651e:	2001      	movs	r0, #1
   16520:	4b14      	ldr	r3, [pc, #80]	; (16574 <configure_mqtt+0xa8>)
   16522:	4798      	blx	r3
        while (1) {
   16524:	e7fe      	b.n	16524 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16526:	4a14      	ldr	r2, [pc, #80]	; (16578 <configure_mqtt+0xac>)
   16528:	4b0f      	ldr	r3, [pc, #60]	; (16568 <configure_mqtt+0x9c>)
   1652a:	0011      	movs	r1, r2
   1652c:	0018      	movs	r0, r3
   1652e:	4b13      	ldr	r3, [pc, #76]	; (1657c <configure_mqtt+0xb0>)
   16530:	4798      	blx	r3
   16532:	0003      	movs	r3, r0
   16534:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16536:	69fb      	ldr	r3, [r7, #28]
   16538:	2b00      	cmp	r3, #0
   1653a:	da06      	bge.n	1654a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   1653c:	69fa      	ldr	r2, [r7, #28]
   1653e:	4b10      	ldr	r3, [pc, #64]	; (16580 <configure_mqtt+0xb4>)
   16540:	0019      	movs	r1, r3
   16542:	2001      	movs	r0, #1
   16544:	4b0b      	ldr	r3, [pc, #44]	; (16574 <configure_mqtt+0xa8>)
   16546:	4798      	blx	r3
        while (1) {
   16548:	e7fe      	b.n	16548 <configure_mqtt+0x7c>
        }
    }
}
   1654a:	46c0      	nop			; (mov r8, r8)
   1654c:	46bd      	mov	sp, r7
   1654e:	b008      	add	sp, #32
   16550:	bd80      	pop	{r7, pc}
   16552:	46c0      	nop			; (mov r8, r8)
   16554:	0002f119 	.word	0x0002f119
   16558:	2000072c 	.word	0x2000072c
   1655c:	2000092c 	.word	0x2000092c
   16560:	0000075b 	.word	0x0000075b
   16564:	00001770 	.word	0x00001770
   16568:	200006f4 	.word	0x200006f4
   1656c:	0002f069 	.word	0x0002f069
   16570:	00035fcc 	.word	0x00035fcc
   16574:	0001d851 	.word	0x0001d851
   16578:	00016395 	.word	0x00016395
   1657c:	0002f159 	.word	0x0002f159
   16580:	00036000 	.word	0x00036000

00016584 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   16584:	b580      	push	{r7, lr}
   16586:	b084      	sub	sp, #16
   16588:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   1658a:	1d3b      	adds	r3, r7, #4
   1658c:	0018      	movs	r0, r3
   1658e:	4b0b      	ldr	r3, [pc, #44]	; (165bc <configure_extint_channel+0x38>)
   16590:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   16592:	1d3b      	adds	r3, r7, #4
   16594:	2237      	movs	r2, #55	; 0x37
   16596:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16598:	1d3b      	adds	r3, r7, #4
   1659a:	2200      	movs	r2, #0
   1659c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1659e:	1d3b      	adds	r3, r7, #4
   165a0:	2201      	movs	r2, #1
   165a2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   165a4:	1d3b      	adds	r3, r7, #4
   165a6:	2202      	movs	r2, #2
   165a8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   165aa:	1d3b      	adds	r3, r7, #4
   165ac:	0019      	movs	r1, r3
   165ae:	2007      	movs	r0, #7
   165b0:	4b03      	ldr	r3, [pc, #12]	; (165c0 <configure_extint_channel+0x3c>)
   165b2:	4798      	blx	r3
}
   165b4:	46c0      	nop			; (mov r8, r8)
   165b6:	46bd      	mov	sp, r7
   165b8:	b004      	add	sp, #16
   165ba:	bd80      	pop	{r7, pc}
   165bc:	00026251 	.word	0x00026251
   165c0:	00026285 	.word	0x00026285

000165c4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   165c4:	b580      	push	{r7, lr}
   165c6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   165c8:	4b06      	ldr	r3, [pc, #24]	; (165e4 <configure_extint_callbacks+0x20>)
   165ca:	2200      	movs	r2, #0
   165cc:	2107      	movs	r1, #7
   165ce:	0018      	movs	r0, r3
   165d0:	4b05      	ldr	r3, [pc, #20]	; (165e8 <configure_extint_callbacks+0x24>)
   165d2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   165d4:	2100      	movs	r1, #0
   165d6:	2007      	movs	r0, #7
   165d8:	4b04      	ldr	r3, [pc, #16]	; (165ec <configure_extint_callbacks+0x28>)
   165da:	4798      	blx	r3
}
   165dc:	46c0      	nop			; (mov r8, r8)
   165de:	46bd      	mov	sp, r7
   165e0:	bd80      	pop	{r7, pc}
   165e2:	46c0      	nop			; (mov r8, r8)
   165e4:	000165f1 	.word	0x000165f1
   165e8:	00025e51 	.word	0x00025e51
   165ec:	00025eb5 	.word	0x00025eb5

000165f0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   165f0:	b5b0      	push	{r4, r5, r7, lr}
   165f2:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   165f4:	4b0c      	ldr	r3, [pc, #48]	; (16628 <extint_detection_callback+0x38>)
   165f6:	681b      	ldr	r3, [r3, #0]
   165f8:	1c5a      	adds	r2, r3, #1
   165fa:	4b0b      	ldr	r3, [pc, #44]	; (16628 <extint_detection_callback+0x38>)
   165fc:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   165fe:	4b0a      	ldr	r3, [pc, #40]	; (16628 <extint_detection_callback+0x38>)
   16600:	681b      	ldr	r3, [r3, #0]
   16602:	2b28      	cmp	r3, #40	; 0x28
   16604:	d902      	bls.n	1660c <extint_detection_callback+0x1c>
   16606:	4b08      	ldr	r3, [pc, #32]	; (16628 <extint_detection_callback+0x38>)
   16608:	2201      	movs	r2, #1
   1660a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   1660c:	4b06      	ldr	r3, [pc, #24]	; (16628 <extint_detection_callback+0x38>)
   1660e:	681b      	ldr	r3, [r3, #0]
   16610:	4a06      	ldr	r2, [pc, #24]	; (1662c <extint_detection_callback+0x3c>)
   16612:	4807      	ldr	r0, [pc, #28]	; (16630 <extint_detection_callback+0x40>)
   16614:	213f      	movs	r1, #63	; 0x3f
   16616:	4c07      	ldr	r4, [pc, #28]	; (16634 <extint_detection_callback+0x44>)
   16618:	47a0      	blx	r4
    isPressed = true;
   1661a:	4b07      	ldr	r3, [pc, #28]	; (16638 <extint_detection_callback+0x48>)
   1661c:	2201      	movs	r2, #1
   1661e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   16620:	46c0      	nop			; (mov r8, r8)
   16622:	46bd      	mov	sp, r7
   16624:	bdb0      	pop	{r4, r5, r7, pc}
   16626:	46c0      	nop			; (mov r8, r8)
   16628:	20000098 	.word	0x20000098
   1662c:	00036034 	.word	0x00036034
   16630:	20000058 	.word	0x20000058
   16634:	0003429d 	.word	0x0003429d
   16638:	20000b2c 	.word	0x20000b2c

0001663c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   1663c:	b580      	push	{r7, lr}
   1663e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   16640:	4a15      	ldr	r2, [pc, #84]	; (16698 <HTTP_DownloadFileInit+0x5c>)
   16642:	4b16      	ldr	r3, [pc, #88]	; (1669c <HTTP_DownloadFileInit+0x60>)
   16644:	0011      	movs	r1, r2
   16646:	0018      	movs	r0, r3
   16648:	4b15      	ldr	r3, [pc, #84]	; (166a0 <HTTP_DownloadFileInit+0x64>)
   1664a:	4798      	blx	r3
   1664c:	1e03      	subs	r3, r0, #0
   1664e:	d008      	beq.n	16662 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16650:	4b14      	ldr	r3, [pc, #80]	; (166a4 <HTTP_DownloadFileInit+0x68>)
   16652:	0019      	movs	r1, r3
   16654:	2001      	movs	r0, #1
   16656:	4b14      	ldr	r3, [pc, #80]	; (166a8 <HTTP_DownloadFileInit+0x6c>)
   16658:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   1665a:	e002      	b.n	16662 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   1665c:	2000      	movs	r0, #0
   1665e:	4b13      	ldr	r3, [pc, #76]	; (166ac <HTTP_DownloadFileInit+0x70>)
   16660:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   16662:	4b0e      	ldr	r3, [pc, #56]	; (1669c <HTTP_DownloadFileInit+0x60>)
   16664:	2234      	movs	r2, #52	; 0x34
   16666:	5c9b      	ldrb	r3, [r3, r2]
   16668:	2b00      	cmp	r3, #0
   1666a:	d1f7      	bne.n	1665c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   1666c:	4b10      	ldr	r3, [pc, #64]	; (166b0 <HTTP_DownloadFileInit+0x74>)
   1666e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   16670:	4b10      	ldr	r3, [pc, #64]	; (166b4 <HTTP_DownloadFileInit+0x78>)
   16672:	2201      	movs	r2, #1
   16674:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   16676:	4a10      	ldr	r2, [pc, #64]	; (166b8 <HTTP_DownloadFileInit+0x7c>)
   16678:	4b10      	ldr	r3, [pc, #64]	; (166bc <HTTP_DownloadFileInit+0x80>)
   1667a:	0011      	movs	r1, r2
   1667c:	0018      	movs	r0, r3
   1667e:	4b10      	ldr	r3, [pc, #64]	; (166c0 <HTTP_DownloadFileInit+0x84>)
   16680:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   16682:	4b10      	ldr	r3, [pc, #64]	; (166c4 <HTTP_DownloadFileInit+0x88>)
   16684:	4798      	blx	r3

    start_download();
   16686:	4b10      	ldr	r3, [pc, #64]	; (166c8 <HTTP_DownloadFileInit+0x8c>)
   16688:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1668a:	4b10      	ldr	r3, [pc, #64]	; (166cc <HTTP_DownloadFileInit+0x90>)
   1668c:	2203      	movs	r2, #3
   1668e:	701a      	strb	r2, [r3, #0]
}
   16690:	46c0      	nop			; (mov r8, r8)
   16692:	46bd      	mov	sp, r7
   16694:	bd80      	pop	{r7, pc}
   16696:	46c0      	nop			; (mov r8, r8)
   16698:	000357c4 	.word	0x000357c4
   1669c:	200006f4 	.word	0x200006f4
   166a0:	0002f30d 	.word	0x0002f30d
   166a4:	00035bc8 	.word	0x00035bc8
   166a8:	0001d851 	.word	0x0001d851
   166ac:	00021941 	.word	0x00021941
   166b0:	00024efd 	.word	0x00024efd
   166b4:	20000494 	.word	0x20000494
   166b8:	00015d01 	.word	0x00015d01
   166bc:	00015ccd 	.word	0x00015ccd
   166c0:	00024f45 	.word	0x00024f45
   166c4:	00024ead 	.word	0x00024ead
   166c8:	000158f5 	.word	0x000158f5
   166cc:	20000479 	.word	0x20000479

000166d0 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   166d0:	b590      	push	{r4, r7, lr}
   166d2:	b085      	sub	sp, #20
   166d4:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   166d6:	e009      	b.n	166ec <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   166d8:	2000      	movs	r0, #0
   166da:	4b2a      	ldr	r3, [pc, #168]	; (16784 <HTTP_DownloadFileTransaction+0xb4>)
   166dc:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   166de:	4b2a      	ldr	r3, [pc, #168]	; (16788 <HTTP_DownloadFileTransaction+0xb8>)
   166e0:	0018      	movs	r0, r3
   166e2:	4b2a      	ldr	r3, [pc, #168]	; (1678c <HTTP_DownloadFileTransaction+0xbc>)
   166e4:	4798      	blx	r3
        vTaskDelay(5);
   166e6:	2005      	movs	r0, #5
   166e8:	4b29      	ldr	r3, [pc, #164]	; (16790 <HTTP_DownloadFileTransaction+0xc0>)
   166ea:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   166ec:	2010      	movs	r0, #16
   166ee:	4b29      	ldr	r3, [pc, #164]	; (16794 <HTTP_DownloadFileTransaction+0xc4>)
   166f0:	4798      	blx	r3
   166f2:	0003      	movs	r3, r0
   166f4:	001a      	movs	r2, r3
   166f6:	2301      	movs	r3, #1
   166f8:	4053      	eors	r3, r2
   166fa:	b2db      	uxtb	r3, r3
   166fc:	2b00      	cmp	r3, #0
   166fe:	d009      	beq.n	16714 <HTTP_DownloadFileTransaction+0x44>
   16700:	2020      	movs	r0, #32
   16702:	4b24      	ldr	r3, [pc, #144]	; (16794 <HTTP_DownloadFileTransaction+0xc4>)
   16704:	4798      	blx	r3
   16706:	0003      	movs	r3, r0
   16708:	001a      	movs	r2, r3
   1670a:	2301      	movs	r3, #1
   1670c:	4053      	eors	r3, r2
   1670e:	b2db      	uxtb	r3, r3
   16710:	2b00      	cmp	r3, #0
   16712:	d1e1      	bne.n	166d8 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   16714:	4b20      	ldr	r3, [pc, #128]	; (16798 <HTTP_DownloadFileTransaction+0xc8>)
   16716:	4798      	blx	r3
    vTaskDelay(1000);
   16718:	23fa      	movs	r3, #250	; 0xfa
   1671a:	009b      	lsls	r3, r3, #2
   1671c:	0018      	movs	r0, r3
   1671e:	4b1c      	ldr	r3, [pc, #112]	; (16790 <HTTP_DownloadFileTransaction+0xc0>)
   16720:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   16722:	4b1e      	ldr	r3, [pc, #120]	; (1679c <HTTP_DownloadFileTransaction+0xcc>)
   16724:	2200      	movs	r2, #0
   16726:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   16728:	003b      	movs	r3, r7
   1672a:	4a1d      	ldr	r2, [pc, #116]	; (167a0 <HTTP_DownloadFileTransaction+0xd0>)
   1672c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1672e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16730:	003b      	movs	r3, r7
   16732:	2230      	movs	r2, #48	; 0x30
   16734:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16736:	230f      	movs	r3, #15
   16738:	18fc      	adds	r4, r7, r3
   1673a:	0039      	movs	r1, r7
   1673c:	4b19      	ldr	r3, [pc, #100]	; (167a4 <HTTP_DownloadFileTransaction+0xd4>)
   1673e:	220a      	movs	r2, #10
   16740:	0018      	movs	r0, r3
   16742:	4b19      	ldr	r3, [pc, #100]	; (167a8 <HTTP_DownloadFileTransaction+0xd8>)
   16744:	4798      	blx	r3
   16746:	0003      	movs	r3, r0
   16748:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1674a:	230f      	movs	r3, #15
   1674c:	18fb      	adds	r3, r7, r3
   1674e:	781b      	ldrb	r3, [r3, #0]
   16750:	2b00      	cmp	r3, #0
   16752:	d008      	beq.n	16766 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   16754:	230f      	movs	r3, #15
   16756:	18fb      	adds	r3, r7, r3
   16758:	781a      	ldrb	r2, [r3, #0]
   1675a:	4b14      	ldr	r3, [pc, #80]	; (167ac <HTTP_DownloadFileTransaction+0xdc>)
   1675c:	0019      	movs	r1, r3
   1675e:	2000      	movs	r0, #0
   16760:	4b13      	ldr	r3, [pc, #76]	; (167b0 <HTTP_DownloadFileTransaction+0xe0>)
   16762:	4798      	blx	r3
   16764:	e003      	b.n	1676e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   16766:	4b13      	ldr	r3, [pc, #76]	; (167b4 <HTTP_DownloadFileTransaction+0xe4>)
   16768:	0018      	movs	r0, r3
   1676a:	4b13      	ldr	r3, [pc, #76]	; (167b8 <HTTP_DownloadFileTransaction+0xe8>)
   1676c:	4798      	blx	r3
    }
	
	f_close(&file_object);
   1676e:	4b0d      	ldr	r3, [pc, #52]	; (167a4 <HTTP_DownloadFileTransaction+0xd4>)
   16770:	0018      	movs	r0, r3
   16772:	4b12      	ldr	r3, [pc, #72]	; (167bc <HTTP_DownloadFileTransaction+0xec>)
   16774:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   16776:	4b12      	ldr	r3, [pc, #72]	; (167c0 <HTTP_DownloadFileTransaction+0xf0>)
   16778:	2200      	movs	r2, #0
   1677a:	701a      	strb	r2, [r3, #0]
}
   1677c:	46c0      	nop			; (mov r8, r8)
   1677e:	46bd      	mov	sp, r7
   16780:	b005      	add	sp, #20
   16782:	bd90      	pop	{r4, r7, pc}
   16784:	00021941 	.word	0x00021941
   16788:	20004768 	.word	0x20004768
   1678c:	00032035 	.word	0x00032035
   16790:	0001bb11 	.word	0x0001bb11
   16794:	000155cd 	.word	0x000155cd
   16798:	00024efd 	.word	0x00024efd
   1679c:	20000494 	.word	0x20000494
   167a0:	0003606c 	.word	0x0003606c
   167a4:	200006c8 	.word	0x200006c8
   167a8:	0002d2fd 	.word	0x0002d2fd
   167ac:	00036048 	.word	0x00036048
   167b0:	0001d851 	.word	0x0001d851
   167b4:	00036058 	.word	0x00036058
   167b8:	0001d765 	.word	0x0001d765
   167bc:	0002dcfd 	.word	0x0002dcfd
   167c0:	20000479 	.word	0x20000479

000167c4 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   167c4:	b580      	push	{r7, lr}
   167c6:	af00      	add	r7, sp, #0
    socketDeinit();
   167c8:	4b18      	ldr	r3, [pc, #96]	; (1682c <MQTT_InitRoutine+0x68>)
   167ca:	4798      	blx	r3
    configure_mqtt();
   167cc:	4b18      	ldr	r3, [pc, #96]	; (16830 <MQTT_InitRoutine+0x6c>)
   167ce:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   167d0:	4a18      	ldr	r2, [pc, #96]	; (16834 <MQTT_InitRoutine+0x70>)
   167d2:	4b19      	ldr	r3, [pc, #100]	; (16838 <MQTT_InitRoutine+0x74>)
   167d4:	0011      	movs	r1, r2
   167d6:	0018      	movs	r0, r3
   167d8:	4b18      	ldr	r3, [pc, #96]	; (1683c <MQTT_InitRoutine+0x78>)
   167da:	4798      	blx	r3
    socketInit();
   167dc:	4b18      	ldr	r3, [pc, #96]	; (16840 <MQTT_InitRoutine+0x7c>)
   167de:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   167e0:	4b18      	ldr	r3, [pc, #96]	; (16844 <MQTT_InitRoutine+0x80>)
   167e2:	2234      	movs	r2, #52	; 0x34
   167e4:	5c9b      	ldrb	r3, [r3, r2]
   167e6:	2201      	movs	r2, #1
   167e8:	4053      	eors	r3, r2
   167ea:	b2db      	uxtb	r3, r3
   167ec:	2b00      	cmp	r3, #0
   167ee:	d00c      	beq.n	1680a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   167f0:	4a15      	ldr	r2, [pc, #84]	; (16848 <MQTT_InitRoutine+0x84>)
   167f2:	4b14      	ldr	r3, [pc, #80]	; (16844 <MQTT_InitRoutine+0x80>)
   167f4:	0011      	movs	r1, r2
   167f6:	0018      	movs	r0, r3
   167f8:	4b14      	ldr	r3, [pc, #80]	; (1684c <MQTT_InitRoutine+0x88>)
   167fa:	4798      	blx	r3
   167fc:	1e03      	subs	r3, r0, #0
   167fe:	d004      	beq.n	1680a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16800:	4b13      	ldr	r3, [pc, #76]	; (16850 <MQTT_InitRoutine+0x8c>)
   16802:	0019      	movs	r1, r3
   16804:	2001      	movs	r0, #1
   16806:	4b13      	ldr	r3, [pc, #76]	; (16854 <MQTT_InitRoutine+0x90>)
   16808:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1680a:	4b0e      	ldr	r3, [pc, #56]	; (16844 <MQTT_InitRoutine+0x80>)
   1680c:	2234      	movs	r2, #52	; 0x34
   1680e:	5c9b      	ldrb	r3, [r3, r2]
   16810:	2b00      	cmp	r3, #0
   16812:	d004      	beq.n	1681e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   16814:	4b10      	ldr	r3, [pc, #64]	; (16858 <MQTT_InitRoutine+0x94>)
   16816:	0019      	movs	r1, r3
   16818:	2001      	movs	r0, #1
   1681a:	4b0e      	ldr	r3, [pc, #56]	; (16854 <MQTT_InitRoutine+0x90>)
   1681c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1681e:	4b0f      	ldr	r3, [pc, #60]	; (1685c <MQTT_InitRoutine+0x98>)
   16820:	2201      	movs	r2, #1
   16822:	701a      	strb	r2, [r3, #0]
}
   16824:	46c0      	nop			; (mov r8, r8)
   16826:	46bd      	mov	sp, r7
   16828:	bd80      	pop	{r7, pc}
   1682a:	46c0      	nop			; (mov r8, r8)
   1682c:	00024efd 	.word	0x00024efd
   16830:	000164cd 	.word	0x000164cd
   16834:	0001607d 	.word	0x0001607d
   16838:	00016049 	.word	0x00016049
   1683c:	00024f45 	.word	0x00024f45
   16840:	00024ead 	.word	0x00024ead
   16844:	200006f4 	.word	0x200006f4
   16848:	000357c4 	.word	0x000357c4
   1684c:	0002f1d9 	.word	0x0002f1d9
   16850:	00035bc8 	.word	0x00035bc8
   16854:	0001d851 	.word	0x0001d851
   16858:	00036078 	.word	0x00036078
   1685c:	20000479 	.word	0x20000479

00016860 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   16860:	b580      	push	{r7, lr}
   16862:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16864:	2000      	movs	r0, #0
   16866:	4b0d      	ldr	r3, [pc, #52]	; (1689c <MQTT_HandleTransactions+0x3c>)
   16868:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1686a:	4b0d      	ldr	r3, [pc, #52]	; (168a0 <MQTT_HandleTransactions+0x40>)
   1686c:	0018      	movs	r0, r3
   1686e:	4b0d      	ldr	r3, [pc, #52]	; (168a4 <MQTT_HandleTransactions+0x44>)
   16870:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   16872:	4b0d      	ldr	r3, [pc, #52]	; (168a8 <MQTT_HandleTransactions+0x48>)
   16874:	4798      	blx	r3
    MQTT_HandleImuMessages();
   16876:	4b0d      	ldr	r3, [pc, #52]	; (168ac <MQTT_HandleTransactions+0x4c>)
   16878:	4798      	blx	r3
	MQTT_HandleTempMessages();
   1687a:	4b0d      	ldr	r3, [pc, #52]	; (168b0 <MQTT_HandleTransactions+0x50>)
   1687c:	4798      	blx	r3
	MQTT_HandleHeartrateMessages();
   1687e:	4b0d      	ldr	r3, [pc, #52]	; (168b4 <MQTT_HandleTransactions+0x54>)
   16880:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16882:	4b0d      	ldr	r3, [pc, #52]	; (168b8 <MQTT_HandleTransactions+0x58>)
   16884:	2234      	movs	r2, #52	; 0x34
   16886:	5c9b      	ldrb	r3, [r3, r2]
   16888:	2b00      	cmp	r3, #0
   1688a:	d004      	beq.n	16896 <MQTT_HandleTransactions+0x36>
   1688c:	4b0a      	ldr	r3, [pc, #40]	; (168b8 <MQTT_HandleTransactions+0x58>)
   1688e:	2164      	movs	r1, #100	; 0x64
   16890:	0018      	movs	r0, r3
   16892:	4b0a      	ldr	r3, [pc, #40]	; (168bc <MQTT_HandleTransactions+0x5c>)
   16894:	4798      	blx	r3
}
   16896:	46c0      	nop			; (mov r8, r8)
   16898:	46bd      	mov	sp, r7
   1689a:	bd80      	pop	{r7, pc}
   1689c:	00021941 	.word	0x00021941
   168a0:	20004768 	.word	0x20004768
   168a4:	00032035 	.word	0x00032035
   168a8:	00016a35 	.word	0x00016a35
   168ac:	000168c1 	.word	0x000168c1
   168b0:	0001694d 	.word	0x0001694d
   168b4:	000169c1 	.word	0x000169c1
   168b8:	200006f4 	.word	0x200006f4
   168bc:	0002f409 	.word	0x0002f409

000168c0 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   168c0:	b590      	push	{r4, r7, lr}
   168c2:	b085      	sub	sp, #20
   168c4:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   168c6:	4b18      	ldr	r3, [pc, #96]	; (16928 <MQTT_HandleImuMessages+0x68>)
   168c8:	681b      	ldr	r3, [r3, #0]
   168ca:	0039      	movs	r1, r7
   168cc:	2200      	movs	r2, #0
   168ce:	0018      	movs	r0, r3
   168d0:	4b16      	ldr	r3, [pc, #88]	; (1692c <MQTT_HandleImuMessages+0x6c>)
   168d2:	4798      	blx	r3
   168d4:	0003      	movs	r3, r0
   168d6:	2b01      	cmp	r3, #1
   168d8:	d121      	bne.n	1691e <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   168da:	003b      	movs	r3, r7
   168dc:	2200      	movs	r2, #0
   168de:	5e9b      	ldrsh	r3, [r3, r2]
   168e0:	001c      	movs	r4, r3
   168e2:	003b      	movs	r3, r7
   168e4:	2202      	movs	r2, #2
   168e6:	5e9b      	ldrsh	r3, [r3, r2]
   168e8:	0019      	movs	r1, r3
   168ea:	003b      	movs	r3, r7
   168ec:	2204      	movs	r2, #4
   168ee:	5e9b      	ldrsh	r3, [r3, r2]
   168f0:	4a0f      	ldr	r2, [pc, #60]	; (16930 <MQTT_HandleImuMessages+0x70>)
   168f2:	4810      	ldr	r0, [pc, #64]	; (16934 <MQTT_HandleImuMessages+0x74>)
   168f4:	9301      	str	r3, [sp, #4]
   168f6:	9100      	str	r1, [sp, #0]
   168f8:	0023      	movs	r3, r4
   168fa:	213f      	movs	r1, #63	; 0x3f
   168fc:	4c0e      	ldr	r4, [pc, #56]	; (16938 <MQTT_HandleImuMessages+0x78>)
   168fe:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16900:	4b0c      	ldr	r3, [pc, #48]	; (16934 <MQTT_HandleImuMessages+0x74>)
   16902:	0018      	movs	r0, r3
   16904:	4b0d      	ldr	r3, [pc, #52]	; (1693c <MQTT_HandleImuMessages+0x7c>)
   16906:	4798      	blx	r3
   16908:	0004      	movs	r4, r0
   1690a:	4a0a      	ldr	r2, [pc, #40]	; (16934 <MQTT_HandleImuMessages+0x74>)
   1690c:	490c      	ldr	r1, [pc, #48]	; (16940 <MQTT_HandleImuMessages+0x80>)
   1690e:	480d      	ldr	r0, [pc, #52]	; (16944 <MQTT_HandleImuMessages+0x84>)
   16910:	2300      	movs	r3, #0
   16912:	9301      	str	r3, [sp, #4]
   16914:	2301      	movs	r3, #1
   16916:	9300      	str	r3, [sp, #0]
   16918:	0023      	movs	r3, r4
   1691a:	4c0b      	ldr	r4, [pc, #44]	; (16948 <MQTT_HandleImuMessages+0x88>)
   1691c:	47a0      	blx	r4
    }
}
   1691e:	46c0      	nop			; (mov r8, r8)
   16920:	46bd      	mov	sp, r7
   16922:	b003      	add	sp, #12
   16924:	bd90      	pop	{r4, r7, pc}
   16926:	46c0      	nop			; (mov r8, r8)
   16928:	20000484 	.word	0x20000484
   1692c:	0001a965 	.word	0x0001a965
   16930:	00036094 	.word	0x00036094
   16934:	20000018 	.word	0x20000018
   16938:	0003429d 	.word	0x0003429d
   1693c:	000343fb 	.word	0x000343fb
   16940:	00035f5c 	.word	0x00035f5c
   16944:	200006f4 	.word	0x200006f4
   16948:	0002f355 	.word	0x0002f355

0001694c <MQTT_HandleTempMessages>:

////////////////////OUR USE CASE///////////////////////////////////////////////////////////////////////////////////////////////////

static void MQTT_HandleTempMessages(void)
{
   1694c:	b590      	push	{r4, r7, lr}
   1694e:	b085      	sub	sp, #20
   16950:	af02      	add	r7, sp, #8
	int32_t temp = 0.0;
   16952:	2300      	movs	r3, #0
   16954:	607b      	str	r3, [r7, #4]
	if (pdPASS == xQueueReceive(xQueueTemp,&temp, 0)) {
   16956:	4b11      	ldr	r3, [pc, #68]	; (1699c <MQTT_HandleTempMessages+0x50>)
   16958:	681b      	ldr	r3, [r3, #0]
   1695a:	1d39      	adds	r1, r7, #4
   1695c:	2200      	movs	r2, #0
   1695e:	0018      	movs	r0, r3
   16960:	4b0f      	ldr	r3, [pc, #60]	; (169a0 <MQTT_HandleTempMessages+0x54>)
   16962:	4798      	blx	r3
   16964:	0003      	movs	r3, r0
   16966:	2b01      	cmp	r3, #1
   16968:	d114      	bne.n	16994 <MQTT_HandleTempMessages+0x48>
		snprintf(mqtt_msg, 63, "%d" , temp);
   1696a:	687b      	ldr	r3, [r7, #4]
   1696c:	4a0d      	ldr	r2, [pc, #52]	; (169a4 <MQTT_HandleTempMessages+0x58>)
   1696e:	480e      	ldr	r0, [pc, #56]	; (169a8 <MQTT_HandleTempMessages+0x5c>)
   16970:	213f      	movs	r1, #63	; 0x3f
   16972:	4c0e      	ldr	r4, [pc, #56]	; (169ac <MQTT_HandleTempMessages+0x60>)
   16974:	47a0      	blx	r4
		//SerialConsoleWriteString("In Temperature Queue Receive \r\n");
		mqtt_publish(&mqtt_inst,TEMPERATURE_SHTC3_TOPIC , mqtt_msg, strlen(mqtt_msg), 1, 0);
   16976:	4b0c      	ldr	r3, [pc, #48]	; (169a8 <MQTT_HandleTempMessages+0x5c>)
   16978:	0018      	movs	r0, r3
   1697a:	4b0d      	ldr	r3, [pc, #52]	; (169b0 <MQTT_HandleTempMessages+0x64>)
   1697c:	4798      	blx	r3
   1697e:	0004      	movs	r4, r0
   16980:	4a09      	ldr	r2, [pc, #36]	; (169a8 <MQTT_HandleTempMessages+0x5c>)
   16982:	490c      	ldr	r1, [pc, #48]	; (169b4 <MQTT_HandleTempMessages+0x68>)
   16984:	480c      	ldr	r0, [pc, #48]	; (169b8 <MQTT_HandleTempMessages+0x6c>)
   16986:	2300      	movs	r3, #0
   16988:	9301      	str	r3, [sp, #4]
   1698a:	2301      	movs	r3, #1
   1698c:	9300      	str	r3, [sp, #0]
   1698e:	0023      	movs	r3, r4
   16990:	4c0a      	ldr	r4, [pc, #40]	; (169bc <MQTT_HandleTempMessages+0x70>)
   16992:	47a0      	blx	r4
	}
}
   16994:	46c0      	nop			; (mov r8, r8)
   16996:	46bd      	mov	sp, r7
   16998:	b003      	add	sp, #12
   1699a:	bd90      	pop	{r4, r7, pc}
   1699c:	2000048c 	.word	0x2000048c
   169a0:	0001a965 	.word	0x0001a965
   169a4:	000360b8 	.word	0x000360b8
   169a8:	20000018 	.word	0x20000018
   169ac:	0003429d 	.word	0x0003429d
   169b0:	000343fb 	.word	0x000343fb
   169b4:	000360bc 	.word	0x000360bc
   169b8:	200006f4 	.word	0x200006f4
   169bc:	0002f355 	.word	0x0002f355

000169c0 <MQTT_HandleHeartrateMessages>:

static void MQTT_HandleHeartrateMessages(void)
{
   169c0:	b590      	push	{r4, r7, lr}
   169c2:	b085      	sub	sp, #20
   169c4:	af02      	add	r7, sp, #8
	int32_t heartrate = 0;
   169c6:	2300      	movs	r3, #0
   169c8:	607b      	str	r3, [r7, #4]
	if (pdPASS == xQueueReceive(xQueueHeartrate,&heartrate, 0)) {
   169ca:	4b11      	ldr	r3, [pc, #68]	; (16a10 <MQTT_HandleHeartrateMessages+0x50>)
   169cc:	681b      	ldr	r3, [r3, #0]
   169ce:	1d39      	adds	r1, r7, #4
   169d0:	2200      	movs	r2, #0
   169d2:	0018      	movs	r0, r3
   169d4:	4b0f      	ldr	r3, [pc, #60]	; (16a14 <MQTT_HandleHeartrateMessages+0x54>)
   169d6:	4798      	blx	r3
   169d8:	0003      	movs	r3, r0
   169da:	2b01      	cmp	r3, #1
   169dc:	d114      	bne.n	16a08 <MQTT_HandleHeartrateMessages+0x48>
		snprintf(mqtt_msg, 63, "%d" , heartrate);
   169de:	687b      	ldr	r3, [r7, #4]
   169e0:	4a0d      	ldr	r2, [pc, #52]	; (16a18 <MQTT_HandleHeartrateMessages+0x58>)
   169e2:	480e      	ldr	r0, [pc, #56]	; (16a1c <MQTT_HandleHeartrateMessages+0x5c>)
   169e4:	213f      	movs	r1, #63	; 0x3f
   169e6:	4c0e      	ldr	r4, [pc, #56]	; (16a20 <MQTT_HandleHeartrateMessages+0x60>)
   169e8:	47a0      	blx	r4
		//SerialConsoleWriteString("In Heartrate Queue Receive \r\n");
		mqtt_publish(&mqtt_inst, HEARTRATE_TOPIC , mqtt_msg, strlen(mqtt_msg), 1, 0);
   169ea:	4b0c      	ldr	r3, [pc, #48]	; (16a1c <MQTT_HandleHeartrateMessages+0x5c>)
   169ec:	0018      	movs	r0, r3
   169ee:	4b0d      	ldr	r3, [pc, #52]	; (16a24 <MQTT_HandleHeartrateMessages+0x64>)
   169f0:	4798      	blx	r3
   169f2:	0004      	movs	r4, r0
   169f4:	4a09      	ldr	r2, [pc, #36]	; (16a1c <MQTT_HandleHeartrateMessages+0x5c>)
   169f6:	490c      	ldr	r1, [pc, #48]	; (16a28 <MQTT_HandleHeartrateMessages+0x68>)
   169f8:	480c      	ldr	r0, [pc, #48]	; (16a2c <MQTT_HandleHeartrateMessages+0x6c>)
   169fa:	2300      	movs	r3, #0
   169fc:	9301      	str	r3, [sp, #4]
   169fe:	2301      	movs	r3, #1
   16a00:	9300      	str	r3, [sp, #0]
   16a02:	0023      	movs	r3, r4
   16a04:	4c0a      	ldr	r4, [pc, #40]	; (16a30 <MQTT_HandleHeartrateMessages+0x70>)
   16a06:	47a0      	blx	r4
	}
}
   16a08:	46c0      	nop			; (mov r8, r8)
   16a0a:	46bd      	mov	sp, r7
   16a0c:	b003      	add	sp, #12
   16a0e:	bd90      	pop	{r4, r7, pc}
   16a10:	20000490 	.word	0x20000490
   16a14:	0001a965 	.word	0x0001a965
   16a18:	000360b8 	.word	0x000360b8
   16a1c:	20000018 	.word	0x20000018
   16a20:	0003429d 	.word	0x0003429d
   16a24:	000343fb 	.word	0x000343fb
   16a28:	000360d8 	.word	0x000360d8
   16a2c:	200006f4 	.word	0x200006f4
   16a30:	0002f355 	.word	0x0002f355

00016a34 <MQTT_HandleGameMessages>:
 ////////////////OUR USE CASE//////////////////////////////////////////////////////////////////////////////////////////////////////



static void MQTT_HandleGameMessages(void)
{
   16a34:	b590      	push	{r4, r7, lr}
   16a36:	b08b      	sub	sp, #44	; 0x2c
   16a38:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   16a3a:	4b39      	ldr	r3, [pc, #228]	; (16b20 <MQTT_HandleGameMessages+0xec>)
   16a3c:	681b      	ldr	r3, [r3, #0]
   16a3e:	2208      	movs	r2, #8
   16a40:	18b9      	adds	r1, r7, r2
   16a42:	2200      	movs	r2, #0
   16a44:	0018      	movs	r0, r3
   16a46:	4b37      	ldr	r3, [pc, #220]	; (16b24 <MQTT_HandleGameMessages+0xf0>)
   16a48:	4798      	blx	r3
   16a4a:	0003      	movs	r3, r0
   16a4c:	2b01      	cmp	r3, #1
   16a4e:	d163      	bne.n	16b18 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   16a50:	4b35      	ldr	r3, [pc, #212]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16a52:	4a36      	ldr	r2, [pc, #216]	; (16b2c <MQTT_HandleGameMessages+0xf8>)
   16a54:	ca03      	ldmia	r2!, {r0, r1}
   16a56:	c303      	stmia	r3!, {r0, r1}
   16a58:	8812      	ldrh	r2, [r2, #0]
   16a5a:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   16a5c:	2300      	movs	r3, #0
   16a5e:	61fb      	str	r3, [r7, #28]
   16a60:	e02d      	b.n	16abe <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   16a62:	2308      	movs	r3, #8
   16a64:	18fa      	adds	r2, r7, r3
   16a66:	69fb      	ldr	r3, [r7, #28]
   16a68:	18d3      	adds	r3, r2, r3
   16a6a:	781b      	ldrb	r3, [r3, #0]
   16a6c:	2bff      	cmp	r3, #255	; 0xff
   16a6e:	d02a      	beq.n	16ac6 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   16a70:	2308      	movs	r3, #8
   16a72:	18fa      	adds	r2, r7, r3
   16a74:	69fb      	ldr	r3, [r7, #28]
   16a76:	18d3      	adds	r3, r2, r3
   16a78:	781b      	ldrb	r3, [r3, #0]
   16a7a:	4a2d      	ldr	r2, [pc, #180]	; (16b30 <MQTT_HandleGameMessages+0xfc>)
   16a7c:	0038      	movs	r0, r7
   16a7e:	2103      	movs	r1, #3
   16a80:	4c2c      	ldr	r4, [pc, #176]	; (16b34 <MQTT_HandleGameMessages+0x100>)
   16a82:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   16a84:	003a      	movs	r2, r7
   16a86:	4b28      	ldr	r3, [pc, #160]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16a88:	0011      	movs	r1, r2
   16a8a:	0018      	movs	r0, r3
   16a8c:	4b2a      	ldr	r3, [pc, #168]	; (16b38 <MQTT_HandleGameMessages+0x104>)
   16a8e:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   16a90:	69fb      	ldr	r3, [r7, #28]
   16a92:	3301      	adds	r3, #1
   16a94:	2208      	movs	r2, #8
   16a96:	18ba      	adds	r2, r7, r2
   16a98:	5cd3      	ldrb	r3, [r2, r3]
   16a9a:	2bff      	cmp	r3, #255	; 0xff
   16a9c:	d00c      	beq.n	16ab8 <MQTT_HandleGameMessages+0x84>
   16a9e:	69fb      	ldr	r3, [r7, #28]
   16aa0:	3301      	adds	r3, #1
   16aa2:	2b13      	cmp	r3, #19
   16aa4:	dc08      	bgt.n	16ab8 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   16aa6:	003b      	movs	r3, r7
   16aa8:	222c      	movs	r2, #44	; 0x2c
   16aaa:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   16aac:	003a      	movs	r2, r7
   16aae:	4b1e      	ldr	r3, [pc, #120]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16ab0:	0011      	movs	r1, r2
   16ab2:	0018      	movs	r0, r3
   16ab4:	4b20      	ldr	r3, [pc, #128]	; (16b38 <MQTT_HandleGameMessages+0x104>)
   16ab6:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   16ab8:	69fb      	ldr	r3, [r7, #28]
   16aba:	3301      	adds	r3, #1
   16abc:	61fb      	str	r3, [r7, #28]
   16abe:	69fb      	ldr	r3, [r7, #28]
   16ac0:	2b13      	cmp	r3, #19
   16ac2:	ddce      	ble.n	16a62 <MQTT_HandleGameMessages+0x2e>
   16ac4:	e000      	b.n	16ac8 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   16ac6:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   16ac8:	4b17      	ldr	r3, [pc, #92]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16aca:	0018      	movs	r0, r3
   16acc:	4b1b      	ldr	r3, [pc, #108]	; (16b3c <MQTT_HandleGameMessages+0x108>)
   16ace:	4798      	blx	r3
   16ad0:	0003      	movs	r3, r0
   16ad2:	001a      	movs	r2, r3
   16ad4:	4b14      	ldr	r3, [pc, #80]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16ad6:	18d2      	adds	r2, r2, r3
   16ad8:	4b19      	ldr	r3, [pc, #100]	; (16b40 <MQTT_HandleGameMessages+0x10c>)
   16ada:	0010      	movs	r0, r2
   16adc:	0019      	movs	r1, r3
   16ade:	2303      	movs	r3, #3
   16ae0:	001a      	movs	r2, r3
   16ae2:	4b18      	ldr	r3, [pc, #96]	; (16b44 <MQTT_HandleGameMessages+0x110>)
   16ae4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   16ae6:	4b10      	ldr	r3, [pc, #64]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16ae8:	0019      	movs	r1, r3
   16aea:	2001      	movs	r0, #1
   16aec:	4b16      	ldr	r3, [pc, #88]	; (16b48 <MQTT_HandleGameMessages+0x114>)
   16aee:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   16af0:	4b16      	ldr	r3, [pc, #88]	; (16b4c <MQTT_HandleGameMessages+0x118>)
   16af2:	0019      	movs	r1, r3
   16af4:	2001      	movs	r0, #1
   16af6:	4b14      	ldr	r3, [pc, #80]	; (16b48 <MQTT_HandleGameMessages+0x114>)
   16af8:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16afa:	4b0b      	ldr	r3, [pc, #44]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16afc:	0018      	movs	r0, r3
   16afe:	4b0f      	ldr	r3, [pc, #60]	; (16b3c <MQTT_HandleGameMessages+0x108>)
   16b00:	4798      	blx	r3
   16b02:	0004      	movs	r4, r0
   16b04:	4a08      	ldr	r2, [pc, #32]	; (16b28 <MQTT_HandleGameMessages+0xf4>)
   16b06:	4912      	ldr	r1, [pc, #72]	; (16b50 <MQTT_HandleGameMessages+0x11c>)
   16b08:	4812      	ldr	r0, [pc, #72]	; (16b54 <MQTT_HandleGameMessages+0x120>)
   16b0a:	2300      	movs	r3, #0
   16b0c:	9301      	str	r3, [sp, #4]
   16b0e:	2301      	movs	r3, #1
   16b10:	9300      	str	r3, [sp, #0]
   16b12:	0023      	movs	r3, r4
   16b14:	4c10      	ldr	r4, [pc, #64]	; (16b58 <MQTT_HandleGameMessages+0x124>)
   16b16:	47a0      	blx	r4
    }
}
   16b18:	46c0      	nop			; (mov r8, r8)
   16b1a:	46bd      	mov	sp, r7
   16b1c:	b009      	add	sp, #36	; 0x24
   16b1e:	bd90      	pop	{r4, r7, pc}
   16b20:	20000480 	.word	0x20000480
   16b24:	0001a965 	.word	0x0001a965
   16b28:	20000018 	.word	0x20000018
   16b2c:	00035d64 	.word	0x00035d64
   16b30:	000360b8 	.word	0x000360b8
   16b34:	0003429d 	.word	0x0003429d
   16b38:	00034381 	.word	0x00034381
   16b3c:	000343fb 	.word	0x000343fb
   16b40:	000360f4 	.word	0x000360f4
   16b44:	0003400d 	.word	0x0003400d
   16b48:	0001d851 	.word	0x0001d851
   16b4c:	000360f8 	.word	0x000360f8
   16b50:	000360fc 	.word	0x000360fc
   16b54:	200006f4 	.word	0x200006f4
   16b58:	0002f355 	.word	0x0002f355

00016b5c <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   16b5c:	b590      	push	{r4, r7, lr}
   16b5e:	b08d      	sub	sp, #52	; 0x34
   16b60:	af02      	add	r7, sp, #8
   16b62:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   16b64:	2064      	movs	r0, #100	; 0x64
   16b66:	4b89      	ldr	r3, [pc, #548]	; (16d8c <vWifiTask+0x230>)
   16b68:	4798      	blx	r3
    init_state();
   16b6a:	4b89      	ldr	r3, [pc, #548]	; (16d90 <vWifiTask+0x234>)
   16b6c:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   16b6e:	2200      	movs	r2, #0
   16b70:	2104      	movs	r1, #4
   16b72:	2005      	movs	r0, #5
   16b74:	4b87      	ldr	r3, [pc, #540]	; (16d94 <vWifiTask+0x238>)
   16b76:	4798      	blx	r3
   16b78:	0002      	movs	r2, r0
   16b7a:	4b87      	ldr	r3, [pc, #540]	; (16d98 <vWifiTask+0x23c>)
   16b7c:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   16b7e:	2200      	movs	r2, #0
   16b80:	2106      	movs	r1, #6
   16b82:	2005      	movs	r0, #5
   16b84:	4b83      	ldr	r3, [pc, #524]	; (16d94 <vWifiTask+0x238>)
   16b86:	4798      	blx	r3
   16b88:	0002      	movs	r2, r0
   16b8a:	4b84      	ldr	r3, [pc, #528]	; (16d9c <vWifiTask+0x240>)
   16b8c:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   16b8e:	2200      	movs	r2, #0
   16b90:	2114      	movs	r1, #20
   16b92:	2002      	movs	r0, #2
   16b94:	4b7f      	ldr	r3, [pc, #508]	; (16d94 <vWifiTask+0x238>)
   16b96:	4798      	blx	r3
   16b98:	0002      	movs	r2, r0
   16b9a:	4b81      	ldr	r3, [pc, #516]	; (16da0 <vWifiTask+0x244>)
   16b9c:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   16b9e:	2200      	movs	r2, #0
   16ba0:	2102      	movs	r1, #2
   16ba2:	2005      	movs	r0, #5
   16ba4:	4b7b      	ldr	r3, [pc, #492]	; (16d94 <vWifiTask+0x238>)
   16ba6:	4798      	blx	r3
   16ba8:	0002      	movs	r2, r0
   16baa:	4b7e      	ldr	r3, [pc, #504]	; (16da4 <vWifiTask+0x248>)
   16bac:	601a      	str	r2, [r3, #0]
	xQueueTemp = xQueueCreate(5, sizeof(int32_t));
   16bae:	2200      	movs	r2, #0
   16bb0:	2104      	movs	r1, #4
   16bb2:	2005      	movs	r0, #5
   16bb4:	4b77      	ldr	r3, [pc, #476]	; (16d94 <vWifiTask+0x238>)
   16bb6:	4798      	blx	r3
   16bb8:	0002      	movs	r2, r0
   16bba:	4b7b      	ldr	r3, [pc, #492]	; (16da8 <vWifiTask+0x24c>)
   16bbc:	601a      	str	r2, [r3, #0]
    xQueueHeartrate = xQueueCreate(5, sizeof(int32_t));
   16bbe:	2200      	movs	r2, #0
   16bc0:	2104      	movs	r1, #4
   16bc2:	2005      	movs	r0, #5
   16bc4:	4b73      	ldr	r3, [pc, #460]	; (16d94 <vWifiTask+0x238>)
   16bc6:	4798      	blx	r3
   16bc8:	0002      	movs	r2, r0
   16bca:	4b78      	ldr	r3, [pc, #480]	; (16dac <vWifiTask+0x250>)
   16bcc:	601a      	str	r2, [r3, #0]

	 xQueueDistanceBuffer= xQueueCreate(5, sizeof(uint16_t));
   16bce:	2200      	movs	r2, #0
   16bd0:	2102      	movs	r1, #2
   16bd2:	2005      	movs	r0, #5
   16bd4:	4b6f      	ldr	r3, [pc, #444]	; (16d94 <vWifiTask+0x238>)
   16bd6:	4798      	blx	r3
   16bd8:	0002      	movs	r2, r0
   16bda:	4b72      	ldr	r3, [pc, #456]	; (16da4 <vWifiTask+0x248>)
   16bdc:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueTemp == NULL || xQueueHeartrate == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   16bde:	4b6e      	ldr	r3, [pc, #440]	; (16d98 <vWifiTask+0x23c>)
   16be0:	681b      	ldr	r3, [r3, #0]
   16be2:	2b00      	cmp	r3, #0
   16be4:	d013      	beq.n	16c0e <vWifiTask+0xb2>
   16be6:	4b70      	ldr	r3, [pc, #448]	; (16da8 <vWifiTask+0x24c>)
   16be8:	681b      	ldr	r3, [r3, #0]
   16bea:	2b00      	cmp	r3, #0
   16bec:	d00f      	beq.n	16c0e <vWifiTask+0xb2>
   16bee:	4b6f      	ldr	r3, [pc, #444]	; (16dac <vWifiTask+0x250>)
   16bf0:	681b      	ldr	r3, [r3, #0]
   16bf2:	2b00      	cmp	r3, #0
   16bf4:	d00b      	beq.n	16c0e <vWifiTask+0xb2>
   16bf6:	4b69      	ldr	r3, [pc, #420]	; (16d9c <vWifiTask+0x240>)
   16bf8:	681b      	ldr	r3, [r3, #0]
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d007      	beq.n	16c0e <vWifiTask+0xb2>
   16bfe:	4b68      	ldr	r3, [pc, #416]	; (16da0 <vWifiTask+0x244>)
   16c00:	681b      	ldr	r3, [r3, #0]
   16c02:	2b00      	cmp	r3, #0
   16c04:	d003      	beq.n	16c0e <vWifiTask+0xb2>
   16c06:	4b67      	ldr	r3, [pc, #412]	; (16da4 <vWifiTask+0x248>)
   16c08:	681b      	ldr	r3, [r3, #0]
   16c0a:	2b00      	cmp	r3, #0
   16c0c:	d103      	bne.n	16c16 <vWifiTask+0xba>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   16c0e:	4b68      	ldr	r3, [pc, #416]	; (16db0 <vWifiTask+0x254>)
   16c10:	0018      	movs	r0, r3
   16c12:	4b68      	ldr	r3, [pc, #416]	; (16db4 <vWifiTask+0x258>)
   16c14:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   16c16:	4b68      	ldr	r3, [pc, #416]	; (16db8 <vWifiTask+0x25c>)
   16c18:	0018      	movs	r0, r3
   16c1a:	4b66      	ldr	r3, [pc, #408]	; (16db4 <vWifiTask+0x258>)
   16c1c:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   16c1e:	4b67      	ldr	r3, [pc, #412]	; (16dbc <vWifiTask+0x260>)
   16c20:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   16c22:	4b67      	ldr	r3, [pc, #412]	; (16dc0 <vWifiTask+0x264>)
   16c24:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   16c26:	4b67      	ldr	r3, [pc, #412]	; (16dc4 <vWifiTask+0x268>)
   16c28:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   16c2a:	4b67      	ldr	r3, [pc, #412]	; (16dc8 <vWifiTask+0x26c>)
   16c2c:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   16c2e:	4b67      	ldr	r3, [pc, #412]	; (16dcc <vWifiTask+0x270>)
   16c30:	4798      	blx	r3
    configure_extint_callbacks();
   16c32:	4b67      	ldr	r3, [pc, #412]	; (16dd0 <vWifiTask+0x274>)
   16c34:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16c36:	230c      	movs	r3, #12
   16c38:	18fb      	adds	r3, r7, r3
   16c3a:	2218      	movs	r2, #24
   16c3c:	2100      	movs	r1, #0
   16c3e:	0018      	movs	r0, r3
   16c40:	4b64      	ldr	r3, [pc, #400]	; (16dd4 <vWifiTask+0x278>)
   16c42:	4798      	blx	r3

    nm_bsp_init();
   16c44:	4b64      	ldr	r3, [pc, #400]	; (16dd8 <vWifiTask+0x27c>)
   16c46:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   16c48:	230c      	movs	r3, #12
   16c4a:	18fb      	adds	r3, r7, r3
   16c4c:	4a63      	ldr	r2, [pc, #396]	; (16ddc <vWifiTask+0x280>)
   16c4e:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16c50:	2327      	movs	r3, #39	; 0x27
   16c52:	18fc      	adds	r4, r7, r3
   16c54:	230c      	movs	r3, #12
   16c56:	18fb      	adds	r3, r7, r3
   16c58:	0018      	movs	r0, r3
   16c5a:	4b61      	ldr	r3, [pc, #388]	; (16de0 <vWifiTask+0x284>)
   16c5c:	4798      	blx	r3
   16c5e:	0003      	movs	r3, r0
   16c60:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   16c62:	2327      	movs	r3, #39	; 0x27
   16c64:	18fb      	adds	r3, r7, r3
   16c66:	781b      	ldrb	r3, [r3, #0]
   16c68:	b25b      	sxtb	r3, r3
   16c6a:	2b00      	cmp	r3, #0
   16c6c:	d009      	beq.n	16c82 <vWifiTask+0x126>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16c6e:	2327      	movs	r3, #39	; 0x27
   16c70:	18fb      	adds	r3, r7, r3
   16c72:	2200      	movs	r2, #0
   16c74:	569a      	ldrsb	r2, [r3, r2]
   16c76:	4b5b      	ldr	r3, [pc, #364]	; (16de4 <vWifiTask+0x288>)
   16c78:	0019      	movs	r1, r3
   16c7a:	2001      	movs	r0, #1
   16c7c:	4b5a      	ldr	r3, [pc, #360]	; (16de8 <vWifiTask+0x28c>)
   16c7e:	4798      	blx	r3
        while (1) {
   16c80:	e7fe      	b.n	16c80 <vWifiTask+0x124>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16c82:	4a5a      	ldr	r2, [pc, #360]	; (16dec <vWifiTask+0x290>)
   16c84:	4b5a      	ldr	r3, [pc, #360]	; (16df0 <vWifiTask+0x294>)
   16c86:	0019      	movs	r1, r3
   16c88:	2001      	movs	r0, #1
   16c8a:	4b57      	ldr	r3, [pc, #348]	; (16de8 <vWifiTask+0x28c>)
   16c8c:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   16c8e:	4b59      	ldr	r3, [pc, #356]	; (16df4 <vWifiTask+0x298>)
   16c90:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16c92:	4a59      	ldr	r2, [pc, #356]	; (16df8 <vWifiTask+0x29c>)
   16c94:	4b59      	ldr	r3, [pc, #356]	; (16dfc <vWifiTask+0x2a0>)
   16c96:	0011      	movs	r1, r2
   16c98:	0018      	movs	r0, r3
   16c9a:	4b59      	ldr	r3, [pc, #356]	; (16e00 <vWifiTask+0x2a4>)
   16c9c:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16c9e:	4a59      	ldr	r2, [pc, #356]	; (16e04 <vWifiTask+0x2a8>)
   16ca0:	4852      	ldr	r0, [pc, #328]	; (16dec <vWifiTask+0x290>)
   16ca2:	23ff      	movs	r3, #255	; 0xff
   16ca4:	9300      	str	r3, [sp, #0]
   16ca6:	0013      	movs	r3, r2
   16ca8:	2202      	movs	r2, #2
   16caa:	2106      	movs	r1, #6
   16cac:	4c56      	ldr	r4, [pc, #344]	; (16e08 <vWifiTask+0x2ac>)
   16cae:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16cb0:	e006      	b.n	16cc0 <vWifiTask+0x164>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16cb2:	2000      	movs	r0, #0
   16cb4:	4b55      	ldr	r3, [pc, #340]	; (16e0c <vWifiTask+0x2b0>)
   16cb6:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16cb8:	4b55      	ldr	r3, [pc, #340]	; (16e10 <vWifiTask+0x2b4>)
   16cba:	0018      	movs	r0, r3
   16cbc:	4b55      	ldr	r3, [pc, #340]	; (16e14 <vWifiTask+0x2b8>)
   16cbe:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16cc0:	2002      	movs	r0, #2
   16cc2:	4b55      	ldr	r3, [pc, #340]	; (16e18 <vWifiTask+0x2bc>)
   16cc4:	4798      	blx	r3
   16cc6:	0003      	movs	r3, r0
   16cc8:	001a      	movs	r2, r3
   16cca:	2301      	movs	r3, #1
   16ccc:	4053      	eors	r3, r2
   16cce:	b2db      	uxtb	r3, r3
   16cd0:	2b00      	cmp	r3, #0
   16cd2:	d1ee      	bne.n	16cb2 <vWifiTask+0x156>
    }

    vTaskDelay(1000);
   16cd4:	23fa      	movs	r3, #250	; 0xfa
   16cd6:	009b      	lsls	r3, r3, #2
   16cd8:	0018      	movs	r0, r3
   16cda:	4b2c      	ldr	r3, [pc, #176]	; (16d8c <vWifiTask+0x230>)
   16cdc:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   16cde:	4b4f      	ldr	r3, [pc, #316]	; (16e1c <vWifiTask+0x2c0>)
   16ce0:	2201      	movs	r2, #1
   16ce2:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   16ce4:	4b4d      	ldr	r3, [pc, #308]	; (16e1c <vWifiTask+0x2c0>)
   16ce6:	781b      	ldrb	r3, [r3, #0]
   16ce8:	b25b      	sxtb	r3, r3
   16cea:	2b01      	cmp	r3, #1
   16cec:	d00b      	beq.n	16d06 <vWifiTask+0x1aa>
   16cee:	dc02      	bgt.n	16cf6 <vWifiTask+0x19a>
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	d005      	beq.n	16d00 <vWifiTask+0x1a4>
   16cf4:	e010      	b.n	16d18 <vWifiTask+0x1bc>
   16cf6:	2b02      	cmp	r3, #2
   16cf8:	d008      	beq.n	16d0c <vWifiTask+0x1b0>
   16cfa:	2b03      	cmp	r3, #3
   16cfc:	d009      	beq.n	16d12 <vWifiTask+0x1b6>
   16cfe:	e00b      	b.n	16d18 <vWifiTask+0x1bc>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   16d00:	4b47      	ldr	r3, [pc, #284]	; (16e20 <vWifiTask+0x2c4>)
   16d02:	4798      	blx	r3

                break;
   16d04:	e00c      	b.n	16d20 <vWifiTask+0x1c4>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   16d06:	4b47      	ldr	r3, [pc, #284]	; (16e24 <vWifiTask+0x2c8>)
   16d08:	4798      	blx	r3
                break;
   16d0a:	e009      	b.n	16d20 <vWifiTask+0x1c4>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   16d0c:	4b46      	ldr	r3, [pc, #280]	; (16e28 <vWifiTask+0x2cc>)
   16d0e:	4798      	blx	r3
                break;
   16d10:	e006      	b.n	16d20 <vWifiTask+0x1c4>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   16d12:	4b46      	ldr	r3, [pc, #280]	; (16e2c <vWifiTask+0x2d0>)
   16d14:	4798      	blx	r3
                break;
   16d16:	e003      	b.n	16d20 <vWifiTask+0x1c4>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   16d18:	4b40      	ldr	r3, [pc, #256]	; (16e1c <vWifiTask+0x2c0>)
   16d1a:	2200      	movs	r2, #0
   16d1c:	701a      	strb	r2, [r3, #0]
                break;
   16d1e:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   16d20:	230b      	movs	r3, #11
   16d22:	18fb      	adds	r3, r7, r3
   16d24:	2200      	movs	r2, #0
   16d26:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   16d28:	4b1b      	ldr	r3, [pc, #108]	; (16d98 <vWifiTask+0x23c>)
   16d2a:	681b      	ldr	r3, [r3, #0]
   16d2c:	220b      	movs	r2, #11
   16d2e:	18b9      	adds	r1, r7, r2
   16d30:	2200      	movs	r2, #0
   16d32:	0018      	movs	r0, r3
   16d34:	4b3e      	ldr	r3, [pc, #248]	; (16e30 <vWifiTask+0x2d4>)
   16d36:	4798      	blx	r3
   16d38:	0003      	movs	r3, r0
   16d3a:	2b01      	cmp	r3, #1
   16d3c:	d105      	bne.n	16d4a <vWifiTask+0x1ee>
            wifiStateMachine = DataToReceive;  // Update new state
   16d3e:	230b      	movs	r3, #11
   16d40:	18fb      	adds	r3, r7, r3
   16d42:	781b      	ldrb	r3, [r3, #0]
   16d44:	b25a      	sxtb	r2, r3
   16d46:	4b35      	ldr	r3, [pc, #212]	; (16e1c <vWifiTask+0x2c0>)
   16d48:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   16d4a:	4b3a      	ldr	r3, [pc, #232]	; (16e34 <vWifiTask+0x2d8>)
   16d4c:	781b      	ldrb	r3, [r3, #0]
   16d4e:	b2db      	uxtb	r3, r3
   16d50:	2b00      	cmp	r3, #0
   16d52:	d017      	beq.n	16d84 <vWifiTask+0x228>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_SHTC3_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   16d54:	4b38      	ldr	r3, [pc, #224]	; (16e38 <vWifiTask+0x2dc>)
   16d56:	0018      	movs	r0, r3
   16d58:	4b38      	ldr	r3, [pc, #224]	; (16e3c <vWifiTask+0x2e0>)
   16d5a:	4798      	blx	r3
   16d5c:	0004      	movs	r4, r0
   16d5e:	4a36      	ldr	r2, [pc, #216]	; (16e38 <vWifiTask+0x2dc>)
   16d60:	4937      	ldr	r1, [pc, #220]	; (16e40 <vWifiTask+0x2e4>)
   16d62:	4838      	ldr	r0, [pc, #224]	; (16e44 <vWifiTask+0x2e8>)
   16d64:	2300      	movs	r3, #0
   16d66:	9301      	str	r3, [sp, #4]
   16d68:	2301      	movs	r3, #1
   16d6a:	9300      	str	r3, [sp, #0]
   16d6c:	0023      	movs	r3, r4
   16d6e:	4c36      	ldr	r4, [pc, #216]	; (16e48 <vWifiTask+0x2ec>)
   16d70:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   16d72:	4a31      	ldr	r2, [pc, #196]	; (16e38 <vWifiTask+0x2dc>)
   16d74:	4b35      	ldr	r3, [pc, #212]	; (16e4c <vWifiTask+0x2f0>)
   16d76:	0019      	movs	r1, r3
   16d78:	2001      	movs	r0, #1
   16d7a:	4b1b      	ldr	r3, [pc, #108]	; (16de8 <vWifiTask+0x28c>)
   16d7c:	4798      	blx	r3
            isPressed = false;
   16d7e:	4b2d      	ldr	r3, [pc, #180]	; (16e34 <vWifiTask+0x2d8>)
   16d80:	2200      	movs	r2, #0
   16d82:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   16d84:	2064      	movs	r0, #100	; 0x64
   16d86:	4b01      	ldr	r3, [pc, #4]	; (16d8c <vWifiTask+0x230>)
   16d88:	4798      	blx	r3
    while (1) {
   16d8a:	e7ab      	b.n	16ce4 <vWifiTask+0x188>
   16d8c:	0001bb11 	.word	0x0001bb11
   16d90:	0001555d 	.word	0x0001555d
   16d94:	00019e05 	.word	0x00019e05
   16d98:	2000047c 	.word	0x2000047c
   16d9c:	20000484 	.word	0x20000484
   16da0:	20000480 	.word	0x20000480
   16da4:	20000488 	.word	0x20000488
   16da8:	2000048c 	.word	0x2000048c
   16dac:	20000490 	.word	0x20000490
   16db0:	00036110 	.word	0x00036110
   16db4:	0001d765 	.word	0x0001d765
   16db8:	00036138 	.word	0x00036138
   16dbc:	00015f99 	.word	0x00015f99
   16dc0:	00015fd5 	.word	0x00015fd5
   16dc4:	000164cd 	.word	0x000164cd
   16dc8:	00015eb5 	.word	0x00015eb5
   16dcc:	00016585 	.word	0x00016585
   16dd0:	000165c5 	.word	0x000165c5
   16dd4:	00034043 	.word	0x00034043
   16dd8:	0001fc75 	.word	0x0001fc75
   16ddc:	00015d61 	.word	0x00015d61
   16de0:	0002174d 	.word	0x0002174d
   16de4:	00036154 	.word	0x00036154
   16de8:	0001d851 	.word	0x0001d851
   16dec:	00035b98 	.word	0x00035b98
   16df0:	00036180 	.word	0x00036180
   16df4:	00024ead 	.word	0x00024ead
   16df8:	0001607d 	.word	0x0001607d
   16dfc:	00016049 	.word	0x00016049
   16e00:	00024f45 	.word	0x00024f45
   16e04:	00035b8c 	.word	0x00035b8c
   16e08:	0002195d 	.word	0x0002195d
   16e0c:	00021941 	.word	0x00021941
   16e10:	20004768 	.word	0x20004768
   16e14:	00032035 	.word	0x00032035
   16e18:	000155cd 	.word	0x000155cd
   16e1c:	20000479 	.word	0x20000479
   16e20:	000167c5 	.word	0x000167c5
   16e24:	00016861 	.word	0x00016861
   16e28:	0001663d 	.word	0x0001663d
   16e2c:	000166d1 	.word	0x000166d1
   16e30:	0001a965 	.word	0x0001a965
   16e34:	20000b2c 	.word	0x20000b2c
   16e38:	20000058 	.word	0x20000058
   16e3c:	000343fb 	.word	0x000343fb
   16e40:	000360bc 	.word	0x000360bc
   16e44:	200006f4 	.word	0x200006f4
   16e48:	0002f355 	.word	0x0002f355
   16e4c:	000361a4 	.word	0x000361a4

00016e50 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   16e50:	b590      	push	{r4, r7, lr}
   16e52:	b083      	sub	sp, #12
   16e54:	af00      	add	r7, sp, #0
   16e56:	0002      	movs	r2, r0
   16e58:	1dfb      	adds	r3, r7, #7
   16e5a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   16e5c:	1dfb      	adds	r3, r7, #7
   16e5e:	781b      	ldrb	r3, [r3, #0]
   16e60:	2b03      	cmp	r3, #3
   16e62:	d806      	bhi.n	16e72 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   16e64:	4b05      	ldr	r3, [pc, #20]	; (16e7c <WifiHandlerSetState+0x2c>)
   16e66:	6818      	ldr	r0, [r3, #0]
   16e68:	1df9      	adds	r1, r7, #7
   16e6a:	2300      	movs	r3, #0
   16e6c:	220a      	movs	r2, #10
   16e6e:	4c04      	ldr	r4, [pc, #16]	; (16e80 <WifiHandlerSetState+0x30>)
   16e70:	47a0      	blx	r4
    }
}
   16e72:	46c0      	nop			; (mov r8, r8)
   16e74:	46bd      	mov	sp, r7
   16e76:	b003      	add	sp, #12
   16e78:	bd90      	pop	{r4, r7, pc}
   16e7a:	46c0      	nop			; (mov r8, r8)
   16e7c:	2000047c 	.word	0x2000047c
   16e80:	0001a0ad 	.word	0x0001a0ad

00016e84 <WifiAddTempDataToQueue>:
}

///////////////////////////////////////////  OUR USE CASE ////////////////////////////////////////////////////////////////////////////////////////

int WifiAddTempDataToQueue( int32_t *Temp)
{
   16e84:	b590      	push	{r4, r7, lr}
   16e86:	b085      	sub	sp, #20
   16e88:	af00      	add	r7, sp, #0
   16e8a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTemp, Temp, (TickType_t)10);
   16e8c:	4b06      	ldr	r3, [pc, #24]	; (16ea8 <WifiAddTempDataToQueue+0x24>)
   16e8e:	6818      	ldr	r0, [r3, #0]
   16e90:	6879      	ldr	r1, [r7, #4]
   16e92:	2300      	movs	r3, #0
   16e94:	220a      	movs	r2, #10
   16e96:	4c05      	ldr	r4, [pc, #20]	; (16eac <WifiAddTempDataToQueue+0x28>)
   16e98:	47a0      	blx	r4
   16e9a:	0003      	movs	r3, r0
   16e9c:	60fb      	str	r3, [r7, #12]
	return error;
   16e9e:	68fb      	ldr	r3, [r7, #12]
}
   16ea0:	0018      	movs	r0, r3
   16ea2:	46bd      	mov	sp, r7
   16ea4:	b005      	add	sp, #20
   16ea6:	bd90      	pop	{r4, r7, pc}
   16ea8:	2000048c 	.word	0x2000048c
   16eac:	0001a0ad 	.word	0x0001a0ad

00016eb0 <WifiAddHeartrateDataToQueue>:

int WifiAddHeartrateDataToQueue(int32_t *Heartrate)
{
   16eb0:	b590      	push	{r4, r7, lr}
   16eb2:	b085      	sub	sp, #20
   16eb4:	af00      	add	r7, sp, #0
   16eb6:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueHeartrate, Heartrate , (TickType_t)10);
   16eb8:	4b06      	ldr	r3, [pc, #24]	; (16ed4 <WifiAddHeartrateDataToQueue+0x24>)
   16eba:	6818      	ldr	r0, [r3, #0]
   16ebc:	6879      	ldr	r1, [r7, #4]
   16ebe:	2300      	movs	r3, #0
   16ec0:	220a      	movs	r2, #10
   16ec2:	4c05      	ldr	r4, [pc, #20]	; (16ed8 <WifiAddHeartrateDataToQueue+0x28>)
   16ec4:	47a0      	blx	r4
   16ec6:	0003      	movs	r3, r0
   16ec8:	60fb      	str	r3, [r7, #12]
	//SerialConsoleWriteString("In Heartrate Queue Send\r\n");
	return error;
   16eca:	68fb      	ldr	r3, [r7, #12]
}
   16ecc:	0018      	movs	r0, r3
   16ece:	46bd      	mov	sp, r7
   16ed0:	b005      	add	sp, #20
   16ed2:	bd90      	pop	{r4, r7, pc}
   16ed4:	20000490 	.word	0x20000490
   16ed8:	0001a0ad 	.word	0x0001a0ad

00016edc <system_gclk_chan_get_config_defaults>:
{
   16edc:	b580      	push	{r7, lr}
   16ede:	b082      	sub	sp, #8
   16ee0:	af00      	add	r7, sp, #0
   16ee2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   16ee4:	687b      	ldr	r3, [r7, #4]
   16ee6:	2200      	movs	r2, #0
   16ee8:	701a      	strb	r2, [r3, #0]
}
   16eea:	46c0      	nop			; (mov r8, r8)
   16eec:	46bd      	mov	sp, r7
   16eee:	b002      	add	sp, #8
   16ef0:	bd80      	pop	{r7, pc}
	...

00016ef4 <system_apb_clock_set_mask>:
{
   16ef4:	b580      	push	{r7, lr}
   16ef6:	b082      	sub	sp, #8
   16ef8:	af00      	add	r7, sp, #0
   16efa:	0002      	movs	r2, r0
   16efc:	6039      	str	r1, [r7, #0]
   16efe:	1dfb      	adds	r3, r7, #7
   16f00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   16f02:	1dfb      	adds	r3, r7, #7
   16f04:	781b      	ldrb	r3, [r3, #0]
   16f06:	2b01      	cmp	r3, #1
   16f08:	d00a      	beq.n	16f20 <system_apb_clock_set_mask+0x2c>
   16f0a:	2b02      	cmp	r3, #2
   16f0c:	d00f      	beq.n	16f2e <system_apb_clock_set_mask+0x3a>
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d114      	bne.n	16f3c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   16f12:	4b0e      	ldr	r3, [pc, #56]	; (16f4c <system_apb_clock_set_mask+0x58>)
   16f14:	4a0d      	ldr	r2, [pc, #52]	; (16f4c <system_apb_clock_set_mask+0x58>)
   16f16:	6991      	ldr	r1, [r2, #24]
   16f18:	683a      	ldr	r2, [r7, #0]
   16f1a:	430a      	orrs	r2, r1
   16f1c:	619a      	str	r2, [r3, #24]
			break;
   16f1e:	e00f      	b.n	16f40 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   16f20:	4b0a      	ldr	r3, [pc, #40]	; (16f4c <system_apb_clock_set_mask+0x58>)
   16f22:	4a0a      	ldr	r2, [pc, #40]	; (16f4c <system_apb_clock_set_mask+0x58>)
   16f24:	69d1      	ldr	r1, [r2, #28]
   16f26:	683a      	ldr	r2, [r7, #0]
   16f28:	430a      	orrs	r2, r1
   16f2a:	61da      	str	r2, [r3, #28]
			break;
   16f2c:	e008      	b.n	16f40 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   16f2e:	4b07      	ldr	r3, [pc, #28]	; (16f4c <system_apb_clock_set_mask+0x58>)
   16f30:	4a06      	ldr	r2, [pc, #24]	; (16f4c <system_apb_clock_set_mask+0x58>)
   16f32:	6a11      	ldr	r1, [r2, #32]
   16f34:	683a      	ldr	r2, [r7, #0]
   16f36:	430a      	orrs	r2, r1
   16f38:	621a      	str	r2, [r3, #32]
			break;
   16f3a:	e001      	b.n	16f40 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16f3c:	2317      	movs	r3, #23
   16f3e:	e000      	b.n	16f42 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   16f40:	2300      	movs	r3, #0
}
   16f42:	0018      	movs	r0, r3
   16f44:	46bd      	mov	sp, r7
   16f46:	b002      	add	sp, #8
   16f48:	bd80      	pop	{r7, pc}
   16f4a:	46c0      	nop			; (mov r8, r8)
   16f4c:	40000400 	.word	0x40000400

00016f50 <system_pinmux_get_config_defaults>:
{
   16f50:	b580      	push	{r7, lr}
   16f52:	b082      	sub	sp, #8
   16f54:	af00      	add	r7, sp, #0
   16f56:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16f58:	687b      	ldr	r3, [r7, #4]
   16f5a:	2280      	movs	r2, #128	; 0x80
   16f5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16f5e:	687b      	ldr	r3, [r7, #4]
   16f60:	2200      	movs	r2, #0
   16f62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16f64:	687b      	ldr	r3, [r7, #4]
   16f66:	2201      	movs	r2, #1
   16f68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   16f6a:	687b      	ldr	r3, [r7, #4]
   16f6c:	2200      	movs	r2, #0
   16f6e:	70da      	strb	r2, [r3, #3]
}
   16f70:	46c0      	nop			; (mov r8, r8)
   16f72:	46bd      	mov	sp, r7
   16f74:	b002      	add	sp, #8
   16f76:	bd80      	pop	{r7, pc}

00016f78 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   16f78:	b580      	push	{r7, lr}
   16f7a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16f7c:	4b05      	ldr	r3, [pc, #20]	; (16f94 <system_is_debugger_present+0x1c>)
   16f7e:	789b      	ldrb	r3, [r3, #2]
   16f80:	b2db      	uxtb	r3, r3
   16f82:	001a      	movs	r2, r3
   16f84:	2302      	movs	r3, #2
   16f86:	4013      	ands	r3, r2
   16f88:	1e5a      	subs	r2, r3, #1
   16f8a:	4193      	sbcs	r3, r2
   16f8c:	b2db      	uxtb	r3, r3
}
   16f8e:	0018      	movs	r0, r3
   16f90:	46bd      	mov	sp, r7
   16f92:	bd80      	pop	{r7, pc}
   16f94:	41002000 	.word	0x41002000

00016f98 <system_interrupt_enter_critical_section>:
{
   16f98:	b580      	push	{r7, lr}
   16f9a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16f9c:	4b02      	ldr	r3, [pc, #8]	; (16fa8 <system_interrupt_enter_critical_section+0x10>)
   16f9e:	4798      	blx	r3
}
   16fa0:	46c0      	nop			; (mov r8, r8)
   16fa2:	46bd      	mov	sp, r7
   16fa4:	bd80      	pop	{r7, pc}
   16fa6:	46c0      	nop			; (mov r8, r8)
   16fa8:	00025ba5 	.word	0x00025ba5

00016fac <system_interrupt_leave_critical_section>:
{
   16fac:	b580      	push	{r7, lr}
   16fae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   16fb0:	4b02      	ldr	r3, [pc, #8]	; (16fbc <system_interrupt_leave_critical_section+0x10>)
   16fb2:	4798      	blx	r3
}
   16fb4:	46c0      	nop			; (mov r8, r8)
   16fb6:	46bd      	mov	sp, r7
   16fb8:	bd80      	pop	{r7, pc}
   16fba:	46c0      	nop			; (mov r8, r8)
   16fbc:	00025bf9 	.word	0x00025bf9

00016fc0 <system_interrupt_disable>:
{
   16fc0:	b580      	push	{r7, lr}
   16fc2:	b082      	sub	sp, #8
   16fc4:	af00      	add	r7, sp, #0
   16fc6:	0002      	movs	r2, r0
   16fc8:	1dfb      	adds	r3, r7, #7
   16fca:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16fcc:	4a07      	ldr	r2, [pc, #28]	; (16fec <system_interrupt_disable+0x2c>)
   16fce:	1dfb      	adds	r3, r7, #7
   16fd0:	781b      	ldrb	r3, [r3, #0]
   16fd2:	0019      	movs	r1, r3
   16fd4:	231f      	movs	r3, #31
   16fd6:	400b      	ands	r3, r1
   16fd8:	2101      	movs	r1, #1
   16fda:	4099      	lsls	r1, r3
   16fdc:	000b      	movs	r3, r1
   16fde:	0019      	movs	r1, r3
   16fe0:	2380      	movs	r3, #128	; 0x80
   16fe2:	50d1      	str	r1, [r2, r3]
}
   16fe4:	46c0      	nop			; (mov r8, r8)
   16fe6:	46bd      	mov	sp, r7
   16fe8:	b002      	add	sp, #8
   16fea:	bd80      	pop	{r7, pc}
   16fec:	e000e100 	.word	0xe000e100

00016ff0 <i2c_master_is_syncing>:
{
   16ff0:	b580      	push	{r7, lr}
   16ff2:	b084      	sub	sp, #16
   16ff4:	af00      	add	r7, sp, #0
   16ff6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   16ff8:	687b      	ldr	r3, [r7, #4]
   16ffa:	681b      	ldr	r3, [r3, #0]
   16ffc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   16ffe:	68fb      	ldr	r3, [r7, #12]
   17000:	69db      	ldr	r3, [r3, #28]
   17002:	2207      	movs	r2, #7
   17004:	4013      	ands	r3, r2
   17006:	1e5a      	subs	r2, r3, #1
   17008:	4193      	sbcs	r3, r2
   1700a:	b2db      	uxtb	r3, r3
}
   1700c:	0018      	movs	r0, r3
   1700e:	46bd      	mov	sp, r7
   17010:	b004      	add	sp, #16
   17012:	bd80      	pop	{r7, pc}

00017014 <_i2c_master_wait_for_sync>:
{
   17014:	b580      	push	{r7, lr}
   17016:	b082      	sub	sp, #8
   17018:	af00      	add	r7, sp, #0
   1701a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   1701c:	46c0      	nop			; (mov r8, r8)
   1701e:	687b      	ldr	r3, [r7, #4]
   17020:	0018      	movs	r0, r3
   17022:	4b04      	ldr	r3, [pc, #16]	; (17034 <_i2c_master_wait_for_sync+0x20>)
   17024:	4798      	blx	r3
   17026:	1e03      	subs	r3, r0, #0
   17028:	d1f9      	bne.n	1701e <_i2c_master_wait_for_sync+0xa>
}
   1702a:	46c0      	nop			; (mov r8, r8)
   1702c:	46bd      	mov	sp, r7
   1702e:	b002      	add	sp, #8
   17030:	bd80      	pop	{r7, pc}
   17032:	46c0      	nop			; (mov r8, r8)
   17034:	00016ff1 	.word	0x00016ff1

00017038 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17038:	b580      	push	{r7, lr}
   1703a:	b084      	sub	sp, #16
   1703c:	af00      	add	r7, sp, #0
   1703e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17040:	687b      	ldr	r3, [r7, #4]
   17042:	681b      	ldr	r3, [r3, #0]
   17044:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17046:	687b      	ldr	r3, [r7, #4]
   17048:	681b      	ldr	r3, [r3, #0]
   1704a:	0018      	movs	r0, r3
   1704c:	4b0d      	ldr	r3, [pc, #52]	; (17084 <i2c_master_disable+0x4c>)
   1704e:	4798      	blx	r3
   17050:	0003      	movs	r3, r0
   17052:	0018      	movs	r0, r3
   17054:	4b0c      	ldr	r3, [pc, #48]	; (17088 <i2c_master_disable+0x50>)
   17056:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17058:	687b      	ldr	r3, [r7, #4]
   1705a:	0018      	movs	r0, r3
   1705c:	4b0b      	ldr	r3, [pc, #44]	; (1708c <i2c_master_disable+0x54>)
   1705e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   17060:	68fb      	ldr	r3, [r7, #12]
   17062:	2283      	movs	r2, #131	; 0x83
   17064:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   17066:	68fb      	ldr	r3, [r7, #12]
   17068:	2283      	movs	r2, #131	; 0x83
   1706a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1706c:	68fb      	ldr	r3, [r7, #12]
   1706e:	681b      	ldr	r3, [r3, #0]
   17070:	2202      	movs	r2, #2
   17072:	4393      	bics	r3, r2
   17074:	001a      	movs	r2, r3
   17076:	68fb      	ldr	r3, [r7, #12]
   17078:	601a      	str	r2, [r3, #0]

}
   1707a:	46c0      	nop			; (mov r8, r8)
   1707c:	46bd      	mov	sp, r7
   1707e:	b004      	add	sp, #16
   17080:	bd80      	pop	{r7, pc}
   17082:	46c0      	nop			; (mov r8, r8)
   17084:	00027079 	.word	0x00027079
   17088:	00016fc1 	.word	0x00016fc1
   1708c:	00017015 	.word	0x00017015

00017090 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17090:	b5f0      	push	{r4, r5, r6, r7, lr}
   17092:	b097      	sub	sp, #92	; 0x5c
   17094:	af00      	add	r7, sp, #0
   17096:	6178      	str	r0, [r7, #20]
   17098:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1709a:	2300      	movs	r3, #0
   1709c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1709e:	2300      	movs	r3, #0
   170a0:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   170a2:	2300      	movs	r3, #0
   170a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   170a6:	233b      	movs	r3, #59	; 0x3b
   170a8:	2210      	movs	r2, #16
   170aa:	4694      	mov	ip, r2
   170ac:	44bc      	add	ip, r7
   170ae:	4463      	add	r3, ip
   170b0:	2200      	movs	r2, #0
   170b2:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   170b4:	697b      	ldr	r3, [r7, #20]
   170b6:	681b      	ldr	r3, [r3, #0]
   170b8:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   170ba:	697b      	ldr	r3, [r7, #20]
   170bc:	681b      	ldr	r3, [r3, #0]
   170be:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   170c0:	2323      	movs	r3, #35	; 0x23
   170c2:	2210      	movs	r2, #16
   170c4:	18ba      	adds	r2, r7, r2
   170c6:	18d4      	adds	r4, r2, r3
   170c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170ca:	0018      	movs	r0, r3
   170cc:	4bc0      	ldr	r3, [pc, #768]	; (173d0 <_i2c_master_set_config+0x340>)
   170ce:	4798      	blx	r3
   170d0:	0003      	movs	r3, r0
   170d2:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   170d4:	230c      	movs	r3, #12
   170d6:	2210      	movs	r2, #16
   170d8:	4694      	mov	ip, r2
   170da:	44bc      	add	ip, r7
   170dc:	4463      	add	r3, ip
   170de:	0018      	movs	r0, r3
   170e0:	4bbc      	ldr	r3, [pc, #752]	; (173d4 <_i2c_master_set_config+0x344>)
   170e2:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   170e4:	693b      	ldr	r3, [r7, #16]
   170e6:	69db      	ldr	r3, [r3, #28]
   170e8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   170ea:	693b      	ldr	r3, [r7, #16]
   170ec:	6a1b      	ldr	r3, [r3, #32]
   170ee:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   170f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   170f2:	2b00      	cmp	r3, #0
   170f4:	d106      	bne.n	17104 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   170f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170f8:	2100      	movs	r1, #0
   170fa:	0018      	movs	r0, r3
   170fc:	4bb6      	ldr	r3, [pc, #728]	; (173d8 <_i2c_master_set_config+0x348>)
   170fe:	4798      	blx	r3
   17100:	0003      	movs	r3, r0
   17102:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17106:	b2da      	uxtb	r2, r3
   17108:	230c      	movs	r3, #12
   1710a:	2110      	movs	r1, #16
   1710c:	468c      	mov	ip, r1
   1710e:	44bc      	add	ip, r7
   17110:	4463      	add	r3, ip
   17112:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17114:	230c      	movs	r3, #12
   17116:	2210      	movs	r2, #16
   17118:	4694      	mov	ip, r2
   1711a:	44bc      	add	ip, r7
   1711c:	4463      	add	r3, ip
   1711e:	2202      	movs	r2, #2
   17120:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   17122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17124:	0c1b      	lsrs	r3, r3, #16
   17126:	b2db      	uxtb	r3, r3
   17128:	220c      	movs	r2, #12
   1712a:	2110      	movs	r1, #16
   1712c:	468c      	mov	ip, r1
   1712e:	44bc      	add	ip, r7
   17130:	4462      	add	r2, ip
   17132:	0011      	movs	r1, r2
   17134:	0018      	movs	r0, r3
   17136:	4ba9      	ldr	r3, [pc, #676]	; (173dc <_i2c_master_set_config+0x34c>)
   17138:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   1713a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1713c:	2b00      	cmp	r3, #0
   1713e:	d106      	bne.n	1714e <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   17140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17142:	2101      	movs	r1, #1
   17144:	0018      	movs	r0, r3
   17146:	4ba4      	ldr	r3, [pc, #656]	; (173d8 <_i2c_master_set_config+0x348>)
   17148:	4798      	blx	r3
   1714a:	0003      	movs	r3, r0
   1714c:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1714e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17150:	b2da      	uxtb	r2, r3
   17152:	230c      	movs	r3, #12
   17154:	2110      	movs	r1, #16
   17156:	468c      	mov	ip, r1
   17158:	44bc      	add	ip, r7
   1715a:	4463      	add	r3, ip
   1715c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1715e:	230c      	movs	r3, #12
   17160:	2210      	movs	r2, #16
   17162:	4694      	mov	ip, r2
   17164:	44bc      	add	ip, r7
   17166:	4463      	add	r3, ip
   17168:	2202      	movs	r2, #2
   1716a:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   1716c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1716e:	0c1b      	lsrs	r3, r3, #16
   17170:	b2db      	uxtb	r3, r3
   17172:	220c      	movs	r2, #12
   17174:	2110      	movs	r1, #16
   17176:	468c      	mov	ip, r1
   17178:	44bc      	add	ip, r7
   1717a:	4462      	add	r2, ip
   1717c:	0011      	movs	r1, r2
   1717e:	0018      	movs	r0, r3
   17180:	4b96      	ldr	r3, [pc, #600]	; (173dc <_i2c_master_set_config+0x34c>)
   17182:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17184:	693b      	ldr	r3, [r7, #16]
   17186:	8a9a      	ldrh	r2, [r3, #20]
   17188:	697b      	ldr	r3, [r7, #20]
   1718a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   1718c:	693b      	ldr	r3, [r7, #16]
   1718e:	8ada      	ldrh	r2, [r3, #22]
   17190:	697b      	ldr	r3, [r7, #20]
   17192:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17194:	693b      	ldr	r3, [r7, #16]
   17196:	7e1b      	ldrb	r3, [r3, #24]
   17198:	2b00      	cmp	r3, #0
   1719a:	d103      	bne.n	171a4 <_i2c_master_set_config+0x114>
   1719c:	4b90      	ldr	r3, [pc, #576]	; (173e0 <_i2c_master_set_config+0x350>)
   1719e:	4798      	blx	r3
   171a0:	1e03      	subs	r3, r0, #0
   171a2:	d002      	beq.n	171aa <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   171a4:	2380      	movs	r3, #128	; 0x80
   171a6:	657b      	str	r3, [r7, #84]	; 0x54
   171a8:	e001      	b.n	171ae <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   171aa:	2300      	movs	r3, #0
   171ac:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   171ae:	693b      	ldr	r3, [r7, #16]
   171b0:	691b      	ldr	r3, [r3, #16]
   171b2:	2b00      	cmp	r3, #0
   171b4:	d004      	beq.n	171c0 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   171b6:	693b      	ldr	r3, [r7, #16]
   171b8:	691b      	ldr	r3, [r3, #16]
   171ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   171bc:	4313      	orrs	r3, r2
   171be:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   171c0:	693b      	ldr	r3, [r7, #16]
   171c2:	689b      	ldr	r3, [r3, #8]
   171c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   171c6:	4313      	orrs	r3, r2
   171c8:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   171ca:	693b      	ldr	r3, [r7, #16]
   171cc:	2224      	movs	r2, #36	; 0x24
   171ce:	5c9b      	ldrb	r3, [r3, r2]
   171d0:	2b00      	cmp	r3, #0
   171d2:	d004      	beq.n	171de <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   171d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   171d6:	2280      	movs	r2, #128	; 0x80
   171d8:	05d2      	lsls	r2, r2, #23
   171da:	4313      	orrs	r3, r2
   171dc:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   171de:	693b      	ldr	r3, [r7, #16]
   171e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   171e2:	2b00      	cmp	r3, #0
   171e4:	d004      	beq.n	171f0 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   171e6:	693b      	ldr	r3, [r7, #16]
   171e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   171ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   171ec:	4313      	orrs	r3, r2
   171ee:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   171f0:	693b      	ldr	r3, [r7, #16]
   171f2:	222c      	movs	r2, #44	; 0x2c
   171f4:	5c9b      	ldrb	r3, [r3, r2]
   171f6:	2b00      	cmp	r3, #0
   171f8:	d105      	bne.n	17206 <_i2c_master_set_config+0x176>
   171fa:	693b      	ldr	r3, [r7, #16]
   171fc:	689a      	ldr	r2, [r3, #8]
   171fe:	2380      	movs	r3, #128	; 0x80
   17200:	049b      	lsls	r3, r3, #18
   17202:	429a      	cmp	r2, r3
   17204:	d104      	bne.n	17210 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17208:	2280      	movs	r2, #128	; 0x80
   1720a:	0512      	lsls	r2, r2, #20
   1720c:	4313      	orrs	r3, r2
   1720e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17210:	693b      	ldr	r3, [r7, #16]
   17212:	222d      	movs	r2, #45	; 0x2d
   17214:	5c9b      	ldrb	r3, [r3, r2]
   17216:	2b00      	cmp	r3, #0
   17218:	d004      	beq.n	17224 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   1721a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1721c:	2280      	movs	r2, #128	; 0x80
   1721e:	0412      	lsls	r2, r2, #16
   17220:	4313      	orrs	r3, r2
   17222:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17224:	693b      	ldr	r3, [r7, #16]
   17226:	222e      	movs	r2, #46	; 0x2e
   17228:	5c9b      	ldrb	r3, [r3, r2]
   1722a:	2b00      	cmp	r3, #0
   1722c:	d004      	beq.n	17238 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1722e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17230:	2280      	movs	r2, #128	; 0x80
   17232:	03d2      	lsls	r2, r2, #15
   17234:	4313      	orrs	r3, r2
   17236:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1723a:	681a      	ldr	r2, [r3, #0]
   1723c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1723e:	431a      	orrs	r2, r3
   17240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17242:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17246:	2280      	movs	r2, #128	; 0x80
   17248:	0052      	lsls	r2, r2, #1
   1724a:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   1724c:	2323      	movs	r3, #35	; 0x23
   1724e:	2210      	movs	r2, #16
   17250:	4694      	mov	ip, r2
   17252:	44bc      	add	ip, r7
   17254:	4463      	add	r3, ip
   17256:	781b      	ldrb	r3, [r3, #0]
   17258:	3314      	adds	r3, #20
   1725a:	b2db      	uxtb	r3, r3
   1725c:	0018      	movs	r0, r3
   1725e:	4b61      	ldr	r3, [pc, #388]	; (173e4 <_i2c_master_set_config+0x354>)
   17260:	4798      	blx	r3
   17262:	0003      	movs	r3, r0
   17264:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17266:	693b      	ldr	r3, [r7, #16]
   17268:	681b      	ldr	r3, [r3, #0]
   1726a:	22fa      	movs	r2, #250	; 0xfa
   1726c:	0092      	lsls	r2, r2, #2
   1726e:	4353      	muls	r3, r2
   17270:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   17272:	693b      	ldr	r3, [r7, #16]
   17274:	685b      	ldr	r3, [r3, #4]
   17276:	22fa      	movs	r2, #250	; 0xfa
   17278:	0092      	lsls	r2, r2, #2
   1727a:	4353      	muls	r3, r2
   1727c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1727e:	693b      	ldr	r3, [r7, #16]
   17280:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17282:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17284:	4b58      	ldr	r3, [pc, #352]	; (173e8 <_i2c_master_set_config+0x358>)
   17286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17288:	4798      	blx	r3
   1728a:	0005      	movs	r5, r0
   1728c:	000e      	movs	r6, r1
   1728e:	4b56      	ldr	r3, [pc, #344]	; (173e8 <_i2c_master_set_config+0x358>)
   17290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17292:	4798      	blx	r3
   17294:	60b8      	str	r0, [r7, #8]
   17296:	60f9      	str	r1, [r7, #12]
   17298:	4b53      	ldr	r3, [pc, #332]	; (173e8 <_i2c_master_set_config+0x358>)
   1729a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1729c:	4798      	blx	r3
   1729e:	4c53      	ldr	r4, [pc, #332]	; (173ec <_i2c_master_set_config+0x35c>)
   172a0:	4a53      	ldr	r2, [pc, #332]	; (173f0 <_i2c_master_set_config+0x360>)
   172a2:	4b54      	ldr	r3, [pc, #336]	; (173f4 <_i2c_master_set_config+0x364>)
   172a4:	47a0      	blx	r4
   172a6:	0003      	movs	r3, r0
   172a8:	000c      	movs	r4, r1
   172aa:	603b      	str	r3, [r7, #0]
   172ac:	607c      	str	r4, [r7, #4]
   172ae:	4b4e      	ldr	r3, [pc, #312]	; (173e8 <_i2c_master_set_config+0x358>)
   172b0:	6a38      	ldr	r0, [r7, #32]
   172b2:	4798      	blx	r3
   172b4:	0002      	movs	r2, r0
   172b6:	000b      	movs	r3, r1
   172b8:	4c4c      	ldr	r4, [pc, #304]	; (173ec <_i2c_master_set_config+0x35c>)
   172ba:	6838      	ldr	r0, [r7, #0]
   172bc:	6879      	ldr	r1, [r7, #4]
   172be:	47a0      	blx	r4
   172c0:	0003      	movs	r3, r0
   172c2:	000c      	movs	r4, r1
   172c4:	0018      	movs	r0, r3
   172c6:	0021      	movs	r1, r4
   172c8:	4c4b      	ldr	r4, [pc, #300]	; (173f8 <_i2c_master_set_config+0x368>)
   172ca:	2200      	movs	r2, #0
   172cc:	4b4b      	ldr	r3, [pc, #300]	; (173fc <_i2c_master_set_config+0x36c>)
   172ce:	47a0      	blx	r4
   172d0:	0003      	movs	r3, r0
   172d2:	000c      	movs	r4, r1
   172d4:	001a      	movs	r2, r3
   172d6:	0023      	movs	r3, r4
   172d8:	4c44      	ldr	r4, [pc, #272]	; (173ec <_i2c_master_set_config+0x35c>)
   172da:	68b8      	ldr	r0, [r7, #8]
   172dc:	68f9      	ldr	r1, [r7, #12]
   172de:	47a0      	blx	r4
   172e0:	0003      	movs	r3, r0
   172e2:	000c      	movs	r4, r1
   172e4:	001a      	movs	r2, r3
   172e6:	0023      	movs	r3, r4
   172e8:	4c45      	ldr	r4, [pc, #276]	; (17400 <_i2c_master_set_config+0x370>)
   172ea:	0028      	movs	r0, r5
   172ec:	0031      	movs	r1, r6
   172ee:	47a0      	blx	r4
   172f0:	0003      	movs	r3, r0
   172f2:	000c      	movs	r4, r1
   172f4:	001d      	movs	r5, r3
   172f6:	0026      	movs	r6, r4
   172f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   172fa:	005a      	lsls	r2, r3, #1
   172fc:	4b3a      	ldr	r3, [pc, #232]	; (173e8 <_i2c_master_set_config+0x358>)
   172fe:	0010      	movs	r0, r2
   17300:	4798      	blx	r3
   17302:	0002      	movs	r2, r0
   17304:	000b      	movs	r3, r1
   17306:	4c3c      	ldr	r4, [pc, #240]	; (173f8 <_i2c_master_set_config+0x368>)
   17308:	0028      	movs	r0, r5
   1730a:	0031      	movs	r1, r6
   1730c:	47a0      	blx	r4
   1730e:	0003      	movs	r3, r0
   17310:	000c      	movs	r4, r1
   17312:	0018      	movs	r0, r3
   17314:	0021      	movs	r1, r4
   17316:	4c3a      	ldr	r4, [pc, #232]	; (17400 <_i2c_master_set_config+0x370>)
   17318:	2200      	movs	r2, #0
   1731a:	4b3a      	ldr	r3, [pc, #232]	; (17404 <_i2c_master_set_config+0x374>)
   1731c:	47a0      	blx	r4
   1731e:	0003      	movs	r3, r0
   17320:	000c      	movs	r4, r1
   17322:	001d      	movs	r5, r3
   17324:	0026      	movs	r6, r4
   17326:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17328:	005a      	lsls	r2, r3, #1
   1732a:	4b2f      	ldr	r3, [pc, #188]	; (173e8 <_i2c_master_set_config+0x358>)
   1732c:	0010      	movs	r0, r2
   1732e:	4798      	blx	r3
   17330:	0002      	movs	r2, r0
   17332:	000b      	movs	r3, r1
   17334:	4c34      	ldr	r4, [pc, #208]	; (17408 <_i2c_master_set_config+0x378>)
   17336:	0028      	movs	r0, r5
   17338:	0031      	movs	r1, r6
   1733a:	47a0      	blx	r4
   1733c:	0003      	movs	r3, r0
   1733e:	000c      	movs	r4, r1
   17340:	0019      	movs	r1, r3
   17342:	0022      	movs	r2, r4
   17344:	4b31      	ldr	r3, [pc, #196]	; (1740c <_i2c_master_set_config+0x37c>)
   17346:	0008      	movs	r0, r1
   17348:	0011      	movs	r1, r2
   1734a:	4798      	blx	r3
   1734c:	0003      	movs	r3, r0
   1734e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   17350:	693b      	ldr	r3, [r7, #16]
   17352:	689a      	ldr	r2, [r3, #8]
   17354:	2380      	movs	r3, #128	; 0x80
   17356:	049b      	lsls	r3, r3, #18
   17358:	429a      	cmp	r2, r3
   1735a:	d16a      	bne.n	17432 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   1735c:	4b22      	ldr	r3, [pc, #136]	; (173e8 <_i2c_master_set_config+0x358>)
   1735e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17360:	4798      	blx	r3
   17362:	4c25      	ldr	r4, [pc, #148]	; (173f8 <_i2c_master_set_config+0x368>)
   17364:	0002      	movs	r2, r0
   17366:	000b      	movs	r3, r1
   17368:	47a0      	blx	r4
   1736a:	0003      	movs	r3, r0
   1736c:	000c      	movs	r4, r1
   1736e:	001d      	movs	r5, r3
   17370:	0026      	movs	r6, r4
   17372:	4b1d      	ldr	r3, [pc, #116]	; (173e8 <_i2c_master_set_config+0x358>)
   17374:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17376:	4798      	blx	r3
   17378:	4c1c      	ldr	r4, [pc, #112]	; (173ec <_i2c_master_set_config+0x35c>)
   1737a:	2200      	movs	r2, #0
   1737c:	4b24      	ldr	r3, [pc, #144]	; (17410 <_i2c_master_set_config+0x380>)
   1737e:	47a0      	blx	r4
   17380:	0003      	movs	r3, r0
   17382:	000c      	movs	r4, r1
   17384:	001a      	movs	r2, r3
   17386:	0023      	movs	r3, r4
   17388:	4c1f      	ldr	r4, [pc, #124]	; (17408 <_i2c_master_set_config+0x378>)
   1738a:	0028      	movs	r0, r5
   1738c:	0031      	movs	r1, r6
   1738e:	47a0      	blx	r4
   17390:	0003      	movs	r3, r0
   17392:	000c      	movs	r4, r1
   17394:	0018      	movs	r0, r3
   17396:	0021      	movs	r1, r4
   17398:	4c19      	ldr	r4, [pc, #100]	; (17400 <_i2c_master_set_config+0x370>)
   1739a:	2200      	movs	r2, #0
   1739c:	4b19      	ldr	r3, [pc, #100]	; (17404 <_i2c_master_set_config+0x374>)
   1739e:	47a0      	blx	r4
   173a0:	0003      	movs	r3, r0
   173a2:	000c      	movs	r4, r1
   173a4:	0019      	movs	r1, r3
   173a6:	0022      	movs	r2, r4
   173a8:	4b18      	ldr	r3, [pc, #96]	; (1740c <_i2c_master_set_config+0x37c>)
   173aa:	0008      	movs	r0, r1
   173ac:	0011      	movs	r1, r2
   173ae:	4798      	blx	r3
   173b0:	0003      	movs	r3, r0
   173b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   173b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   173b6:	2b00      	cmp	r3, #0
   173b8:	d02e      	beq.n	17418 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   173ba:	4b16      	ldr	r3, [pc, #88]	; (17414 <_i2c_master_set_config+0x384>)
   173bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   173be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   173c0:	4798      	blx	r3
   173c2:	0003      	movs	r3, r0
   173c4:	1e9a      	subs	r2, r3, #2
   173c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   173c8:	1ad3      	subs	r3, r2, r3
   173ca:	653b      	str	r3, [r7, #80]	; 0x50
   173cc:	e031      	b.n	17432 <_i2c_master_set_config+0x3a2>
   173ce:	46c0      	nop			; (mov r8, r8)
   173d0:	00026fa9 	.word	0x00026fa9
   173d4:	00016f51 	.word	0x00016f51
   173d8:	00026ded 	.word	0x00026ded
   173dc:	00029b99 	.word	0x00029b99
   173e0:	00016f79 	.word	0x00016f79
   173e4:	0002995d 	.word	0x0002995d
   173e8:	00033ee5 	.word	0x00033ee5
   173ec:	00033351 	.word	0x00033351
   173f0:	e826d695 	.word	0xe826d695
   173f4:	3e112e0b 	.word	0x3e112e0b
   173f8:	000326c9 	.word	0x000326c9
   173fc:	40240000 	.word	0x40240000
   17400:	00033851 	.word	0x00033851
   17404:	3ff00000 	.word	0x3ff00000
   17408:	00032ce9 	.word	0x00032ce9
   1740c:	00033e7d 	.word	0x00033e7d
   17410:	40080000 	.word	0x40080000
   17414:	00032389 	.word	0x00032389
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1741a:	005a      	lsls	r2, r3, #1
   1741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1741e:	18d3      	adds	r3, r2, r3
   17420:	1e5a      	subs	r2, r3, #1
   17422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17424:	0059      	lsls	r1, r3, #1
   17426:	4b1d      	ldr	r3, [pc, #116]	; (1749c <_i2c_master_set_config+0x40c>)
   17428:	0010      	movs	r0, r2
   1742a:	4798      	blx	r3
   1742c:	0003      	movs	r3, r0
   1742e:	3b01      	subs	r3, #1
   17430:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   17432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17434:	2bff      	cmp	r3, #255	; 0xff
   17436:	dc08      	bgt.n	1744a <_i2c_master_set_config+0x3ba>
   17438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1743a:	2b00      	cmp	r3, #0
   1743c:	db05      	blt.n	1744a <_i2c_master_set_config+0x3ba>
   1743e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17440:	2bff      	cmp	r3, #255	; 0xff
   17442:	dc02      	bgt.n	1744a <_i2c_master_set_config+0x3ba>
   17444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17446:	2b00      	cmp	r3, #0
   17448:	da06      	bge.n	17458 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1744a:	233b      	movs	r3, #59	; 0x3b
   1744c:	2210      	movs	r2, #16
   1744e:	4694      	mov	ip, r2
   17450:	44bc      	add	ip, r7
   17452:	4463      	add	r3, ip
   17454:	2240      	movs	r2, #64	; 0x40
   17456:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17458:	233b      	movs	r3, #59	; 0x3b
   1745a:	2210      	movs	r2, #16
   1745c:	4694      	mov	ip, r2
   1745e:	44bc      	add	ip, r7
   17460:	4463      	add	r3, ip
   17462:	781b      	ldrb	r3, [r3, #0]
   17464:	2b40      	cmp	r3, #64	; 0x40
   17466:	d00e      	beq.n	17486 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1746a:	22ff      	movs	r2, #255	; 0xff
   1746c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1746e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17470:	041b      	lsls	r3, r3, #16
   17472:	0019      	movs	r1, r3
   17474:	23ff      	movs	r3, #255	; 0xff
   17476:	041b      	lsls	r3, r3, #16
   17478:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1747a:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1747c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1747e:	0612      	lsls	r2, r2, #24
   17480:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17484:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   17486:	233b      	movs	r3, #59	; 0x3b
   17488:	2210      	movs	r2, #16
   1748a:	4694      	mov	ip, r2
   1748c:	44bc      	add	ip, r7
   1748e:	4463      	add	r3, ip
   17490:	781b      	ldrb	r3, [r3, #0]
}
   17492:	0018      	movs	r0, r3
   17494:	46bd      	mov	sp, r7
   17496:	b017      	add	sp, #92	; 0x5c
   17498:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1749a:	46c0      	nop			; (mov r8, r8)
   1749c:	00032389 	.word	0x00032389

000174a0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   174a0:	b590      	push	{r4, r7, lr}
   174a2:	b08b      	sub	sp, #44	; 0x2c
   174a4:	af00      	add	r7, sp, #0
   174a6:	60f8      	str	r0, [r7, #12]
   174a8:	60b9      	str	r1, [r7, #8]
   174aa:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   174ac:	68fb      	ldr	r3, [r7, #12]
   174ae:	68ba      	ldr	r2, [r7, #8]
   174b0:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   174b2:	68fb      	ldr	r3, [r7, #12]
   174b4:	681b      	ldr	r3, [r3, #0]
   174b6:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   174b8:	68fb      	ldr	r3, [r7, #12]
   174ba:	681b      	ldr	r3, [r3, #0]
   174bc:	0018      	movs	r0, r3
   174be:	4b3b      	ldr	r3, [pc, #236]	; (175ac <i2c_master_init+0x10c>)
   174c0:	4798      	blx	r3
   174c2:	0003      	movs	r3, r0
   174c4:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   174c6:	6a3b      	ldr	r3, [r7, #32]
   174c8:	3302      	adds	r3, #2
   174ca:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   174cc:	6a3b      	ldr	r3, [r7, #32]
   174ce:	3314      	adds	r3, #20
   174d0:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   174d2:	2201      	movs	r2, #1
   174d4:	69fb      	ldr	r3, [r7, #28]
   174d6:	409a      	lsls	r2, r3
   174d8:	0013      	movs	r3, r2
   174da:	0019      	movs	r1, r3
   174dc:	2002      	movs	r0, #2
   174de:	4b34      	ldr	r3, [pc, #208]	; (175b0 <i2c_master_init+0x110>)
   174e0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   174e2:	2314      	movs	r3, #20
   174e4:	18fb      	adds	r3, r7, r3
   174e6:	0018      	movs	r0, r3
   174e8:	4b32      	ldr	r3, [pc, #200]	; (175b4 <i2c_master_init+0x114>)
   174ea:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   174ec:	687b      	ldr	r3, [r7, #4]
   174ee:	7b1a      	ldrb	r2, [r3, #12]
   174f0:	2314      	movs	r3, #20
   174f2:	18fb      	adds	r3, r7, r3
   174f4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   174f6:	69bb      	ldr	r3, [r7, #24]
   174f8:	b2db      	uxtb	r3, r3
   174fa:	2214      	movs	r2, #20
   174fc:	18ba      	adds	r2, r7, r2
   174fe:	0011      	movs	r1, r2
   17500:	0018      	movs	r0, r3
   17502:	4b2d      	ldr	r3, [pc, #180]	; (175b8 <i2c_master_init+0x118>)
   17504:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17506:	69bb      	ldr	r3, [r7, #24]
   17508:	b2db      	uxtb	r3, r3
   1750a:	0018      	movs	r0, r3
   1750c:	4b2b      	ldr	r3, [pc, #172]	; (175bc <i2c_master_init+0x11c>)
   1750e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17510:	687b      	ldr	r3, [r7, #4]
   17512:	7b1b      	ldrb	r3, [r3, #12]
   17514:	2100      	movs	r1, #0
   17516:	0018      	movs	r0, r3
   17518:	4b29      	ldr	r3, [pc, #164]	; (175c0 <i2c_master_init+0x120>)
   1751a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1751e:	681b      	ldr	r3, [r3, #0]
   17520:	2202      	movs	r2, #2
   17522:	4013      	ands	r3, r2
   17524:	d001      	beq.n	1752a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   17526:	231c      	movs	r3, #28
   17528:	e03b      	b.n	175a2 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   1752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1752c:	681b      	ldr	r3, [r3, #0]
   1752e:	2201      	movs	r2, #1
   17530:	4013      	ands	r3, r2
   17532:	d001      	beq.n	17538 <i2c_master_init+0x98>
		return STATUS_BUSY;
   17534:	2305      	movs	r3, #5
   17536:	e034      	b.n	175a2 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17538:	68fb      	ldr	r3, [r7, #12]
   1753a:	681b      	ldr	r3, [r3, #0]
   1753c:	2217      	movs	r2, #23
   1753e:	18bc      	adds	r4, r7, r2
   17540:	0018      	movs	r0, r3
   17542:	4b1a      	ldr	r3, [pc, #104]	; (175ac <i2c_master_init+0x10c>)
   17544:	4798      	blx	r3
   17546:	0003      	movs	r3, r0
   17548:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   1754a:	4a1e      	ldr	r2, [pc, #120]	; (175c4 <i2c_master_init+0x124>)
   1754c:	2317      	movs	r3, #23
   1754e:	18fb      	adds	r3, r7, r3
   17550:	781b      	ldrb	r3, [r3, #0]
   17552:	0011      	movs	r1, r2
   17554:	0018      	movs	r0, r3
   17556:	4b1c      	ldr	r3, [pc, #112]	; (175c8 <i2c_master_init+0x128>)
   17558:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1755a:	2317      	movs	r3, #23
   1755c:	18fb      	adds	r3, r7, r3
   1755e:	781a      	ldrb	r2, [r3, #0]
   17560:	4b1a      	ldr	r3, [pc, #104]	; (175cc <i2c_master_init+0x12c>)
   17562:	0092      	lsls	r2, r2, #2
   17564:	68f9      	ldr	r1, [r7, #12]
   17566:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   17568:	68fb      	ldr	r3, [r7, #12]
   1756a:	2200      	movs	r2, #0
   1756c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1756e:	68fb      	ldr	r3, [r7, #12]
   17570:	2200      	movs	r2, #0
   17572:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   17574:	68fb      	ldr	r3, [r7, #12]
   17576:	2200      	movs	r2, #0
   17578:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1757a:	68fb      	ldr	r3, [r7, #12]
   1757c:	2200      	movs	r2, #0
   1757e:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   17580:	68fb      	ldr	r3, [r7, #12]
   17582:	2225      	movs	r2, #37	; 0x25
   17584:	2100      	movs	r1, #0
   17586:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   17588:	68fb      	ldr	r3, [r7, #12]
   1758a:	2200      	movs	r2, #0
   1758c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17590:	2214      	movs	r2, #20
   17592:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   17594:	687a      	ldr	r2, [r7, #4]
   17596:	68fb      	ldr	r3, [r7, #12]
   17598:	0011      	movs	r1, r2
   1759a:	0018      	movs	r0, r3
   1759c:	4b0c      	ldr	r3, [pc, #48]	; (175d0 <i2c_master_init+0x130>)
   1759e:	4798      	blx	r3
   175a0:	0003      	movs	r3, r0
}
   175a2:	0018      	movs	r0, r3
   175a4:	46bd      	mov	sp, r7
   175a6:	b00b      	add	sp, #44	; 0x2c
   175a8:	bd90      	pop	{r4, r7, pc}
   175aa:	46c0      	nop			; (mov r8, r8)
   175ac:	00026fa9 	.word	0x00026fa9
   175b0:	00016ef5 	.word	0x00016ef5
   175b4:	00016edd 	.word	0x00016edd
   175b8:	00029839 	.word	0x00029839
   175bc:	0002987d 	.word	0x0002987d
   175c0:	00026d61 	.word	0x00026d61
   175c4:	00013415 	.word	0x00013415
   175c8:	0002700d 	.word	0x0002700d
   175cc:	20005ac0 	.word	0x20005ac0
   175d0:	00017091 	.word	0x00017091

000175d4 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   175d4:	b580      	push	{r7, lr}
   175d6:	b084      	sub	sp, #16
   175d8:	af00      	add	r7, sp, #0
   175da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   175dc:	687b      	ldr	r3, [r7, #4]
   175de:	681b      	ldr	r3, [r3, #0]
   175e0:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   175e2:	687b      	ldr	r3, [r7, #4]
   175e4:	0018      	movs	r0, r3
   175e6:	4b0f      	ldr	r3, [pc, #60]	; (17624 <i2c_master_reset+0x50>)
   175e8:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   175ea:	687b      	ldr	r3, [r7, #4]
   175ec:	0018      	movs	r0, r3
   175ee:	4b0e      	ldr	r3, [pc, #56]	; (17628 <i2c_master_reset+0x54>)
   175f0:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   175f2:	4b0e      	ldr	r3, [pc, #56]	; (1762c <i2c_master_reset+0x58>)
   175f4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   175f6:	687b      	ldr	r3, [r7, #4]
   175f8:	681b      	ldr	r3, [r3, #0]
   175fa:	0018      	movs	r0, r3
   175fc:	4b0c      	ldr	r3, [pc, #48]	; (17630 <i2c_master_reset+0x5c>)
   175fe:	4798      	blx	r3
   17600:	0003      	movs	r3, r0
   17602:	0018      	movs	r0, r3
   17604:	4b0b      	ldr	r3, [pc, #44]	; (17634 <i2c_master_reset+0x60>)
   17606:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17608:	4b0b      	ldr	r3, [pc, #44]	; (17638 <i2c_master_reset+0x64>)
   1760a:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1760c:	687b      	ldr	r3, [r7, #4]
   1760e:	0018      	movs	r0, r3
   17610:	4b04      	ldr	r3, [pc, #16]	; (17624 <i2c_master_reset+0x50>)
   17612:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   17614:	68fb      	ldr	r3, [r7, #12]
   17616:	2201      	movs	r2, #1
   17618:	601a      	str	r2, [r3, #0]
}
   1761a:	46c0      	nop			; (mov r8, r8)
   1761c:	46bd      	mov	sp, r7
   1761e:	b004      	add	sp, #16
   17620:	bd80      	pop	{r7, pc}
   17622:	46c0      	nop			; (mov r8, r8)
   17624:	00017015 	.word	0x00017015
   17628:	00017039 	.word	0x00017039
   1762c:	00016f99 	.word	0x00016f99
   17630:	00027079 	.word	0x00027079
   17634:	000299b5 	.word	0x000299b5
   17638:	00016fad 	.word	0x00016fad

0001763c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1763c:	b580      	push	{r7, lr}
   1763e:	b084      	sub	sp, #16
   17640:	af00      	add	r7, sp, #0
   17642:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17644:	687b      	ldr	r3, [r7, #4]
   17646:	681b      	ldr	r3, [r3, #0]
   17648:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1764a:	68fb      	ldr	r3, [r7, #12]
   1764c:	7e1b      	ldrb	r3, [r3, #24]
   1764e:	b2db      	uxtb	r3, r3
   17650:	001a      	movs	r2, r3
   17652:	2302      	movs	r3, #2
   17654:	4013      	ands	r3, r2
   17656:	d00b      	beq.n	17670 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17658:	68fb      	ldr	r3, [r7, #12]
   1765a:	2202      	movs	r2, #2
   1765c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1765e:	68fb      	ldr	r3, [r7, #12]
   17660:	8b5b      	ldrh	r3, [r3, #26]
   17662:	b29b      	uxth	r3, r3
   17664:	001a      	movs	r2, r3
   17666:	2302      	movs	r3, #2
   17668:	4013      	ands	r3, r2
   1766a:	d011      	beq.n	17690 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1766c:	2341      	movs	r3, #65	; 0x41
   1766e:	e010      	b.n	17692 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   17670:	68fb      	ldr	r3, [r7, #12]
   17672:	8b5b      	ldrh	r3, [r3, #26]
   17674:	b29b      	uxth	r3, r3
   17676:	001a      	movs	r2, r3
   17678:	2304      	movs	r3, #4
   1767a:	4013      	ands	r3, r2
   1767c:	d008      	beq.n	17690 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1767e:	68fb      	ldr	r3, [r7, #12]
   17680:	685b      	ldr	r3, [r3, #4]
   17682:	22c0      	movs	r2, #192	; 0xc0
   17684:	0292      	lsls	r2, r2, #10
   17686:	431a      	orrs	r2, r3
   17688:	68fb      	ldr	r3, [r7, #12]
   1768a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1768c:	2318      	movs	r3, #24
   1768e:	e000      	b.n	17692 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   17690:	2300      	movs	r3, #0
}
   17692:	0018      	movs	r0, r3
   17694:	46bd      	mov	sp, r7
   17696:	b004      	add	sp, #16
   17698:	bd80      	pop	{r7, pc}

0001769a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1769a:	b580      	push	{r7, lr}
   1769c:	b084      	sub	sp, #16
   1769e:	af00      	add	r7, sp, #0
   176a0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   176a2:	687b      	ldr	r3, [r7, #4]
   176a4:	681b      	ldr	r3, [r3, #0]
   176a6:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   176a8:	230e      	movs	r3, #14
   176aa:	18fb      	adds	r3, r7, r3
   176ac:	2200      	movs	r2, #0
   176ae:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   176b0:	e00f      	b.n	176d2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   176b2:	230e      	movs	r3, #14
   176b4:	18fb      	adds	r3, r7, r3
   176b6:	220e      	movs	r2, #14
   176b8:	18ba      	adds	r2, r7, r2
   176ba:	8812      	ldrh	r2, [r2, #0]
   176bc:	3201      	adds	r2, #1
   176be:	801a      	strh	r2, [r3, #0]
   176c0:	687b      	ldr	r3, [r7, #4]
   176c2:	891b      	ldrh	r3, [r3, #8]
   176c4:	220e      	movs	r2, #14
   176c6:	18ba      	adds	r2, r7, r2
   176c8:	8812      	ldrh	r2, [r2, #0]
   176ca:	429a      	cmp	r2, r3
   176cc:	d301      	bcc.n	176d2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   176ce:	2312      	movs	r3, #18
   176d0:	e00e      	b.n	176f0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   176d2:	68bb      	ldr	r3, [r7, #8]
   176d4:	7e1b      	ldrb	r3, [r3, #24]
   176d6:	b2db      	uxtb	r3, r3
   176d8:	001a      	movs	r2, r3
   176da:	2301      	movs	r3, #1
   176dc:	4013      	ands	r3, r2
   176de:	d106      	bne.n	176ee <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   176e0:	68bb      	ldr	r3, [r7, #8]
   176e2:	7e1b      	ldrb	r3, [r3, #24]
   176e4:	b2db      	uxtb	r3, r3
   176e6:	001a      	movs	r2, r3
   176e8:	2302      	movs	r3, #2
   176ea:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   176ec:	d0e1      	beq.n	176b2 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   176ee:	2300      	movs	r3, #0
}
   176f0:	0018      	movs	r0, r3
   176f2:	46bd      	mov	sp, r7
   176f4:	b004      	add	sp, #16
   176f6:	bd80      	pop	{r7, pc}

000176f8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   176f8:	b590      	push	{r4, r7, lr}
   176fa:	b085      	sub	sp, #20
   176fc:	af00      	add	r7, sp, #0
   176fe:	6078      	str	r0, [r7, #4]
   17700:	000a      	movs	r2, r1
   17702:	1cfb      	adds	r3, r7, #3
   17704:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17706:	687b      	ldr	r3, [r7, #4]
   17708:	681b      	ldr	r3, [r3, #0]
   1770a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1770c:	68fb      	ldr	r3, [r7, #12]
   1770e:	685b      	ldr	r3, [r3, #4]
   17710:	2280      	movs	r2, #128	; 0x80
   17712:	02d2      	lsls	r2, r2, #11
   17714:	431a      	orrs	r2, r3
   17716:	68fb      	ldr	r3, [r7, #12]
   17718:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1771a:	1cfb      	adds	r3, r7, #3
   1771c:	781a      	ldrb	r2, [r3, #0]
   1771e:	68fb      	ldr	r3, [r7, #12]
   17720:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17722:	230b      	movs	r3, #11
   17724:	18fc      	adds	r4, r7, r3
   17726:	687b      	ldr	r3, [r7, #4]
   17728:	0018      	movs	r0, r3
   1772a:	4b07      	ldr	r3, [pc, #28]	; (17748 <_i2c_master_send_hs_master_code+0x50>)
   1772c:	4798      	blx	r3
   1772e:	0003      	movs	r3, r0
   17730:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17732:	68fb      	ldr	r3, [r7, #12]
   17734:	2201      	movs	r2, #1
   17736:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17738:	230b      	movs	r3, #11
   1773a:	18fb      	adds	r3, r7, r3
   1773c:	781b      	ldrb	r3, [r3, #0]
}
   1773e:	0018      	movs	r0, r3
   17740:	46bd      	mov	sp, r7
   17742:	b005      	add	sp, #20
   17744:	bd90      	pop	{r4, r7, pc}
   17746:	46c0      	nop			; (mov r8, r8)
   17748:	0001769b 	.word	0x0001769b

0001774c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1774c:	b580      	push	{r7, lr}
   1774e:	af00      	add	r7, sp, #0
   17750:	2000      	movs	r0, #0
   17752:	4b02      	ldr	r3, [pc, #8]	; (1775c <TC3_Handler+0x10>)
   17754:	4798      	blx	r3
   17756:	46c0      	nop			; (mov r8, r8)
   17758:	46bd      	mov	sp, r7
   1775a:	bd80      	pop	{r7, pc}
   1775c:	00017789 	.word	0x00017789

00017760 <TC4_Handler>:
   17760:	b580      	push	{r7, lr}
   17762:	af00      	add	r7, sp, #0
   17764:	2001      	movs	r0, #1
   17766:	4b02      	ldr	r3, [pc, #8]	; (17770 <TC4_Handler+0x10>)
   17768:	4798      	blx	r3
   1776a:	46c0      	nop			; (mov r8, r8)
   1776c:	46bd      	mov	sp, r7
   1776e:	bd80      	pop	{r7, pc}
   17770:	00017789 	.word	0x00017789

00017774 <TC5_Handler>:
   17774:	b580      	push	{r7, lr}
   17776:	af00      	add	r7, sp, #0
   17778:	2002      	movs	r0, #2
   1777a:	4b02      	ldr	r3, [pc, #8]	; (17784 <TC5_Handler+0x10>)
   1777c:	4798      	blx	r3
   1777e:	46c0      	nop			; (mov r8, r8)
   17780:	46bd      	mov	sp, r7
   17782:	bd80      	pop	{r7, pc}
   17784:	00017789 	.word	0x00017789

00017788 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17788:	b580      	push	{r7, lr}
   1778a:	b084      	sub	sp, #16
   1778c:	af00      	add	r7, sp, #0
   1778e:	0002      	movs	r2, r0
   17790:	1dfb      	adds	r3, r7, #7
   17792:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17794:	1dfb      	adds	r3, r7, #7
   17796:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17798:	4b28      	ldr	r3, [pc, #160]	; (1783c <_tc_interrupt_handler+0xb4>)
   1779a:	0092      	lsls	r2, r2, #2
   1779c:	58d3      	ldr	r3, [r2, r3]
   1779e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   177a0:	68fb      	ldr	r3, [r7, #12]
   177a2:	681b      	ldr	r3, [r3, #0]
   177a4:	7b9b      	ldrb	r3, [r3, #14]
   177a6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   177a8:	68fa      	ldr	r2, [r7, #12]
   177aa:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   177ac:	4013      	ands	r3, r2
   177ae:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   177b0:	68fb      	ldr	r3, [r7, #12]
   177b2:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   177b4:	230b      	movs	r3, #11
   177b6:	18fb      	adds	r3, r7, r3
   177b8:	400a      	ands	r2, r1
   177ba:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   177bc:	230b      	movs	r3, #11
   177be:	18fb      	adds	r3, r7, r3
   177c0:	781b      	ldrb	r3, [r3, #0]
   177c2:	2201      	movs	r2, #1
   177c4:	4013      	ands	r3, r2
   177c6:	d008      	beq.n	177da <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   177c8:	68fb      	ldr	r3, [r7, #12]
   177ca:	689b      	ldr	r3, [r3, #8]
   177cc:	68fa      	ldr	r2, [r7, #12]
   177ce:	0010      	movs	r0, r2
   177d0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   177d2:	68fb      	ldr	r3, [r7, #12]
   177d4:	681b      	ldr	r3, [r3, #0]
   177d6:	2201      	movs	r2, #1
   177d8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   177da:	230b      	movs	r3, #11
   177dc:	18fb      	adds	r3, r7, r3
   177de:	781b      	ldrb	r3, [r3, #0]
   177e0:	2202      	movs	r2, #2
   177e2:	4013      	ands	r3, r2
   177e4:	d008      	beq.n	177f8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   177e6:	68fb      	ldr	r3, [r7, #12]
   177e8:	68db      	ldr	r3, [r3, #12]
   177ea:	68fa      	ldr	r2, [r7, #12]
   177ec:	0010      	movs	r0, r2
   177ee:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   177f0:	68fb      	ldr	r3, [r7, #12]
   177f2:	681b      	ldr	r3, [r3, #0]
   177f4:	2202      	movs	r2, #2
   177f6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   177f8:	230b      	movs	r3, #11
   177fa:	18fb      	adds	r3, r7, r3
   177fc:	781b      	ldrb	r3, [r3, #0]
   177fe:	2210      	movs	r2, #16
   17800:	4013      	ands	r3, r2
   17802:	d008      	beq.n	17816 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17804:	68fb      	ldr	r3, [r7, #12]
   17806:	691b      	ldr	r3, [r3, #16]
   17808:	68fa      	ldr	r2, [r7, #12]
   1780a:	0010      	movs	r0, r2
   1780c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1780e:	68fb      	ldr	r3, [r7, #12]
   17810:	681b      	ldr	r3, [r3, #0]
   17812:	2210      	movs	r2, #16
   17814:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17816:	230b      	movs	r3, #11
   17818:	18fb      	adds	r3, r7, r3
   1781a:	781b      	ldrb	r3, [r3, #0]
   1781c:	2220      	movs	r2, #32
   1781e:	4013      	ands	r3, r2
   17820:	d008      	beq.n	17834 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17822:	68fb      	ldr	r3, [r7, #12]
   17824:	695b      	ldr	r3, [r3, #20]
   17826:	68fa      	ldr	r2, [r7, #12]
   17828:	0010      	movs	r0, r2
   1782a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1782c:	68fb      	ldr	r3, [r7, #12]
   1782e:	681b      	ldr	r3, [r3, #0]
   17830:	2220      	movs	r2, #32
   17832:	739a      	strb	r2, [r3, #14]
	}
}
   17834:	46c0      	nop			; (mov r8, r8)
   17836:	46bd      	mov	sp, r7
   17838:	b004      	add	sp, #16
   1783a:	bd80      	pop	{r7, pc}
   1783c:	200048a8 	.word	0x200048a8

00017840 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17840:	b580      	push	{r7, lr}
   17842:	b084      	sub	sp, #16
   17844:	af00      	add	r7, sp, #0
   17846:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17848:	2300      	movs	r3, #0
   1784a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1784c:	687b      	ldr	r3, [r7, #4]
   1784e:	2b00      	cmp	r3, #0
   17850:	d101      	bne.n	17856 <FreeRTOS_CLIRegisterCommand+0x16>
   17852:	b672      	cpsid	i
   17854:	e7fe      	b.n	17854 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17856:	2008      	movs	r0, #8
   17858:	4b11      	ldr	r3, [pc, #68]	; (178a0 <FreeRTOS_CLIRegisterCommand+0x60>)
   1785a:	4798      	blx	r3
   1785c:	0003      	movs	r3, r0
   1785e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17860:	68bb      	ldr	r3, [r7, #8]
   17862:	2b00      	cmp	r3, #0
   17864:	d101      	bne.n	1786a <FreeRTOS_CLIRegisterCommand+0x2a>
   17866:	b672      	cpsid	i
   17868:	e7fe      	b.n	17868 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1786a:	68bb      	ldr	r3, [r7, #8]
   1786c:	2b00      	cmp	r3, #0
   1786e:	d012      	beq.n	17896 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17870:	4b0c      	ldr	r3, [pc, #48]	; (178a4 <FreeRTOS_CLIRegisterCommand+0x64>)
   17872:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17874:	68bb      	ldr	r3, [r7, #8]
   17876:	687a      	ldr	r2, [r7, #4]
   17878:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1787a:	68bb      	ldr	r3, [r7, #8]
   1787c:	2200      	movs	r2, #0
   1787e:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17880:	4b09      	ldr	r3, [pc, #36]	; (178a8 <FreeRTOS_CLIRegisterCommand+0x68>)
   17882:	681b      	ldr	r3, [r3, #0]
   17884:	68ba      	ldr	r2, [r7, #8]
   17886:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17888:	4b07      	ldr	r3, [pc, #28]	; (178a8 <FreeRTOS_CLIRegisterCommand+0x68>)
   1788a:	68ba      	ldr	r2, [r7, #8]
   1788c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1788e:	4b07      	ldr	r3, [pc, #28]	; (178ac <FreeRTOS_CLIRegisterCommand+0x6c>)
   17890:	4798      	blx	r3

		xReturn = pdPASS;
   17892:	2301      	movs	r3, #1
   17894:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17896:	68fb      	ldr	r3, [r7, #12]
}
   17898:	0018      	movs	r0, r3
   1789a:	46bd      	mov	sp, r7
   1789c:	b004      	add	sp, #16
   1789e:	bd80      	pop	{r7, pc}
   178a0:	00019c51 	.word	0x00019c51
   178a4:	00019b19 	.word	0x00019b19
   178a8:	200000e8 	.word	0x200000e8
   178ac:	00019b3d 	.word	0x00019b3d

000178b0 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   178b0:	b580      	push	{r7, lr}
   178b2:	b088      	sub	sp, #32
   178b4:	af00      	add	r7, sp, #0
   178b6:	60f8      	str	r0, [r7, #12]
   178b8:	60b9      	str	r1, [r7, #8]
   178ba:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   178bc:	2301      	movs	r3, #1
   178be:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   178c0:	4b3d      	ldr	r3, [pc, #244]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   178c2:	681b      	ldr	r3, [r3, #0]
   178c4:	2b00      	cmp	r3, #0
   178c6:	d144      	bne.n	17952 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   178c8:	4b3b      	ldr	r3, [pc, #236]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   178ca:	4a3c      	ldr	r2, [pc, #240]	; (179bc <FreeRTOS_CLIProcessCommand+0x10c>)
   178cc:	601a      	str	r2, [r3, #0]
   178ce:	e03a      	b.n	17946 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   178d0:	4b39      	ldr	r3, [pc, #228]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   178d2:	681b      	ldr	r3, [r3, #0]
   178d4:	681b      	ldr	r3, [r3, #0]
   178d6:	681b      	ldr	r3, [r3, #0]
   178d8:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   178da:	69bb      	ldr	r3, [r7, #24]
   178dc:	0018      	movs	r0, r3
   178de:	4b38      	ldr	r3, [pc, #224]	; (179c0 <FreeRTOS_CLIProcessCommand+0x110>)
   178e0:	4798      	blx	r3
   178e2:	0003      	movs	r3, r0
   178e4:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   178e6:	68fa      	ldr	r2, [r7, #12]
   178e8:	697b      	ldr	r3, [r7, #20]
   178ea:	18d3      	adds	r3, r2, r3
   178ec:	781b      	ldrb	r3, [r3, #0]
   178ee:	2b20      	cmp	r3, #32
   178f0:	d005      	beq.n	178fe <FreeRTOS_CLIProcessCommand+0x4e>
   178f2:	68fa      	ldr	r2, [r7, #12]
   178f4:	697b      	ldr	r3, [r7, #20]
   178f6:	18d3      	adds	r3, r2, r3
   178f8:	781b      	ldrb	r3, [r3, #0]
   178fa:	2b00      	cmp	r3, #0
   178fc:	d11e      	bne.n	1793c <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   178fe:	697a      	ldr	r2, [r7, #20]
   17900:	69b9      	ldr	r1, [r7, #24]
   17902:	68fb      	ldr	r3, [r7, #12]
   17904:	0018      	movs	r0, r3
   17906:	4b2f      	ldr	r3, [pc, #188]	; (179c4 <FreeRTOS_CLIProcessCommand+0x114>)
   17908:	4798      	blx	r3
   1790a:	1e03      	subs	r3, r0, #0
   1790c:	d116      	bne.n	1793c <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1790e:	4b2a      	ldr	r3, [pc, #168]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17910:	681b      	ldr	r3, [r3, #0]
   17912:	681b      	ldr	r3, [r3, #0]
   17914:	7b1b      	ldrb	r3, [r3, #12]
   17916:	b25b      	sxtb	r3, r3
   17918:	2b00      	cmp	r3, #0
   1791a:	db19      	blt.n	17950 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1791c:	68fb      	ldr	r3, [r7, #12]
   1791e:	0018      	movs	r0, r3
   17920:	4b29      	ldr	r3, [pc, #164]	; (179c8 <FreeRTOS_CLIProcessCommand+0x118>)
   17922:	4798      	blx	r3
   17924:	0003      	movs	r3, r0
   17926:	001a      	movs	r2, r3
   17928:	4b23      	ldr	r3, [pc, #140]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1792a:	681b      	ldr	r3, [r3, #0]
   1792c:	681b      	ldr	r3, [r3, #0]
   1792e:	7b1b      	ldrb	r3, [r3, #12]
   17930:	b25b      	sxtb	r3, r3
   17932:	429a      	cmp	r2, r3
   17934:	d00c      	beq.n	17950 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17936:	2300      	movs	r3, #0
   17938:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1793a:	e009      	b.n	17950 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1793c:	4b1e      	ldr	r3, [pc, #120]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1793e:	681b      	ldr	r3, [r3, #0]
   17940:	685a      	ldr	r2, [r3, #4]
   17942:	4b1d      	ldr	r3, [pc, #116]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17944:	601a      	str	r2, [r3, #0]
   17946:	4b1c      	ldr	r3, [pc, #112]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17948:	681b      	ldr	r3, [r3, #0]
   1794a:	2b00      	cmp	r3, #0
   1794c:	d1c0      	bne.n	178d0 <FreeRTOS_CLIProcessCommand+0x20>
   1794e:	e000      	b.n	17952 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17950:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17952:	4b19      	ldr	r3, [pc, #100]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17954:	681b      	ldr	r3, [r3, #0]
   17956:	2b00      	cmp	r3, #0
   17958:	d00c      	beq.n	17974 <FreeRTOS_CLIProcessCommand+0xc4>
   1795a:	69fb      	ldr	r3, [r7, #28]
   1795c:	2b00      	cmp	r3, #0
   1795e:	d109      	bne.n	17974 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17960:	687a      	ldr	r2, [r7, #4]
   17962:	491a      	ldr	r1, [pc, #104]	; (179cc <FreeRTOS_CLIProcessCommand+0x11c>)
   17964:	68bb      	ldr	r3, [r7, #8]
   17966:	0018      	movs	r0, r3
   17968:	4b19      	ldr	r3, [pc, #100]	; (179d0 <FreeRTOS_CLIProcessCommand+0x120>)
   1796a:	4798      	blx	r3
		pxCommand = NULL;
   1796c:	4b12      	ldr	r3, [pc, #72]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1796e:	2200      	movs	r2, #0
   17970:	601a      	str	r2, [r3, #0]
   17972:	e01c      	b.n	179ae <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17974:	4b10      	ldr	r3, [pc, #64]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17976:	681b      	ldr	r3, [r3, #0]
   17978:	2b00      	cmp	r3, #0
   1797a:	d010      	beq.n	1799e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1797c:	4b0e      	ldr	r3, [pc, #56]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1797e:	681b      	ldr	r3, [r3, #0]
   17980:	681b      	ldr	r3, [r3, #0]
   17982:	689b      	ldr	r3, [r3, #8]
   17984:	68fa      	ldr	r2, [r7, #12]
   17986:	6879      	ldr	r1, [r7, #4]
   17988:	68b8      	ldr	r0, [r7, #8]
   1798a:	4798      	blx	r3
   1798c:	0003      	movs	r3, r0
   1798e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17990:	69fb      	ldr	r3, [r7, #28]
   17992:	2b00      	cmp	r3, #0
   17994:	d10b      	bne.n	179ae <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17996:	4b08      	ldr	r3, [pc, #32]	; (179b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17998:	2200      	movs	r2, #0
   1799a:	601a      	str	r2, [r3, #0]
   1799c:	e007      	b.n	179ae <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1799e:	687a      	ldr	r2, [r7, #4]
   179a0:	490c      	ldr	r1, [pc, #48]	; (179d4 <FreeRTOS_CLIProcessCommand+0x124>)
   179a2:	68bb      	ldr	r3, [r7, #8]
   179a4:	0018      	movs	r0, r3
   179a6:	4b0a      	ldr	r3, [pc, #40]	; (179d0 <FreeRTOS_CLIProcessCommand+0x120>)
   179a8:	4798      	blx	r3
		xReturn = pdFALSE;
   179aa:	2300      	movs	r3, #0
   179ac:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   179ae:	69fb      	ldr	r3, [r7, #28]
}
   179b0:	0018      	movs	r0, r3
   179b2:	46bd      	mov	sp, r7
   179b4:	b008      	add	sp, #32
   179b6:	bd80      	pop	{r7, pc}
   179b8:	20000b30 	.word	0x20000b30
   179bc:	200000e0 	.word	0x200000e0
   179c0:	000343fb 	.word	0x000343fb
   179c4:	00034409 	.word	0x00034409
   179c8:	00017a39 	.word	0x00017a39
   179cc:	00036200 	.word	0x00036200
   179d0:	0003442b 	.word	0x0003442b
   179d4:	00036258 	.word	0x00036258

000179d8 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   179d8:	b580      	push	{r7, lr}
   179da:	b086      	sub	sp, #24
   179dc:	af00      	add	r7, sp, #0
   179de:	60f8      	str	r0, [r7, #12]
   179e0:	60b9      	str	r1, [r7, #8]
   179e2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   179e4:	4b11      	ldr	r3, [pc, #68]	; (17a2c <prvHelpCommand+0x54>)
   179e6:	681b      	ldr	r3, [r3, #0]
   179e8:	2b00      	cmp	r3, #0
   179ea:	d102      	bne.n	179f2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   179ec:	4b0f      	ldr	r3, [pc, #60]	; (17a2c <prvHelpCommand+0x54>)
   179ee:	4a10      	ldr	r2, [pc, #64]	; (17a30 <prvHelpCommand+0x58>)
   179f0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   179f2:	4b0e      	ldr	r3, [pc, #56]	; (17a2c <prvHelpCommand+0x54>)
   179f4:	681b      	ldr	r3, [r3, #0]
   179f6:	681b      	ldr	r3, [r3, #0]
   179f8:	6859      	ldr	r1, [r3, #4]
   179fa:	68ba      	ldr	r2, [r7, #8]
   179fc:	68fb      	ldr	r3, [r7, #12]
   179fe:	0018      	movs	r0, r3
   17a00:	4b0c      	ldr	r3, [pc, #48]	; (17a34 <prvHelpCommand+0x5c>)
   17a02:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   17a04:	4b09      	ldr	r3, [pc, #36]	; (17a2c <prvHelpCommand+0x54>)
   17a06:	681b      	ldr	r3, [r3, #0]
   17a08:	685a      	ldr	r2, [r3, #4]
   17a0a:	4b08      	ldr	r3, [pc, #32]	; (17a2c <prvHelpCommand+0x54>)
   17a0c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17a0e:	4b07      	ldr	r3, [pc, #28]	; (17a2c <prvHelpCommand+0x54>)
   17a10:	681b      	ldr	r3, [r3, #0]
   17a12:	2b00      	cmp	r3, #0
   17a14:	d102      	bne.n	17a1c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   17a16:	2300      	movs	r3, #0
   17a18:	617b      	str	r3, [r7, #20]
   17a1a:	e001      	b.n	17a20 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17a1c:	2301      	movs	r3, #1
   17a1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17a20:	697b      	ldr	r3, [r7, #20]
}
   17a22:	0018      	movs	r0, r3
   17a24:	46bd      	mov	sp, r7
   17a26:	b006      	add	sp, #24
   17a28:	bd80      	pop	{r7, pc}
   17a2a:	46c0      	nop			; (mov r8, r8)
   17a2c:	20000b34 	.word	0x20000b34
   17a30:	200000e0 	.word	0x200000e0
   17a34:	0003442b 	.word	0x0003442b

00017a38 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17a38:	b580      	push	{r7, lr}
   17a3a:	b084      	sub	sp, #16
   17a3c:	af00      	add	r7, sp, #0
   17a3e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17a40:	230f      	movs	r3, #15
   17a42:	18fb      	adds	r3, r7, r3
   17a44:	2200      	movs	r2, #0
   17a46:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17a48:	2300      	movs	r3, #0
   17a4a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17a4c:	e018      	b.n	17a80 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17a4e:	687b      	ldr	r3, [r7, #4]
   17a50:	781b      	ldrb	r3, [r3, #0]
   17a52:	2b20      	cmp	r3, #32
   17a54:	d10f      	bne.n	17a76 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17a56:	68bb      	ldr	r3, [r7, #8]
   17a58:	2b01      	cmp	r3, #1
   17a5a:	d00e      	beq.n	17a7a <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17a5c:	230f      	movs	r3, #15
   17a5e:	18fb      	adds	r3, r7, r3
   17a60:	781b      	ldrb	r3, [r3, #0]
   17a62:	b25b      	sxtb	r3, r3
   17a64:	b2db      	uxtb	r3, r3
   17a66:	3301      	adds	r3, #1
   17a68:	b2da      	uxtb	r2, r3
   17a6a:	230f      	movs	r3, #15
   17a6c:	18fb      	adds	r3, r7, r3
   17a6e:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17a70:	2301      	movs	r3, #1
   17a72:	60bb      	str	r3, [r7, #8]
   17a74:	e001      	b.n	17a7a <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17a76:	2300      	movs	r3, #0
   17a78:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17a7a:	687b      	ldr	r3, [r7, #4]
   17a7c:	3301      	adds	r3, #1
   17a7e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   17a80:	687b      	ldr	r3, [r7, #4]
   17a82:	781b      	ldrb	r3, [r3, #0]
   17a84:	2b00      	cmp	r3, #0
   17a86:	d1e2      	bne.n	17a4e <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17a88:	68bb      	ldr	r3, [r7, #8]
   17a8a:	2b01      	cmp	r3, #1
   17a8c:	d109      	bne.n	17aa2 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   17a8e:	230f      	movs	r3, #15
   17a90:	18fb      	adds	r3, r7, r3
   17a92:	781b      	ldrb	r3, [r3, #0]
   17a94:	b25b      	sxtb	r3, r3
   17a96:	b2db      	uxtb	r3, r3
   17a98:	3b01      	subs	r3, #1
   17a9a:	b2da      	uxtb	r2, r3
   17a9c:	230f      	movs	r3, #15
   17a9e:	18fb      	adds	r3, r7, r3
   17aa0:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   17aa2:	230f      	movs	r3, #15
   17aa4:	18fb      	adds	r3, r7, r3
   17aa6:	781b      	ldrb	r3, [r3, #0]
   17aa8:	b25b      	sxtb	r3, r3
}
   17aaa:	0018      	movs	r0, r3
   17aac:	46bd      	mov	sp, r7
   17aae:	b004      	add	sp, #16
   17ab0:	bd80      	pop	{r7, pc}
	...

00017ab4 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17ab4:	b580      	push	{r7, lr}
   17ab6:	b082      	sub	sp, #8
   17ab8:	af00      	add	r7, sp, #0
   17aba:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17abc:	687b      	ldr	r3, [r7, #4]
   17abe:	0018      	movs	r0, r3
   17ac0:	4b03      	ldr	r3, [pc, #12]	; (17ad0 <prvTraceGetQueueNumber+0x1c>)
   17ac2:	4798      	blx	r3
   17ac4:	0003      	movs	r3, r0
}
   17ac6:	0018      	movs	r0, r3
   17ac8:	46bd      	mov	sp, r7
   17aca:	b002      	add	sp, #8
   17acc:	bd80      	pop	{r7, pc}
   17ace:	46c0      	nop			; (mov r8, r8)
   17ad0:	0001b275 	.word	0x0001b275

00017ad4 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   17ad4:	b580      	push	{r7, lr}
   17ad6:	b082      	sub	sp, #8
   17ad8:	af00      	add	r7, sp, #0
   17ada:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17adc:	687b      	ldr	r3, [r7, #4]
   17ade:	0018      	movs	r0, r3
   17ae0:	4b03      	ldr	r3, [pc, #12]	; (17af0 <prvTraceGetQueueType+0x1c>)
   17ae2:	4798      	blx	r3
   17ae4:	0003      	movs	r3, r0
}
   17ae6:	0018      	movs	r0, r3
   17ae8:	46bd      	mov	sp, r7
   17aea:	b002      	add	sp, #8
   17aec:	bd80      	pop	{r7, pc}
   17aee:	46c0      	nop			; (mov r8, r8)
   17af0:	0001b2a1 	.word	0x0001b2a1

00017af4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   17af4:	b580      	push	{r7, lr}
   17af6:	b082      	sub	sp, #8
   17af8:	af00      	add	r7, sp, #0
   17afa:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   17afc:	687b      	ldr	r3, [r7, #4]
   17afe:	0018      	movs	r0, r3
   17b00:	4b03      	ldr	r3, [pc, #12]	; (17b10 <prvTraceGetTaskNumberLow16+0x1c>)
   17b02:	4798      	blx	r3
   17b04:	0003      	movs	r3, r0
   17b06:	b29b      	uxth	r3, r3
}
   17b08:	0018      	movs	r0, r3
   17b0a:	46bd      	mov	sp, r7
   17b0c:	b002      	add	sp, #8
   17b0e:	bd80      	pop	{r7, pc}
   17b10:	0001c5d1 	.word	0x0001c5d1

00017b14 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   17b14:	b580      	push	{r7, lr}
   17b16:	b082      	sub	sp, #8
   17b18:	af00      	add	r7, sp, #0
   17b1a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17b1c:	687b      	ldr	r3, [r7, #4]
   17b1e:	0018      	movs	r0, r3
   17b20:	4b04      	ldr	r3, [pc, #16]	; (17b34 <prvTraceGetTaskNumberHigh16+0x20>)
   17b22:	4798      	blx	r3
   17b24:	0003      	movs	r3, r0
   17b26:	0c1b      	lsrs	r3, r3, #16
   17b28:	b29b      	uxth	r3, r3
}
   17b2a:	0018      	movs	r0, r3
   17b2c:	46bd      	mov	sp, r7
   17b2e:	b002      	add	sp, #8
   17b30:	bd80      	pop	{r7, pc}
   17b32:	46c0      	nop			; (mov r8, r8)
   17b34:	0001c5d1 	.word	0x0001c5d1

00017b38 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17b38:	b580      	push	{r7, lr}
   17b3a:	b082      	sub	sp, #8
   17b3c:	af00      	add	r7, sp, #0
   17b3e:	6078      	str	r0, [r7, #4]
   17b40:	000a      	movs	r2, r1
   17b42:	1cbb      	adds	r3, r7, #2
   17b44:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17b46:	687b      	ldr	r3, [r7, #4]
   17b48:	0018      	movs	r0, r3
   17b4a:	4b08      	ldr	r3, [pc, #32]	; (17b6c <prvTraceSetTaskNumberLow16+0x34>)
   17b4c:	4798      	blx	r3
   17b4e:	0003      	movs	r3, r0
   17b50:	0c1b      	lsrs	r3, r3, #16
   17b52:	041a      	lsls	r2, r3, #16
   17b54:	1cbb      	adds	r3, r7, #2
   17b56:	881b      	ldrh	r3, [r3, #0]
   17b58:	431a      	orrs	r2, r3
   17b5a:	687b      	ldr	r3, [r7, #4]
   17b5c:	0011      	movs	r1, r2
   17b5e:	0018      	movs	r0, r3
   17b60:	4b03      	ldr	r3, [pc, #12]	; (17b70 <prvTraceSetTaskNumberLow16+0x38>)
   17b62:	4798      	blx	r3
}
   17b64:	46c0      	nop			; (mov r8, r8)
   17b66:	46bd      	mov	sp, r7
   17b68:	b002      	add	sp, #8
   17b6a:	bd80      	pop	{r7, pc}
   17b6c:	0001c5d1 	.word	0x0001c5d1
   17b70:	0001c5f9 	.word	0x0001c5f9

00017b74 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17b74:	b580      	push	{r7, lr}
   17b76:	b082      	sub	sp, #8
   17b78:	af00      	add	r7, sp, #0
   17b7a:	6078      	str	r0, [r7, #4]
   17b7c:	000a      	movs	r2, r1
   17b7e:	1cbb      	adds	r3, r7, #2
   17b80:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   17b82:	687b      	ldr	r3, [r7, #4]
   17b84:	0018      	movs	r0, r3
   17b86:	4b09      	ldr	r3, [pc, #36]	; (17bac <prvTraceSetTaskNumberHigh16+0x38>)
   17b88:	4798      	blx	r3
   17b8a:	0003      	movs	r3, r0
   17b8c:	041b      	lsls	r3, r3, #16
   17b8e:	0c1a      	lsrs	r2, r3, #16
   17b90:	1cbb      	adds	r3, r7, #2
   17b92:	881b      	ldrh	r3, [r3, #0]
   17b94:	041b      	lsls	r3, r3, #16
   17b96:	431a      	orrs	r2, r3
   17b98:	687b      	ldr	r3, [r7, #4]
   17b9a:	0011      	movs	r1, r2
   17b9c:	0018      	movs	r0, r3
   17b9e:	4b04      	ldr	r3, [pc, #16]	; (17bb0 <prvTraceSetTaskNumberHigh16+0x3c>)
   17ba0:	4798      	blx	r3
}
   17ba2:	46c0      	nop			; (mov r8, r8)
   17ba4:	46bd      	mov	sp, r7
   17ba6:	b002      	add	sp, #8
   17ba8:	bd80      	pop	{r7, pc}
   17baa:	46c0      	nop			; (mov r8, r8)
   17bac:	0001c5d1 	.word	0x0001c5d1
   17bb0:	0001c5f9 	.word	0x0001c5f9

00017bb4 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17bb4:	b580      	push	{r7, lr}
   17bb6:	b082      	sub	sp, #8
   17bb8:	af00      	add	r7, sp, #0
   17bba:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17bbc:	687b      	ldr	r3, [r7, #4]
   17bbe:	0018      	movs	r0, r3
   17bc0:	4b03      	ldr	r3, [pc, #12]	; (17bd0 <prvTraceGetQueueNumberLow16+0x1c>)
   17bc2:	4798      	blx	r3
   17bc4:	0003      	movs	r3, r0
   17bc6:	b29b      	uxth	r3, r3
}
   17bc8:	0018      	movs	r0, r3
   17bca:	46bd      	mov	sp, r7
   17bcc:	b002      	add	sp, #8
   17bce:	bd80      	pop	{r7, pc}
   17bd0:	00017ab5 	.word	0x00017ab5

00017bd4 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   17bd4:	b580      	push	{r7, lr}
   17bd6:	b082      	sub	sp, #8
   17bd8:	af00      	add	r7, sp, #0
   17bda:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17bdc:	687b      	ldr	r3, [r7, #4]
   17bde:	0018      	movs	r0, r3
   17be0:	4b04      	ldr	r3, [pc, #16]	; (17bf4 <prvTraceGetQueueNumberHigh16+0x20>)
   17be2:	4798      	blx	r3
   17be4:	0003      	movs	r3, r0
   17be6:	0c1b      	lsrs	r3, r3, #16
   17be8:	b29b      	uxth	r3, r3
}
   17bea:	0018      	movs	r0, r3
   17bec:	46bd      	mov	sp, r7
   17bee:	b002      	add	sp, #8
   17bf0:	bd80      	pop	{r7, pc}
   17bf2:	46c0      	nop			; (mov r8, r8)
   17bf4:	00017ab5 	.word	0x00017ab5

00017bf8 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17bf8:	b580      	push	{r7, lr}
   17bfa:	b082      	sub	sp, #8
   17bfc:	af00      	add	r7, sp, #0
   17bfe:	6078      	str	r0, [r7, #4]
   17c00:	000a      	movs	r2, r1
   17c02:	1cbb      	adds	r3, r7, #2
   17c04:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   17c06:	687b      	ldr	r3, [r7, #4]
   17c08:	0018      	movs	r0, r3
   17c0a:	4b08      	ldr	r3, [pc, #32]	; (17c2c <prvTraceSetQueueNumberLow16+0x34>)
   17c0c:	4798      	blx	r3
   17c0e:	0003      	movs	r3, r0
   17c10:	0c1b      	lsrs	r3, r3, #16
   17c12:	041a      	lsls	r2, r3, #16
   17c14:	1cbb      	adds	r3, r7, #2
   17c16:	881b      	ldrh	r3, [r3, #0]
   17c18:	431a      	orrs	r2, r3
   17c1a:	687b      	ldr	r3, [r7, #4]
   17c1c:	0011      	movs	r1, r2
   17c1e:	0018      	movs	r0, r3
   17c20:	4b03      	ldr	r3, [pc, #12]	; (17c30 <prvTraceSetQueueNumberLow16+0x38>)
   17c22:	4798      	blx	r3
}
   17c24:	46c0      	nop			; (mov r8, r8)
   17c26:	46bd      	mov	sp, r7
   17c28:	b002      	add	sp, #8
   17c2a:	bd80      	pop	{r7, pc}
   17c2c:	00017ab5 	.word	0x00017ab5
   17c30:	0001b289 	.word	0x0001b289

00017c34 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   17c34:	b580      	push	{r7, lr}
   17c36:	b082      	sub	sp, #8
   17c38:	af00      	add	r7, sp, #0
   17c3a:	6078      	str	r0, [r7, #4]
   17c3c:	000a      	movs	r2, r1
   17c3e:	1cbb      	adds	r3, r7, #2
   17c40:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   17c42:	687b      	ldr	r3, [r7, #4]
   17c44:	0018      	movs	r0, r3
   17c46:	4b09      	ldr	r3, [pc, #36]	; (17c6c <prvTraceSetQueueNumberHigh16+0x38>)
   17c48:	4798      	blx	r3
   17c4a:	0003      	movs	r3, r0
   17c4c:	041b      	lsls	r3, r3, #16
   17c4e:	0c1a      	lsrs	r2, r3, #16
   17c50:	1cbb      	adds	r3, r7, #2
   17c52:	881b      	ldrh	r3, [r3, #0]
   17c54:	041b      	lsls	r3, r3, #16
   17c56:	431a      	orrs	r2, r3
   17c58:	687b      	ldr	r3, [r7, #4]
   17c5a:	0011      	movs	r1, r2
   17c5c:	0018      	movs	r0, r3
   17c5e:	4b04      	ldr	r3, [pc, #16]	; (17c70 <prvTraceSetQueueNumberHigh16+0x3c>)
   17c60:	4798      	blx	r3
}
   17c62:	46c0      	nop			; (mov r8, r8)
   17c64:	46bd      	mov	sp, r7
   17c66:	b002      	add	sp, #8
   17c68:	bd80      	pop	{r7, pc}
   17c6a:	46c0      	nop			; (mov r8, r8)
   17c6c:	00017ab5 	.word	0x00017ab5
   17c70:	0001b289 	.word	0x0001b289

00017c74 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   17c74:	b580      	push	{r7, lr}
   17c76:	b084      	sub	sp, #16
   17c78:	af00      	add	r7, sp, #0
   17c7a:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   17c7c:	2300      	movs	r3, #0
   17c7e:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17c80:	2300      	movs	r3, #0
   17c82:	60bb      	str	r3, [r7, #8]
   17c84:	e018      	b.n	17cb8 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   17c86:	4b14      	ldr	r3, [pc, #80]	; (17cd8 <prvAddTaskToStackMonitor+0x64>)
   17c88:	68ba      	ldr	r2, [r7, #8]
   17c8a:	00d2      	lsls	r2, r2, #3
   17c8c:	58d3      	ldr	r3, [r2, r3]
   17c8e:	2b00      	cmp	r3, #0
   17c90:	d10f      	bne.n	17cb2 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   17c92:	4b11      	ldr	r3, [pc, #68]	; (17cd8 <prvAddTaskToStackMonitor+0x64>)
   17c94:	68ba      	ldr	r2, [r7, #8]
   17c96:	00d2      	lsls	r2, r2, #3
   17c98:	6879      	ldr	r1, [r7, #4]
   17c9a:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   17c9c:	4a0e      	ldr	r2, [pc, #56]	; (17cd8 <prvAddTaskToStackMonitor+0x64>)
   17c9e:	68bb      	ldr	r3, [r7, #8]
   17ca0:	00db      	lsls	r3, r3, #3
   17ca2:	18d3      	adds	r3, r2, r3
   17ca4:	3304      	adds	r3, #4
   17ca6:	2201      	movs	r2, #1
   17ca8:	4252      	negs	r2, r2
   17caa:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   17cac:	2301      	movs	r3, #1
   17cae:	60fb      	str	r3, [r7, #12]
			break;
   17cb0:	e005      	b.n	17cbe <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17cb2:	68bb      	ldr	r3, [r7, #8]
   17cb4:	3301      	adds	r3, #1
   17cb6:	60bb      	str	r3, [r7, #8]
   17cb8:	68bb      	ldr	r3, [r7, #8]
   17cba:	2b09      	cmp	r3, #9
   17cbc:	dde3      	ble.n	17c86 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   17cbe:	68fb      	ldr	r3, [r7, #12]
   17cc0:	2b00      	cmp	r3, #0
   17cc2:	d104      	bne.n	17cce <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   17cc4:	4b05      	ldr	r3, [pc, #20]	; (17cdc <prvAddTaskToStackMonitor+0x68>)
   17cc6:	681b      	ldr	r3, [r3, #0]
   17cc8:	1c5a      	adds	r2, r3, #1
   17cca:	4b04      	ldr	r3, [pc, #16]	; (17cdc <prvAddTaskToStackMonitor+0x68>)
   17ccc:	601a      	str	r2, [r3, #0]
	}
}
   17cce:	46c0      	nop			; (mov r8, r8)
   17cd0:	46bd      	mov	sp, r7
   17cd2:	b004      	add	sp, #16
   17cd4:	bd80      	pop	{r7, pc}
   17cd6:	46c0      	nop			; (mov r8, r8)
   17cd8:	20000b3c 	.word	0x20000b3c
   17cdc:	20000b8c 	.word	0x20000b8c

00017ce0 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   17ce0:	b590      	push	{r4, r7, lr}
   17ce2:	b085      	sub	sp, #20
   17ce4:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   17ce6:	2300      	movs	r3, #0
   17ce8:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   17cea:	4b2b      	ldr	r3, [pc, #172]	; (17d98 <prvReportStackUsage+0xb8>)
   17cec:	681b      	ldr	r3, [r3, #0]
   17cee:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   17cf0:	4b29      	ldr	r3, [pc, #164]	; (17d98 <prvReportStackUsage+0xb8>)
   17cf2:	681a      	ldr	r2, [r3, #0]
   17cf4:	4b29      	ldr	r3, [pc, #164]	; (17d9c <prvReportStackUsage+0xbc>)
   17cf6:	00d2      	lsls	r2, r2, #3
   17cf8:	58d3      	ldr	r3, [r2, r3]
   17cfa:	2b00      	cmp	r3, #0
   17cfc:	d035      	beq.n	17d6a <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   17cfe:	4b26      	ldr	r3, [pc, #152]	; (17d98 <prvReportStackUsage+0xb8>)
   17d00:	681a      	ldr	r2, [r3, #0]
   17d02:	4b26      	ldr	r3, [pc, #152]	; (17d9c <prvReportStackUsage+0xbc>)
   17d04:	00d2      	lsls	r2, r2, #3
   17d06:	58d3      	ldr	r3, [r2, r3]
   17d08:	0018      	movs	r0, r3
   17d0a:	4b25      	ldr	r3, [pc, #148]	; (17da0 <prvReportStackUsage+0xc0>)
   17d0c:	4798      	blx	r3
   17d0e:	0003      	movs	r3, r0
   17d10:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   17d12:	4b21      	ldr	r3, [pc, #132]	; (17d98 <prvReportStackUsage+0xb8>)
   17d14:	681b      	ldr	r3, [r3, #0]
   17d16:	4a21      	ldr	r2, [pc, #132]	; (17d9c <prvReportStackUsage+0xbc>)
   17d18:	00db      	lsls	r3, r3, #3
   17d1a:	18d3      	adds	r3, r2, r3
   17d1c:	3304      	adds	r3, #4
   17d1e:	681a      	ldr	r2, [r3, #0]
   17d20:	687b      	ldr	r3, [r7, #4]
   17d22:	429a      	cmp	r2, r3
   17d24:	d907      	bls.n	17d36 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   17d26:	4b1c      	ldr	r3, [pc, #112]	; (17d98 <prvReportStackUsage+0xb8>)
   17d28:	681b      	ldr	r3, [r3, #0]
   17d2a:	4a1c      	ldr	r2, [pc, #112]	; (17d9c <prvReportStackUsage+0xbc>)
   17d2c:	00db      	lsls	r3, r3, #3
   17d2e:	18d3      	adds	r3, r2, r3
   17d30:	3304      	adds	r3, #4
   17d32:	687a      	ldr	r2, [r7, #4]
   17d34:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   17d36:	4b18      	ldr	r3, [pc, #96]	; (17d98 <prvReportStackUsage+0xb8>)
   17d38:	681a      	ldr	r2, [r3, #0]
   17d3a:	4b18      	ldr	r3, [pc, #96]	; (17d9c <prvReportStackUsage+0xbc>)
   17d3c:	00d2      	lsls	r2, r2, #3
   17d3e:	58d3      	ldr	r3, [r2, r3]
   17d40:	0018      	movs	r0, r3
   17d42:	4b18      	ldr	r3, [pc, #96]	; (17da4 <prvReportStackUsage+0xc4>)
   17d44:	4798      	blx	r3
   17d46:	0003      	movs	r3, r0
   17d48:	b2db      	uxtb	r3, r3
   17d4a:	0019      	movs	r1, r3
   17d4c:	4b12      	ldr	r3, [pc, #72]	; (17d98 <prvReportStackUsage+0xb8>)
   17d4e:	681b      	ldr	r3, [r3, #0]
   17d50:	4a12      	ldr	r2, [pc, #72]	; (17d9c <prvReportStackUsage+0xbc>)
   17d52:	00db      	lsls	r3, r3, #3
   17d54:	18d3      	adds	r3, r2, r3
   17d56:	3304      	adds	r3, #4
   17d58:	681b      	ldr	r3, [r3, #0]
   17d5a:	000a      	movs	r2, r1
   17d5c:	2103      	movs	r1, #3
   17d5e:	20ea      	movs	r0, #234	; 0xea
   17d60:	4c11      	ldr	r4, [pc, #68]	; (17da8 <prvReportStackUsage+0xc8>)
   17d62:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   17d64:	68fb      	ldr	r3, [r7, #12]
   17d66:	3301      	adds	r3, #1
   17d68:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   17d6a:	4b0b      	ldr	r3, [pc, #44]	; (17d98 <prvReportStackUsage+0xb8>)
   17d6c:	681b      	ldr	r3, [r3, #0]
   17d6e:	1c5a      	adds	r2, r3, #1
   17d70:	4b0e      	ldr	r3, [pc, #56]	; (17dac <prvReportStackUsage+0xcc>)
   17d72:	210a      	movs	r1, #10
   17d74:	0010      	movs	r0, r2
   17d76:	4798      	blx	r3
   17d78:	000b      	movs	r3, r1
   17d7a:	001a      	movs	r2, r3
   17d7c:	4b06      	ldr	r3, [pc, #24]	; (17d98 <prvReportStackUsage+0xb8>)
   17d7e:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   17d80:	68fb      	ldr	r3, [r7, #12]
   17d82:	2b00      	cmp	r3, #0
   17d84:	dc04      	bgt.n	17d90 <prvReportStackUsage+0xb0>
   17d86:	4b04      	ldr	r3, [pc, #16]	; (17d98 <prvReportStackUsage+0xb8>)
   17d88:	681a      	ldr	r2, [r3, #0]
   17d8a:	68bb      	ldr	r3, [r7, #8]
   17d8c:	429a      	cmp	r2, r3
   17d8e:	d1af      	bne.n	17cf0 <prvReportStackUsage+0x10>
}
   17d90:	46c0      	nop			; (mov r8, r8)
   17d92:	46bd      	mov	sp, r7
   17d94:	b005      	add	sp, #20
   17d96:	bd90      	pop	{r4, r7, pc}
   17d98:	20000b90 	.word	0x20000b90
   17d9c:	20000b3c 	.word	0x20000b3c
   17da0:	0001c771 	.word	0x0001c771
   17da4:	00017af5 	.word	0x00017af5
   17da8:	0001863d 	.word	0x0001863d
   17dac:	00032669 	.word	0x00032669

00017db0 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   17db0:	b580      	push	{r7, lr}
   17db2:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   17db4:	4b02      	ldr	r3, [pc, #8]	; (17dc0 <prvTraceGetCurrentTaskHandle+0x10>)
   17db6:	4798      	blx	r3
   17db8:	0003      	movs	r3, r0
}
   17dba:	0018      	movs	r0, r3
   17dbc:	46bd      	mov	sp, r7
   17dbe:	bd80      	pop	{r7, pc}
   17dc0:	0001c81d 	.word	0x0001c81d

00017dc4 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   17dc4:	b590      	push	{r4, r7, lr}
   17dc6:	b085      	sub	sp, #20
   17dc8:	af02      	add	r7, sp, #8
   17dca:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   17dcc:	4b14      	ldr	r3, [pc, #80]	; (17e20 <vTraceEnable+0x5c>)
   17dce:	4798      	blx	r3

	if (startOption == TRC_START)
   17dd0:	687b      	ldr	r3, [r7, #4]
   17dd2:	2b01      	cmp	r3, #1
   17dd4:	d102      	bne.n	17ddc <vTraceEnable+0x18>
	{
		vTraceStart();
   17dd6:	4b13      	ldr	r3, [pc, #76]	; (17e24 <vTraceEnable+0x60>)
   17dd8:	4798      	blx	r3
   17dda:	e00e      	b.n	17dfa <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   17ddc:	687b      	ldr	r3, [r7, #4]
   17dde:	2b02      	cmp	r3, #2
   17de0:	d104      	bne.n	17dec <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   17de2:	4b11      	ldr	r3, [pc, #68]	; (17e28 <vTraceEnable+0x64>)
   17de4:	0018      	movs	r0, r3
   17de6:	4b11      	ldr	r3, [pc, #68]	; (17e2c <vTraceEnable+0x68>)
   17de8:	4798      	blx	r3
   17dea:	e006      	b.n	17dfa <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   17dec:	687b      	ldr	r3, [r7, #4]
   17dee:	2b00      	cmp	r3, #0
   17df0:	d003      	beq.n	17dfa <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   17df2:	4b0f      	ldr	r3, [pc, #60]	; (17e30 <vTraceEnable+0x6c>)
   17df4:	0018      	movs	r0, r3
   17df6:	4b0d      	ldr	r3, [pc, #52]	; (17e2c <vTraceEnable+0x68>)
   17df8:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   17dfa:	4b0e      	ldr	r3, [pc, #56]	; (17e34 <vTraceEnable+0x70>)
   17dfc:	681b      	ldr	r3, [r3, #0]
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d10a      	bne.n	17e18 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   17e02:	2396      	movs	r3, #150	; 0x96
   17e04:	005a      	lsls	r2, r3, #1
   17e06:	490c      	ldr	r1, [pc, #48]	; (17e38 <vTraceEnable+0x74>)
   17e08:	480c      	ldr	r0, [pc, #48]	; (17e3c <vTraceEnable+0x78>)
   17e0a:	4b0a      	ldr	r3, [pc, #40]	; (17e34 <vTraceEnable+0x70>)
   17e0c:	9301      	str	r3, [sp, #4]
   17e0e:	2304      	movs	r3, #4
   17e10:	9300      	str	r3, [sp, #0]
   17e12:	2300      	movs	r3, #0
   17e14:	4c0a      	ldr	r4, [pc, #40]	; (17e40 <vTraceEnable+0x7c>)
   17e16:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   17e18:	46c0      	nop			; (mov r8, r8)
   17e1a:	46bd      	mov	sp, r7
   17e1c:	b003      	add	sp, #12
   17e1e:	bd90      	pop	{r4, r7, pc}
   17e20:	00018d09 	.word	0x00018d09
   17e24:	00018261 	.word	0x00018261
   17e28:	000362b8 	.word	0x000362b8
   17e2c:	000193b1 	.word	0x000193b1
   17e30:	000362f8 	.word	0x000362f8
   17e34:	20000b38 	.word	0x20000b38
   17e38:	0003632c 	.word	0x0003632c
   17e3c:	00017e45 	.word	0x00017e45
   17e40:	0001b775 	.word	0x0001b775

00017e44 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   17e44:	b580      	push	{r7, lr}
   17e46:	b082      	sub	sp, #8
   17e48:	af00      	add	r7, sp, #0
   17e4a:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   17e4c:	4b04      	ldr	r3, [pc, #16]	; (17e60 <TzCtrl+0x1c>)
   17e4e:	4798      	blx	r3
   17e50:	1e03      	subs	r3, r0, #0
   17e52:	d001      	beq.n	17e58 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   17e54:	4b03      	ldr	r3, [pc, #12]	; (17e64 <TzCtrl+0x20>)
   17e56:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   17e58:	2004      	movs	r0, #4
   17e5a:	4b03      	ldr	r3, [pc, #12]	; (17e68 <TzCtrl+0x24>)
   17e5c:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   17e5e:	e7f5      	b.n	17e4c <TzCtrl+0x8>
   17e60:	000182a5 	.word	0x000182a5
   17e64:	00017ce1 	.word	0x00017ce1
   17e68:	0001bb11 	.word	0x0001bb11

00017e6c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   17e6c:	b580      	push	{r7, lr}
   17e6e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   17e70:	4b60      	ldr	r3, [pc, #384]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17e72:	681b      	ldr	r3, [r3, #0]
   17e74:	2209      	movs	r2, #9
   17e76:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   17e78:	4b5e      	ldr	r3, [pc, #376]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17e7a:	681b      	ldr	r3, [r3, #0]
   17e7c:	2264      	movs	r2, #100	; 0x64
   17e7e:	210a      	movs	r1, #10
   17e80:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   17e82:	4b5c      	ldr	r3, [pc, #368]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17e84:	681b      	ldr	r3, [r3, #0]
   17e86:	2265      	movs	r2, #101	; 0x65
   17e88:	210a      	movs	r1, #10
   17e8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   17e8c:	4b59      	ldr	r3, [pc, #356]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17e8e:	681b      	ldr	r3, [r3, #0]
   17e90:	2266      	movs	r2, #102	; 0x66
   17e92:	210a      	movs	r1, #10
   17e94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   17e96:	4b57      	ldr	r3, [pc, #348]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17e98:	681b      	ldr	r3, [r3, #0]
   17e9a:	2267      	movs	r2, #103	; 0x67
   17e9c:	210f      	movs	r1, #15
   17e9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   17ea0:	4b54      	ldr	r3, [pc, #336]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17ea2:	681b      	ldr	r3, [r3, #0]
   17ea4:	2268      	movs	r2, #104	; 0x68
   17ea6:	2105      	movs	r1, #5
   17ea8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   17eaa:	4b52      	ldr	r3, [pc, #328]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17eac:	681b      	ldr	r3, [r3, #0]
   17eae:	2269      	movs	r2, #105	; 0x69
   17eb0:	2105      	movs	r1, #5
   17eb2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   17eb4:	4b4f      	ldr	r3, [pc, #316]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17eb6:	681b      	ldr	r3, [r3, #0]
   17eb8:	226a      	movs	r2, #106	; 0x6a
   17eba:	2105      	movs	r1, #5
   17ebc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   17ebe:	4b4d      	ldr	r3, [pc, #308]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17ec0:	681b      	ldr	r3, [r3, #0]
   17ec2:	226b      	movs	r2, #107	; 0x6b
   17ec4:	2105      	movs	r1, #5
   17ec6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   17ec8:	4b4a      	ldr	r3, [pc, #296]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17eca:	681b      	ldr	r3, [r3, #0]
   17ecc:	226c      	movs	r2, #108	; 0x6c
   17ece:	2105      	movs	r1, #5
   17ed0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   17ed2:	4b48      	ldr	r3, [pc, #288]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17ed4:	681b      	ldr	r3, [r3, #0]
   17ed6:	2270      	movs	r2, #112	; 0x70
   17ed8:	210f      	movs	r1, #15
   17eda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   17edc:	4b45      	ldr	r3, [pc, #276]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17ede:	681b      	ldr	r3, [r3, #0]
   17ee0:	2271      	movs	r2, #113	; 0x71
   17ee2:	210f      	movs	r1, #15
   17ee4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   17ee6:	4b43      	ldr	r3, [pc, #268]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17ee8:	681b      	ldr	r3, [r3, #0]
   17eea:	2272      	movs	r2, #114	; 0x72
   17eec:	210f      	movs	r1, #15
   17eee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   17ef0:	4b40      	ldr	r3, [pc, #256]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17ef2:	681b      	ldr	r3, [r3, #0]
   17ef4:	2273      	movs	r2, #115	; 0x73
   17ef6:	210f      	movs	r1, #15
   17ef8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   17efa:	4b3e      	ldr	r3, [pc, #248]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17efc:	681b      	ldr	r3, [r3, #0]
   17efe:	2274      	movs	r2, #116	; 0x74
   17f00:	210f      	movs	r1, #15
   17f02:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   17f04:	4b3b      	ldr	r3, [pc, #236]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f06:	681b      	ldr	r3, [r3, #0]
   17f08:	2275      	movs	r2, #117	; 0x75
   17f0a:	210f      	movs	r1, #15
   17f0c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   17f0e:	4b39      	ldr	r3, [pc, #228]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f10:	681b      	ldr	r3, [r3, #0]
   17f12:	2276      	movs	r2, #118	; 0x76
   17f14:	210f      	movs	r1, #15
   17f16:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   17f18:	4b36      	ldr	r3, [pc, #216]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f1a:	681b      	ldr	r3, [r3, #0]
   17f1c:	2277      	movs	r2, #119	; 0x77
   17f1e:	210f      	movs	r1, #15
   17f20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   17f22:	4b34      	ldr	r3, [pc, #208]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f24:	681b      	ldr	r3, [r3, #0]
   17f26:	2278      	movs	r2, #120	; 0x78
   17f28:	210f      	movs	r1, #15
   17f2a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   17f2c:	4b31      	ldr	r3, [pc, #196]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f2e:	681b      	ldr	r3, [r3, #0]
   17f30:	227c      	movs	r2, #124	; 0x7c
   17f32:	2110      	movs	r1, #16
   17f34:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   17f36:	4b2f      	ldr	r3, [pc, #188]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f38:	681b      	ldr	r3, [r3, #0]
   17f3a:	227d      	movs	r2, #125	; 0x7d
   17f3c:	2110      	movs	r1, #16
   17f3e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   17f40:	4b2c      	ldr	r3, [pc, #176]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f42:	681b      	ldr	r3, [r3, #0]
   17f44:	227e      	movs	r2, #126	; 0x7e
   17f46:	2110      	movs	r1, #16
   17f48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   17f4a:	4b2a      	ldr	r3, [pc, #168]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f4c:	681b      	ldr	r3, [r3, #0]
   17f4e:	227f      	movs	r2, #127	; 0x7f
   17f50:	2113      	movs	r1, #19
   17f52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   17f54:	4b27      	ldr	r3, [pc, #156]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f56:	681b      	ldr	r3, [r3, #0]
   17f58:	2280      	movs	r2, #128	; 0x80
   17f5a:	2111      	movs	r1, #17
   17f5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   17f5e:	4b25      	ldr	r3, [pc, #148]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f60:	681b      	ldr	r3, [r3, #0]
   17f62:	2281      	movs	r2, #129	; 0x81
   17f64:	2110      	movs	r1, #16
   17f66:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   17f68:	4b22      	ldr	r3, [pc, #136]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f6a:	681b      	ldr	r3, [r3, #0]
   17f6c:	2282      	movs	r2, #130	; 0x82
   17f6e:	2113      	movs	r1, #19
   17f70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   17f72:	4b20      	ldr	r3, [pc, #128]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f74:	681b      	ldr	r3, [r3, #0]
   17f76:	2283      	movs	r2, #131	; 0x83
   17f78:	2113      	movs	r1, #19
   17f7a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   17f7c:	4b1d      	ldr	r3, [pc, #116]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f7e:	681b      	ldr	r3, [r3, #0]
   17f80:	2284      	movs	r2, #132	; 0x84
   17f82:	2113      	movs	r1, #19
   17f84:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   17f86:	4b1b      	ldr	r3, [pc, #108]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f88:	681b      	ldr	r3, [r3, #0]
   17f8a:	2288      	movs	r2, #136	; 0x88
   17f8c:	2100      	movs	r1, #0
   17f8e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   17f90:	4b18      	ldr	r3, [pc, #96]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f92:	681b      	ldr	r3, [r3, #0]
   17f94:	228a      	movs	r2, #138	; 0x8a
   17f96:	21a0      	movs	r1, #160	; 0xa0
   17f98:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   17f9a:	4b16      	ldr	r3, [pc, #88]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17f9c:	681b      	ldr	r3, [r3, #0]
   17f9e:	228c      	movs	r2, #140	; 0x8c
   17fa0:	21a0      	movs	r1, #160	; 0xa0
   17fa2:	0049      	lsls	r1, r1, #1
   17fa4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   17fa6:	4b13      	ldr	r3, [pc, #76]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17fa8:	681b      	ldr	r3, [r3, #0]
   17faa:	228e      	movs	r2, #142	; 0x8e
   17fac:	21f0      	movs	r1, #240	; 0xf0
   17fae:	0049      	lsls	r1, r1, #1
   17fb0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   17fb2:	4b10      	ldr	r3, [pc, #64]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17fb4:	681b      	ldr	r3, [r3, #0]
   17fb6:	2290      	movs	r2, #144	; 0x90
   17fb8:	490f      	ldr	r1, [pc, #60]	; (17ff8 <vTraceInitObjectPropertyTable+0x18c>)
   17fba:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   17fbc:	4b0d      	ldr	r3, [pc, #52]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17fbe:	681b      	ldr	r3, [r3, #0]
   17fc0:	2292      	movs	r2, #146	; 0x92
   17fc2:	490e      	ldr	r1, [pc, #56]	; (17ffc <vTraceInitObjectPropertyTable+0x190>)
   17fc4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   17fc6:	4b0b      	ldr	r3, [pc, #44]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17fc8:	681b      	ldr	r3, [r3, #0]
   17fca:	2294      	movs	r2, #148	; 0x94
   17fcc:	490c      	ldr	r1, [pc, #48]	; (18000 <vTraceInitObjectPropertyTable+0x194>)
   17fce:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   17fd0:	4b08      	ldr	r3, [pc, #32]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17fd2:	681b      	ldr	r3, [r3, #0]
   17fd4:	2296      	movs	r2, #150	; 0x96
   17fd6:	490b      	ldr	r1, [pc, #44]	; (18004 <vTraceInitObjectPropertyTable+0x198>)
   17fd8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   17fda:	4b06      	ldr	r3, [pc, #24]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17fdc:	681b      	ldr	r3, [r3, #0]
   17fde:	2298      	movs	r2, #152	; 0x98
   17fe0:	218c      	movs	r1, #140	; 0x8c
   17fe2:	00c9      	lsls	r1, r1, #3
   17fe4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   17fe6:	4b03      	ldr	r3, [pc, #12]	; (17ff4 <vTraceInitObjectPropertyTable+0x188>)
   17fe8:	681b      	ldr	r3, [r3, #0]
   17fea:	4a07      	ldr	r2, [pc, #28]	; (18008 <vTraceInitObjectPropertyTable+0x19c>)
   17fec:	661a      	str	r2, [r3, #96]	; 0x60
}
   17fee:	46c0      	nop			; (mov r8, r8)
   17ff0:	46bd      	mov	sp, r7
   17ff2:	bd80      	pop	{r7, pc}
   17ff4:	20000c50 	.word	0x20000c50
   17ff8:	000002fd 	.word	0x000002fd
   17ffc:	00000352 	.word	0x00000352
   18000:	000003a2 	.word	0x000003a2
   18004:	00000401 	.word	0x00000401
   18008:	000004bf 	.word	0x000004bf

0001800c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1800c:	b580      	push	{r7, lr}
   1800e:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   18010:	4b2e      	ldr	r3, [pc, #184]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18012:	2200      	movs	r2, #0
   18014:	825a      	strh	r2, [r3, #18]
   18016:	4b2d      	ldr	r3, [pc, #180]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18018:	8a5a      	ldrh	r2, [r3, #18]
   1801a:	4b2c      	ldr	r3, [pc, #176]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1801c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1801e:	4b2b      	ldr	r3, [pc, #172]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18020:	220a      	movs	r2, #10
   18022:	829a      	strh	r2, [r3, #20]
   18024:	4b29      	ldr	r3, [pc, #164]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18026:	8a9a      	ldrh	r2, [r3, #20]
   18028:	4b28      	ldr	r3, [pc, #160]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1802a:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1802c:	4b27      	ldr	r3, [pc, #156]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1802e:	2214      	movs	r2, #20
   18030:	82da      	strh	r2, [r3, #22]
   18032:	4b26      	ldr	r3, [pc, #152]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18034:	8ada      	ldrh	r2, [r3, #22]
   18036:	4b25      	ldr	r3, [pc, #148]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18038:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1803a:	4b24      	ldr	r3, [pc, #144]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1803c:	221e      	movs	r2, #30
   1803e:	831a      	strh	r2, [r3, #24]
   18040:	4b22      	ldr	r3, [pc, #136]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18042:	8b1a      	ldrh	r2, [r3, #24]
   18044:	4b21      	ldr	r3, [pc, #132]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18046:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18048:	4b20      	ldr	r3, [pc, #128]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1804a:	222d      	movs	r2, #45	; 0x2d
   1804c:	835a      	strh	r2, [r3, #26]
   1804e:	4b1f      	ldr	r3, [pc, #124]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18050:	8b5a      	ldrh	r2, [r3, #26]
   18052:	4b1e      	ldr	r3, [pc, #120]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18054:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18056:	4b1d      	ldr	r3, [pc, #116]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18058:	2232      	movs	r2, #50	; 0x32
   1805a:	839a      	strh	r2, [r3, #28]
   1805c:	4b1b      	ldr	r3, [pc, #108]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1805e:	8b9a      	ldrh	r2, [r3, #28]
   18060:	4b1a      	ldr	r3, [pc, #104]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18062:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18064:	4b19      	ldr	r3, [pc, #100]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18066:	2237      	movs	r2, #55	; 0x37
   18068:	83da      	strh	r2, [r3, #30]
   1806a:	4b18      	ldr	r3, [pc, #96]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1806c:	8bda      	ldrh	r2, [r3, #30]
   1806e:	4b17      	ldr	r3, [pc, #92]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18070:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   18072:	4b16      	ldr	r3, [pc, #88]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18074:	223c      	movs	r2, #60	; 0x3c
   18076:	841a      	strh	r2, [r3, #32]
   18078:	4b14      	ldr	r3, [pc, #80]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1807a:	8c1a      	ldrh	r2, [r3, #32]
   1807c:	4b13      	ldr	r3, [pc, #76]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1807e:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18080:	4b12      	ldr	r3, [pc, #72]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18082:	2241      	movs	r2, #65	; 0x41
   18084:	845a      	strh	r2, [r3, #34]	; 0x22
   18086:	4b11      	ldr	r3, [pc, #68]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18088:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1808a:	4b10      	ldr	r3, [pc, #64]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1808c:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1808e:	4b0f      	ldr	r3, [pc, #60]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18090:	2209      	movs	r2, #9
   18092:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18094:	4b0d      	ldr	r3, [pc, #52]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   18096:	2213      	movs	r2, #19
   18098:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1809a:	4b0c      	ldr	r3, [pc, #48]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   1809c:	221d      	movs	r2, #29
   1809e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   180a0:	4b0a      	ldr	r3, [pc, #40]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   180a2:	222c      	movs	r2, #44	; 0x2c
   180a4:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   180a6:	4b09      	ldr	r3, [pc, #36]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   180a8:	2231      	movs	r2, #49	; 0x31
   180aa:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   180ac:	4b07      	ldr	r3, [pc, #28]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   180ae:	2236      	movs	r2, #54	; 0x36
   180b0:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   180b2:	4b06      	ldr	r3, [pc, #24]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   180b4:	223b      	movs	r2, #59	; 0x3b
   180b6:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   180b8:	4b04      	ldr	r3, [pc, #16]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   180ba:	2240      	movs	r2, #64	; 0x40
   180bc:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   180be:	4b03      	ldr	r3, [pc, #12]	; (180cc <vTraceInitObjectHandleStack+0xc0>)
   180c0:	2245      	movs	r2, #69	; 0x45
   180c2:	869a      	strh	r2, [r3, #52]	; 0x34
}
   180c4:	46c0      	nop			; (mov r8, r8)
   180c6:	46bd      	mov	sp, r7
   180c8:	bd80      	pop	{r7, pc}
   180ca:	46c0      	nop			; (mov r8, r8)
   180cc:	20000bc0 	.word	0x20000bc0

000180d0 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   180d0:	b580      	push	{r7, lr}
   180d2:	b082      	sub	sp, #8
   180d4:	af00      	add	r7, sp, #0
   180d6:	0002      	movs	r2, r0
   180d8:	1dfb      	adds	r3, r7, #7
   180da:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   180dc:	1dfb      	adds	r3, r7, #7
   180de:	781b      	ldrb	r3, [r3, #0]
   180e0:	2b08      	cmp	r3, #8
   180e2:	d816      	bhi.n	18112 <pszTraceGetErrorNotEnoughHandles+0x42>
   180e4:	009a      	lsls	r2, r3, #2
   180e6:	4b0d      	ldr	r3, [pc, #52]	; (1811c <pszTraceGetErrorNotEnoughHandles+0x4c>)
   180e8:	18d3      	adds	r3, r2, r3
   180ea:	681b      	ldr	r3, [r3, #0]
   180ec:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   180ee:	4b0c      	ldr	r3, [pc, #48]	; (18120 <pszTraceGetErrorNotEnoughHandles+0x50>)
   180f0:	e010      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   180f2:	4b0c      	ldr	r3, [pc, #48]	; (18124 <pszTraceGetErrorNotEnoughHandles+0x54>)
   180f4:	e00e      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   180f6:	4b0c      	ldr	r3, [pc, #48]	; (18128 <pszTraceGetErrorNotEnoughHandles+0x58>)
   180f8:	e00c      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   180fa:	4b0c      	ldr	r3, [pc, #48]	; (1812c <pszTraceGetErrorNotEnoughHandles+0x5c>)
   180fc:	e00a      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   180fe:	4b0c      	ldr	r3, [pc, #48]	; (18130 <pszTraceGetErrorNotEnoughHandles+0x60>)
   18100:	e008      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   18102:	4b0c      	ldr	r3, [pc, #48]	; (18134 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18104:	e006      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   18106:	4b0c      	ldr	r3, [pc, #48]	; (18138 <pszTraceGetErrorNotEnoughHandles+0x68>)
   18108:	e004      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1810a:	4b0c      	ldr	r3, [pc, #48]	; (1813c <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1810c:	e002      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1810e:	4b0c      	ldr	r3, [pc, #48]	; (18140 <pszTraceGetErrorNotEnoughHandles+0x70>)
   18110:	e000      	b.n	18114 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   18112:	4b0c      	ldr	r3, [pc, #48]	; (18144 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18114:	0018      	movs	r0, r3
   18116:	46bd      	mov	sp, r7
   18118:	b002      	add	sp, #8
   1811a:	bd80      	pop	{r7, pc}
   1811c:	00036634 	.word	0x00036634
   18120:	00036334 	.word	0x00036334
   18124:	0003637c 	.word	0x0003637c
   18128:	000363c4 	.word	0x000363c4
   1812c:	00036418 	.word	0x00036418
   18130:	00036464 	.word	0x00036464
   18134:	000364b0 	.word	0x000364b0
   18138:	000364fc 	.word	0x000364fc
   1813c:	00036550 	.word	0x00036550
   18140:	000365a8 	.word	0x000365a8
   18144:	00036604 	.word	0x00036604

00018148 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18148:	b590      	push	{r4, r7, lr}
   1814a:	b087      	sub	sp, #28
   1814c:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1814e:	2317      	movs	r3, #23
   18150:	18fb      	adds	r3, r7, r3
   18152:	2200      	movs	r2, #0
   18154:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18156:	4b36      	ldr	r3, [pc, #216]	; (18230 <uiTraceStart+0xe8>)
   18158:	681b      	ldr	r3, [r3, #0]
   1815a:	2b00      	cmp	r3, #0
   1815c:	d10b      	bne.n	18176 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1815e:	4b34      	ldr	r3, [pc, #208]	; (18230 <uiTraceStart+0xe8>)
   18160:	681b      	ldr	r3, [r3, #0]
   18162:	2b00      	cmp	r3, #0
   18164:	d105      	bne.n	18172 <uiTraceStart+0x2a>
   18166:	4b33      	ldr	r3, [pc, #204]	; (18234 <uiTraceStart+0xec>)
   18168:	0018      	movs	r0, r3
   1816a:	4b33      	ldr	r3, [pc, #204]	; (18238 <uiTraceStart+0xf0>)
   1816c:	4798      	blx	r3
   1816e:	2300      	movs	r3, #0
   18170:	e059      	b.n	18226 <uiTraceStart+0xde>
		return 0;
   18172:	2300      	movs	r3, #0
   18174:	e057      	b.n	18226 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18176:	4b2e      	ldr	r3, [pc, #184]	; (18230 <uiTraceStart+0xe8>)
   18178:	681b      	ldr	r3, [r3, #0]
   1817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1817c:	2b01      	cmp	r3, #1
   1817e:	d101      	bne.n	18184 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18180:	2301      	movs	r3, #1
   18182:	e050      	b.n	18226 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18184:	4b2d      	ldr	r3, [pc, #180]	; (1823c <uiTraceStart+0xf4>)
   18186:	681b      	ldr	r3, [r3, #0]
   18188:	2b00      	cmp	r3, #0
   1818a:	d149      	bne.n	18220 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1818c:	f3ef 8310 	mrs	r3, PRIMASK
   18190:	60bb      	str	r3, [r7, #8]
  return(result);
   18192:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18194:	613b      	str	r3, [r7, #16]
   18196:	2301      	movs	r3, #1
   18198:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1819a:	68fb      	ldr	r3, [r7, #12]
   1819c:	f383 8810 	msr	PRIMASK, r3
   181a0:	4b27      	ldr	r3, [pc, #156]	; (18240 <uiTraceStart+0xf8>)
   181a2:	681b      	ldr	r3, [r3, #0]
   181a4:	1c5a      	adds	r2, r3, #1
   181a6:	4b26      	ldr	r3, [pc, #152]	; (18240 <uiTraceStart+0xf8>)
   181a8:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   181aa:	4b21      	ldr	r3, [pc, #132]	; (18230 <uiTraceStart+0xe8>)
   181ac:	681b      	ldr	r3, [r3, #0]
   181ae:	2201      	movs	r2, #1
   181b0:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   181b2:	4b24      	ldr	r3, [pc, #144]	; (18244 <uiTraceStart+0xfc>)
   181b4:	4798      	blx	r3
   181b6:	0003      	movs	r3, r0
   181b8:	0018      	movs	r0, r3
   181ba:	4b23      	ldr	r3, [pc, #140]	; (18248 <uiTraceStart+0x100>)
   181bc:	4798      	blx	r3
   181be:	0003      	movs	r3, r0
   181c0:	001a      	movs	r2, r3
   181c2:	2317      	movs	r3, #23
   181c4:	18fb      	adds	r3, r7, r3
   181c6:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   181c8:	2317      	movs	r3, #23
   181ca:	18fb      	adds	r3, r7, r3
   181cc:	781b      	ldrb	r3, [r3, #0]
   181ce:	2b00      	cmp	r3, #0
   181d0:	d116      	bne.n	18200 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   181d2:	2317      	movs	r3, #23
   181d4:	18fc      	adds	r4, r7, r3
   181d6:	2003      	movs	r0, #3
   181d8:	4b1c      	ldr	r3, [pc, #112]	; (1824c <uiTraceStart+0x104>)
   181da:	4798      	blx	r3
   181dc:	0003      	movs	r3, r0
   181de:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   181e0:	4a1b      	ldr	r2, [pc, #108]	; (18250 <uiTraceStart+0x108>)
   181e2:	2317      	movs	r3, #23
   181e4:	18fb      	adds	r3, r7, r3
   181e6:	781b      	ldrb	r3, [r3, #0]
   181e8:	0019      	movs	r1, r3
   181ea:	2003      	movs	r0, #3
   181ec:	4b19      	ldr	r3, [pc, #100]	; (18254 <uiTraceStart+0x10c>)
   181ee:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   181f0:	2317      	movs	r3, #23
   181f2:	18fb      	adds	r3, r7, r3
   181f4:	781b      	ldrb	r3, [r3, #0]
   181f6:	2200      	movs	r2, #0
   181f8:	0019      	movs	r1, r3
   181fa:	2003      	movs	r0, #3
   181fc:	4b16      	ldr	r3, [pc, #88]	; (18258 <uiTraceStart+0x110>)
   181fe:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18200:	2317      	movs	r3, #23
   18202:	18fb      	adds	r3, r7, r3
   18204:	781b      	ldrb	r3, [r3, #0]
   18206:	0018      	movs	r0, r3
   18208:	4b14      	ldr	r3, [pc, #80]	; (1825c <uiTraceStart+0x114>)
   1820a:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1820c:	4b0c      	ldr	r3, [pc, #48]	; (18240 <uiTraceStart+0xf8>)
   1820e:	681b      	ldr	r3, [r3, #0]
   18210:	1e5a      	subs	r2, r3, #1
   18212:	4b0b      	ldr	r3, [pc, #44]	; (18240 <uiTraceStart+0xf8>)
   18214:	601a      	str	r2, [r3, #0]
   18216:	693b      	ldr	r3, [r7, #16]
   18218:	607b      	str	r3, [r7, #4]
   1821a:	687b      	ldr	r3, [r7, #4]
   1821c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18220:	4b03      	ldr	r3, [pc, #12]	; (18230 <uiTraceStart+0xe8>)
   18222:	681b      	ldr	r3, [r3, #0]
   18224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18226:	0018      	movs	r0, r3
   18228:	46bd      	mov	sp, r7
   1822a:	b007      	add	sp, #28
   1822c:	bd90      	pop	{r4, r7, pc}
   1822e:	46c0      	nop			; (mov r8, r8)
   18230:	20000c50 	.word	0x20000c50
   18234:	00036658 	.word	0x00036658
   18238:	000193b1 	.word	0x000193b1
   1823c:	20000bb0 	.word	0x20000bb0
   18240:	20000ba8 	.word	0x20000ba8
   18244:	00017db1 	.word	0x00017db1
   18248:	00017af5 	.word	0x00017af5
   1824c:	00019095 	.word	0x00019095
   18250:	0003669c 	.word	0x0003669c
   18254:	000192c5 	.word	0x000192c5
   18258:	00018a29 	.word	0x00018a29
   1825c:	00018911 	.word	0x00018911

00018260 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18260:	b580      	push	{r7, lr}
   18262:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18264:	4b02      	ldr	r3, [pc, #8]	; (18270 <vTraceStart+0x10>)
   18266:	4798      	blx	r3
}
   18268:	46c0      	nop			; (mov r8, r8)
   1826a:	46bd      	mov	sp, r7
   1826c:	bd80      	pop	{r7, pc}
   1826e:	46c0      	nop			; (mov r8, r8)
   18270:	00018149 	.word	0x00018149

00018274 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18274:	b580      	push	{r7, lr}
   18276:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18278:	4b08      	ldr	r3, [pc, #32]	; (1829c <vTraceStop+0x28>)
   1827a:	681b      	ldr	r3, [r3, #0]
   1827c:	2b00      	cmp	r3, #0
   1827e:	d003      	beq.n	18288 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18280:	4b06      	ldr	r3, [pc, #24]	; (1829c <vTraceStop+0x28>)
   18282:	681b      	ldr	r3, [r3, #0]
   18284:	2200      	movs	r2, #0
   18286:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18288:	4b05      	ldr	r3, [pc, #20]	; (182a0 <vTraceStop+0x2c>)
   1828a:	681b      	ldr	r3, [r3, #0]
   1828c:	2b00      	cmp	r3, #0
   1828e:	d002      	beq.n	18296 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18290:	4b03      	ldr	r3, [pc, #12]	; (182a0 <vTraceStop+0x2c>)
   18292:	681b      	ldr	r3, [r3, #0]
   18294:	4798      	blx	r3
	}
}
   18296:	46c0      	nop			; (mov r8, r8)
   18298:	46bd      	mov	sp, r7
   1829a:	bd80      	pop	{r7, pc}
   1829c:	20000c50 	.word	0x20000c50
   182a0:	20000bb8 	.word	0x20000bb8

000182a4 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   182a4:	b580      	push	{r7, lr}
   182a6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   182a8:	4b05      	ldr	r3, [pc, #20]	; (182c0 <xTraceIsRecordingEnabled+0x1c>)
   182aa:	681b      	ldr	r3, [r3, #0]
   182ac:	2b00      	cmp	r3, #0
   182ae:	d003      	beq.n	182b8 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   182b0:	4b03      	ldr	r3, [pc, #12]	; (182c0 <xTraceIsRecordingEnabled+0x1c>)
   182b2:	681b      	ldr	r3, [r3, #0]
   182b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   182b6:	e000      	b.n	182ba <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   182b8:	2300      	movs	r3, #0
	}
}
   182ba:	0018      	movs	r0, r3
   182bc:	46bd      	mov	sp, r7
   182be:	bd80      	pop	{r7, pc}
   182c0:	20000c50 	.word	0x20000c50

000182c4 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   182c4:	b590      	push	{r4, r7, lr}
   182c6:	b089      	sub	sp, #36	; 0x24
   182c8:	af00      	add	r7, sp, #0
   182ca:	0002      	movs	r2, r0
   182cc:	1dfb      	adds	r3, r7, #7
   182ce:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   182d0:	1dfb      	adds	r3, r7, #7
   182d2:	781b      	ldrb	r3, [r3, #0]
   182d4:	2b00      	cmp	r3, #0
   182d6:	d057      	beq.n	18388 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   182d8:	4b2e      	ldr	r3, [pc, #184]	; (18394 <prvTraceStoreTaskReady+0xd0>)
   182da:	681b      	ldr	r3, [r3, #0]
   182dc:	2b00      	cmp	r3, #0
   182de:	d055      	beq.n	1838c <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   182e0:	1dfb      	adds	r3, r7, #7
   182e2:	781b      	ldrb	r3, [r3, #0]
   182e4:	2b0f      	cmp	r3, #15
   182e6:	d904      	bls.n	182f2 <prvTraceStoreTaskReady+0x2e>
   182e8:	4b2b      	ldr	r3, [pc, #172]	; (18398 <prvTraceStoreTaskReady+0xd4>)
   182ea:	0018      	movs	r0, r3
   182ec:	4b2b      	ldr	r3, [pc, #172]	; (1839c <prvTraceStoreTaskReady+0xd8>)
   182ee:	4798      	blx	r3
   182f0:	e04d      	b.n	1838e <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   182f2:	4b2b      	ldr	r3, [pc, #172]	; (183a0 <prvTraceStoreTaskReady+0xdc>)
   182f4:	681b      	ldr	r3, [r3, #0]
   182f6:	2b00      	cmp	r3, #0
   182f8:	d004      	beq.n	18304 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   182fa:	4b2a      	ldr	r3, [pc, #168]	; (183a4 <prvTraceStoreTaskReady+0xe0>)
   182fc:	0018      	movs	r0, r3
   182fe:	4b27      	ldr	r3, [pc, #156]	; (1839c <prvTraceStoreTaskReady+0xd8>)
   18300:	4798      	blx	r3
		return;
   18302:	e044      	b.n	1838e <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18304:	f3ef 8310 	mrs	r3, PRIMASK
   18308:	60fb      	str	r3, [r7, #12]
  return(result);
   1830a:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1830c:	61fb      	str	r3, [r7, #28]
   1830e:	2301      	movs	r3, #1
   18310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18312:	693b      	ldr	r3, [r7, #16]
   18314:	f383 8810 	msr	PRIMASK, r3
   18318:	4b21      	ldr	r3, [pc, #132]	; (183a0 <prvTraceStoreTaskReady+0xdc>)
   1831a:	681b      	ldr	r3, [r3, #0]
   1831c:	1c5a      	adds	r2, r3, #1
   1831e:	4b20      	ldr	r3, [pc, #128]	; (183a0 <prvTraceStoreTaskReady+0xdc>)
   18320:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   18322:	4b21      	ldr	r3, [pc, #132]	; (183a8 <prvTraceStoreTaskReady+0xe4>)
   18324:	681b      	ldr	r3, [r3, #0]
   18326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18328:	2b00      	cmp	r3, #0
   1832a:	d022      	beq.n	18372 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1832c:	231a      	movs	r3, #26
   1832e:	18fc      	adds	r4, r7, r3
   18330:	4b1e      	ldr	r3, [pc, #120]	; (183ac <prvTraceStoreTaskReady+0xe8>)
   18332:	0018      	movs	r0, r3
   18334:	4b1e      	ldr	r3, [pc, #120]	; (183b0 <prvTraceStoreTaskReady+0xec>)
   18336:	4798      	blx	r3
   18338:	0003      	movs	r3, r0
   1833a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1833c:	2319      	movs	r3, #25
   1833e:	18fb      	adds	r3, r7, r3
   18340:	1dfa      	adds	r2, r7, #7
   18342:	7812      	ldrb	r2, [r2, #0]
   18344:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18346:	4b1b      	ldr	r3, [pc, #108]	; (183b4 <prvTraceStoreTaskReady+0xf0>)
   18348:	4798      	blx	r3
   1834a:	0003      	movs	r3, r0
   1834c:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1834e:	697b      	ldr	r3, [r7, #20]
   18350:	2b00      	cmp	r3, #0
   18352:	d00e      	beq.n	18372 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18354:	697b      	ldr	r3, [r7, #20]
   18356:	2202      	movs	r2, #2
   18358:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1835a:	697b      	ldr	r3, [r7, #20]
   1835c:	221a      	movs	r2, #26
   1835e:	18ba      	adds	r2, r7, r2
   18360:	8812      	ldrh	r2, [r2, #0]
   18362:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18364:	697b      	ldr	r3, [r7, #20]
   18366:	2219      	movs	r2, #25
   18368:	18ba      	adds	r2, r7, r2
   1836a:	7812      	ldrb	r2, [r2, #0]
   1836c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1836e:	4b12      	ldr	r3, [pc, #72]	; (183b8 <prvTraceStoreTaskReady+0xf4>)
   18370:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18372:	4b0b      	ldr	r3, [pc, #44]	; (183a0 <prvTraceStoreTaskReady+0xdc>)
   18374:	681b      	ldr	r3, [r3, #0]
   18376:	1e5a      	subs	r2, r3, #1
   18378:	4b09      	ldr	r3, [pc, #36]	; (183a0 <prvTraceStoreTaskReady+0xdc>)
   1837a:	601a      	str	r2, [r3, #0]
   1837c:	69fb      	ldr	r3, [r7, #28]
   1837e:	60bb      	str	r3, [r7, #8]
   18380:	68bb      	ldr	r3, [r7, #8]
   18382:	f383 8810 	msr	PRIMASK, r3
   18386:	e002      	b.n	1838e <prvTraceStoreTaskReady+0xca>
		return;
   18388:	46c0      	nop			; (mov r8, r8)
   1838a:	e000      	b.n	1838e <prvTraceStoreTaskReady+0xca>
		return;
   1838c:	46c0      	nop			; (mov r8, r8)
}
   1838e:	46bd      	mov	sp, r7
   18390:	b009      	add	sp, #36	; 0x24
   18392:	bd90      	pop	{r4, r7, pc}
   18394:	200000f4 	.word	0x200000f4
   18398:	00036a04 	.word	0x00036a04
   1839c:	000193b1 	.word	0x000193b1
   183a0:	20000ba8 	.word	0x20000ba8
   183a4:	00036a44 	.word	0x00036a44
   183a8:	20000c50 	.word	0x20000c50
   183ac:	0000ffff 	.word	0x0000ffff
   183b0:	000195c5 	.word	0x000195c5
   183b4:	00018f69 	.word	0x00018f69
   183b8:	0001956d 	.word	0x0001956d

000183bc <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   183bc:	b580      	push	{r7, lr}
   183be:	b08e      	sub	sp, #56	; 0x38
   183c0:	af00      	add	r7, sp, #0
   183c2:	60f8      	str	r0, [r7, #12]
   183c4:	60b9      	str	r1, [r7, #8]
   183c6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   183c8:	4b48      	ldr	r3, [pc, #288]	; (184ec <vTraceStoreMemMangEvent+0x130>)
   183ca:	681b      	ldr	r3, [r3, #0]
   183cc:	2b00      	cmp	r3, #0
   183ce:	d100      	bne.n	183d2 <vTraceStoreMemMangEvent+0x16>
   183d0:	e088      	b.n	184e4 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   183d2:	687b      	ldr	r3, [r7, #4]
   183d4:	2b00      	cmp	r3, #0
   183d6:	da03      	bge.n	183e0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   183d8:	687b      	ldr	r3, [r7, #4]
   183da:	425b      	negs	r3, r3
   183dc:	637b      	str	r3, [r7, #52]	; 0x34
   183de:	e001      	b.n	183e4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   183e0:	687b      	ldr	r3, [r7, #4]
   183e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   183e4:	f3ef 8310 	mrs	r3, PRIMASK
   183e8:	61bb      	str	r3, [r7, #24]
  return(result);
   183ea:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   183ec:	633b      	str	r3, [r7, #48]	; 0x30
   183ee:	2301      	movs	r3, #1
   183f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   183f2:	69fb      	ldr	r3, [r7, #28]
   183f4:	f383 8810 	msr	PRIMASK, r3
   183f8:	4b3d      	ldr	r3, [pc, #244]	; (184f0 <vTraceStoreMemMangEvent+0x134>)
   183fa:	681b      	ldr	r3, [r3, #0]
   183fc:	1c5a      	adds	r2, r3, #1
   183fe:	4b3c      	ldr	r3, [pc, #240]	; (184f0 <vTraceStoreMemMangEvent+0x134>)
   18400:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   18402:	68bb      	ldr	r3, [r7, #8]
   18404:	2b00      	cmp	r3, #0
   18406:	d005      	beq.n	18414 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18408:	4b3a      	ldr	r3, [pc, #232]	; (184f4 <vTraceStoreMemMangEvent+0x138>)
   1840a:	681a      	ldr	r2, [r3, #0]
   1840c:	687b      	ldr	r3, [r7, #4]
   1840e:	18d2      	adds	r2, r2, r3
   18410:	4b38      	ldr	r3, [pc, #224]	; (184f4 <vTraceStoreMemMangEvent+0x138>)
   18412:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18414:	4b35      	ldr	r3, [pc, #212]	; (184ec <vTraceStoreMemMangEvent+0x130>)
   18416:	681b      	ldr	r3, [r3, #0]
   18418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1841a:	2b00      	cmp	r3, #0
   1841c:	d057      	beq.n	184ce <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1841e:	20ff      	movs	r0, #255	; 0xff
   18420:	4b35      	ldr	r3, [pc, #212]	; (184f8 <vTraceStoreMemMangEvent+0x13c>)
   18422:	4798      	blx	r3
   18424:	0003      	movs	r3, r0
   18426:	001a      	movs	r2, r3
   18428:	232f      	movs	r3, #47	; 0x2f
   1842a:	18fb      	adds	r3, r7, r3
   1842c:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18430:	4a32      	ldr	r2, [pc, #200]	; (184fc <vTraceStoreMemMangEvent+0x140>)
   18432:	0019      	movs	r1, r3
   18434:	0010      	movs	r0, r2
   18436:	4b32      	ldr	r3, [pc, #200]	; (18500 <vTraceStoreMemMangEvent+0x144>)
   18438:	4798      	blx	r3
   1843a:	0002      	movs	r2, r0
   1843c:	232c      	movs	r3, #44	; 0x2c
   1843e:	18fb      	adds	r3, r7, r3
   18440:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   18442:	4b30      	ldr	r3, [pc, #192]	; (18504 <vTraceStoreMemMangEvent+0x148>)
   18444:	4798      	blx	r3
   18446:	0003      	movs	r3, r0
   18448:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1844c:	2b00      	cmp	r3, #0
   1844e:	d03e      	beq.n	184ce <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   18450:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18452:	222f      	movs	r2, #47	; 0x2f
   18454:	18ba      	adds	r2, r7, r2
   18456:	7812      	ldrb	r2, [r2, #0]
   18458:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1845c:	2200      	movs	r2, #0
   1845e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   18460:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18462:	222c      	movs	r2, #44	; 0x2c
   18464:	18ba      	adds	r2, r7, r2
   18466:	8812      	ldrh	r2, [r2, #0]
   18468:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1846a:	4b27      	ldr	r3, [pc, #156]	; (18508 <vTraceStoreMemMangEvent+0x14c>)
   1846c:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1846e:	68bb      	ldr	r3, [r7, #8]
   18470:	4a22      	ldr	r2, [pc, #136]	; (184fc <vTraceStoreMemMangEvent+0x140>)
   18472:	0019      	movs	r1, r3
   18474:	0010      	movs	r0, r2
   18476:	4b22      	ldr	r3, [pc, #136]	; (18500 <vTraceStoreMemMangEvent+0x144>)
   18478:	4798      	blx	r3
   1847a:	0002      	movs	r2, r0
   1847c:	2326      	movs	r3, #38	; 0x26
   1847e:	18fb      	adds	r3, r7, r3
   18480:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18482:	2325      	movs	r3, #37	; 0x25
   18484:	18fb      	adds	r3, r7, r3
   18486:	2200      	movs	r2, #0
   18488:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1848a:	4b1e      	ldr	r3, [pc, #120]	; (18504 <vTraceStoreMemMangEvent+0x148>)
   1848c:	4798      	blx	r3
   1848e:	0003      	movs	r3, r0
   18490:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18492:	6a3b      	ldr	r3, [r7, #32]
   18494:	2b00      	cmp	r3, #0
   18496:	d01a      	beq.n	184ce <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18498:	6a3b      	ldr	r3, [r7, #32]
   1849a:	2226      	movs	r2, #38	; 0x26
   1849c:	18ba      	adds	r2, r7, r2
   1849e:	8812      	ldrh	r2, [r2, #0]
   184a0:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   184a2:	6a3b      	ldr	r3, [r7, #32]
   184a4:	2225      	movs	r2, #37	; 0x25
   184a6:	18ba      	adds	r2, r7, r2
   184a8:	7812      	ldrb	r2, [r2, #0]
   184aa:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   184ac:	68fb      	ldr	r3, [r7, #12]
   184ae:	b2db      	uxtb	r3, r3
   184b0:	3301      	adds	r3, #1
   184b2:	b2da      	uxtb	r2, r3
   184b4:	6a3b      	ldr	r3, [r7, #32]
   184b6:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   184b8:	68fb      	ldr	r3, [r7, #12]
   184ba:	b2da      	uxtb	r2, r3
   184bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   184be:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   184c0:	4b11      	ldr	r3, [pc, #68]	; (18508 <vTraceStoreMemMangEvent+0x14c>)
   184c2:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   184c4:	4b09      	ldr	r3, [pc, #36]	; (184ec <vTraceStoreMemMangEvent+0x130>)
   184c6:	681b      	ldr	r3, [r3, #0]
   184c8:	4a0a      	ldr	r2, [pc, #40]	; (184f4 <vTraceStoreMemMangEvent+0x138>)
   184ca:	6812      	ldr	r2, [r2, #0]
   184cc:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   184ce:	4b08      	ldr	r3, [pc, #32]	; (184f0 <vTraceStoreMemMangEvent+0x134>)
   184d0:	681b      	ldr	r3, [r3, #0]
   184d2:	1e5a      	subs	r2, r3, #1
   184d4:	4b06      	ldr	r3, [pc, #24]	; (184f0 <vTraceStoreMemMangEvent+0x134>)
   184d6:	601a      	str	r2, [r3, #0]
   184d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   184da:	617b      	str	r3, [r7, #20]
   184dc:	697b      	ldr	r3, [r7, #20]
   184de:	f383 8810 	msr	PRIMASK, r3
   184e2:	e000      	b.n	184e6 <vTraceStoreMemMangEvent+0x12a>
		return;
   184e4:	46c0      	nop			; (mov r8, r8)
}
   184e6:	46bd      	mov	sp, r7
   184e8:	b00e      	add	sp, #56	; 0x38
   184ea:	bd80      	pop	{r7, pc}
   184ec:	20000c50 	.word	0x20000c50
   184f0:	20000ba8 	.word	0x20000ba8
   184f4:	20000bbc 	.word	0x20000bbc
   184f8:	000195c5 	.word	0x000195c5
   184fc:	0000ffff 	.word	0x0000ffff
   18500:	00018789 	.word	0x00018789
   18504:	00018f69 	.word	0x00018f69
   18508:	0001956d 	.word	0x0001956d

0001850c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1850c:	b590      	push	{r4, r7, lr}
   1850e:	b08b      	sub	sp, #44	; 0x2c
   18510:	af00      	add	r7, sp, #0
   18512:	60f8      	str	r0, [r7, #12]
   18514:	607a      	str	r2, [r7, #4]
   18516:	230b      	movs	r3, #11
   18518:	18fb      	adds	r3, r7, r3
   1851a:	1c0a      	adds	r2, r1, #0
   1851c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1851e:	68fb      	ldr	r3, [r7, #12]
   18520:	2bfe      	cmp	r3, #254	; 0xfe
   18522:	d904      	bls.n	1852e <prvTraceStoreKernelCall+0x22>
   18524:	4b39      	ldr	r3, [pc, #228]	; (1860c <prvTraceStoreKernelCall+0x100>)
   18526:	0018      	movs	r0, r3
   18528:	4b39      	ldr	r3, [pc, #228]	; (18610 <prvTraceStoreKernelCall+0x104>)
   1852a:	4798      	blx	r3
   1852c:	e06b      	b.n	18606 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1852e:	230b      	movs	r3, #11
   18530:	18fb      	adds	r3, r7, r3
   18532:	781b      	ldrb	r3, [r3, #0]
   18534:	2b08      	cmp	r3, #8
   18536:	d904      	bls.n	18542 <prvTraceStoreKernelCall+0x36>
   18538:	4b36      	ldr	r3, [pc, #216]	; (18614 <prvTraceStoreKernelCall+0x108>)
   1853a:	0018      	movs	r0, r3
   1853c:	4b34      	ldr	r3, [pc, #208]	; (18610 <prvTraceStoreKernelCall+0x104>)
   1853e:	4798      	blx	r3
   18540:	e061      	b.n	18606 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   18542:	4b35      	ldr	r3, [pc, #212]	; (18618 <prvTraceStoreKernelCall+0x10c>)
   18544:	681a      	ldr	r2, [r3, #0]
   18546:	230b      	movs	r3, #11
   18548:	18fb      	adds	r3, r7, r3
   1854a:	781b      	ldrb	r3, [r3, #0]
   1854c:	2164      	movs	r1, #100	; 0x64
   1854e:	18d3      	adds	r3, r2, r3
   18550:	185b      	adds	r3, r3, r1
   18552:	781b      	ldrb	r3, [r3, #0]
   18554:	001a      	movs	r2, r3
   18556:	687b      	ldr	r3, [r7, #4]
   18558:	429a      	cmp	r2, r3
   1855a:	d204      	bcs.n	18566 <prvTraceStoreKernelCall+0x5a>
   1855c:	4b2f      	ldr	r3, [pc, #188]	; (1861c <prvTraceStoreKernelCall+0x110>)
   1855e:	0018      	movs	r0, r3
   18560:	4b2b      	ldr	r3, [pc, #172]	; (18610 <prvTraceStoreKernelCall+0x104>)
   18562:	4798      	blx	r3
   18564:	e04f      	b.n	18606 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   18566:	4b2e      	ldr	r3, [pc, #184]	; (18620 <prvTraceStoreKernelCall+0x114>)
   18568:	681b      	ldr	r3, [r3, #0]
   1856a:	2b00      	cmp	r3, #0
   1856c:	d004      	beq.n	18578 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1856e:	4b2d      	ldr	r3, [pc, #180]	; (18624 <prvTraceStoreKernelCall+0x118>)
   18570:	0018      	movs	r0, r3
   18572:	4b27      	ldr	r3, [pc, #156]	; (18610 <prvTraceStoreKernelCall+0x104>)
   18574:	4798      	blx	r3
		return;
   18576:	e046      	b.n	18606 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   18578:	4b2b      	ldr	r3, [pc, #172]	; (18628 <prvTraceStoreKernelCall+0x11c>)
   1857a:	781b      	ldrb	r3, [r3, #0]
   1857c:	2b00      	cmp	r3, #0
   1857e:	d041      	beq.n	18604 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18580:	f3ef 8310 	mrs	r3, PRIMASK
   18584:	617b      	str	r3, [r7, #20]
  return(result);
   18586:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   18588:	627b      	str	r3, [r7, #36]	; 0x24
   1858a:	2301      	movs	r3, #1
   1858c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1858e:	69bb      	ldr	r3, [r7, #24]
   18590:	f383 8810 	msr	PRIMASK, r3
   18594:	4b22      	ldr	r3, [pc, #136]	; (18620 <prvTraceStoreKernelCall+0x114>)
   18596:	681b      	ldr	r3, [r3, #0]
   18598:	1c5a      	adds	r2, r3, #1
   1859a:	4b21      	ldr	r3, [pc, #132]	; (18620 <prvTraceStoreKernelCall+0x114>)
   1859c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1859e:	4b1e      	ldr	r3, [pc, #120]	; (18618 <prvTraceStoreKernelCall+0x10c>)
   185a0:	681b      	ldr	r3, [r3, #0]
   185a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   185a4:	2b00      	cmp	r3, #0
   185a6:	d022      	beq.n	185ee <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   185a8:	2322      	movs	r3, #34	; 0x22
   185aa:	18fc      	adds	r4, r7, r3
   185ac:	4b1f      	ldr	r3, [pc, #124]	; (1862c <prvTraceStoreKernelCall+0x120>)
   185ae:	0018      	movs	r0, r3
   185b0:	4b1f      	ldr	r3, [pc, #124]	; (18630 <prvTraceStoreKernelCall+0x124>)
   185b2:	4798      	blx	r3
   185b4:	0003      	movs	r3, r0
   185b6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   185b8:	2321      	movs	r3, #33	; 0x21
   185ba:	18fb      	adds	r3, r7, r3
   185bc:	687a      	ldr	r2, [r7, #4]
   185be:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   185c0:	4b1c      	ldr	r3, [pc, #112]	; (18634 <prvTraceStoreKernelCall+0x128>)
   185c2:	4798      	blx	r3
   185c4:	0003      	movs	r3, r0
   185c6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   185c8:	69fb      	ldr	r3, [r7, #28]
   185ca:	2b00      	cmp	r3, #0
   185cc:	d00f      	beq.n	185ee <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   185ce:	69fb      	ldr	r3, [r7, #28]
   185d0:	2222      	movs	r2, #34	; 0x22
   185d2:	18ba      	adds	r2, r7, r2
   185d4:	8812      	ldrh	r2, [r2, #0]
   185d6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   185d8:	68fb      	ldr	r3, [r7, #12]
   185da:	b2da      	uxtb	r2, r3
   185dc:	69fb      	ldr	r3, [r7, #28]
   185de:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   185e0:	69fb      	ldr	r3, [r7, #28]
   185e2:	2221      	movs	r2, #33	; 0x21
   185e4:	18ba      	adds	r2, r7, r2
   185e6:	7812      	ldrb	r2, [r2, #0]
   185e8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   185ea:	4b13      	ldr	r3, [pc, #76]	; (18638 <prvTraceStoreKernelCall+0x12c>)
   185ec:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   185ee:	4b0c      	ldr	r3, [pc, #48]	; (18620 <prvTraceStoreKernelCall+0x114>)
   185f0:	681b      	ldr	r3, [r3, #0]
   185f2:	1e5a      	subs	r2, r3, #1
   185f4:	4b0a      	ldr	r3, [pc, #40]	; (18620 <prvTraceStoreKernelCall+0x114>)
   185f6:	601a      	str	r2, [r3, #0]
   185f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   185fa:	613b      	str	r3, [r7, #16]
   185fc:	693b      	ldr	r3, [r7, #16]
   185fe:	f383 8810 	msr	PRIMASK, r3
   18602:	e000      	b.n	18606 <prvTraceStoreKernelCall+0xfa>
		return;
   18604:	46c0      	nop			; (mov r8, r8)
}
   18606:	46bd      	mov	sp, r7
   18608:	b00b      	add	sp, #44	; 0x2c
   1860a:	bd90      	pop	{r4, r7, pc}
   1860c:	00036ab4 	.word	0x00036ab4
   18610:	000193b1 	.word	0x000193b1
   18614:	00036aec 	.word	0x00036aec
   18618:	20000c50 	.word	0x20000c50
   1861c:	00036b34 	.word	0x00036b34
   18620:	20000ba8 	.word	0x20000ba8
   18624:	00036b7c 	.word	0x00036b7c
   18628:	20000bb4 	.word	0x20000bb4
   1862c:	0000ffff 	.word	0x0000ffff
   18630:	000195c5 	.word	0x000195c5
   18634:	00018f69 	.word	0x00018f69
   18638:	0001956d 	.word	0x0001956d

0001863c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1863c:	b580      	push	{r7, lr}
   1863e:	b08a      	sub	sp, #40	; 0x28
   18640:	af00      	add	r7, sp, #0
   18642:	60f8      	str	r0, [r7, #12]
   18644:	607a      	str	r2, [r7, #4]
   18646:	603b      	str	r3, [r7, #0]
   18648:	230b      	movs	r3, #11
   1864a:	18fb      	adds	r3, r7, r3
   1864c:	1c0a      	adds	r2, r1, #0
   1864e:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   18650:	68fb      	ldr	r3, [r7, #12]
   18652:	2bfe      	cmp	r3, #254	; 0xfe
   18654:	d904      	bls.n	18660 <prvTraceStoreKernelCallWithParam+0x24>
   18656:	4b40      	ldr	r3, [pc, #256]	; (18758 <prvTraceStoreKernelCallWithParam+0x11c>)
   18658:	0018      	movs	r0, r3
   1865a:	4b40      	ldr	r3, [pc, #256]	; (1875c <prvTraceStoreKernelCallWithParam+0x120>)
   1865c:	4798      	blx	r3
   1865e:	e077      	b.n	18750 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18660:	230b      	movs	r3, #11
   18662:	18fb      	adds	r3, r7, r3
   18664:	781b      	ldrb	r3, [r3, #0]
   18666:	2b08      	cmp	r3, #8
   18668:	d904      	bls.n	18674 <prvTraceStoreKernelCallWithParam+0x38>
   1866a:	4b3d      	ldr	r3, [pc, #244]	; (18760 <prvTraceStoreKernelCallWithParam+0x124>)
   1866c:	0018      	movs	r0, r3
   1866e:	4b3b      	ldr	r3, [pc, #236]	; (1875c <prvTraceStoreKernelCallWithParam+0x120>)
   18670:	4798      	blx	r3
   18672:	e06d      	b.n	18750 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18674:	4b3b      	ldr	r3, [pc, #236]	; (18764 <prvTraceStoreKernelCallWithParam+0x128>)
   18676:	681a      	ldr	r2, [r3, #0]
   18678:	230b      	movs	r3, #11
   1867a:	18fb      	adds	r3, r7, r3
   1867c:	781b      	ldrb	r3, [r3, #0]
   1867e:	2164      	movs	r1, #100	; 0x64
   18680:	18d3      	adds	r3, r2, r3
   18682:	185b      	adds	r3, r3, r1
   18684:	781b      	ldrb	r3, [r3, #0]
   18686:	001a      	movs	r2, r3
   18688:	687b      	ldr	r3, [r7, #4]
   1868a:	429a      	cmp	r2, r3
   1868c:	d204      	bcs.n	18698 <prvTraceStoreKernelCallWithParam+0x5c>
   1868e:	4b36      	ldr	r3, [pc, #216]	; (18768 <prvTraceStoreKernelCallWithParam+0x12c>)
   18690:	0018      	movs	r0, r3
   18692:	4b32      	ldr	r3, [pc, #200]	; (1875c <prvTraceStoreKernelCallWithParam+0x120>)
   18694:	4798      	blx	r3
   18696:	e05b      	b.n	18750 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18698:	4b34      	ldr	r3, [pc, #208]	; (1876c <prvTraceStoreKernelCallWithParam+0x130>)
   1869a:	681b      	ldr	r3, [r3, #0]
   1869c:	2b00      	cmp	r3, #0
   1869e:	d004      	beq.n	186aa <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   186a0:	4b33      	ldr	r3, [pc, #204]	; (18770 <prvTraceStoreKernelCallWithParam+0x134>)
   186a2:	0018      	movs	r0, r3
   186a4:	4b2d      	ldr	r3, [pc, #180]	; (1875c <prvTraceStoreKernelCallWithParam+0x120>)
   186a6:	4798      	blx	r3
		return;
   186a8:	e052      	b.n	18750 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   186aa:	f3ef 8310 	mrs	r3, PRIMASK
   186ae:	617b      	str	r3, [r7, #20]
  return(result);
   186b0:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   186b2:	627b      	str	r3, [r7, #36]	; 0x24
   186b4:	2301      	movs	r3, #1
   186b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   186b8:	69bb      	ldr	r3, [r7, #24]
   186ba:	f383 8810 	msr	PRIMASK, r3
   186be:	4b2b      	ldr	r3, [pc, #172]	; (1876c <prvTraceStoreKernelCallWithParam+0x130>)
   186c0:	681b      	ldr	r3, [r3, #0]
   186c2:	1c5a      	adds	r2, r3, #1
   186c4:	4b29      	ldr	r3, [pc, #164]	; (1876c <prvTraceStoreKernelCallWithParam+0x130>)
   186c6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   186c8:	4b26      	ldr	r3, [pc, #152]	; (18764 <prvTraceStoreKernelCallWithParam+0x128>)
   186ca:	681b      	ldr	r3, [r3, #0]
   186cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   186ce:	2b00      	cmp	r3, #0
   186d0:	d034      	beq.n	1873c <prvTraceStoreKernelCallWithParam+0x100>
   186d2:	4b28      	ldr	r3, [pc, #160]	; (18774 <prvTraceStoreKernelCallWithParam+0x138>)
   186d4:	781b      	ldrb	r3, [r3, #0]
   186d6:	2b00      	cmp	r3, #0
   186d8:	d030      	beq.n	1873c <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   186da:	20ff      	movs	r0, #255	; 0xff
   186dc:	4b26      	ldr	r3, [pc, #152]	; (18778 <prvTraceStoreKernelCallWithParam+0x13c>)
   186de:	4798      	blx	r3
   186e0:	0003      	movs	r3, r0
   186e2:	001a      	movs	r2, r3
   186e4:	2323      	movs	r3, #35	; 0x23
   186e6:	18fb      	adds	r3, r7, r3
   186e8:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   186ea:	683b      	ldr	r3, [r7, #0]
   186ec:	0019      	movs	r1, r3
   186ee:	20ff      	movs	r0, #255	; 0xff
   186f0:	4b22      	ldr	r3, [pc, #136]	; (1877c <prvTraceStoreKernelCallWithParam+0x140>)
   186f2:	4798      	blx	r3
   186f4:	0002      	movs	r2, r0
   186f6:	2322      	movs	r3, #34	; 0x22
   186f8:	18fb      	adds	r3, r7, r3
   186fa:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   186fc:	2321      	movs	r3, #33	; 0x21
   186fe:	18fb      	adds	r3, r7, r3
   18700:	687a      	ldr	r2, [r7, #4]
   18702:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18704:	4b1e      	ldr	r3, [pc, #120]	; (18780 <prvTraceStoreKernelCallWithParam+0x144>)
   18706:	4798      	blx	r3
   18708:	0003      	movs	r3, r0
   1870a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1870c:	69fb      	ldr	r3, [r7, #28]
   1870e:	2b00      	cmp	r3, #0
   18710:	d014      	beq.n	1873c <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18712:	69fb      	ldr	r3, [r7, #28]
   18714:	2223      	movs	r2, #35	; 0x23
   18716:	18ba      	adds	r2, r7, r2
   18718:	7812      	ldrb	r2, [r2, #0]
   1871a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1871c:	68fb      	ldr	r3, [r7, #12]
   1871e:	b2da      	uxtb	r2, r3
   18720:	69fb      	ldr	r3, [r7, #28]
   18722:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18724:	69fb      	ldr	r3, [r7, #28]
   18726:	2221      	movs	r2, #33	; 0x21
   18728:	18ba      	adds	r2, r7, r2
   1872a:	7812      	ldrb	r2, [r2, #0]
   1872c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1872e:	69fb      	ldr	r3, [r7, #28]
   18730:	2222      	movs	r2, #34	; 0x22
   18732:	18ba      	adds	r2, r7, r2
   18734:	7812      	ldrb	r2, [r2, #0]
   18736:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18738:	4b12      	ldr	r3, [pc, #72]	; (18784 <prvTraceStoreKernelCallWithParam+0x148>)
   1873a:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1873c:	4b0b      	ldr	r3, [pc, #44]	; (1876c <prvTraceStoreKernelCallWithParam+0x130>)
   1873e:	681b      	ldr	r3, [r3, #0]
   18740:	1e5a      	subs	r2, r3, #1
   18742:	4b0a      	ldr	r3, [pc, #40]	; (1876c <prvTraceStoreKernelCallWithParam+0x130>)
   18744:	601a      	str	r2, [r3, #0]
   18746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18748:	613b      	str	r3, [r7, #16]
   1874a:	693b      	ldr	r3, [r7, #16]
   1874c:	f383 8810 	msr	PRIMASK, r3
}
   18750:	46bd      	mov	sp, r7
   18752:	b00a      	add	sp, #40	; 0x28
   18754:	bd80      	pop	{r7, pc}
   18756:	46c0      	nop			; (mov r8, r8)
   18758:	00036bb4 	.word	0x00036bb4
   1875c:	000193b1 	.word	0x000193b1
   18760:	00036bf4 	.word	0x00036bf4
   18764:	20000c50 	.word	0x20000c50
   18768:	00036c44 	.word	0x00036c44
   1876c:	20000ba8 	.word	0x20000ba8
   18770:	00036c94 	.word	0x00036c94
   18774:	20000bb4 	.word	0x20000bb4
   18778:	000195c5 	.word	0x000195c5
   1877c:	00018789 	.word	0x00018789
   18780:	00018f69 	.word	0x00018f69
   18784:	0001956d 	.word	0x0001956d

00018788 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18788:	b580      	push	{r7, lr}
   1878a:	b084      	sub	sp, #16
   1878c:	af00      	add	r7, sp, #0
   1878e:	6078      	str	r0, [r7, #4]
   18790:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18792:	687b      	ldr	r3, [r7, #4]
   18794:	2bff      	cmp	r3, #255	; 0xff
   18796:	d009      	beq.n	187ac <prvTraceGetParam+0x24>
   18798:	687b      	ldr	r3, [r7, #4]
   1879a:	4a19      	ldr	r2, [pc, #100]	; (18800 <prvTraceGetParam+0x78>)
   1879c:	4293      	cmp	r3, r2
   1879e:	d005      	beq.n	187ac <prvTraceGetParam+0x24>
   187a0:	4b18      	ldr	r3, [pc, #96]	; (18804 <prvTraceGetParam+0x7c>)
   187a2:	0018      	movs	r0, r3
   187a4:	4b18      	ldr	r3, [pc, #96]	; (18808 <prvTraceGetParam+0x80>)
   187a6:	4798      	blx	r3
   187a8:	683b      	ldr	r3, [r7, #0]
   187aa:	e024      	b.n	187f6 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   187ac:	683a      	ldr	r2, [r7, #0]
   187ae:	687b      	ldr	r3, [r7, #4]
   187b0:	429a      	cmp	r2, r3
   187b2:	d801      	bhi.n	187b8 <prvTraceGetParam+0x30>
	{
		return param;
   187b4:	683b      	ldr	r3, [r7, #0]
   187b6:	e01e      	b.n	187f6 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   187b8:	4b14      	ldr	r3, [pc, #80]	; (1880c <prvTraceGetParam+0x84>)
   187ba:	4798      	blx	r3
   187bc:	0003      	movs	r3, r0
   187be:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   187c0:	68fb      	ldr	r3, [r7, #12]
   187c2:	2b00      	cmp	r3, #0
   187c4:	d014      	beq.n	187f0 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   187c6:	68fb      	ldr	r3, [r7, #12]
   187c8:	2201      	movs	r2, #1
   187ca:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   187cc:	687b      	ldr	r3, [r7, #4]
   187ce:	43db      	mvns	r3, r3
   187d0:	683a      	ldr	r2, [r7, #0]
   187d2:	4013      	ands	r3, r2
   187d4:	0a1b      	lsrs	r3, r3, #8
   187d6:	b2da      	uxtb	r2, r3
   187d8:	68fb      	ldr	r3, [r7, #12]
   187da:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   187dc:	687b      	ldr	r3, [r7, #4]
   187de:	43db      	mvns	r3, r3
   187e0:	683a      	ldr	r2, [r7, #0]
   187e2:	4013      	ands	r3, r2
   187e4:	0c1b      	lsrs	r3, r3, #16
   187e6:	b29a      	uxth	r2, r3
   187e8:	68fb      	ldr	r3, [r7, #12]
   187ea:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   187ec:	4b08      	ldr	r3, [pc, #32]	; (18810 <prvTraceGetParam+0x88>)
   187ee:	4798      	blx	r3
		}

		return param & param_max;
   187f0:	683b      	ldr	r3, [r7, #0]
   187f2:	687a      	ldr	r2, [r7, #4]
   187f4:	4013      	ands	r3, r2
	}
}
   187f6:	0018      	movs	r0, r3
   187f8:	46bd      	mov	sp, r7
   187fa:	b004      	add	sp, #16
   187fc:	bd80      	pop	{r7, pc}
   187fe:	46c0      	nop			; (mov r8, r8)
   18800:	0000ffff 	.word	0x0000ffff
   18804:	00036ccc 	.word	0x00036ccc
   18808:	000193b1 	.word	0x000193b1
   1880c:	00018f69 	.word	0x00018f69
   18810:	0001956d 	.word	0x0001956d

00018814 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18814:	b580      	push	{r7, lr}
   18816:	b08a      	sub	sp, #40	; 0x28
   18818:	af00      	add	r7, sp, #0
   1881a:	6078      	str	r0, [r7, #4]
   1881c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1881e:	2326      	movs	r3, #38	; 0x26
   18820:	18fb      	adds	r3, r7, r3
   18822:	2200      	movs	r2, #0
   18824:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18826:	687b      	ldr	r3, [r7, #4]
   18828:	2bfe      	cmp	r3, #254	; 0xfe
   1882a:	d904      	bls.n	18836 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1882c:	4b2d      	ldr	r3, [pc, #180]	; (188e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1882e:	0018      	movs	r0, r3
   18830:	4b2d      	ldr	r3, [pc, #180]	; (188e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18832:	4798      	blx	r3
   18834:	e053      	b.n	188de <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18836:	4b2d      	ldr	r3, [pc, #180]	; (188ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18838:	681b      	ldr	r3, [r3, #0]
   1883a:	2b00      	cmp	r3, #0
   1883c:	d004      	beq.n	18848 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1883e:	4b2c      	ldr	r3, [pc, #176]	; (188f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18840:	0018      	movs	r0, r3
   18842:	4b29      	ldr	r3, [pc, #164]	; (188e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18844:	4798      	blx	r3
		return;
   18846:	e04a      	b.n	188de <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18848:	f3ef 8310 	mrs	r3, PRIMASK
   1884c:	613b      	str	r3, [r7, #16]
  return(result);
   1884e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18850:	623b      	str	r3, [r7, #32]
   18852:	2301      	movs	r3, #1
   18854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18856:	697b      	ldr	r3, [r7, #20]
   18858:	f383 8810 	msr	PRIMASK, r3
   1885c:	4b23      	ldr	r3, [pc, #140]	; (188ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1885e:	681b      	ldr	r3, [r3, #0]
   18860:	1c5a      	adds	r2, r3, #1
   18862:	4b22      	ldr	r3, [pc, #136]	; (188ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18864:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18866:	4b23      	ldr	r3, [pc, #140]	; (188f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18868:	681b      	ldr	r3, [r3, #0]
   1886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1886c:	2b00      	cmp	r3, #0
   1886e:	d02c      	beq.n	188ca <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18870:	4b21      	ldr	r3, [pc, #132]	; (188f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18872:	781b      	ldrb	r3, [r3, #0]
   18874:	2b00      	cmp	r3, #0
   18876:	d028      	beq.n	188ca <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18878:	20ff      	movs	r0, #255	; 0xff
   1887a:	4b20      	ldr	r3, [pc, #128]	; (188fc <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1887c:	4798      	blx	r3
   1887e:	0003      	movs	r3, r0
   18880:	001a      	movs	r2, r3
   18882:	231f      	movs	r3, #31
   18884:	18fb      	adds	r3, r7, r3
   18886:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18888:	683b      	ldr	r3, [r7, #0]
   1888a:	4a1d      	ldr	r2, [pc, #116]	; (18900 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1888c:	0019      	movs	r1, r3
   1888e:	0010      	movs	r0, r2
   18890:	4b1c      	ldr	r3, [pc, #112]	; (18904 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18892:	4798      	blx	r3
   18894:	0002      	movs	r2, r0
   18896:	2326      	movs	r3, #38	; 0x26
   18898:	18fb      	adds	r3, r7, r3
   1889a:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1889c:	4b1a      	ldr	r3, [pc, #104]	; (18908 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1889e:	4798      	blx	r3
   188a0:	0003      	movs	r3, r0
   188a2:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   188a4:	69bb      	ldr	r3, [r7, #24]
   188a6:	2b00      	cmp	r3, #0
   188a8:	d00f      	beq.n	188ca <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   188aa:	69bb      	ldr	r3, [r7, #24]
   188ac:	221f      	movs	r2, #31
   188ae:	18ba      	adds	r2, r7, r2
   188b0:	7812      	ldrb	r2, [r2, #0]
   188b2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   188b4:	687b      	ldr	r3, [r7, #4]
   188b6:	b2da      	uxtb	r2, r3
   188b8:	69bb      	ldr	r3, [r7, #24]
   188ba:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   188bc:	69bb      	ldr	r3, [r7, #24]
   188be:	2226      	movs	r2, #38	; 0x26
   188c0:	18ba      	adds	r2, r7, r2
   188c2:	8812      	ldrh	r2, [r2, #0]
   188c4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   188c6:	4b11      	ldr	r3, [pc, #68]	; (1890c <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   188c8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   188ca:	4b08      	ldr	r3, [pc, #32]	; (188ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   188cc:	681b      	ldr	r3, [r3, #0]
   188ce:	1e5a      	subs	r2, r3, #1
   188d0:	4b06      	ldr	r3, [pc, #24]	; (188ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   188d2:	601a      	str	r2, [r3, #0]
   188d4:	6a3b      	ldr	r3, [r7, #32]
   188d6:	60fb      	str	r3, [r7, #12]
   188d8:	68fb      	ldr	r3, [r7, #12]
   188da:	f383 8810 	msr	PRIMASK, r3
}
   188de:	46bd      	mov	sp, r7
   188e0:	b00a      	add	sp, #40	; 0x28
   188e2:	bd80      	pop	{r7, pc}
   188e4:	00036d08 	.word	0x00036d08
   188e8:	000193b1 	.word	0x000193b1
   188ec:	20000ba8 	.word	0x20000ba8
   188f0:	00036d60 	.word	0x00036d60
   188f4:	20000c50 	.word	0x20000c50
   188f8:	20000bb4 	.word	0x20000bb4
   188fc:	000195c5 	.word	0x000195c5
   18900:	0000ffff 	.word	0x0000ffff
   18904:	00018789 	.word	0x00018789
   18908:	00018f69 	.word	0x00018f69
   1890c:	0001956d 	.word	0x0001956d

00018910 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18910:	b590      	push	{r4, r7, lr}
   18912:	b089      	sub	sp, #36	; 0x24
   18914:	af00      	add	r7, sp, #0
   18916:	0002      	movs	r2, r0
   18918:	1dfb      	adds	r3, r7, #7
   1891a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1891c:	1dfb      	adds	r3, r7, #7
   1891e:	781b      	ldrb	r3, [r3, #0]
   18920:	2b0f      	cmp	r3, #15
   18922:	d904      	bls.n	1892e <prvTraceStoreTaskswitch+0x1e>
   18924:	4b34      	ldr	r3, [pc, #208]	; (189f8 <prvTraceStoreTaskswitch+0xe8>)
   18926:	0018      	movs	r0, r3
   18928:	4b34      	ldr	r3, [pc, #208]	; (189fc <prvTraceStoreTaskswitch+0xec>)
   1892a:	4798      	blx	r3
   1892c:	e061      	b.n	189f2 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1892e:	f3ef 8310 	mrs	r3, PRIMASK
   18932:	60fb      	str	r3, [r7, #12]
  return(result);
   18934:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18936:	61fb      	str	r3, [r7, #28]
   18938:	2301      	movs	r3, #1
   1893a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1893c:	693b      	ldr	r3, [r7, #16]
   1893e:	f383 8810 	msr	PRIMASK, r3
   18942:	4b2f      	ldr	r3, [pc, #188]	; (18a00 <prvTraceStoreTaskswitch+0xf0>)
   18944:	681b      	ldr	r3, [r3, #0]
   18946:	1c5a      	adds	r2, r3, #1
   18948:	4b2d      	ldr	r3, [pc, #180]	; (18a00 <prvTraceStoreTaskswitch+0xf0>)
   1894a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1894c:	4b2d      	ldr	r3, [pc, #180]	; (18a04 <prvTraceStoreTaskswitch+0xf4>)
   1894e:	781b      	ldrb	r3, [r3, #0]
   18950:	1dfa      	adds	r2, r7, #7
   18952:	7812      	ldrb	r2, [r2, #0]
   18954:	429a      	cmp	r2, r3
   18956:	d042      	beq.n	189de <prvTraceStoreTaskswitch+0xce>
   18958:	4b2b      	ldr	r3, [pc, #172]	; (18a08 <prvTraceStoreTaskswitch+0xf8>)
   1895a:	681b      	ldr	r3, [r3, #0]
   1895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1895e:	2b00      	cmp	r3, #0
   18960:	d03d      	beq.n	189de <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18962:	4b2a      	ldr	r3, [pc, #168]	; (18a0c <prvTraceStoreTaskswitch+0xfc>)
   18964:	2200      	movs	r2, #0
   18966:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18968:	231a      	movs	r3, #26
   1896a:	18fc      	adds	r4, r7, r3
   1896c:	4b28      	ldr	r3, [pc, #160]	; (18a10 <prvTraceStoreTaskswitch+0x100>)
   1896e:	0018      	movs	r0, r3
   18970:	4b28      	ldr	r3, [pc, #160]	; (18a14 <prvTraceStoreTaskswitch+0x104>)
   18972:	4798      	blx	r3
   18974:	0003      	movs	r3, r0
   18976:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18978:	4b22      	ldr	r3, [pc, #136]	; (18a04 <prvTraceStoreTaskswitch+0xf4>)
   1897a:	1dfa      	adds	r2, r7, #7
   1897c:	7812      	ldrb	r2, [r2, #0]
   1897e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18980:	2319      	movs	r3, #25
   18982:	18fb      	adds	r3, r7, r3
   18984:	4a1f      	ldr	r2, [pc, #124]	; (18a04 <prvTraceStoreTaskswitch+0xf4>)
   18986:	7812      	ldrb	r2, [r2, #0]
   18988:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1898a:	4b23      	ldr	r3, [pc, #140]	; (18a18 <prvTraceStoreTaskswitch+0x108>)
   1898c:	4798      	blx	r3
   1898e:	0003      	movs	r3, r0
   18990:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18992:	697b      	ldr	r3, [r7, #20]
   18994:	2b00      	cmp	r3, #0
   18996:	d022      	beq.n	189de <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18998:	4b1a      	ldr	r3, [pc, #104]	; (18a04 <prvTraceStoreTaskswitch+0xf4>)
   1899a:	781b      	ldrb	r3, [r3, #0]
   1899c:	0019      	movs	r1, r3
   1899e:	2003      	movs	r0, #3
   189a0:	4b1e      	ldr	r3, [pc, #120]	; (18a1c <prvTraceStoreTaskswitch+0x10c>)
   189a2:	4798      	blx	r3
   189a4:	0003      	movs	r3, r0
   189a6:	2b01      	cmp	r3, #1
   189a8:	d103      	bne.n	189b2 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   189aa:	697b      	ldr	r3, [r7, #20]
   189ac:	2207      	movs	r2, #7
   189ae:	701a      	strb	r2, [r3, #0]
   189b0:	e002      	b.n	189b8 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   189b2:	697b      	ldr	r3, [r7, #20]
   189b4:	2206      	movs	r2, #6
   189b6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   189b8:	697b      	ldr	r3, [r7, #20]
   189ba:	221a      	movs	r2, #26
   189bc:	18ba      	adds	r2, r7, r2
   189be:	8812      	ldrh	r2, [r2, #0]
   189c0:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   189c2:	697b      	ldr	r3, [r7, #20]
   189c4:	2219      	movs	r2, #25
   189c6:	18ba      	adds	r2, r7, r2
   189c8:	7812      	ldrb	r2, [r2, #0]
   189ca:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   189cc:	4b0d      	ldr	r3, [pc, #52]	; (18a04 <prvTraceStoreTaskswitch+0xf4>)
   189ce:	781b      	ldrb	r3, [r3, #0]
   189d0:	2201      	movs	r2, #1
   189d2:	0019      	movs	r1, r3
   189d4:	2003      	movs	r0, #3
   189d6:	4b12      	ldr	r3, [pc, #72]	; (18a20 <prvTraceStoreTaskswitch+0x110>)
   189d8:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   189da:	4b12      	ldr	r3, [pc, #72]	; (18a24 <prvTraceStoreTaskswitch+0x114>)
   189dc:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   189de:	4b08      	ldr	r3, [pc, #32]	; (18a00 <prvTraceStoreTaskswitch+0xf0>)
   189e0:	681b      	ldr	r3, [r3, #0]
   189e2:	1e5a      	subs	r2, r3, #1
   189e4:	4b06      	ldr	r3, [pc, #24]	; (18a00 <prvTraceStoreTaskswitch+0xf0>)
   189e6:	601a      	str	r2, [r3, #0]
   189e8:	69fb      	ldr	r3, [r7, #28]
   189ea:	60bb      	str	r3, [r7, #8]
   189ec:	68bb      	ldr	r3, [r7, #8]
   189ee:	f383 8810 	msr	PRIMASK, r3
}
   189f2:	46bd      	mov	sp, r7
   189f4:	b009      	add	sp, #36	; 0x24
   189f6:	bd90      	pop	{r4, r7, pc}
   189f8:	00036d98 	.word	0x00036d98
   189fc:	000193b1 	.word	0x000193b1
   18a00:	20000ba8 	.word	0x20000ba8
   18a04:	20000bb4 	.word	0x20000bb4
   18a08:	20000c50 	.word	0x20000c50
   18a0c:	20000b94 	.word	0x20000b94
   18a10:	0000ffff 	.word	0x0000ffff
   18a14:	000195c5 	.word	0x000195c5
   18a18:	00018f69 	.word	0x00018f69
   18a1c:	00018c0d 	.word	0x00018c0d
   18a20:	00018b69 	.word	0x00018b69
   18a24:	0001956d 	.word	0x0001956d

00018a28 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18a28:	b590      	push	{r4, r7, lr}
   18a2a:	b083      	sub	sp, #12
   18a2c:	af00      	add	r7, sp, #0
   18a2e:	0004      	movs	r4, r0
   18a30:	0008      	movs	r0, r1
   18a32:	0011      	movs	r1, r2
   18a34:	1dfb      	adds	r3, r7, #7
   18a36:	1c22      	adds	r2, r4, #0
   18a38:	701a      	strb	r2, [r3, #0]
   18a3a:	1dbb      	adds	r3, r7, #6
   18a3c:	1c02      	adds	r2, r0, #0
   18a3e:	701a      	strb	r2, [r3, #0]
   18a40:	1d7b      	adds	r3, r7, #5
   18a42:	1c0a      	adds	r2, r1, #0
   18a44:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18a46:	1dfb      	adds	r3, r7, #7
   18a48:	781b      	ldrb	r3, [r3, #0]
   18a4a:	2b08      	cmp	r3, #8
   18a4c:	d904      	bls.n	18a58 <prvTraceSetPriorityProperty+0x30>
   18a4e:	4b1a      	ldr	r3, [pc, #104]	; (18ab8 <prvTraceSetPriorityProperty+0x90>)
   18a50:	0018      	movs	r0, r3
   18a52:	4b1a      	ldr	r3, [pc, #104]	; (18abc <prvTraceSetPriorityProperty+0x94>)
   18a54:	4798      	blx	r3
   18a56:	e02c      	b.n	18ab2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18a58:	4b19      	ldr	r3, [pc, #100]	; (18ac0 <prvTraceSetPriorityProperty+0x98>)
   18a5a:	681a      	ldr	r2, [r3, #0]
   18a5c:	1dfb      	adds	r3, r7, #7
   18a5e:	781b      	ldrb	r3, [r3, #0]
   18a60:	2164      	movs	r1, #100	; 0x64
   18a62:	18d3      	adds	r3, r2, r3
   18a64:	185b      	adds	r3, r3, r1
   18a66:	781b      	ldrb	r3, [r3, #0]
   18a68:	1dba      	adds	r2, r7, #6
   18a6a:	7812      	ldrb	r2, [r2, #0]
   18a6c:	429a      	cmp	r2, r3
   18a6e:	d904      	bls.n	18a7a <prvTraceSetPriorityProperty+0x52>
   18a70:	4b14      	ldr	r3, [pc, #80]	; (18ac4 <prvTraceSetPriorityProperty+0x9c>)
   18a72:	0018      	movs	r0, r3
   18a74:	4b11      	ldr	r3, [pc, #68]	; (18abc <prvTraceSetPriorityProperty+0x94>)
   18a76:	4798      	blx	r3
   18a78:	e01b      	b.n	18ab2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18a7a:	4b11      	ldr	r3, [pc, #68]	; (18ac0 <prvTraceSetPriorityProperty+0x98>)
   18a7c:	681c      	ldr	r4, [r3, #0]
   18a7e:	1dfb      	adds	r3, r7, #7
   18a80:	781a      	ldrb	r2, [r3, #0]
   18a82:	1dbb      	adds	r3, r7, #6
   18a84:	781b      	ldrb	r3, [r3, #0]
   18a86:	0011      	movs	r1, r2
   18a88:	0018      	movs	r0, r3
   18a8a:	4b0f      	ldr	r3, [pc, #60]	; (18ac8 <prvTraceSetPriorityProperty+0xa0>)
   18a8c:	4798      	blx	r3
   18a8e:	0003      	movs	r3, r0
   18a90:	0018      	movs	r0, r3
   18a92:	4b0b      	ldr	r3, [pc, #44]	; (18ac0 <prvTraceSetPriorityProperty+0x98>)
   18a94:	681a      	ldr	r2, [r3, #0]
   18a96:	1dfb      	adds	r3, r7, #7
   18a98:	781b      	ldrb	r3, [r3, #0]
   18a9a:	2170      	movs	r1, #112	; 0x70
   18a9c:	18d3      	adds	r3, r2, r3
   18a9e:	185b      	adds	r3, r3, r1
   18aa0:	781b      	ldrb	r3, [r3, #0]
   18aa2:	18c3      	adds	r3, r0, r3
   18aa4:	3301      	adds	r3, #1
   18aa6:	229c      	movs	r2, #156	; 0x9c
   18aa8:	18e3      	adds	r3, r4, r3
   18aaa:	189b      	adds	r3, r3, r2
   18aac:	1d7a      	adds	r2, r7, #5
   18aae:	7812      	ldrb	r2, [r2, #0]
   18ab0:	701a      	strb	r2, [r3, #0]
}
   18ab2:	46bd      	mov	sp, r7
   18ab4:	b003      	add	sp, #12
   18ab6:	bd90      	pop	{r4, r7, pc}
   18ab8:	00036f2c 	.word	0x00036f2c
   18abc:	000193b1 	.word	0x000193b1
   18ac0:	20000c50 	.word	0x20000c50
   18ac4:	00036f78 	.word	0x00036f78
   18ac8:	00018fbd 	.word	0x00018fbd

00018acc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18acc:	b590      	push	{r4, r7, lr}
   18ace:	b083      	sub	sp, #12
   18ad0:	af00      	add	r7, sp, #0
   18ad2:	0002      	movs	r2, r0
   18ad4:	1dfb      	adds	r3, r7, #7
   18ad6:	701a      	strb	r2, [r3, #0]
   18ad8:	1dbb      	adds	r3, r7, #6
   18ada:	1c0a      	adds	r2, r1, #0
   18adc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18ade:	1dfb      	adds	r3, r7, #7
   18ae0:	781b      	ldrb	r3, [r3, #0]
   18ae2:	2b08      	cmp	r3, #8
   18ae4:	d905      	bls.n	18af2 <prvTraceGetPriorityProperty+0x26>
   18ae6:	4b1b      	ldr	r3, [pc, #108]	; (18b54 <prvTraceGetPriorityProperty+0x88>)
   18ae8:	0018      	movs	r0, r3
   18aea:	4b1b      	ldr	r3, [pc, #108]	; (18b58 <prvTraceGetPriorityProperty+0x8c>)
   18aec:	4798      	blx	r3
   18aee:	2300      	movs	r3, #0
   18af0:	e02b      	b.n	18b4a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18af2:	4b1a      	ldr	r3, [pc, #104]	; (18b5c <prvTraceGetPriorityProperty+0x90>)
   18af4:	681a      	ldr	r2, [r3, #0]
   18af6:	1dfb      	adds	r3, r7, #7
   18af8:	781b      	ldrb	r3, [r3, #0]
   18afa:	2164      	movs	r1, #100	; 0x64
   18afc:	18d3      	adds	r3, r2, r3
   18afe:	185b      	adds	r3, r3, r1
   18b00:	781b      	ldrb	r3, [r3, #0]
   18b02:	1dba      	adds	r2, r7, #6
   18b04:	7812      	ldrb	r2, [r2, #0]
   18b06:	429a      	cmp	r2, r3
   18b08:	d905      	bls.n	18b16 <prvTraceGetPriorityProperty+0x4a>
   18b0a:	4b15      	ldr	r3, [pc, #84]	; (18b60 <prvTraceGetPriorityProperty+0x94>)
   18b0c:	0018      	movs	r0, r3
   18b0e:	4b12      	ldr	r3, [pc, #72]	; (18b58 <prvTraceGetPriorityProperty+0x8c>)
   18b10:	4798      	blx	r3
   18b12:	2300      	movs	r3, #0
   18b14:	e019      	b.n	18b4a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   18b16:	4b11      	ldr	r3, [pc, #68]	; (18b5c <prvTraceGetPriorityProperty+0x90>)
   18b18:	681c      	ldr	r4, [r3, #0]
   18b1a:	1dfb      	adds	r3, r7, #7
   18b1c:	781a      	ldrb	r2, [r3, #0]
   18b1e:	1dbb      	adds	r3, r7, #6
   18b20:	781b      	ldrb	r3, [r3, #0]
   18b22:	0011      	movs	r1, r2
   18b24:	0018      	movs	r0, r3
   18b26:	4b0f      	ldr	r3, [pc, #60]	; (18b64 <prvTraceGetPriorityProperty+0x98>)
   18b28:	4798      	blx	r3
   18b2a:	0003      	movs	r3, r0
   18b2c:	0018      	movs	r0, r3
   18b2e:	4b0b      	ldr	r3, [pc, #44]	; (18b5c <prvTraceGetPriorityProperty+0x90>)
   18b30:	681a      	ldr	r2, [r3, #0]
   18b32:	1dfb      	adds	r3, r7, #7
   18b34:	781b      	ldrb	r3, [r3, #0]
   18b36:	2170      	movs	r1, #112	; 0x70
   18b38:	18d3      	adds	r3, r2, r3
   18b3a:	185b      	adds	r3, r3, r1
   18b3c:	781b      	ldrb	r3, [r3, #0]
   18b3e:	18c3      	adds	r3, r0, r3
   18b40:	3301      	adds	r3, #1
   18b42:	229c      	movs	r2, #156	; 0x9c
   18b44:	18e3      	adds	r3, r4, r3
   18b46:	189b      	adds	r3, r3, r2
   18b48:	781b      	ldrb	r3, [r3, #0]
}
   18b4a:	0018      	movs	r0, r3
   18b4c:	46bd      	mov	sp, r7
   18b4e:	b003      	add	sp, #12
   18b50:	bd90      	pop	{r4, r7, pc}
   18b52:	46c0      	nop			; (mov r8, r8)
   18b54:	00036fb8 	.word	0x00036fb8
   18b58:	000193b1 	.word	0x000193b1
   18b5c:	20000c50 	.word	0x20000c50
   18b60:	00037004 	.word	0x00037004
   18b64:	00018fbd 	.word	0x00018fbd

00018b68 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18b68:	b590      	push	{r4, r7, lr}
   18b6a:	b083      	sub	sp, #12
   18b6c:	af00      	add	r7, sp, #0
   18b6e:	0004      	movs	r4, r0
   18b70:	0008      	movs	r0, r1
   18b72:	0011      	movs	r1, r2
   18b74:	1dfb      	adds	r3, r7, #7
   18b76:	1c22      	adds	r2, r4, #0
   18b78:	701a      	strb	r2, [r3, #0]
   18b7a:	1dbb      	adds	r3, r7, #6
   18b7c:	1c02      	adds	r2, r0, #0
   18b7e:	701a      	strb	r2, [r3, #0]
   18b80:	1d7b      	adds	r3, r7, #5
   18b82:	1c0a      	adds	r2, r1, #0
   18b84:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18b86:	1dfb      	adds	r3, r7, #7
   18b88:	781b      	ldrb	r3, [r3, #0]
   18b8a:	2b08      	cmp	r3, #8
   18b8c:	d904      	bls.n	18b98 <prvTraceSetObjectState+0x30>
   18b8e:	4b1a      	ldr	r3, [pc, #104]	; (18bf8 <prvTraceSetObjectState+0x90>)
   18b90:	0018      	movs	r0, r3
   18b92:	4b1a      	ldr	r3, [pc, #104]	; (18bfc <prvTraceSetObjectState+0x94>)
   18b94:	4798      	blx	r3
   18b96:	e02b      	b.n	18bf0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18b98:	4b19      	ldr	r3, [pc, #100]	; (18c00 <prvTraceSetObjectState+0x98>)
   18b9a:	681a      	ldr	r2, [r3, #0]
   18b9c:	1dfb      	adds	r3, r7, #7
   18b9e:	781b      	ldrb	r3, [r3, #0]
   18ba0:	2164      	movs	r1, #100	; 0x64
   18ba2:	18d3      	adds	r3, r2, r3
   18ba4:	185b      	adds	r3, r3, r1
   18ba6:	781b      	ldrb	r3, [r3, #0]
   18ba8:	1dba      	adds	r2, r7, #6
   18baa:	7812      	ldrb	r2, [r2, #0]
   18bac:	429a      	cmp	r2, r3
   18bae:	d904      	bls.n	18bba <prvTraceSetObjectState+0x52>
   18bb0:	4b14      	ldr	r3, [pc, #80]	; (18c04 <prvTraceSetObjectState+0x9c>)
   18bb2:	0018      	movs	r0, r3
   18bb4:	4b11      	ldr	r3, [pc, #68]	; (18bfc <prvTraceSetObjectState+0x94>)
   18bb6:	4798      	blx	r3
   18bb8:	e01a      	b.n	18bf0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18bba:	4b11      	ldr	r3, [pc, #68]	; (18c00 <prvTraceSetObjectState+0x98>)
   18bbc:	681c      	ldr	r4, [r3, #0]
   18bbe:	1dfb      	adds	r3, r7, #7
   18bc0:	781a      	ldrb	r2, [r3, #0]
   18bc2:	1dbb      	adds	r3, r7, #6
   18bc4:	781b      	ldrb	r3, [r3, #0]
   18bc6:	0011      	movs	r1, r2
   18bc8:	0018      	movs	r0, r3
   18bca:	4b0f      	ldr	r3, [pc, #60]	; (18c08 <prvTraceSetObjectState+0xa0>)
   18bcc:	4798      	blx	r3
   18bce:	0003      	movs	r3, r0
   18bd0:	0018      	movs	r0, r3
   18bd2:	4b0b      	ldr	r3, [pc, #44]	; (18c00 <prvTraceSetObjectState+0x98>)
   18bd4:	681a      	ldr	r2, [r3, #0]
   18bd6:	1dfb      	adds	r3, r7, #7
   18bd8:	781b      	ldrb	r3, [r3, #0]
   18bda:	2170      	movs	r1, #112	; 0x70
   18bdc:	18d3      	adds	r3, r2, r3
   18bde:	185b      	adds	r3, r3, r1
   18be0:	781b      	ldrb	r3, [r3, #0]
   18be2:	18c3      	adds	r3, r0, r3
   18be4:	229c      	movs	r2, #156	; 0x9c
   18be6:	18e3      	adds	r3, r4, r3
   18be8:	189b      	adds	r3, r3, r2
   18bea:	1d7a      	adds	r2, r7, #5
   18bec:	7812      	ldrb	r2, [r2, #0]
   18bee:	701a      	strb	r2, [r3, #0]
}
   18bf0:	46bd      	mov	sp, r7
   18bf2:	b003      	add	sp, #12
   18bf4:	bd90      	pop	{r4, r7, pc}
   18bf6:	46c0      	nop			; (mov r8, r8)
   18bf8:	00037044 	.word	0x00037044
   18bfc:	000193b1 	.word	0x000193b1
   18c00:	20000c50 	.word	0x20000c50
   18c04:	00037088 	.word	0x00037088
   18c08:	00018fbd 	.word	0x00018fbd

00018c0c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18c0c:	b590      	push	{r4, r7, lr}
   18c0e:	b083      	sub	sp, #12
   18c10:	af00      	add	r7, sp, #0
   18c12:	0002      	movs	r2, r0
   18c14:	1dfb      	adds	r3, r7, #7
   18c16:	701a      	strb	r2, [r3, #0]
   18c18:	1dbb      	adds	r3, r7, #6
   18c1a:	1c0a      	adds	r2, r1, #0
   18c1c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18c1e:	1dfb      	adds	r3, r7, #7
   18c20:	781b      	ldrb	r3, [r3, #0]
   18c22:	2b08      	cmp	r3, #8
   18c24:	d905      	bls.n	18c32 <prvTraceGetObjectState+0x26>
   18c26:	4b1a      	ldr	r3, [pc, #104]	; (18c90 <prvTraceGetObjectState+0x84>)
   18c28:	0018      	movs	r0, r3
   18c2a:	4b1a      	ldr	r3, [pc, #104]	; (18c94 <prvTraceGetObjectState+0x88>)
   18c2c:	4798      	blx	r3
   18c2e:	2300      	movs	r3, #0
   18c30:	e02a      	b.n	18c88 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18c32:	4b19      	ldr	r3, [pc, #100]	; (18c98 <prvTraceGetObjectState+0x8c>)
   18c34:	681a      	ldr	r2, [r3, #0]
   18c36:	1dfb      	adds	r3, r7, #7
   18c38:	781b      	ldrb	r3, [r3, #0]
   18c3a:	2164      	movs	r1, #100	; 0x64
   18c3c:	18d3      	adds	r3, r2, r3
   18c3e:	185b      	adds	r3, r3, r1
   18c40:	781b      	ldrb	r3, [r3, #0]
   18c42:	1dba      	adds	r2, r7, #6
   18c44:	7812      	ldrb	r2, [r2, #0]
   18c46:	429a      	cmp	r2, r3
   18c48:	d905      	bls.n	18c56 <prvTraceGetObjectState+0x4a>
   18c4a:	4b14      	ldr	r3, [pc, #80]	; (18c9c <prvTraceGetObjectState+0x90>)
   18c4c:	0018      	movs	r0, r3
   18c4e:	4b11      	ldr	r3, [pc, #68]	; (18c94 <prvTraceGetObjectState+0x88>)
   18c50:	4798      	blx	r3
   18c52:	2300      	movs	r3, #0
   18c54:	e018      	b.n	18c88 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   18c56:	4b10      	ldr	r3, [pc, #64]	; (18c98 <prvTraceGetObjectState+0x8c>)
   18c58:	681c      	ldr	r4, [r3, #0]
   18c5a:	1dfb      	adds	r3, r7, #7
   18c5c:	781a      	ldrb	r2, [r3, #0]
   18c5e:	1dbb      	adds	r3, r7, #6
   18c60:	781b      	ldrb	r3, [r3, #0]
   18c62:	0011      	movs	r1, r2
   18c64:	0018      	movs	r0, r3
   18c66:	4b0e      	ldr	r3, [pc, #56]	; (18ca0 <prvTraceGetObjectState+0x94>)
   18c68:	4798      	blx	r3
   18c6a:	0003      	movs	r3, r0
   18c6c:	0018      	movs	r0, r3
   18c6e:	4b0a      	ldr	r3, [pc, #40]	; (18c98 <prvTraceGetObjectState+0x8c>)
   18c70:	681a      	ldr	r2, [r3, #0]
   18c72:	1dfb      	adds	r3, r7, #7
   18c74:	781b      	ldrb	r3, [r3, #0]
   18c76:	2170      	movs	r1, #112	; 0x70
   18c78:	18d3      	adds	r3, r2, r3
   18c7a:	185b      	adds	r3, r3, r1
   18c7c:	781b      	ldrb	r3, [r3, #0]
   18c7e:	18c3      	adds	r3, r0, r3
   18c80:	229c      	movs	r2, #156	; 0x9c
   18c82:	18e3      	adds	r3, r4, r3
   18c84:	189b      	adds	r3, r3, r2
   18c86:	781b      	ldrb	r3, [r3, #0]
}
   18c88:	0018      	movs	r0, r3
   18c8a:	46bd      	mov	sp, r7
   18c8c:	b003      	add	sp, #12
   18c8e:	bd90      	pop	{r4, r7, pc}
   18c90:	000370c4 	.word	0x000370c4
   18c94:	000193b1 	.word	0x000193b1
   18c98:	20000c50 	.word	0x20000c50
   18c9c:	00037108 	.word	0x00037108
   18ca0:	00018fbd 	.word	0x00018fbd

00018ca4 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   18ca4:	b590      	push	{r4, r7, lr}
   18ca6:	b083      	sub	sp, #12
   18ca8:	af00      	add	r7, sp, #0
   18caa:	0002      	movs	r2, r0
   18cac:	1dfb      	adds	r3, r7, #7
   18cae:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   18cb0:	4b11      	ldr	r3, [pc, #68]	; (18cf8 <prvTraceSetTaskInstanceFinished+0x54>)
   18cb2:	681b      	ldr	r3, [r3, #0]
   18cb4:	2267      	movs	r2, #103	; 0x67
   18cb6:	5c9b      	ldrb	r3, [r3, r2]
   18cb8:	1dfa      	adds	r2, r7, #7
   18cba:	7812      	ldrb	r2, [r2, #0]
   18cbc:	429a      	cmp	r2, r3
   18cbe:	d904      	bls.n	18cca <prvTraceSetTaskInstanceFinished+0x26>
   18cc0:	4b0e      	ldr	r3, [pc, #56]	; (18cfc <prvTraceSetTaskInstanceFinished+0x58>)
   18cc2:	0018      	movs	r0, r3
   18cc4:	4b0e      	ldr	r3, [pc, #56]	; (18d00 <prvTraceSetTaskInstanceFinished+0x5c>)
   18cc6:	4798      	blx	r3
   18cc8:	e013      	b.n	18cf2 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   18cca:	4b0b      	ldr	r3, [pc, #44]	; (18cf8 <prvTraceSetTaskInstanceFinished+0x54>)
   18ccc:	681c      	ldr	r4, [r3, #0]
   18cce:	1dfb      	adds	r3, r7, #7
   18cd0:	781b      	ldrb	r3, [r3, #0]
   18cd2:	2103      	movs	r1, #3
   18cd4:	0018      	movs	r0, r3
   18cd6:	4b0b      	ldr	r3, [pc, #44]	; (18d04 <prvTraceSetTaskInstanceFinished+0x60>)
   18cd8:	4798      	blx	r3
   18cda:	0003      	movs	r3, r0
   18cdc:	0019      	movs	r1, r3
   18cde:	4b06      	ldr	r3, [pc, #24]	; (18cf8 <prvTraceSetTaskInstanceFinished+0x54>)
   18ce0:	681b      	ldr	r3, [r3, #0]
   18ce2:	2273      	movs	r2, #115	; 0x73
   18ce4:	5c9b      	ldrb	r3, [r3, r2]
   18ce6:	18cb      	adds	r3, r1, r3
   18ce8:	229c      	movs	r2, #156	; 0x9c
   18cea:	18e3      	adds	r3, r4, r3
   18cec:	189b      	adds	r3, r3, r2
   18cee:	2200      	movs	r2, #0
   18cf0:	701a      	strb	r2, [r3, #0]
#endif
}
   18cf2:	46bd      	mov	sp, r7
   18cf4:	b003      	add	sp, #12
   18cf6:	bd90      	pop	{r4, r7, pc}
   18cf8:	20000c50 	.word	0x20000c50
   18cfc:	00037144 	.word	0x00037144
   18d00:	000193b1 	.word	0x000193b1
   18d04:	00018fbd 	.word	0x00018fbd

00018d08 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   18d08:	b580      	push	{r7, lr}
   18d0a:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   18d0c:	4b75      	ldr	r3, [pc, #468]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d0e:	681b      	ldr	r3, [r3, #0]
   18d10:	2b00      	cmp	r3, #0
   18d12:	d103      	bne.n	18d1c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   18d14:	4b73      	ldr	r3, [pc, #460]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d16:	4a74      	ldr	r2, [pc, #464]	; (18ee8 <prvTraceInitTraceData+0x1e0>)
   18d18:	601a      	str	r2, [r3, #0]
   18d1a:	e006      	b.n	18d2a <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   18d1c:	4b71      	ldr	r3, [pc, #452]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d1e:	681b      	ldr	r3, [r3, #0]
   18d20:	781b      	ldrb	r3, [r3, #0]
   18d22:	b2db      	uxtb	r3, r3
   18d24:	2b01      	cmp	r3, #1
   18d26:	d100      	bne.n	18d2a <prvTraceInitTraceData+0x22>
   18d28:	e0d8      	b.n	18edc <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   18d2a:	4b70      	ldr	r3, [pc, #448]	; (18eec <prvTraceInitTraceData+0x1e4>)
   18d2c:	681a      	ldr	r2, [r3, #0]
   18d2e:	4b70      	ldr	r3, [pc, #448]	; (18ef0 <prvTraceInitTraceData+0x1e8>)
   18d30:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   18d32:	4b6c      	ldr	r3, [pc, #432]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d34:	6818      	ldr	r0, [r3, #0]
   18d36:	23bd      	movs	r3, #189	; 0xbd
   18d38:	011b      	lsls	r3, r3, #4
   18d3a:	001a      	movs	r2, r3
   18d3c:	2100      	movs	r1, #0
   18d3e:	4b6d      	ldr	r3, [pc, #436]	; (18ef4 <prvTraceInitTraceData+0x1ec>)
   18d40:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   18d42:	4b68      	ldr	r3, [pc, #416]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d44:	681b      	ldr	r3, [r3, #0]
   18d46:	4a6c      	ldr	r2, [pc, #432]	; (18ef8 <prvTraceInitTraceData+0x1f0>)
   18d48:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   18d4a:	4b66      	ldr	r3, [pc, #408]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d4c:	681b      	ldr	r3, [r3, #0]
   18d4e:	2205      	movs	r2, #5
   18d50:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   18d52:	4b64      	ldr	r3, [pc, #400]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d54:	681b      	ldr	r3, [r3, #0]
   18d56:	2200      	movs	r2, #0
   18d58:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   18d5a:	4b62      	ldr	r3, [pc, #392]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d5c:	681b      	ldr	r3, [r3, #0]
   18d5e:	22bd      	movs	r2, #189	; 0xbd
   18d60:	0112      	lsls	r2, r2, #4
   18d62:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   18d64:	4b5f      	ldr	r3, [pc, #380]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d66:	681b      	ldr	r3, [r3, #0]
   18d68:	2296      	movs	r2, #150	; 0x96
   18d6a:	0052      	lsls	r2, r2, #1
   18d6c:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   18d6e:	4b5d      	ldr	r3, [pc, #372]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d70:	681b      	ldr	r3, [r3, #0]
   18d72:	4a62      	ldr	r2, [pc, #392]	; (18efc <prvTraceInitTraceData+0x1f4>)
   18d74:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   18d76:	4b5b      	ldr	r3, [pc, #364]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d78:	681b      	ldr	r3, [r3, #0]
   18d7a:	2200      	movs	r2, #0
   18d7c:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   18d7e:	4b59      	ldr	r3, [pc, #356]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d80:	681b      	ldr	r3, [r3, #0]
   18d82:	2200      	movs	r2, #0
   18d84:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   18d86:	4b5e      	ldr	r3, [pc, #376]	; (18f00 <prvTraceInitTraceData+0x1f8>)
   18d88:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   18d8a:	4b56      	ldr	r3, [pc, #344]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d8c:	681b      	ldr	r3, [r3, #0]
   18d8e:	4a5d      	ldr	r2, [pc, #372]	; (18f04 <prvTraceInitTraceData+0x1fc>)
   18d90:	495d      	ldr	r1, [pc, #372]	; (18f08 <prvTraceInitTraceData+0x200>)
   18d92:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   18d94:	4b53      	ldr	r3, [pc, #332]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18d96:	681a      	ldr	r2, [r3, #0]
   18d98:	23ac      	movs	r3, #172	; 0xac
   18d9a:	00db      	lsls	r3, r3, #3
   18d9c:	21c8      	movs	r1, #200	; 0xc8
   18d9e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   18da0:	4b50      	ldr	r3, [pc, #320]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18da2:	681b      	ldr	r3, [r3, #0]
   18da4:	4a59      	ldr	r2, [pc, #356]	; (18f0c <prvTraceInitTraceData+0x204>)
   18da6:	2101      	movs	r1, #1
   18da8:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   18daa:	4b4e      	ldr	r3, [pc, #312]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18dac:	681a      	ldr	r2, [r3, #0]
   18dae:	23d7      	movs	r3, #215	; 0xd7
   18db0:	00db      	lsls	r3, r3, #3
   18db2:	4957      	ldr	r1, [pc, #348]	; (18f10 <prvTraceInitTraceData+0x208>)
   18db4:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   18db6:	4b4b      	ldr	r3, [pc, #300]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18db8:	681b      	ldr	r3, [r3, #0]
   18dba:	4a56      	ldr	r2, [pc, #344]	; (18f14 <prvTraceInitTraceData+0x20c>)
   18dbc:	4694      	mov	ip, r2
   18dbe:	4463      	add	r3, ip
   18dc0:	4955      	ldr	r1, [pc, #340]	; (18f18 <prvTraceInitTraceData+0x210>)
   18dc2:	2250      	movs	r2, #80	; 0x50
   18dc4:	0018      	movs	r0, r3
   18dc6:	4b55      	ldr	r3, [pc, #340]	; (18f1c <prvTraceInitTraceData+0x214>)
   18dc8:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   18dca:	4b46      	ldr	r3, [pc, #280]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18dcc:	681b      	ldr	r3, [r3, #0]
   18dce:	4a54      	ldr	r2, [pc, #336]	; (18f20 <prvTraceInitTraceData+0x218>)
   18dd0:	4954      	ldr	r1, [pc, #336]	; (18f24 <prvTraceInitTraceData+0x21c>)
   18dd2:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   18dd4:	4b43      	ldr	r3, [pc, #268]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18dd6:	681b      	ldr	r3, [r3, #0]
   18dd8:	4a53      	ldr	r2, [pc, #332]	; (18f28 <prvTraceInitTraceData+0x220>)
   18dda:	210a      	movs	r1, #10
   18ddc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   18dde:	4b41      	ldr	r3, [pc, #260]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18de0:	681b      	ldr	r3, [r3, #0]
   18de2:	4a52      	ldr	r2, [pc, #328]	; (18f2c <prvTraceInitTraceData+0x224>)
   18de4:	210b      	movs	r1, #11
   18de6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   18de8:	4b3e      	ldr	r3, [pc, #248]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18dea:	681b      	ldr	r3, [r3, #0]
   18dec:	4a50      	ldr	r2, [pc, #320]	; (18f30 <prvTraceInitTraceData+0x228>)
   18dee:	210c      	movs	r1, #12
   18df0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   18df2:	4b3c      	ldr	r3, [pc, #240]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18df4:	681b      	ldr	r3, [r3, #0]
   18df6:	4a4f      	ldr	r2, [pc, #316]	; (18f34 <prvTraceInitTraceData+0x22c>)
   18df8:	210d      	movs	r1, #13
   18dfa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   18dfc:	4b39      	ldr	r3, [pc, #228]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18dfe:	681b      	ldr	r3, [r3, #0]
   18e00:	4a4d      	ldr	r2, [pc, #308]	; (18f38 <prvTraceInitTraceData+0x230>)
   18e02:	2171      	movs	r1, #113	; 0x71
   18e04:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   18e06:	4b37      	ldr	r3, [pc, #220]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e08:	681b      	ldr	r3, [r3, #0]
   18e0a:	4a4c      	ldr	r2, [pc, #304]	; (18f3c <prvTraceInitTraceData+0x234>)
   18e0c:	2172      	movs	r1, #114	; 0x72
   18e0e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   18e10:	4b34      	ldr	r3, [pc, #208]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e12:	681b      	ldr	r3, [r3, #0]
   18e14:	4a4a      	ldr	r2, [pc, #296]	; (18f40 <prvTraceInitTraceData+0x238>)
   18e16:	2173      	movs	r1, #115	; 0x73
   18e18:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   18e1a:	4b32      	ldr	r3, [pc, #200]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e1c:	681b      	ldr	r3, [r3, #0]
   18e1e:	4a49      	ldr	r2, [pc, #292]	; (18f44 <prvTraceInitTraceData+0x23c>)
   18e20:	2174      	movs	r1, #116	; 0x74
   18e22:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   18e24:	4b2f      	ldr	r3, [pc, #188]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e26:	681b      	ldr	r3, [r3, #0]
   18e28:	4a47      	ldr	r2, [pc, #284]	; (18f48 <prvTraceInitTraceData+0x240>)
   18e2a:	21f1      	movs	r1, #241	; 0xf1
   18e2c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   18e2e:	4b2d      	ldr	r3, [pc, #180]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e30:	681b      	ldr	r3, [r3, #0]
   18e32:	4a46      	ldr	r2, [pc, #280]	; (18f4c <prvTraceInitTraceData+0x244>)
   18e34:	21f2      	movs	r1, #242	; 0xf2
   18e36:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   18e38:	4b2a      	ldr	r3, [pc, #168]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e3a:	681b      	ldr	r3, [r3, #0]
   18e3c:	4a44      	ldr	r2, [pc, #272]	; (18f50 <prvTraceInitTraceData+0x248>)
   18e3e:	21f3      	movs	r1, #243	; 0xf3
   18e40:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   18e42:	4b28      	ldr	r3, [pc, #160]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e44:	681b      	ldr	r3, [r3, #0]
   18e46:	4a43      	ldr	r2, [pc, #268]	; (18f54 <prvTraceInitTraceData+0x24c>)
   18e48:	21f4      	movs	r1, #244	; 0xf4
   18e4a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   18e4c:	4b42      	ldr	r3, [pc, #264]	; (18f58 <prvTraceInitTraceData+0x250>)
   18e4e:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   18e50:	4b24      	ldr	r3, [pc, #144]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e52:	681b      	ldr	r3, [r3, #0]
   18e54:	22f4      	movs	r2, #244	; 0xf4
   18e56:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   18e58:	4b22      	ldr	r3, [pc, #136]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e5a:	681b      	ldr	r3, [r3, #0]
   18e5c:	22f3      	movs	r2, #243	; 0xf3
   18e5e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   18e60:	4b20      	ldr	r3, [pc, #128]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e62:	681b      	ldr	r3, [r3, #0]
   18e64:	22f2      	movs	r2, #242	; 0xf2
   18e66:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   18e68:	4b1e      	ldr	r3, [pc, #120]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e6a:	681b      	ldr	r3, [r3, #0]
   18e6c:	22f1      	movs	r2, #241	; 0xf1
   18e6e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   18e70:	4b1c      	ldr	r3, [pc, #112]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e72:	681b      	ldr	r3, [r3, #0]
   18e74:	2274      	movs	r2, #116	; 0x74
   18e76:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   18e78:	4b1a      	ldr	r3, [pc, #104]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	2273      	movs	r2, #115	; 0x73
   18e7e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   18e80:	4b18      	ldr	r3, [pc, #96]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e82:	681b      	ldr	r3, [r3, #0]
   18e84:	2272      	movs	r2, #114	; 0x72
   18e86:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   18e88:	4b16      	ldr	r3, [pc, #88]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e8a:	681b      	ldr	r3, [r3, #0]
   18e8c:	2271      	movs	r2, #113	; 0x71
   18e8e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   18e90:	4b14      	ldr	r3, [pc, #80]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e92:	681b      	ldr	r3, [r3, #0]
   18e94:	2204      	movs	r2, #4
   18e96:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   18e98:	4b12      	ldr	r3, [pc, #72]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18e9a:	681b      	ldr	r3, [r3, #0]
   18e9c:	2203      	movs	r2, #3
   18e9e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   18ea0:	4b10      	ldr	r3, [pc, #64]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18ea2:	681b      	ldr	r3, [r3, #0]
   18ea4:	2202      	movs	r2, #2
   18ea6:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   18ea8:	4b0e      	ldr	r3, [pc, #56]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18eaa:	681b      	ldr	r3, [r3, #0]
   18eac:	2201      	movs	r2, #1
   18eae:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   18eb0:	4b2a      	ldr	r3, [pc, #168]	; (18f5c <prvTraceInitTraceData+0x254>)
   18eb2:	681b      	ldr	r3, [r3, #0]
   18eb4:	2b00      	cmp	r3, #0
   18eb6:	d012      	beq.n	18ede <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18eb8:	4b0a      	ldr	r3, [pc, #40]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18eba:	681b      	ldr	r3, [r3, #0]
   18ebc:	4a15      	ldr	r2, [pc, #84]	; (18f14 <prvTraceInitTraceData+0x20c>)
   18ebe:	1898      	adds	r0, r3, r2
   18ec0:	4b26      	ldr	r3, [pc, #152]	; (18f5c <prvTraceInitTraceData+0x254>)
   18ec2:	681b      	ldr	r3, [r3, #0]
   18ec4:	2250      	movs	r2, #80	; 0x50
   18ec6:	0019      	movs	r1, r3
   18ec8:	4b14      	ldr	r3, [pc, #80]	; (18f1c <prvTraceInitTraceData+0x214>)
   18eca:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   18ecc:	4b05      	ldr	r3, [pc, #20]	; (18ee4 <prvTraceInitTraceData+0x1dc>)
   18ece:	681b      	ldr	r3, [r3, #0]
   18ed0:	4a23      	ldr	r2, [pc, #140]	; (18f60 <prvTraceInitTraceData+0x258>)
   18ed2:	2101      	movs	r1, #1
   18ed4:	5099      	str	r1, [r3, r2]
		vTraceStop();
   18ed6:	4b23      	ldr	r3, [pc, #140]	; (18f64 <prvTraceInitTraceData+0x25c>)
   18ed8:	4798      	blx	r3
   18eda:	e000      	b.n	18ede <prvTraceInitTraceData+0x1d6>
			return;
   18edc:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   18ede:	46bd      	mov	sp, r7
   18ee0:	bd80      	pop	{r7, pc}
   18ee2:	46c0      	nop			; (mov r8, r8)
   18ee4:	20000c50 	.word	0x20000c50
   18ee8:	200048b4 	.word	0x200048b4
   18eec:	e000e018 	.word	0xe000e018
   18ef0:	20005484 	.word	0x20005484
   18ef4:	00034043 	.word	0x00034043
   18ef8:	00001aa1 	.word	0x00001aa1
   18efc:	f0f0f0f0 	.word	0xf0f0f0f0
   18f00:	00017e6d 	.word	0x00017e6d
   18f04:	0000055c 	.word	0x0000055c
   18f08:	f1f1f1f1 	.word	0xf1f1f1f1
   18f0c:	00000564 	.word	0x00000564
   18f10:	f2f2f2f2 	.word	0xf2f2f2f2
   18f14:	000006bc 	.word	0x000006bc
   18f18:	0003718c 	.word	0x0003718c
   18f1c:	0001927d 	.word	0x0001927d
   18f20:	0000070c 	.word	0x0000070c
   18f24:	f3f3f3f3 	.word	0xf3f3f3f3
   18f28:	00000bc4 	.word	0x00000bc4
   18f2c:	00000bc5 	.word	0x00000bc5
   18f30:	00000bc6 	.word	0x00000bc6
   18f34:	00000bc7 	.word	0x00000bc7
   18f38:	00000bc8 	.word	0x00000bc8
   18f3c:	00000bc9 	.word	0x00000bc9
   18f40:	00000bca 	.word	0x00000bca
   18f44:	00000bcb 	.word	0x00000bcb
   18f48:	00000bcc 	.word	0x00000bcc
   18f4c:	00000bcd 	.word	0x00000bcd
   18f50:	00000bce 	.word	0x00000bce
   18f54:	00000bcf 	.word	0x00000bcf
   18f58:	0001800d 	.word	0x0001800d
   18f5c:	20000bb0 	.word	0x20000bb0
   18f60:	000006b4 	.word	0x000006b4
   18f64:	00018275 	.word	0x00018275

00018f68 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   18f68:	b580      	push	{r7, lr}
   18f6a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   18f6c:	4b10      	ldr	r3, [pc, #64]	; (18fb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18f6e:	681b      	ldr	r3, [r3, #0]
   18f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18f72:	2b00      	cmp	r3, #0
   18f74:	d101      	bne.n	18f7a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   18f76:	2300      	movs	r3, #0
   18f78:	e017      	b.n	18faa <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18f7a:	4b0d      	ldr	r3, [pc, #52]	; (18fb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18f7c:	681b      	ldr	r3, [r3, #0]
   18f7e:	69da      	ldr	r2, [r3, #28]
   18f80:	232c      	movs	r3, #44	; 0x2c
   18f82:	33ff      	adds	r3, #255	; 0xff
   18f84:	429a      	cmp	r2, r3
   18f86:	d905      	bls.n	18f94 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   18f88:	4b0a      	ldr	r3, [pc, #40]	; (18fb4 <prvTraceNextFreeEventBufferSlot+0x4c>)
   18f8a:	0018      	movs	r0, r3
   18f8c:	4b0a      	ldr	r3, [pc, #40]	; (18fb8 <prvTraceNextFreeEventBufferSlot+0x50>)
   18f8e:	4798      	blx	r3
		return NULL;
   18f90:	2300      	movs	r3, #0
   18f92:	e00a      	b.n	18faa <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   18f94:	4b06      	ldr	r3, [pc, #24]	; (18fb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18f96:	681a      	ldr	r2, [r3, #0]
   18f98:	4b05      	ldr	r3, [pc, #20]	; (18fb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18f9a:	681b      	ldr	r3, [r3, #0]
   18f9c:	69db      	ldr	r3, [r3, #28]
   18f9e:	009b      	lsls	r3, r3, #2
   18fa0:	21e2      	movs	r1, #226	; 0xe2
   18fa2:	00c9      	lsls	r1, r1, #3
   18fa4:	468c      	mov	ip, r1
   18fa6:	4463      	add	r3, ip
   18fa8:	18d3      	adds	r3, r2, r3
}
   18faa:	0018      	movs	r0, r3
   18fac:	46bd      	mov	sp, r7
   18fae:	bd80      	pop	{r7, pc}
   18fb0:	20000c50 	.word	0x20000c50
   18fb4:	000371a0 	.word	0x000371a0
   18fb8:	000193b1 	.word	0x000193b1

00018fbc <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   18fbc:	b580      	push	{r7, lr}
   18fbe:	b082      	sub	sp, #8
   18fc0:	af00      	add	r7, sp, #0
   18fc2:	0002      	movs	r2, r0
   18fc4:	1dfb      	adds	r3, r7, #7
   18fc6:	701a      	strb	r2, [r3, #0]
   18fc8:	1dbb      	adds	r3, r7, #6
   18fca:	1c0a      	adds	r2, r1, #0
   18fcc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18fce:	1dbb      	adds	r3, r7, #6
   18fd0:	781b      	ldrb	r3, [r3, #0]
   18fd2:	2b08      	cmp	r3, #8
   18fd4:	d905      	bls.n	18fe2 <uiIndexOfObject+0x26>
   18fd6:	4b2a      	ldr	r3, [pc, #168]	; (19080 <uiIndexOfObject+0xc4>)
   18fd8:	0018      	movs	r0, r3
   18fda:	4b2a      	ldr	r3, [pc, #168]	; (19084 <uiIndexOfObject+0xc8>)
   18fdc:	4798      	blx	r3
   18fde:	2300      	movs	r3, #0
   18fe0:	e049      	b.n	19076 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   18fe2:	1dfb      	adds	r3, r7, #7
   18fe4:	781b      	ldrb	r3, [r3, #0]
   18fe6:	2b00      	cmp	r3, #0
   18fe8:	d00b      	beq.n	19002 <uiIndexOfObject+0x46>
   18fea:	4b27      	ldr	r3, [pc, #156]	; (19088 <uiIndexOfObject+0xcc>)
   18fec:	681a      	ldr	r2, [r3, #0]
   18fee:	1dbb      	adds	r3, r7, #6
   18ff0:	781b      	ldrb	r3, [r3, #0]
   18ff2:	2164      	movs	r1, #100	; 0x64
   18ff4:	18d3      	adds	r3, r2, r3
   18ff6:	185b      	adds	r3, r3, r1
   18ff8:	781b      	ldrb	r3, [r3, #0]
   18ffa:	1dfa      	adds	r2, r7, #7
   18ffc:	7812      	ldrb	r2, [r2, #0]
   18ffe:	429a      	cmp	r2, r3
   19000:	d905      	bls.n	1900e <uiIndexOfObject+0x52>
   19002:	4b22      	ldr	r3, [pc, #136]	; (1908c <uiIndexOfObject+0xd0>)
   19004:	0018      	movs	r0, r3
   19006:	4b1f      	ldr	r3, [pc, #124]	; (19084 <uiIndexOfObject+0xc8>)
   19008:	4798      	blx	r3
   1900a:	2300      	movs	r3, #0
   1900c:	e033      	b.n	19076 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1900e:	1dbb      	adds	r3, r7, #6
   19010:	781b      	ldrb	r3, [r3, #0]
   19012:	2b08      	cmp	r3, #8
   19014:	d82a      	bhi.n	1906c <uiIndexOfObject+0xb0>
   19016:	1dfb      	adds	r3, r7, #7
   19018:	781b      	ldrb	r3, [r3, #0]
   1901a:	2b00      	cmp	r3, #0
   1901c:	d026      	beq.n	1906c <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1901e:	4b1a      	ldr	r3, [pc, #104]	; (19088 <uiIndexOfObject+0xcc>)
   19020:	681a      	ldr	r2, [r3, #0]
   19022:	1dbb      	adds	r3, r7, #6
   19024:	781b      	ldrb	r3, [r3, #0]
   19026:	2164      	movs	r1, #100	; 0x64
   19028:	18d3      	adds	r3, r2, r3
   1902a:	185b      	adds	r3, r3, r1
   1902c:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1902e:	1dfa      	adds	r2, r7, #7
   19030:	7812      	ldrb	r2, [r2, #0]
   19032:	429a      	cmp	r2, r3
   19034:	d81a      	bhi.n	1906c <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19036:	4b14      	ldr	r3, [pc, #80]	; (19088 <uiIndexOfObject+0xcc>)
   19038:	681a      	ldr	r2, [r3, #0]
   1903a:	1dbb      	adds	r3, r7, #6
   1903c:	781b      	ldrb	r3, [r3, #0]
   1903e:	3340      	adds	r3, #64	; 0x40
   19040:	005b      	lsls	r3, r3, #1
   19042:	18d3      	adds	r3, r2, r3
   19044:	3308      	adds	r3, #8
   19046:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19048:	4b0f      	ldr	r3, [pc, #60]	; (19088 <uiIndexOfObject+0xcc>)
   1904a:	6819      	ldr	r1, [r3, #0]
   1904c:	1dbb      	adds	r3, r7, #6
   1904e:	781b      	ldrb	r3, [r3, #0]
   19050:	207c      	movs	r0, #124	; 0x7c
   19052:	18cb      	adds	r3, r1, r3
   19054:	181b      	adds	r3, r3, r0
   19056:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19058:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1905a:	1df9      	adds	r1, r7, #7
   1905c:	7809      	ldrb	r1, [r1, #0]
   1905e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19060:	b289      	uxth	r1, r1
   19062:	434b      	muls	r3, r1
   19064:	b29b      	uxth	r3, r3
   19066:	18d3      	adds	r3, r2, r3
   19068:	b29b      	uxth	r3, r3
   1906a:	e004      	b.n	19076 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1906c:	4b08      	ldr	r3, [pc, #32]	; (19090 <uiIndexOfObject+0xd4>)
   1906e:	0018      	movs	r0, r3
   19070:	4b04      	ldr	r3, [pc, #16]	; (19084 <uiIndexOfObject+0xc8>)
   19072:	4798      	blx	r3
	return 0;
   19074:	2300      	movs	r3, #0
}
   19076:	0018      	movs	r0, r3
   19078:	46bd      	mov	sp, r7
   1907a:	b002      	add	sp, #8
   1907c:	bd80      	pop	{r7, pc}
   1907e:	46c0      	nop			; (mov r8, r8)
   19080:	000371c8 	.word	0x000371c8
   19084:	000193b1 	.word	0x000193b1
   19088:	20000c50 	.word	0x20000c50
   1908c:	00037208 	.word	0x00037208
   19090:	00037248 	.word	0x00037248

00019094 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19094:	b580      	push	{r7, lr}
   19096:	b088      	sub	sp, #32
   19098:	af00      	add	r7, sp, #0
   1909a:	0002      	movs	r2, r0
   1909c:	1dfb      	adds	r3, r7, #7
   1909e:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   190a0:	4b5a      	ldr	r3, [pc, #360]	; (1920c <prvTraceGetObjectHandle+0x178>)
   190a2:	681b      	ldr	r3, [r3, #0]
   190a4:	2b00      	cmp	r3, #0
   190a6:	d105      	bne.n	190b4 <prvTraceGetObjectHandle+0x20>
   190a8:	4b59      	ldr	r3, [pc, #356]	; (19210 <prvTraceGetObjectHandle+0x17c>)
   190aa:	0018      	movs	r0, r3
   190ac:	4b59      	ldr	r3, [pc, #356]	; (19214 <prvTraceGetObjectHandle+0x180>)
   190ae:	4798      	blx	r3
   190b0:	2300      	movs	r3, #0
   190b2:	e0a7      	b.n	19204 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   190b4:	1dfb      	adds	r3, r7, #7
   190b6:	781b      	ldrb	r3, [r3, #0]
   190b8:	2b08      	cmp	r3, #8
   190ba:	d905      	bls.n	190c8 <prvTraceGetObjectHandle+0x34>
   190bc:	4b56      	ldr	r3, [pc, #344]	; (19218 <prvTraceGetObjectHandle+0x184>)
   190be:	0018      	movs	r0, r3
   190c0:	4b54      	ldr	r3, [pc, #336]	; (19214 <prvTraceGetObjectHandle+0x180>)
   190c2:	4798      	blx	r3
   190c4:	2300      	movs	r3, #0
   190c6:	e09d      	b.n	19204 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   190c8:	f3ef 8310 	mrs	r3, PRIMASK
   190cc:	60fb      	str	r3, [r7, #12]
  return(result);
   190ce:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   190d0:	61bb      	str	r3, [r7, #24]
   190d2:	2301      	movs	r3, #1
   190d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   190d6:	693b      	ldr	r3, [r7, #16]
   190d8:	f383 8810 	msr	PRIMASK, r3
   190dc:	4b4f      	ldr	r3, [pc, #316]	; (1921c <prvTraceGetObjectHandle+0x188>)
   190de:	681b      	ldr	r3, [r3, #0]
   190e0:	1c5a      	adds	r2, r3, #1
   190e2:	4b4e      	ldr	r3, [pc, #312]	; (1921c <prvTraceGetObjectHandle+0x188>)
   190e4:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   190e6:	1dfb      	adds	r3, r7, #7
   190e8:	781a      	ldrb	r2, [r3, #0]
   190ea:	4b4d      	ldr	r3, [pc, #308]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   190ec:	0052      	lsls	r2, r2, #1
   190ee:	5ad3      	ldrh	r3, [r2, r3]
   190f0:	001a      	movs	r2, r3
   190f2:	4b4c      	ldr	r3, [pc, #304]	; (19224 <prvTraceGetObjectHandle+0x190>)
   190f4:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   190f6:	4b4b      	ldr	r3, [pc, #300]	; (19224 <prvTraceGetObjectHandle+0x190>)
   190f8:	681b      	ldr	r3, [r3, #0]
   190fa:	4a49      	ldr	r2, [pc, #292]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   190fc:	2148      	movs	r1, #72	; 0x48
   190fe:	18d3      	adds	r3, r2, r3
   19100:	185b      	adds	r3, r3, r1
   19102:	781b      	ldrb	r3, [r3, #0]
   19104:	2b00      	cmp	r3, #0
   19106:	d117      	bne.n	19138 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19108:	4b46      	ldr	r3, [pc, #280]	; (19224 <prvTraceGetObjectHandle+0x190>)
   1910a:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1910c:	4b45      	ldr	r3, [pc, #276]	; (19224 <prvTraceGetObjectHandle+0x190>)
   1910e:	681b      	ldr	r3, [r3, #0]
   19110:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   19112:	1dfb      	adds	r3, r7, #7
   19114:	781b      	ldrb	r3, [r3, #0]
   19116:	4842      	ldr	r0, [pc, #264]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   19118:	3308      	adds	r3, #8
   1911a:	005b      	lsls	r3, r3, #1
   1911c:	18c3      	adds	r3, r0, r3
   1911e:	3302      	adds	r3, #2
   19120:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19122:	b2db      	uxtb	r3, r3
   19124:	1acb      	subs	r3, r1, r3
   19126:	b2db      	uxtb	r3, r3
   19128:	3301      	adds	r3, #1
   1912a:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1912c:	4b3c      	ldr	r3, [pc, #240]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   1912e:	2148      	movs	r1, #72	; 0x48
   19130:	189b      	adds	r3, r3, r2
   19132:	185b      	adds	r3, r3, r1
   19134:	1c02      	adds	r2, r0, #0
   19136:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19138:	4b3a      	ldr	r3, [pc, #232]	; (19224 <prvTraceGetObjectHandle+0x190>)
   1913a:	681a      	ldr	r2, [r3, #0]
   1913c:	231f      	movs	r3, #31
   1913e:	18fb      	adds	r3, r7, r3
   19140:	4937      	ldr	r1, [pc, #220]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   19142:	2048      	movs	r0, #72	; 0x48
   19144:	188a      	adds	r2, r1, r2
   19146:	1812      	adds	r2, r2, r0
   19148:	7812      	ldrb	r2, [r2, #0]
   1914a:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1914c:	1dfb      	adds	r3, r7, #7
   1914e:	781a      	ldrb	r2, [r3, #0]
   19150:	4b33      	ldr	r3, [pc, #204]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   19152:	0052      	lsls	r2, r2, #1
   19154:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19156:	1dfb      	adds	r3, r7, #7
   19158:	781b      	ldrb	r3, [r3, #0]
   1915a:	4931      	ldr	r1, [pc, #196]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   1915c:	3310      	adds	r3, #16
   1915e:	005b      	lsls	r3, r3, #1
   19160:	18cb      	adds	r3, r1, r3
   19162:	3304      	adds	r3, #4
   19164:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19166:	429a      	cmp	r2, r3
   19168:	d90d      	bls.n	19186 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1916a:	1dfb      	adds	r3, r7, #7
   1916c:	781b      	ldrb	r3, [r3, #0]
   1916e:	0018      	movs	r0, r3
   19170:	4b2d      	ldr	r3, [pc, #180]	; (19228 <prvTraceGetObjectHandle+0x194>)
   19172:	4798      	blx	r3
   19174:	0003      	movs	r3, r0
   19176:	0018      	movs	r0, r3
   19178:	4b26      	ldr	r3, [pc, #152]	; (19214 <prvTraceGetObjectHandle+0x180>)
   1917a:	4798      	blx	r3
		handle = 0;
   1917c:	231f      	movs	r3, #31
   1917e:	18fb      	adds	r3, r7, r3
   19180:	2200      	movs	r2, #0
   19182:	701a      	strb	r2, [r3, #0]
   19184:	e031      	b.n	191ea <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19186:	1dfb      	adds	r3, r7, #7
   19188:	781b      	ldrb	r3, [r3, #0]
   1918a:	4a25      	ldr	r2, [pc, #148]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   1918c:	0059      	lsls	r1, r3, #1
   1918e:	5a8a      	ldrh	r2, [r1, r2]
   19190:	3201      	adds	r2, #1
   19192:	b291      	uxth	r1, r2
   19194:	4a22      	ldr	r2, [pc, #136]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   19196:	005b      	lsls	r3, r3, #1
   19198:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1919a:	1dfb      	adds	r3, r7, #7
   1919c:	781a      	ldrb	r2, [r3, #0]
   1919e:	4b20      	ldr	r3, [pc, #128]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   191a0:	0052      	lsls	r2, r2, #1
   191a2:	5ad3      	ldrh	r3, [r2, r3]
   191a4:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   191a6:	1dfb      	adds	r3, r7, #7
   191a8:	781b      	ldrb	r3, [r3, #0]
   191aa:	4a1d      	ldr	r2, [pc, #116]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   191ac:	3308      	adds	r3, #8
   191ae:	005b      	lsls	r3, r3, #1
   191b0:	18d3      	adds	r3, r2, r3
   191b2:	3302      	adds	r3, #2
   191b4:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   191b6:	1acb      	subs	r3, r1, r3
   191b8:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   191ba:	1dfb      	adds	r3, r7, #7
   191bc:	781b      	ldrb	r3, [r3, #0]
   191be:	4a18      	ldr	r2, [pc, #96]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   191c0:	3318      	adds	r3, #24
   191c2:	005b      	lsls	r3, r3, #1
   191c4:	18d3      	adds	r3, r2, r3
   191c6:	3306      	adds	r3, #6
   191c8:	881b      	ldrh	r3, [r3, #0]
   191ca:	001a      	movs	r2, r3
		if (hndCount >
   191cc:	697b      	ldr	r3, [r7, #20]
   191ce:	429a      	cmp	r2, r3
   191d0:	da0b      	bge.n	191ea <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   191d2:	1dfb      	adds	r3, r7, #7
   191d4:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   191d6:	697a      	ldr	r2, [r7, #20]
   191d8:	b2d2      	uxtb	r2, r2
   191da:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   191dc:	4a10      	ldr	r2, [pc, #64]	; (19220 <prvTraceGetObjectHandle+0x18c>)
   191de:	3318      	adds	r3, #24
   191e0:	005b      	lsls	r3, r3, #1
   191e2:	18d3      	adds	r3, r2, r3
   191e4:	3306      	adds	r3, #6
   191e6:	1c0a      	adds	r2, r1, #0
   191e8:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   191ea:	4b0c      	ldr	r3, [pc, #48]	; (1921c <prvTraceGetObjectHandle+0x188>)
   191ec:	681b      	ldr	r3, [r3, #0]
   191ee:	1e5a      	subs	r2, r3, #1
   191f0:	4b0a      	ldr	r3, [pc, #40]	; (1921c <prvTraceGetObjectHandle+0x188>)
   191f2:	601a      	str	r2, [r3, #0]
   191f4:	69bb      	ldr	r3, [r7, #24]
   191f6:	60bb      	str	r3, [r7, #8]
   191f8:	68bb      	ldr	r3, [r7, #8]
   191fa:	f383 8810 	msr	PRIMASK, r3

	return handle;
   191fe:	231f      	movs	r3, #31
   19200:	18fb      	adds	r3, r7, r3
   19202:	781b      	ldrb	r3, [r3, #0]
}
   19204:	0018      	movs	r0, r3
   19206:	46bd      	mov	sp, r7
   19208:	b008      	add	sp, #32
   1920a:	bd80      	pop	{r7, pc}
   1920c:	20000c50 	.word	0x20000c50
   19210:	000366a8 	.word	0x000366a8
   19214:	000193b1 	.word	0x000193b1
   19218:	00037288 	.word	0x00037288
   1921c:	20000ba8 	.word	0x20000ba8
   19220:	20000bc0 	.word	0x20000bc0
   19224:	20000c54 	.word	0x20000c54
   19228:	000180d1 	.word	0x000180d1

0001922c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1922c:	b590      	push	{r4, r7, lr}
   1922e:	b085      	sub	sp, #20
   19230:	af00      	add	r7, sp, #0
   19232:	0002      	movs	r2, r0
   19234:	1dfb      	adds	r3, r7, #7
   19236:	701a      	strb	r2, [r3, #0]
   19238:	1dbb      	adds	r3, r7, #6
   1923a:	1c0a      	adds	r2, r1, #0
   1923c:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1923e:	230e      	movs	r3, #14
   19240:	18fc      	adds	r4, r7, r3
   19242:	1dfb      	adds	r3, r7, #7
   19244:	781a      	ldrb	r2, [r3, #0]
   19246:	1dbb      	adds	r3, r7, #6
   19248:	781b      	ldrb	r3, [r3, #0]
   1924a:	0011      	movs	r1, r2
   1924c:	0018      	movs	r0, r3
   1924e:	4b09      	ldr	r3, [pc, #36]	; (19274 <prvMarkObjectAsUsed+0x48>)
   19250:	4798      	blx	r3
   19252:	0003      	movs	r3, r0
   19254:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19256:	4b08      	ldr	r3, [pc, #32]	; (19278 <prvMarkObjectAsUsed+0x4c>)
   19258:	681a      	ldr	r2, [r3, #0]
   1925a:	230e      	movs	r3, #14
   1925c:	18fb      	adds	r3, r7, r3
   1925e:	881b      	ldrh	r3, [r3, #0]
   19260:	219c      	movs	r1, #156	; 0x9c
   19262:	18d3      	adds	r3, r2, r3
   19264:	185b      	adds	r3, r3, r1
   19266:	2201      	movs	r2, #1
   19268:	701a      	strb	r2, [r3, #0]
}
   1926a:	46c0      	nop			; (mov r8, r8)
   1926c:	46bd      	mov	sp, r7
   1926e:	b005      	add	sp, #20
   19270:	bd90      	pop	{r4, r7, pc}
   19272:	46c0      	nop			; (mov r8, r8)
   19274:	00018fbd 	.word	0x00018fbd
   19278:	20000c50 	.word	0x20000c50

0001927c <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1927c:	b580      	push	{r7, lr}
   1927e:	b086      	sub	sp, #24
   19280:	af00      	add	r7, sp, #0
   19282:	60f8      	str	r0, [r7, #12]
   19284:	60b9      	str	r1, [r7, #8]
   19286:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19288:	2300      	movs	r3, #0
   1928a:	617b      	str	r3, [r7, #20]
   1928c:	e010      	b.n	192b0 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1928e:	68fa      	ldr	r2, [r7, #12]
   19290:	697b      	ldr	r3, [r7, #20]
   19292:	18d3      	adds	r3, r2, r3
   19294:	68b9      	ldr	r1, [r7, #8]
   19296:	697a      	ldr	r2, [r7, #20]
   19298:	188a      	adds	r2, r1, r2
   1929a:	7812      	ldrb	r2, [r2, #0]
   1929c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1929e:	68ba      	ldr	r2, [r7, #8]
   192a0:	697b      	ldr	r3, [r7, #20]
   192a2:	18d3      	adds	r3, r2, r3
   192a4:	781b      	ldrb	r3, [r3, #0]
   192a6:	2b00      	cmp	r3, #0
   192a8:	d007      	beq.n	192ba <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   192aa:	697b      	ldr	r3, [r7, #20]
   192ac:	3301      	adds	r3, #1
   192ae:	617b      	str	r3, [r7, #20]
   192b0:	697a      	ldr	r2, [r7, #20]
   192b2:	687b      	ldr	r3, [r7, #4]
   192b4:	429a      	cmp	r2, r3
   192b6:	d3ea      	bcc.n	1928e <prvStrncpy+0x12>
			break;
	}
}
   192b8:	e000      	b.n	192bc <prvStrncpy+0x40>
			break;
   192ba:	46c0      	nop			; (mov r8, r8)
}
   192bc:	46c0      	nop			; (mov r8, r8)
   192be:	46bd      	mov	sp, r7
   192c0:	b006      	add	sp, #24
   192c2:	bd80      	pop	{r7, pc}

000192c4 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   192c4:	b580      	push	{r7, lr}
   192c6:	b082      	sub	sp, #8
   192c8:	af00      	add	r7, sp, #0
   192ca:	603a      	str	r2, [r7, #0]
   192cc:	1dfb      	adds	r3, r7, #7
   192ce:	1c02      	adds	r2, r0, #0
   192d0:	701a      	strb	r2, [r3, #0]
   192d2:	1dbb      	adds	r3, r7, #6
   192d4:	1c0a      	adds	r2, r1, #0
   192d6:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   192d8:	683b      	ldr	r3, [r7, #0]
   192da:	2b00      	cmp	r3, #0
   192dc:	d104      	bne.n	192e8 <prvTraceSetObjectName+0x24>
   192de:	4b2a      	ldr	r3, [pc, #168]	; (19388 <prvTraceSetObjectName+0xc4>)
   192e0:	0018      	movs	r0, r3
   192e2:	4b2a      	ldr	r3, [pc, #168]	; (1938c <prvTraceSetObjectName+0xc8>)
   192e4:	4798      	blx	r3
   192e6:	e04b      	b.n	19380 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   192e8:	1dfb      	adds	r3, r7, #7
   192ea:	781b      	ldrb	r3, [r3, #0]
   192ec:	2b08      	cmp	r3, #8
   192ee:	d904      	bls.n	192fa <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   192f0:	4b27      	ldr	r3, [pc, #156]	; (19390 <prvTraceSetObjectName+0xcc>)
   192f2:	0018      	movs	r0, r3
   192f4:	4b25      	ldr	r3, [pc, #148]	; (1938c <prvTraceSetObjectName+0xc8>)
   192f6:	4798      	blx	r3
		return;
   192f8:	e042      	b.n	19380 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   192fa:	1dbb      	adds	r3, r7, #6
   192fc:	781b      	ldrb	r3, [r3, #0]
   192fe:	2b00      	cmp	r3, #0
   19300:	d104      	bne.n	1930c <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   19302:	4b24      	ldr	r3, [pc, #144]	; (19394 <prvTraceSetObjectName+0xd0>)
   19304:	0018      	movs	r0, r3
   19306:	4b21      	ldr	r3, [pc, #132]	; (1938c <prvTraceSetObjectName+0xc8>)
   19308:	4798      	blx	r3
		return;
   1930a:	e039      	b.n	19380 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1930c:	4b22      	ldr	r3, [pc, #136]	; (19398 <prvTraceSetObjectName+0xd4>)
   1930e:	681a      	ldr	r2, [r3, #0]
   19310:	1dfb      	adds	r3, r7, #7
   19312:	781b      	ldrb	r3, [r3, #0]
   19314:	2164      	movs	r1, #100	; 0x64
   19316:	18d3      	adds	r3, r2, r3
   19318:	185b      	adds	r3, r3, r1
   1931a:	781b      	ldrb	r3, [r3, #0]
   1931c:	1dba      	adds	r2, r7, #6
   1931e:	7812      	ldrb	r2, [r2, #0]
   19320:	429a      	cmp	r2, r3
   19322:	d909      	bls.n	19338 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19324:	1dfb      	adds	r3, r7, #7
   19326:	781b      	ldrb	r3, [r3, #0]
   19328:	0018      	movs	r0, r3
   1932a:	4b1c      	ldr	r3, [pc, #112]	; (1939c <prvTraceSetObjectName+0xd8>)
   1932c:	4798      	blx	r3
   1932e:	0003      	movs	r3, r0
   19330:	0018      	movs	r0, r3
   19332:	4b16      	ldr	r3, [pc, #88]	; (1938c <prvTraceSetObjectName+0xc8>)
   19334:	4798      	blx	r3
   19336:	e023      	b.n	19380 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19338:	1dfb      	adds	r3, r7, #7
   1933a:	781a      	ldrb	r2, [r3, #0]
   1933c:	1dbb      	adds	r3, r7, #6
   1933e:	781b      	ldrb	r3, [r3, #0]
   19340:	0011      	movs	r1, r2
   19342:	0018      	movs	r0, r3
   19344:	4b16      	ldr	r3, [pc, #88]	; (193a0 <prvTraceSetObjectName+0xdc>)
   19346:	4798      	blx	r3
   19348:	0003      	movs	r3, r0
   1934a:	001a      	movs	r2, r3
   1934c:	4b15      	ldr	r3, [pc, #84]	; (193a4 <prvTraceSetObjectName+0xe0>)
   1934e:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   19350:	4b15      	ldr	r3, [pc, #84]	; (193a8 <prvTraceSetObjectName+0xe4>)
   19352:	681b      	ldr	r3, [r3, #0]
   19354:	2b00      	cmp	r3, #0
   19356:	d113      	bne.n	19380 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19358:	4b0f      	ldr	r3, [pc, #60]	; (19398 <prvTraceSetObjectName+0xd4>)
   1935a:	681a      	ldr	r2, [r3, #0]
   1935c:	4b11      	ldr	r3, [pc, #68]	; (193a4 <prvTraceSetObjectName+0xe0>)
   1935e:	881b      	ldrh	r3, [r3, #0]
   19360:	3398      	adds	r3, #152	; 0x98
   19362:	18d3      	adds	r3, r2, r3
   19364:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19366:	4b0c      	ldr	r3, [pc, #48]	; (19398 <prvTraceSetObjectName+0xd4>)
   19368:	681a      	ldr	r2, [r3, #0]
   1936a:	1dfb      	adds	r3, r7, #7
   1936c:	781b      	ldrb	r3, [r3, #0]
   1936e:	2170      	movs	r1, #112	; 0x70
   19370:	18d3      	adds	r3, r2, r3
   19372:	185b      	adds	r3, r3, r1
   19374:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19376:	001a      	movs	r2, r3
   19378:	683b      	ldr	r3, [r7, #0]
   1937a:	0019      	movs	r1, r3
   1937c:	4b0b      	ldr	r3, [pc, #44]	; (193ac <prvTraceSetObjectName+0xe8>)
   1937e:	4798      	blx	r3
		}
	}
}
   19380:	46bd      	mov	sp, r7
   19382:	b002      	add	sp, #8
   19384:	bd80      	pop	{r7, pc}
   19386:	46c0      	nop			; (mov r8, r8)
   19388:	0003738c 	.word	0x0003738c
   1938c:	000193b1 	.word	0x000193b1
   19390:	000373c0 	.word	0x000373c0
   19394:	000373f0 	.word	0x000373f0
   19398:	20000c50 	.word	0x20000c50
   1939c:	000180d1 	.word	0x000180d1
   193a0:	00018fbd 	.word	0x00018fbd
   193a4:	20000c58 	.word	0x20000c58
   193a8:	20000bb0 	.word	0x20000bb0
   193ac:	0001927d 	.word	0x0001927d

000193b0 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   193b0:	b580      	push	{r7, lr}
   193b2:	b082      	sub	sp, #8
   193b4:	af00      	add	r7, sp, #0
   193b6:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   193b8:	4b11      	ldr	r3, [pc, #68]	; (19400 <prvTraceError+0x50>)
   193ba:	681b      	ldr	r3, [r3, #0]
   193bc:	2b00      	cmp	r3, #0
   193be:	d001      	beq.n	193c4 <prvTraceError+0x14>
	{
		vTraceStop();
   193c0:	4b10      	ldr	r3, [pc, #64]	; (19404 <prvTraceError+0x54>)
   193c2:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   193c4:	4b10      	ldr	r3, [pc, #64]	; (19408 <prvTraceError+0x58>)
   193c6:	681b      	ldr	r3, [r3, #0]
   193c8:	2b00      	cmp	r3, #0
   193ca:	d115      	bne.n	193f8 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   193cc:	4b0e      	ldr	r3, [pc, #56]	; (19408 <prvTraceError+0x58>)
   193ce:	687a      	ldr	r2, [r7, #4]
   193d0:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   193d2:	4b0b      	ldr	r3, [pc, #44]	; (19400 <prvTraceError+0x50>)
   193d4:	681b      	ldr	r3, [r3, #0]
   193d6:	2b00      	cmp	r3, #0
   193d8:	d00e      	beq.n	193f8 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   193da:	4b09      	ldr	r3, [pc, #36]	; (19400 <prvTraceError+0x50>)
   193dc:	681b      	ldr	r3, [r3, #0]
   193de:	4a0b      	ldr	r2, [pc, #44]	; (1940c <prvTraceError+0x5c>)
   193e0:	1898      	adds	r0, r3, r2
   193e2:	4b09      	ldr	r3, [pc, #36]	; (19408 <prvTraceError+0x58>)
   193e4:	681b      	ldr	r3, [r3, #0]
   193e6:	2250      	movs	r2, #80	; 0x50
   193e8:	0019      	movs	r1, r3
   193ea:	4b09      	ldr	r3, [pc, #36]	; (19410 <prvTraceError+0x60>)
   193ec:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   193ee:	4b04      	ldr	r3, [pc, #16]	; (19400 <prvTraceError+0x50>)
   193f0:	681b      	ldr	r3, [r3, #0]
   193f2:	4a08      	ldr	r2, [pc, #32]	; (19414 <prvTraceError+0x64>)
   193f4:	2101      	movs	r1, #1
   193f6:	5099      	str	r1, [r3, r2]
		}
	}
}
   193f8:	46c0      	nop			; (mov r8, r8)
   193fa:	46bd      	mov	sp, r7
   193fc:	b002      	add	sp, #8
   193fe:	bd80      	pop	{r7, pc}
   19400:	20000c50 	.word	0x20000c50
   19404:	00018275 	.word	0x00018275
   19408:	20000bb0 	.word	0x20000bb0
   1940c:	000006bc 	.word	0x000006bc
   19410:	0001927d 	.word	0x0001927d
   19414:	000006b4 	.word	0x000006b4

00019418 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19418:	b580      	push	{r7, lr}
   1941a:	b086      	sub	sp, #24
   1941c:	af00      	add	r7, sp, #0
   1941e:	0002      	movs	r2, r0
   19420:	1dfb      	adds	r3, r7, #7
   19422:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19424:	2300      	movs	r3, #0
   19426:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19428:	2300      	movs	r3, #0
   1942a:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1942c:	1dfb      	adds	r3, r7, #7
   1942e:	781b      	ldrb	r3, [r3, #0]
   19430:	2b00      	cmp	r3, #0
   19432:	d000      	beq.n	19436 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19434:	e089      	b.n	1954a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19436:	4b49      	ldr	r3, [pc, #292]	; (1955c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19438:	0018      	movs	r0, r3
   1943a:	4b49      	ldr	r3, [pc, #292]	; (19560 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1943c:	4798      	blx	r3
   1943e:	e08a      	b.n	19556 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   19440:	4b48      	ldr	r3, [pc, #288]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19442:	681b      	ldr	r3, [r3, #0]
   19444:	69da      	ldr	r2, [r3, #28]
   19446:	697b      	ldr	r3, [r7, #20]
   19448:	18d3      	adds	r3, r2, r3
   1944a:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1944c:	4b45      	ldr	r3, [pc, #276]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1944e:	6819      	ldr	r1, [r3, #0]
   19450:	693b      	ldr	r3, [r7, #16]
   19452:	009a      	lsls	r2, r3, #2
   19454:	23e2      	movs	r3, #226	; 0xe2
   19456:	00db      	lsls	r3, r3, #3
   19458:	188a      	adds	r2, r1, r2
   1945a:	18d3      	adds	r3, r2, r3
   1945c:	781b      	ldrb	r3, [r3, #0]
   1945e:	2b98      	cmp	r3, #152	; 0x98
   19460:	d934      	bls.n	194cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   19462:	4b40      	ldr	r3, [pc, #256]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19464:	6819      	ldr	r1, [r3, #0]
   19466:	693b      	ldr	r3, [r7, #16]
   19468:	009a      	lsls	r2, r3, #2
   1946a:	23e2      	movs	r3, #226	; 0xe2
   1946c:	00db      	lsls	r3, r3, #3
   1946e:	188a      	adds	r2, r1, r2
   19470:	18d3      	adds	r3, r2, r3
   19472:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19474:	2ba7      	cmp	r3, #167	; 0xa7
   19476:	d829      	bhi.n	194cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   19478:	4b3a      	ldr	r3, [pc, #232]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1947a:	6819      	ldr	r1, [r3, #0]
   1947c:	693b      	ldr	r3, [r7, #16]
   1947e:	009a      	lsls	r2, r3, #2
   19480:	23e2      	movs	r3, #226	; 0xe2
   19482:	00db      	lsls	r3, r3, #3
   19484:	188a      	adds	r2, r1, r2
   19486:	18d3      	adds	r3, r2, r3
   19488:	781a      	ldrb	r2, [r3, #0]
   1948a:	230f      	movs	r3, #15
   1948c:	18fb      	adds	r3, r7, r3
   1948e:	3268      	adds	r2, #104	; 0x68
   19490:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19492:	230f      	movs	r3, #15
   19494:	18fb      	adds	r3, r7, r3
   19496:	781a      	ldrb	r2, [r3, #0]
   19498:	693b      	ldr	r3, [r7, #16]
   1949a:	18d2      	adds	r2, r2, r3
   1949c:	4b31      	ldr	r3, [pc, #196]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1949e:	681b      	ldr	r3, [r3, #0]
   194a0:	699b      	ldr	r3, [r3, #24]
   194a2:	429a      	cmp	r2, r3
   194a4:	d24d      	bcs.n	19542 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   194a6:	4b2f      	ldr	r3, [pc, #188]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   194a8:	681a      	ldr	r2, [r3, #0]
   194aa:	693b      	ldr	r3, [r7, #16]
   194ac:	009b      	lsls	r3, r3, #2
   194ae:	21e2      	movs	r1, #226	; 0xe2
   194b0:	00c9      	lsls	r1, r1, #3
   194b2:	468c      	mov	ip, r1
   194b4:	4463      	add	r3, ip
   194b6:	18d0      	adds	r0, r2, r3
   194b8:	230f      	movs	r3, #15
   194ba:	18fb      	adds	r3, r7, r3
   194bc:	781b      	ldrb	r3, [r3, #0]
   194be:	3301      	adds	r3, #1
   194c0:	009b      	lsls	r3, r3, #2
   194c2:	001a      	movs	r2, r3
   194c4:	2100      	movs	r1, #0
   194c6:	4b28      	ldr	r3, [pc, #160]	; (19568 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   194c8:	4798      	blx	r3
		{
   194ca:	e03a      	b.n	19542 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   194cc:	4b25      	ldr	r3, [pc, #148]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   194ce:	6819      	ldr	r1, [r3, #0]
   194d0:	693b      	ldr	r3, [r7, #16]
   194d2:	009a      	lsls	r2, r3, #2
   194d4:	23e2      	movs	r3, #226	; 0xe2
   194d6:	00db      	lsls	r3, r3, #3
   194d8:	188a      	adds	r2, r1, r2
   194da:	18d3      	adds	r3, r2, r3
   194dc:	781b      	ldrb	r3, [r3, #0]
   194de:	2b01      	cmp	r3, #1
   194e0:	d130      	bne.n	19544 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   194e2:	693b      	ldr	r3, [r7, #16]
   194e4:	1c5a      	adds	r2, r3, #1
   194e6:	4b1f      	ldr	r3, [pc, #124]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   194e8:	681b      	ldr	r3, [r3, #0]
   194ea:	699b      	ldr	r3, [r3, #24]
   194ec:	429a      	cmp	r2, r3
   194ee:	d20e      	bcs.n	1950e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   194f0:	4b1c      	ldr	r3, [pc, #112]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   194f2:	681a      	ldr	r2, [r3, #0]
   194f4:	693b      	ldr	r3, [r7, #16]
   194f6:	009b      	lsls	r3, r3, #2
   194f8:	21e2      	movs	r1, #226	; 0xe2
   194fa:	00c9      	lsls	r1, r1, #3
   194fc:	468c      	mov	ip, r1
   194fe:	4463      	add	r3, ip
   19500:	18d3      	adds	r3, r2, r3
   19502:	2208      	movs	r2, #8
   19504:	2100      	movs	r1, #0
   19506:	0018      	movs	r0, r3
   19508:	4b17      	ldr	r3, [pc, #92]	; (19568 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1950a:	4798      	blx	r3
   1950c:	e01a      	b.n	19544 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1950e:	4b15      	ldr	r3, [pc, #84]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19510:	681b      	ldr	r3, [r3, #0]
   19512:	22e2      	movs	r2, #226	; 0xe2
   19514:	00d2      	lsls	r2, r2, #3
   19516:	4694      	mov	ip, r2
   19518:	4463      	add	r3, ip
   1951a:	2204      	movs	r2, #4
   1951c:	2100      	movs	r1, #0
   1951e:	0018      	movs	r0, r3
   19520:	4b11      	ldr	r3, [pc, #68]	; (19568 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19522:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   19524:	4b0f      	ldr	r3, [pc, #60]	; (19564 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19526:	681a      	ldr	r2, [r3, #0]
   19528:	693b      	ldr	r3, [r7, #16]
   1952a:	009b      	lsls	r3, r3, #2
   1952c:	21e2      	movs	r1, #226	; 0xe2
   1952e:	00c9      	lsls	r1, r1, #3
   19530:	468c      	mov	ip, r1
   19532:	4463      	add	r3, ip
   19534:	18d3      	adds	r3, r2, r3
   19536:	2204      	movs	r2, #4
   19538:	2100      	movs	r1, #0
   1953a:	0018      	movs	r0, r3
   1953c:	4b0a      	ldr	r3, [pc, #40]	; (19568 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1953e:	4798      	blx	r3
   19540:	e000      	b.n	19544 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   19542:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   19544:	697b      	ldr	r3, [r7, #20]
   19546:	3301      	adds	r3, #1
   19548:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1954a:	1dfb      	adds	r3, r7, #7
   1954c:	781a      	ldrb	r2, [r3, #0]
   1954e:	697b      	ldr	r3, [r7, #20]
   19550:	429a      	cmp	r2, r3
   19552:	d900      	bls.n	19556 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   19554:	e774      	b.n	19440 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   19556:	46bd      	mov	sp, r7
   19558:	b006      	add	sp, #24
   1955a:	bd80      	pop	{r7, pc}
   1955c:	00037450 	.word	0x00037450
   19560:	000193b1 	.word	0x000193b1
   19564:	20000c50 	.word	0x20000c50
   19568:	00034043 	.word	0x00034043

0001956c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1956c:	b580      	push	{r7, lr}
   1956e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   19570:	4b12      	ldr	r3, [pc, #72]	; (195bc <prvTraceUpdateCounters+0x50>)
   19572:	681b      	ldr	r3, [r3, #0]
   19574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19576:	2b00      	cmp	r3, #0
   19578:	d01c      	beq.n	195b4 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1957a:	4b10      	ldr	r3, [pc, #64]	; (195bc <prvTraceUpdateCounters+0x50>)
   1957c:	681b      	ldr	r3, [r3, #0]
   1957e:	695a      	ldr	r2, [r3, #20]
   19580:	3201      	adds	r2, #1
   19582:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   19584:	4b0d      	ldr	r3, [pc, #52]	; (195bc <prvTraceUpdateCounters+0x50>)
   19586:	681b      	ldr	r3, [r3, #0]
   19588:	69da      	ldr	r2, [r3, #28]
   1958a:	3201      	adds	r2, #1
   1958c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1958e:	4b0b      	ldr	r3, [pc, #44]	; (195bc <prvTraceUpdateCounters+0x50>)
   19590:	681b      	ldr	r3, [r3, #0]
   19592:	69da      	ldr	r2, [r3, #28]
   19594:	232c      	movs	r3, #44	; 0x2c
   19596:	33ff      	adds	r3, #255	; 0xff
   19598:	429a      	cmp	r2, r3
   1959a:	d907      	bls.n	195ac <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1959c:	4b07      	ldr	r3, [pc, #28]	; (195bc <prvTraceUpdateCounters+0x50>)
   1959e:	681b      	ldr	r3, [r3, #0]
   195a0:	2201      	movs	r2, #1
   195a2:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   195a4:	4b05      	ldr	r3, [pc, #20]	; (195bc <prvTraceUpdateCounters+0x50>)
   195a6:	681b      	ldr	r3, [r3, #0]
   195a8:	2200      	movs	r2, #0
   195aa:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   195ac:	2001      	movs	r0, #1
   195ae:	4b04      	ldr	r3, [pc, #16]	; (195c0 <prvTraceUpdateCounters+0x54>)
   195b0:	4798      	blx	r3
   195b2:	e000      	b.n	195b6 <prvTraceUpdateCounters+0x4a>
		return;
   195b4:	46c0      	nop			; (mov r8, r8)
#endif
}
   195b6:	46bd      	mov	sp, r7
   195b8:	bd80      	pop	{r7, pc}
   195ba:	46c0      	nop			; (mov r8, r8)
   195bc:	20000c50 	.word	0x20000c50
   195c0:	00019419 	.word	0x00019419

000195c4 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   195c4:	b5b0      	push	{r4, r5, r7, lr}
   195c6:	b086      	sub	sp, #24
   195c8:	af00      	add	r7, sp, #0
   195ca:	0002      	movs	r2, r0
   195cc:	1dbb      	adds	r3, r7, #6
   195ce:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   195d0:	2300      	movs	r3, #0
   195d2:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   195d4:	2300      	movs	r3, #0
   195d6:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   195d8:	2300      	movs	r3, #0
   195da:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   195dc:	1dbb      	adds	r3, r7, #6
   195de:	881b      	ldrh	r3, [r3, #0]
   195e0:	2bff      	cmp	r3, #255	; 0xff
   195e2:	d00a      	beq.n	195fa <prvTraceGetDTS+0x36>
   195e4:	1dbb      	adds	r3, r7, #6
   195e6:	881b      	ldrh	r3, [r3, #0]
   195e8:	4a60      	ldr	r2, [pc, #384]	; (1976c <prvTraceGetDTS+0x1a8>)
   195ea:	4293      	cmp	r3, r2
   195ec:	d005      	beq.n	195fa <prvTraceGetDTS+0x36>
   195ee:	4b60      	ldr	r3, [pc, #384]	; (19770 <prvTraceGetDTS+0x1ac>)
   195f0:	0018      	movs	r0, r3
   195f2:	4b60      	ldr	r3, [pc, #384]	; (19774 <prvTraceGetDTS+0x1b0>)
   195f4:	4798      	blx	r3
   195f6:	2300      	movs	r3, #0
   195f8:	e0b3      	b.n	19762 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   195fa:	4b5f      	ldr	r3, [pc, #380]	; (19778 <prvTraceGetDTS+0x1b4>)
   195fc:	681b      	ldr	r3, [r3, #0]
   195fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19600:	2b00      	cmp	r3, #0
   19602:	d118      	bne.n	19636 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   19604:	4b5d      	ldr	r3, [pc, #372]	; (1977c <prvTraceGetDTS+0x1b8>)
   19606:	681b      	ldr	r3, [r3, #0]
   19608:	2b00      	cmp	r3, #0
   1960a:	d006      	beq.n	1961a <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1960c:	4b5a      	ldr	r3, [pc, #360]	; (19778 <prvTraceGetDTS+0x1b4>)
   1960e:	681b      	ldr	r3, [r3, #0]
   19610:	4a5a      	ldr	r2, [pc, #360]	; (1977c <prvTraceGetDTS+0x1b8>)
   19612:	6812      	ldr	r2, [r2, #0]
   19614:	0892      	lsrs	r2, r2, #2
   19616:	625a      	str	r2, [r3, #36]	; 0x24
   19618:	e00d      	b.n	19636 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1961a:	4b59      	ldr	r3, [pc, #356]	; (19780 <prvTraceGetDTS+0x1bc>)
   1961c:	681a      	ldr	r2, [r3, #0]
   1961e:	4b59      	ldr	r3, [pc, #356]	; (19784 <prvTraceGetDTS+0x1c0>)
   19620:	681b      	ldr	r3, [r3, #0]
   19622:	429a      	cmp	r2, r3
   19624:	d007      	beq.n	19636 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19626:	4b54      	ldr	r3, [pc, #336]	; (19778 <prvTraceGetDTS+0x1b4>)
   19628:	681c      	ldr	r4, [r3, #0]
   1962a:	2000      	movs	r0, #0
   1962c:	4b56      	ldr	r3, [pc, #344]	; (19788 <prvTraceGetDTS+0x1c4>)
   1962e:	4798      	blx	r3
   19630:	0003      	movs	r3, r0
   19632:	089b      	lsrs	r3, r3, #2
   19634:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19636:	230c      	movs	r3, #12
   19638:	18fb      	adds	r3, r7, r3
   1963a:	0018      	movs	r0, r3
   1963c:	4b53      	ldr	r3, [pc, #332]	; (1978c <prvTraceGetDTS+0x1c8>)
   1963e:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   19640:	68fa      	ldr	r2, [r7, #12]
   19642:	4b53      	ldr	r3, [pc, #332]	; (19790 <prvTraceGetDTS+0x1cc>)
   19644:	681b      	ldr	r3, [r3, #0]
   19646:	1ad3      	subs	r3, r2, r3
   19648:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1964a:	68fa      	ldr	r2, [r7, #12]
   1964c:	4b50      	ldr	r3, [pc, #320]	; (19790 <prvTraceGetDTS+0x1cc>)
   1964e:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   19650:	4b49      	ldr	r3, [pc, #292]	; (19778 <prvTraceGetDTS+0x1b4>)
   19652:	681b      	ldr	r3, [r3, #0]
   19654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19656:	2b00      	cmp	r3, #0
   19658:	d044      	beq.n	196e4 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1965a:	4b47      	ldr	r3, [pc, #284]	; (19778 <prvTraceGetDTS+0x1b4>)
   1965c:	681b      	ldr	r3, [r3, #0]
   1965e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19660:	693b      	ldr	r3, [r7, #16]
   19662:	429a      	cmp	r2, r3
   19664:	d21e      	bcs.n	196a4 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19666:	4b44      	ldr	r3, [pc, #272]	; (19778 <prvTraceGetDTS+0x1b4>)
   19668:	681c      	ldr	r4, [r3, #0]
   1966a:	4b43      	ldr	r3, [pc, #268]	; (19778 <prvTraceGetDTS+0x1b4>)
   1966c:	681b      	ldr	r3, [r3, #0]
   1966e:	6add      	ldr	r5, [r3, #44]	; 0x2c
   19670:	4b41      	ldr	r3, [pc, #260]	; (19778 <prvTraceGetDTS+0x1b4>)
   19672:	681b      	ldr	r3, [r3, #0]
   19674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19676:	4b47      	ldr	r3, [pc, #284]	; (19794 <prvTraceGetDTS+0x1d0>)
   19678:	0011      	movs	r1, r2
   1967a:	6938      	ldr	r0, [r7, #16]
   1967c:	4798      	blx	r3
   1967e:	0003      	movs	r3, r0
   19680:	18eb      	adds	r3, r5, r3
   19682:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19684:	4b3c      	ldr	r3, [pc, #240]	; (19778 <prvTraceGetDTS+0x1b4>)
   19686:	681c      	ldr	r4, [r3, #0]
   19688:	4b3b      	ldr	r3, [pc, #236]	; (19778 <prvTraceGetDTS+0x1b4>)
   1968a:	681b      	ldr	r3, [r3, #0]
   1968c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1968e:	4b3a      	ldr	r3, [pc, #232]	; (19778 <prvTraceGetDTS+0x1b4>)
   19690:	681b      	ldr	r3, [r3, #0]
   19692:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19694:	693a      	ldr	r2, [r7, #16]
   19696:	4b40      	ldr	r3, [pc, #256]	; (19798 <prvTraceGetDTS+0x1d4>)
   19698:	0010      	movs	r0, r2
   1969a:	4798      	blx	r3
   1969c:	000b      	movs	r3, r1
   1969e:	18eb      	adds	r3, r5, r3
   196a0:	62a3      	str	r3, [r4, #40]	; 0x28
   196a2:	e007      	b.n	196b4 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   196a4:	4b34      	ldr	r3, [pc, #208]	; (19778 <prvTraceGetDTS+0x1b4>)
   196a6:	681b      	ldr	r3, [r3, #0]
   196a8:	4a33      	ldr	r2, [pc, #204]	; (19778 <prvTraceGetDTS+0x1b4>)
   196aa:	6812      	ldr	r2, [r2, #0]
   196ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
   196ae:	693a      	ldr	r2, [r7, #16]
   196b0:	188a      	adds	r2, r1, r2
   196b2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   196b4:	4b30      	ldr	r3, [pc, #192]	; (19778 <prvTraceGetDTS+0x1b4>)
   196b6:	681b      	ldr	r3, [r3, #0]
   196b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   196ba:	4b2f      	ldr	r3, [pc, #188]	; (19778 <prvTraceGetDTS+0x1b4>)
   196bc:	681b      	ldr	r3, [r3, #0]
   196be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   196c0:	429a      	cmp	r2, r3
   196c2:	d313      	bcc.n	196ec <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   196c4:	4b2c      	ldr	r3, [pc, #176]	; (19778 <prvTraceGetDTS+0x1b4>)
   196c6:	681b      	ldr	r3, [r3, #0]
   196c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   196ca:	3201      	adds	r2, #1
   196cc:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   196ce:	4b2a      	ldr	r3, [pc, #168]	; (19778 <prvTraceGetDTS+0x1b4>)
   196d0:	681b      	ldr	r3, [r3, #0]
   196d2:	4a29      	ldr	r2, [pc, #164]	; (19778 <prvTraceGetDTS+0x1b4>)
   196d4:	6812      	ldr	r2, [r2, #0]
   196d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
   196d8:	4a27      	ldr	r2, [pc, #156]	; (19778 <prvTraceGetDTS+0x1b4>)
   196da:	6812      	ldr	r2, [r2, #0]
   196dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
   196de:	1a8a      	subs	r2, r1, r2
   196e0:	629a      	str	r2, [r3, #40]	; 0x28
   196e2:	e003      	b.n	196ec <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   196e4:	4b24      	ldr	r3, [pc, #144]	; (19778 <prvTraceGetDTS+0x1b4>)
   196e6:	681b      	ldr	r3, [r3, #0]
   196e8:	68fa      	ldr	r2, [r7, #12]
   196ea:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   196ec:	1dbb      	adds	r3, r7, #6
   196ee:	881a      	ldrh	r2, [r3, #0]
   196f0:	693b      	ldr	r3, [r7, #16]
   196f2:	429a      	cmp	r2, r3
   196f4:	d22f      	bcs.n	19756 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   196f6:	4b29      	ldr	r3, [pc, #164]	; (1979c <prvTraceGetDTS+0x1d8>)
   196f8:	4798      	blx	r3
   196fa:	0003      	movs	r3, r0
   196fc:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   196fe:	697b      	ldr	r3, [r7, #20]
   19700:	2b00      	cmp	r3, #0
   19702:	d028      	beq.n	19756 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19704:	1dbb      	adds	r3, r7, #6
   19706:	881b      	ldrh	r3, [r3, #0]
   19708:	4a18      	ldr	r2, [pc, #96]	; (1976c <prvTraceGetDTS+0x1a8>)
   1970a:	4293      	cmp	r3, r2
   1970c:	d10b      	bne.n	19726 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1970e:	697b      	ldr	r3, [r7, #20]
   19710:	22a9      	movs	r2, #169	; 0xa9
   19712:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19714:	693b      	ldr	r3, [r7, #16]
   19716:	0c1b      	lsrs	r3, r3, #16
   19718:	b29a      	uxth	r2, r3
   1971a:	697b      	ldr	r3, [r7, #20]
   1971c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1971e:	697b      	ldr	r3, [r7, #20]
   19720:	2200      	movs	r2, #0
   19722:	705a      	strb	r2, [r3, #1]
   19724:	e015      	b.n	19752 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19726:	1dbb      	adds	r3, r7, #6
   19728:	881b      	ldrh	r3, [r3, #0]
   1972a:	2bff      	cmp	r3, #255	; 0xff
   1972c:	d10d      	bne.n	1974a <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1972e:	697b      	ldr	r3, [r7, #20]
   19730:	22a8      	movs	r2, #168	; 0xa8
   19732:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19734:	693b      	ldr	r3, [r7, #16]
   19736:	0a1b      	lsrs	r3, r3, #8
   19738:	b29a      	uxth	r2, r3
   1973a:	697b      	ldr	r3, [r7, #20]
   1973c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1973e:	693b      	ldr	r3, [r7, #16]
   19740:	0e1b      	lsrs	r3, r3, #24
   19742:	b2da      	uxtb	r2, r3
   19744:	697b      	ldr	r3, [r7, #20]
   19746:	705a      	strb	r2, [r3, #1]
   19748:	e003      	b.n	19752 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1974a:	4b15      	ldr	r3, [pc, #84]	; (197a0 <prvTraceGetDTS+0x1dc>)
   1974c:	0018      	movs	r0, r3
   1974e:	4b09      	ldr	r3, [pc, #36]	; (19774 <prvTraceGetDTS+0x1b0>)
   19750:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   19752:	4b14      	ldr	r3, [pc, #80]	; (197a4 <prvTraceGetDTS+0x1e0>)
   19754:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19756:	693b      	ldr	r3, [r7, #16]
   19758:	b29b      	uxth	r3, r3
   1975a:	1dba      	adds	r2, r7, #6
   1975c:	8812      	ldrh	r2, [r2, #0]
   1975e:	4013      	ands	r3, r2
   19760:	b29b      	uxth	r3, r3
}
   19762:	0018      	movs	r0, r3
   19764:	46bd      	mov	sp, r7
   19766:	b006      	add	sp, #24
   19768:	bdb0      	pop	{r4, r5, r7, pc}
   1976a:	46c0      	nop			; (mov r8, r8)
   1976c:	0000ffff 	.word	0x0000ffff
   19770:	000374a8 	.word	0x000374a8
   19774:	000193b1 	.word	0x000193b1
   19778:	20000c50 	.word	0x20000c50
   1977c:	20000bac 	.word	0x20000bac
   19780:	e000e018 	.word	0xe000e018
   19784:	20005484 	.word	0x20005484
   19788:	00029761 	.word	0x00029761
   1978c:	000197a9 	.word	0x000197a9
   19790:	20000c5c 	.word	0x20000c5c
   19794:	00032389 	.word	0x00032389
   19798:	00032495 	.word	0x00032495
   1979c:	00018f69 	.word	0x00018f69
   197a0:	000374e8 	.word	0x000374e8
   197a4:	0001956d 	.word	0x0001956d

000197a8 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   197a8:	b580      	push	{r7, lr}
   197aa:	b084      	sub	sp, #16
   197ac:	af00      	add	r7, sp, #0
   197ae:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   197b0:	2300      	movs	r3, #0
   197b2:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   197b4:	2300      	movs	r3, #0
   197b6:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   197b8:	4b2d      	ldr	r3, [pc, #180]	; (19870 <prvTracePortGetTimeStamp+0xc8>)
   197ba:	681b      	ldr	r3, [r3, #0]
   197bc:	2b01      	cmp	r3, #1
   197be:	d107      	bne.n	197d0 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   197c0:	687b      	ldr	r3, [r7, #4]
   197c2:	2b00      	cmp	r3, #0
   197c4:	d04f      	beq.n	19866 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   197c6:	4b2b      	ldr	r3, [pc, #172]	; (19874 <prvTracePortGetTimeStamp+0xcc>)
   197c8:	681a      	ldr	r2, [r3, #0]
   197ca:	687b      	ldr	r3, [r7, #4]
   197cc:	601a      	str	r2, [r3, #0]
		return;
   197ce:	e04a      	b.n	19866 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   197d0:	4b29      	ldr	r3, [pc, #164]	; (19878 <prvTracePortGetTimeStamp+0xd0>)
   197d2:	681a      	ldr	r2, [r3, #0]
   197d4:	4b29      	ldr	r3, [pc, #164]	; (1987c <prvTracePortGetTimeStamp+0xd4>)
   197d6:	681b      	ldr	r3, [r3, #0]
   197d8:	1ad3      	subs	r3, r2, r3
   197da:	3301      	adds	r3, #1
   197dc:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   197de:	4b28      	ldr	r3, [pc, #160]	; (19880 <prvTracePortGetTimeStamp+0xd8>)
   197e0:	681a      	ldr	r2, [r3, #0]
   197e2:	4b28      	ldr	r3, [pc, #160]	; (19884 <prvTracePortGetTimeStamp+0xdc>)
   197e4:	681b      	ldr	r3, [r3, #0]
   197e6:	1ad3      	subs	r3, r2, r3
   197e8:	3b01      	subs	r3, #1
   197ea:	2b00      	cmp	r3, #0
   197ec:	db03      	blt.n	197f6 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   197ee:	4b24      	ldr	r3, [pc, #144]	; (19880 <prvTracePortGetTimeStamp+0xd8>)
   197f0:	681b      	ldr	r3, [r3, #0]
   197f2:	60fb      	str	r3, [r7, #12]
   197f4:	e002      	b.n	197fc <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   197f6:	4b23      	ldr	r3, [pc, #140]	; (19884 <prvTracePortGetTimeStamp+0xdc>)
   197f8:	681b      	ldr	r3, [r3, #0]
   197fa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   197fc:	4b20      	ldr	r3, [pc, #128]	; (19880 <prvTracePortGetTimeStamp+0xd8>)
   197fe:	681b      	ldr	r3, [r3, #0]
   19800:	68fa      	ldr	r2, [r7, #12]
   19802:	429a      	cmp	r2, r3
   19804:	d107      	bne.n	19816 <prvTracePortGetTimeStamp+0x6e>
   19806:	4b20      	ldr	r3, [pc, #128]	; (19888 <prvTracePortGetTimeStamp+0xe0>)
   19808:	681b      	ldr	r3, [r3, #0]
   1980a:	68ba      	ldr	r2, [r7, #8]
   1980c:	429a      	cmp	r2, r3
   1980e:	d202      	bcs.n	19816 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19810:	68fb      	ldr	r3, [r7, #12]
   19812:	3301      	adds	r3, #1
   19814:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19816:	687b      	ldr	r3, [r7, #4]
   19818:	2b00      	cmp	r3, #0
   1981a:	d016      	beq.n	1984a <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1981c:	4b16      	ldr	r3, [pc, #88]	; (19878 <prvTracePortGetTimeStamp+0xd0>)
   1981e:	681b      	ldr	r3, [r3, #0]
   19820:	3301      	adds	r3, #1
   19822:	089b      	lsrs	r3, r3, #2
   19824:	68fa      	ldr	r2, [r7, #12]
   19826:	435a      	muls	r2, r3
   19828:	4b12      	ldr	r3, [pc, #72]	; (19874 <prvTracePortGetTimeStamp+0xcc>)
   1982a:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1982c:	4b12      	ldr	r3, [pc, #72]	; (19878 <prvTracePortGetTimeStamp+0xd0>)
   1982e:	681b      	ldr	r3, [r3, #0]
   19830:	3301      	adds	r3, #1
   19832:	2203      	movs	r2, #3
   19834:	4013      	ands	r3, r2
   19836:	68fa      	ldr	r2, [r7, #12]
   19838:	435a      	muls	r2, r3
   1983a:	68bb      	ldr	r3, [r7, #8]
   1983c:	18d3      	adds	r3, r2, r3
   1983e:	089a      	lsrs	r2, r3, #2
   19840:	4b0c      	ldr	r3, [pc, #48]	; (19874 <prvTracePortGetTimeStamp+0xcc>)
   19842:	681b      	ldr	r3, [r3, #0]
   19844:	18d2      	adds	r2, r2, r3
   19846:	4b0b      	ldr	r3, [pc, #44]	; (19874 <prvTracePortGetTimeStamp+0xcc>)
   19848:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1984a:	4b0d      	ldr	r3, [pc, #52]	; (19880 <prvTracePortGetTimeStamp+0xd8>)
   1984c:	68fa      	ldr	r2, [r7, #12]
   1984e:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19850:	687b      	ldr	r3, [r7, #4]
   19852:	2b00      	cmp	r3, #0
   19854:	d003      	beq.n	1985e <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19856:	4b07      	ldr	r3, [pc, #28]	; (19874 <prvTracePortGetTimeStamp+0xcc>)
   19858:	681a      	ldr	r2, [r3, #0]
   1985a:	687b      	ldr	r3, [r7, #4]
   1985c:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1985e:	4b0a      	ldr	r3, [pc, #40]	; (19888 <prvTracePortGetTimeStamp+0xe0>)
   19860:	68ba      	ldr	r2, [r7, #8]
   19862:	601a      	str	r2, [r3, #0]
   19864:	e000      	b.n	19868 <prvTracePortGetTimeStamp+0xc0>
		return;
   19866:	46c0      	nop			; (mov r8, r8)
}
   19868:	46bd      	mov	sp, r7
   1986a:	b004      	add	sp, #16
   1986c:	bd80      	pop	{r7, pc}
   1986e:	46c0      	nop			; (mov r8, r8)
   19870:	20000b9c 	.word	0x20000b9c
   19874:	20000ba0 	.word	0x20000ba0
   19878:	e000e014 	.word	0xe000e014
   1987c:	e000e018 	.word	0xe000e018
   19880:	20000c60 	.word	0x20000c60
   19884:	20000b98 	.word	0x20000b98
   19888:	20000c64 	.word	0x20000c64

0001988c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1988c:	b580      	push	{r7, lr}
   1988e:	b082      	sub	sp, #8
   19890:	af00      	add	r7, sp, #0
   19892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19894:	687b      	ldr	r3, [r7, #4]
   19896:	3308      	adds	r3, #8
   19898:	001a      	movs	r2, r3
   1989a:	687b      	ldr	r3, [r7, #4]
   1989c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1989e:	687b      	ldr	r3, [r7, #4]
   198a0:	2201      	movs	r2, #1
   198a2:	4252      	negs	r2, r2
   198a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   198a6:	687b      	ldr	r3, [r7, #4]
   198a8:	3308      	adds	r3, #8
   198aa:	001a      	movs	r2, r3
   198ac:	687b      	ldr	r3, [r7, #4]
   198ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   198b0:	687b      	ldr	r3, [r7, #4]
   198b2:	3308      	adds	r3, #8
   198b4:	001a      	movs	r2, r3
   198b6:	687b      	ldr	r3, [r7, #4]
   198b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   198ba:	687b      	ldr	r3, [r7, #4]
   198bc:	2200      	movs	r2, #0
   198be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   198c0:	46c0      	nop			; (mov r8, r8)
   198c2:	46bd      	mov	sp, r7
   198c4:	b002      	add	sp, #8
   198c6:	bd80      	pop	{r7, pc}

000198c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   198c8:	b580      	push	{r7, lr}
   198ca:	b082      	sub	sp, #8
   198cc:	af00      	add	r7, sp, #0
   198ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   198d0:	687b      	ldr	r3, [r7, #4]
   198d2:	2200      	movs	r2, #0
   198d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   198d6:	46c0      	nop			; (mov r8, r8)
   198d8:	46bd      	mov	sp, r7
   198da:	b002      	add	sp, #8
   198dc:	bd80      	pop	{r7, pc}

000198de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   198de:	b580      	push	{r7, lr}
   198e0:	b084      	sub	sp, #16
   198e2:	af00      	add	r7, sp, #0
   198e4:	6078      	str	r0, [r7, #4]
   198e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   198e8:	687b      	ldr	r3, [r7, #4]
   198ea:	685b      	ldr	r3, [r3, #4]
   198ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   198ee:	683b      	ldr	r3, [r7, #0]
   198f0:	68fa      	ldr	r2, [r7, #12]
   198f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   198f4:	68fb      	ldr	r3, [r7, #12]
   198f6:	689a      	ldr	r2, [r3, #8]
   198f8:	683b      	ldr	r3, [r7, #0]
   198fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   198fc:	68fb      	ldr	r3, [r7, #12]
   198fe:	689b      	ldr	r3, [r3, #8]
   19900:	683a      	ldr	r2, [r7, #0]
   19902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19904:	68fb      	ldr	r3, [r7, #12]
   19906:	683a      	ldr	r2, [r7, #0]
   19908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1990a:	683b      	ldr	r3, [r7, #0]
   1990c:	687a      	ldr	r2, [r7, #4]
   1990e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19910:	687b      	ldr	r3, [r7, #4]
   19912:	681b      	ldr	r3, [r3, #0]
   19914:	1c5a      	adds	r2, r3, #1
   19916:	687b      	ldr	r3, [r7, #4]
   19918:	601a      	str	r2, [r3, #0]
}
   1991a:	46c0      	nop			; (mov r8, r8)
   1991c:	46bd      	mov	sp, r7
   1991e:	b004      	add	sp, #16
   19920:	bd80      	pop	{r7, pc}

00019922 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19922:	b580      	push	{r7, lr}
   19924:	b084      	sub	sp, #16
   19926:	af00      	add	r7, sp, #0
   19928:	6078      	str	r0, [r7, #4]
   1992a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1992c:	683b      	ldr	r3, [r7, #0]
   1992e:	681b      	ldr	r3, [r3, #0]
   19930:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19932:	68bb      	ldr	r3, [r7, #8]
   19934:	3301      	adds	r3, #1
   19936:	d103      	bne.n	19940 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19938:	687b      	ldr	r3, [r7, #4]
   1993a:	691b      	ldr	r3, [r3, #16]
   1993c:	60fb      	str	r3, [r7, #12]
   1993e:	e00c      	b.n	1995a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19940:	687b      	ldr	r3, [r7, #4]
   19942:	3308      	adds	r3, #8
   19944:	60fb      	str	r3, [r7, #12]
   19946:	e002      	b.n	1994e <vListInsert+0x2c>
   19948:	68fb      	ldr	r3, [r7, #12]
   1994a:	685b      	ldr	r3, [r3, #4]
   1994c:	60fb      	str	r3, [r7, #12]
   1994e:	68fb      	ldr	r3, [r7, #12]
   19950:	685b      	ldr	r3, [r3, #4]
   19952:	681a      	ldr	r2, [r3, #0]
   19954:	68bb      	ldr	r3, [r7, #8]
   19956:	429a      	cmp	r2, r3
   19958:	d9f6      	bls.n	19948 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1995a:	68fb      	ldr	r3, [r7, #12]
   1995c:	685a      	ldr	r2, [r3, #4]
   1995e:	683b      	ldr	r3, [r7, #0]
   19960:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19962:	683b      	ldr	r3, [r7, #0]
   19964:	685b      	ldr	r3, [r3, #4]
   19966:	683a      	ldr	r2, [r7, #0]
   19968:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1996a:	683b      	ldr	r3, [r7, #0]
   1996c:	68fa      	ldr	r2, [r7, #12]
   1996e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19970:	68fb      	ldr	r3, [r7, #12]
   19972:	683a      	ldr	r2, [r7, #0]
   19974:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19976:	683b      	ldr	r3, [r7, #0]
   19978:	687a      	ldr	r2, [r7, #4]
   1997a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1997c:	687b      	ldr	r3, [r7, #4]
   1997e:	681b      	ldr	r3, [r3, #0]
   19980:	1c5a      	adds	r2, r3, #1
   19982:	687b      	ldr	r3, [r7, #4]
   19984:	601a      	str	r2, [r3, #0]
}
   19986:	46c0      	nop			; (mov r8, r8)
   19988:	46bd      	mov	sp, r7
   1998a:	b004      	add	sp, #16
   1998c:	bd80      	pop	{r7, pc}

0001998e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1998e:	b580      	push	{r7, lr}
   19990:	b084      	sub	sp, #16
   19992:	af00      	add	r7, sp, #0
   19994:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19996:	687b      	ldr	r3, [r7, #4]
   19998:	691b      	ldr	r3, [r3, #16]
   1999a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1999c:	687b      	ldr	r3, [r7, #4]
   1999e:	685b      	ldr	r3, [r3, #4]
   199a0:	687a      	ldr	r2, [r7, #4]
   199a2:	6892      	ldr	r2, [r2, #8]
   199a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   199a6:	687b      	ldr	r3, [r7, #4]
   199a8:	689b      	ldr	r3, [r3, #8]
   199aa:	687a      	ldr	r2, [r7, #4]
   199ac:	6852      	ldr	r2, [r2, #4]
   199ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   199b0:	68fb      	ldr	r3, [r7, #12]
   199b2:	685a      	ldr	r2, [r3, #4]
   199b4:	687b      	ldr	r3, [r7, #4]
   199b6:	429a      	cmp	r2, r3
   199b8:	d103      	bne.n	199c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   199ba:	687b      	ldr	r3, [r7, #4]
   199bc:	689a      	ldr	r2, [r3, #8]
   199be:	68fb      	ldr	r3, [r7, #12]
   199c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   199c2:	687b      	ldr	r3, [r7, #4]
   199c4:	2200      	movs	r2, #0
   199c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   199c8:	68fb      	ldr	r3, [r7, #12]
   199ca:	681b      	ldr	r3, [r3, #0]
   199cc:	1e5a      	subs	r2, r3, #1
   199ce:	68fb      	ldr	r3, [r7, #12]
   199d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   199d2:	68fb      	ldr	r3, [r7, #12]
   199d4:	681b      	ldr	r3, [r3, #0]
}
   199d6:	0018      	movs	r0, r3
   199d8:	46bd      	mov	sp, r7
   199da:	b004      	add	sp, #16
   199dc:	bd80      	pop	{r7, pc}
	...

000199e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   199e0:	b580      	push	{r7, lr}
   199e2:	b084      	sub	sp, #16
   199e4:	af00      	add	r7, sp, #0
   199e6:	60f8      	str	r0, [r7, #12]
   199e8:	60b9      	str	r1, [r7, #8]
   199ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   199ec:	68fb      	ldr	r3, [r7, #12]
   199ee:	3b04      	subs	r3, #4
   199f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   199f2:	68fb      	ldr	r3, [r7, #12]
   199f4:	2280      	movs	r2, #128	; 0x80
   199f6:	0452      	lsls	r2, r2, #17
   199f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   199fa:	68fb      	ldr	r3, [r7, #12]
   199fc:	3b04      	subs	r3, #4
   199fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19a00:	68ba      	ldr	r2, [r7, #8]
   19a02:	68fb      	ldr	r3, [r7, #12]
   19a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19a06:	68fb      	ldr	r3, [r7, #12]
   19a08:	3b04      	subs	r3, #4
   19a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19a0c:	4a08      	ldr	r2, [pc, #32]	; (19a30 <pxPortInitialiseStack+0x50>)
   19a0e:	68fb      	ldr	r3, [r7, #12]
   19a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19a12:	68fb      	ldr	r3, [r7, #12]
   19a14:	3b14      	subs	r3, #20
   19a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19a18:	687a      	ldr	r2, [r7, #4]
   19a1a:	68fb      	ldr	r3, [r7, #12]
   19a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19a1e:	68fb      	ldr	r3, [r7, #12]
   19a20:	3b20      	subs	r3, #32
   19a22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19a24:	68fb      	ldr	r3, [r7, #12]
}
   19a26:	0018      	movs	r0, r3
   19a28:	46bd      	mov	sp, r7
   19a2a:	b004      	add	sp, #16
   19a2c:	bd80      	pop	{r7, pc}
   19a2e:	46c0      	nop			; (mov r8, r8)
   19a30:	00019a35 	.word	0x00019a35

00019a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19a34:	b580      	push	{r7, lr}
   19a36:	b082      	sub	sp, #8
   19a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19a3a:	2300      	movs	r3, #0
   19a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19a3e:	4b07      	ldr	r3, [pc, #28]	; (19a5c <prvTaskExitError+0x28>)
   19a40:	681b      	ldr	r3, [r3, #0]
   19a42:	3301      	adds	r3, #1
   19a44:	d001      	beq.n	19a4a <prvTaskExitError+0x16>
   19a46:	b672      	cpsid	i
   19a48:	e7fe      	b.n	19a48 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19a4a:	b672      	cpsid	i
	while( ulDummy == 0 )
   19a4c:	46c0      	nop			; (mov r8, r8)
   19a4e:	687b      	ldr	r3, [r7, #4]
   19a50:	2b00      	cmp	r3, #0
   19a52:	d0fc      	beq.n	19a4e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19a54:	46c0      	nop			; (mov r8, r8)
   19a56:	46bd      	mov	sp, r7
   19a58:	b002      	add	sp, #8
   19a5a:	bd80      	pop	{r7, pc}
   19a5c:	200000fc 	.word	0x200000fc

00019a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19a60:	b580      	push	{r7, lr}
   19a62:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19a64:	46c0      	nop			; (mov r8, r8)
   19a66:	46bd      	mov	sp, r7
   19a68:	bd80      	pop	{r7, pc}
   19a6a:	0000      	movs	r0, r0
   19a6c:	0000      	movs	r0, r0
	...

00019a70 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19a70:	4a0b      	ldr	r2, [pc, #44]	; (19aa0 <pxCurrentTCBConst2>)
   19a72:	6813      	ldr	r3, [r2, #0]
   19a74:	6818      	ldr	r0, [r3, #0]
   19a76:	3020      	adds	r0, #32
   19a78:	f380 8809 	msr	PSP, r0
   19a7c:	2002      	movs	r0, #2
   19a7e:	f380 8814 	msr	CONTROL, r0
   19a82:	f3bf 8f6f 	isb	sy
   19a86:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19a88:	46ae      	mov	lr, r5
   19a8a:	bc08      	pop	{r3}
   19a8c:	bc04      	pop	{r2}
   19a8e:	b662      	cpsie	i
   19a90:	4718      	bx	r3
   19a92:	46c0      	nop			; (mov r8, r8)
   19a94:	46c0      	nop			; (mov r8, r8)
   19a96:	46c0      	nop			; (mov r8, r8)
   19a98:	46c0      	nop			; (mov r8, r8)
   19a9a:	46c0      	nop			; (mov r8, r8)
   19a9c:	46c0      	nop			; (mov r8, r8)
   19a9e:	46c0      	nop			; (mov r8, r8)

00019aa0 <pxCurrentTCBConst2>:
   19aa0:	20003f38 	.word	0x20003f38
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19aa4:	46c0      	nop			; (mov r8, r8)
   19aa6:	46c0      	nop			; (mov r8, r8)

00019aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19aa8:	b580      	push	{r7, lr}
   19aaa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   19aac:	4b0e      	ldr	r3, [pc, #56]	; (19ae8 <xPortStartScheduler+0x40>)
   19aae:	4a0e      	ldr	r2, [pc, #56]	; (19ae8 <xPortStartScheduler+0x40>)
   19ab0:	6812      	ldr	r2, [r2, #0]
   19ab2:	21ff      	movs	r1, #255	; 0xff
   19ab4:	0409      	lsls	r1, r1, #16
   19ab6:	430a      	orrs	r2, r1
   19ab8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   19aba:	4b0b      	ldr	r3, [pc, #44]	; (19ae8 <xPortStartScheduler+0x40>)
   19abc:	4a0a      	ldr	r2, [pc, #40]	; (19ae8 <xPortStartScheduler+0x40>)
   19abe:	6812      	ldr	r2, [r2, #0]
   19ac0:	21ff      	movs	r1, #255	; 0xff
   19ac2:	0609      	lsls	r1, r1, #24
   19ac4:	430a      	orrs	r2, r1
   19ac6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19ac8:	4b08      	ldr	r3, [pc, #32]	; (19aec <xPortStartScheduler+0x44>)
   19aca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   19acc:	4b08      	ldr	r3, [pc, #32]	; (19af0 <xPortStartScheduler+0x48>)
   19ace:	2200      	movs	r2, #0
   19ad0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19ad2:	4b08      	ldr	r3, [pc, #32]	; (19af4 <xPortStartScheduler+0x4c>)
   19ad4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19ad6:	4b08      	ldr	r3, [pc, #32]	; (19af8 <xPortStartScheduler+0x50>)
   19ad8:	4798      	blx	r3
	prvTaskExitError();
   19ada:	4b08      	ldr	r3, [pc, #32]	; (19afc <xPortStartScheduler+0x54>)
   19adc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   19ade:	2300      	movs	r3, #0
}
   19ae0:	0018      	movs	r0, r3
   19ae2:	46bd      	mov	sp, r7
   19ae4:	bd80      	pop	{r7, pc}
   19ae6:	46c0      	nop			; (mov r8, r8)
   19ae8:	e000ed20 	.word	0xe000ed20
   19aec:	00019c09 	.word	0x00019c09
   19af0:	200000fc 	.word	0x200000fc
   19af4:	00019a71 	.word	0x00019a71
   19af8:	0001c165 	.word	0x0001c165
   19afc:	00019a35 	.word	0x00019a35

00019b00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19b00:	b580      	push	{r7, lr}
   19b02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19b04:	4b03      	ldr	r3, [pc, #12]	; (19b14 <vPortYield+0x14>)
   19b06:	2280      	movs	r2, #128	; 0x80
   19b08:	0552      	lsls	r2, r2, #21
   19b0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   19b0c:	46c0      	nop			; (mov r8, r8)
   19b0e:	46bd      	mov	sp, r7
   19b10:	bd80      	pop	{r7, pc}
   19b12:	46c0      	nop			; (mov r8, r8)
   19b14:	e000ed04 	.word	0xe000ed04

00019b18 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19b18:	b580      	push	{r7, lr}
   19b1a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   19b1c:	b672      	cpsid	i
    uxCriticalNesting++;
   19b1e:	4b06      	ldr	r3, [pc, #24]	; (19b38 <vPortEnterCritical+0x20>)
   19b20:	681b      	ldr	r3, [r3, #0]
   19b22:	1c5a      	adds	r2, r3, #1
   19b24:	4b04      	ldr	r3, [pc, #16]	; (19b38 <vPortEnterCritical+0x20>)
   19b26:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19b28:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19b2c:	f3bf 8f6f 	isb	sy
}
   19b30:	46c0      	nop			; (mov r8, r8)
   19b32:	46bd      	mov	sp, r7
   19b34:	bd80      	pop	{r7, pc}
   19b36:	46c0      	nop			; (mov r8, r8)
   19b38:	200000fc 	.word	0x200000fc

00019b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   19b3c:	b580      	push	{r7, lr}
   19b3e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19b40:	4b09      	ldr	r3, [pc, #36]	; (19b68 <vPortExitCritical+0x2c>)
   19b42:	681b      	ldr	r3, [r3, #0]
   19b44:	2b00      	cmp	r3, #0
   19b46:	d101      	bne.n	19b4c <vPortExitCritical+0x10>
   19b48:	b672      	cpsid	i
   19b4a:	e7fe      	b.n	19b4a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   19b4c:	4b06      	ldr	r3, [pc, #24]	; (19b68 <vPortExitCritical+0x2c>)
   19b4e:	681b      	ldr	r3, [r3, #0]
   19b50:	1e5a      	subs	r2, r3, #1
   19b52:	4b05      	ldr	r3, [pc, #20]	; (19b68 <vPortExitCritical+0x2c>)
   19b54:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19b56:	4b04      	ldr	r3, [pc, #16]	; (19b68 <vPortExitCritical+0x2c>)
   19b58:	681b      	ldr	r3, [r3, #0]
   19b5a:	2b00      	cmp	r3, #0
   19b5c:	d100      	bne.n	19b60 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   19b5e:	b662      	cpsie	i
    }
}
   19b60:	46c0      	nop			; (mov r8, r8)
   19b62:	46bd      	mov	sp, r7
   19b64:	bd80      	pop	{r7, pc}
   19b66:	46c0      	nop			; (mov r8, r8)
   19b68:	200000fc 	.word	0x200000fc

00019b6c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   19b6c:	f3ef 8010 	mrs	r0, PRIMASK
   19b70:	b672      	cpsid	i
   19b72:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19b74:	46c0      	nop			; (mov r8, r8)
   19b76:	0018      	movs	r0, r3

00019b78 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19b78:	f380 8810 	msr	PRIMASK, r0
   19b7c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   19b7e:	46c0      	nop			; (mov r8, r8)

00019b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19b80:	f3ef 8009 	mrs	r0, PSP
   19b84:	4b0e      	ldr	r3, [pc, #56]	; (19bc0 <pxCurrentTCBConst>)
   19b86:	681a      	ldr	r2, [r3, #0]
   19b88:	3820      	subs	r0, #32
   19b8a:	6010      	str	r0, [r2, #0]
   19b8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19b8e:	4644      	mov	r4, r8
   19b90:	464d      	mov	r5, r9
   19b92:	4656      	mov	r6, sl
   19b94:	465f      	mov	r7, fp
   19b96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19b98:	b508      	push	{r3, lr}
   19b9a:	b672      	cpsid	i
   19b9c:	f002 fae2 	bl	1c164 <vTaskSwitchContext>
   19ba0:	b662      	cpsie	i
   19ba2:	bc0c      	pop	{r2, r3}
   19ba4:	6811      	ldr	r1, [r2, #0]
   19ba6:	6808      	ldr	r0, [r1, #0]
   19ba8:	3010      	adds	r0, #16
   19baa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19bac:	46a0      	mov	r8, r4
   19bae:	46a9      	mov	r9, r5
   19bb0:	46b2      	mov	sl, r6
   19bb2:	46bb      	mov	fp, r7
   19bb4:	f380 8809 	msr	PSP, r0
   19bb8:	3820      	subs	r0, #32
   19bba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19bbc:	4718      	bx	r3
   19bbe:	46c0      	nop			; (mov r8, r8)

00019bc0 <pxCurrentTCBConst>:
   19bc0:	20003f38 	.word	0x20003f38
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19bc4:	46c0      	nop			; (mov r8, r8)
   19bc6:	46c0      	nop			; (mov r8, r8)

00019bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19bc8:	b580      	push	{r7, lr}
   19bca:	b082      	sub	sp, #8
   19bcc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   19bce:	4b0a      	ldr	r3, [pc, #40]	; (19bf8 <SysTick_Handler+0x30>)
   19bd0:	4798      	blx	r3
   19bd2:	0003      	movs	r3, r0
   19bd4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19bd6:	4b09      	ldr	r3, [pc, #36]	; (19bfc <SysTick_Handler+0x34>)
   19bd8:	4798      	blx	r3
   19bda:	1e03      	subs	r3, r0, #0
   19bdc:	d003      	beq.n	19be6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   19bde:	4b08      	ldr	r3, [pc, #32]	; (19c00 <SysTick_Handler+0x38>)
   19be0:	2280      	movs	r2, #128	; 0x80
   19be2:	0552      	lsls	r2, r2, #21
   19be4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19be6:	687b      	ldr	r3, [r7, #4]
   19be8:	0018      	movs	r0, r3
   19bea:	4b06      	ldr	r3, [pc, #24]	; (19c04 <SysTick_Handler+0x3c>)
   19bec:	4798      	blx	r3
}
   19bee:	46c0      	nop			; (mov r8, r8)
   19bf0:	46bd      	mov	sp, r7
   19bf2:	b002      	add	sp, #8
   19bf4:	bd80      	pop	{r7, pc}
   19bf6:	46c0      	nop			; (mov r8, r8)
   19bf8:	00019b6d 	.word	0x00019b6d
   19bfc:	0001bf75 	.word	0x0001bf75
   19c00:	e000ed04 	.word	0xe000ed04
   19c04:	00019b79 	.word	0x00019b79

00019c08 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19c08:	b5b0      	push	{r4, r5, r7, lr}
   19c0a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   19c0c:	4b0b      	ldr	r3, [pc, #44]	; (19c3c <prvSetupTimerInterrupt+0x34>)
   19c0e:	2200      	movs	r2, #0
   19c10:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   19c12:	4b0b      	ldr	r3, [pc, #44]	; (19c40 <prvSetupTimerInterrupt+0x38>)
   19c14:	2200      	movs	r2, #0
   19c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   19c18:	4c0a      	ldr	r4, [pc, #40]	; (19c44 <prvSetupTimerInterrupt+0x3c>)
   19c1a:	2000      	movs	r0, #0
   19c1c:	4b0a      	ldr	r3, [pc, #40]	; (19c48 <prvSetupTimerInterrupt+0x40>)
   19c1e:	4798      	blx	r3
   19c20:	4b0a      	ldr	r3, [pc, #40]	; (19c4c <prvSetupTimerInterrupt+0x44>)
   19c22:	22fa      	movs	r2, #250	; 0xfa
   19c24:	0091      	lsls	r1, r2, #2
   19c26:	4798      	blx	r3
   19c28:	0003      	movs	r3, r0
   19c2a:	3b01      	subs	r3, #1
   19c2c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   19c2e:	4b03      	ldr	r3, [pc, #12]	; (19c3c <prvSetupTimerInterrupt+0x34>)
   19c30:	2207      	movs	r2, #7
   19c32:	601a      	str	r2, [r3, #0]
}
   19c34:	46c0      	nop			; (mov r8, r8)
   19c36:	46bd      	mov	sp, r7
   19c38:	bdb0      	pop	{r4, r5, r7, pc}
   19c3a:	46c0      	nop			; (mov r8, r8)
   19c3c:	e000e010 	.word	0xe000e010
   19c40:	e000e018 	.word	0xe000e018
   19c44:	e000e014 	.word	0xe000e014
   19c48:	00029761 	.word	0x00029761
   19c4c:	00032389 	.word	0x00032389

00019c50 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19c50:	b580      	push	{r7, lr}
   19c52:	b084      	sub	sp, #16
   19c54:	af00      	add	r7, sp, #0
   19c56:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19c58:	2300      	movs	r3, #0
   19c5a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   19c5c:	687b      	ldr	r3, [r7, #4]
   19c5e:	2207      	movs	r2, #7
   19c60:	4013      	ands	r3, r2
   19c62:	d004      	beq.n	19c6e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   19c64:	687b      	ldr	r3, [r7, #4]
   19c66:	2207      	movs	r2, #7
   19c68:	4393      	bics	r3, r2
   19c6a:	3308      	adds	r3, #8
   19c6c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   19c6e:	4b21      	ldr	r3, [pc, #132]	; (19cf4 <pvPortMalloc+0xa4>)
   19c70:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   19c72:	4b21      	ldr	r3, [pc, #132]	; (19cf8 <pvPortMalloc+0xa8>)
   19c74:	681b      	ldr	r3, [r3, #0]
   19c76:	2b00      	cmp	r3, #0
   19c78:	d105      	bne.n	19c86 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   19c7a:	4b20      	ldr	r3, [pc, #128]	; (19cfc <pvPortMalloc+0xac>)
   19c7c:	2207      	movs	r2, #7
   19c7e:	4393      	bics	r3, r2
   19c80:	001a      	movs	r2, r3
   19c82:	4b1d      	ldr	r3, [pc, #116]	; (19cf8 <pvPortMalloc+0xa8>)
   19c84:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19c86:	4b1e      	ldr	r3, [pc, #120]	; (19d00 <pvPortMalloc+0xb0>)
   19c88:	681a      	ldr	r2, [r3, #0]
   19c8a:	687b      	ldr	r3, [r7, #4]
   19c8c:	18d3      	adds	r3, r2, r3
   19c8e:	4a1d      	ldr	r2, [pc, #116]	; (19d04 <pvPortMalloc+0xb4>)
   19c90:	4293      	cmp	r3, r2
   19c92:	d813      	bhi.n	19cbc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   19c94:	4b1a      	ldr	r3, [pc, #104]	; (19d00 <pvPortMalloc+0xb0>)
   19c96:	681a      	ldr	r2, [r3, #0]
   19c98:	687b      	ldr	r3, [r7, #4]
   19c9a:	18d2      	adds	r2, r2, r3
   19c9c:	4b18      	ldr	r3, [pc, #96]	; (19d00 <pvPortMalloc+0xb0>)
   19c9e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19ca0:	429a      	cmp	r2, r3
   19ca2:	d90b      	bls.n	19cbc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   19ca4:	4b14      	ldr	r3, [pc, #80]	; (19cf8 <pvPortMalloc+0xa8>)
   19ca6:	681a      	ldr	r2, [r3, #0]
   19ca8:	4b15      	ldr	r3, [pc, #84]	; (19d00 <pvPortMalloc+0xb0>)
   19caa:	681b      	ldr	r3, [r3, #0]
   19cac:	18d3      	adds	r3, r2, r3
   19cae:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   19cb0:	4b13      	ldr	r3, [pc, #76]	; (19d00 <pvPortMalloc+0xb0>)
   19cb2:	681a      	ldr	r2, [r3, #0]
   19cb4:	687b      	ldr	r3, [r7, #4]
   19cb6:	18d2      	adds	r2, r2, r3
   19cb8:	4b11      	ldr	r3, [pc, #68]	; (19d00 <pvPortMalloc+0xb0>)
   19cba:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   19cbc:	68fb      	ldr	r3, [r7, #12]
   19cbe:	2b00      	cmp	r3, #0
   19cc0:	d006      	beq.n	19cd0 <pvPortMalloc+0x80>
   19cc2:	68fb      	ldr	r3, [r7, #12]
   19cc4:	687a      	ldr	r2, [r7, #4]
   19cc6:	0019      	movs	r1, r3
   19cc8:	2094      	movs	r0, #148	; 0x94
   19cca:	4b0f      	ldr	r3, [pc, #60]	; (19d08 <pvPortMalloc+0xb8>)
   19ccc:	4798      	blx	r3
   19cce:	e005      	b.n	19cdc <pvPortMalloc+0x8c>
   19cd0:	68fb      	ldr	r3, [r7, #12]
   19cd2:	687a      	ldr	r2, [r7, #4]
   19cd4:	0019      	movs	r1, r3
   19cd6:	20e8      	movs	r0, #232	; 0xe8
   19cd8:	4b0b      	ldr	r3, [pc, #44]	; (19d08 <pvPortMalloc+0xb8>)
   19cda:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   19cdc:	4b0b      	ldr	r3, [pc, #44]	; (19d0c <pvPortMalloc+0xbc>)
   19cde:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   19ce0:	68fb      	ldr	r3, [r7, #12]
   19ce2:	2b00      	cmp	r3, #0
   19ce4:	d101      	bne.n	19cea <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   19ce6:	4b0a      	ldr	r3, [pc, #40]	; (19d10 <pvPortMalloc+0xc0>)
   19ce8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   19cea:	68fb      	ldr	r3, [r7, #12]
}
   19cec:	0018      	movs	r0, r3
   19cee:	46bd      	mov	sp, r7
   19cf0:	b004      	add	sp, #16
   19cf2:	bd80      	pop	{r7, pc}
   19cf4:	0001bdd1 	.word	0x0001bdd1
   19cf8:	20003f34 	.word	0x20003f34
   19cfc:	20000c70 	.word	0x20000c70
   19d00:	20003f30 	.word	0x20003f30
   19d04:	000032bf 	.word	0x000032bf
   19d08:	000183bd 	.word	0x000183bd
   19d0c:	0001bde9 	.word	0x0001bde9
   19d10:	00032359 	.word	0x00032359

00019d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   19d14:	b580      	push	{r7, lr}
   19d16:	b082      	sub	sp, #8
   19d18:	af00      	add	r7, sp, #0
   19d1a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   19d1c:	687b      	ldr	r3, [r7, #4]
   19d1e:	2b00      	cmp	r3, #0
   19d20:	d001      	beq.n	19d26 <vPortFree+0x12>
   19d22:	b672      	cpsid	i
   19d24:	e7fe      	b.n	19d24 <vPortFree+0x10>
}
   19d26:	46c0      	nop			; (mov r8, r8)
   19d28:	46bd      	mov	sp, r7
   19d2a:	b002      	add	sp, #8
   19d2c:	bd80      	pop	{r7, pc}
	...

00019d30 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   19d30:	b580      	push	{r7, lr}
   19d32:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   19d34:	4b03      	ldr	r3, [pc, #12]	; (19d44 <xPortGetFreeHeapSize+0x14>)
   19d36:	681b      	ldr	r3, [r3, #0]
   19d38:	22cb      	movs	r2, #203	; 0xcb
   19d3a:	0192      	lsls	r2, r2, #6
   19d3c:	1ad3      	subs	r3, r2, r3
}
   19d3e:	0018      	movs	r0, r3
   19d40:	46bd      	mov	sp, r7
   19d42:	bd80      	pop	{r7, pc}
   19d44:	20003f30 	.word	0x20003f30

00019d48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   19d48:	b580      	push	{r7, lr}
   19d4a:	b084      	sub	sp, #16
   19d4c:	af00      	add	r7, sp, #0
   19d4e:	6078      	str	r0, [r7, #4]
   19d50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19d52:	687b      	ldr	r3, [r7, #4]
   19d54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   19d56:	68fb      	ldr	r3, [r7, #12]
   19d58:	2b00      	cmp	r3, #0
   19d5a:	d101      	bne.n	19d60 <xQueueGenericReset+0x18>
   19d5c:	b672      	cpsid	i
   19d5e:	e7fe      	b.n	19d5e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   19d60:	4b23      	ldr	r3, [pc, #140]	; (19df0 <xQueueGenericReset+0xa8>)
   19d62:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   19d64:	68fb      	ldr	r3, [r7, #12]
   19d66:	681a      	ldr	r2, [r3, #0]
   19d68:	68fb      	ldr	r3, [r7, #12]
   19d6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   19d6c:	68fb      	ldr	r3, [r7, #12]
   19d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19d70:	434b      	muls	r3, r1
   19d72:	18d2      	adds	r2, r2, r3
   19d74:	68fb      	ldr	r3, [r7, #12]
   19d76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   19d78:	68fb      	ldr	r3, [r7, #12]
   19d7a:	2200      	movs	r2, #0
   19d7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   19d7e:	68fb      	ldr	r3, [r7, #12]
   19d80:	681a      	ldr	r2, [r3, #0]
   19d82:	68fb      	ldr	r3, [r7, #12]
   19d84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   19d86:	68fb      	ldr	r3, [r7, #12]
   19d88:	681a      	ldr	r2, [r3, #0]
   19d8a:	68fb      	ldr	r3, [r7, #12]
   19d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19d8e:	1e59      	subs	r1, r3, #1
   19d90:	68fb      	ldr	r3, [r7, #12]
   19d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19d94:	434b      	muls	r3, r1
   19d96:	18d2      	adds	r2, r2, r3
   19d98:	68fb      	ldr	r3, [r7, #12]
   19d9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   19d9c:	68fb      	ldr	r3, [r7, #12]
   19d9e:	2244      	movs	r2, #68	; 0x44
   19da0:	21ff      	movs	r1, #255	; 0xff
   19da2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   19da4:	68fb      	ldr	r3, [r7, #12]
   19da6:	2245      	movs	r2, #69	; 0x45
   19da8:	21ff      	movs	r1, #255	; 0xff
   19daa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   19dac:	683b      	ldr	r3, [r7, #0]
   19dae:	2b00      	cmp	r3, #0
   19db0:	d10d      	bne.n	19dce <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19db2:	68fb      	ldr	r3, [r7, #12]
   19db4:	691b      	ldr	r3, [r3, #16]
   19db6:	2b00      	cmp	r3, #0
   19db8:	d013      	beq.n	19de2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   19dba:	68fb      	ldr	r3, [r7, #12]
   19dbc:	3310      	adds	r3, #16
   19dbe:	0018      	movs	r0, r3
   19dc0:	4b0c      	ldr	r3, [pc, #48]	; (19df4 <xQueueGenericReset+0xac>)
   19dc2:	4798      	blx	r3
   19dc4:	1e03      	subs	r3, r0, #0
   19dc6:	d00c      	beq.n	19de2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   19dc8:	4b0b      	ldr	r3, [pc, #44]	; (19df8 <xQueueGenericReset+0xb0>)
   19dca:	4798      	blx	r3
   19dcc:	e009      	b.n	19de2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   19dce:	68fb      	ldr	r3, [r7, #12]
   19dd0:	3310      	adds	r3, #16
   19dd2:	0018      	movs	r0, r3
   19dd4:	4b09      	ldr	r3, [pc, #36]	; (19dfc <xQueueGenericReset+0xb4>)
   19dd6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   19dd8:	68fb      	ldr	r3, [r7, #12]
   19dda:	3324      	adds	r3, #36	; 0x24
   19ddc:	0018      	movs	r0, r3
   19dde:	4b07      	ldr	r3, [pc, #28]	; (19dfc <xQueueGenericReset+0xb4>)
   19de0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   19de2:	4b07      	ldr	r3, [pc, #28]	; (19e00 <xQueueGenericReset+0xb8>)
   19de4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   19de6:	2301      	movs	r3, #1
}
   19de8:	0018      	movs	r0, r3
   19dea:	46bd      	mov	sp, r7
   19dec:	b004      	add	sp, #16
   19dee:	bd80      	pop	{r7, pc}
   19df0:	00019b19 	.word	0x00019b19
   19df4:	0001c3a9 	.word	0x0001c3a9
   19df8:	00019b01 	.word	0x00019b01
   19dfc:	0001988d 	.word	0x0001988d
   19e00:	00019b3d 	.word	0x00019b3d

00019e04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   19e04:	b590      	push	{r4, r7, lr}
   19e06:	b08b      	sub	sp, #44	; 0x2c
   19e08:	af02      	add	r7, sp, #8
   19e0a:	60f8      	str	r0, [r7, #12]
   19e0c:	60b9      	str	r1, [r7, #8]
   19e0e:	1dfb      	adds	r3, r7, #7
   19e10:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   19e12:	68fb      	ldr	r3, [r7, #12]
   19e14:	2b00      	cmp	r3, #0
   19e16:	d101      	bne.n	19e1c <xQueueGenericCreate+0x18>
   19e18:	b672      	cpsid	i
   19e1a:	e7fe      	b.n	19e1a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   19e1c:	68bb      	ldr	r3, [r7, #8]
   19e1e:	2b00      	cmp	r3, #0
   19e20:	d102      	bne.n	19e28 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   19e22:	2300      	movs	r3, #0
   19e24:	61fb      	str	r3, [r7, #28]
   19e26:	e003      	b.n	19e30 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19e28:	68fb      	ldr	r3, [r7, #12]
   19e2a:	68ba      	ldr	r2, [r7, #8]
   19e2c:	4353      	muls	r3, r2
   19e2e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   19e30:	69fb      	ldr	r3, [r7, #28]
   19e32:	3354      	adds	r3, #84	; 0x54
   19e34:	0018      	movs	r0, r3
   19e36:	4b19      	ldr	r3, [pc, #100]	; (19e9c <xQueueGenericCreate+0x98>)
   19e38:	4798      	blx	r3
   19e3a:	0003      	movs	r3, r0
   19e3c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   19e3e:	69bb      	ldr	r3, [r7, #24]
   19e40:	2b00      	cmp	r3, #0
   19e42:	d00d      	beq.n	19e60 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   19e44:	69bb      	ldr	r3, [r7, #24]
   19e46:	3354      	adds	r3, #84	; 0x54
   19e48:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   19e4a:	1dfb      	adds	r3, r7, #7
   19e4c:	781c      	ldrb	r4, [r3, #0]
   19e4e:	697a      	ldr	r2, [r7, #20]
   19e50:	68b9      	ldr	r1, [r7, #8]
   19e52:	68f8      	ldr	r0, [r7, #12]
   19e54:	69bb      	ldr	r3, [r7, #24]
   19e56:	9300      	str	r3, [sp, #0]
   19e58:	0023      	movs	r3, r4
   19e5a:	4c11      	ldr	r4, [pc, #68]	; (19ea0 <xQueueGenericCreate+0x9c>)
   19e5c:	47a0      	blx	r4
   19e5e:	e017      	b.n	19e90 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   19e60:	4b10      	ldr	r3, [pc, #64]	; (19ea4 <xQueueGenericCreate+0xa0>)
   19e62:	4798      	blx	r3
   19e64:	0003      	movs	r3, r0
   19e66:	0018      	movs	r0, r3
   19e68:	4b0f      	ldr	r3, [pc, #60]	; (19ea8 <xQueueGenericCreate+0xa4>)
   19e6a:	4798      	blx	r3
   19e6c:	0003      	movs	r3, r0
   19e6e:	001a      	movs	r2, r3
   19e70:	4b0e      	ldr	r3, [pc, #56]	; (19eac <xQueueGenericCreate+0xa8>)
   19e72:	881b      	ldrh	r3, [r3, #0]
   19e74:	4013      	ands	r3, r2
   19e76:	b29b      	uxth	r3, r3
   19e78:	2b00      	cmp	r3, #0
   19e7a:	d009      	beq.n	19e90 <xQueueGenericCreate+0x8c>
   19e7c:	1dfb      	adds	r3, r7, #7
   19e7e:	781b      	ldrb	r3, [r3, #0]
   19e80:	4a0b      	ldr	r2, [pc, #44]	; (19eb0 <xQueueGenericCreate+0xac>)
   19e82:	5cd3      	ldrb	r3, [r2, r3]
   19e84:	3340      	adds	r3, #64	; 0x40
   19e86:	b2db      	uxtb	r3, r3
   19e88:	2100      	movs	r1, #0
   19e8a:	0018      	movs	r0, r3
   19e8c:	4b09      	ldr	r3, [pc, #36]	; (19eb4 <xQueueGenericCreate+0xb0>)
   19e8e:	4798      	blx	r3
		}

		return pxNewQueue;
   19e90:	69bb      	ldr	r3, [r7, #24]
	}
   19e92:	0018      	movs	r0, r3
   19e94:	46bd      	mov	sp, r7
   19e96:	b009      	add	sp, #36	; 0x24
   19e98:	bd90      	pop	{r4, r7, pc}
   19e9a:	46c0      	nop			; (mov r8, r8)
   19e9c:	00019c51 	.word	0x00019c51
   19ea0:	00019eb9 	.word	0x00019eb9
   19ea4:	00017db1 	.word	0x00017db1
   19ea8:	00017b15 	.word	0x00017b15
   19eac:	200000f8 	.word	0x200000f8
   19eb0:	200000ec 	.word	0x200000ec
   19eb4:	00018815 	.word	0x00018815

00019eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   19eb8:	b5b0      	push	{r4, r5, r7, lr}
   19eba:	b084      	sub	sp, #16
   19ebc:	af00      	add	r7, sp, #0
   19ebe:	60f8      	str	r0, [r7, #12]
   19ec0:	60b9      	str	r1, [r7, #8]
   19ec2:	607a      	str	r2, [r7, #4]
   19ec4:	001a      	movs	r2, r3
   19ec6:	1cfb      	adds	r3, r7, #3
   19ec8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   19eca:	68bb      	ldr	r3, [r7, #8]
   19ecc:	2b00      	cmp	r3, #0
   19ece:	d103      	bne.n	19ed8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   19ed0:	6a3b      	ldr	r3, [r7, #32]
   19ed2:	6a3a      	ldr	r2, [r7, #32]
   19ed4:	601a      	str	r2, [r3, #0]
   19ed6:	e002      	b.n	19ede <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   19ed8:	6a3b      	ldr	r3, [r7, #32]
   19eda:	687a      	ldr	r2, [r7, #4]
   19edc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   19ede:	6a3b      	ldr	r3, [r7, #32]
   19ee0:	68fa      	ldr	r2, [r7, #12]
   19ee2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   19ee4:	6a3b      	ldr	r3, [r7, #32]
   19ee6:	68ba      	ldr	r2, [r7, #8]
   19ee8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   19eea:	6a3b      	ldr	r3, [r7, #32]
   19eec:	2101      	movs	r1, #1
   19eee:	0018      	movs	r0, r3
   19ef0:	4b41      	ldr	r3, [pc, #260]	; (19ff8 <prvInitialiseNewQueue+0x140>)
   19ef2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   19ef4:	6a3b      	ldr	r3, [r7, #32]
   19ef6:	1cfa      	adds	r2, r7, #3
   19ef8:	2150      	movs	r1, #80	; 0x50
   19efa:	7812      	ldrb	r2, [r2, #0]
   19efc:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   19efe:	6a3b      	ldr	r3, [r7, #32]
   19f00:	2200      	movs	r2, #0
   19f02:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   19f04:	6a3b      	ldr	r3, [r7, #32]
   19f06:	0018      	movs	r0, r3
   19f08:	4b3c      	ldr	r3, [pc, #240]	; (19ffc <prvInitialiseNewQueue+0x144>)
   19f0a:	4798      	blx	r3
   19f0c:	0003      	movs	r3, r0
   19f0e:	001a      	movs	r2, r3
   19f10:	4b3b      	ldr	r3, [pc, #236]	; (1a000 <prvInitialiseNewQueue+0x148>)
   19f12:	5c9b      	ldrb	r3, [r3, r2]
   19f14:	0018      	movs	r0, r3
   19f16:	4b3b      	ldr	r3, [pc, #236]	; (1a004 <prvInitialiseNewQueue+0x14c>)
   19f18:	4798      	blx	r3
   19f1a:	0003      	movs	r3, r0
   19f1c:	b29a      	uxth	r2, r3
   19f1e:	6a3b      	ldr	r3, [r7, #32]
   19f20:	0011      	movs	r1, r2
   19f22:	0018      	movs	r0, r3
   19f24:	4b38      	ldr	r3, [pc, #224]	; (1a008 <prvInitialiseNewQueue+0x150>)
   19f26:	4798      	blx	r3
   19f28:	4b38      	ldr	r3, [pc, #224]	; (1a00c <prvInitialiseNewQueue+0x154>)
   19f2a:	881a      	ldrh	r2, [r3, #0]
   19f2c:	6a3b      	ldr	r3, [r7, #32]
   19f2e:	0011      	movs	r1, r2
   19f30:	0018      	movs	r0, r3
   19f32:	4b37      	ldr	r3, [pc, #220]	; (1a010 <prvInitialiseNewQueue+0x158>)
   19f34:	4798      	blx	r3
   19f36:	6a3b      	ldr	r3, [r7, #32]
   19f38:	0018      	movs	r0, r3
   19f3a:	4b30      	ldr	r3, [pc, #192]	; (19ffc <prvInitialiseNewQueue+0x144>)
   19f3c:	4798      	blx	r3
   19f3e:	0003      	movs	r3, r0
   19f40:	001a      	movs	r2, r3
   19f42:	4b2f      	ldr	r3, [pc, #188]	; (1a000 <prvInitialiseNewQueue+0x148>)
   19f44:	5c9c      	ldrb	r4, [r3, r2]
   19f46:	6a3b      	ldr	r3, [r7, #32]
   19f48:	0018      	movs	r0, r3
   19f4a:	4b32      	ldr	r3, [pc, #200]	; (1a014 <prvInitialiseNewQueue+0x15c>)
   19f4c:	4798      	blx	r3
   19f4e:	0003      	movs	r3, r0
   19f50:	b2db      	uxtb	r3, r3
   19f52:	0019      	movs	r1, r3
   19f54:	0020      	movs	r0, r4
   19f56:	4b30      	ldr	r3, [pc, #192]	; (1a018 <prvInitialiseNewQueue+0x160>)
   19f58:	4798      	blx	r3
   19f5a:	4b30      	ldr	r3, [pc, #192]	; (1a01c <prvInitialiseNewQueue+0x164>)
   19f5c:	4798      	blx	r3
   19f5e:	0003      	movs	r3, r0
   19f60:	0018      	movs	r0, r3
   19f62:	4b2f      	ldr	r3, [pc, #188]	; (1a020 <prvInitialiseNewQueue+0x168>)
   19f64:	4798      	blx	r3
   19f66:	0003      	movs	r3, r0
   19f68:	001a      	movs	r2, r3
   19f6a:	4b2e      	ldr	r3, [pc, #184]	; (1a024 <prvInitialiseNewQueue+0x16c>)
   19f6c:	881b      	ldrh	r3, [r3, #0]
   19f6e:	4013      	ands	r3, r2
   19f70:	b29b      	uxth	r3, r3
   19f72:	2b00      	cmp	r3, #0
   19f74:	d029      	beq.n	19fca <prvInitialiseNewQueue+0x112>
   19f76:	6a3b      	ldr	r3, [r7, #32]
   19f78:	0018      	movs	r0, r3
   19f7a:	4b2b      	ldr	r3, [pc, #172]	; (1a028 <prvInitialiseNewQueue+0x170>)
   19f7c:	4798      	blx	r3
   19f7e:	0003      	movs	r3, r0
   19f80:	001a      	movs	r2, r3
   19f82:	4b28      	ldr	r3, [pc, #160]	; (1a024 <prvInitialiseNewQueue+0x16c>)
   19f84:	881b      	ldrh	r3, [r3, #0]
   19f86:	4013      	ands	r3, r2
   19f88:	b29b      	uxth	r3, r3
   19f8a:	2b00      	cmp	r3, #0
   19f8c:	d01d      	beq.n	19fca <prvInitialiseNewQueue+0x112>
   19f8e:	6a3b      	ldr	r3, [r7, #32]
   19f90:	0018      	movs	r0, r3
   19f92:	4b1a      	ldr	r3, [pc, #104]	; (19ffc <prvInitialiseNewQueue+0x144>)
   19f94:	4798      	blx	r3
   19f96:	0003      	movs	r3, r0
   19f98:	001a      	movs	r2, r3
   19f9a:	4b19      	ldr	r3, [pc, #100]	; (1a000 <prvInitialiseNewQueue+0x148>)
   19f9c:	5c9b      	ldrb	r3, [r3, r2]
   19f9e:	3318      	adds	r3, #24
   19fa0:	b2db      	uxtb	r3, r3
   19fa2:	001d      	movs	r5, r3
   19fa4:	6a3b      	ldr	r3, [r7, #32]
   19fa6:	0018      	movs	r0, r3
   19fa8:	4b14      	ldr	r3, [pc, #80]	; (19ffc <prvInitialiseNewQueue+0x144>)
   19faa:	4798      	blx	r3
   19fac:	0003      	movs	r3, r0
   19fae:	001a      	movs	r2, r3
   19fb0:	4b13      	ldr	r3, [pc, #76]	; (1a000 <prvInitialiseNewQueue+0x148>)
   19fb2:	5c9c      	ldrb	r4, [r3, r2]
   19fb4:	6a3b      	ldr	r3, [r7, #32]
   19fb6:	0018      	movs	r0, r3
   19fb8:	4b16      	ldr	r3, [pc, #88]	; (1a014 <prvInitialiseNewQueue+0x15c>)
   19fba:	4798      	blx	r3
   19fbc:	0003      	movs	r3, r0
   19fbe:	b2db      	uxtb	r3, r3
   19fc0:	001a      	movs	r2, r3
   19fc2:	0021      	movs	r1, r4
   19fc4:	0028      	movs	r0, r5
   19fc6:	4b19      	ldr	r3, [pc, #100]	; (1a02c <prvInitialiseNewQueue+0x174>)
   19fc8:	4798      	blx	r3
   19fca:	6a3b      	ldr	r3, [r7, #32]
   19fcc:	0018      	movs	r0, r3
   19fce:	4b0b      	ldr	r3, [pc, #44]	; (19ffc <prvInitialiseNewQueue+0x144>)
   19fd0:	4798      	blx	r3
   19fd2:	0003      	movs	r3, r0
   19fd4:	001a      	movs	r2, r3
   19fd6:	4b0a      	ldr	r3, [pc, #40]	; (1a000 <prvInitialiseNewQueue+0x148>)
   19fd8:	5c9c      	ldrb	r4, [r3, r2]
   19fda:	6a3b      	ldr	r3, [r7, #32]
   19fdc:	0018      	movs	r0, r3
   19fde:	4b0d      	ldr	r3, [pc, #52]	; (1a014 <prvInitialiseNewQueue+0x15c>)
   19fe0:	4798      	blx	r3
   19fe2:	0003      	movs	r3, r0
   19fe4:	b2db      	uxtb	r3, r3
   19fe6:	2200      	movs	r2, #0
   19fe8:	0019      	movs	r1, r3
   19fea:	0020      	movs	r0, r4
   19fec:	4b10      	ldr	r3, [pc, #64]	; (1a030 <prvInitialiseNewQueue+0x178>)
   19fee:	4798      	blx	r3
}
   19ff0:	46c0      	nop			; (mov r8, r8)
   19ff2:	46bd      	mov	sp, r7
   19ff4:	b004      	add	sp, #16
   19ff6:	bdb0      	pop	{r4, r5, r7, pc}
   19ff8:	00019d49 	.word	0x00019d49
   19ffc:	00017ad5 	.word	0x00017ad5
   1a000:	200000ec 	.word	0x200000ec
   1a004:	00019095 	.word	0x00019095
   1a008:	00017bf9 	.word	0x00017bf9
   1a00c:	200000fa 	.word	0x200000fa
   1a010:	00017c35 	.word	0x00017c35
   1a014:	00017bb5 	.word	0x00017bb5
   1a018:	0001922d 	.word	0x0001922d
   1a01c:	00017db1 	.word	0x00017db1
   1a020:	00017b15 	.word	0x00017b15
   1a024:	200000f8 	.word	0x200000f8
   1a028:	00017bd5 	.word	0x00017bd5
   1a02c:	0001850d 	.word	0x0001850d
   1a030:	00018b69 	.word	0x00018b69

0001a034 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a034:	b590      	push	{r4, r7, lr}
   1a036:	b083      	sub	sp, #12
   1a038:	af00      	add	r7, sp, #0
   1a03a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a03c:	687b      	ldr	r3, [r7, #4]
   1a03e:	2b00      	cmp	r3, #0
   1a040:	d00e      	beq.n	1a060 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a042:	687b      	ldr	r3, [r7, #4]
   1a044:	2200      	movs	r2, #0
   1a046:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a048:	687b      	ldr	r3, [r7, #4]
   1a04a:	2200      	movs	r2, #0
   1a04c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a04e:	687b      	ldr	r3, [r7, #4]
   1a050:	2200      	movs	r2, #0
   1a052:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a054:	6878      	ldr	r0, [r7, #4]
   1a056:	2300      	movs	r3, #0
   1a058:	2200      	movs	r2, #0
   1a05a:	2100      	movs	r1, #0
   1a05c:	4c02      	ldr	r4, [pc, #8]	; (1a068 <prvInitialiseMutex+0x34>)
   1a05e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a060:	46c0      	nop			; (mov r8, r8)
   1a062:	46bd      	mov	sp, r7
   1a064:	b003      	add	sp, #12
   1a066:	bd90      	pop	{r4, r7, pc}
   1a068:	0001a0ad 	.word	0x0001a0ad

0001a06c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a06c:	b580      	push	{r7, lr}
   1a06e:	b086      	sub	sp, #24
   1a070:	af00      	add	r7, sp, #0
   1a072:	0002      	movs	r2, r0
   1a074:	1dfb      	adds	r3, r7, #7
   1a076:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a078:	2301      	movs	r3, #1
   1a07a:	617b      	str	r3, [r7, #20]
   1a07c:	2300      	movs	r3, #0
   1a07e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a080:	1dfb      	adds	r3, r7, #7
   1a082:	781a      	ldrb	r2, [r3, #0]
   1a084:	6939      	ldr	r1, [r7, #16]
   1a086:	697b      	ldr	r3, [r7, #20]
   1a088:	0018      	movs	r0, r3
   1a08a:	4b06      	ldr	r3, [pc, #24]	; (1a0a4 <xQueueCreateMutex+0x38>)
   1a08c:	4798      	blx	r3
   1a08e:	0003      	movs	r3, r0
   1a090:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a092:	68fb      	ldr	r3, [r7, #12]
   1a094:	0018      	movs	r0, r3
   1a096:	4b04      	ldr	r3, [pc, #16]	; (1a0a8 <xQueueCreateMutex+0x3c>)
   1a098:	4798      	blx	r3

		return pxNewQueue;
   1a09a:	68fb      	ldr	r3, [r7, #12]
	}
   1a09c:	0018      	movs	r0, r3
   1a09e:	46bd      	mov	sp, r7
   1a0a0:	b006      	add	sp, #24
   1a0a2:	bd80      	pop	{r7, pc}
   1a0a4:	00019e05 	.word	0x00019e05
   1a0a8:	0001a035 	.word	0x0001a035

0001a0ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a0ac:	b5b0      	push	{r4, r5, r7, lr}
   1a0ae:	b08a      	sub	sp, #40	; 0x28
   1a0b0:	af00      	add	r7, sp, #0
   1a0b2:	60f8      	str	r0, [r7, #12]
   1a0b4:	60b9      	str	r1, [r7, #8]
   1a0b6:	607a      	str	r2, [r7, #4]
   1a0b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a0ba:	2300      	movs	r3, #0
   1a0bc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a0be:	68fb      	ldr	r3, [r7, #12]
   1a0c0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a0c2:	6a3b      	ldr	r3, [r7, #32]
   1a0c4:	2b00      	cmp	r3, #0
   1a0c6:	d101      	bne.n	1a0cc <xQueueGenericSend+0x20>
   1a0c8:	b672      	cpsid	i
   1a0ca:	e7fe      	b.n	1a0ca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a0cc:	68bb      	ldr	r3, [r7, #8]
   1a0ce:	2b00      	cmp	r3, #0
   1a0d0:	d103      	bne.n	1a0da <xQueueGenericSend+0x2e>
   1a0d2:	6a3b      	ldr	r3, [r7, #32]
   1a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a0d6:	2b00      	cmp	r3, #0
   1a0d8:	d101      	bne.n	1a0de <xQueueGenericSend+0x32>
   1a0da:	2301      	movs	r3, #1
   1a0dc:	e000      	b.n	1a0e0 <xQueueGenericSend+0x34>
   1a0de:	2300      	movs	r3, #0
   1a0e0:	2b00      	cmp	r3, #0
   1a0e2:	d101      	bne.n	1a0e8 <xQueueGenericSend+0x3c>
   1a0e4:	b672      	cpsid	i
   1a0e6:	e7fe      	b.n	1a0e6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a0e8:	683b      	ldr	r3, [r7, #0]
   1a0ea:	2b02      	cmp	r3, #2
   1a0ec:	d103      	bne.n	1a0f6 <xQueueGenericSend+0x4a>
   1a0ee:	6a3b      	ldr	r3, [r7, #32]
   1a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a0f2:	2b01      	cmp	r3, #1
   1a0f4:	d101      	bne.n	1a0fa <xQueueGenericSend+0x4e>
   1a0f6:	2301      	movs	r3, #1
   1a0f8:	e000      	b.n	1a0fc <xQueueGenericSend+0x50>
   1a0fa:	2300      	movs	r3, #0
   1a0fc:	2b00      	cmp	r3, #0
   1a0fe:	d101      	bne.n	1a104 <xQueueGenericSend+0x58>
   1a100:	b672      	cpsid	i
   1a102:	e7fe      	b.n	1a102 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a104:	4bbc      	ldr	r3, [pc, #752]	; (1a3f8 <xQueueGenericSend+0x34c>)
   1a106:	4798      	blx	r3
   1a108:	1e03      	subs	r3, r0, #0
   1a10a:	d102      	bne.n	1a112 <xQueueGenericSend+0x66>
   1a10c:	687b      	ldr	r3, [r7, #4]
   1a10e:	2b00      	cmp	r3, #0
   1a110:	d101      	bne.n	1a116 <xQueueGenericSend+0x6a>
   1a112:	2301      	movs	r3, #1
   1a114:	e000      	b.n	1a118 <xQueueGenericSend+0x6c>
   1a116:	2300      	movs	r3, #0
   1a118:	2b00      	cmp	r3, #0
   1a11a:	d101      	bne.n	1a120 <xQueueGenericSend+0x74>
   1a11c:	b672      	cpsid	i
   1a11e:	e7fe      	b.n	1a11e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a120:	4bb6      	ldr	r3, [pc, #728]	; (1a3fc <xQueueGenericSend+0x350>)
   1a122:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a124:	6a3b      	ldr	r3, [r7, #32]
   1a126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a128:	6a3b      	ldr	r3, [r7, #32]
   1a12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a12c:	429a      	cmp	r2, r3
   1a12e:	d303      	bcc.n	1a138 <xQueueGenericSend+0x8c>
   1a130:	683b      	ldr	r3, [r7, #0]
   1a132:	2b02      	cmp	r3, #2
   1a134:	d000      	beq.n	1a138 <xQueueGenericSend+0x8c>
   1a136:	e08e      	b.n	1a256 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a138:	4bb1      	ldr	r3, [pc, #708]	; (1a400 <xQueueGenericSend+0x354>)
   1a13a:	4798      	blx	r3
   1a13c:	0003      	movs	r3, r0
   1a13e:	0018      	movs	r0, r3
   1a140:	4bb0      	ldr	r3, [pc, #704]	; (1a404 <xQueueGenericSend+0x358>)
   1a142:	4798      	blx	r3
   1a144:	0003      	movs	r3, r0
   1a146:	001a      	movs	r2, r3
   1a148:	4baf      	ldr	r3, [pc, #700]	; (1a408 <xQueueGenericSend+0x35c>)
   1a14a:	881b      	ldrh	r3, [r3, #0]
   1a14c:	4013      	ands	r3, r2
   1a14e:	b29b      	uxth	r3, r3
   1a150:	2b00      	cmp	r3, #0
   1a152:	d02e      	beq.n	1a1b2 <xQueueGenericSend+0x106>
   1a154:	6a3b      	ldr	r3, [r7, #32]
   1a156:	0018      	movs	r0, r3
   1a158:	4bac      	ldr	r3, [pc, #688]	; (1a40c <xQueueGenericSend+0x360>)
   1a15a:	4798      	blx	r3
   1a15c:	0003      	movs	r3, r0
   1a15e:	001a      	movs	r2, r3
   1a160:	4ba9      	ldr	r3, [pc, #676]	; (1a408 <xQueueGenericSend+0x35c>)
   1a162:	881b      	ldrh	r3, [r3, #0]
   1a164:	4013      	ands	r3, r2
   1a166:	b29b      	uxth	r3, r3
   1a168:	2b00      	cmp	r3, #0
   1a16a:	d022      	beq.n	1a1b2 <xQueueGenericSend+0x106>
   1a16c:	683b      	ldr	r3, [r7, #0]
   1a16e:	2b00      	cmp	r3, #0
   1a170:	d10b      	bne.n	1a18a <xQueueGenericSend+0xde>
   1a172:	6a3b      	ldr	r3, [r7, #32]
   1a174:	0018      	movs	r0, r3
   1a176:	4ba6      	ldr	r3, [pc, #664]	; (1a410 <xQueueGenericSend+0x364>)
   1a178:	4798      	blx	r3
   1a17a:	0003      	movs	r3, r0
   1a17c:	001a      	movs	r2, r3
   1a17e:	4ba5      	ldr	r3, [pc, #660]	; (1a414 <xQueueGenericSend+0x368>)
   1a180:	5c9b      	ldrb	r3, [r3, r2]
   1a182:	3320      	adds	r3, #32
   1a184:	b2db      	uxtb	r3, r3
   1a186:	001d      	movs	r5, r3
   1a188:	e000      	b.n	1a18c <xQueueGenericSend+0xe0>
   1a18a:	2525      	movs	r5, #37	; 0x25
   1a18c:	6a3b      	ldr	r3, [r7, #32]
   1a18e:	0018      	movs	r0, r3
   1a190:	4b9f      	ldr	r3, [pc, #636]	; (1a410 <xQueueGenericSend+0x364>)
   1a192:	4798      	blx	r3
   1a194:	0003      	movs	r3, r0
   1a196:	001a      	movs	r2, r3
   1a198:	4b9e      	ldr	r3, [pc, #632]	; (1a414 <xQueueGenericSend+0x368>)
   1a19a:	5c9c      	ldrb	r4, [r3, r2]
   1a19c:	6a3b      	ldr	r3, [r7, #32]
   1a19e:	0018      	movs	r0, r3
   1a1a0:	4b9d      	ldr	r3, [pc, #628]	; (1a418 <xQueueGenericSend+0x36c>)
   1a1a2:	4798      	blx	r3
   1a1a4:	0003      	movs	r3, r0
   1a1a6:	b2db      	uxtb	r3, r3
   1a1a8:	001a      	movs	r2, r3
   1a1aa:	0021      	movs	r1, r4
   1a1ac:	0028      	movs	r0, r5
   1a1ae:	4b9b      	ldr	r3, [pc, #620]	; (1a41c <xQueueGenericSend+0x370>)
   1a1b0:	4798      	blx	r3
   1a1b2:	6a3b      	ldr	r3, [r7, #32]
   1a1b4:	0018      	movs	r0, r3
   1a1b6:	4b96      	ldr	r3, [pc, #600]	; (1a410 <xQueueGenericSend+0x364>)
   1a1b8:	4798      	blx	r3
   1a1ba:	0003      	movs	r3, r0
   1a1bc:	001a      	movs	r2, r3
   1a1be:	4b95      	ldr	r3, [pc, #596]	; (1a414 <xQueueGenericSend+0x368>)
   1a1c0:	5c9c      	ldrb	r4, [r3, r2]
   1a1c2:	6a3b      	ldr	r3, [r7, #32]
   1a1c4:	0018      	movs	r0, r3
   1a1c6:	4b94      	ldr	r3, [pc, #592]	; (1a418 <xQueueGenericSend+0x36c>)
   1a1c8:	4798      	blx	r3
   1a1ca:	0003      	movs	r3, r0
   1a1cc:	b2dd      	uxtb	r5, r3
   1a1ce:	6a3b      	ldr	r3, [r7, #32]
   1a1d0:	0018      	movs	r0, r3
   1a1d2:	4b8f      	ldr	r3, [pc, #572]	; (1a410 <xQueueGenericSend+0x364>)
   1a1d4:	4798      	blx	r3
   1a1d6:	0003      	movs	r3, r0
   1a1d8:	001a      	movs	r2, r3
   1a1da:	4b8e      	ldr	r3, [pc, #568]	; (1a414 <xQueueGenericSend+0x368>)
   1a1dc:	5c9b      	ldrb	r3, [r3, r2]
   1a1de:	2b02      	cmp	r3, #2
   1a1e0:	d005      	beq.n	1a1ee <xQueueGenericSend+0x142>
   1a1e2:	6a3b      	ldr	r3, [r7, #32]
   1a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a1e6:	b2db      	uxtb	r3, r3
   1a1e8:	3301      	adds	r3, #1
   1a1ea:	b2db      	uxtb	r3, r3
   1a1ec:	e000      	b.n	1a1f0 <xQueueGenericSend+0x144>
   1a1ee:	2300      	movs	r3, #0
   1a1f0:	001a      	movs	r2, r3
   1a1f2:	0029      	movs	r1, r5
   1a1f4:	0020      	movs	r0, r4
   1a1f6:	4b8a      	ldr	r3, [pc, #552]	; (1a420 <xQueueGenericSend+0x374>)
   1a1f8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a1fa:	683a      	ldr	r2, [r7, #0]
   1a1fc:	68b9      	ldr	r1, [r7, #8]
   1a1fe:	6a3b      	ldr	r3, [r7, #32]
   1a200:	0018      	movs	r0, r3
   1a202:	4b88      	ldr	r3, [pc, #544]	; (1a424 <xQueueGenericSend+0x378>)
   1a204:	4798      	blx	r3
   1a206:	0003      	movs	r3, r0
   1a208:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a20a:	6a3b      	ldr	r3, [r7, #32]
   1a20c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a20e:	2b00      	cmp	r3, #0
   1a210:	d00a      	beq.n	1a228 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a212:	683a      	ldr	r2, [r7, #0]
   1a214:	6a3b      	ldr	r3, [r7, #32]
   1a216:	0011      	movs	r1, r2
   1a218:	0018      	movs	r0, r3
   1a21a:	4b83      	ldr	r3, [pc, #524]	; (1a428 <xQueueGenericSend+0x37c>)
   1a21c:	4798      	blx	r3
   1a21e:	1e03      	subs	r3, r0, #0
   1a220:	d015      	beq.n	1a24e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a222:	4b82      	ldr	r3, [pc, #520]	; (1a42c <xQueueGenericSend+0x380>)
   1a224:	4798      	blx	r3
   1a226:	e012      	b.n	1a24e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a228:	6a3b      	ldr	r3, [r7, #32]
   1a22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a22c:	2b00      	cmp	r3, #0
   1a22e:	d009      	beq.n	1a244 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a230:	6a3b      	ldr	r3, [r7, #32]
   1a232:	3324      	adds	r3, #36	; 0x24
   1a234:	0018      	movs	r0, r3
   1a236:	4b7e      	ldr	r3, [pc, #504]	; (1a430 <xQueueGenericSend+0x384>)
   1a238:	4798      	blx	r3
   1a23a:	1e03      	subs	r3, r0, #0
   1a23c:	d007      	beq.n	1a24e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a23e:	4b7b      	ldr	r3, [pc, #492]	; (1a42c <xQueueGenericSend+0x380>)
   1a240:	4798      	blx	r3
   1a242:	e004      	b.n	1a24e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a244:	69fb      	ldr	r3, [r7, #28]
   1a246:	2b00      	cmp	r3, #0
   1a248:	d001      	beq.n	1a24e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a24a:	4b78      	ldr	r3, [pc, #480]	; (1a42c <xQueueGenericSend+0x380>)
   1a24c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a24e:	4b79      	ldr	r3, [pc, #484]	; (1a434 <xQueueGenericSend+0x388>)
   1a250:	4798      	blx	r3
				return pdPASS;
   1a252:	2301      	movs	r3, #1
   1a254:	e142      	b.n	1a4dc <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a256:	687b      	ldr	r3, [r7, #4]
   1a258:	2b00      	cmp	r3, #0
   1a25a:	d140      	bne.n	1a2de <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a25c:	4b75      	ldr	r3, [pc, #468]	; (1a434 <xQueueGenericSend+0x388>)
   1a25e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a260:	4b67      	ldr	r3, [pc, #412]	; (1a400 <xQueueGenericSend+0x354>)
   1a262:	4798      	blx	r3
   1a264:	0003      	movs	r3, r0
   1a266:	0018      	movs	r0, r3
   1a268:	4b66      	ldr	r3, [pc, #408]	; (1a404 <xQueueGenericSend+0x358>)
   1a26a:	4798      	blx	r3
   1a26c:	0003      	movs	r3, r0
   1a26e:	001a      	movs	r2, r3
   1a270:	4b65      	ldr	r3, [pc, #404]	; (1a408 <xQueueGenericSend+0x35c>)
   1a272:	881b      	ldrh	r3, [r3, #0]
   1a274:	4013      	ands	r3, r2
   1a276:	b29b      	uxth	r3, r3
   1a278:	2b00      	cmp	r3, #0
   1a27a:	d02e      	beq.n	1a2da <xQueueGenericSend+0x22e>
   1a27c:	6a3b      	ldr	r3, [r7, #32]
   1a27e:	0018      	movs	r0, r3
   1a280:	4b62      	ldr	r3, [pc, #392]	; (1a40c <xQueueGenericSend+0x360>)
   1a282:	4798      	blx	r3
   1a284:	0003      	movs	r3, r0
   1a286:	001a      	movs	r2, r3
   1a288:	4b5f      	ldr	r3, [pc, #380]	; (1a408 <xQueueGenericSend+0x35c>)
   1a28a:	881b      	ldrh	r3, [r3, #0]
   1a28c:	4013      	ands	r3, r2
   1a28e:	b29b      	uxth	r3, r3
   1a290:	2b00      	cmp	r3, #0
   1a292:	d022      	beq.n	1a2da <xQueueGenericSend+0x22e>
   1a294:	683b      	ldr	r3, [r7, #0]
   1a296:	2b00      	cmp	r3, #0
   1a298:	d10b      	bne.n	1a2b2 <xQueueGenericSend+0x206>
   1a29a:	6a3b      	ldr	r3, [r7, #32]
   1a29c:	0018      	movs	r0, r3
   1a29e:	4b5c      	ldr	r3, [pc, #368]	; (1a410 <xQueueGenericSend+0x364>)
   1a2a0:	4798      	blx	r3
   1a2a2:	0003      	movs	r3, r0
   1a2a4:	001a      	movs	r2, r3
   1a2a6:	4b5b      	ldr	r3, [pc, #364]	; (1a414 <xQueueGenericSend+0x368>)
   1a2a8:	5c9b      	ldrb	r3, [r3, r2]
   1a2aa:	3348      	adds	r3, #72	; 0x48
   1a2ac:	b2db      	uxtb	r3, r3
   1a2ae:	001d      	movs	r5, r3
   1a2b0:	e000      	b.n	1a2b4 <xQueueGenericSend+0x208>
   1a2b2:	254d      	movs	r5, #77	; 0x4d
   1a2b4:	6a3b      	ldr	r3, [r7, #32]
   1a2b6:	0018      	movs	r0, r3
   1a2b8:	4b55      	ldr	r3, [pc, #340]	; (1a410 <xQueueGenericSend+0x364>)
   1a2ba:	4798      	blx	r3
   1a2bc:	0003      	movs	r3, r0
   1a2be:	001a      	movs	r2, r3
   1a2c0:	4b54      	ldr	r3, [pc, #336]	; (1a414 <xQueueGenericSend+0x368>)
   1a2c2:	5c9c      	ldrb	r4, [r3, r2]
   1a2c4:	6a3b      	ldr	r3, [r7, #32]
   1a2c6:	0018      	movs	r0, r3
   1a2c8:	4b53      	ldr	r3, [pc, #332]	; (1a418 <xQueueGenericSend+0x36c>)
   1a2ca:	4798      	blx	r3
   1a2cc:	0003      	movs	r3, r0
   1a2ce:	b2db      	uxtb	r3, r3
   1a2d0:	001a      	movs	r2, r3
   1a2d2:	0021      	movs	r1, r4
   1a2d4:	0028      	movs	r0, r5
   1a2d6:	4b51      	ldr	r3, [pc, #324]	; (1a41c <xQueueGenericSend+0x370>)
   1a2d8:	4798      	blx	r3
					return errQUEUE_FULL;
   1a2da:	2300      	movs	r3, #0
   1a2dc:	e0fe      	b.n	1a4dc <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a2e0:	2b00      	cmp	r3, #0
   1a2e2:	d106      	bne.n	1a2f2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a2e4:	2314      	movs	r3, #20
   1a2e6:	18fb      	adds	r3, r7, r3
   1a2e8:	0018      	movs	r0, r3
   1a2ea:	4b53      	ldr	r3, [pc, #332]	; (1a438 <xQueueGenericSend+0x38c>)
   1a2ec:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a2ee:	2301      	movs	r3, #1
   1a2f0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a2f2:	4b50      	ldr	r3, [pc, #320]	; (1a434 <xQueueGenericSend+0x388>)
   1a2f4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a2f6:	4b51      	ldr	r3, [pc, #324]	; (1a43c <xQueueGenericSend+0x390>)
   1a2f8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a2fa:	4b40      	ldr	r3, [pc, #256]	; (1a3fc <xQueueGenericSend+0x350>)
   1a2fc:	4798      	blx	r3
   1a2fe:	6a3b      	ldr	r3, [r7, #32]
   1a300:	2244      	movs	r2, #68	; 0x44
   1a302:	5c9b      	ldrb	r3, [r3, r2]
   1a304:	b25b      	sxtb	r3, r3
   1a306:	3301      	adds	r3, #1
   1a308:	d103      	bne.n	1a312 <xQueueGenericSend+0x266>
   1a30a:	6a3b      	ldr	r3, [r7, #32]
   1a30c:	2244      	movs	r2, #68	; 0x44
   1a30e:	2100      	movs	r1, #0
   1a310:	5499      	strb	r1, [r3, r2]
   1a312:	6a3b      	ldr	r3, [r7, #32]
   1a314:	2245      	movs	r2, #69	; 0x45
   1a316:	5c9b      	ldrb	r3, [r3, r2]
   1a318:	b25b      	sxtb	r3, r3
   1a31a:	3301      	adds	r3, #1
   1a31c:	d103      	bne.n	1a326 <xQueueGenericSend+0x27a>
   1a31e:	6a3b      	ldr	r3, [r7, #32]
   1a320:	2245      	movs	r2, #69	; 0x45
   1a322:	2100      	movs	r1, #0
   1a324:	5499      	strb	r1, [r3, r2]
   1a326:	4b43      	ldr	r3, [pc, #268]	; (1a434 <xQueueGenericSend+0x388>)
   1a328:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a32a:	1d3a      	adds	r2, r7, #4
   1a32c:	2314      	movs	r3, #20
   1a32e:	18fb      	adds	r3, r7, r3
   1a330:	0011      	movs	r1, r2
   1a332:	0018      	movs	r0, r3
   1a334:	4b42      	ldr	r3, [pc, #264]	; (1a440 <xQueueGenericSend+0x394>)
   1a336:	4798      	blx	r3
   1a338:	1e03      	subs	r3, r0, #0
   1a33a:	d000      	beq.n	1a33e <xQueueGenericSend+0x292>
   1a33c:	e08a      	b.n	1a454 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a33e:	6a3b      	ldr	r3, [r7, #32]
   1a340:	0018      	movs	r0, r3
   1a342:	4b40      	ldr	r3, [pc, #256]	; (1a444 <xQueueGenericSend+0x398>)
   1a344:	4798      	blx	r3
   1a346:	1e03      	subs	r3, r0, #0
   1a348:	d04f      	beq.n	1a3ea <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a34a:	4b2d      	ldr	r3, [pc, #180]	; (1a400 <xQueueGenericSend+0x354>)
   1a34c:	4798      	blx	r3
   1a34e:	0003      	movs	r3, r0
   1a350:	0018      	movs	r0, r3
   1a352:	4b2c      	ldr	r3, [pc, #176]	; (1a404 <xQueueGenericSend+0x358>)
   1a354:	4798      	blx	r3
   1a356:	0003      	movs	r3, r0
   1a358:	001a      	movs	r2, r3
   1a35a:	4b2b      	ldr	r3, [pc, #172]	; (1a408 <xQueueGenericSend+0x35c>)
   1a35c:	881b      	ldrh	r3, [r3, #0]
   1a35e:	4013      	ands	r3, r2
   1a360:	b29b      	uxth	r3, r3
   1a362:	2b00      	cmp	r3, #0
   1a364:	d02e      	beq.n	1a3c4 <xQueueGenericSend+0x318>
   1a366:	6a3b      	ldr	r3, [r7, #32]
   1a368:	0018      	movs	r0, r3
   1a36a:	4b28      	ldr	r3, [pc, #160]	; (1a40c <xQueueGenericSend+0x360>)
   1a36c:	4798      	blx	r3
   1a36e:	0003      	movs	r3, r0
   1a370:	001a      	movs	r2, r3
   1a372:	4b25      	ldr	r3, [pc, #148]	; (1a408 <xQueueGenericSend+0x35c>)
   1a374:	881b      	ldrh	r3, [r3, #0]
   1a376:	4013      	ands	r3, r2
   1a378:	b29b      	uxth	r3, r3
   1a37a:	2b00      	cmp	r3, #0
   1a37c:	d022      	beq.n	1a3c4 <xQueueGenericSend+0x318>
   1a37e:	683b      	ldr	r3, [r7, #0]
   1a380:	2b00      	cmp	r3, #0
   1a382:	d10b      	bne.n	1a39c <xQueueGenericSend+0x2f0>
   1a384:	6a3b      	ldr	r3, [r7, #32]
   1a386:	0018      	movs	r0, r3
   1a388:	4b21      	ldr	r3, [pc, #132]	; (1a410 <xQueueGenericSend+0x364>)
   1a38a:	4798      	blx	r3
   1a38c:	0003      	movs	r3, r0
   1a38e:	001a      	movs	r2, r3
   1a390:	4b20      	ldr	r3, [pc, #128]	; (1a414 <xQueueGenericSend+0x368>)
   1a392:	5c9b      	ldrb	r3, [r3, r2]
   1a394:	3370      	adds	r3, #112	; 0x70
   1a396:	b2db      	uxtb	r3, r3
   1a398:	001d      	movs	r5, r3
   1a39a:	e000      	b.n	1a39e <xQueueGenericSend+0x2f2>
   1a39c:	2575      	movs	r5, #117	; 0x75
   1a39e:	6a3b      	ldr	r3, [r7, #32]
   1a3a0:	0018      	movs	r0, r3
   1a3a2:	4b1b      	ldr	r3, [pc, #108]	; (1a410 <xQueueGenericSend+0x364>)
   1a3a4:	4798      	blx	r3
   1a3a6:	0003      	movs	r3, r0
   1a3a8:	001a      	movs	r2, r3
   1a3aa:	4b1a      	ldr	r3, [pc, #104]	; (1a414 <xQueueGenericSend+0x368>)
   1a3ac:	5c9c      	ldrb	r4, [r3, r2]
   1a3ae:	6a3b      	ldr	r3, [r7, #32]
   1a3b0:	0018      	movs	r0, r3
   1a3b2:	4b19      	ldr	r3, [pc, #100]	; (1a418 <xQueueGenericSend+0x36c>)
   1a3b4:	4798      	blx	r3
   1a3b6:	0003      	movs	r3, r0
   1a3b8:	b2db      	uxtb	r3, r3
   1a3ba:	001a      	movs	r2, r3
   1a3bc:	0021      	movs	r1, r4
   1a3be:	0028      	movs	r0, r5
   1a3c0:	4b16      	ldr	r3, [pc, #88]	; (1a41c <xQueueGenericSend+0x370>)
   1a3c2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a3c4:	6a3b      	ldr	r3, [r7, #32]
   1a3c6:	3310      	adds	r3, #16
   1a3c8:	687a      	ldr	r2, [r7, #4]
   1a3ca:	0011      	movs	r1, r2
   1a3cc:	0018      	movs	r0, r3
   1a3ce:	4b1e      	ldr	r3, [pc, #120]	; (1a448 <xQueueGenericSend+0x39c>)
   1a3d0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1a3d2:	6a3b      	ldr	r3, [r7, #32]
   1a3d4:	0018      	movs	r0, r3
   1a3d6:	4b1d      	ldr	r3, [pc, #116]	; (1a44c <xQueueGenericSend+0x3a0>)
   1a3d8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1a3da:	4b1d      	ldr	r3, [pc, #116]	; (1a450 <xQueueGenericSend+0x3a4>)
   1a3dc:	4798      	blx	r3
   1a3de:	1e03      	subs	r3, r0, #0
   1a3e0:	d000      	beq.n	1a3e4 <xQueueGenericSend+0x338>
   1a3e2:	e69d      	b.n	1a120 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1a3e4:	4b11      	ldr	r3, [pc, #68]	; (1a42c <xQueueGenericSend+0x380>)
   1a3e6:	4798      	blx	r3
   1a3e8:	e69a      	b.n	1a120 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1a3ea:	6a3b      	ldr	r3, [r7, #32]
   1a3ec:	0018      	movs	r0, r3
   1a3ee:	4b17      	ldr	r3, [pc, #92]	; (1a44c <xQueueGenericSend+0x3a0>)
   1a3f0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a3f2:	4b17      	ldr	r3, [pc, #92]	; (1a450 <xQueueGenericSend+0x3a4>)
   1a3f4:	4798      	blx	r3
   1a3f6:	e693      	b.n	1a120 <xQueueGenericSend+0x74>
   1a3f8:	0001c839 	.word	0x0001c839
   1a3fc:	00019b19 	.word	0x00019b19
   1a400:	00017db1 	.word	0x00017db1
   1a404:	00017b15 	.word	0x00017b15
   1a408:	200000f8 	.word	0x200000f8
   1a40c:	00017bd5 	.word	0x00017bd5
   1a410:	00017ad5 	.word	0x00017ad5
   1a414:	200000ec 	.word	0x200000ec
   1a418:	00017bb5 	.word	0x00017bb5
   1a41c:	0001850d 	.word	0x0001850d
   1a420:	00018b69 	.word	0x00018b69
   1a424:	0001b2e5 	.word	0x0001b2e5
   1a428:	0001b5e9 	.word	0x0001b5e9
   1a42c:	00019b01 	.word	0x00019b01
   1a430:	0001c3a9 	.word	0x0001c3a9
   1a434:	00019b3d 	.word	0x00019b3d
   1a438:	0001c4e9 	.word	0x0001c4e9
   1a43c:	0001bdd1 	.word	0x0001bdd1
   1a440:	0001c511 	.word	0x0001c511
   1a444:	0001b539 	.word	0x0001b539
   1a448:	0001c285 	.word	0x0001c285
   1a44c:	0001b415 	.word	0x0001b415
   1a450:	0001bde9 	.word	0x0001bde9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1a454:	6a3b      	ldr	r3, [r7, #32]
   1a456:	0018      	movs	r0, r3
   1a458:	4b22      	ldr	r3, [pc, #136]	; (1a4e4 <xQueueGenericSend+0x438>)
   1a45a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a45c:	4b22      	ldr	r3, [pc, #136]	; (1a4e8 <xQueueGenericSend+0x43c>)
   1a45e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1a460:	4b22      	ldr	r3, [pc, #136]	; (1a4ec <xQueueGenericSend+0x440>)
   1a462:	4798      	blx	r3
   1a464:	0003      	movs	r3, r0
   1a466:	0018      	movs	r0, r3
   1a468:	4b21      	ldr	r3, [pc, #132]	; (1a4f0 <xQueueGenericSend+0x444>)
   1a46a:	4798      	blx	r3
   1a46c:	0003      	movs	r3, r0
   1a46e:	001a      	movs	r2, r3
   1a470:	4b20      	ldr	r3, [pc, #128]	; (1a4f4 <xQueueGenericSend+0x448>)
   1a472:	881b      	ldrh	r3, [r3, #0]
   1a474:	4013      	ands	r3, r2
   1a476:	b29b      	uxth	r3, r3
   1a478:	2b00      	cmp	r3, #0
   1a47a:	d02e      	beq.n	1a4da <xQueueGenericSend+0x42e>
   1a47c:	6a3b      	ldr	r3, [r7, #32]
   1a47e:	0018      	movs	r0, r3
   1a480:	4b1d      	ldr	r3, [pc, #116]	; (1a4f8 <xQueueGenericSend+0x44c>)
   1a482:	4798      	blx	r3
   1a484:	0003      	movs	r3, r0
   1a486:	001a      	movs	r2, r3
   1a488:	4b1a      	ldr	r3, [pc, #104]	; (1a4f4 <xQueueGenericSend+0x448>)
   1a48a:	881b      	ldrh	r3, [r3, #0]
   1a48c:	4013      	ands	r3, r2
   1a48e:	b29b      	uxth	r3, r3
   1a490:	2b00      	cmp	r3, #0
   1a492:	d022      	beq.n	1a4da <xQueueGenericSend+0x42e>
   1a494:	683b      	ldr	r3, [r7, #0]
   1a496:	2b00      	cmp	r3, #0
   1a498:	d10b      	bne.n	1a4b2 <xQueueGenericSend+0x406>
   1a49a:	6a3b      	ldr	r3, [r7, #32]
   1a49c:	0018      	movs	r0, r3
   1a49e:	4b17      	ldr	r3, [pc, #92]	; (1a4fc <xQueueGenericSend+0x450>)
   1a4a0:	4798      	blx	r3
   1a4a2:	0003      	movs	r3, r0
   1a4a4:	001a      	movs	r2, r3
   1a4a6:	4b16      	ldr	r3, [pc, #88]	; (1a500 <xQueueGenericSend+0x454>)
   1a4a8:	5c9b      	ldrb	r3, [r3, r2]
   1a4aa:	3348      	adds	r3, #72	; 0x48
   1a4ac:	b2db      	uxtb	r3, r3
   1a4ae:	001d      	movs	r5, r3
   1a4b0:	e000      	b.n	1a4b4 <xQueueGenericSend+0x408>
   1a4b2:	254d      	movs	r5, #77	; 0x4d
   1a4b4:	6a3b      	ldr	r3, [r7, #32]
   1a4b6:	0018      	movs	r0, r3
   1a4b8:	4b10      	ldr	r3, [pc, #64]	; (1a4fc <xQueueGenericSend+0x450>)
   1a4ba:	4798      	blx	r3
   1a4bc:	0003      	movs	r3, r0
   1a4be:	001a      	movs	r2, r3
   1a4c0:	4b0f      	ldr	r3, [pc, #60]	; (1a500 <xQueueGenericSend+0x454>)
   1a4c2:	5c9c      	ldrb	r4, [r3, r2]
   1a4c4:	6a3b      	ldr	r3, [r7, #32]
   1a4c6:	0018      	movs	r0, r3
   1a4c8:	4b0e      	ldr	r3, [pc, #56]	; (1a504 <xQueueGenericSend+0x458>)
   1a4ca:	4798      	blx	r3
   1a4cc:	0003      	movs	r3, r0
   1a4ce:	b2db      	uxtb	r3, r3
   1a4d0:	001a      	movs	r2, r3
   1a4d2:	0021      	movs	r1, r4
   1a4d4:	0028      	movs	r0, r5
   1a4d6:	4b0c      	ldr	r3, [pc, #48]	; (1a508 <xQueueGenericSend+0x45c>)
   1a4d8:	4798      	blx	r3
			return errQUEUE_FULL;
   1a4da:	2300      	movs	r3, #0
		}
	}
}
   1a4dc:	0018      	movs	r0, r3
   1a4de:	46bd      	mov	sp, r7
   1a4e0:	b00a      	add	sp, #40	; 0x28
   1a4e2:	bdb0      	pop	{r4, r5, r7, pc}
   1a4e4:	0001b415 	.word	0x0001b415
   1a4e8:	0001bde9 	.word	0x0001bde9
   1a4ec:	00017db1 	.word	0x00017db1
   1a4f0:	00017b15 	.word	0x00017b15
   1a4f4:	200000f8 	.word	0x200000f8
   1a4f8:	00017bd5 	.word	0x00017bd5
   1a4fc:	00017ad5 	.word	0x00017ad5
   1a500:	200000ec 	.word	0x200000ec
   1a504:	00017bb5 	.word	0x00017bb5
   1a508:	0001850d 	.word	0x0001850d

0001a50c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1a50c:	b5b0      	push	{r4, r5, r7, lr}
   1a50e:	b088      	sub	sp, #32
   1a510:	af00      	add	r7, sp, #0
   1a512:	60f8      	str	r0, [r7, #12]
   1a514:	60b9      	str	r1, [r7, #8]
   1a516:	607a      	str	r2, [r7, #4]
   1a518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a51a:	68fb      	ldr	r3, [r7, #12]
   1a51c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1a51e:	69bb      	ldr	r3, [r7, #24]
   1a520:	2b00      	cmp	r3, #0
   1a522:	d101      	bne.n	1a528 <xQueueGenericSendFromISR+0x1c>
   1a524:	b672      	cpsid	i
   1a526:	e7fe      	b.n	1a526 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a528:	68bb      	ldr	r3, [r7, #8]
   1a52a:	2b00      	cmp	r3, #0
   1a52c:	d103      	bne.n	1a536 <xQueueGenericSendFromISR+0x2a>
   1a52e:	69bb      	ldr	r3, [r7, #24]
   1a530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a532:	2b00      	cmp	r3, #0
   1a534:	d101      	bne.n	1a53a <xQueueGenericSendFromISR+0x2e>
   1a536:	2301      	movs	r3, #1
   1a538:	e000      	b.n	1a53c <xQueueGenericSendFromISR+0x30>
   1a53a:	2300      	movs	r3, #0
   1a53c:	2b00      	cmp	r3, #0
   1a53e:	d101      	bne.n	1a544 <xQueueGenericSendFromISR+0x38>
   1a540:	b672      	cpsid	i
   1a542:	e7fe      	b.n	1a542 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a544:	683b      	ldr	r3, [r7, #0]
   1a546:	2b02      	cmp	r3, #2
   1a548:	d103      	bne.n	1a552 <xQueueGenericSendFromISR+0x46>
   1a54a:	69bb      	ldr	r3, [r7, #24]
   1a54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a54e:	2b01      	cmp	r3, #1
   1a550:	d101      	bne.n	1a556 <xQueueGenericSendFromISR+0x4a>
   1a552:	2301      	movs	r3, #1
   1a554:	e000      	b.n	1a558 <xQueueGenericSendFromISR+0x4c>
   1a556:	2300      	movs	r3, #0
   1a558:	2b00      	cmp	r3, #0
   1a55a:	d101      	bne.n	1a560 <xQueueGenericSendFromISR+0x54>
   1a55c:	b672      	cpsid	i
   1a55e:	e7fe      	b.n	1a55e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a560:	4b68      	ldr	r3, [pc, #416]	; (1a704 <xQueueGenericSendFromISR+0x1f8>)
   1a562:	4798      	blx	r3
   1a564:	0003      	movs	r3, r0
   1a566:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a568:	69bb      	ldr	r3, [r7, #24]
   1a56a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a56c:	69bb      	ldr	r3, [r7, #24]
   1a56e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a570:	429a      	cmp	r2, r3
   1a572:	d303      	bcc.n	1a57c <xQueueGenericSendFromISR+0x70>
   1a574:	683b      	ldr	r3, [r7, #0]
   1a576:	2b02      	cmp	r3, #2
   1a578:	d000      	beq.n	1a57c <xQueueGenericSendFromISR+0x70>
   1a57a:	e088      	b.n	1a68e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a57c:	2313      	movs	r3, #19
   1a57e:	18fb      	adds	r3, r7, r3
   1a580:	69ba      	ldr	r2, [r7, #24]
   1a582:	2145      	movs	r1, #69	; 0x45
   1a584:	5c52      	ldrb	r2, [r2, r1]
   1a586:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a588:	69bb      	ldr	r3, [r7, #24]
   1a58a:	0018      	movs	r0, r3
   1a58c:	4b5e      	ldr	r3, [pc, #376]	; (1a708 <xQueueGenericSendFromISR+0x1fc>)
   1a58e:	4798      	blx	r3
   1a590:	0003      	movs	r3, r0
   1a592:	001a      	movs	r2, r3
   1a594:	4b5d      	ldr	r3, [pc, #372]	; (1a70c <xQueueGenericSendFromISR+0x200>)
   1a596:	881b      	ldrh	r3, [r3, #0]
   1a598:	4013      	ands	r3, r2
   1a59a:	b29b      	uxth	r3, r3
   1a59c:	2b00      	cmp	r3, #0
   1a59e:	d022      	beq.n	1a5e6 <xQueueGenericSendFromISR+0xda>
   1a5a0:	683b      	ldr	r3, [r7, #0]
   1a5a2:	2b00      	cmp	r3, #0
   1a5a4:	d10b      	bne.n	1a5be <xQueueGenericSendFromISR+0xb2>
   1a5a6:	69bb      	ldr	r3, [r7, #24]
   1a5a8:	0018      	movs	r0, r3
   1a5aa:	4b59      	ldr	r3, [pc, #356]	; (1a710 <xQueueGenericSendFromISR+0x204>)
   1a5ac:	4798      	blx	r3
   1a5ae:	0003      	movs	r3, r0
   1a5b0:	001a      	movs	r2, r3
   1a5b2:	4b58      	ldr	r3, [pc, #352]	; (1a714 <xQueueGenericSendFromISR+0x208>)
   1a5b4:	5c9b      	ldrb	r3, [r3, r2]
   1a5b6:	3330      	adds	r3, #48	; 0x30
   1a5b8:	b2db      	uxtb	r3, r3
   1a5ba:	001d      	movs	r5, r3
   1a5bc:	e000      	b.n	1a5c0 <xQueueGenericSendFromISR+0xb4>
   1a5be:	2535      	movs	r5, #53	; 0x35
   1a5c0:	69bb      	ldr	r3, [r7, #24]
   1a5c2:	0018      	movs	r0, r3
   1a5c4:	4b52      	ldr	r3, [pc, #328]	; (1a710 <xQueueGenericSendFromISR+0x204>)
   1a5c6:	4798      	blx	r3
   1a5c8:	0003      	movs	r3, r0
   1a5ca:	001a      	movs	r2, r3
   1a5cc:	4b51      	ldr	r3, [pc, #324]	; (1a714 <xQueueGenericSendFromISR+0x208>)
   1a5ce:	5c9c      	ldrb	r4, [r3, r2]
   1a5d0:	69bb      	ldr	r3, [r7, #24]
   1a5d2:	0018      	movs	r0, r3
   1a5d4:	4b50      	ldr	r3, [pc, #320]	; (1a718 <xQueueGenericSendFromISR+0x20c>)
   1a5d6:	4798      	blx	r3
   1a5d8:	0003      	movs	r3, r0
   1a5da:	b2db      	uxtb	r3, r3
   1a5dc:	001a      	movs	r2, r3
   1a5de:	0021      	movs	r1, r4
   1a5e0:	0028      	movs	r0, r5
   1a5e2:	4b4e      	ldr	r3, [pc, #312]	; (1a71c <xQueueGenericSendFromISR+0x210>)
   1a5e4:	4798      	blx	r3
   1a5e6:	69bb      	ldr	r3, [r7, #24]
   1a5e8:	0018      	movs	r0, r3
   1a5ea:	4b49      	ldr	r3, [pc, #292]	; (1a710 <xQueueGenericSendFromISR+0x204>)
   1a5ec:	4798      	blx	r3
   1a5ee:	0003      	movs	r3, r0
   1a5f0:	001a      	movs	r2, r3
   1a5f2:	4b48      	ldr	r3, [pc, #288]	; (1a714 <xQueueGenericSendFromISR+0x208>)
   1a5f4:	5c9c      	ldrb	r4, [r3, r2]
   1a5f6:	69bb      	ldr	r3, [r7, #24]
   1a5f8:	0018      	movs	r0, r3
   1a5fa:	4b47      	ldr	r3, [pc, #284]	; (1a718 <xQueueGenericSendFromISR+0x20c>)
   1a5fc:	4798      	blx	r3
   1a5fe:	0003      	movs	r3, r0
   1a600:	b2d9      	uxtb	r1, r3
   1a602:	69bb      	ldr	r3, [r7, #24]
   1a604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a606:	b2db      	uxtb	r3, r3
   1a608:	3301      	adds	r3, #1
   1a60a:	b2db      	uxtb	r3, r3
   1a60c:	001a      	movs	r2, r3
   1a60e:	0020      	movs	r0, r4
   1a610:	4b43      	ldr	r3, [pc, #268]	; (1a720 <xQueueGenericSendFromISR+0x214>)
   1a612:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a614:	683a      	ldr	r2, [r7, #0]
   1a616:	68b9      	ldr	r1, [r7, #8]
   1a618:	69bb      	ldr	r3, [r7, #24]
   1a61a:	0018      	movs	r0, r3
   1a61c:	4b41      	ldr	r3, [pc, #260]	; (1a724 <xQueueGenericSendFromISR+0x218>)
   1a61e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a620:	2313      	movs	r3, #19
   1a622:	18fb      	adds	r3, r7, r3
   1a624:	781b      	ldrb	r3, [r3, #0]
   1a626:	b25b      	sxtb	r3, r3
   1a628:	3301      	adds	r3, #1
   1a62a:	d124      	bne.n	1a676 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a62c:	69bb      	ldr	r3, [r7, #24]
   1a62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a630:	2b00      	cmp	r3, #0
   1a632:	d00e      	beq.n	1a652 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a634:	683a      	ldr	r2, [r7, #0]
   1a636:	69bb      	ldr	r3, [r7, #24]
   1a638:	0011      	movs	r1, r2
   1a63a:	0018      	movs	r0, r3
   1a63c:	4b3a      	ldr	r3, [pc, #232]	; (1a728 <xQueueGenericSendFromISR+0x21c>)
   1a63e:	4798      	blx	r3
   1a640:	1e03      	subs	r3, r0, #0
   1a642:	d021      	beq.n	1a688 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a644:	687b      	ldr	r3, [r7, #4]
   1a646:	2b00      	cmp	r3, #0
   1a648:	d01e      	beq.n	1a688 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a64a:	687b      	ldr	r3, [r7, #4]
   1a64c:	2201      	movs	r2, #1
   1a64e:	601a      	str	r2, [r3, #0]
   1a650:	e01a      	b.n	1a688 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a652:	69bb      	ldr	r3, [r7, #24]
   1a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a656:	2b00      	cmp	r3, #0
   1a658:	d016      	beq.n	1a688 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a65a:	69bb      	ldr	r3, [r7, #24]
   1a65c:	3324      	adds	r3, #36	; 0x24
   1a65e:	0018      	movs	r0, r3
   1a660:	4b32      	ldr	r3, [pc, #200]	; (1a72c <xQueueGenericSendFromISR+0x220>)
   1a662:	4798      	blx	r3
   1a664:	1e03      	subs	r3, r0, #0
   1a666:	d00f      	beq.n	1a688 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a668:	687b      	ldr	r3, [r7, #4]
   1a66a:	2b00      	cmp	r3, #0
   1a66c:	d00c      	beq.n	1a688 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a66e:	687b      	ldr	r3, [r7, #4]
   1a670:	2201      	movs	r2, #1
   1a672:	601a      	str	r2, [r3, #0]
   1a674:	e008      	b.n	1a688 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a676:	2313      	movs	r3, #19
   1a678:	18fb      	adds	r3, r7, r3
   1a67a:	781b      	ldrb	r3, [r3, #0]
   1a67c:	3301      	adds	r3, #1
   1a67e:	b2db      	uxtb	r3, r3
   1a680:	b259      	sxtb	r1, r3
   1a682:	69bb      	ldr	r3, [r7, #24]
   1a684:	2245      	movs	r2, #69	; 0x45
   1a686:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a688:	2301      	movs	r3, #1
   1a68a:	61fb      	str	r3, [r7, #28]
		{
   1a68c:	e030      	b.n	1a6f0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a68e:	69bb      	ldr	r3, [r7, #24]
   1a690:	0018      	movs	r0, r3
   1a692:	4b1d      	ldr	r3, [pc, #116]	; (1a708 <xQueueGenericSendFromISR+0x1fc>)
   1a694:	4798      	blx	r3
   1a696:	0003      	movs	r3, r0
   1a698:	001a      	movs	r2, r3
   1a69a:	4b1c      	ldr	r3, [pc, #112]	; (1a70c <xQueueGenericSendFromISR+0x200>)
   1a69c:	881b      	ldrh	r3, [r3, #0]
   1a69e:	4013      	ands	r3, r2
   1a6a0:	b29b      	uxth	r3, r3
   1a6a2:	2b00      	cmp	r3, #0
   1a6a4:	d022      	beq.n	1a6ec <xQueueGenericSendFromISR+0x1e0>
   1a6a6:	683b      	ldr	r3, [r7, #0]
   1a6a8:	2b00      	cmp	r3, #0
   1a6aa:	d10b      	bne.n	1a6c4 <xQueueGenericSendFromISR+0x1b8>
   1a6ac:	69bb      	ldr	r3, [r7, #24]
   1a6ae:	0018      	movs	r0, r3
   1a6b0:	4b17      	ldr	r3, [pc, #92]	; (1a710 <xQueueGenericSendFromISR+0x204>)
   1a6b2:	4798      	blx	r3
   1a6b4:	0003      	movs	r3, r0
   1a6b6:	001a      	movs	r2, r3
   1a6b8:	4b16      	ldr	r3, [pc, #88]	; (1a714 <xQueueGenericSendFromISR+0x208>)
   1a6ba:	5c9b      	ldrb	r3, [r3, r2]
   1a6bc:	3358      	adds	r3, #88	; 0x58
   1a6be:	b2db      	uxtb	r3, r3
   1a6c0:	001d      	movs	r5, r3
   1a6c2:	e000      	b.n	1a6c6 <xQueueGenericSendFromISR+0x1ba>
   1a6c4:	255d      	movs	r5, #93	; 0x5d
   1a6c6:	69bb      	ldr	r3, [r7, #24]
   1a6c8:	0018      	movs	r0, r3
   1a6ca:	4b11      	ldr	r3, [pc, #68]	; (1a710 <xQueueGenericSendFromISR+0x204>)
   1a6cc:	4798      	blx	r3
   1a6ce:	0003      	movs	r3, r0
   1a6d0:	001a      	movs	r2, r3
   1a6d2:	4b10      	ldr	r3, [pc, #64]	; (1a714 <xQueueGenericSendFromISR+0x208>)
   1a6d4:	5c9c      	ldrb	r4, [r3, r2]
   1a6d6:	69bb      	ldr	r3, [r7, #24]
   1a6d8:	0018      	movs	r0, r3
   1a6da:	4b0f      	ldr	r3, [pc, #60]	; (1a718 <xQueueGenericSendFromISR+0x20c>)
   1a6dc:	4798      	blx	r3
   1a6de:	0003      	movs	r3, r0
   1a6e0:	b2db      	uxtb	r3, r3
   1a6e2:	001a      	movs	r2, r3
   1a6e4:	0021      	movs	r1, r4
   1a6e6:	0028      	movs	r0, r5
   1a6e8:	4b0c      	ldr	r3, [pc, #48]	; (1a71c <xQueueGenericSendFromISR+0x210>)
   1a6ea:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a6ec:	2300      	movs	r3, #0
   1a6ee:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a6f0:	697b      	ldr	r3, [r7, #20]
   1a6f2:	0018      	movs	r0, r3
   1a6f4:	4b0e      	ldr	r3, [pc, #56]	; (1a730 <xQueueGenericSendFromISR+0x224>)
   1a6f6:	4798      	blx	r3

	return xReturn;
   1a6f8:	69fb      	ldr	r3, [r7, #28]
}
   1a6fa:	0018      	movs	r0, r3
   1a6fc:	46bd      	mov	sp, r7
   1a6fe:	b008      	add	sp, #32
   1a700:	bdb0      	pop	{r4, r5, r7, pc}
   1a702:	46c0      	nop			; (mov r8, r8)
   1a704:	00019b6d 	.word	0x00019b6d
   1a708:	00017bd5 	.word	0x00017bd5
   1a70c:	200000f8 	.word	0x200000f8
   1a710:	00017ad5 	.word	0x00017ad5
   1a714:	200000ec 	.word	0x200000ec
   1a718:	00017bb5 	.word	0x00017bb5
   1a71c:	0001850d 	.word	0x0001850d
   1a720:	00018b69 	.word	0x00018b69
   1a724:	0001b2e5 	.word	0x0001b2e5
   1a728:	0001b5e9 	.word	0x0001b5e9
   1a72c:	0001c3a9 	.word	0x0001c3a9
   1a730:	00019b79 	.word	0x00019b79

0001a734 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1a734:	b580      	push	{r7, lr}
   1a736:	b082      	sub	sp, #8
   1a738:	af00      	add	r7, sp, #0
   1a73a:	6078      	str	r0, [r7, #4]
   1a73c:	6039      	str	r1, [r7, #0]
   1a73e:	6839      	ldr	r1, [r7, #0]
   1a740:	687b      	ldr	r3, [r7, #4]
   1a742:	2200      	movs	r2, #0
   1a744:	0018      	movs	r0, r3
   1a746:	4b03      	ldr	r3, [pc, #12]	; (1a754 <xQueueGiveFromISR+0x20>)
   1a748:	4798      	blx	r3
   1a74a:	0003      	movs	r3, r0
   1a74c:	0018      	movs	r0, r3
   1a74e:	46bd      	mov	sp, r7
   1a750:	b002      	add	sp, #8
   1a752:	bd80      	pop	{r7, pc}
   1a754:	0001a759 	.word	0x0001a759

0001a758 <MyWrapper>:
{
   1a758:	b5b0      	push	{r4, r5, r7, lr}
   1a75a:	b08a      	sub	sp, #40	; 0x28
   1a75c:	af00      	add	r7, sp, #0
   1a75e:	60f8      	str	r0, [r7, #12]
   1a760:	60b9      	str	r1, [r7, #8]
   1a762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a764:	68fb      	ldr	r3, [r7, #12]
   1a766:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1a768:	6a3b      	ldr	r3, [r7, #32]
   1a76a:	2b00      	cmp	r3, #0
   1a76c:	d101      	bne.n	1a772 <MyWrapper+0x1a>
   1a76e:	b672      	cpsid	i
   1a770:	e7fe      	b.n	1a770 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a772:	6a3b      	ldr	r3, [r7, #32]
   1a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a776:	2b00      	cmp	r3, #0
   1a778:	d001      	beq.n	1a77e <MyWrapper+0x26>
   1a77a:	b672      	cpsid	i
   1a77c:	e7fe      	b.n	1a77c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1a77e:	6a3b      	ldr	r3, [r7, #32]
   1a780:	681b      	ldr	r3, [r3, #0]
   1a782:	2b00      	cmp	r3, #0
   1a784:	d103      	bne.n	1a78e <MyWrapper+0x36>
   1a786:	6a3b      	ldr	r3, [r7, #32]
   1a788:	685b      	ldr	r3, [r3, #4]
   1a78a:	2b00      	cmp	r3, #0
   1a78c:	d101      	bne.n	1a792 <MyWrapper+0x3a>
   1a78e:	2301      	movs	r3, #1
   1a790:	e000      	b.n	1a794 <MyWrapper+0x3c>
   1a792:	2300      	movs	r3, #0
   1a794:	2b00      	cmp	r3, #0
   1a796:	d101      	bne.n	1a79c <MyWrapper+0x44>
   1a798:	b672      	cpsid	i
   1a79a:	e7fe      	b.n	1a79a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a79c:	4b66      	ldr	r3, [pc, #408]	; (1a938 <MyWrapper+0x1e0>)
   1a79e:	4798      	blx	r3
   1a7a0:	0003      	movs	r3, r0
   1a7a2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a7a4:	6a3b      	ldr	r3, [r7, #32]
   1a7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a7a8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1a7aa:	6a3b      	ldr	r3, [r7, #32]
   1a7ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1a7ae:	69bb      	ldr	r3, [r7, #24]
   1a7b0:	429a      	cmp	r2, r3
   1a7b2:	d800      	bhi.n	1a7b6 <MyWrapper+0x5e>
   1a7b4:	e085      	b.n	1a8c2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a7b6:	2317      	movs	r3, #23
   1a7b8:	18fb      	adds	r3, r7, r3
   1a7ba:	6a3a      	ldr	r2, [r7, #32]
   1a7bc:	2145      	movs	r1, #69	; 0x45
   1a7be:	5c52      	ldrb	r2, [r2, r1]
   1a7c0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a7c2:	6a3b      	ldr	r3, [r7, #32]
   1a7c4:	0018      	movs	r0, r3
   1a7c6:	4b5d      	ldr	r3, [pc, #372]	; (1a93c <MyWrapper+0x1e4>)
   1a7c8:	4798      	blx	r3
   1a7ca:	0003      	movs	r3, r0
   1a7cc:	001a      	movs	r2, r3
   1a7ce:	4b5c      	ldr	r3, [pc, #368]	; (1a940 <MyWrapper+0x1e8>)
   1a7d0:	881b      	ldrh	r3, [r3, #0]
   1a7d2:	4013      	ands	r3, r2
   1a7d4:	b29b      	uxth	r3, r3
   1a7d6:	2b00      	cmp	r3, #0
   1a7d8:	d022      	beq.n	1a820 <MyWrapper+0xc8>
   1a7da:	687b      	ldr	r3, [r7, #4]
   1a7dc:	2b00      	cmp	r3, #0
   1a7de:	d10b      	bne.n	1a7f8 <MyWrapper+0xa0>
   1a7e0:	6a3b      	ldr	r3, [r7, #32]
   1a7e2:	0018      	movs	r0, r3
   1a7e4:	4b57      	ldr	r3, [pc, #348]	; (1a944 <MyWrapper+0x1ec>)
   1a7e6:	4798      	blx	r3
   1a7e8:	0003      	movs	r3, r0
   1a7ea:	001a      	movs	r2, r3
   1a7ec:	4b56      	ldr	r3, [pc, #344]	; (1a948 <MyWrapper+0x1f0>)
   1a7ee:	5c9b      	ldrb	r3, [r3, r2]
   1a7f0:	3330      	adds	r3, #48	; 0x30
   1a7f2:	b2db      	uxtb	r3, r3
   1a7f4:	001d      	movs	r5, r3
   1a7f6:	e000      	b.n	1a7fa <MyWrapper+0xa2>
   1a7f8:	2535      	movs	r5, #53	; 0x35
   1a7fa:	6a3b      	ldr	r3, [r7, #32]
   1a7fc:	0018      	movs	r0, r3
   1a7fe:	4b51      	ldr	r3, [pc, #324]	; (1a944 <MyWrapper+0x1ec>)
   1a800:	4798      	blx	r3
   1a802:	0003      	movs	r3, r0
   1a804:	001a      	movs	r2, r3
   1a806:	4b50      	ldr	r3, [pc, #320]	; (1a948 <MyWrapper+0x1f0>)
   1a808:	5c9c      	ldrb	r4, [r3, r2]
   1a80a:	6a3b      	ldr	r3, [r7, #32]
   1a80c:	0018      	movs	r0, r3
   1a80e:	4b4f      	ldr	r3, [pc, #316]	; (1a94c <MyWrapper+0x1f4>)
   1a810:	4798      	blx	r3
   1a812:	0003      	movs	r3, r0
   1a814:	b2db      	uxtb	r3, r3
   1a816:	001a      	movs	r2, r3
   1a818:	0021      	movs	r1, r4
   1a81a:	0028      	movs	r0, r5
   1a81c:	4b4c      	ldr	r3, [pc, #304]	; (1a950 <MyWrapper+0x1f8>)
   1a81e:	4798      	blx	r3
   1a820:	6a3b      	ldr	r3, [r7, #32]
   1a822:	0018      	movs	r0, r3
   1a824:	4b47      	ldr	r3, [pc, #284]	; (1a944 <MyWrapper+0x1ec>)
   1a826:	4798      	blx	r3
   1a828:	0003      	movs	r3, r0
   1a82a:	001a      	movs	r2, r3
   1a82c:	4b46      	ldr	r3, [pc, #280]	; (1a948 <MyWrapper+0x1f0>)
   1a82e:	5c9c      	ldrb	r4, [r3, r2]
   1a830:	6a3b      	ldr	r3, [r7, #32]
   1a832:	0018      	movs	r0, r3
   1a834:	4b45      	ldr	r3, [pc, #276]	; (1a94c <MyWrapper+0x1f4>)
   1a836:	4798      	blx	r3
   1a838:	0003      	movs	r3, r0
   1a83a:	b2d9      	uxtb	r1, r3
   1a83c:	6a3b      	ldr	r3, [r7, #32]
   1a83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a840:	b2db      	uxtb	r3, r3
   1a842:	3301      	adds	r3, #1
   1a844:	b2db      	uxtb	r3, r3
   1a846:	001a      	movs	r2, r3
   1a848:	0020      	movs	r0, r4
   1a84a:	4b42      	ldr	r3, [pc, #264]	; (1a954 <MyWrapper+0x1fc>)
   1a84c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a84e:	69bb      	ldr	r3, [r7, #24]
   1a850:	1c5a      	adds	r2, r3, #1
   1a852:	6a3b      	ldr	r3, [r7, #32]
   1a854:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a856:	2317      	movs	r3, #23
   1a858:	18fb      	adds	r3, r7, r3
   1a85a:	781b      	ldrb	r3, [r3, #0]
   1a85c:	b25b      	sxtb	r3, r3
   1a85e:	3301      	adds	r3, #1
   1a860:	d123      	bne.n	1a8aa <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a862:	6a3b      	ldr	r3, [r7, #32]
   1a864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a866:	2b00      	cmp	r3, #0
   1a868:	d00d      	beq.n	1a886 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1a86a:	6a3b      	ldr	r3, [r7, #32]
   1a86c:	2100      	movs	r1, #0
   1a86e:	0018      	movs	r0, r3
   1a870:	4b39      	ldr	r3, [pc, #228]	; (1a958 <MyWrapper+0x200>)
   1a872:	4798      	blx	r3
   1a874:	1e03      	subs	r3, r0, #0
   1a876:	d021      	beq.n	1a8bc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a878:	68bb      	ldr	r3, [r7, #8]
   1a87a:	2b00      	cmp	r3, #0
   1a87c:	d01e      	beq.n	1a8bc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a87e:	68bb      	ldr	r3, [r7, #8]
   1a880:	2201      	movs	r2, #1
   1a882:	601a      	str	r2, [r3, #0]
   1a884:	e01a      	b.n	1a8bc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a886:	6a3b      	ldr	r3, [r7, #32]
   1a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a88a:	2b00      	cmp	r3, #0
   1a88c:	d016      	beq.n	1a8bc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a88e:	6a3b      	ldr	r3, [r7, #32]
   1a890:	3324      	adds	r3, #36	; 0x24
   1a892:	0018      	movs	r0, r3
   1a894:	4b31      	ldr	r3, [pc, #196]	; (1a95c <MyWrapper+0x204>)
   1a896:	4798      	blx	r3
   1a898:	1e03      	subs	r3, r0, #0
   1a89a:	d00f      	beq.n	1a8bc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a89c:	68bb      	ldr	r3, [r7, #8]
   1a89e:	2b00      	cmp	r3, #0
   1a8a0:	d00c      	beq.n	1a8bc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a8a2:	68bb      	ldr	r3, [r7, #8]
   1a8a4:	2201      	movs	r2, #1
   1a8a6:	601a      	str	r2, [r3, #0]
   1a8a8:	e008      	b.n	1a8bc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a8aa:	2317      	movs	r3, #23
   1a8ac:	18fb      	adds	r3, r7, r3
   1a8ae:	781b      	ldrb	r3, [r3, #0]
   1a8b0:	3301      	adds	r3, #1
   1a8b2:	b2db      	uxtb	r3, r3
   1a8b4:	b259      	sxtb	r1, r3
   1a8b6:	6a3b      	ldr	r3, [r7, #32]
   1a8b8:	2245      	movs	r2, #69	; 0x45
   1a8ba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a8bc:	2301      	movs	r3, #1
   1a8be:	627b      	str	r3, [r7, #36]	; 0x24
   1a8c0:	e030      	b.n	1a924 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a8c2:	6a3b      	ldr	r3, [r7, #32]
   1a8c4:	0018      	movs	r0, r3
   1a8c6:	4b1d      	ldr	r3, [pc, #116]	; (1a93c <MyWrapper+0x1e4>)
   1a8c8:	4798      	blx	r3
   1a8ca:	0003      	movs	r3, r0
   1a8cc:	001a      	movs	r2, r3
   1a8ce:	4b1c      	ldr	r3, [pc, #112]	; (1a940 <MyWrapper+0x1e8>)
   1a8d0:	881b      	ldrh	r3, [r3, #0]
   1a8d2:	4013      	ands	r3, r2
   1a8d4:	b29b      	uxth	r3, r3
   1a8d6:	2b00      	cmp	r3, #0
   1a8d8:	d022      	beq.n	1a920 <MyWrapper+0x1c8>
   1a8da:	687b      	ldr	r3, [r7, #4]
   1a8dc:	2b00      	cmp	r3, #0
   1a8de:	d10b      	bne.n	1a8f8 <MyWrapper+0x1a0>
   1a8e0:	6a3b      	ldr	r3, [r7, #32]
   1a8e2:	0018      	movs	r0, r3
   1a8e4:	4b17      	ldr	r3, [pc, #92]	; (1a944 <MyWrapper+0x1ec>)
   1a8e6:	4798      	blx	r3
   1a8e8:	0003      	movs	r3, r0
   1a8ea:	001a      	movs	r2, r3
   1a8ec:	4b16      	ldr	r3, [pc, #88]	; (1a948 <MyWrapper+0x1f0>)
   1a8ee:	5c9b      	ldrb	r3, [r3, r2]
   1a8f0:	3358      	adds	r3, #88	; 0x58
   1a8f2:	b2db      	uxtb	r3, r3
   1a8f4:	001d      	movs	r5, r3
   1a8f6:	e000      	b.n	1a8fa <MyWrapper+0x1a2>
   1a8f8:	255d      	movs	r5, #93	; 0x5d
   1a8fa:	6a3b      	ldr	r3, [r7, #32]
   1a8fc:	0018      	movs	r0, r3
   1a8fe:	4b11      	ldr	r3, [pc, #68]	; (1a944 <MyWrapper+0x1ec>)
   1a900:	4798      	blx	r3
   1a902:	0003      	movs	r3, r0
   1a904:	001a      	movs	r2, r3
   1a906:	4b10      	ldr	r3, [pc, #64]	; (1a948 <MyWrapper+0x1f0>)
   1a908:	5c9c      	ldrb	r4, [r3, r2]
   1a90a:	6a3b      	ldr	r3, [r7, #32]
   1a90c:	0018      	movs	r0, r3
   1a90e:	4b0f      	ldr	r3, [pc, #60]	; (1a94c <MyWrapper+0x1f4>)
   1a910:	4798      	blx	r3
   1a912:	0003      	movs	r3, r0
   1a914:	b2db      	uxtb	r3, r3
   1a916:	001a      	movs	r2, r3
   1a918:	0021      	movs	r1, r4
   1a91a:	0028      	movs	r0, r5
   1a91c:	4b0c      	ldr	r3, [pc, #48]	; (1a950 <MyWrapper+0x1f8>)
   1a91e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a920:	2300      	movs	r3, #0
   1a922:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a924:	69fb      	ldr	r3, [r7, #28]
   1a926:	0018      	movs	r0, r3
   1a928:	4b0d      	ldr	r3, [pc, #52]	; (1a960 <MyWrapper+0x208>)
   1a92a:	4798      	blx	r3

	return xReturn;
   1a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1a92e:	0018      	movs	r0, r3
   1a930:	46bd      	mov	sp, r7
   1a932:	b00a      	add	sp, #40	; 0x28
   1a934:	bdb0      	pop	{r4, r5, r7, pc}
   1a936:	46c0      	nop			; (mov r8, r8)
   1a938:	00019b6d 	.word	0x00019b6d
   1a93c:	00017bd5 	.word	0x00017bd5
   1a940:	200000f8 	.word	0x200000f8
   1a944:	00017ad5 	.word	0x00017ad5
   1a948:	200000ec 	.word	0x200000ec
   1a94c:	00017bb5 	.word	0x00017bb5
   1a950:	0001850d 	.word	0x0001850d
   1a954:	00018b69 	.word	0x00018b69
   1a958:	0001b5e9 	.word	0x0001b5e9
   1a95c:	0001c3a9 	.word	0x0001c3a9
   1a960:	00019b79 	.word	0x00019b79

0001a964 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1a964:	b5b0      	push	{r4, r5, r7, lr}
   1a966:	b08a      	sub	sp, #40	; 0x28
   1a968:	af00      	add	r7, sp, #0
   1a96a:	60f8      	str	r0, [r7, #12]
   1a96c:	60b9      	str	r1, [r7, #8]
   1a96e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1a970:	2300      	movs	r3, #0
   1a972:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a974:	68fb      	ldr	r3, [r7, #12]
   1a976:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a978:	6a3b      	ldr	r3, [r7, #32]
   1a97a:	2b00      	cmp	r3, #0
   1a97c:	d101      	bne.n	1a982 <xQueueReceive+0x1e>
   1a97e:	b672      	cpsid	i
   1a980:	e7fe      	b.n	1a980 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a982:	68bb      	ldr	r3, [r7, #8]
   1a984:	2b00      	cmp	r3, #0
   1a986:	d103      	bne.n	1a990 <xQueueReceive+0x2c>
   1a988:	6a3b      	ldr	r3, [r7, #32]
   1a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a98c:	2b00      	cmp	r3, #0
   1a98e:	d101      	bne.n	1a994 <xQueueReceive+0x30>
   1a990:	2301      	movs	r3, #1
   1a992:	e000      	b.n	1a996 <xQueueReceive+0x32>
   1a994:	2300      	movs	r3, #0
   1a996:	2b00      	cmp	r3, #0
   1a998:	d101      	bne.n	1a99e <xQueueReceive+0x3a>
   1a99a:	b672      	cpsid	i
   1a99c:	e7fe      	b.n	1a99c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a99e:	4bbf      	ldr	r3, [pc, #764]	; (1ac9c <xQueueReceive+0x338>)
   1a9a0:	4798      	blx	r3
   1a9a2:	1e03      	subs	r3, r0, #0
   1a9a4:	d102      	bne.n	1a9ac <xQueueReceive+0x48>
   1a9a6:	687b      	ldr	r3, [r7, #4]
   1a9a8:	2b00      	cmp	r3, #0
   1a9aa:	d101      	bne.n	1a9b0 <xQueueReceive+0x4c>
   1a9ac:	2301      	movs	r3, #1
   1a9ae:	e000      	b.n	1a9b2 <xQueueReceive+0x4e>
   1a9b0:	2300      	movs	r3, #0
   1a9b2:	2b00      	cmp	r3, #0
   1a9b4:	d101      	bne.n	1a9ba <xQueueReceive+0x56>
   1a9b6:	b672      	cpsid	i
   1a9b8:	e7fe      	b.n	1a9b8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a9ba:	4bb9      	ldr	r3, [pc, #740]	; (1aca0 <xQueueReceive+0x33c>)
   1a9bc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a9be:	6a3b      	ldr	r3, [r7, #32]
   1a9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a9c2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a9c4:	69fb      	ldr	r3, [r7, #28]
   1a9c6:	2b00      	cmp	r3, #0
   1a9c8:	d100      	bne.n	1a9cc <xQueueReceive+0x68>
   1a9ca:	e07d      	b.n	1aac8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1a9cc:	68ba      	ldr	r2, [r7, #8]
   1a9ce:	6a3b      	ldr	r3, [r7, #32]
   1a9d0:	0011      	movs	r1, r2
   1a9d2:	0018      	movs	r0, r3
   1a9d4:	4bb3      	ldr	r3, [pc, #716]	; (1aca4 <xQueueReceive+0x340>)
   1a9d6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1a9d8:	4bb3      	ldr	r3, [pc, #716]	; (1aca8 <xQueueReceive+0x344>)
   1a9da:	4798      	blx	r3
   1a9dc:	0003      	movs	r3, r0
   1a9de:	0018      	movs	r0, r3
   1a9e0:	4bb2      	ldr	r3, [pc, #712]	; (1acac <xQueueReceive+0x348>)
   1a9e2:	4798      	blx	r3
   1a9e4:	0003      	movs	r3, r0
   1a9e6:	001a      	movs	r2, r3
   1a9e8:	4bb1      	ldr	r3, [pc, #708]	; (1acb0 <xQueueReceive+0x34c>)
   1a9ea:	881b      	ldrh	r3, [r3, #0]
   1a9ec:	4013      	ands	r3, r2
   1a9ee:	b29b      	uxth	r3, r3
   1a9f0:	2b00      	cmp	r3, #0
   1a9f2:	d029      	beq.n	1aa48 <xQueueReceive+0xe4>
   1a9f4:	6a3b      	ldr	r3, [r7, #32]
   1a9f6:	0018      	movs	r0, r3
   1a9f8:	4bae      	ldr	r3, [pc, #696]	; (1acb4 <xQueueReceive+0x350>)
   1a9fa:	4798      	blx	r3
   1a9fc:	0003      	movs	r3, r0
   1a9fe:	001a      	movs	r2, r3
   1aa00:	4bab      	ldr	r3, [pc, #684]	; (1acb0 <xQueueReceive+0x34c>)
   1aa02:	881b      	ldrh	r3, [r3, #0]
   1aa04:	4013      	ands	r3, r2
   1aa06:	b29b      	uxth	r3, r3
   1aa08:	2b00      	cmp	r3, #0
   1aa0a:	d01d      	beq.n	1aa48 <xQueueReceive+0xe4>
   1aa0c:	6a3b      	ldr	r3, [r7, #32]
   1aa0e:	0018      	movs	r0, r3
   1aa10:	4ba9      	ldr	r3, [pc, #676]	; (1acb8 <xQueueReceive+0x354>)
   1aa12:	4798      	blx	r3
   1aa14:	0003      	movs	r3, r0
   1aa16:	001a      	movs	r2, r3
   1aa18:	4ba8      	ldr	r3, [pc, #672]	; (1acbc <xQueueReceive+0x358>)
   1aa1a:	5c9b      	ldrb	r3, [r3, r2]
   1aa1c:	3328      	adds	r3, #40	; 0x28
   1aa1e:	b2db      	uxtb	r3, r3
   1aa20:	001d      	movs	r5, r3
   1aa22:	6a3b      	ldr	r3, [r7, #32]
   1aa24:	0018      	movs	r0, r3
   1aa26:	4ba4      	ldr	r3, [pc, #656]	; (1acb8 <xQueueReceive+0x354>)
   1aa28:	4798      	blx	r3
   1aa2a:	0003      	movs	r3, r0
   1aa2c:	001a      	movs	r2, r3
   1aa2e:	4ba3      	ldr	r3, [pc, #652]	; (1acbc <xQueueReceive+0x358>)
   1aa30:	5c9c      	ldrb	r4, [r3, r2]
   1aa32:	6a3b      	ldr	r3, [r7, #32]
   1aa34:	0018      	movs	r0, r3
   1aa36:	4ba2      	ldr	r3, [pc, #648]	; (1acc0 <xQueueReceive+0x35c>)
   1aa38:	4798      	blx	r3
   1aa3a:	0003      	movs	r3, r0
   1aa3c:	b2db      	uxtb	r3, r3
   1aa3e:	001a      	movs	r2, r3
   1aa40:	0021      	movs	r1, r4
   1aa42:	0028      	movs	r0, r5
   1aa44:	4b9f      	ldr	r3, [pc, #636]	; (1acc4 <xQueueReceive+0x360>)
   1aa46:	4798      	blx	r3
   1aa48:	6a3b      	ldr	r3, [r7, #32]
   1aa4a:	0018      	movs	r0, r3
   1aa4c:	4b9a      	ldr	r3, [pc, #616]	; (1acb8 <xQueueReceive+0x354>)
   1aa4e:	4798      	blx	r3
   1aa50:	0003      	movs	r3, r0
   1aa52:	001a      	movs	r2, r3
   1aa54:	4b99      	ldr	r3, [pc, #612]	; (1acbc <xQueueReceive+0x358>)
   1aa56:	5c9c      	ldrb	r4, [r3, r2]
   1aa58:	6a3b      	ldr	r3, [r7, #32]
   1aa5a:	0018      	movs	r0, r3
   1aa5c:	4b98      	ldr	r3, [pc, #608]	; (1acc0 <xQueueReceive+0x35c>)
   1aa5e:	4798      	blx	r3
   1aa60:	0003      	movs	r3, r0
   1aa62:	b2dd      	uxtb	r5, r3
   1aa64:	6a3b      	ldr	r3, [r7, #32]
   1aa66:	0018      	movs	r0, r3
   1aa68:	4b93      	ldr	r3, [pc, #588]	; (1acb8 <xQueueReceive+0x354>)
   1aa6a:	4798      	blx	r3
   1aa6c:	0003      	movs	r3, r0
   1aa6e:	001a      	movs	r2, r3
   1aa70:	4b92      	ldr	r3, [pc, #584]	; (1acbc <xQueueReceive+0x358>)
   1aa72:	5c9b      	ldrb	r3, [r3, r2]
   1aa74:	2b02      	cmp	r3, #2
   1aa76:	d108      	bne.n	1aa8a <xQueueReceive+0x126>
   1aa78:	4b8b      	ldr	r3, [pc, #556]	; (1aca8 <xQueueReceive+0x344>)
   1aa7a:	4798      	blx	r3
   1aa7c:	0003      	movs	r3, r0
   1aa7e:	0018      	movs	r0, r3
   1aa80:	4b91      	ldr	r3, [pc, #580]	; (1acc8 <xQueueReceive+0x364>)
   1aa82:	4798      	blx	r3
   1aa84:	0003      	movs	r3, r0
   1aa86:	b2db      	uxtb	r3, r3
   1aa88:	e004      	b.n	1aa94 <xQueueReceive+0x130>
   1aa8a:	6a3b      	ldr	r3, [r7, #32]
   1aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aa8e:	b2db      	uxtb	r3, r3
   1aa90:	3b01      	subs	r3, #1
   1aa92:	b2db      	uxtb	r3, r3
   1aa94:	001a      	movs	r2, r3
   1aa96:	0029      	movs	r1, r5
   1aa98:	0020      	movs	r0, r4
   1aa9a:	4b8c      	ldr	r3, [pc, #560]	; (1accc <xQueueReceive+0x368>)
   1aa9c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1aa9e:	69fb      	ldr	r3, [r7, #28]
   1aaa0:	1e5a      	subs	r2, r3, #1
   1aaa2:	6a3b      	ldr	r3, [r7, #32]
   1aaa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aaa6:	6a3b      	ldr	r3, [r7, #32]
   1aaa8:	691b      	ldr	r3, [r3, #16]
   1aaaa:	2b00      	cmp	r3, #0
   1aaac:	d008      	beq.n	1aac0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aaae:	6a3b      	ldr	r3, [r7, #32]
   1aab0:	3310      	adds	r3, #16
   1aab2:	0018      	movs	r0, r3
   1aab4:	4b86      	ldr	r3, [pc, #536]	; (1acd0 <xQueueReceive+0x36c>)
   1aab6:	4798      	blx	r3
   1aab8:	1e03      	subs	r3, r0, #0
   1aaba:	d001      	beq.n	1aac0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1aabc:	4b85      	ldr	r3, [pc, #532]	; (1acd4 <xQueueReceive+0x370>)
   1aabe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1aac0:	4b85      	ldr	r3, [pc, #532]	; (1acd8 <xQueueReceive+0x374>)
   1aac2:	4798      	blx	r3
				return pdPASS;
   1aac4:	2301      	movs	r3, #1
   1aac6:	e15f      	b.n	1ad88 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1aac8:	687b      	ldr	r3, [r7, #4]
   1aaca:	2b00      	cmp	r3, #0
   1aacc:	d13b      	bne.n	1ab46 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1aace:	4b82      	ldr	r3, [pc, #520]	; (1acd8 <xQueueReceive+0x374>)
   1aad0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1aad2:	4b75      	ldr	r3, [pc, #468]	; (1aca8 <xQueueReceive+0x344>)
   1aad4:	4798      	blx	r3
   1aad6:	0003      	movs	r3, r0
   1aad8:	0018      	movs	r0, r3
   1aada:	4b74      	ldr	r3, [pc, #464]	; (1acac <xQueueReceive+0x348>)
   1aadc:	4798      	blx	r3
   1aade:	0003      	movs	r3, r0
   1aae0:	001a      	movs	r2, r3
   1aae2:	4b73      	ldr	r3, [pc, #460]	; (1acb0 <xQueueReceive+0x34c>)
   1aae4:	881b      	ldrh	r3, [r3, #0]
   1aae6:	4013      	ands	r3, r2
   1aae8:	b29b      	uxth	r3, r3
   1aaea:	2b00      	cmp	r3, #0
   1aaec:	d029      	beq.n	1ab42 <xQueueReceive+0x1de>
   1aaee:	6a3b      	ldr	r3, [r7, #32]
   1aaf0:	0018      	movs	r0, r3
   1aaf2:	4b70      	ldr	r3, [pc, #448]	; (1acb4 <xQueueReceive+0x350>)
   1aaf4:	4798      	blx	r3
   1aaf6:	0003      	movs	r3, r0
   1aaf8:	001a      	movs	r2, r3
   1aafa:	4b6d      	ldr	r3, [pc, #436]	; (1acb0 <xQueueReceive+0x34c>)
   1aafc:	881b      	ldrh	r3, [r3, #0]
   1aafe:	4013      	ands	r3, r2
   1ab00:	b29b      	uxth	r3, r3
   1ab02:	2b00      	cmp	r3, #0
   1ab04:	d01d      	beq.n	1ab42 <xQueueReceive+0x1de>
   1ab06:	6a3b      	ldr	r3, [r7, #32]
   1ab08:	0018      	movs	r0, r3
   1ab0a:	4b6b      	ldr	r3, [pc, #428]	; (1acb8 <xQueueReceive+0x354>)
   1ab0c:	4798      	blx	r3
   1ab0e:	0003      	movs	r3, r0
   1ab10:	001a      	movs	r2, r3
   1ab12:	4b6a      	ldr	r3, [pc, #424]	; (1acbc <xQueueReceive+0x358>)
   1ab14:	5c9b      	ldrb	r3, [r3, r2]
   1ab16:	3350      	adds	r3, #80	; 0x50
   1ab18:	b2db      	uxtb	r3, r3
   1ab1a:	001d      	movs	r5, r3
   1ab1c:	6a3b      	ldr	r3, [r7, #32]
   1ab1e:	0018      	movs	r0, r3
   1ab20:	4b65      	ldr	r3, [pc, #404]	; (1acb8 <xQueueReceive+0x354>)
   1ab22:	4798      	blx	r3
   1ab24:	0003      	movs	r3, r0
   1ab26:	001a      	movs	r2, r3
   1ab28:	4b64      	ldr	r3, [pc, #400]	; (1acbc <xQueueReceive+0x358>)
   1ab2a:	5c9c      	ldrb	r4, [r3, r2]
   1ab2c:	6a3b      	ldr	r3, [r7, #32]
   1ab2e:	0018      	movs	r0, r3
   1ab30:	4b63      	ldr	r3, [pc, #396]	; (1acc0 <xQueueReceive+0x35c>)
   1ab32:	4798      	blx	r3
   1ab34:	0003      	movs	r3, r0
   1ab36:	b2db      	uxtb	r3, r3
   1ab38:	001a      	movs	r2, r3
   1ab3a:	0021      	movs	r1, r4
   1ab3c:	0028      	movs	r0, r5
   1ab3e:	4b61      	ldr	r3, [pc, #388]	; (1acc4 <xQueueReceive+0x360>)
   1ab40:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1ab42:	2300      	movs	r3, #0
   1ab44:	e120      	b.n	1ad88 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab48:	2b00      	cmp	r3, #0
   1ab4a:	d106      	bne.n	1ab5a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ab4c:	2314      	movs	r3, #20
   1ab4e:	18fb      	adds	r3, r7, r3
   1ab50:	0018      	movs	r0, r3
   1ab52:	4b62      	ldr	r3, [pc, #392]	; (1acdc <xQueueReceive+0x378>)
   1ab54:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1ab56:	2301      	movs	r3, #1
   1ab58:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ab5a:	4b5f      	ldr	r3, [pc, #380]	; (1acd8 <xQueueReceive+0x374>)
   1ab5c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ab5e:	4b60      	ldr	r3, [pc, #384]	; (1ace0 <xQueueReceive+0x37c>)
   1ab60:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1ab62:	4b4f      	ldr	r3, [pc, #316]	; (1aca0 <xQueueReceive+0x33c>)
   1ab64:	4798      	blx	r3
   1ab66:	6a3b      	ldr	r3, [r7, #32]
   1ab68:	2244      	movs	r2, #68	; 0x44
   1ab6a:	5c9b      	ldrb	r3, [r3, r2]
   1ab6c:	b25b      	sxtb	r3, r3
   1ab6e:	3301      	adds	r3, #1
   1ab70:	d103      	bne.n	1ab7a <xQueueReceive+0x216>
   1ab72:	6a3b      	ldr	r3, [r7, #32]
   1ab74:	2244      	movs	r2, #68	; 0x44
   1ab76:	2100      	movs	r1, #0
   1ab78:	5499      	strb	r1, [r3, r2]
   1ab7a:	6a3b      	ldr	r3, [r7, #32]
   1ab7c:	2245      	movs	r2, #69	; 0x45
   1ab7e:	5c9b      	ldrb	r3, [r3, r2]
   1ab80:	b25b      	sxtb	r3, r3
   1ab82:	3301      	adds	r3, #1
   1ab84:	d103      	bne.n	1ab8e <xQueueReceive+0x22a>
   1ab86:	6a3b      	ldr	r3, [r7, #32]
   1ab88:	2245      	movs	r2, #69	; 0x45
   1ab8a:	2100      	movs	r1, #0
   1ab8c:	5499      	strb	r1, [r3, r2]
   1ab8e:	4b52      	ldr	r3, [pc, #328]	; (1acd8 <xQueueReceive+0x374>)
   1ab90:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ab92:	1d3a      	adds	r2, r7, #4
   1ab94:	2314      	movs	r3, #20
   1ab96:	18fb      	adds	r3, r7, r3
   1ab98:	0011      	movs	r1, r2
   1ab9a:	0018      	movs	r0, r3
   1ab9c:	4b51      	ldr	r3, [pc, #324]	; (1ace4 <xQueueReceive+0x380>)
   1ab9e:	4798      	blx	r3
   1aba0:	1e03      	subs	r3, r0, #0
   1aba2:	d000      	beq.n	1aba6 <xQueueReceive+0x242>
   1aba4:	e0aa      	b.n	1acfc <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1aba6:	6a3b      	ldr	r3, [r7, #32]
   1aba8:	0018      	movs	r0, r3
   1abaa:	4b4f      	ldr	r3, [pc, #316]	; (1ace8 <xQueueReceive+0x384>)
   1abac:	4798      	blx	r3
   1abae:	1e03      	subs	r3, r0, #0
   1abb0:	d06d      	beq.n	1ac8e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1abb2:	4b3d      	ldr	r3, [pc, #244]	; (1aca8 <xQueueReceive+0x344>)
   1abb4:	4798      	blx	r3
   1abb6:	0003      	movs	r3, r0
   1abb8:	0018      	movs	r0, r3
   1abba:	4b3c      	ldr	r3, [pc, #240]	; (1acac <xQueueReceive+0x348>)
   1abbc:	4798      	blx	r3
   1abbe:	0003      	movs	r3, r0
   1abc0:	001a      	movs	r2, r3
   1abc2:	4b3b      	ldr	r3, [pc, #236]	; (1acb0 <xQueueReceive+0x34c>)
   1abc4:	881b      	ldrh	r3, [r3, #0]
   1abc6:	4013      	ands	r3, r2
   1abc8:	b29b      	uxth	r3, r3
   1abca:	2b00      	cmp	r3, #0
   1abcc:	d029      	beq.n	1ac22 <xQueueReceive+0x2be>
   1abce:	6a3b      	ldr	r3, [r7, #32]
   1abd0:	0018      	movs	r0, r3
   1abd2:	4b38      	ldr	r3, [pc, #224]	; (1acb4 <xQueueReceive+0x350>)
   1abd4:	4798      	blx	r3
   1abd6:	0003      	movs	r3, r0
   1abd8:	001a      	movs	r2, r3
   1abda:	4b35      	ldr	r3, [pc, #212]	; (1acb0 <xQueueReceive+0x34c>)
   1abdc:	881b      	ldrh	r3, [r3, #0]
   1abde:	4013      	ands	r3, r2
   1abe0:	b29b      	uxth	r3, r3
   1abe2:	2b00      	cmp	r3, #0
   1abe4:	d01d      	beq.n	1ac22 <xQueueReceive+0x2be>
   1abe6:	6a3b      	ldr	r3, [r7, #32]
   1abe8:	0018      	movs	r0, r3
   1abea:	4b33      	ldr	r3, [pc, #204]	; (1acb8 <xQueueReceive+0x354>)
   1abec:	4798      	blx	r3
   1abee:	0003      	movs	r3, r0
   1abf0:	001a      	movs	r2, r3
   1abf2:	4b32      	ldr	r3, [pc, #200]	; (1acbc <xQueueReceive+0x358>)
   1abf4:	5c9b      	ldrb	r3, [r3, r2]
   1abf6:	3368      	adds	r3, #104	; 0x68
   1abf8:	b2db      	uxtb	r3, r3
   1abfa:	001d      	movs	r5, r3
   1abfc:	6a3b      	ldr	r3, [r7, #32]
   1abfe:	0018      	movs	r0, r3
   1ac00:	4b2d      	ldr	r3, [pc, #180]	; (1acb8 <xQueueReceive+0x354>)
   1ac02:	4798      	blx	r3
   1ac04:	0003      	movs	r3, r0
   1ac06:	001a      	movs	r2, r3
   1ac08:	4b2c      	ldr	r3, [pc, #176]	; (1acbc <xQueueReceive+0x358>)
   1ac0a:	5c9c      	ldrb	r4, [r3, r2]
   1ac0c:	6a3b      	ldr	r3, [r7, #32]
   1ac0e:	0018      	movs	r0, r3
   1ac10:	4b2b      	ldr	r3, [pc, #172]	; (1acc0 <xQueueReceive+0x35c>)
   1ac12:	4798      	blx	r3
   1ac14:	0003      	movs	r3, r0
   1ac16:	b2db      	uxtb	r3, r3
   1ac18:	001a      	movs	r2, r3
   1ac1a:	0021      	movs	r1, r4
   1ac1c:	0028      	movs	r0, r5
   1ac1e:	4b29      	ldr	r3, [pc, #164]	; (1acc4 <xQueueReceive+0x360>)
   1ac20:	4798      	blx	r3
   1ac22:	6a3b      	ldr	r3, [r7, #32]
   1ac24:	0018      	movs	r0, r3
   1ac26:	4b24      	ldr	r3, [pc, #144]	; (1acb8 <xQueueReceive+0x354>)
   1ac28:	4798      	blx	r3
   1ac2a:	0003      	movs	r3, r0
   1ac2c:	001a      	movs	r2, r3
   1ac2e:	4b23      	ldr	r3, [pc, #140]	; (1acbc <xQueueReceive+0x358>)
   1ac30:	5c9b      	ldrb	r3, [r3, r2]
   1ac32:	2b02      	cmp	r3, #2
   1ac34:	d018      	beq.n	1ac68 <xQueueReceive+0x304>
   1ac36:	4b1c      	ldr	r3, [pc, #112]	; (1aca8 <xQueueReceive+0x344>)
   1ac38:	4798      	blx	r3
   1ac3a:	0003      	movs	r3, r0
   1ac3c:	0018      	movs	r0, r3
   1ac3e:	4b1b      	ldr	r3, [pc, #108]	; (1acac <xQueueReceive+0x348>)
   1ac40:	4798      	blx	r3
   1ac42:	0003      	movs	r3, r0
   1ac44:	001a      	movs	r2, r3
   1ac46:	4b1a      	ldr	r3, [pc, #104]	; (1acb0 <xQueueReceive+0x34c>)
   1ac48:	881b      	ldrh	r3, [r3, #0]
   1ac4a:	4013      	ands	r3, r2
   1ac4c:	b29b      	uxth	r3, r3
   1ac4e:	2b00      	cmp	r3, #0
   1ac50:	d00a      	beq.n	1ac68 <xQueueReceive+0x304>
   1ac52:	4b15      	ldr	r3, [pc, #84]	; (1aca8 <xQueueReceive+0x344>)
   1ac54:	4798      	blx	r3
   1ac56:	0003      	movs	r3, r0
   1ac58:	0018      	movs	r0, r3
   1ac5a:	4b1b      	ldr	r3, [pc, #108]	; (1acc8 <xQueueReceive+0x364>)
   1ac5c:	4798      	blx	r3
   1ac5e:	0003      	movs	r3, r0
   1ac60:	b2db      	uxtb	r3, r3
   1ac62:	0018      	movs	r0, r3
   1ac64:	4b21      	ldr	r3, [pc, #132]	; (1acec <xQueueReceive+0x388>)
   1ac66:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1ac68:	6a3b      	ldr	r3, [r7, #32]
   1ac6a:	3324      	adds	r3, #36	; 0x24
   1ac6c:	687a      	ldr	r2, [r7, #4]
   1ac6e:	0011      	movs	r1, r2
   1ac70:	0018      	movs	r0, r3
   1ac72:	4b1f      	ldr	r3, [pc, #124]	; (1acf0 <xQueueReceive+0x38c>)
   1ac74:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1ac76:	6a3b      	ldr	r3, [r7, #32]
   1ac78:	0018      	movs	r0, r3
   1ac7a:	4b1e      	ldr	r3, [pc, #120]	; (1acf4 <xQueueReceive+0x390>)
   1ac7c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1ac7e:	4b1e      	ldr	r3, [pc, #120]	; (1acf8 <xQueueReceive+0x394>)
   1ac80:	4798      	blx	r3
   1ac82:	1e03      	subs	r3, r0, #0
   1ac84:	d000      	beq.n	1ac88 <xQueueReceive+0x324>
   1ac86:	e698      	b.n	1a9ba <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1ac88:	4b12      	ldr	r3, [pc, #72]	; (1acd4 <xQueueReceive+0x370>)
   1ac8a:	4798      	blx	r3
   1ac8c:	e695      	b.n	1a9ba <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1ac8e:	6a3b      	ldr	r3, [r7, #32]
   1ac90:	0018      	movs	r0, r3
   1ac92:	4b18      	ldr	r3, [pc, #96]	; (1acf4 <xQueueReceive+0x390>)
   1ac94:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1ac96:	4b18      	ldr	r3, [pc, #96]	; (1acf8 <xQueueReceive+0x394>)
   1ac98:	4798      	blx	r3
   1ac9a:	e68e      	b.n	1a9ba <xQueueReceive+0x56>
   1ac9c:	0001c839 	.word	0x0001c839
   1aca0:	00019b19 	.word	0x00019b19
   1aca4:	0001b3c5 	.word	0x0001b3c5
   1aca8:	00017db1 	.word	0x00017db1
   1acac:	00017b15 	.word	0x00017b15
   1acb0:	200000f8 	.word	0x200000f8
   1acb4:	00017bd5 	.word	0x00017bd5
   1acb8:	00017ad5 	.word	0x00017ad5
   1acbc:	200000ec 	.word	0x200000ec
   1acc0:	00017bb5 	.word	0x00017bb5
   1acc4:	0001850d 	.word	0x0001850d
   1acc8:	00017af5 	.word	0x00017af5
   1accc:	00018b69 	.word	0x00018b69
   1acd0:	0001c3a9 	.word	0x0001c3a9
   1acd4:	00019b01 	.word	0x00019b01
   1acd8:	00019b3d 	.word	0x00019b3d
   1acdc:	0001c4e9 	.word	0x0001c4e9
   1ace0:	0001bdd1 	.word	0x0001bdd1
   1ace4:	0001c511 	.word	0x0001c511
   1ace8:	0001b505 	.word	0x0001b505
   1acec:	00018ca5 	.word	0x00018ca5
   1acf0:	0001c285 	.word	0x0001c285
   1acf4:	0001b415 	.word	0x0001b415
   1acf8:	0001bde9 	.word	0x0001bde9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1acfc:	6a3b      	ldr	r3, [r7, #32]
   1acfe:	0018      	movs	r0, r3
   1ad00:	4b23      	ldr	r3, [pc, #140]	; (1ad90 <xQueueReceive+0x42c>)
   1ad02:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ad04:	4b23      	ldr	r3, [pc, #140]	; (1ad94 <xQueueReceive+0x430>)
   1ad06:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ad08:	6a3b      	ldr	r3, [r7, #32]
   1ad0a:	0018      	movs	r0, r3
   1ad0c:	4b22      	ldr	r3, [pc, #136]	; (1ad98 <xQueueReceive+0x434>)
   1ad0e:	4798      	blx	r3
   1ad10:	1e03      	subs	r3, r0, #0
   1ad12:	d100      	bne.n	1ad16 <xQueueReceive+0x3b2>
   1ad14:	e651      	b.n	1a9ba <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ad16:	4b21      	ldr	r3, [pc, #132]	; (1ad9c <xQueueReceive+0x438>)
   1ad18:	4798      	blx	r3
   1ad1a:	0003      	movs	r3, r0
   1ad1c:	0018      	movs	r0, r3
   1ad1e:	4b20      	ldr	r3, [pc, #128]	; (1ada0 <xQueueReceive+0x43c>)
   1ad20:	4798      	blx	r3
   1ad22:	0003      	movs	r3, r0
   1ad24:	001a      	movs	r2, r3
   1ad26:	4b1f      	ldr	r3, [pc, #124]	; (1ada4 <xQueueReceive+0x440>)
   1ad28:	881b      	ldrh	r3, [r3, #0]
   1ad2a:	4013      	ands	r3, r2
   1ad2c:	b29b      	uxth	r3, r3
   1ad2e:	2b00      	cmp	r3, #0
   1ad30:	d029      	beq.n	1ad86 <xQueueReceive+0x422>
   1ad32:	6a3b      	ldr	r3, [r7, #32]
   1ad34:	0018      	movs	r0, r3
   1ad36:	4b1c      	ldr	r3, [pc, #112]	; (1ada8 <xQueueReceive+0x444>)
   1ad38:	4798      	blx	r3
   1ad3a:	0003      	movs	r3, r0
   1ad3c:	001a      	movs	r2, r3
   1ad3e:	4b19      	ldr	r3, [pc, #100]	; (1ada4 <xQueueReceive+0x440>)
   1ad40:	881b      	ldrh	r3, [r3, #0]
   1ad42:	4013      	ands	r3, r2
   1ad44:	b29b      	uxth	r3, r3
   1ad46:	2b00      	cmp	r3, #0
   1ad48:	d01d      	beq.n	1ad86 <xQueueReceive+0x422>
   1ad4a:	6a3b      	ldr	r3, [r7, #32]
   1ad4c:	0018      	movs	r0, r3
   1ad4e:	4b17      	ldr	r3, [pc, #92]	; (1adac <xQueueReceive+0x448>)
   1ad50:	4798      	blx	r3
   1ad52:	0003      	movs	r3, r0
   1ad54:	001a      	movs	r2, r3
   1ad56:	4b16      	ldr	r3, [pc, #88]	; (1adb0 <xQueueReceive+0x44c>)
   1ad58:	5c9b      	ldrb	r3, [r3, r2]
   1ad5a:	3350      	adds	r3, #80	; 0x50
   1ad5c:	b2db      	uxtb	r3, r3
   1ad5e:	001d      	movs	r5, r3
   1ad60:	6a3b      	ldr	r3, [r7, #32]
   1ad62:	0018      	movs	r0, r3
   1ad64:	4b11      	ldr	r3, [pc, #68]	; (1adac <xQueueReceive+0x448>)
   1ad66:	4798      	blx	r3
   1ad68:	0003      	movs	r3, r0
   1ad6a:	001a      	movs	r2, r3
   1ad6c:	4b10      	ldr	r3, [pc, #64]	; (1adb0 <xQueueReceive+0x44c>)
   1ad6e:	5c9c      	ldrb	r4, [r3, r2]
   1ad70:	6a3b      	ldr	r3, [r7, #32]
   1ad72:	0018      	movs	r0, r3
   1ad74:	4b0f      	ldr	r3, [pc, #60]	; (1adb4 <xQueueReceive+0x450>)
   1ad76:	4798      	blx	r3
   1ad78:	0003      	movs	r3, r0
   1ad7a:	b2db      	uxtb	r3, r3
   1ad7c:	001a      	movs	r2, r3
   1ad7e:	0021      	movs	r1, r4
   1ad80:	0028      	movs	r0, r5
   1ad82:	4b0d      	ldr	r3, [pc, #52]	; (1adb8 <xQueueReceive+0x454>)
   1ad84:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1ad86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1ad88:	0018      	movs	r0, r3
   1ad8a:	46bd      	mov	sp, r7
   1ad8c:	b00a      	add	sp, #40	; 0x28
   1ad8e:	bdb0      	pop	{r4, r5, r7, pc}
   1ad90:	0001b415 	.word	0x0001b415
   1ad94:	0001bde9 	.word	0x0001bde9
   1ad98:	0001b505 	.word	0x0001b505
   1ad9c:	00017db1 	.word	0x00017db1
   1ada0:	00017b15 	.word	0x00017b15
   1ada4:	200000f8 	.word	0x200000f8
   1ada8:	00017bd5 	.word	0x00017bd5
   1adac:	00017ad5 	.word	0x00017ad5
   1adb0:	200000ec 	.word	0x200000ec
   1adb4:	00017bb5 	.word	0x00017bb5
   1adb8:	0001850d 	.word	0x0001850d

0001adbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1adbc:	b5b0      	push	{r4, r5, r7, lr}
   1adbe:	b08a      	sub	sp, #40	; 0x28
   1adc0:	af00      	add	r7, sp, #0
   1adc2:	6078      	str	r0, [r7, #4]
   1adc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1adc6:	2300      	movs	r3, #0
   1adc8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1adca:	687b      	ldr	r3, [r7, #4]
   1adcc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1adce:	2300      	movs	r3, #0
   1add0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1add2:	69fb      	ldr	r3, [r7, #28]
   1add4:	2b00      	cmp	r3, #0
   1add6:	d101      	bne.n	1addc <xQueueSemaphoreTake+0x20>
   1add8:	b672      	cpsid	i
   1adda:	e7fe      	b.n	1adda <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1addc:	69fb      	ldr	r3, [r7, #28]
   1adde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ade0:	2b00      	cmp	r3, #0
   1ade2:	d001      	beq.n	1ade8 <xQueueSemaphoreTake+0x2c>
   1ade4:	b672      	cpsid	i
   1ade6:	e7fe      	b.n	1ade6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ade8:	4bcb      	ldr	r3, [pc, #812]	; (1b118 <xQueueSemaphoreTake+0x35c>)
   1adea:	4798      	blx	r3
   1adec:	1e03      	subs	r3, r0, #0
   1adee:	d102      	bne.n	1adf6 <xQueueSemaphoreTake+0x3a>
   1adf0:	683b      	ldr	r3, [r7, #0]
   1adf2:	2b00      	cmp	r3, #0
   1adf4:	d101      	bne.n	1adfa <xQueueSemaphoreTake+0x3e>
   1adf6:	2301      	movs	r3, #1
   1adf8:	e000      	b.n	1adfc <xQueueSemaphoreTake+0x40>
   1adfa:	2300      	movs	r3, #0
   1adfc:	2b00      	cmp	r3, #0
   1adfe:	d101      	bne.n	1ae04 <xQueueSemaphoreTake+0x48>
   1ae00:	b672      	cpsid	i
   1ae02:	e7fe      	b.n	1ae02 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1ae04:	4bc5      	ldr	r3, [pc, #788]	; (1b11c <xQueueSemaphoreTake+0x360>)
   1ae06:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1ae08:	69fb      	ldr	r3, [r7, #28]
   1ae0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ae0c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1ae0e:	69bb      	ldr	r3, [r7, #24]
   1ae10:	2b00      	cmp	r3, #0
   1ae12:	d100      	bne.n	1ae16 <xQueueSemaphoreTake+0x5a>
   1ae14:	e080      	b.n	1af18 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1ae16:	4bc2      	ldr	r3, [pc, #776]	; (1b120 <xQueueSemaphoreTake+0x364>)
   1ae18:	4798      	blx	r3
   1ae1a:	0003      	movs	r3, r0
   1ae1c:	0018      	movs	r0, r3
   1ae1e:	4bc1      	ldr	r3, [pc, #772]	; (1b124 <xQueueSemaphoreTake+0x368>)
   1ae20:	4798      	blx	r3
   1ae22:	0003      	movs	r3, r0
   1ae24:	001a      	movs	r2, r3
   1ae26:	4bc0      	ldr	r3, [pc, #768]	; (1b128 <xQueueSemaphoreTake+0x36c>)
   1ae28:	881b      	ldrh	r3, [r3, #0]
   1ae2a:	4013      	ands	r3, r2
   1ae2c:	b29b      	uxth	r3, r3
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d029      	beq.n	1ae86 <xQueueSemaphoreTake+0xca>
   1ae32:	69fb      	ldr	r3, [r7, #28]
   1ae34:	0018      	movs	r0, r3
   1ae36:	4bbd      	ldr	r3, [pc, #756]	; (1b12c <xQueueSemaphoreTake+0x370>)
   1ae38:	4798      	blx	r3
   1ae3a:	0003      	movs	r3, r0
   1ae3c:	001a      	movs	r2, r3
   1ae3e:	4bba      	ldr	r3, [pc, #744]	; (1b128 <xQueueSemaphoreTake+0x36c>)
   1ae40:	881b      	ldrh	r3, [r3, #0]
   1ae42:	4013      	ands	r3, r2
   1ae44:	b29b      	uxth	r3, r3
   1ae46:	2b00      	cmp	r3, #0
   1ae48:	d01d      	beq.n	1ae86 <xQueueSemaphoreTake+0xca>
   1ae4a:	69fb      	ldr	r3, [r7, #28]
   1ae4c:	0018      	movs	r0, r3
   1ae4e:	4bb8      	ldr	r3, [pc, #736]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1ae50:	4798      	blx	r3
   1ae52:	0003      	movs	r3, r0
   1ae54:	001a      	movs	r2, r3
   1ae56:	4bb7      	ldr	r3, [pc, #732]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1ae58:	5c9b      	ldrb	r3, [r3, r2]
   1ae5a:	3328      	adds	r3, #40	; 0x28
   1ae5c:	b2db      	uxtb	r3, r3
   1ae5e:	001d      	movs	r5, r3
   1ae60:	69fb      	ldr	r3, [r7, #28]
   1ae62:	0018      	movs	r0, r3
   1ae64:	4bb2      	ldr	r3, [pc, #712]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1ae66:	4798      	blx	r3
   1ae68:	0003      	movs	r3, r0
   1ae6a:	001a      	movs	r2, r3
   1ae6c:	4bb1      	ldr	r3, [pc, #708]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1ae6e:	5c9c      	ldrb	r4, [r3, r2]
   1ae70:	69fb      	ldr	r3, [r7, #28]
   1ae72:	0018      	movs	r0, r3
   1ae74:	4bb0      	ldr	r3, [pc, #704]	; (1b138 <xQueueSemaphoreTake+0x37c>)
   1ae76:	4798      	blx	r3
   1ae78:	0003      	movs	r3, r0
   1ae7a:	b2db      	uxtb	r3, r3
   1ae7c:	001a      	movs	r2, r3
   1ae7e:	0021      	movs	r1, r4
   1ae80:	0028      	movs	r0, r5
   1ae82:	4bae      	ldr	r3, [pc, #696]	; (1b13c <xQueueSemaphoreTake+0x380>)
   1ae84:	4798      	blx	r3
   1ae86:	69fb      	ldr	r3, [r7, #28]
   1ae88:	0018      	movs	r0, r3
   1ae8a:	4ba9      	ldr	r3, [pc, #676]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1ae8c:	4798      	blx	r3
   1ae8e:	0003      	movs	r3, r0
   1ae90:	001a      	movs	r2, r3
   1ae92:	4ba8      	ldr	r3, [pc, #672]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1ae94:	5c9c      	ldrb	r4, [r3, r2]
   1ae96:	69fb      	ldr	r3, [r7, #28]
   1ae98:	0018      	movs	r0, r3
   1ae9a:	4ba7      	ldr	r3, [pc, #668]	; (1b138 <xQueueSemaphoreTake+0x37c>)
   1ae9c:	4798      	blx	r3
   1ae9e:	0003      	movs	r3, r0
   1aea0:	b2dd      	uxtb	r5, r3
   1aea2:	69fb      	ldr	r3, [r7, #28]
   1aea4:	0018      	movs	r0, r3
   1aea6:	4ba2      	ldr	r3, [pc, #648]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1aea8:	4798      	blx	r3
   1aeaa:	0003      	movs	r3, r0
   1aeac:	001a      	movs	r2, r3
   1aeae:	4ba1      	ldr	r3, [pc, #644]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1aeb0:	5c9b      	ldrb	r3, [r3, r2]
   1aeb2:	2b02      	cmp	r3, #2
   1aeb4:	d108      	bne.n	1aec8 <xQueueSemaphoreTake+0x10c>
   1aeb6:	4b9a      	ldr	r3, [pc, #616]	; (1b120 <xQueueSemaphoreTake+0x364>)
   1aeb8:	4798      	blx	r3
   1aeba:	0003      	movs	r3, r0
   1aebc:	0018      	movs	r0, r3
   1aebe:	4ba0      	ldr	r3, [pc, #640]	; (1b140 <xQueueSemaphoreTake+0x384>)
   1aec0:	4798      	blx	r3
   1aec2:	0003      	movs	r3, r0
   1aec4:	b2db      	uxtb	r3, r3
   1aec6:	e004      	b.n	1aed2 <xQueueSemaphoreTake+0x116>
   1aec8:	69fb      	ldr	r3, [r7, #28]
   1aeca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aecc:	b2db      	uxtb	r3, r3
   1aece:	3b01      	subs	r3, #1
   1aed0:	b2db      	uxtb	r3, r3
   1aed2:	001a      	movs	r2, r3
   1aed4:	0029      	movs	r1, r5
   1aed6:	0020      	movs	r0, r4
   1aed8:	4b9a      	ldr	r3, [pc, #616]	; (1b144 <xQueueSemaphoreTake+0x388>)
   1aeda:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1aedc:	69bb      	ldr	r3, [r7, #24]
   1aede:	1e5a      	subs	r2, r3, #1
   1aee0:	69fb      	ldr	r3, [r7, #28]
   1aee2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1aee4:	69fb      	ldr	r3, [r7, #28]
   1aee6:	681b      	ldr	r3, [r3, #0]
   1aee8:	2b00      	cmp	r3, #0
   1aeea:	d104      	bne.n	1aef6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1aeec:	4b96      	ldr	r3, [pc, #600]	; (1b148 <xQueueSemaphoreTake+0x38c>)
   1aeee:	4798      	blx	r3
   1aef0:	0002      	movs	r2, r0
   1aef2:	69fb      	ldr	r3, [r7, #28]
   1aef4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aef6:	69fb      	ldr	r3, [r7, #28]
   1aef8:	691b      	ldr	r3, [r3, #16]
   1aefa:	2b00      	cmp	r3, #0
   1aefc:	d008      	beq.n	1af10 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aefe:	69fb      	ldr	r3, [r7, #28]
   1af00:	3310      	adds	r3, #16
   1af02:	0018      	movs	r0, r3
   1af04:	4b91      	ldr	r3, [pc, #580]	; (1b14c <xQueueSemaphoreTake+0x390>)
   1af06:	4798      	blx	r3
   1af08:	1e03      	subs	r3, r0, #0
   1af0a:	d001      	beq.n	1af10 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1af0c:	4b90      	ldr	r3, [pc, #576]	; (1b150 <xQueueSemaphoreTake+0x394>)
   1af0e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1af10:	4b90      	ldr	r3, [pc, #576]	; (1b154 <xQueueSemaphoreTake+0x398>)
   1af12:	4798      	blx	r3
				return pdPASS;
   1af14:	2301      	movs	r3, #1
   1af16:	e18b      	b.n	1b230 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1af18:	683b      	ldr	r3, [r7, #0]
   1af1a:	2b00      	cmp	r3, #0
   1af1c:	d140      	bne.n	1afa0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1af1e:	6a3b      	ldr	r3, [r7, #32]
   1af20:	2b00      	cmp	r3, #0
   1af22:	d001      	beq.n	1af28 <xQueueSemaphoreTake+0x16c>
   1af24:	b672      	cpsid	i
   1af26:	e7fe      	b.n	1af26 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1af28:	4b8a      	ldr	r3, [pc, #552]	; (1b154 <xQueueSemaphoreTake+0x398>)
   1af2a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1af2c:	4b7c      	ldr	r3, [pc, #496]	; (1b120 <xQueueSemaphoreTake+0x364>)
   1af2e:	4798      	blx	r3
   1af30:	0003      	movs	r3, r0
   1af32:	0018      	movs	r0, r3
   1af34:	4b7b      	ldr	r3, [pc, #492]	; (1b124 <xQueueSemaphoreTake+0x368>)
   1af36:	4798      	blx	r3
   1af38:	0003      	movs	r3, r0
   1af3a:	001a      	movs	r2, r3
   1af3c:	4b7a      	ldr	r3, [pc, #488]	; (1b128 <xQueueSemaphoreTake+0x36c>)
   1af3e:	881b      	ldrh	r3, [r3, #0]
   1af40:	4013      	ands	r3, r2
   1af42:	b29b      	uxth	r3, r3
   1af44:	2b00      	cmp	r3, #0
   1af46:	d029      	beq.n	1af9c <xQueueSemaphoreTake+0x1e0>
   1af48:	69fb      	ldr	r3, [r7, #28]
   1af4a:	0018      	movs	r0, r3
   1af4c:	4b77      	ldr	r3, [pc, #476]	; (1b12c <xQueueSemaphoreTake+0x370>)
   1af4e:	4798      	blx	r3
   1af50:	0003      	movs	r3, r0
   1af52:	001a      	movs	r2, r3
   1af54:	4b74      	ldr	r3, [pc, #464]	; (1b128 <xQueueSemaphoreTake+0x36c>)
   1af56:	881b      	ldrh	r3, [r3, #0]
   1af58:	4013      	ands	r3, r2
   1af5a:	b29b      	uxth	r3, r3
   1af5c:	2b00      	cmp	r3, #0
   1af5e:	d01d      	beq.n	1af9c <xQueueSemaphoreTake+0x1e0>
   1af60:	69fb      	ldr	r3, [r7, #28]
   1af62:	0018      	movs	r0, r3
   1af64:	4b72      	ldr	r3, [pc, #456]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1af66:	4798      	blx	r3
   1af68:	0003      	movs	r3, r0
   1af6a:	001a      	movs	r2, r3
   1af6c:	4b71      	ldr	r3, [pc, #452]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1af6e:	5c9b      	ldrb	r3, [r3, r2]
   1af70:	3350      	adds	r3, #80	; 0x50
   1af72:	b2db      	uxtb	r3, r3
   1af74:	001d      	movs	r5, r3
   1af76:	69fb      	ldr	r3, [r7, #28]
   1af78:	0018      	movs	r0, r3
   1af7a:	4b6d      	ldr	r3, [pc, #436]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1af7c:	4798      	blx	r3
   1af7e:	0003      	movs	r3, r0
   1af80:	001a      	movs	r2, r3
   1af82:	4b6c      	ldr	r3, [pc, #432]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1af84:	5c9c      	ldrb	r4, [r3, r2]
   1af86:	69fb      	ldr	r3, [r7, #28]
   1af88:	0018      	movs	r0, r3
   1af8a:	4b6b      	ldr	r3, [pc, #428]	; (1b138 <xQueueSemaphoreTake+0x37c>)
   1af8c:	4798      	blx	r3
   1af8e:	0003      	movs	r3, r0
   1af90:	b2db      	uxtb	r3, r3
   1af92:	001a      	movs	r2, r3
   1af94:	0021      	movs	r1, r4
   1af96:	0028      	movs	r0, r5
   1af98:	4b68      	ldr	r3, [pc, #416]	; (1b13c <xQueueSemaphoreTake+0x380>)
   1af9a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1af9c:	2300      	movs	r3, #0
   1af9e:	e147      	b.n	1b230 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afa2:	2b00      	cmp	r3, #0
   1afa4:	d106      	bne.n	1afb4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1afa6:	230c      	movs	r3, #12
   1afa8:	18fb      	adds	r3, r7, r3
   1afaa:	0018      	movs	r0, r3
   1afac:	4b6a      	ldr	r3, [pc, #424]	; (1b158 <xQueueSemaphoreTake+0x39c>)
   1afae:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1afb0:	2301      	movs	r3, #1
   1afb2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1afb4:	4b67      	ldr	r3, [pc, #412]	; (1b154 <xQueueSemaphoreTake+0x398>)
   1afb6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1afb8:	4b68      	ldr	r3, [pc, #416]	; (1b15c <xQueueSemaphoreTake+0x3a0>)
   1afba:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1afbc:	4b57      	ldr	r3, [pc, #348]	; (1b11c <xQueueSemaphoreTake+0x360>)
   1afbe:	4798      	blx	r3
   1afc0:	69fb      	ldr	r3, [r7, #28]
   1afc2:	2244      	movs	r2, #68	; 0x44
   1afc4:	5c9b      	ldrb	r3, [r3, r2]
   1afc6:	b25b      	sxtb	r3, r3
   1afc8:	3301      	adds	r3, #1
   1afca:	d103      	bne.n	1afd4 <xQueueSemaphoreTake+0x218>
   1afcc:	69fb      	ldr	r3, [r7, #28]
   1afce:	2244      	movs	r2, #68	; 0x44
   1afd0:	2100      	movs	r1, #0
   1afd2:	5499      	strb	r1, [r3, r2]
   1afd4:	69fb      	ldr	r3, [r7, #28]
   1afd6:	2245      	movs	r2, #69	; 0x45
   1afd8:	5c9b      	ldrb	r3, [r3, r2]
   1afda:	b25b      	sxtb	r3, r3
   1afdc:	3301      	adds	r3, #1
   1afde:	d103      	bne.n	1afe8 <xQueueSemaphoreTake+0x22c>
   1afe0:	69fb      	ldr	r3, [r7, #28]
   1afe2:	2245      	movs	r2, #69	; 0x45
   1afe4:	2100      	movs	r1, #0
   1afe6:	5499      	strb	r1, [r3, r2]
   1afe8:	4b5a      	ldr	r3, [pc, #360]	; (1b154 <xQueueSemaphoreTake+0x398>)
   1afea:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1afec:	003a      	movs	r2, r7
   1afee:	230c      	movs	r3, #12
   1aff0:	18fb      	adds	r3, r7, r3
   1aff2:	0011      	movs	r1, r2
   1aff4:	0018      	movs	r0, r3
   1aff6:	4b5a      	ldr	r3, [pc, #360]	; (1b160 <xQueueSemaphoreTake+0x3a4>)
   1aff8:	4798      	blx	r3
   1affa:	1e03      	subs	r3, r0, #0
   1affc:	d000      	beq.n	1b000 <xQueueSemaphoreTake+0x244>
   1affe:	e0bd      	b.n	1b17c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b000:	69fb      	ldr	r3, [r7, #28]
   1b002:	0018      	movs	r0, r3
   1b004:	4b57      	ldr	r3, [pc, #348]	; (1b164 <xQueueSemaphoreTake+0x3a8>)
   1b006:	4798      	blx	r3
   1b008:	1e03      	subs	r3, r0, #0
   1b00a:	d100      	bne.n	1b00e <xQueueSemaphoreTake+0x252>
   1b00c:	e07c      	b.n	1b108 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b00e:	4b44      	ldr	r3, [pc, #272]	; (1b120 <xQueueSemaphoreTake+0x364>)
   1b010:	4798      	blx	r3
   1b012:	0003      	movs	r3, r0
   1b014:	0018      	movs	r0, r3
   1b016:	4b43      	ldr	r3, [pc, #268]	; (1b124 <xQueueSemaphoreTake+0x368>)
   1b018:	4798      	blx	r3
   1b01a:	0003      	movs	r3, r0
   1b01c:	001a      	movs	r2, r3
   1b01e:	4b42      	ldr	r3, [pc, #264]	; (1b128 <xQueueSemaphoreTake+0x36c>)
   1b020:	881b      	ldrh	r3, [r3, #0]
   1b022:	4013      	ands	r3, r2
   1b024:	b29b      	uxth	r3, r3
   1b026:	2b00      	cmp	r3, #0
   1b028:	d029      	beq.n	1b07e <xQueueSemaphoreTake+0x2c2>
   1b02a:	69fb      	ldr	r3, [r7, #28]
   1b02c:	0018      	movs	r0, r3
   1b02e:	4b3f      	ldr	r3, [pc, #252]	; (1b12c <xQueueSemaphoreTake+0x370>)
   1b030:	4798      	blx	r3
   1b032:	0003      	movs	r3, r0
   1b034:	001a      	movs	r2, r3
   1b036:	4b3c      	ldr	r3, [pc, #240]	; (1b128 <xQueueSemaphoreTake+0x36c>)
   1b038:	881b      	ldrh	r3, [r3, #0]
   1b03a:	4013      	ands	r3, r2
   1b03c:	b29b      	uxth	r3, r3
   1b03e:	2b00      	cmp	r3, #0
   1b040:	d01d      	beq.n	1b07e <xQueueSemaphoreTake+0x2c2>
   1b042:	69fb      	ldr	r3, [r7, #28]
   1b044:	0018      	movs	r0, r3
   1b046:	4b3a      	ldr	r3, [pc, #232]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1b048:	4798      	blx	r3
   1b04a:	0003      	movs	r3, r0
   1b04c:	001a      	movs	r2, r3
   1b04e:	4b39      	ldr	r3, [pc, #228]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1b050:	5c9b      	ldrb	r3, [r3, r2]
   1b052:	3368      	adds	r3, #104	; 0x68
   1b054:	b2db      	uxtb	r3, r3
   1b056:	001d      	movs	r5, r3
   1b058:	69fb      	ldr	r3, [r7, #28]
   1b05a:	0018      	movs	r0, r3
   1b05c:	4b34      	ldr	r3, [pc, #208]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1b05e:	4798      	blx	r3
   1b060:	0003      	movs	r3, r0
   1b062:	001a      	movs	r2, r3
   1b064:	4b33      	ldr	r3, [pc, #204]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1b066:	5c9c      	ldrb	r4, [r3, r2]
   1b068:	69fb      	ldr	r3, [r7, #28]
   1b06a:	0018      	movs	r0, r3
   1b06c:	4b32      	ldr	r3, [pc, #200]	; (1b138 <xQueueSemaphoreTake+0x37c>)
   1b06e:	4798      	blx	r3
   1b070:	0003      	movs	r3, r0
   1b072:	b2db      	uxtb	r3, r3
   1b074:	001a      	movs	r2, r3
   1b076:	0021      	movs	r1, r4
   1b078:	0028      	movs	r0, r5
   1b07a:	4b30      	ldr	r3, [pc, #192]	; (1b13c <xQueueSemaphoreTake+0x380>)
   1b07c:	4798      	blx	r3
   1b07e:	69fb      	ldr	r3, [r7, #28]
   1b080:	0018      	movs	r0, r3
   1b082:	4b2b      	ldr	r3, [pc, #172]	; (1b130 <xQueueSemaphoreTake+0x374>)
   1b084:	4798      	blx	r3
   1b086:	0003      	movs	r3, r0
   1b088:	001a      	movs	r2, r3
   1b08a:	4b2a      	ldr	r3, [pc, #168]	; (1b134 <xQueueSemaphoreTake+0x378>)
   1b08c:	5c9b      	ldrb	r3, [r3, r2]
   1b08e:	2b02      	cmp	r3, #2
   1b090:	d018      	beq.n	1b0c4 <xQueueSemaphoreTake+0x308>
   1b092:	4b23      	ldr	r3, [pc, #140]	; (1b120 <xQueueSemaphoreTake+0x364>)
   1b094:	4798      	blx	r3
   1b096:	0003      	movs	r3, r0
   1b098:	0018      	movs	r0, r3
   1b09a:	4b22      	ldr	r3, [pc, #136]	; (1b124 <xQueueSemaphoreTake+0x368>)
   1b09c:	4798      	blx	r3
   1b09e:	0003      	movs	r3, r0
   1b0a0:	001a      	movs	r2, r3
   1b0a2:	4b21      	ldr	r3, [pc, #132]	; (1b128 <xQueueSemaphoreTake+0x36c>)
   1b0a4:	881b      	ldrh	r3, [r3, #0]
   1b0a6:	4013      	ands	r3, r2
   1b0a8:	b29b      	uxth	r3, r3
   1b0aa:	2b00      	cmp	r3, #0
   1b0ac:	d00a      	beq.n	1b0c4 <xQueueSemaphoreTake+0x308>
   1b0ae:	4b1c      	ldr	r3, [pc, #112]	; (1b120 <xQueueSemaphoreTake+0x364>)
   1b0b0:	4798      	blx	r3
   1b0b2:	0003      	movs	r3, r0
   1b0b4:	0018      	movs	r0, r3
   1b0b6:	4b22      	ldr	r3, [pc, #136]	; (1b140 <xQueueSemaphoreTake+0x384>)
   1b0b8:	4798      	blx	r3
   1b0ba:	0003      	movs	r3, r0
   1b0bc:	b2db      	uxtb	r3, r3
   1b0be:	0018      	movs	r0, r3
   1b0c0:	4b29      	ldr	r3, [pc, #164]	; (1b168 <xQueueSemaphoreTake+0x3ac>)
   1b0c2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b0c4:	69fb      	ldr	r3, [r7, #28]
   1b0c6:	681b      	ldr	r3, [r3, #0]
   1b0c8:	2b00      	cmp	r3, #0
   1b0ca:	d10a      	bne.n	1b0e2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b0cc:	4b13      	ldr	r3, [pc, #76]	; (1b11c <xQueueSemaphoreTake+0x360>)
   1b0ce:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b0d0:	69fb      	ldr	r3, [r7, #28]
   1b0d2:	685b      	ldr	r3, [r3, #4]
   1b0d4:	0018      	movs	r0, r3
   1b0d6:	4b25      	ldr	r3, [pc, #148]	; (1b16c <xQueueSemaphoreTake+0x3b0>)
   1b0d8:	4798      	blx	r3
   1b0da:	0003      	movs	r3, r0
   1b0dc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b0de:	4b1d      	ldr	r3, [pc, #116]	; (1b154 <xQueueSemaphoreTake+0x398>)
   1b0e0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b0e2:	69fb      	ldr	r3, [r7, #28]
   1b0e4:	3324      	adds	r3, #36	; 0x24
   1b0e6:	683a      	ldr	r2, [r7, #0]
   1b0e8:	0011      	movs	r1, r2
   1b0ea:	0018      	movs	r0, r3
   1b0ec:	4b20      	ldr	r3, [pc, #128]	; (1b170 <xQueueSemaphoreTake+0x3b4>)
   1b0ee:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b0f0:	69fb      	ldr	r3, [r7, #28]
   1b0f2:	0018      	movs	r0, r3
   1b0f4:	4b1f      	ldr	r3, [pc, #124]	; (1b174 <xQueueSemaphoreTake+0x3b8>)
   1b0f6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b0f8:	4b1f      	ldr	r3, [pc, #124]	; (1b178 <xQueueSemaphoreTake+0x3bc>)
   1b0fa:	4798      	blx	r3
   1b0fc:	1e03      	subs	r3, r0, #0
   1b0fe:	d000      	beq.n	1b102 <xQueueSemaphoreTake+0x346>
   1b100:	e680      	b.n	1ae04 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b102:	4b13      	ldr	r3, [pc, #76]	; (1b150 <xQueueSemaphoreTake+0x394>)
   1b104:	4798      	blx	r3
   1b106:	e67d      	b.n	1ae04 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b108:	69fb      	ldr	r3, [r7, #28]
   1b10a:	0018      	movs	r0, r3
   1b10c:	4b19      	ldr	r3, [pc, #100]	; (1b174 <xQueueSemaphoreTake+0x3b8>)
   1b10e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b110:	4b19      	ldr	r3, [pc, #100]	; (1b178 <xQueueSemaphoreTake+0x3bc>)
   1b112:	4798      	blx	r3
   1b114:	e676      	b.n	1ae04 <xQueueSemaphoreTake+0x48>
   1b116:	46c0      	nop			; (mov r8, r8)
   1b118:	0001c839 	.word	0x0001c839
   1b11c:	00019b19 	.word	0x00019b19
   1b120:	00017db1 	.word	0x00017db1
   1b124:	00017b15 	.word	0x00017b15
   1b128:	200000f8 	.word	0x200000f8
   1b12c:	00017bd5 	.word	0x00017bd5
   1b130:	00017ad5 	.word	0x00017ad5
   1b134:	200000ec 	.word	0x200000ec
   1b138:	00017bb5 	.word	0x00017bb5
   1b13c:	0001850d 	.word	0x0001850d
   1b140:	00017af5 	.word	0x00017af5
   1b144:	00018b69 	.word	0x00018b69
   1b148:	0001cd05 	.word	0x0001cd05
   1b14c:	0001c3a9 	.word	0x0001c3a9
   1b150:	00019b01 	.word	0x00019b01
   1b154:	00019b3d 	.word	0x00019b3d
   1b158:	0001c4e9 	.word	0x0001c4e9
   1b15c:	0001bdd1 	.word	0x0001bdd1
   1b160:	0001c511 	.word	0x0001c511
   1b164:	0001b505 	.word	0x0001b505
   1b168:	00018ca5 	.word	0x00018ca5
   1b16c:	0001c871 	.word	0x0001c871
   1b170:	0001c285 	.word	0x0001c285
   1b174:	0001b415 	.word	0x0001b415
   1b178:	0001bde9 	.word	0x0001bde9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b17c:	69fb      	ldr	r3, [r7, #28]
   1b17e:	0018      	movs	r0, r3
   1b180:	4b2d      	ldr	r3, [pc, #180]	; (1b238 <xQueueSemaphoreTake+0x47c>)
   1b182:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b184:	4b2d      	ldr	r3, [pc, #180]	; (1b23c <xQueueSemaphoreTake+0x480>)
   1b186:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b188:	69fb      	ldr	r3, [r7, #28]
   1b18a:	0018      	movs	r0, r3
   1b18c:	4b2c      	ldr	r3, [pc, #176]	; (1b240 <xQueueSemaphoreTake+0x484>)
   1b18e:	4798      	blx	r3
   1b190:	1e03      	subs	r3, r0, #0
   1b192:	d100      	bne.n	1b196 <xQueueSemaphoreTake+0x3da>
   1b194:	e636      	b.n	1ae04 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b196:	6a3b      	ldr	r3, [r7, #32]
   1b198:	2b00      	cmp	r3, #0
   1b19a:	d010      	beq.n	1b1be <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b19c:	4b29      	ldr	r3, [pc, #164]	; (1b244 <xQueueSemaphoreTake+0x488>)
   1b19e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b1a0:	69fb      	ldr	r3, [r7, #28]
   1b1a2:	0018      	movs	r0, r3
   1b1a4:	4b28      	ldr	r3, [pc, #160]	; (1b248 <xQueueSemaphoreTake+0x48c>)
   1b1a6:	4798      	blx	r3
   1b1a8:	0003      	movs	r3, r0
   1b1aa:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b1ac:	69fb      	ldr	r3, [r7, #28]
   1b1ae:	685b      	ldr	r3, [r3, #4]
   1b1b0:	697a      	ldr	r2, [r7, #20]
   1b1b2:	0011      	movs	r1, r2
   1b1b4:	0018      	movs	r0, r3
   1b1b6:	4b25      	ldr	r3, [pc, #148]	; (1b24c <xQueueSemaphoreTake+0x490>)
   1b1b8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b1ba:	4b25      	ldr	r3, [pc, #148]	; (1b250 <xQueueSemaphoreTake+0x494>)
   1b1bc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b1be:	4b25      	ldr	r3, [pc, #148]	; (1b254 <xQueueSemaphoreTake+0x498>)
   1b1c0:	4798      	blx	r3
   1b1c2:	0003      	movs	r3, r0
   1b1c4:	0018      	movs	r0, r3
   1b1c6:	4b24      	ldr	r3, [pc, #144]	; (1b258 <xQueueSemaphoreTake+0x49c>)
   1b1c8:	4798      	blx	r3
   1b1ca:	0003      	movs	r3, r0
   1b1cc:	001a      	movs	r2, r3
   1b1ce:	4b23      	ldr	r3, [pc, #140]	; (1b25c <xQueueSemaphoreTake+0x4a0>)
   1b1d0:	881b      	ldrh	r3, [r3, #0]
   1b1d2:	4013      	ands	r3, r2
   1b1d4:	b29b      	uxth	r3, r3
   1b1d6:	2b00      	cmp	r3, #0
   1b1d8:	d029      	beq.n	1b22e <xQueueSemaphoreTake+0x472>
   1b1da:	69fb      	ldr	r3, [r7, #28]
   1b1dc:	0018      	movs	r0, r3
   1b1de:	4b20      	ldr	r3, [pc, #128]	; (1b260 <xQueueSemaphoreTake+0x4a4>)
   1b1e0:	4798      	blx	r3
   1b1e2:	0003      	movs	r3, r0
   1b1e4:	001a      	movs	r2, r3
   1b1e6:	4b1d      	ldr	r3, [pc, #116]	; (1b25c <xQueueSemaphoreTake+0x4a0>)
   1b1e8:	881b      	ldrh	r3, [r3, #0]
   1b1ea:	4013      	ands	r3, r2
   1b1ec:	b29b      	uxth	r3, r3
   1b1ee:	2b00      	cmp	r3, #0
   1b1f0:	d01d      	beq.n	1b22e <xQueueSemaphoreTake+0x472>
   1b1f2:	69fb      	ldr	r3, [r7, #28]
   1b1f4:	0018      	movs	r0, r3
   1b1f6:	4b1b      	ldr	r3, [pc, #108]	; (1b264 <xQueueSemaphoreTake+0x4a8>)
   1b1f8:	4798      	blx	r3
   1b1fa:	0003      	movs	r3, r0
   1b1fc:	001a      	movs	r2, r3
   1b1fe:	4b1a      	ldr	r3, [pc, #104]	; (1b268 <xQueueSemaphoreTake+0x4ac>)
   1b200:	5c9b      	ldrb	r3, [r3, r2]
   1b202:	3350      	adds	r3, #80	; 0x50
   1b204:	b2db      	uxtb	r3, r3
   1b206:	001d      	movs	r5, r3
   1b208:	69fb      	ldr	r3, [r7, #28]
   1b20a:	0018      	movs	r0, r3
   1b20c:	4b15      	ldr	r3, [pc, #84]	; (1b264 <xQueueSemaphoreTake+0x4a8>)
   1b20e:	4798      	blx	r3
   1b210:	0003      	movs	r3, r0
   1b212:	001a      	movs	r2, r3
   1b214:	4b14      	ldr	r3, [pc, #80]	; (1b268 <xQueueSemaphoreTake+0x4ac>)
   1b216:	5c9c      	ldrb	r4, [r3, r2]
   1b218:	69fb      	ldr	r3, [r7, #28]
   1b21a:	0018      	movs	r0, r3
   1b21c:	4b13      	ldr	r3, [pc, #76]	; (1b26c <xQueueSemaphoreTake+0x4b0>)
   1b21e:	4798      	blx	r3
   1b220:	0003      	movs	r3, r0
   1b222:	b2db      	uxtb	r3, r3
   1b224:	001a      	movs	r2, r3
   1b226:	0021      	movs	r1, r4
   1b228:	0028      	movs	r0, r5
   1b22a:	4b11      	ldr	r3, [pc, #68]	; (1b270 <xQueueSemaphoreTake+0x4b4>)
   1b22c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b22e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b230:	0018      	movs	r0, r3
   1b232:	46bd      	mov	sp, r7
   1b234:	b00a      	add	sp, #40	; 0x28
   1b236:	bdb0      	pop	{r4, r5, r7, pc}
   1b238:	0001b415 	.word	0x0001b415
   1b23c:	0001bde9 	.word	0x0001bde9
   1b240:	0001b505 	.word	0x0001b505
   1b244:	00019b19 	.word	0x00019b19
   1b248:	0001b2b7 	.word	0x0001b2b7
   1b24c:	0001cb69 	.word	0x0001cb69
   1b250:	00019b3d 	.word	0x00019b3d
   1b254:	00017db1 	.word	0x00017db1
   1b258:	00017b15 	.word	0x00017b15
   1b25c:	200000f8 	.word	0x200000f8
   1b260:	00017bd5 	.word	0x00017bd5
   1b264:	00017ad5 	.word	0x00017ad5
   1b268:	200000ec 	.word	0x200000ec
   1b26c:	00017bb5 	.word	0x00017bb5
   1b270:	0001850d 	.word	0x0001850d

0001b274 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b274:	b580      	push	{r7, lr}
   1b276:	b082      	sub	sp, #8
   1b278:	af00      	add	r7, sp, #0
   1b27a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b27c:	687b      	ldr	r3, [r7, #4]
   1b27e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b280:	0018      	movs	r0, r3
   1b282:	46bd      	mov	sp, r7
   1b284:	b002      	add	sp, #8
   1b286:	bd80      	pop	{r7, pc}

0001b288 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b288:	b580      	push	{r7, lr}
   1b28a:	b082      	sub	sp, #8
   1b28c:	af00      	add	r7, sp, #0
   1b28e:	6078      	str	r0, [r7, #4]
   1b290:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b292:	687b      	ldr	r3, [r7, #4]
   1b294:	683a      	ldr	r2, [r7, #0]
   1b296:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b298:	46c0      	nop			; (mov r8, r8)
   1b29a:	46bd      	mov	sp, r7
   1b29c:	b002      	add	sp, #8
   1b29e:	bd80      	pop	{r7, pc}

0001b2a0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b2a0:	b580      	push	{r7, lr}
   1b2a2:	b082      	sub	sp, #8
   1b2a4:	af00      	add	r7, sp, #0
   1b2a6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b2a8:	687b      	ldr	r3, [r7, #4]
   1b2aa:	2250      	movs	r2, #80	; 0x50
   1b2ac:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b2ae:	0018      	movs	r0, r3
   1b2b0:	46bd      	mov	sp, r7
   1b2b2:	b002      	add	sp, #8
   1b2b4:	bd80      	pop	{r7, pc}

0001b2b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b2b6:	b580      	push	{r7, lr}
   1b2b8:	b084      	sub	sp, #16
   1b2ba:	af00      	add	r7, sp, #0
   1b2bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b2be:	687b      	ldr	r3, [r7, #4]
   1b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b2c2:	2b00      	cmp	r3, #0
   1b2c4:	d006      	beq.n	1b2d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b2c6:	687b      	ldr	r3, [r7, #4]
   1b2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b2ca:	681b      	ldr	r3, [r3, #0]
   1b2cc:	2205      	movs	r2, #5
   1b2ce:	1ad3      	subs	r3, r2, r3
   1b2d0:	60fb      	str	r3, [r7, #12]
   1b2d2:	e001      	b.n	1b2d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b2d4:	2300      	movs	r3, #0
   1b2d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b2d8:	68fb      	ldr	r3, [r7, #12]
	}
   1b2da:	0018      	movs	r0, r3
   1b2dc:	46bd      	mov	sp, r7
   1b2de:	b004      	add	sp, #16
   1b2e0:	bd80      	pop	{r7, pc}
	...

0001b2e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b2e4:	b580      	push	{r7, lr}
   1b2e6:	b086      	sub	sp, #24
   1b2e8:	af00      	add	r7, sp, #0
   1b2ea:	60f8      	str	r0, [r7, #12]
   1b2ec:	60b9      	str	r1, [r7, #8]
   1b2ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b2f0:	2300      	movs	r3, #0
   1b2f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b2f4:	68fb      	ldr	r3, [r7, #12]
   1b2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b2f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b2fa:	68fb      	ldr	r3, [r7, #12]
   1b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b2fe:	2b00      	cmp	r3, #0
   1b300:	d10e      	bne.n	1b320 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b302:	68fb      	ldr	r3, [r7, #12]
   1b304:	681b      	ldr	r3, [r3, #0]
   1b306:	2b00      	cmp	r3, #0
   1b308:	d14e      	bne.n	1b3a8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b30a:	68fb      	ldr	r3, [r7, #12]
   1b30c:	685b      	ldr	r3, [r3, #4]
   1b30e:	0018      	movs	r0, r3
   1b310:	4b2a      	ldr	r3, [pc, #168]	; (1b3bc <prvCopyDataToQueue+0xd8>)
   1b312:	4798      	blx	r3
   1b314:	0003      	movs	r3, r0
   1b316:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b318:	68fb      	ldr	r3, [r7, #12]
   1b31a:	2200      	movs	r2, #0
   1b31c:	605a      	str	r2, [r3, #4]
   1b31e:	e043      	b.n	1b3a8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b320:	687b      	ldr	r3, [r7, #4]
   1b322:	2b00      	cmp	r3, #0
   1b324:	d119      	bne.n	1b35a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b326:	68fb      	ldr	r3, [r7, #12]
   1b328:	6898      	ldr	r0, [r3, #8]
   1b32a:	68fb      	ldr	r3, [r7, #12]
   1b32c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b32e:	68bb      	ldr	r3, [r7, #8]
   1b330:	0019      	movs	r1, r3
   1b332:	4b23      	ldr	r3, [pc, #140]	; (1b3c0 <prvCopyDataToQueue+0xdc>)
   1b334:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b336:	68fb      	ldr	r3, [r7, #12]
   1b338:	689a      	ldr	r2, [r3, #8]
   1b33a:	68fb      	ldr	r3, [r7, #12]
   1b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b33e:	18d2      	adds	r2, r2, r3
   1b340:	68fb      	ldr	r3, [r7, #12]
   1b342:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b344:	68fb      	ldr	r3, [r7, #12]
   1b346:	689a      	ldr	r2, [r3, #8]
   1b348:	68fb      	ldr	r3, [r7, #12]
   1b34a:	685b      	ldr	r3, [r3, #4]
   1b34c:	429a      	cmp	r2, r3
   1b34e:	d32b      	bcc.n	1b3a8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b350:	68fb      	ldr	r3, [r7, #12]
   1b352:	681a      	ldr	r2, [r3, #0]
   1b354:	68fb      	ldr	r3, [r7, #12]
   1b356:	609a      	str	r2, [r3, #8]
   1b358:	e026      	b.n	1b3a8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b35a:	68fb      	ldr	r3, [r7, #12]
   1b35c:	68d8      	ldr	r0, [r3, #12]
   1b35e:	68fb      	ldr	r3, [r7, #12]
   1b360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b362:	68bb      	ldr	r3, [r7, #8]
   1b364:	0019      	movs	r1, r3
   1b366:	4b16      	ldr	r3, [pc, #88]	; (1b3c0 <prvCopyDataToQueue+0xdc>)
   1b368:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1b36a:	68fb      	ldr	r3, [r7, #12]
   1b36c:	68da      	ldr	r2, [r3, #12]
   1b36e:	68fb      	ldr	r3, [r7, #12]
   1b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b372:	425b      	negs	r3, r3
   1b374:	18d2      	adds	r2, r2, r3
   1b376:	68fb      	ldr	r3, [r7, #12]
   1b378:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b37a:	68fb      	ldr	r3, [r7, #12]
   1b37c:	68da      	ldr	r2, [r3, #12]
   1b37e:	68fb      	ldr	r3, [r7, #12]
   1b380:	681b      	ldr	r3, [r3, #0]
   1b382:	429a      	cmp	r2, r3
   1b384:	d207      	bcs.n	1b396 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1b386:	68fb      	ldr	r3, [r7, #12]
   1b388:	685a      	ldr	r2, [r3, #4]
   1b38a:	68fb      	ldr	r3, [r7, #12]
   1b38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b38e:	425b      	negs	r3, r3
   1b390:	18d2      	adds	r2, r2, r3
   1b392:	68fb      	ldr	r3, [r7, #12]
   1b394:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b396:	687b      	ldr	r3, [r7, #4]
   1b398:	2b02      	cmp	r3, #2
   1b39a:	d105      	bne.n	1b3a8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b39c:	693b      	ldr	r3, [r7, #16]
   1b39e:	2b00      	cmp	r3, #0
   1b3a0:	d002      	beq.n	1b3a8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b3a2:	693b      	ldr	r3, [r7, #16]
   1b3a4:	3b01      	subs	r3, #1
   1b3a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b3a8:	693b      	ldr	r3, [r7, #16]
   1b3aa:	1c5a      	adds	r2, r3, #1
   1b3ac:	68fb      	ldr	r3, [r7, #12]
   1b3ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b3b0:	697b      	ldr	r3, [r7, #20]
}
   1b3b2:	0018      	movs	r0, r3
   1b3b4:	46bd      	mov	sp, r7
   1b3b6:	b006      	add	sp, #24
   1b3b8:	bd80      	pop	{r7, pc}
   1b3ba:	46c0      	nop			; (mov r8, r8)
   1b3bc:	0001ca01 	.word	0x0001ca01
   1b3c0:	0003400d 	.word	0x0003400d

0001b3c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b3c4:	b580      	push	{r7, lr}
   1b3c6:	b082      	sub	sp, #8
   1b3c8:	af00      	add	r7, sp, #0
   1b3ca:	6078      	str	r0, [r7, #4]
   1b3cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b3ce:	687b      	ldr	r3, [r7, #4]
   1b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3d2:	2b00      	cmp	r3, #0
   1b3d4:	d018      	beq.n	1b408 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1b3d6:	687b      	ldr	r3, [r7, #4]
   1b3d8:	68da      	ldr	r2, [r3, #12]
   1b3da:	687b      	ldr	r3, [r7, #4]
   1b3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3de:	18d2      	adds	r2, r2, r3
   1b3e0:	687b      	ldr	r3, [r7, #4]
   1b3e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b3e4:	687b      	ldr	r3, [r7, #4]
   1b3e6:	68da      	ldr	r2, [r3, #12]
   1b3e8:	687b      	ldr	r3, [r7, #4]
   1b3ea:	685b      	ldr	r3, [r3, #4]
   1b3ec:	429a      	cmp	r2, r3
   1b3ee:	d303      	bcc.n	1b3f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1b3f0:	687b      	ldr	r3, [r7, #4]
   1b3f2:	681a      	ldr	r2, [r3, #0]
   1b3f4:	687b      	ldr	r3, [r7, #4]
   1b3f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1b3f8:	687b      	ldr	r3, [r7, #4]
   1b3fa:	68d9      	ldr	r1, [r3, #12]
   1b3fc:	687b      	ldr	r3, [r7, #4]
   1b3fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b400:	683b      	ldr	r3, [r7, #0]
   1b402:	0018      	movs	r0, r3
   1b404:	4b02      	ldr	r3, [pc, #8]	; (1b410 <prvCopyDataFromQueue+0x4c>)
   1b406:	4798      	blx	r3
	}
}
   1b408:	46c0      	nop			; (mov r8, r8)
   1b40a:	46bd      	mov	sp, r7
   1b40c:	b002      	add	sp, #8
   1b40e:	bd80      	pop	{r7, pc}
   1b410:	0003400d 	.word	0x0003400d

0001b414 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b414:	b580      	push	{r7, lr}
   1b416:	b084      	sub	sp, #16
   1b418:	af00      	add	r7, sp, #0
   1b41a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b41c:	4b34      	ldr	r3, [pc, #208]	; (1b4f0 <prvUnlockQueue+0xdc>)
   1b41e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b420:	230f      	movs	r3, #15
   1b422:	18fb      	adds	r3, r7, r3
   1b424:	687a      	ldr	r2, [r7, #4]
   1b426:	2145      	movs	r1, #69	; 0x45
   1b428:	5c52      	ldrb	r2, [r2, r1]
   1b42a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b42c:	e022      	b.n	1b474 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1b42e:	687b      	ldr	r3, [r7, #4]
   1b430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b432:	2b00      	cmp	r3, #0
   1b434:	d009      	beq.n	1b44a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b436:	687b      	ldr	r3, [r7, #4]
   1b438:	2100      	movs	r1, #0
   1b43a:	0018      	movs	r0, r3
   1b43c:	4b2d      	ldr	r3, [pc, #180]	; (1b4f4 <prvUnlockQueue+0xe0>)
   1b43e:	4798      	blx	r3
   1b440:	1e03      	subs	r3, r0, #0
   1b442:	d00f      	beq.n	1b464 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1b444:	4b2c      	ldr	r3, [pc, #176]	; (1b4f8 <prvUnlockQueue+0xe4>)
   1b446:	4798      	blx	r3
   1b448:	e00c      	b.n	1b464 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b44a:	687b      	ldr	r3, [r7, #4]
   1b44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b44e:	2b00      	cmp	r3, #0
   1b450:	d017      	beq.n	1b482 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b452:	687b      	ldr	r3, [r7, #4]
   1b454:	3324      	adds	r3, #36	; 0x24
   1b456:	0018      	movs	r0, r3
   1b458:	4b28      	ldr	r3, [pc, #160]	; (1b4fc <prvUnlockQueue+0xe8>)
   1b45a:	4798      	blx	r3
   1b45c:	1e03      	subs	r3, r0, #0
   1b45e:	d001      	beq.n	1b464 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1b460:	4b25      	ldr	r3, [pc, #148]	; (1b4f8 <prvUnlockQueue+0xe4>)
   1b462:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b464:	230f      	movs	r3, #15
   1b466:	18fb      	adds	r3, r7, r3
   1b468:	781b      	ldrb	r3, [r3, #0]
   1b46a:	3b01      	subs	r3, #1
   1b46c:	b2da      	uxtb	r2, r3
   1b46e:	230f      	movs	r3, #15
   1b470:	18fb      	adds	r3, r7, r3
   1b472:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b474:	230f      	movs	r3, #15
   1b476:	18fb      	adds	r3, r7, r3
   1b478:	781b      	ldrb	r3, [r3, #0]
   1b47a:	b25b      	sxtb	r3, r3
   1b47c:	2b00      	cmp	r3, #0
   1b47e:	dcd6      	bgt.n	1b42e <prvUnlockQueue+0x1a>
   1b480:	e000      	b.n	1b484 <prvUnlockQueue+0x70>
						break;
   1b482:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1b484:	687b      	ldr	r3, [r7, #4]
   1b486:	2245      	movs	r2, #69	; 0x45
   1b488:	21ff      	movs	r1, #255	; 0xff
   1b48a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b48c:	4b1c      	ldr	r3, [pc, #112]	; (1b500 <prvUnlockQueue+0xec>)
   1b48e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1b490:	4b17      	ldr	r3, [pc, #92]	; (1b4f0 <prvUnlockQueue+0xdc>)
   1b492:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1b494:	230e      	movs	r3, #14
   1b496:	18fb      	adds	r3, r7, r3
   1b498:	687a      	ldr	r2, [r7, #4]
   1b49a:	2144      	movs	r1, #68	; 0x44
   1b49c:	5c52      	ldrb	r2, [r2, r1]
   1b49e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b4a0:	e014      	b.n	1b4cc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b4a2:	687b      	ldr	r3, [r7, #4]
   1b4a4:	691b      	ldr	r3, [r3, #16]
   1b4a6:	2b00      	cmp	r3, #0
   1b4a8:	d017      	beq.n	1b4da <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b4aa:	687b      	ldr	r3, [r7, #4]
   1b4ac:	3310      	adds	r3, #16
   1b4ae:	0018      	movs	r0, r3
   1b4b0:	4b12      	ldr	r3, [pc, #72]	; (1b4fc <prvUnlockQueue+0xe8>)
   1b4b2:	4798      	blx	r3
   1b4b4:	1e03      	subs	r3, r0, #0
   1b4b6:	d001      	beq.n	1b4bc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1b4b8:	4b0f      	ldr	r3, [pc, #60]	; (1b4f8 <prvUnlockQueue+0xe4>)
   1b4ba:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1b4bc:	230e      	movs	r3, #14
   1b4be:	18fb      	adds	r3, r7, r3
   1b4c0:	781b      	ldrb	r3, [r3, #0]
   1b4c2:	3b01      	subs	r3, #1
   1b4c4:	b2da      	uxtb	r2, r3
   1b4c6:	230e      	movs	r3, #14
   1b4c8:	18fb      	adds	r3, r7, r3
   1b4ca:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b4cc:	230e      	movs	r3, #14
   1b4ce:	18fb      	adds	r3, r7, r3
   1b4d0:	781b      	ldrb	r3, [r3, #0]
   1b4d2:	b25b      	sxtb	r3, r3
   1b4d4:	2b00      	cmp	r3, #0
   1b4d6:	dce4      	bgt.n	1b4a2 <prvUnlockQueue+0x8e>
   1b4d8:	e000      	b.n	1b4dc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1b4da:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1b4dc:	687b      	ldr	r3, [r7, #4]
   1b4de:	2244      	movs	r2, #68	; 0x44
   1b4e0:	21ff      	movs	r1, #255	; 0xff
   1b4e2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b4e4:	4b06      	ldr	r3, [pc, #24]	; (1b500 <prvUnlockQueue+0xec>)
   1b4e6:	4798      	blx	r3
}
   1b4e8:	46c0      	nop			; (mov r8, r8)
   1b4ea:	46bd      	mov	sp, r7
   1b4ec:	b004      	add	sp, #16
   1b4ee:	bd80      	pop	{r7, pc}
   1b4f0:	00019b19 	.word	0x00019b19
   1b4f4:	0001b5e9 	.word	0x0001b5e9
   1b4f8:	0001c5bd 	.word	0x0001c5bd
   1b4fc:	0001c3a9 	.word	0x0001c3a9
   1b500:	00019b3d 	.word	0x00019b3d

0001b504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1b504:	b580      	push	{r7, lr}
   1b506:	b084      	sub	sp, #16
   1b508:	af00      	add	r7, sp, #0
   1b50a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b50c:	4b08      	ldr	r3, [pc, #32]	; (1b530 <prvIsQueueEmpty+0x2c>)
   1b50e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1b510:	687b      	ldr	r3, [r7, #4]
   1b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b514:	2b00      	cmp	r3, #0
   1b516:	d102      	bne.n	1b51e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1b518:	2301      	movs	r3, #1
   1b51a:	60fb      	str	r3, [r7, #12]
   1b51c:	e001      	b.n	1b522 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1b51e:	2300      	movs	r3, #0
   1b520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b522:	4b04      	ldr	r3, [pc, #16]	; (1b534 <prvIsQueueEmpty+0x30>)
   1b524:	4798      	blx	r3

	return xReturn;
   1b526:	68fb      	ldr	r3, [r7, #12]
}
   1b528:	0018      	movs	r0, r3
   1b52a:	46bd      	mov	sp, r7
   1b52c:	b004      	add	sp, #16
   1b52e:	bd80      	pop	{r7, pc}
   1b530:	00019b19 	.word	0x00019b19
   1b534:	00019b3d 	.word	0x00019b3d

0001b538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1b538:	b580      	push	{r7, lr}
   1b53a:	b084      	sub	sp, #16
   1b53c:	af00      	add	r7, sp, #0
   1b53e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b540:	4b09      	ldr	r3, [pc, #36]	; (1b568 <prvIsQueueFull+0x30>)
   1b542:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1b544:	687b      	ldr	r3, [r7, #4]
   1b546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b548:	687b      	ldr	r3, [r7, #4]
   1b54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b54c:	429a      	cmp	r2, r3
   1b54e:	d102      	bne.n	1b556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1b550:	2301      	movs	r3, #1
   1b552:	60fb      	str	r3, [r7, #12]
   1b554:	e001      	b.n	1b55a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1b556:	2300      	movs	r3, #0
   1b558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b55a:	4b04      	ldr	r3, [pc, #16]	; (1b56c <prvIsQueueFull+0x34>)
   1b55c:	4798      	blx	r3

	return xReturn;
   1b55e:	68fb      	ldr	r3, [r7, #12]
}
   1b560:	0018      	movs	r0, r3
   1b562:	46bd      	mov	sp, r7
   1b564:	b004      	add	sp, #16
   1b566:	bd80      	pop	{r7, pc}
   1b568:	00019b19 	.word	0x00019b19
   1b56c:	00019b3d 	.word	0x00019b3d

0001b570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b570:	b580      	push	{r7, lr}
   1b572:	b086      	sub	sp, #24
   1b574:	af00      	add	r7, sp, #0
   1b576:	60f8      	str	r0, [r7, #12]
   1b578:	60b9      	str	r1, [r7, #8]
   1b57a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b57c:	68fb      	ldr	r3, [r7, #12]
   1b57e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1b580:	4b15      	ldr	r3, [pc, #84]	; (1b5d8 <vQueueWaitForMessageRestricted+0x68>)
   1b582:	4798      	blx	r3
   1b584:	697b      	ldr	r3, [r7, #20]
   1b586:	2244      	movs	r2, #68	; 0x44
   1b588:	5c9b      	ldrb	r3, [r3, r2]
   1b58a:	b25b      	sxtb	r3, r3
   1b58c:	3301      	adds	r3, #1
   1b58e:	d103      	bne.n	1b598 <vQueueWaitForMessageRestricted+0x28>
   1b590:	697b      	ldr	r3, [r7, #20]
   1b592:	2244      	movs	r2, #68	; 0x44
   1b594:	2100      	movs	r1, #0
   1b596:	5499      	strb	r1, [r3, r2]
   1b598:	697b      	ldr	r3, [r7, #20]
   1b59a:	2245      	movs	r2, #69	; 0x45
   1b59c:	5c9b      	ldrb	r3, [r3, r2]
   1b59e:	b25b      	sxtb	r3, r3
   1b5a0:	3301      	adds	r3, #1
   1b5a2:	d103      	bne.n	1b5ac <vQueueWaitForMessageRestricted+0x3c>
   1b5a4:	697b      	ldr	r3, [r7, #20]
   1b5a6:	2245      	movs	r2, #69	; 0x45
   1b5a8:	2100      	movs	r1, #0
   1b5aa:	5499      	strb	r1, [r3, r2]
   1b5ac:	4b0b      	ldr	r3, [pc, #44]	; (1b5dc <vQueueWaitForMessageRestricted+0x6c>)
   1b5ae:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1b5b0:	697b      	ldr	r3, [r7, #20]
   1b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b5b4:	2b00      	cmp	r3, #0
   1b5b6:	d106      	bne.n	1b5c6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1b5b8:	697b      	ldr	r3, [r7, #20]
   1b5ba:	3324      	adds	r3, #36	; 0x24
   1b5bc:	687a      	ldr	r2, [r7, #4]
   1b5be:	68b9      	ldr	r1, [r7, #8]
   1b5c0:	0018      	movs	r0, r3
   1b5c2:	4b07      	ldr	r3, [pc, #28]	; (1b5e0 <vQueueWaitForMessageRestricted+0x70>)
   1b5c4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b5c6:	697b      	ldr	r3, [r7, #20]
   1b5c8:	0018      	movs	r0, r3
   1b5ca:	4b06      	ldr	r3, [pc, #24]	; (1b5e4 <vQueueWaitForMessageRestricted+0x74>)
   1b5cc:	4798      	blx	r3
	}
   1b5ce:	46c0      	nop			; (mov r8, r8)
   1b5d0:	46bd      	mov	sp, r7
   1b5d2:	b006      	add	sp, #24
   1b5d4:	bd80      	pop	{r7, pc}
   1b5d6:	46c0      	nop			; (mov r8, r8)
   1b5d8:	00019b19 	.word	0x00019b19
   1b5dc:	00019b3d 	.word	0x00019b3d
   1b5e0:	0001c2c9 	.word	0x0001c2c9
   1b5e4:	0001b415 	.word	0x0001b415

0001b5e8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1b5e8:	b5b0      	push	{r4, r5, r7, lr}
   1b5ea:	b086      	sub	sp, #24
   1b5ec:	af00      	add	r7, sp, #0
   1b5ee:	6078      	str	r0, [r7, #4]
   1b5f0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1b5f2:	687b      	ldr	r3, [r7, #4]
   1b5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b5f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1b5f8:	2300      	movs	r3, #0
   1b5fa:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1b5fc:	693b      	ldr	r3, [r7, #16]
   1b5fe:	2b00      	cmp	r3, #0
   1b600:	d101      	bne.n	1b606 <prvNotifyQueueSetContainer+0x1e>
   1b602:	b672      	cpsid	i
   1b604:	e7fe      	b.n	1b604 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1b606:	693b      	ldr	r3, [r7, #16]
   1b608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b60a:	693b      	ldr	r3, [r7, #16]
   1b60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b60e:	429a      	cmp	r2, r3
   1b610:	d301      	bcc.n	1b616 <prvNotifyQueueSetContainer+0x2e>
   1b612:	b672      	cpsid	i
   1b614:	e7fe      	b.n	1b614 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1b616:	693b      	ldr	r3, [r7, #16]
   1b618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b61a:	693b      	ldr	r3, [r7, #16]
   1b61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b61e:	429a      	cmp	r2, r3
   1b620:	d300      	bcc.n	1b624 <prvNotifyQueueSetContainer+0x3c>
   1b622:	e08b      	b.n	1b73c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1b624:	230f      	movs	r3, #15
   1b626:	18fb      	adds	r3, r7, r3
   1b628:	693a      	ldr	r2, [r7, #16]
   1b62a:	2145      	movs	r1, #69	; 0x45
   1b62c:	5c52      	ldrb	r2, [r2, r1]
   1b62e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1b630:	4b45      	ldr	r3, [pc, #276]	; (1b748 <prvNotifyQueueSetContainer+0x160>)
   1b632:	4798      	blx	r3
   1b634:	0003      	movs	r3, r0
   1b636:	0018      	movs	r0, r3
   1b638:	4b44      	ldr	r3, [pc, #272]	; (1b74c <prvNotifyQueueSetContainer+0x164>)
   1b63a:	4798      	blx	r3
   1b63c:	0003      	movs	r3, r0
   1b63e:	001a      	movs	r2, r3
   1b640:	4b43      	ldr	r3, [pc, #268]	; (1b750 <prvNotifyQueueSetContainer+0x168>)
   1b642:	881b      	ldrh	r3, [r3, #0]
   1b644:	4013      	ands	r3, r2
   1b646:	b29b      	uxth	r3, r3
   1b648:	2b00      	cmp	r3, #0
   1b64a:	d02e      	beq.n	1b6aa <prvNotifyQueueSetContainer+0xc2>
   1b64c:	693b      	ldr	r3, [r7, #16]
   1b64e:	0018      	movs	r0, r3
   1b650:	4b40      	ldr	r3, [pc, #256]	; (1b754 <prvNotifyQueueSetContainer+0x16c>)
   1b652:	4798      	blx	r3
   1b654:	0003      	movs	r3, r0
   1b656:	001a      	movs	r2, r3
   1b658:	4b3d      	ldr	r3, [pc, #244]	; (1b750 <prvNotifyQueueSetContainer+0x168>)
   1b65a:	881b      	ldrh	r3, [r3, #0]
   1b65c:	4013      	ands	r3, r2
   1b65e:	b29b      	uxth	r3, r3
   1b660:	2b00      	cmp	r3, #0
   1b662:	d022      	beq.n	1b6aa <prvNotifyQueueSetContainer+0xc2>
   1b664:	683b      	ldr	r3, [r7, #0]
   1b666:	2b00      	cmp	r3, #0
   1b668:	d10b      	bne.n	1b682 <prvNotifyQueueSetContainer+0x9a>
   1b66a:	693b      	ldr	r3, [r7, #16]
   1b66c:	0018      	movs	r0, r3
   1b66e:	4b3a      	ldr	r3, [pc, #232]	; (1b758 <prvNotifyQueueSetContainer+0x170>)
   1b670:	4798      	blx	r3
   1b672:	0003      	movs	r3, r0
   1b674:	001a      	movs	r2, r3
   1b676:	4b39      	ldr	r3, [pc, #228]	; (1b75c <prvNotifyQueueSetContainer+0x174>)
   1b678:	5c9b      	ldrb	r3, [r3, r2]
   1b67a:	3320      	adds	r3, #32
   1b67c:	b2db      	uxtb	r3, r3
   1b67e:	001d      	movs	r5, r3
   1b680:	e000      	b.n	1b684 <prvNotifyQueueSetContainer+0x9c>
   1b682:	2525      	movs	r5, #37	; 0x25
   1b684:	693b      	ldr	r3, [r7, #16]
   1b686:	0018      	movs	r0, r3
   1b688:	4b33      	ldr	r3, [pc, #204]	; (1b758 <prvNotifyQueueSetContainer+0x170>)
   1b68a:	4798      	blx	r3
   1b68c:	0003      	movs	r3, r0
   1b68e:	001a      	movs	r2, r3
   1b690:	4b32      	ldr	r3, [pc, #200]	; (1b75c <prvNotifyQueueSetContainer+0x174>)
   1b692:	5c9c      	ldrb	r4, [r3, r2]
   1b694:	693b      	ldr	r3, [r7, #16]
   1b696:	0018      	movs	r0, r3
   1b698:	4b31      	ldr	r3, [pc, #196]	; (1b760 <prvNotifyQueueSetContainer+0x178>)
   1b69a:	4798      	blx	r3
   1b69c:	0003      	movs	r3, r0
   1b69e:	b2db      	uxtb	r3, r3
   1b6a0:	001a      	movs	r2, r3
   1b6a2:	0021      	movs	r1, r4
   1b6a4:	0028      	movs	r0, r5
   1b6a6:	4b2f      	ldr	r3, [pc, #188]	; (1b764 <prvNotifyQueueSetContainer+0x17c>)
   1b6a8:	4798      	blx	r3
   1b6aa:	693b      	ldr	r3, [r7, #16]
   1b6ac:	0018      	movs	r0, r3
   1b6ae:	4b2a      	ldr	r3, [pc, #168]	; (1b758 <prvNotifyQueueSetContainer+0x170>)
   1b6b0:	4798      	blx	r3
   1b6b2:	0003      	movs	r3, r0
   1b6b4:	001a      	movs	r2, r3
   1b6b6:	4b29      	ldr	r3, [pc, #164]	; (1b75c <prvNotifyQueueSetContainer+0x174>)
   1b6b8:	5c9c      	ldrb	r4, [r3, r2]
   1b6ba:	693b      	ldr	r3, [r7, #16]
   1b6bc:	0018      	movs	r0, r3
   1b6be:	4b28      	ldr	r3, [pc, #160]	; (1b760 <prvNotifyQueueSetContainer+0x178>)
   1b6c0:	4798      	blx	r3
   1b6c2:	0003      	movs	r3, r0
   1b6c4:	b2dd      	uxtb	r5, r3
   1b6c6:	693b      	ldr	r3, [r7, #16]
   1b6c8:	0018      	movs	r0, r3
   1b6ca:	4b23      	ldr	r3, [pc, #140]	; (1b758 <prvNotifyQueueSetContainer+0x170>)
   1b6cc:	4798      	blx	r3
   1b6ce:	0003      	movs	r3, r0
   1b6d0:	001a      	movs	r2, r3
   1b6d2:	4b22      	ldr	r3, [pc, #136]	; (1b75c <prvNotifyQueueSetContainer+0x174>)
   1b6d4:	5c9b      	ldrb	r3, [r3, r2]
   1b6d6:	2b02      	cmp	r3, #2
   1b6d8:	d005      	beq.n	1b6e6 <prvNotifyQueueSetContainer+0xfe>
   1b6da:	693b      	ldr	r3, [r7, #16]
   1b6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b6de:	b2db      	uxtb	r3, r3
   1b6e0:	3301      	adds	r3, #1
   1b6e2:	b2db      	uxtb	r3, r3
   1b6e4:	e000      	b.n	1b6e8 <prvNotifyQueueSetContainer+0x100>
   1b6e6:	2300      	movs	r3, #0
   1b6e8:	001a      	movs	r2, r3
   1b6ea:	0029      	movs	r1, r5
   1b6ec:	0020      	movs	r0, r4
   1b6ee:	4b1e      	ldr	r3, [pc, #120]	; (1b768 <prvNotifyQueueSetContainer+0x180>)
   1b6f0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1b6f2:	683a      	ldr	r2, [r7, #0]
   1b6f4:	1d39      	adds	r1, r7, #4
   1b6f6:	693b      	ldr	r3, [r7, #16]
   1b6f8:	0018      	movs	r0, r3
   1b6fa:	4b1c      	ldr	r3, [pc, #112]	; (1b76c <prvNotifyQueueSetContainer+0x184>)
   1b6fc:	4798      	blx	r3
   1b6fe:	0003      	movs	r3, r0
   1b700:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1b702:	230f      	movs	r3, #15
   1b704:	18fb      	adds	r3, r7, r3
   1b706:	781b      	ldrb	r3, [r3, #0]
   1b708:	b25b      	sxtb	r3, r3
   1b70a:	3301      	adds	r3, #1
   1b70c:	d10d      	bne.n	1b72a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1b70e:	693b      	ldr	r3, [r7, #16]
   1b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b712:	2b00      	cmp	r3, #0
   1b714:	d012      	beq.n	1b73c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1b716:	693b      	ldr	r3, [r7, #16]
   1b718:	3324      	adds	r3, #36	; 0x24
   1b71a:	0018      	movs	r0, r3
   1b71c:	4b14      	ldr	r3, [pc, #80]	; (1b770 <prvNotifyQueueSetContainer+0x188>)
   1b71e:	4798      	blx	r3
   1b720:	1e03      	subs	r3, r0, #0
   1b722:	d00b      	beq.n	1b73c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1b724:	2301      	movs	r3, #1
   1b726:	617b      	str	r3, [r7, #20]
   1b728:	e008      	b.n	1b73c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b72a:	230f      	movs	r3, #15
   1b72c:	18fb      	adds	r3, r7, r3
   1b72e:	781b      	ldrb	r3, [r3, #0]
   1b730:	3301      	adds	r3, #1
   1b732:	b2db      	uxtb	r3, r3
   1b734:	b259      	sxtb	r1, r3
   1b736:	693b      	ldr	r3, [r7, #16]
   1b738:	2245      	movs	r2, #69	; 0x45
   1b73a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b73c:	697b      	ldr	r3, [r7, #20]
	}
   1b73e:	0018      	movs	r0, r3
   1b740:	46bd      	mov	sp, r7
   1b742:	b006      	add	sp, #24
   1b744:	bdb0      	pop	{r4, r5, r7, pc}
   1b746:	46c0      	nop			; (mov r8, r8)
   1b748:	00017db1 	.word	0x00017db1
   1b74c:	00017b15 	.word	0x00017b15
   1b750:	200000f8 	.word	0x200000f8
   1b754:	00017bd5 	.word	0x00017bd5
   1b758:	00017ad5 	.word	0x00017ad5
   1b75c:	200000ec 	.word	0x200000ec
   1b760:	00017bb5 	.word	0x00017bb5
   1b764:	0001850d 	.word	0x0001850d
   1b768:	00018b69 	.word	0x00018b69
   1b76c:	0001b2e5 	.word	0x0001b2e5
   1b770:	0001c3a9 	.word	0x0001c3a9

0001b774 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1b774:	b590      	push	{r4, r7, lr}
   1b776:	b08d      	sub	sp, #52	; 0x34
   1b778:	af04      	add	r7, sp, #16
   1b77a:	60f8      	str	r0, [r7, #12]
   1b77c:	60b9      	str	r1, [r7, #8]
   1b77e:	603b      	str	r3, [r7, #0]
   1b780:	1dbb      	adds	r3, r7, #6
   1b782:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b784:	1dbb      	adds	r3, r7, #6
   1b786:	881b      	ldrh	r3, [r3, #0]
   1b788:	009b      	lsls	r3, r3, #2
   1b78a:	0018      	movs	r0, r3
   1b78c:	4b1d      	ldr	r3, [pc, #116]	; (1b804 <xTaskCreate+0x90>)
   1b78e:	4798      	blx	r3
   1b790:	0003      	movs	r3, r0
   1b792:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1b794:	697b      	ldr	r3, [r7, #20]
   1b796:	2b00      	cmp	r3, #0
   1b798:	d010      	beq.n	1b7bc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1b79a:	2054      	movs	r0, #84	; 0x54
   1b79c:	4b19      	ldr	r3, [pc, #100]	; (1b804 <xTaskCreate+0x90>)
   1b79e:	4798      	blx	r3
   1b7a0:	0003      	movs	r3, r0
   1b7a2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1b7a4:	69fb      	ldr	r3, [r7, #28]
   1b7a6:	2b00      	cmp	r3, #0
   1b7a8:	d003      	beq.n	1b7b2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1b7aa:	69fb      	ldr	r3, [r7, #28]
   1b7ac:	697a      	ldr	r2, [r7, #20]
   1b7ae:	631a      	str	r2, [r3, #48]	; 0x30
   1b7b0:	e006      	b.n	1b7c0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1b7b2:	697b      	ldr	r3, [r7, #20]
   1b7b4:	0018      	movs	r0, r3
   1b7b6:	4b14      	ldr	r3, [pc, #80]	; (1b808 <xTaskCreate+0x94>)
   1b7b8:	4798      	blx	r3
   1b7ba:	e001      	b.n	1b7c0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1b7bc:	2300      	movs	r3, #0
   1b7be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1b7c0:	69fb      	ldr	r3, [r7, #28]
   1b7c2:	2b00      	cmp	r3, #0
   1b7c4:	d016      	beq.n	1b7f4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1b7c6:	1dbb      	adds	r3, r7, #6
   1b7c8:	881a      	ldrh	r2, [r3, #0]
   1b7ca:	683c      	ldr	r4, [r7, #0]
   1b7cc:	68b9      	ldr	r1, [r7, #8]
   1b7ce:	68f8      	ldr	r0, [r7, #12]
   1b7d0:	2300      	movs	r3, #0
   1b7d2:	9303      	str	r3, [sp, #12]
   1b7d4:	69fb      	ldr	r3, [r7, #28]
   1b7d6:	9302      	str	r3, [sp, #8]
   1b7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b7da:	9301      	str	r3, [sp, #4]
   1b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b7de:	9300      	str	r3, [sp, #0]
   1b7e0:	0023      	movs	r3, r4
   1b7e2:	4c0a      	ldr	r4, [pc, #40]	; (1b80c <xTaskCreate+0x98>)
   1b7e4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1b7e6:	69fb      	ldr	r3, [r7, #28]
   1b7e8:	0018      	movs	r0, r3
   1b7ea:	4b09      	ldr	r3, [pc, #36]	; (1b810 <xTaskCreate+0x9c>)
   1b7ec:	4798      	blx	r3
			xReturn = pdPASS;
   1b7ee:	2301      	movs	r3, #1
   1b7f0:	61bb      	str	r3, [r7, #24]
   1b7f2:	e002      	b.n	1b7fa <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1b7f4:	2301      	movs	r3, #1
   1b7f6:	425b      	negs	r3, r3
   1b7f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1b7fa:	69bb      	ldr	r3, [r7, #24]
	}
   1b7fc:	0018      	movs	r0, r3
   1b7fe:	46bd      	mov	sp, r7
   1b800:	b009      	add	sp, #36	; 0x24
   1b802:	bd90      	pop	{r4, r7, pc}
   1b804:	00019c51 	.word	0x00019c51
   1b808:	00019d15 	.word	0x00019d15
   1b80c:	0001b815 	.word	0x0001b815
   1b810:	0001b925 	.word	0x0001b925

0001b814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1b814:	b580      	push	{r7, lr}
   1b816:	b086      	sub	sp, #24
   1b818:	af00      	add	r7, sp, #0
   1b81a:	60f8      	str	r0, [r7, #12]
   1b81c:	60b9      	str	r1, [r7, #8]
   1b81e:	607a      	str	r2, [r7, #4]
   1b820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b824:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b826:	687b      	ldr	r3, [r7, #4]
   1b828:	009b      	lsls	r3, r3, #2
   1b82a:	001a      	movs	r2, r3
   1b82c:	21a5      	movs	r1, #165	; 0xa5
   1b82e:	4b39      	ldr	r3, [pc, #228]	; (1b914 <prvInitialiseNewTask+0x100>)
   1b830:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b836:	687b      	ldr	r3, [r7, #4]
   1b838:	4937      	ldr	r1, [pc, #220]	; (1b918 <prvInitialiseNewTask+0x104>)
   1b83a:	468c      	mov	ip, r1
   1b83c:	4463      	add	r3, ip
   1b83e:	009b      	lsls	r3, r3, #2
   1b840:	18d3      	adds	r3, r2, r3
   1b842:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1b844:	693b      	ldr	r3, [r7, #16]
   1b846:	2207      	movs	r2, #7
   1b848:	4393      	bics	r3, r2
   1b84a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1b84c:	693b      	ldr	r3, [r7, #16]
   1b84e:	2207      	movs	r2, #7
   1b850:	4013      	ands	r3, r2
   1b852:	d001      	beq.n	1b858 <prvInitialiseNewTask+0x44>
   1b854:	b672      	cpsid	i
   1b856:	e7fe      	b.n	1b856 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b858:	2300      	movs	r3, #0
   1b85a:	617b      	str	r3, [r7, #20]
   1b85c:	e013      	b.n	1b886 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1b85e:	68ba      	ldr	r2, [r7, #8]
   1b860:	697b      	ldr	r3, [r7, #20]
   1b862:	18d3      	adds	r3, r2, r3
   1b864:	7818      	ldrb	r0, [r3, #0]
   1b866:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b868:	2134      	movs	r1, #52	; 0x34
   1b86a:	697b      	ldr	r3, [r7, #20]
   1b86c:	18d3      	adds	r3, r2, r3
   1b86e:	185b      	adds	r3, r3, r1
   1b870:	1c02      	adds	r2, r0, #0
   1b872:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1b874:	68ba      	ldr	r2, [r7, #8]
   1b876:	697b      	ldr	r3, [r7, #20]
   1b878:	18d3      	adds	r3, r2, r3
   1b87a:	781b      	ldrb	r3, [r3, #0]
   1b87c:	2b00      	cmp	r3, #0
   1b87e:	d006      	beq.n	1b88e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b880:	697b      	ldr	r3, [r7, #20]
   1b882:	3301      	adds	r3, #1
   1b884:	617b      	str	r3, [r7, #20]
   1b886:	697b      	ldr	r3, [r7, #20]
   1b888:	2b07      	cmp	r3, #7
   1b88a:	d9e8      	bls.n	1b85e <prvInitialiseNewTask+0x4a>
   1b88c:	e000      	b.n	1b890 <prvInitialiseNewTask+0x7c>
		{
			break;
   1b88e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b892:	223b      	movs	r2, #59	; 0x3b
   1b894:	2100      	movs	r1, #0
   1b896:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1b898:	6a3b      	ldr	r3, [r7, #32]
   1b89a:	2b04      	cmp	r3, #4
   1b89c:	d901      	bls.n	1b8a2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1b89e:	2304      	movs	r3, #4
   1b8a0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8a4:	6a3a      	ldr	r2, [r7, #32]
   1b8a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8aa:	6a3a      	ldr	r2, [r7, #32]
   1b8ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8b0:	2200      	movs	r2, #0
   1b8b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8b6:	3304      	adds	r3, #4
   1b8b8:	0018      	movs	r0, r3
   1b8ba:	4b18      	ldr	r3, [pc, #96]	; (1b91c <prvInitialiseNewTask+0x108>)
   1b8bc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8c0:	3318      	adds	r3, #24
   1b8c2:	0018      	movs	r0, r3
   1b8c4:	4b15      	ldr	r3, [pc, #84]	; (1b91c <prvInitialiseNewTask+0x108>)
   1b8c6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b8cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b8ce:	6a3b      	ldr	r3, [r7, #32]
   1b8d0:	2205      	movs	r2, #5
   1b8d2:	1ad2      	subs	r2, r2, r3
   1b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b8dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8e0:	2200      	movs	r2, #0
   1b8e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8e6:	2250      	movs	r2, #80	; 0x50
   1b8e8:	2100      	movs	r1, #0
   1b8ea:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1b8ec:	683a      	ldr	r2, [r7, #0]
   1b8ee:	68f9      	ldr	r1, [r7, #12]
   1b8f0:	693b      	ldr	r3, [r7, #16]
   1b8f2:	0018      	movs	r0, r3
   1b8f4:	4b0a      	ldr	r3, [pc, #40]	; (1b920 <prvInitialiseNewTask+0x10c>)
   1b8f6:	4798      	blx	r3
   1b8f8:	0002      	movs	r2, r0
   1b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b900:	2b00      	cmp	r3, #0
   1b902:	d002      	beq.n	1b90a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b906:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b90a:	46c0      	nop			; (mov r8, r8)
   1b90c:	46bd      	mov	sp, r7
   1b90e:	b006      	add	sp, #24
   1b910:	bd80      	pop	{r7, pc}
   1b912:	46c0      	nop			; (mov r8, r8)
   1b914:	00034043 	.word	0x00034043
   1b918:	3fffffff 	.word	0x3fffffff
   1b91c:	000198c9 	.word	0x000198c9
   1b920:	000199e1 	.word	0x000199e1

0001b924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1b924:	b580      	push	{r7, lr}
   1b926:	b082      	sub	sp, #8
   1b928:	af00      	add	r7, sp, #0
   1b92a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1b92c:	4b60      	ldr	r3, [pc, #384]	; (1bab0 <prvAddNewTaskToReadyList+0x18c>)
   1b92e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1b930:	4b60      	ldr	r3, [pc, #384]	; (1bab4 <prvAddNewTaskToReadyList+0x190>)
   1b932:	681b      	ldr	r3, [r3, #0]
   1b934:	1c5a      	adds	r2, r3, #1
   1b936:	4b5f      	ldr	r3, [pc, #380]	; (1bab4 <prvAddNewTaskToReadyList+0x190>)
   1b938:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1b93a:	4b5f      	ldr	r3, [pc, #380]	; (1bab8 <prvAddNewTaskToReadyList+0x194>)
   1b93c:	681b      	ldr	r3, [r3, #0]
   1b93e:	2b00      	cmp	r3, #0
   1b940:	d109      	bne.n	1b956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1b942:	4b5d      	ldr	r3, [pc, #372]	; (1bab8 <prvAddNewTaskToReadyList+0x194>)
   1b944:	687a      	ldr	r2, [r7, #4]
   1b946:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1b948:	4b5a      	ldr	r3, [pc, #360]	; (1bab4 <prvAddNewTaskToReadyList+0x190>)
   1b94a:	681b      	ldr	r3, [r3, #0]
   1b94c:	2b01      	cmp	r3, #1
   1b94e:	d110      	bne.n	1b972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1b950:	4b5a      	ldr	r3, [pc, #360]	; (1babc <prvAddNewTaskToReadyList+0x198>)
   1b952:	4798      	blx	r3
   1b954:	e00d      	b.n	1b972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1b956:	4b5a      	ldr	r3, [pc, #360]	; (1bac0 <prvAddNewTaskToReadyList+0x19c>)
   1b958:	681b      	ldr	r3, [r3, #0]
   1b95a:	2b00      	cmp	r3, #0
   1b95c:	d109      	bne.n	1b972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1b95e:	4b56      	ldr	r3, [pc, #344]	; (1bab8 <prvAddNewTaskToReadyList+0x194>)
   1b960:	681b      	ldr	r3, [r3, #0]
   1b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b964:	687b      	ldr	r3, [r7, #4]
   1b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b968:	429a      	cmp	r2, r3
   1b96a:	d802      	bhi.n	1b972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1b96c:	4b52      	ldr	r3, [pc, #328]	; (1bab8 <prvAddNewTaskToReadyList+0x194>)
   1b96e:	687a      	ldr	r2, [r7, #4]
   1b970:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1b972:	4b54      	ldr	r3, [pc, #336]	; (1bac4 <prvAddNewTaskToReadyList+0x1a0>)
   1b974:	681b      	ldr	r3, [r3, #0]
   1b976:	1c5a      	adds	r2, r3, #1
   1b978:	4b52      	ldr	r3, [pc, #328]	; (1bac4 <prvAddNewTaskToReadyList+0x1a0>)
   1b97a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1b97c:	4b51      	ldr	r3, [pc, #324]	; (1bac4 <prvAddNewTaskToReadyList+0x1a0>)
   1b97e:	681a      	ldr	r2, [r3, #0]
   1b980:	687b      	ldr	r3, [r7, #4]
   1b982:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1b984:	687b      	ldr	r3, [r7, #4]
   1b986:	2b00      	cmp	r3, #0
   1b988:	d052      	beq.n	1ba30 <prvAddNewTaskToReadyList+0x10c>
   1b98a:	2003      	movs	r0, #3
   1b98c:	4b4e      	ldr	r3, [pc, #312]	; (1bac8 <prvAddNewTaskToReadyList+0x1a4>)
   1b98e:	4798      	blx	r3
   1b990:	0003      	movs	r3, r0
   1b992:	b29a      	uxth	r2, r3
   1b994:	687b      	ldr	r3, [r7, #4]
   1b996:	0011      	movs	r1, r2
   1b998:	0018      	movs	r0, r3
   1b99a:	4b4c      	ldr	r3, [pc, #304]	; (1bacc <prvAddNewTaskToReadyList+0x1a8>)
   1b99c:	4798      	blx	r3
   1b99e:	4b4c      	ldr	r3, [pc, #304]	; (1bad0 <prvAddNewTaskToReadyList+0x1ac>)
   1b9a0:	881a      	ldrh	r2, [r3, #0]
   1b9a2:	687b      	ldr	r3, [r7, #4]
   1b9a4:	0011      	movs	r1, r2
   1b9a6:	0018      	movs	r0, r3
   1b9a8:	4b4a      	ldr	r3, [pc, #296]	; (1bad4 <prvAddNewTaskToReadyList+0x1b0>)
   1b9aa:	4798      	blx	r3
   1b9ac:	687b      	ldr	r3, [r7, #4]
   1b9ae:	0018      	movs	r0, r3
   1b9b0:	4b49      	ldr	r3, [pc, #292]	; (1bad8 <prvAddNewTaskToReadyList+0x1b4>)
   1b9b2:	4798      	blx	r3
   1b9b4:	0003      	movs	r3, r0
   1b9b6:	b2d9      	uxtb	r1, r3
   1b9b8:	687b      	ldr	r3, [r7, #4]
   1b9ba:	3334      	adds	r3, #52	; 0x34
   1b9bc:	001a      	movs	r2, r3
   1b9be:	2003      	movs	r0, #3
   1b9c0:	4b46      	ldr	r3, [pc, #280]	; (1badc <prvAddNewTaskToReadyList+0x1b8>)
   1b9c2:	4798      	blx	r3
   1b9c4:	687b      	ldr	r3, [r7, #4]
   1b9c6:	0018      	movs	r0, r3
   1b9c8:	4b43      	ldr	r3, [pc, #268]	; (1bad8 <prvAddNewTaskToReadyList+0x1b4>)
   1b9ca:	4798      	blx	r3
   1b9cc:	0003      	movs	r3, r0
   1b9ce:	b2d9      	uxtb	r1, r3
   1b9d0:	687b      	ldr	r3, [r7, #4]
   1b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b9d4:	b2db      	uxtb	r3, r3
   1b9d6:	001a      	movs	r2, r3
   1b9d8:	2003      	movs	r0, #3
   1b9da:	4b41      	ldr	r3, [pc, #260]	; (1bae0 <prvAddNewTaskToReadyList+0x1bc>)
   1b9dc:	4798      	blx	r3
   1b9de:	4b41      	ldr	r3, [pc, #260]	; (1bae4 <prvAddNewTaskToReadyList+0x1c0>)
   1b9e0:	4798      	blx	r3
   1b9e2:	0003      	movs	r3, r0
   1b9e4:	0018      	movs	r0, r3
   1b9e6:	4b40      	ldr	r3, [pc, #256]	; (1bae8 <prvAddNewTaskToReadyList+0x1c4>)
   1b9e8:	4798      	blx	r3
   1b9ea:	0003      	movs	r3, r0
   1b9ec:	001a      	movs	r2, r3
   1b9ee:	4b3f      	ldr	r3, [pc, #252]	; (1baec <prvAddNewTaskToReadyList+0x1c8>)
   1b9f0:	881b      	ldrh	r3, [r3, #0]
   1b9f2:	4013      	ands	r3, r2
   1b9f4:	b29b      	uxth	r3, r3
   1b9f6:	2b00      	cmp	r3, #0
   1b9f8:	d016      	beq.n	1ba28 <prvAddNewTaskToReadyList+0x104>
   1b9fa:	687b      	ldr	r3, [r7, #4]
   1b9fc:	0018      	movs	r0, r3
   1b9fe:	4b3a      	ldr	r3, [pc, #232]	; (1bae8 <prvAddNewTaskToReadyList+0x1c4>)
   1ba00:	4798      	blx	r3
   1ba02:	0003      	movs	r3, r0
   1ba04:	001a      	movs	r2, r3
   1ba06:	4b39      	ldr	r3, [pc, #228]	; (1baec <prvAddNewTaskToReadyList+0x1c8>)
   1ba08:	881b      	ldrh	r3, [r3, #0]
   1ba0a:	4013      	ands	r3, r2
   1ba0c:	b29b      	uxth	r3, r3
   1ba0e:	2b00      	cmp	r3, #0
   1ba10:	d00a      	beq.n	1ba28 <prvAddNewTaskToReadyList+0x104>
   1ba12:	687b      	ldr	r3, [r7, #4]
   1ba14:	0018      	movs	r0, r3
   1ba16:	4b30      	ldr	r3, [pc, #192]	; (1bad8 <prvAddNewTaskToReadyList+0x1b4>)
   1ba18:	4798      	blx	r3
   1ba1a:	0003      	movs	r3, r0
   1ba1c:	b2db      	uxtb	r3, r3
   1ba1e:	001a      	movs	r2, r3
   1ba20:	2103      	movs	r1, #3
   1ba22:	201b      	movs	r0, #27
   1ba24:	4b32      	ldr	r3, [pc, #200]	; (1baf0 <prvAddNewTaskToReadyList+0x1cc>)
   1ba26:	4798      	blx	r3
   1ba28:	687b      	ldr	r3, [r7, #4]
   1ba2a:	0018      	movs	r0, r3
   1ba2c:	4b31      	ldr	r3, [pc, #196]	; (1baf4 <prvAddNewTaskToReadyList+0x1d0>)
   1ba2e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1ba30:	687b      	ldr	r3, [r7, #4]
   1ba32:	0018      	movs	r0, r3
   1ba34:	4b2c      	ldr	r3, [pc, #176]	; (1bae8 <prvAddNewTaskToReadyList+0x1c4>)
   1ba36:	4798      	blx	r3
   1ba38:	0003      	movs	r3, r0
   1ba3a:	001a      	movs	r2, r3
   1ba3c:	4b2b      	ldr	r3, [pc, #172]	; (1baec <prvAddNewTaskToReadyList+0x1c8>)
   1ba3e:	881b      	ldrh	r3, [r3, #0]
   1ba40:	4013      	ands	r3, r2
   1ba42:	b29b      	uxth	r3, r3
   1ba44:	2b00      	cmp	r3, #0
   1ba46:	d008      	beq.n	1ba5a <prvAddNewTaskToReadyList+0x136>
   1ba48:	687b      	ldr	r3, [r7, #4]
   1ba4a:	0018      	movs	r0, r3
   1ba4c:	4b22      	ldr	r3, [pc, #136]	; (1bad8 <prvAddNewTaskToReadyList+0x1b4>)
   1ba4e:	4798      	blx	r3
   1ba50:	0003      	movs	r3, r0
   1ba52:	b2db      	uxtb	r3, r3
   1ba54:	0018      	movs	r0, r3
   1ba56:	4b28      	ldr	r3, [pc, #160]	; (1baf8 <prvAddNewTaskToReadyList+0x1d4>)
   1ba58:	4798      	blx	r3
   1ba5a:	687b      	ldr	r3, [r7, #4]
   1ba5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba5e:	4b27      	ldr	r3, [pc, #156]	; (1bafc <prvAddNewTaskToReadyList+0x1d8>)
   1ba60:	681b      	ldr	r3, [r3, #0]
   1ba62:	429a      	cmp	r2, r3
   1ba64:	d903      	bls.n	1ba6e <prvAddNewTaskToReadyList+0x14a>
   1ba66:	687b      	ldr	r3, [r7, #4]
   1ba68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba6a:	4b24      	ldr	r3, [pc, #144]	; (1bafc <prvAddNewTaskToReadyList+0x1d8>)
   1ba6c:	601a      	str	r2, [r3, #0]
   1ba6e:	687b      	ldr	r3, [r7, #4]
   1ba70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba72:	0013      	movs	r3, r2
   1ba74:	009b      	lsls	r3, r3, #2
   1ba76:	189b      	adds	r3, r3, r2
   1ba78:	009b      	lsls	r3, r3, #2
   1ba7a:	4a21      	ldr	r2, [pc, #132]	; (1bb00 <prvAddNewTaskToReadyList+0x1dc>)
   1ba7c:	189a      	adds	r2, r3, r2
   1ba7e:	687b      	ldr	r3, [r7, #4]
   1ba80:	3304      	adds	r3, #4
   1ba82:	0019      	movs	r1, r3
   1ba84:	0010      	movs	r0, r2
   1ba86:	4b1f      	ldr	r3, [pc, #124]	; (1bb04 <prvAddNewTaskToReadyList+0x1e0>)
   1ba88:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1ba8a:	4b1f      	ldr	r3, [pc, #124]	; (1bb08 <prvAddNewTaskToReadyList+0x1e4>)
   1ba8c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1ba8e:	4b0c      	ldr	r3, [pc, #48]	; (1bac0 <prvAddNewTaskToReadyList+0x19c>)
   1ba90:	681b      	ldr	r3, [r3, #0]
   1ba92:	2b00      	cmp	r3, #0
   1ba94:	d008      	beq.n	1baa8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1ba96:	4b08      	ldr	r3, [pc, #32]	; (1bab8 <prvAddNewTaskToReadyList+0x194>)
   1ba98:	681b      	ldr	r3, [r3, #0]
   1ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba9c:	687b      	ldr	r3, [r7, #4]
   1ba9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1baa0:	429a      	cmp	r2, r3
   1baa2:	d201      	bcs.n	1baa8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1baa4:	4b19      	ldr	r3, [pc, #100]	; (1bb0c <prvAddNewTaskToReadyList+0x1e8>)
   1baa6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1baa8:	46c0      	nop			; (mov r8, r8)
   1baaa:	46bd      	mov	sp, r7
   1baac:	b002      	add	sp, #8
   1baae:	bd80      	pop	{r7, pc}
   1bab0:	00019b19 	.word	0x00019b19
   1bab4:	20004010 	.word	0x20004010
   1bab8:	20003f38 	.word	0x20003f38
   1babc:	0001c645 	.word	0x0001c645
   1bac0:	2000401c 	.word	0x2000401c
   1bac4:	2000402c 	.word	0x2000402c
   1bac8:	00019095 	.word	0x00019095
   1bacc:	00017b39 	.word	0x00017b39
   1bad0:	200000fa 	.word	0x200000fa
   1bad4:	00017b75 	.word	0x00017b75
   1bad8:	00017af5 	.word	0x00017af5
   1badc:	000192c5 	.word	0x000192c5
   1bae0:	00018a29 	.word	0x00018a29
   1bae4:	00017db1 	.word	0x00017db1
   1bae8:	00017b15 	.word	0x00017b15
   1baec:	200000f8 	.word	0x200000f8
   1baf0:	0001850d 	.word	0x0001850d
   1baf4:	00017c75 	.word	0x00017c75
   1baf8:	000182c5 	.word	0x000182c5
   1bafc:	20004018 	.word	0x20004018
   1bb00:	20003f3c 	.word	0x20003f3c
   1bb04:	000198df 	.word	0x000198df
   1bb08:	00019b3d 	.word	0x00019b3d
   1bb0c:	00019b01 	.word	0x00019b01

0001bb10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1bb10:	b580      	push	{r7, lr}
   1bb12:	b084      	sub	sp, #16
   1bb14:	af00      	add	r7, sp, #0
   1bb16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1bb18:	2300      	movs	r3, #0
   1bb1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1bb1c:	687b      	ldr	r3, [r7, #4]
   1bb1e:	2b00      	cmp	r3, #0
   1bb20:	d045      	beq.n	1bbae <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1bb22:	4b27      	ldr	r3, [pc, #156]	; (1bbc0 <vTaskDelay+0xb0>)
   1bb24:	681b      	ldr	r3, [r3, #0]
   1bb26:	2b00      	cmp	r3, #0
   1bb28:	d001      	beq.n	1bb2e <vTaskDelay+0x1e>
   1bb2a:	b672      	cpsid	i
   1bb2c:	e7fe      	b.n	1bb2c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1bb2e:	4b25      	ldr	r3, [pc, #148]	; (1bbc4 <vTaskDelay+0xb4>)
   1bb30:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1bb32:	4b25      	ldr	r3, [pc, #148]	; (1bbc8 <vTaskDelay+0xb8>)
   1bb34:	681b      	ldr	r3, [r3, #0]
   1bb36:	0018      	movs	r0, r3
   1bb38:	4b24      	ldr	r3, [pc, #144]	; (1bbcc <vTaskDelay+0xbc>)
   1bb3a:	4798      	blx	r3
   1bb3c:	0003      	movs	r3, r0
   1bb3e:	001a      	movs	r2, r3
   1bb40:	4b23      	ldr	r3, [pc, #140]	; (1bbd0 <vTaskDelay+0xc0>)
   1bb42:	881b      	ldrh	r3, [r3, #0]
   1bb44:	4013      	ands	r3, r2
   1bb46:	b29b      	uxth	r3, r3
   1bb48:	2b00      	cmp	r3, #0
   1bb4a:	d00e      	beq.n	1bb6a <vTaskDelay+0x5a>
   1bb4c:	687b      	ldr	r3, [r7, #4]
   1bb4e:	0019      	movs	r1, r3
   1bb50:	2089      	movs	r0, #137	; 0x89
   1bb52:	4b20      	ldr	r3, [pc, #128]	; (1bbd4 <vTaskDelay+0xc4>)
   1bb54:	4798      	blx	r3
   1bb56:	4b1c      	ldr	r3, [pc, #112]	; (1bbc8 <vTaskDelay+0xb8>)
   1bb58:	681b      	ldr	r3, [r3, #0]
   1bb5a:	0018      	movs	r0, r3
   1bb5c:	4b1e      	ldr	r3, [pc, #120]	; (1bbd8 <vTaskDelay+0xc8>)
   1bb5e:	4798      	blx	r3
   1bb60:	0003      	movs	r3, r0
   1bb62:	b2db      	uxtb	r3, r3
   1bb64:	0018      	movs	r0, r3
   1bb66:	4b1d      	ldr	r3, [pc, #116]	; (1bbdc <vTaskDelay+0xcc>)
   1bb68:	4798      	blx	r3
   1bb6a:	4b1d      	ldr	r3, [pc, #116]	; (1bbe0 <vTaskDelay+0xd0>)
   1bb6c:	4798      	blx	r3
   1bb6e:	0003      	movs	r3, r0
   1bb70:	0018      	movs	r0, r3
   1bb72:	4b16      	ldr	r3, [pc, #88]	; (1bbcc <vTaskDelay+0xbc>)
   1bb74:	4798      	blx	r3
   1bb76:	0003      	movs	r3, r0
   1bb78:	001a      	movs	r2, r3
   1bb7a:	4b15      	ldr	r3, [pc, #84]	; (1bbd0 <vTaskDelay+0xc0>)
   1bb7c:	881b      	ldrh	r3, [r3, #0]
   1bb7e:	4013      	ands	r3, r2
   1bb80:	b29b      	uxth	r3, r3
   1bb82:	2b00      	cmp	r3, #0
   1bb84:	d00a      	beq.n	1bb9c <vTaskDelay+0x8c>
   1bb86:	4b16      	ldr	r3, [pc, #88]	; (1bbe0 <vTaskDelay+0xd0>)
   1bb88:	4798      	blx	r3
   1bb8a:	0003      	movs	r3, r0
   1bb8c:	0018      	movs	r0, r3
   1bb8e:	4b12      	ldr	r3, [pc, #72]	; (1bbd8 <vTaskDelay+0xc8>)
   1bb90:	4798      	blx	r3
   1bb92:	0003      	movs	r3, r0
   1bb94:	b2db      	uxtb	r3, r3
   1bb96:	0018      	movs	r0, r3
   1bb98:	4b10      	ldr	r3, [pc, #64]	; (1bbdc <vTaskDelay+0xcc>)
   1bb9a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1bb9c:	687b      	ldr	r3, [r7, #4]
   1bb9e:	2100      	movs	r1, #0
   1bba0:	0018      	movs	r0, r3
   1bba2:	4b10      	ldr	r3, [pc, #64]	; (1bbe4 <vTaskDelay+0xd4>)
   1bba4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1bba6:	4b10      	ldr	r3, [pc, #64]	; (1bbe8 <vTaskDelay+0xd8>)
   1bba8:	4798      	blx	r3
   1bbaa:	0003      	movs	r3, r0
   1bbac:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1bbae:	68fb      	ldr	r3, [r7, #12]
   1bbb0:	2b00      	cmp	r3, #0
   1bbb2:	d101      	bne.n	1bbb8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1bbb4:	4b0d      	ldr	r3, [pc, #52]	; (1bbec <vTaskDelay+0xdc>)
   1bbb6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bbb8:	46c0      	nop			; (mov r8, r8)
   1bbba:	46bd      	mov	sp, r7
   1bbbc:	b004      	add	sp, #16
   1bbbe:	bd80      	pop	{r7, pc}
   1bbc0:	20004038 	.word	0x20004038
   1bbc4:	0001bdd1 	.word	0x0001bdd1
   1bbc8:	20003f38 	.word	0x20003f38
   1bbcc:	00017b15 	.word	0x00017b15
   1bbd0:	200000f8 	.word	0x200000f8
   1bbd4:	00018815 	.word	0x00018815
   1bbd8:	00017af5 	.word	0x00017af5
   1bbdc:	00018ca5 	.word	0x00018ca5
   1bbe0:	00017db1 	.word	0x00017db1
   1bbe4:	0001cd29 	.word	0x0001cd29
   1bbe8:	0001bde9 	.word	0x0001bde9
   1bbec:	00019b01 	.word	0x00019b01

0001bbf0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1bbf0:	b580      	push	{r7, lr}
   1bbf2:	b084      	sub	sp, #16
   1bbf4:	af00      	add	r7, sp, #0
   1bbf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1bbf8:	4b42      	ldr	r3, [pc, #264]	; (1bd04 <vTaskSuspend+0x114>)
   1bbfa:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1bbfc:	687b      	ldr	r3, [r7, #4]
   1bbfe:	2b00      	cmp	r3, #0
   1bc00:	d102      	bne.n	1bc08 <vTaskSuspend+0x18>
   1bc02:	4b41      	ldr	r3, [pc, #260]	; (1bd08 <vTaskSuspend+0x118>)
   1bc04:	681b      	ldr	r3, [r3, #0]
   1bc06:	e000      	b.n	1bc0a <vTaskSuspend+0x1a>
   1bc08:	687b      	ldr	r3, [r7, #4]
   1bc0a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1bc0c:	4b3f      	ldr	r3, [pc, #252]	; (1bd0c <vTaskSuspend+0x11c>)
   1bc0e:	4798      	blx	r3
   1bc10:	0003      	movs	r3, r0
   1bc12:	0018      	movs	r0, r3
   1bc14:	4b3e      	ldr	r3, [pc, #248]	; (1bd10 <vTaskSuspend+0x120>)
   1bc16:	4798      	blx	r3
   1bc18:	0003      	movs	r3, r0
   1bc1a:	001a      	movs	r2, r3
   1bc1c:	4b3d      	ldr	r3, [pc, #244]	; (1bd14 <vTaskSuspend+0x124>)
   1bc1e:	881b      	ldrh	r3, [r3, #0]
   1bc20:	4013      	ands	r3, r2
   1bc22:	b29b      	uxth	r3, r3
   1bc24:	2b00      	cmp	r3, #0
   1bc26:	d016      	beq.n	1bc56 <vTaskSuspend+0x66>
   1bc28:	68fb      	ldr	r3, [r7, #12]
   1bc2a:	0018      	movs	r0, r3
   1bc2c:	4b38      	ldr	r3, [pc, #224]	; (1bd10 <vTaskSuspend+0x120>)
   1bc2e:	4798      	blx	r3
   1bc30:	0003      	movs	r3, r0
   1bc32:	001a      	movs	r2, r3
   1bc34:	4b37      	ldr	r3, [pc, #220]	; (1bd14 <vTaskSuspend+0x124>)
   1bc36:	881b      	ldrh	r3, [r3, #0]
   1bc38:	4013      	ands	r3, r2
   1bc3a:	b29b      	uxth	r3, r3
   1bc3c:	2b00      	cmp	r3, #0
   1bc3e:	d00a      	beq.n	1bc56 <vTaskSuspend+0x66>
   1bc40:	68fb      	ldr	r3, [r7, #12]
   1bc42:	0018      	movs	r0, r3
   1bc44:	4b34      	ldr	r3, [pc, #208]	; (1bd18 <vTaskSuspend+0x128>)
   1bc46:	4798      	blx	r3
   1bc48:	0003      	movs	r3, r0
   1bc4a:	b2db      	uxtb	r3, r3
   1bc4c:	001a      	movs	r2, r3
   1bc4e:	2103      	movs	r1, #3
   1bc50:	208a      	movs	r0, #138	; 0x8a
   1bc52:	4b32      	ldr	r3, [pc, #200]	; (1bd1c <vTaskSuspend+0x12c>)
   1bc54:	4798      	blx	r3
   1bc56:	68fb      	ldr	r3, [r7, #12]
   1bc58:	0018      	movs	r0, r3
   1bc5a:	4b2f      	ldr	r3, [pc, #188]	; (1bd18 <vTaskSuspend+0x128>)
   1bc5c:	4798      	blx	r3
   1bc5e:	0003      	movs	r3, r0
   1bc60:	b2db      	uxtb	r3, r3
   1bc62:	0018      	movs	r0, r3
   1bc64:	4b2e      	ldr	r3, [pc, #184]	; (1bd20 <vTaskSuspend+0x130>)
   1bc66:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bc68:	68fb      	ldr	r3, [r7, #12]
   1bc6a:	3304      	adds	r3, #4
   1bc6c:	0018      	movs	r0, r3
   1bc6e:	4b2d      	ldr	r3, [pc, #180]	; (1bd24 <vTaskSuspend+0x134>)
   1bc70:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1bc72:	68fb      	ldr	r3, [r7, #12]
   1bc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc76:	2b00      	cmp	r3, #0
   1bc78:	d004      	beq.n	1bc84 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1bc7a:	68fb      	ldr	r3, [r7, #12]
   1bc7c:	3318      	adds	r3, #24
   1bc7e:	0018      	movs	r0, r3
   1bc80:	4b28      	ldr	r3, [pc, #160]	; (1bd24 <vTaskSuspend+0x134>)
   1bc82:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1bc84:	68fb      	ldr	r3, [r7, #12]
   1bc86:	1d1a      	adds	r2, r3, #4
   1bc88:	4b27      	ldr	r3, [pc, #156]	; (1bd28 <vTaskSuspend+0x138>)
   1bc8a:	0011      	movs	r1, r2
   1bc8c:	0018      	movs	r0, r3
   1bc8e:	4b27      	ldr	r3, [pc, #156]	; (1bd2c <vTaskSuspend+0x13c>)
   1bc90:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1bc92:	68fb      	ldr	r3, [r7, #12]
   1bc94:	2250      	movs	r2, #80	; 0x50
   1bc96:	5c9b      	ldrb	r3, [r3, r2]
   1bc98:	b2db      	uxtb	r3, r3
   1bc9a:	2b01      	cmp	r3, #1
   1bc9c:	d103      	bne.n	1bca6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bc9e:	68fb      	ldr	r3, [r7, #12]
   1bca0:	2250      	movs	r2, #80	; 0x50
   1bca2:	2100      	movs	r1, #0
   1bca4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1bca6:	4b22      	ldr	r3, [pc, #136]	; (1bd30 <vTaskSuspend+0x140>)
   1bca8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1bcaa:	4b22      	ldr	r3, [pc, #136]	; (1bd34 <vTaskSuspend+0x144>)
   1bcac:	681b      	ldr	r3, [r3, #0]
   1bcae:	2b00      	cmp	r3, #0
   1bcb0:	d005      	beq.n	1bcbe <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1bcb2:	4b14      	ldr	r3, [pc, #80]	; (1bd04 <vTaskSuspend+0x114>)
   1bcb4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1bcb6:	4b20      	ldr	r3, [pc, #128]	; (1bd38 <vTaskSuspend+0x148>)
   1bcb8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1bcba:	4b1d      	ldr	r3, [pc, #116]	; (1bd30 <vTaskSuspend+0x140>)
   1bcbc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1bcbe:	4b12      	ldr	r3, [pc, #72]	; (1bd08 <vTaskSuspend+0x118>)
   1bcc0:	681b      	ldr	r3, [r3, #0]
   1bcc2:	68fa      	ldr	r2, [r7, #12]
   1bcc4:	429a      	cmp	r2, r3
   1bcc6:	d118      	bne.n	1bcfa <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1bcc8:	4b1a      	ldr	r3, [pc, #104]	; (1bd34 <vTaskSuspend+0x144>)
   1bcca:	681b      	ldr	r3, [r3, #0]
   1bccc:	2b00      	cmp	r3, #0
   1bcce:	d008      	beq.n	1bce2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1bcd0:	4b1a      	ldr	r3, [pc, #104]	; (1bd3c <vTaskSuspend+0x14c>)
   1bcd2:	681b      	ldr	r3, [r3, #0]
   1bcd4:	2b00      	cmp	r3, #0
   1bcd6:	d001      	beq.n	1bcdc <vTaskSuspend+0xec>
   1bcd8:	b672      	cpsid	i
   1bcda:	e7fe      	b.n	1bcda <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1bcdc:	4b18      	ldr	r3, [pc, #96]	; (1bd40 <vTaskSuspend+0x150>)
   1bcde:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bce0:	e00b      	b.n	1bcfa <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1bce2:	4b11      	ldr	r3, [pc, #68]	; (1bd28 <vTaskSuspend+0x138>)
   1bce4:	681a      	ldr	r2, [r3, #0]
   1bce6:	4b17      	ldr	r3, [pc, #92]	; (1bd44 <vTaskSuspend+0x154>)
   1bce8:	681b      	ldr	r3, [r3, #0]
   1bcea:	429a      	cmp	r2, r3
   1bcec:	d103      	bne.n	1bcf6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1bcee:	4b06      	ldr	r3, [pc, #24]	; (1bd08 <vTaskSuspend+0x118>)
   1bcf0:	2200      	movs	r2, #0
   1bcf2:	601a      	str	r2, [r3, #0]
	}
   1bcf4:	e001      	b.n	1bcfa <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1bcf6:	4b14      	ldr	r3, [pc, #80]	; (1bd48 <vTaskSuspend+0x158>)
   1bcf8:	4798      	blx	r3
	}
   1bcfa:	46c0      	nop			; (mov r8, r8)
   1bcfc:	46bd      	mov	sp, r7
   1bcfe:	b004      	add	sp, #16
   1bd00:	bd80      	pop	{r7, pc}
   1bd02:	46c0      	nop			; (mov r8, r8)
   1bd04:	00019b19 	.word	0x00019b19
   1bd08:	20003f38 	.word	0x20003f38
   1bd0c:	00017db1 	.word	0x00017db1
   1bd10:	00017b15 	.word	0x00017b15
   1bd14:	200000f8 	.word	0x200000f8
   1bd18:	00017af5 	.word	0x00017af5
   1bd1c:	0001850d 	.word	0x0001850d
   1bd20:	00018ca5 	.word	0x00018ca5
   1bd24:	0001998f 	.word	0x0001998f
   1bd28:	20003ffc 	.word	0x20003ffc
   1bd2c:	000198df 	.word	0x000198df
   1bd30:	00019b3d 	.word	0x00019b3d
   1bd34:	2000401c 	.word	0x2000401c
   1bd38:	0001c7d5 	.word	0x0001c7d5
   1bd3c:	20004038 	.word	0x20004038
   1bd40:	00019b01 	.word	0x00019b01
   1bd44:	20004010 	.word	0x20004010
   1bd48:	0001c165 	.word	0x0001c165

0001bd4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1bd4c:	b590      	push	{r4, r7, lr}
   1bd4e:	b085      	sub	sp, #20
   1bd50:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1bd52:	4916      	ldr	r1, [pc, #88]	; (1bdac <vTaskStartScheduler+0x60>)
   1bd54:	4816      	ldr	r0, [pc, #88]	; (1bdb0 <vTaskStartScheduler+0x64>)
   1bd56:	4b17      	ldr	r3, [pc, #92]	; (1bdb4 <vTaskStartScheduler+0x68>)
   1bd58:	9301      	str	r3, [sp, #4]
   1bd5a:	2300      	movs	r3, #0
   1bd5c:	9300      	str	r3, [sp, #0]
   1bd5e:	2300      	movs	r3, #0
   1bd60:	2296      	movs	r2, #150	; 0x96
   1bd62:	4c15      	ldr	r4, [pc, #84]	; (1bdb8 <vTaskStartScheduler+0x6c>)
   1bd64:	47a0      	blx	r4
   1bd66:	0003      	movs	r3, r0
   1bd68:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1bd6a:	687b      	ldr	r3, [r7, #4]
   1bd6c:	2b01      	cmp	r3, #1
   1bd6e:	d103      	bne.n	1bd78 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1bd70:	4b12      	ldr	r3, [pc, #72]	; (1bdbc <vTaskStartScheduler+0x70>)
   1bd72:	4798      	blx	r3
   1bd74:	0003      	movs	r3, r0
   1bd76:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1bd78:	687b      	ldr	r3, [r7, #4]
   1bd7a:	2b01      	cmp	r3, #1
   1bd7c:	d10d      	bne.n	1bd9a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1bd7e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1bd80:	4b0f      	ldr	r3, [pc, #60]	; (1bdc0 <vTaskStartScheduler+0x74>)
   1bd82:	2201      	movs	r2, #1
   1bd84:	4252      	negs	r2, r2
   1bd86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1bd88:	4b0e      	ldr	r3, [pc, #56]	; (1bdc4 <vTaskStartScheduler+0x78>)
   1bd8a:	2201      	movs	r2, #1
   1bd8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1bd8e:	4b0e      	ldr	r3, [pc, #56]	; (1bdc8 <vTaskStartScheduler+0x7c>)
   1bd90:	2200      	movs	r2, #0
   1bd92:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1bd94:	4b0d      	ldr	r3, [pc, #52]	; (1bdcc <vTaskStartScheduler+0x80>)
   1bd96:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1bd98:	e004      	b.n	1bda4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1bd9a:	687b      	ldr	r3, [r7, #4]
   1bd9c:	3301      	adds	r3, #1
   1bd9e:	d101      	bne.n	1bda4 <vTaskStartScheduler+0x58>
   1bda0:	b672      	cpsid	i
   1bda2:	e7fe      	b.n	1bda2 <vTaskStartScheduler+0x56>
}
   1bda4:	46c0      	nop			; (mov r8, r8)
   1bda6:	46bd      	mov	sp, r7
   1bda8:	b003      	add	sp, #12
   1bdaa:	bd90      	pop	{r4, r7, pc}
   1bdac:	000376d4 	.word	0x000376d4
   1bdb0:	0001c61d 	.word	0x0001c61d
   1bdb4:	20004034 	.word	0x20004034
   1bdb8:	0001b775 	.word	0x0001b775
   1bdbc:	0001cddd 	.word	0x0001cddd
   1bdc0:	20004030 	.word	0x20004030
   1bdc4:	2000401c 	.word	0x2000401c
   1bdc8:	20004014 	.word	0x20004014
   1bdcc:	00019aa9 	.word	0x00019aa9

0001bdd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1bdd0:	b580      	push	{r7, lr}
   1bdd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1bdd4:	4b03      	ldr	r3, [pc, #12]	; (1bde4 <vTaskSuspendAll+0x14>)
   1bdd6:	681b      	ldr	r3, [r3, #0]
   1bdd8:	1c5a      	adds	r2, r3, #1
   1bdda:	4b02      	ldr	r3, [pc, #8]	; (1bde4 <vTaskSuspendAll+0x14>)
   1bddc:	601a      	str	r2, [r3, #0]
}
   1bdde:	46c0      	nop			; (mov r8, r8)
   1bde0:	46bd      	mov	sp, r7
   1bde2:	bd80      	pop	{r7, pc}
   1bde4:	20004038 	.word	0x20004038

0001bde8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1bde8:	b580      	push	{r7, lr}
   1bdea:	b084      	sub	sp, #16
   1bdec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1bdee:	2300      	movs	r3, #0
   1bdf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1bdf2:	2300      	movs	r3, #0
   1bdf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1bdf6:	4b45      	ldr	r3, [pc, #276]	; (1bf0c <xTaskResumeAll+0x124>)
   1bdf8:	681b      	ldr	r3, [r3, #0]
   1bdfa:	2b00      	cmp	r3, #0
   1bdfc:	d101      	bne.n	1be02 <xTaskResumeAll+0x1a>
   1bdfe:	b672      	cpsid	i
   1be00:	e7fe      	b.n	1be00 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1be02:	4b43      	ldr	r3, [pc, #268]	; (1bf10 <xTaskResumeAll+0x128>)
   1be04:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1be06:	4b41      	ldr	r3, [pc, #260]	; (1bf0c <xTaskResumeAll+0x124>)
   1be08:	681b      	ldr	r3, [r3, #0]
   1be0a:	1e5a      	subs	r2, r3, #1
   1be0c:	4b3f      	ldr	r3, [pc, #252]	; (1bf0c <xTaskResumeAll+0x124>)
   1be0e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1be10:	4b3e      	ldr	r3, [pc, #248]	; (1bf0c <xTaskResumeAll+0x124>)
   1be12:	681b      	ldr	r3, [r3, #0]
   1be14:	2b00      	cmp	r3, #0
   1be16:	d000      	beq.n	1be1a <xTaskResumeAll+0x32>
   1be18:	e071      	b.n	1befe <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1be1a:	4b3e      	ldr	r3, [pc, #248]	; (1bf14 <xTaskResumeAll+0x12c>)
   1be1c:	681b      	ldr	r3, [r3, #0]
   1be1e:	2b00      	cmp	r3, #0
   1be20:	d100      	bne.n	1be24 <xTaskResumeAll+0x3c>
   1be22:	e06c      	b.n	1befe <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1be24:	e044      	b.n	1beb0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1be26:	4b3c      	ldr	r3, [pc, #240]	; (1bf18 <xTaskResumeAll+0x130>)
   1be28:	68db      	ldr	r3, [r3, #12]
   1be2a:	68db      	ldr	r3, [r3, #12]
   1be2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1be2e:	68fb      	ldr	r3, [r7, #12]
   1be30:	3318      	adds	r3, #24
   1be32:	0018      	movs	r0, r3
   1be34:	4b39      	ldr	r3, [pc, #228]	; (1bf1c <xTaskResumeAll+0x134>)
   1be36:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1be38:	68fb      	ldr	r3, [r7, #12]
   1be3a:	3304      	adds	r3, #4
   1be3c:	0018      	movs	r0, r3
   1be3e:	4b37      	ldr	r3, [pc, #220]	; (1bf1c <xTaskResumeAll+0x134>)
   1be40:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1be42:	68fb      	ldr	r3, [r7, #12]
   1be44:	0018      	movs	r0, r3
   1be46:	4b36      	ldr	r3, [pc, #216]	; (1bf20 <xTaskResumeAll+0x138>)
   1be48:	4798      	blx	r3
   1be4a:	0003      	movs	r3, r0
   1be4c:	001a      	movs	r2, r3
   1be4e:	4b35      	ldr	r3, [pc, #212]	; (1bf24 <xTaskResumeAll+0x13c>)
   1be50:	881b      	ldrh	r3, [r3, #0]
   1be52:	4013      	ands	r3, r2
   1be54:	b29b      	uxth	r3, r3
   1be56:	2b00      	cmp	r3, #0
   1be58:	d008      	beq.n	1be6c <xTaskResumeAll+0x84>
   1be5a:	68fb      	ldr	r3, [r7, #12]
   1be5c:	0018      	movs	r0, r3
   1be5e:	4b32      	ldr	r3, [pc, #200]	; (1bf28 <xTaskResumeAll+0x140>)
   1be60:	4798      	blx	r3
   1be62:	0003      	movs	r3, r0
   1be64:	b2db      	uxtb	r3, r3
   1be66:	0018      	movs	r0, r3
   1be68:	4b30      	ldr	r3, [pc, #192]	; (1bf2c <xTaskResumeAll+0x144>)
   1be6a:	4798      	blx	r3
   1be6c:	68fb      	ldr	r3, [r7, #12]
   1be6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be70:	4b2f      	ldr	r3, [pc, #188]	; (1bf30 <xTaskResumeAll+0x148>)
   1be72:	681b      	ldr	r3, [r3, #0]
   1be74:	429a      	cmp	r2, r3
   1be76:	d903      	bls.n	1be80 <xTaskResumeAll+0x98>
   1be78:	68fb      	ldr	r3, [r7, #12]
   1be7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be7c:	4b2c      	ldr	r3, [pc, #176]	; (1bf30 <xTaskResumeAll+0x148>)
   1be7e:	601a      	str	r2, [r3, #0]
   1be80:	68fb      	ldr	r3, [r7, #12]
   1be82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be84:	0013      	movs	r3, r2
   1be86:	009b      	lsls	r3, r3, #2
   1be88:	189b      	adds	r3, r3, r2
   1be8a:	009b      	lsls	r3, r3, #2
   1be8c:	4a29      	ldr	r2, [pc, #164]	; (1bf34 <xTaskResumeAll+0x14c>)
   1be8e:	189a      	adds	r2, r3, r2
   1be90:	68fb      	ldr	r3, [r7, #12]
   1be92:	3304      	adds	r3, #4
   1be94:	0019      	movs	r1, r3
   1be96:	0010      	movs	r0, r2
   1be98:	4b27      	ldr	r3, [pc, #156]	; (1bf38 <xTaskResumeAll+0x150>)
   1be9a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1be9c:	68fb      	ldr	r3, [r7, #12]
   1be9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bea0:	4b26      	ldr	r3, [pc, #152]	; (1bf3c <xTaskResumeAll+0x154>)
   1bea2:	681b      	ldr	r3, [r3, #0]
   1bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bea6:	429a      	cmp	r2, r3
   1bea8:	d302      	bcc.n	1beb0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1beaa:	4b25      	ldr	r3, [pc, #148]	; (1bf40 <xTaskResumeAll+0x158>)
   1beac:	2201      	movs	r2, #1
   1beae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1beb0:	4b19      	ldr	r3, [pc, #100]	; (1bf18 <xTaskResumeAll+0x130>)
   1beb2:	681b      	ldr	r3, [r3, #0]
   1beb4:	2b00      	cmp	r3, #0
   1beb6:	d1b6      	bne.n	1be26 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1beb8:	68fb      	ldr	r3, [r7, #12]
   1beba:	2b00      	cmp	r3, #0
   1bebc:	d001      	beq.n	1bec2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1bebe:	4b21      	ldr	r3, [pc, #132]	; (1bf44 <xTaskResumeAll+0x15c>)
   1bec0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1bec2:	4b21      	ldr	r3, [pc, #132]	; (1bf48 <xTaskResumeAll+0x160>)
   1bec4:	681b      	ldr	r3, [r3, #0]
   1bec6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1bec8:	687b      	ldr	r3, [r7, #4]
   1beca:	2b00      	cmp	r3, #0
   1becc:	d00f      	beq.n	1beee <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1bece:	4b1f      	ldr	r3, [pc, #124]	; (1bf4c <xTaskResumeAll+0x164>)
   1bed0:	4798      	blx	r3
   1bed2:	1e03      	subs	r3, r0, #0
   1bed4:	d002      	beq.n	1bedc <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1bed6:	4b1a      	ldr	r3, [pc, #104]	; (1bf40 <xTaskResumeAll+0x158>)
   1bed8:	2201      	movs	r2, #1
   1beda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1bedc:	687b      	ldr	r3, [r7, #4]
   1bede:	3b01      	subs	r3, #1
   1bee0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1bee2:	687b      	ldr	r3, [r7, #4]
   1bee4:	2b00      	cmp	r3, #0
   1bee6:	d1f2      	bne.n	1bece <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1bee8:	4b17      	ldr	r3, [pc, #92]	; (1bf48 <xTaskResumeAll+0x160>)
   1beea:	2200      	movs	r2, #0
   1beec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1beee:	4b14      	ldr	r3, [pc, #80]	; (1bf40 <xTaskResumeAll+0x158>)
   1bef0:	681b      	ldr	r3, [r3, #0]
   1bef2:	2b00      	cmp	r3, #0
   1bef4:	d003      	beq.n	1befe <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1bef6:	2301      	movs	r3, #1
   1bef8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1befa:	4b15      	ldr	r3, [pc, #84]	; (1bf50 <xTaskResumeAll+0x168>)
   1befc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1befe:	4b15      	ldr	r3, [pc, #84]	; (1bf54 <xTaskResumeAll+0x16c>)
   1bf00:	4798      	blx	r3

	return xAlreadyYielded;
   1bf02:	68bb      	ldr	r3, [r7, #8]
}
   1bf04:	0018      	movs	r0, r3
   1bf06:	46bd      	mov	sp, r7
   1bf08:	b004      	add	sp, #16
   1bf0a:	bd80      	pop	{r7, pc}
   1bf0c:	20004038 	.word	0x20004038
   1bf10:	00019b19 	.word	0x00019b19
   1bf14:	20004010 	.word	0x20004010
   1bf18:	20003fd0 	.word	0x20003fd0
   1bf1c:	0001998f 	.word	0x0001998f
   1bf20:	00017b15 	.word	0x00017b15
   1bf24:	200000f8 	.word	0x200000f8
   1bf28:	00017af5 	.word	0x00017af5
   1bf2c:	000182c5 	.word	0x000182c5
   1bf30:	20004018 	.word	0x20004018
   1bf34:	20003f3c 	.word	0x20003f3c
   1bf38:	000198df 	.word	0x000198df
   1bf3c:	20003f38 	.word	0x20003f38
   1bf40:	20004024 	.word	0x20004024
   1bf44:	0001c7d5 	.word	0x0001c7d5
   1bf48:	20004020 	.word	0x20004020
   1bf4c:	0001bf75 	.word	0x0001bf75
   1bf50:	00019b01 	.word	0x00019b01
   1bf54:	00019b3d 	.word	0x00019b3d

0001bf58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1bf58:	b580      	push	{r7, lr}
   1bf5a:	b082      	sub	sp, #8
   1bf5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1bf5e:	4b04      	ldr	r3, [pc, #16]	; (1bf70 <xTaskGetTickCount+0x18>)
   1bf60:	681b      	ldr	r3, [r3, #0]
   1bf62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1bf64:	687b      	ldr	r3, [r7, #4]
}
   1bf66:	0018      	movs	r0, r3
   1bf68:	46bd      	mov	sp, r7
   1bf6a:	b002      	add	sp, #8
   1bf6c:	bd80      	pop	{r7, pc}
   1bf6e:	46c0      	nop			; (mov r8, r8)
   1bf70:	20004014 	.word	0x20004014

0001bf74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1bf74:	b580      	push	{r7, lr}
   1bf76:	b086      	sub	sp, #24
   1bf78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1bf7a:	2300      	movs	r3, #0
   1bf7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1bf7e:	4b64      	ldr	r3, [pc, #400]	; (1c110 <xTaskIncrementTick+0x19c>)
   1bf80:	681b      	ldr	r3, [r3, #0]
   1bf82:	2b01      	cmp	r3, #1
   1bf84:	d003      	beq.n	1bf8e <xTaskIncrementTick+0x1a>
   1bf86:	4b63      	ldr	r3, [pc, #396]	; (1c114 <xTaskIncrementTick+0x1a0>)
   1bf88:	681b      	ldr	r3, [r3, #0]
   1bf8a:	2b00      	cmp	r3, #0
   1bf8c:	d107      	bne.n	1bf9e <xTaskIncrementTick+0x2a>
   1bf8e:	4b62      	ldr	r3, [pc, #392]	; (1c118 <xTaskIncrementTick+0x1a4>)
   1bf90:	681b      	ldr	r3, [r3, #0]
   1bf92:	1c5a      	adds	r2, r3, #1
   1bf94:	4b60      	ldr	r3, [pc, #384]	; (1c118 <xTaskIncrementTick+0x1a4>)
   1bf96:	601a      	str	r2, [r3, #0]
   1bf98:	2000      	movs	r0, #0
   1bf9a:	4b60      	ldr	r3, [pc, #384]	; (1c11c <xTaskIncrementTick+0x1a8>)
   1bf9c:	4798      	blx	r3
   1bf9e:	4b5c      	ldr	r3, [pc, #368]	; (1c110 <xTaskIncrementTick+0x19c>)
   1bfa0:	681b      	ldr	r3, [r3, #0]
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d106      	bne.n	1bfb4 <xTaskIncrementTick+0x40>
   1bfa6:	4b5e      	ldr	r3, [pc, #376]	; (1c120 <xTaskIncrementTick+0x1ac>)
   1bfa8:	681b      	ldr	r3, [r3, #0]
   1bfaa:	3301      	adds	r3, #1
   1bfac:	0019      	movs	r1, r3
   1bfae:	2003      	movs	r0, #3
   1bfb0:	4b5c      	ldr	r3, [pc, #368]	; (1c124 <xTaskIncrementTick+0x1b0>)
   1bfb2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1bfb4:	4b56      	ldr	r3, [pc, #344]	; (1c110 <xTaskIncrementTick+0x19c>)
   1bfb6:	681b      	ldr	r3, [r3, #0]
   1bfb8:	2b00      	cmp	r3, #0
   1bfba:	d000      	beq.n	1bfbe <xTaskIncrementTick+0x4a>
   1bfbc:	e098      	b.n	1c0f0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1bfbe:	4b58      	ldr	r3, [pc, #352]	; (1c120 <xTaskIncrementTick+0x1ac>)
   1bfc0:	681b      	ldr	r3, [r3, #0]
   1bfc2:	3301      	adds	r3, #1
   1bfc4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1bfc6:	4b56      	ldr	r3, [pc, #344]	; (1c120 <xTaskIncrementTick+0x1ac>)
   1bfc8:	693a      	ldr	r2, [r7, #16]
   1bfca:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1bfcc:	693b      	ldr	r3, [r7, #16]
   1bfce:	2b00      	cmp	r3, #0
   1bfd0:	d117      	bne.n	1c002 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1bfd2:	4b55      	ldr	r3, [pc, #340]	; (1c128 <xTaskIncrementTick+0x1b4>)
   1bfd4:	681b      	ldr	r3, [r3, #0]
   1bfd6:	681b      	ldr	r3, [r3, #0]
   1bfd8:	2b00      	cmp	r3, #0
   1bfda:	d001      	beq.n	1bfe0 <xTaskIncrementTick+0x6c>
   1bfdc:	b672      	cpsid	i
   1bfde:	e7fe      	b.n	1bfde <xTaskIncrementTick+0x6a>
   1bfe0:	4b51      	ldr	r3, [pc, #324]	; (1c128 <xTaskIncrementTick+0x1b4>)
   1bfe2:	681b      	ldr	r3, [r3, #0]
   1bfe4:	60fb      	str	r3, [r7, #12]
   1bfe6:	4b51      	ldr	r3, [pc, #324]	; (1c12c <xTaskIncrementTick+0x1b8>)
   1bfe8:	681a      	ldr	r2, [r3, #0]
   1bfea:	4b4f      	ldr	r3, [pc, #316]	; (1c128 <xTaskIncrementTick+0x1b4>)
   1bfec:	601a      	str	r2, [r3, #0]
   1bfee:	4b4f      	ldr	r3, [pc, #316]	; (1c12c <xTaskIncrementTick+0x1b8>)
   1bff0:	68fa      	ldr	r2, [r7, #12]
   1bff2:	601a      	str	r2, [r3, #0]
   1bff4:	4b4e      	ldr	r3, [pc, #312]	; (1c130 <xTaskIncrementTick+0x1bc>)
   1bff6:	681b      	ldr	r3, [r3, #0]
   1bff8:	1c5a      	adds	r2, r3, #1
   1bffa:	4b4d      	ldr	r3, [pc, #308]	; (1c130 <xTaskIncrementTick+0x1bc>)
   1bffc:	601a      	str	r2, [r3, #0]
   1bffe:	4b4d      	ldr	r3, [pc, #308]	; (1c134 <xTaskIncrementTick+0x1c0>)
   1c000:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c002:	4b4d      	ldr	r3, [pc, #308]	; (1c138 <xTaskIncrementTick+0x1c4>)
   1c004:	681b      	ldr	r3, [r3, #0]
   1c006:	693a      	ldr	r2, [r7, #16]
   1c008:	429a      	cmp	r2, r3
   1c00a:	d363      	bcc.n	1c0d4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c00c:	4b46      	ldr	r3, [pc, #280]	; (1c128 <xTaskIncrementTick+0x1b4>)
   1c00e:	681b      	ldr	r3, [r3, #0]
   1c010:	681b      	ldr	r3, [r3, #0]
   1c012:	2b00      	cmp	r3, #0
   1c014:	d101      	bne.n	1c01a <xTaskIncrementTick+0xa6>
   1c016:	2301      	movs	r3, #1
   1c018:	e000      	b.n	1c01c <xTaskIncrementTick+0xa8>
   1c01a:	2300      	movs	r3, #0
   1c01c:	2b00      	cmp	r3, #0
   1c01e:	d004      	beq.n	1c02a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c020:	4b45      	ldr	r3, [pc, #276]	; (1c138 <xTaskIncrementTick+0x1c4>)
   1c022:	2201      	movs	r2, #1
   1c024:	4252      	negs	r2, r2
   1c026:	601a      	str	r2, [r3, #0]
					break;
   1c028:	e054      	b.n	1c0d4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c02a:	4b3f      	ldr	r3, [pc, #252]	; (1c128 <xTaskIncrementTick+0x1b4>)
   1c02c:	681b      	ldr	r3, [r3, #0]
   1c02e:	68db      	ldr	r3, [r3, #12]
   1c030:	68db      	ldr	r3, [r3, #12]
   1c032:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c034:	68bb      	ldr	r3, [r7, #8]
   1c036:	685b      	ldr	r3, [r3, #4]
   1c038:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c03a:	693a      	ldr	r2, [r7, #16]
   1c03c:	687b      	ldr	r3, [r7, #4]
   1c03e:	429a      	cmp	r2, r3
   1c040:	d203      	bcs.n	1c04a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c042:	4b3d      	ldr	r3, [pc, #244]	; (1c138 <xTaskIncrementTick+0x1c4>)
   1c044:	687a      	ldr	r2, [r7, #4]
   1c046:	601a      	str	r2, [r3, #0]
						break;
   1c048:	e044      	b.n	1c0d4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c04a:	68bb      	ldr	r3, [r7, #8]
   1c04c:	3304      	adds	r3, #4
   1c04e:	0018      	movs	r0, r3
   1c050:	4b3a      	ldr	r3, [pc, #232]	; (1c13c <xTaskIncrementTick+0x1c8>)
   1c052:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c054:	68bb      	ldr	r3, [r7, #8]
   1c056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c058:	2b00      	cmp	r3, #0
   1c05a:	d004      	beq.n	1c066 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c05c:	68bb      	ldr	r3, [r7, #8]
   1c05e:	3318      	adds	r3, #24
   1c060:	0018      	movs	r0, r3
   1c062:	4b36      	ldr	r3, [pc, #216]	; (1c13c <xTaskIncrementTick+0x1c8>)
   1c064:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c066:	68bb      	ldr	r3, [r7, #8]
   1c068:	0018      	movs	r0, r3
   1c06a:	4b35      	ldr	r3, [pc, #212]	; (1c140 <xTaskIncrementTick+0x1cc>)
   1c06c:	4798      	blx	r3
   1c06e:	0003      	movs	r3, r0
   1c070:	001a      	movs	r2, r3
   1c072:	4b34      	ldr	r3, [pc, #208]	; (1c144 <xTaskIncrementTick+0x1d0>)
   1c074:	881b      	ldrh	r3, [r3, #0]
   1c076:	4013      	ands	r3, r2
   1c078:	b29b      	uxth	r3, r3
   1c07a:	2b00      	cmp	r3, #0
   1c07c:	d008      	beq.n	1c090 <xTaskIncrementTick+0x11c>
   1c07e:	68bb      	ldr	r3, [r7, #8]
   1c080:	0018      	movs	r0, r3
   1c082:	4b31      	ldr	r3, [pc, #196]	; (1c148 <xTaskIncrementTick+0x1d4>)
   1c084:	4798      	blx	r3
   1c086:	0003      	movs	r3, r0
   1c088:	b2db      	uxtb	r3, r3
   1c08a:	0018      	movs	r0, r3
   1c08c:	4b2f      	ldr	r3, [pc, #188]	; (1c14c <xTaskIncrementTick+0x1d8>)
   1c08e:	4798      	blx	r3
   1c090:	68bb      	ldr	r3, [r7, #8]
   1c092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c094:	4b2e      	ldr	r3, [pc, #184]	; (1c150 <xTaskIncrementTick+0x1dc>)
   1c096:	681b      	ldr	r3, [r3, #0]
   1c098:	429a      	cmp	r2, r3
   1c09a:	d903      	bls.n	1c0a4 <xTaskIncrementTick+0x130>
   1c09c:	68bb      	ldr	r3, [r7, #8]
   1c09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0a0:	4b2b      	ldr	r3, [pc, #172]	; (1c150 <xTaskIncrementTick+0x1dc>)
   1c0a2:	601a      	str	r2, [r3, #0]
   1c0a4:	68bb      	ldr	r3, [r7, #8]
   1c0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0a8:	0013      	movs	r3, r2
   1c0aa:	009b      	lsls	r3, r3, #2
   1c0ac:	189b      	adds	r3, r3, r2
   1c0ae:	009b      	lsls	r3, r3, #2
   1c0b0:	4a28      	ldr	r2, [pc, #160]	; (1c154 <xTaskIncrementTick+0x1e0>)
   1c0b2:	189a      	adds	r2, r3, r2
   1c0b4:	68bb      	ldr	r3, [r7, #8]
   1c0b6:	3304      	adds	r3, #4
   1c0b8:	0019      	movs	r1, r3
   1c0ba:	0010      	movs	r0, r2
   1c0bc:	4b26      	ldr	r3, [pc, #152]	; (1c158 <xTaskIncrementTick+0x1e4>)
   1c0be:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c0c0:	68bb      	ldr	r3, [r7, #8]
   1c0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0c4:	4b25      	ldr	r3, [pc, #148]	; (1c15c <xTaskIncrementTick+0x1e8>)
   1c0c6:	681b      	ldr	r3, [r3, #0]
   1c0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c0ca:	429a      	cmp	r2, r3
   1c0cc:	d39e      	bcc.n	1c00c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c0ce:	2301      	movs	r3, #1
   1c0d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c0d2:	e79b      	b.n	1c00c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c0d4:	4b21      	ldr	r3, [pc, #132]	; (1c15c <xTaskIncrementTick+0x1e8>)
   1c0d6:	681b      	ldr	r3, [r3, #0]
   1c0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0da:	491e      	ldr	r1, [pc, #120]	; (1c154 <xTaskIncrementTick+0x1e0>)
   1c0dc:	0013      	movs	r3, r2
   1c0de:	009b      	lsls	r3, r3, #2
   1c0e0:	189b      	adds	r3, r3, r2
   1c0e2:	009b      	lsls	r3, r3, #2
   1c0e4:	585b      	ldr	r3, [r3, r1]
   1c0e6:	2b01      	cmp	r3, #1
   1c0e8:	d907      	bls.n	1c0fa <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c0ea:	2301      	movs	r3, #1
   1c0ec:	617b      	str	r3, [r7, #20]
   1c0ee:	e004      	b.n	1c0fa <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c0f0:	4b08      	ldr	r3, [pc, #32]	; (1c114 <xTaskIncrementTick+0x1a0>)
   1c0f2:	681b      	ldr	r3, [r3, #0]
   1c0f4:	1c5a      	adds	r2, r3, #1
   1c0f6:	4b07      	ldr	r3, [pc, #28]	; (1c114 <xTaskIncrementTick+0x1a0>)
   1c0f8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c0fa:	4b19      	ldr	r3, [pc, #100]	; (1c160 <xTaskIncrementTick+0x1ec>)
   1c0fc:	681b      	ldr	r3, [r3, #0]
   1c0fe:	2b00      	cmp	r3, #0
   1c100:	d001      	beq.n	1c106 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c102:	2301      	movs	r3, #1
   1c104:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c106:	697b      	ldr	r3, [r7, #20]
}
   1c108:	0018      	movs	r0, r3
   1c10a:	46bd      	mov	sp, r7
   1c10c:	b006      	add	sp, #24
   1c10e:	bd80      	pop	{r7, pc}
   1c110:	20004038 	.word	0x20004038
   1c114:	20004020 	.word	0x20004020
   1c118:	20000b98 	.word	0x20000b98
   1c11c:	000197a9 	.word	0x000197a9
   1c120:	20004014 	.word	0x20004014
   1c124:	00018815 	.word	0x00018815
   1c128:	20003fc8 	.word	0x20003fc8
   1c12c:	20003fcc 	.word	0x20003fcc
   1c130:	20004028 	.word	0x20004028
   1c134:	0001c7d5 	.word	0x0001c7d5
   1c138:	20004030 	.word	0x20004030
   1c13c:	0001998f 	.word	0x0001998f
   1c140:	00017b15 	.word	0x00017b15
   1c144:	200000f8 	.word	0x200000f8
   1c148:	00017af5 	.word	0x00017af5
   1c14c:	000182c5 	.word	0x000182c5
   1c150:	20004018 	.word	0x20004018
   1c154:	20003f3c 	.word	0x20003f3c
   1c158:	000198df 	.word	0x000198df
   1c15c:	20003f38 	.word	0x20003f38
   1c160:	20004024 	.word	0x20004024

0001c164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c164:	b580      	push	{r7, lr}
   1c166:	b082      	sub	sp, #8
   1c168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c16a:	4b3a      	ldr	r3, [pc, #232]	; (1c254 <vTaskSwitchContext+0xf0>)
   1c16c:	681b      	ldr	r3, [r3, #0]
   1c16e:	2b00      	cmp	r3, #0
   1c170:	d003      	beq.n	1c17a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c172:	4b39      	ldr	r3, [pc, #228]	; (1c258 <vTaskSwitchContext+0xf4>)
   1c174:	2201      	movs	r2, #1
   1c176:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c178:	e067      	b.n	1c24a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c17a:	4b37      	ldr	r3, [pc, #220]	; (1c258 <vTaskSwitchContext+0xf4>)
   1c17c:	2200      	movs	r2, #0
   1c17e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c180:	4b36      	ldr	r3, [pc, #216]	; (1c25c <vTaskSwitchContext+0xf8>)
   1c182:	681b      	ldr	r3, [r3, #0]
   1c184:	681a      	ldr	r2, [r3, #0]
   1c186:	4b35      	ldr	r3, [pc, #212]	; (1c25c <vTaskSwitchContext+0xf8>)
   1c188:	681b      	ldr	r3, [r3, #0]
   1c18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c18c:	429a      	cmp	r2, r3
   1c18e:	d808      	bhi.n	1c1a2 <vTaskSwitchContext+0x3e>
   1c190:	4b32      	ldr	r3, [pc, #200]	; (1c25c <vTaskSwitchContext+0xf8>)
   1c192:	681a      	ldr	r2, [r3, #0]
   1c194:	4b31      	ldr	r3, [pc, #196]	; (1c25c <vTaskSwitchContext+0xf8>)
   1c196:	681b      	ldr	r3, [r3, #0]
   1c198:	3334      	adds	r3, #52	; 0x34
   1c19a:	0019      	movs	r1, r3
   1c19c:	0010      	movs	r0, r2
   1c19e:	4b30      	ldr	r3, [pc, #192]	; (1c260 <vTaskSwitchContext+0xfc>)
   1c1a0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c1a2:	4b30      	ldr	r3, [pc, #192]	; (1c264 <vTaskSwitchContext+0x100>)
   1c1a4:	681b      	ldr	r3, [r3, #0]
   1c1a6:	607b      	str	r3, [r7, #4]
   1c1a8:	e007      	b.n	1c1ba <vTaskSwitchContext+0x56>
   1c1aa:	687b      	ldr	r3, [r7, #4]
   1c1ac:	2b00      	cmp	r3, #0
   1c1ae:	d101      	bne.n	1c1b4 <vTaskSwitchContext+0x50>
   1c1b0:	b672      	cpsid	i
   1c1b2:	e7fe      	b.n	1c1b2 <vTaskSwitchContext+0x4e>
   1c1b4:	687b      	ldr	r3, [r7, #4]
   1c1b6:	3b01      	subs	r3, #1
   1c1b8:	607b      	str	r3, [r7, #4]
   1c1ba:	492b      	ldr	r1, [pc, #172]	; (1c268 <vTaskSwitchContext+0x104>)
   1c1bc:	687a      	ldr	r2, [r7, #4]
   1c1be:	0013      	movs	r3, r2
   1c1c0:	009b      	lsls	r3, r3, #2
   1c1c2:	189b      	adds	r3, r3, r2
   1c1c4:	009b      	lsls	r3, r3, #2
   1c1c6:	585b      	ldr	r3, [r3, r1]
   1c1c8:	2b00      	cmp	r3, #0
   1c1ca:	d0ee      	beq.n	1c1aa <vTaskSwitchContext+0x46>
   1c1cc:	687a      	ldr	r2, [r7, #4]
   1c1ce:	0013      	movs	r3, r2
   1c1d0:	009b      	lsls	r3, r3, #2
   1c1d2:	189b      	adds	r3, r3, r2
   1c1d4:	009b      	lsls	r3, r3, #2
   1c1d6:	4a24      	ldr	r2, [pc, #144]	; (1c268 <vTaskSwitchContext+0x104>)
   1c1d8:	189b      	adds	r3, r3, r2
   1c1da:	603b      	str	r3, [r7, #0]
   1c1dc:	683b      	ldr	r3, [r7, #0]
   1c1de:	685b      	ldr	r3, [r3, #4]
   1c1e0:	685a      	ldr	r2, [r3, #4]
   1c1e2:	683b      	ldr	r3, [r7, #0]
   1c1e4:	605a      	str	r2, [r3, #4]
   1c1e6:	683b      	ldr	r3, [r7, #0]
   1c1e8:	685a      	ldr	r2, [r3, #4]
   1c1ea:	683b      	ldr	r3, [r7, #0]
   1c1ec:	3308      	adds	r3, #8
   1c1ee:	429a      	cmp	r2, r3
   1c1f0:	d104      	bne.n	1c1fc <vTaskSwitchContext+0x98>
   1c1f2:	683b      	ldr	r3, [r7, #0]
   1c1f4:	685b      	ldr	r3, [r3, #4]
   1c1f6:	685a      	ldr	r2, [r3, #4]
   1c1f8:	683b      	ldr	r3, [r7, #0]
   1c1fa:	605a      	str	r2, [r3, #4]
   1c1fc:	683b      	ldr	r3, [r7, #0]
   1c1fe:	685b      	ldr	r3, [r3, #4]
   1c200:	68da      	ldr	r2, [r3, #12]
   1c202:	4b16      	ldr	r3, [pc, #88]	; (1c25c <vTaskSwitchContext+0xf8>)
   1c204:	601a      	str	r2, [r3, #0]
   1c206:	4b17      	ldr	r3, [pc, #92]	; (1c264 <vTaskSwitchContext+0x100>)
   1c208:	687a      	ldr	r2, [r7, #4]
   1c20a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c20c:	4b17      	ldr	r3, [pc, #92]	; (1c26c <vTaskSwitchContext+0x108>)
   1c20e:	2201      	movs	r2, #1
   1c210:	601a      	str	r2, [r3, #0]
   1c212:	4b17      	ldr	r3, [pc, #92]	; (1c270 <vTaskSwitchContext+0x10c>)
   1c214:	4798      	blx	r3
   1c216:	0003      	movs	r3, r0
   1c218:	0018      	movs	r0, r3
   1c21a:	4b16      	ldr	r3, [pc, #88]	; (1c274 <vTaskSwitchContext+0x110>)
   1c21c:	4798      	blx	r3
   1c21e:	0003      	movs	r3, r0
   1c220:	001a      	movs	r2, r3
   1c222:	4b15      	ldr	r3, [pc, #84]	; (1c278 <vTaskSwitchContext+0x114>)
   1c224:	881b      	ldrh	r3, [r3, #0]
   1c226:	4013      	ands	r3, r2
   1c228:	b29b      	uxth	r3, r3
   1c22a:	2b00      	cmp	r3, #0
   1c22c:	d00a      	beq.n	1c244 <vTaskSwitchContext+0xe0>
   1c22e:	4b10      	ldr	r3, [pc, #64]	; (1c270 <vTaskSwitchContext+0x10c>)
   1c230:	4798      	blx	r3
   1c232:	0003      	movs	r3, r0
   1c234:	0018      	movs	r0, r3
   1c236:	4b11      	ldr	r3, [pc, #68]	; (1c27c <vTaskSwitchContext+0x118>)
   1c238:	4798      	blx	r3
   1c23a:	0003      	movs	r3, r0
   1c23c:	b2db      	uxtb	r3, r3
   1c23e:	0018      	movs	r0, r3
   1c240:	4b0f      	ldr	r3, [pc, #60]	; (1c280 <vTaskSwitchContext+0x11c>)
   1c242:	4798      	blx	r3
   1c244:	4b09      	ldr	r3, [pc, #36]	; (1c26c <vTaskSwitchContext+0x108>)
   1c246:	2202      	movs	r2, #2
   1c248:	601a      	str	r2, [r3, #0]
}
   1c24a:	46c0      	nop			; (mov r8, r8)
   1c24c:	46bd      	mov	sp, r7
   1c24e:	b002      	add	sp, #8
   1c250:	bd80      	pop	{r7, pc}
   1c252:	46c0      	nop			; (mov r8, r8)
   1c254:	20004038 	.word	0x20004038
   1c258:	20004024 	.word	0x20004024
   1c25c:	20003f38 	.word	0x20003f38
   1c260:	00032371 	.word	0x00032371
   1c264:	20004018 	.word	0x20004018
   1c268:	20003f3c 	.word	0x20003f3c
   1c26c:	20000ba4 	.word	0x20000ba4
   1c270:	00017db1 	.word	0x00017db1
   1c274:	00017b15 	.word	0x00017b15
   1c278:	200000f8 	.word	0x200000f8
   1c27c:	00017af5 	.word	0x00017af5
   1c280:	00018911 	.word	0x00018911

0001c284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c284:	b580      	push	{r7, lr}
   1c286:	b082      	sub	sp, #8
   1c288:	af00      	add	r7, sp, #0
   1c28a:	6078      	str	r0, [r7, #4]
   1c28c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c28e:	687b      	ldr	r3, [r7, #4]
   1c290:	2b00      	cmp	r3, #0
   1c292:	d101      	bne.n	1c298 <vTaskPlaceOnEventList+0x14>
   1c294:	b672      	cpsid	i
   1c296:	e7fe      	b.n	1c296 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c298:	4b08      	ldr	r3, [pc, #32]	; (1c2bc <vTaskPlaceOnEventList+0x38>)
   1c29a:	681b      	ldr	r3, [r3, #0]
   1c29c:	3318      	adds	r3, #24
   1c29e:	001a      	movs	r2, r3
   1c2a0:	687b      	ldr	r3, [r7, #4]
   1c2a2:	0011      	movs	r1, r2
   1c2a4:	0018      	movs	r0, r3
   1c2a6:	4b06      	ldr	r3, [pc, #24]	; (1c2c0 <vTaskPlaceOnEventList+0x3c>)
   1c2a8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c2aa:	683b      	ldr	r3, [r7, #0]
   1c2ac:	2101      	movs	r1, #1
   1c2ae:	0018      	movs	r0, r3
   1c2b0:	4b04      	ldr	r3, [pc, #16]	; (1c2c4 <vTaskPlaceOnEventList+0x40>)
   1c2b2:	4798      	blx	r3
}
   1c2b4:	46c0      	nop			; (mov r8, r8)
   1c2b6:	46bd      	mov	sp, r7
   1c2b8:	b002      	add	sp, #8
   1c2ba:	bd80      	pop	{r7, pc}
   1c2bc:	20003f38 	.word	0x20003f38
   1c2c0:	00019923 	.word	0x00019923
   1c2c4:	0001cd29 	.word	0x0001cd29

0001c2c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c2c8:	b580      	push	{r7, lr}
   1c2ca:	b084      	sub	sp, #16
   1c2cc:	af00      	add	r7, sp, #0
   1c2ce:	60f8      	str	r0, [r7, #12]
   1c2d0:	60b9      	str	r1, [r7, #8]
   1c2d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c2d4:	68fb      	ldr	r3, [r7, #12]
   1c2d6:	2b00      	cmp	r3, #0
   1c2d8:	d101      	bne.n	1c2de <vTaskPlaceOnEventListRestricted+0x16>
   1c2da:	b672      	cpsid	i
   1c2dc:	e7fe      	b.n	1c2dc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c2de:	4b28      	ldr	r3, [pc, #160]	; (1c380 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c2e0:	681b      	ldr	r3, [r3, #0]
   1c2e2:	3318      	adds	r3, #24
   1c2e4:	001a      	movs	r2, r3
   1c2e6:	68fb      	ldr	r3, [r7, #12]
   1c2e8:	0011      	movs	r1, r2
   1c2ea:	0018      	movs	r0, r3
   1c2ec:	4b25      	ldr	r3, [pc, #148]	; (1c384 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c2ee:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c2f0:	687b      	ldr	r3, [r7, #4]
   1c2f2:	2b00      	cmp	r3, #0
   1c2f4:	d002      	beq.n	1c2fc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c2f6:	2301      	movs	r3, #1
   1c2f8:	425b      	negs	r3, r3
   1c2fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c2fc:	4b20      	ldr	r3, [pc, #128]	; (1c380 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c2fe:	681b      	ldr	r3, [r3, #0]
   1c300:	0018      	movs	r0, r3
   1c302:	4b21      	ldr	r3, [pc, #132]	; (1c388 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c304:	4798      	blx	r3
   1c306:	0003      	movs	r3, r0
   1c308:	001a      	movs	r2, r3
   1c30a:	4b20      	ldr	r3, [pc, #128]	; (1c38c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c30c:	881b      	ldrh	r3, [r3, #0]
   1c30e:	4013      	ands	r3, r2
   1c310:	b29b      	uxth	r3, r3
   1c312:	2b00      	cmp	r3, #0
   1c314:	d011      	beq.n	1c33a <vTaskPlaceOnEventListRestricted+0x72>
   1c316:	4b1e      	ldr	r3, [pc, #120]	; (1c390 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c318:	681a      	ldr	r2, [r3, #0]
   1c31a:	68bb      	ldr	r3, [r7, #8]
   1c31c:	18d3      	adds	r3, r2, r3
   1c31e:	0019      	movs	r1, r3
   1c320:	2088      	movs	r0, #136	; 0x88
   1c322:	4b1c      	ldr	r3, [pc, #112]	; (1c394 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c324:	4798      	blx	r3
   1c326:	4b16      	ldr	r3, [pc, #88]	; (1c380 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c328:	681b      	ldr	r3, [r3, #0]
   1c32a:	0018      	movs	r0, r3
   1c32c:	4b1a      	ldr	r3, [pc, #104]	; (1c398 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c32e:	4798      	blx	r3
   1c330:	0003      	movs	r3, r0
   1c332:	b2db      	uxtb	r3, r3
   1c334:	0018      	movs	r0, r3
   1c336:	4b19      	ldr	r3, [pc, #100]	; (1c39c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c338:	4798      	blx	r3
   1c33a:	4b19      	ldr	r3, [pc, #100]	; (1c3a0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c33c:	4798      	blx	r3
   1c33e:	0003      	movs	r3, r0
   1c340:	0018      	movs	r0, r3
   1c342:	4b11      	ldr	r3, [pc, #68]	; (1c388 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c344:	4798      	blx	r3
   1c346:	0003      	movs	r3, r0
   1c348:	001a      	movs	r2, r3
   1c34a:	4b10      	ldr	r3, [pc, #64]	; (1c38c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c34c:	881b      	ldrh	r3, [r3, #0]
   1c34e:	4013      	ands	r3, r2
   1c350:	b29b      	uxth	r3, r3
   1c352:	2b00      	cmp	r3, #0
   1c354:	d00a      	beq.n	1c36c <vTaskPlaceOnEventListRestricted+0xa4>
   1c356:	4b12      	ldr	r3, [pc, #72]	; (1c3a0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c358:	4798      	blx	r3
   1c35a:	0003      	movs	r3, r0
   1c35c:	0018      	movs	r0, r3
   1c35e:	4b0e      	ldr	r3, [pc, #56]	; (1c398 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c360:	4798      	blx	r3
   1c362:	0003      	movs	r3, r0
   1c364:	b2db      	uxtb	r3, r3
   1c366:	0018      	movs	r0, r3
   1c368:	4b0c      	ldr	r3, [pc, #48]	; (1c39c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c36a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1c36c:	687a      	ldr	r2, [r7, #4]
   1c36e:	68bb      	ldr	r3, [r7, #8]
   1c370:	0011      	movs	r1, r2
   1c372:	0018      	movs	r0, r3
   1c374:	4b0b      	ldr	r3, [pc, #44]	; (1c3a4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1c376:	4798      	blx	r3
	}
   1c378:	46c0      	nop			; (mov r8, r8)
   1c37a:	46bd      	mov	sp, r7
   1c37c:	b004      	add	sp, #16
   1c37e:	bd80      	pop	{r7, pc}
   1c380:	20003f38 	.word	0x20003f38
   1c384:	000198df 	.word	0x000198df
   1c388:	00017b15 	.word	0x00017b15
   1c38c:	200000f8 	.word	0x200000f8
   1c390:	20004014 	.word	0x20004014
   1c394:	00018815 	.word	0x00018815
   1c398:	00017af5 	.word	0x00017af5
   1c39c:	00018ca5 	.word	0x00018ca5
   1c3a0:	00017db1 	.word	0x00017db1
   1c3a4:	0001cd29 	.word	0x0001cd29

0001c3a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1c3a8:	b580      	push	{r7, lr}
   1c3aa:	b084      	sub	sp, #16
   1c3ac:	af00      	add	r7, sp, #0
   1c3ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1c3b0:	687b      	ldr	r3, [r7, #4]
   1c3b2:	68db      	ldr	r3, [r3, #12]
   1c3b4:	68db      	ldr	r3, [r3, #12]
   1c3b6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1c3b8:	68bb      	ldr	r3, [r7, #8]
   1c3ba:	2b00      	cmp	r3, #0
   1c3bc:	d101      	bne.n	1c3c2 <xTaskRemoveFromEventList+0x1a>
   1c3be:	b672      	cpsid	i
   1c3c0:	e7fe      	b.n	1c3c0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1c3c2:	68bb      	ldr	r3, [r7, #8]
   1c3c4:	3318      	adds	r3, #24
   1c3c6:	0018      	movs	r0, r3
   1c3c8:	4b2a      	ldr	r3, [pc, #168]	; (1c474 <xTaskRemoveFromEventList+0xcc>)
   1c3ca:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c3cc:	4b2a      	ldr	r3, [pc, #168]	; (1c478 <xTaskRemoveFromEventList+0xd0>)
   1c3ce:	681b      	ldr	r3, [r3, #0]
   1c3d0:	2b00      	cmp	r3, #0
   1c3d2:	d132      	bne.n	1c43a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1c3d4:	68bb      	ldr	r3, [r7, #8]
   1c3d6:	3304      	adds	r3, #4
   1c3d8:	0018      	movs	r0, r3
   1c3da:	4b26      	ldr	r3, [pc, #152]	; (1c474 <xTaskRemoveFromEventList+0xcc>)
   1c3dc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1c3de:	68bb      	ldr	r3, [r7, #8]
   1c3e0:	0018      	movs	r0, r3
   1c3e2:	4b26      	ldr	r3, [pc, #152]	; (1c47c <xTaskRemoveFromEventList+0xd4>)
   1c3e4:	4798      	blx	r3
   1c3e6:	0003      	movs	r3, r0
   1c3e8:	001a      	movs	r2, r3
   1c3ea:	4b25      	ldr	r3, [pc, #148]	; (1c480 <xTaskRemoveFromEventList+0xd8>)
   1c3ec:	881b      	ldrh	r3, [r3, #0]
   1c3ee:	4013      	ands	r3, r2
   1c3f0:	b29b      	uxth	r3, r3
   1c3f2:	2b00      	cmp	r3, #0
   1c3f4:	d008      	beq.n	1c408 <xTaskRemoveFromEventList+0x60>
   1c3f6:	68bb      	ldr	r3, [r7, #8]
   1c3f8:	0018      	movs	r0, r3
   1c3fa:	4b22      	ldr	r3, [pc, #136]	; (1c484 <xTaskRemoveFromEventList+0xdc>)
   1c3fc:	4798      	blx	r3
   1c3fe:	0003      	movs	r3, r0
   1c400:	b2db      	uxtb	r3, r3
   1c402:	0018      	movs	r0, r3
   1c404:	4b20      	ldr	r3, [pc, #128]	; (1c488 <xTaskRemoveFromEventList+0xe0>)
   1c406:	4798      	blx	r3
   1c408:	68bb      	ldr	r3, [r7, #8]
   1c40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c40c:	4b1f      	ldr	r3, [pc, #124]	; (1c48c <xTaskRemoveFromEventList+0xe4>)
   1c40e:	681b      	ldr	r3, [r3, #0]
   1c410:	429a      	cmp	r2, r3
   1c412:	d903      	bls.n	1c41c <xTaskRemoveFromEventList+0x74>
   1c414:	68bb      	ldr	r3, [r7, #8]
   1c416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c418:	4b1c      	ldr	r3, [pc, #112]	; (1c48c <xTaskRemoveFromEventList+0xe4>)
   1c41a:	601a      	str	r2, [r3, #0]
   1c41c:	68bb      	ldr	r3, [r7, #8]
   1c41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c420:	0013      	movs	r3, r2
   1c422:	009b      	lsls	r3, r3, #2
   1c424:	189b      	adds	r3, r3, r2
   1c426:	009b      	lsls	r3, r3, #2
   1c428:	4a19      	ldr	r2, [pc, #100]	; (1c490 <xTaskRemoveFromEventList+0xe8>)
   1c42a:	189a      	adds	r2, r3, r2
   1c42c:	68bb      	ldr	r3, [r7, #8]
   1c42e:	3304      	adds	r3, #4
   1c430:	0019      	movs	r1, r3
   1c432:	0010      	movs	r0, r2
   1c434:	4b17      	ldr	r3, [pc, #92]	; (1c494 <xTaskRemoveFromEventList+0xec>)
   1c436:	4798      	blx	r3
   1c438:	e007      	b.n	1c44a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1c43a:	68bb      	ldr	r3, [r7, #8]
   1c43c:	3318      	adds	r3, #24
   1c43e:	001a      	movs	r2, r3
   1c440:	4b15      	ldr	r3, [pc, #84]	; (1c498 <xTaskRemoveFromEventList+0xf0>)
   1c442:	0011      	movs	r1, r2
   1c444:	0018      	movs	r0, r3
   1c446:	4b13      	ldr	r3, [pc, #76]	; (1c494 <xTaskRemoveFromEventList+0xec>)
   1c448:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1c44a:	68bb      	ldr	r3, [r7, #8]
   1c44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c44e:	4b13      	ldr	r3, [pc, #76]	; (1c49c <xTaskRemoveFromEventList+0xf4>)
   1c450:	681b      	ldr	r3, [r3, #0]
   1c452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c454:	429a      	cmp	r2, r3
   1c456:	d905      	bls.n	1c464 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1c458:	2301      	movs	r3, #1
   1c45a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1c45c:	4b10      	ldr	r3, [pc, #64]	; (1c4a0 <xTaskRemoveFromEventList+0xf8>)
   1c45e:	2201      	movs	r2, #1
   1c460:	601a      	str	r2, [r3, #0]
   1c462:	e001      	b.n	1c468 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1c464:	2300      	movs	r3, #0
   1c466:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1c468:	68fb      	ldr	r3, [r7, #12]
}
   1c46a:	0018      	movs	r0, r3
   1c46c:	46bd      	mov	sp, r7
   1c46e:	b004      	add	sp, #16
   1c470:	bd80      	pop	{r7, pc}
   1c472:	46c0      	nop			; (mov r8, r8)
   1c474:	0001998f 	.word	0x0001998f
   1c478:	20004038 	.word	0x20004038
   1c47c:	00017b15 	.word	0x00017b15
   1c480:	200000f8 	.word	0x200000f8
   1c484:	00017af5 	.word	0x00017af5
   1c488:	000182c5 	.word	0x000182c5
   1c48c:	20004018 	.word	0x20004018
   1c490:	20003f3c 	.word	0x20003f3c
   1c494:	000198df 	.word	0x000198df
   1c498:	20003fd0 	.word	0x20003fd0
   1c49c:	20003f38 	.word	0x20003f38
   1c4a0:	20004024 	.word	0x20004024

0001c4a4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c4a4:	b580      	push	{r7, lr}
   1c4a6:	b082      	sub	sp, #8
   1c4a8:	af00      	add	r7, sp, #0
   1c4aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1c4ac:	687b      	ldr	r3, [r7, #4]
   1c4ae:	2b00      	cmp	r3, #0
   1c4b0:	d101      	bne.n	1c4b6 <vTaskSetTimeOutState+0x12>
   1c4b2:	b672      	cpsid	i
   1c4b4:	e7fe      	b.n	1c4b4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1c4b6:	4b08      	ldr	r3, [pc, #32]	; (1c4d8 <vTaskSetTimeOutState+0x34>)
   1c4b8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c4ba:	4b08      	ldr	r3, [pc, #32]	; (1c4dc <vTaskSetTimeOutState+0x38>)
   1c4bc:	681a      	ldr	r2, [r3, #0]
   1c4be:	687b      	ldr	r3, [r7, #4]
   1c4c0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1c4c2:	4b07      	ldr	r3, [pc, #28]	; (1c4e0 <vTaskSetTimeOutState+0x3c>)
   1c4c4:	681a      	ldr	r2, [r3, #0]
   1c4c6:	687b      	ldr	r3, [r7, #4]
   1c4c8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1c4ca:	4b06      	ldr	r3, [pc, #24]	; (1c4e4 <vTaskSetTimeOutState+0x40>)
   1c4cc:	4798      	blx	r3
}
   1c4ce:	46c0      	nop			; (mov r8, r8)
   1c4d0:	46bd      	mov	sp, r7
   1c4d2:	b002      	add	sp, #8
   1c4d4:	bd80      	pop	{r7, pc}
   1c4d6:	46c0      	nop			; (mov r8, r8)
   1c4d8:	00019b19 	.word	0x00019b19
   1c4dc:	20004028 	.word	0x20004028
   1c4e0:	20004014 	.word	0x20004014
   1c4e4:	00019b3d 	.word	0x00019b3d

0001c4e8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c4e8:	b580      	push	{r7, lr}
   1c4ea:	b082      	sub	sp, #8
   1c4ec:	af00      	add	r7, sp, #0
   1c4ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c4f0:	4b05      	ldr	r3, [pc, #20]	; (1c508 <vTaskInternalSetTimeOutState+0x20>)
   1c4f2:	681a      	ldr	r2, [r3, #0]
   1c4f4:	687b      	ldr	r3, [r7, #4]
   1c4f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1c4f8:	4b04      	ldr	r3, [pc, #16]	; (1c50c <vTaskInternalSetTimeOutState+0x24>)
   1c4fa:	681a      	ldr	r2, [r3, #0]
   1c4fc:	687b      	ldr	r3, [r7, #4]
   1c4fe:	605a      	str	r2, [r3, #4]
}
   1c500:	46c0      	nop			; (mov r8, r8)
   1c502:	46bd      	mov	sp, r7
   1c504:	b002      	add	sp, #8
   1c506:	bd80      	pop	{r7, pc}
   1c508:	20004028 	.word	0x20004028
   1c50c:	20004014 	.word	0x20004014

0001c510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1c510:	b580      	push	{r7, lr}
   1c512:	b086      	sub	sp, #24
   1c514:	af00      	add	r7, sp, #0
   1c516:	6078      	str	r0, [r7, #4]
   1c518:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1c51a:	687b      	ldr	r3, [r7, #4]
   1c51c:	2b00      	cmp	r3, #0
   1c51e:	d101      	bne.n	1c524 <xTaskCheckForTimeOut+0x14>
   1c520:	b672      	cpsid	i
   1c522:	e7fe      	b.n	1c522 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1c524:	683b      	ldr	r3, [r7, #0]
   1c526:	2b00      	cmp	r3, #0
   1c528:	d101      	bne.n	1c52e <xTaskCheckForTimeOut+0x1e>
   1c52a:	b672      	cpsid	i
   1c52c:	e7fe      	b.n	1c52c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1c52e:	4b1e      	ldr	r3, [pc, #120]	; (1c5a8 <xTaskCheckForTimeOut+0x98>)
   1c530:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1c532:	4b1e      	ldr	r3, [pc, #120]	; (1c5ac <xTaskCheckForTimeOut+0x9c>)
   1c534:	681b      	ldr	r3, [r3, #0]
   1c536:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1c538:	687b      	ldr	r3, [r7, #4]
   1c53a:	685b      	ldr	r3, [r3, #4]
   1c53c:	693a      	ldr	r2, [r7, #16]
   1c53e:	1ad3      	subs	r3, r2, r3
   1c540:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1c542:	683b      	ldr	r3, [r7, #0]
   1c544:	681b      	ldr	r3, [r3, #0]
   1c546:	3301      	adds	r3, #1
   1c548:	d102      	bne.n	1c550 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1c54a:	2300      	movs	r3, #0
   1c54c:	617b      	str	r3, [r7, #20]
   1c54e:	e024      	b.n	1c59a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1c550:	687b      	ldr	r3, [r7, #4]
   1c552:	681a      	ldr	r2, [r3, #0]
   1c554:	4b16      	ldr	r3, [pc, #88]	; (1c5b0 <xTaskCheckForTimeOut+0xa0>)
   1c556:	681b      	ldr	r3, [r3, #0]
   1c558:	429a      	cmp	r2, r3
   1c55a:	d007      	beq.n	1c56c <xTaskCheckForTimeOut+0x5c>
   1c55c:	687b      	ldr	r3, [r7, #4]
   1c55e:	685a      	ldr	r2, [r3, #4]
   1c560:	693b      	ldr	r3, [r7, #16]
   1c562:	429a      	cmp	r2, r3
   1c564:	d802      	bhi.n	1c56c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1c566:	2301      	movs	r3, #1
   1c568:	617b      	str	r3, [r7, #20]
   1c56a:	e016      	b.n	1c59a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1c56c:	683b      	ldr	r3, [r7, #0]
   1c56e:	681a      	ldr	r2, [r3, #0]
   1c570:	68fb      	ldr	r3, [r7, #12]
   1c572:	429a      	cmp	r2, r3
   1c574:	d90c      	bls.n	1c590 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1c576:	683b      	ldr	r3, [r7, #0]
   1c578:	681a      	ldr	r2, [r3, #0]
   1c57a:	68fb      	ldr	r3, [r7, #12]
   1c57c:	1ad2      	subs	r2, r2, r3
   1c57e:	683b      	ldr	r3, [r7, #0]
   1c580:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1c582:	687b      	ldr	r3, [r7, #4]
   1c584:	0018      	movs	r0, r3
   1c586:	4b0b      	ldr	r3, [pc, #44]	; (1c5b4 <xTaskCheckForTimeOut+0xa4>)
   1c588:	4798      	blx	r3
			xReturn = pdFALSE;
   1c58a:	2300      	movs	r3, #0
   1c58c:	617b      	str	r3, [r7, #20]
   1c58e:	e004      	b.n	1c59a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1c590:	683b      	ldr	r3, [r7, #0]
   1c592:	2200      	movs	r2, #0
   1c594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1c596:	2301      	movs	r3, #1
   1c598:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1c59a:	4b07      	ldr	r3, [pc, #28]	; (1c5b8 <xTaskCheckForTimeOut+0xa8>)
   1c59c:	4798      	blx	r3

	return xReturn;
   1c59e:	697b      	ldr	r3, [r7, #20]
}
   1c5a0:	0018      	movs	r0, r3
   1c5a2:	46bd      	mov	sp, r7
   1c5a4:	b006      	add	sp, #24
   1c5a6:	bd80      	pop	{r7, pc}
   1c5a8:	00019b19 	.word	0x00019b19
   1c5ac:	20004014 	.word	0x20004014
   1c5b0:	20004028 	.word	0x20004028
   1c5b4:	0001c4e9 	.word	0x0001c4e9
   1c5b8:	00019b3d 	.word	0x00019b3d

0001c5bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1c5bc:	b580      	push	{r7, lr}
   1c5be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c5c0:	4b02      	ldr	r3, [pc, #8]	; (1c5cc <vTaskMissedYield+0x10>)
   1c5c2:	2201      	movs	r2, #1
   1c5c4:	601a      	str	r2, [r3, #0]
}
   1c5c6:	46c0      	nop			; (mov r8, r8)
   1c5c8:	46bd      	mov	sp, r7
   1c5ca:	bd80      	pop	{r7, pc}
   1c5cc:	20004024 	.word	0x20004024

0001c5d0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1c5d0:	b580      	push	{r7, lr}
   1c5d2:	b084      	sub	sp, #16
   1c5d4:	af00      	add	r7, sp, #0
   1c5d6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c5d8:	687b      	ldr	r3, [r7, #4]
   1c5da:	2b00      	cmp	r3, #0
   1c5dc:	d005      	beq.n	1c5ea <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c5de:	687b      	ldr	r3, [r7, #4]
   1c5e0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1c5e2:	68bb      	ldr	r3, [r7, #8]
   1c5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c5e6:	60fb      	str	r3, [r7, #12]
   1c5e8:	e001      	b.n	1c5ee <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1c5ea:	2300      	movs	r3, #0
   1c5ec:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1c5ee:	68fb      	ldr	r3, [r7, #12]
	}
   1c5f0:	0018      	movs	r0, r3
   1c5f2:	46bd      	mov	sp, r7
   1c5f4:	b004      	add	sp, #16
   1c5f6:	bd80      	pop	{r7, pc}

0001c5f8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1c5f8:	b580      	push	{r7, lr}
   1c5fa:	b084      	sub	sp, #16
   1c5fc:	af00      	add	r7, sp, #0
   1c5fe:	6078      	str	r0, [r7, #4]
   1c600:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c602:	687b      	ldr	r3, [r7, #4]
   1c604:	2b00      	cmp	r3, #0
   1c606:	d004      	beq.n	1c612 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c608:	687b      	ldr	r3, [r7, #4]
   1c60a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1c60c:	68fb      	ldr	r3, [r7, #12]
   1c60e:	683a      	ldr	r2, [r7, #0]
   1c610:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1c612:	46c0      	nop			; (mov r8, r8)
   1c614:	46bd      	mov	sp, r7
   1c616:	b004      	add	sp, #16
   1c618:	bd80      	pop	{r7, pc}
	...

0001c61c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c61c:	b580      	push	{r7, lr}
   1c61e:	b082      	sub	sp, #8
   1c620:	af00      	add	r7, sp, #0
   1c622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c624:	4b04      	ldr	r3, [pc, #16]	; (1c638 <prvIdleTask+0x1c>)
   1c626:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c628:	4b04      	ldr	r3, [pc, #16]	; (1c63c <prvIdleTask+0x20>)
   1c62a:	681b      	ldr	r3, [r3, #0]
   1c62c:	2b01      	cmp	r3, #1
   1c62e:	d9f9      	bls.n	1c624 <prvIdleTask+0x8>
			{
				taskYIELD();
   1c630:	4b03      	ldr	r3, [pc, #12]	; (1c640 <prvIdleTask+0x24>)
   1c632:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1c634:	e7f6      	b.n	1c624 <prvIdleTask+0x8>
   1c636:	46c0      	nop			; (mov r8, r8)
   1c638:	0001c6d1 	.word	0x0001c6d1
   1c63c:	20003f3c 	.word	0x20003f3c
   1c640:	00019b01 	.word	0x00019b01

0001c644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c644:	b580      	push	{r7, lr}
   1c646:	b082      	sub	sp, #8
   1c648:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c64a:	2300      	movs	r3, #0
   1c64c:	607b      	str	r3, [r7, #4]
   1c64e:	e00c      	b.n	1c66a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c650:	687a      	ldr	r2, [r7, #4]
   1c652:	0013      	movs	r3, r2
   1c654:	009b      	lsls	r3, r3, #2
   1c656:	189b      	adds	r3, r3, r2
   1c658:	009b      	lsls	r3, r3, #2
   1c65a:	4a14      	ldr	r2, [pc, #80]	; (1c6ac <prvInitialiseTaskLists+0x68>)
   1c65c:	189b      	adds	r3, r3, r2
   1c65e:	0018      	movs	r0, r3
   1c660:	4b13      	ldr	r3, [pc, #76]	; (1c6b0 <prvInitialiseTaskLists+0x6c>)
   1c662:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c664:	687b      	ldr	r3, [r7, #4]
   1c666:	3301      	adds	r3, #1
   1c668:	607b      	str	r3, [r7, #4]
   1c66a:	687b      	ldr	r3, [r7, #4]
   1c66c:	2b04      	cmp	r3, #4
   1c66e:	d9ef      	bls.n	1c650 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1c670:	4b10      	ldr	r3, [pc, #64]	; (1c6b4 <prvInitialiseTaskLists+0x70>)
   1c672:	0018      	movs	r0, r3
   1c674:	4b0e      	ldr	r3, [pc, #56]	; (1c6b0 <prvInitialiseTaskLists+0x6c>)
   1c676:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1c678:	4b0f      	ldr	r3, [pc, #60]	; (1c6b8 <prvInitialiseTaskLists+0x74>)
   1c67a:	0018      	movs	r0, r3
   1c67c:	4b0c      	ldr	r3, [pc, #48]	; (1c6b0 <prvInitialiseTaskLists+0x6c>)
   1c67e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1c680:	4b0e      	ldr	r3, [pc, #56]	; (1c6bc <prvInitialiseTaskLists+0x78>)
   1c682:	0018      	movs	r0, r3
   1c684:	4b0a      	ldr	r3, [pc, #40]	; (1c6b0 <prvInitialiseTaskLists+0x6c>)
   1c686:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1c688:	4b0d      	ldr	r3, [pc, #52]	; (1c6c0 <prvInitialiseTaskLists+0x7c>)
   1c68a:	0018      	movs	r0, r3
   1c68c:	4b08      	ldr	r3, [pc, #32]	; (1c6b0 <prvInitialiseTaskLists+0x6c>)
   1c68e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1c690:	4b0c      	ldr	r3, [pc, #48]	; (1c6c4 <prvInitialiseTaskLists+0x80>)
   1c692:	0018      	movs	r0, r3
   1c694:	4b06      	ldr	r3, [pc, #24]	; (1c6b0 <prvInitialiseTaskLists+0x6c>)
   1c696:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1c698:	4b0b      	ldr	r3, [pc, #44]	; (1c6c8 <prvInitialiseTaskLists+0x84>)
   1c69a:	4a06      	ldr	r2, [pc, #24]	; (1c6b4 <prvInitialiseTaskLists+0x70>)
   1c69c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1c69e:	4b0b      	ldr	r3, [pc, #44]	; (1c6cc <prvInitialiseTaskLists+0x88>)
   1c6a0:	4a05      	ldr	r2, [pc, #20]	; (1c6b8 <prvInitialiseTaskLists+0x74>)
   1c6a2:	601a      	str	r2, [r3, #0]
}
   1c6a4:	46c0      	nop			; (mov r8, r8)
   1c6a6:	46bd      	mov	sp, r7
   1c6a8:	b002      	add	sp, #8
   1c6aa:	bd80      	pop	{r7, pc}
   1c6ac:	20003f3c 	.word	0x20003f3c
   1c6b0:	0001988d 	.word	0x0001988d
   1c6b4:	20003fa0 	.word	0x20003fa0
   1c6b8:	20003fb4 	.word	0x20003fb4
   1c6bc:	20003fd0 	.word	0x20003fd0
   1c6c0:	20003fe4 	.word	0x20003fe4
   1c6c4:	20003ffc 	.word	0x20003ffc
   1c6c8:	20003fc8 	.word	0x20003fc8
   1c6cc:	20003fcc 	.word	0x20003fcc

0001c6d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1c6d0:	b580      	push	{r7, lr}
   1c6d2:	b082      	sub	sp, #8
   1c6d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c6d6:	e01a      	b.n	1c70e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1c6d8:	4b11      	ldr	r3, [pc, #68]	; (1c720 <prvCheckTasksWaitingTermination+0x50>)
   1c6da:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1c6dc:	4b11      	ldr	r3, [pc, #68]	; (1c724 <prvCheckTasksWaitingTermination+0x54>)
   1c6de:	68db      	ldr	r3, [r3, #12]
   1c6e0:	68db      	ldr	r3, [r3, #12]
   1c6e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c6e4:	687b      	ldr	r3, [r7, #4]
   1c6e6:	3304      	adds	r3, #4
   1c6e8:	0018      	movs	r0, r3
   1c6ea:	4b0f      	ldr	r3, [pc, #60]	; (1c728 <prvCheckTasksWaitingTermination+0x58>)
   1c6ec:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1c6ee:	4b0f      	ldr	r3, [pc, #60]	; (1c72c <prvCheckTasksWaitingTermination+0x5c>)
   1c6f0:	681b      	ldr	r3, [r3, #0]
   1c6f2:	1e5a      	subs	r2, r3, #1
   1c6f4:	4b0d      	ldr	r3, [pc, #52]	; (1c72c <prvCheckTasksWaitingTermination+0x5c>)
   1c6f6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1c6f8:	4b0d      	ldr	r3, [pc, #52]	; (1c730 <prvCheckTasksWaitingTermination+0x60>)
   1c6fa:	681b      	ldr	r3, [r3, #0]
   1c6fc:	1e5a      	subs	r2, r3, #1
   1c6fe:	4b0c      	ldr	r3, [pc, #48]	; (1c730 <prvCheckTasksWaitingTermination+0x60>)
   1c700:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1c702:	4b0c      	ldr	r3, [pc, #48]	; (1c734 <prvCheckTasksWaitingTermination+0x64>)
   1c704:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1c706:	687b      	ldr	r3, [r7, #4]
   1c708:	0018      	movs	r0, r3
   1c70a:	4b0b      	ldr	r3, [pc, #44]	; (1c738 <prvCheckTasksWaitingTermination+0x68>)
   1c70c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c70e:	4b08      	ldr	r3, [pc, #32]	; (1c730 <prvCheckTasksWaitingTermination+0x60>)
   1c710:	681b      	ldr	r3, [r3, #0]
   1c712:	2b00      	cmp	r3, #0
   1c714:	d1e0      	bne.n	1c6d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1c716:	46c0      	nop			; (mov r8, r8)
   1c718:	46bd      	mov	sp, r7
   1c71a:	b002      	add	sp, #8
   1c71c:	bd80      	pop	{r7, pc}
   1c71e:	46c0      	nop			; (mov r8, r8)
   1c720:	00019b19 	.word	0x00019b19
   1c724:	20003fe4 	.word	0x20003fe4
   1c728:	0001998f 	.word	0x0001998f
   1c72c:	20004010 	.word	0x20004010
   1c730:	20003ff8 	.word	0x20003ff8
   1c734:	00019b3d 	.word	0x00019b3d
   1c738:	0001c7ad 	.word	0x0001c7ad

0001c73c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1c73c:	b580      	push	{r7, lr}
   1c73e:	b084      	sub	sp, #16
   1c740:	af00      	add	r7, sp, #0
   1c742:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1c744:	2300      	movs	r3, #0
   1c746:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c748:	e005      	b.n	1c756 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1c74a:	687b      	ldr	r3, [r7, #4]
   1c74c:	3301      	adds	r3, #1
   1c74e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1c750:	68fb      	ldr	r3, [r7, #12]
   1c752:	3301      	adds	r3, #1
   1c754:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c756:	687b      	ldr	r3, [r7, #4]
   1c758:	781b      	ldrb	r3, [r3, #0]
   1c75a:	2ba5      	cmp	r3, #165	; 0xa5
   1c75c:	d0f5      	beq.n	1c74a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1c75e:	68fb      	ldr	r3, [r7, #12]
   1c760:	089b      	lsrs	r3, r3, #2
   1c762:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1c764:	68fb      	ldr	r3, [r7, #12]
   1c766:	b29b      	uxth	r3, r3
	}
   1c768:	0018      	movs	r0, r3
   1c76a:	46bd      	mov	sp, r7
   1c76c:	b004      	add	sp, #16
   1c76e:	bd80      	pop	{r7, pc}

0001c770 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1c770:	b580      	push	{r7, lr}
   1c772:	b086      	sub	sp, #24
   1c774:	af00      	add	r7, sp, #0
   1c776:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1c778:	687b      	ldr	r3, [r7, #4]
   1c77a:	2b00      	cmp	r3, #0
   1c77c:	d102      	bne.n	1c784 <uxTaskGetStackHighWaterMark+0x14>
   1c77e:	4b09      	ldr	r3, [pc, #36]	; (1c7a4 <uxTaskGetStackHighWaterMark+0x34>)
   1c780:	681b      	ldr	r3, [r3, #0]
   1c782:	e000      	b.n	1c786 <uxTaskGetStackHighWaterMark+0x16>
   1c784:	687b      	ldr	r3, [r7, #4]
   1c786:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1c788:	697b      	ldr	r3, [r7, #20]
   1c78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c78c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1c78e:	693b      	ldr	r3, [r7, #16]
   1c790:	0018      	movs	r0, r3
   1c792:	4b05      	ldr	r3, [pc, #20]	; (1c7a8 <uxTaskGetStackHighWaterMark+0x38>)
   1c794:	4798      	blx	r3
   1c796:	0003      	movs	r3, r0
   1c798:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1c79a:	68fb      	ldr	r3, [r7, #12]
	}
   1c79c:	0018      	movs	r0, r3
   1c79e:	46bd      	mov	sp, r7
   1c7a0:	b006      	add	sp, #24
   1c7a2:	bd80      	pop	{r7, pc}
   1c7a4:	20003f38 	.word	0x20003f38
   1c7a8:	0001c73d 	.word	0x0001c73d

0001c7ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1c7ac:	b580      	push	{r7, lr}
   1c7ae:	b082      	sub	sp, #8
   1c7b0:	af00      	add	r7, sp, #0
   1c7b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1c7b4:	687b      	ldr	r3, [r7, #4]
   1c7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c7b8:	0018      	movs	r0, r3
   1c7ba:	4b05      	ldr	r3, [pc, #20]	; (1c7d0 <prvDeleteTCB+0x24>)
   1c7bc:	4798      	blx	r3
			vPortFree( pxTCB );
   1c7be:	687b      	ldr	r3, [r7, #4]
   1c7c0:	0018      	movs	r0, r3
   1c7c2:	4b03      	ldr	r3, [pc, #12]	; (1c7d0 <prvDeleteTCB+0x24>)
   1c7c4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1c7c6:	46c0      	nop			; (mov r8, r8)
   1c7c8:	46bd      	mov	sp, r7
   1c7ca:	b002      	add	sp, #8
   1c7cc:	bd80      	pop	{r7, pc}
   1c7ce:	46c0      	nop			; (mov r8, r8)
   1c7d0:	00019d15 	.word	0x00019d15

0001c7d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1c7d4:	b580      	push	{r7, lr}
   1c7d6:	b082      	sub	sp, #8
   1c7d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c7da:	4b0e      	ldr	r3, [pc, #56]	; (1c814 <prvResetNextTaskUnblockTime+0x40>)
   1c7dc:	681b      	ldr	r3, [r3, #0]
   1c7de:	681b      	ldr	r3, [r3, #0]
   1c7e0:	2b00      	cmp	r3, #0
   1c7e2:	d101      	bne.n	1c7e8 <prvResetNextTaskUnblockTime+0x14>
   1c7e4:	2301      	movs	r3, #1
   1c7e6:	e000      	b.n	1c7ea <prvResetNextTaskUnblockTime+0x16>
   1c7e8:	2300      	movs	r3, #0
   1c7ea:	2b00      	cmp	r3, #0
   1c7ec:	d004      	beq.n	1c7f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1c7ee:	4b0a      	ldr	r3, [pc, #40]	; (1c818 <prvResetNextTaskUnblockTime+0x44>)
   1c7f0:	2201      	movs	r2, #1
   1c7f2:	4252      	negs	r2, r2
   1c7f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1c7f6:	e008      	b.n	1c80a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c7f8:	4b06      	ldr	r3, [pc, #24]	; (1c814 <prvResetNextTaskUnblockTime+0x40>)
   1c7fa:	681b      	ldr	r3, [r3, #0]
   1c7fc:	68db      	ldr	r3, [r3, #12]
   1c7fe:	68db      	ldr	r3, [r3, #12]
   1c800:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1c802:	687b      	ldr	r3, [r7, #4]
   1c804:	685a      	ldr	r2, [r3, #4]
   1c806:	4b04      	ldr	r3, [pc, #16]	; (1c818 <prvResetNextTaskUnblockTime+0x44>)
   1c808:	601a      	str	r2, [r3, #0]
}
   1c80a:	46c0      	nop			; (mov r8, r8)
   1c80c:	46bd      	mov	sp, r7
   1c80e:	b002      	add	sp, #8
   1c810:	bd80      	pop	{r7, pc}
   1c812:	46c0      	nop			; (mov r8, r8)
   1c814:	20003fc8 	.word	0x20003fc8
   1c818:	20004030 	.word	0x20004030

0001c81c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1c81c:	b580      	push	{r7, lr}
   1c81e:	b082      	sub	sp, #8
   1c820:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1c822:	4b04      	ldr	r3, [pc, #16]	; (1c834 <xTaskGetCurrentTaskHandle+0x18>)
   1c824:	681b      	ldr	r3, [r3, #0]
   1c826:	607b      	str	r3, [r7, #4]

		return xReturn;
   1c828:	687b      	ldr	r3, [r7, #4]
	}
   1c82a:	0018      	movs	r0, r3
   1c82c:	46bd      	mov	sp, r7
   1c82e:	b002      	add	sp, #8
   1c830:	bd80      	pop	{r7, pc}
   1c832:	46c0      	nop			; (mov r8, r8)
   1c834:	20003f38 	.word	0x20003f38

0001c838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1c838:	b580      	push	{r7, lr}
   1c83a:	b082      	sub	sp, #8
   1c83c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1c83e:	4b0a      	ldr	r3, [pc, #40]	; (1c868 <xTaskGetSchedulerState+0x30>)
   1c840:	681b      	ldr	r3, [r3, #0]
   1c842:	2b00      	cmp	r3, #0
   1c844:	d102      	bne.n	1c84c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1c846:	2301      	movs	r3, #1
   1c848:	607b      	str	r3, [r7, #4]
   1c84a:	e008      	b.n	1c85e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c84c:	4b07      	ldr	r3, [pc, #28]	; (1c86c <xTaskGetSchedulerState+0x34>)
   1c84e:	681b      	ldr	r3, [r3, #0]
   1c850:	2b00      	cmp	r3, #0
   1c852:	d102      	bne.n	1c85a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1c854:	2302      	movs	r3, #2
   1c856:	607b      	str	r3, [r7, #4]
   1c858:	e001      	b.n	1c85e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1c85a:	2300      	movs	r3, #0
   1c85c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1c85e:	687b      	ldr	r3, [r7, #4]
	}
   1c860:	0018      	movs	r0, r3
   1c862:	46bd      	mov	sp, r7
   1c864:	b002      	add	sp, #8
   1c866:	bd80      	pop	{r7, pc}
   1c868:	2000401c 	.word	0x2000401c
   1c86c:	20004038 	.word	0x20004038

0001c870 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1c870:	b590      	push	{r4, r7, lr}
   1c872:	b085      	sub	sp, #20
   1c874:	af00      	add	r7, sp, #0
   1c876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1c878:	687b      	ldr	r3, [r7, #4]
   1c87a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c87c:	2300      	movs	r3, #0
   1c87e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1c880:	687b      	ldr	r3, [r7, #4]
   1c882:	2b00      	cmp	r3, #0
   1c884:	d100      	bne.n	1c888 <xTaskPriorityInherit+0x18>
   1c886:	e09d      	b.n	1c9c4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1c888:	68bb      	ldr	r3, [r7, #8]
   1c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c88c:	4b50      	ldr	r3, [pc, #320]	; (1c9d0 <xTaskPriorityInherit+0x160>)
   1c88e:	681b      	ldr	r3, [r3, #0]
   1c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c892:	429a      	cmp	r2, r3
   1c894:	d300      	bcc.n	1c898 <xTaskPriorityInherit+0x28>
   1c896:	e08c      	b.n	1c9b2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c898:	68bb      	ldr	r3, [r7, #8]
   1c89a:	699b      	ldr	r3, [r3, #24]
   1c89c:	2b00      	cmp	r3, #0
   1c89e:	db06      	blt.n	1c8ae <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c8a0:	4b4b      	ldr	r3, [pc, #300]	; (1c9d0 <xTaskPriorityInherit+0x160>)
   1c8a2:	681b      	ldr	r3, [r3, #0]
   1c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c8a6:	2205      	movs	r2, #5
   1c8a8:	1ad2      	subs	r2, r2, r3
   1c8aa:	68bb      	ldr	r3, [r7, #8]
   1c8ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1c8ae:	68bb      	ldr	r3, [r7, #8]
   1c8b0:	6959      	ldr	r1, [r3, #20]
   1c8b2:	68bb      	ldr	r3, [r7, #8]
   1c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c8b6:	0013      	movs	r3, r2
   1c8b8:	009b      	lsls	r3, r3, #2
   1c8ba:	189b      	adds	r3, r3, r2
   1c8bc:	009b      	lsls	r3, r3, #2
   1c8be:	4a45      	ldr	r2, [pc, #276]	; (1c9d4 <xTaskPriorityInherit+0x164>)
   1c8c0:	189b      	adds	r3, r3, r2
   1c8c2:	4299      	cmp	r1, r3
   1c8c4:	d101      	bne.n	1c8ca <xTaskPriorityInherit+0x5a>
   1c8c6:	2301      	movs	r3, #1
   1c8c8:	e000      	b.n	1c8cc <xTaskPriorityInherit+0x5c>
   1c8ca:	2300      	movs	r3, #0
   1c8cc:	2b00      	cmp	r3, #0
   1c8ce:	d037      	beq.n	1c940 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c8d0:	68bb      	ldr	r3, [r7, #8]
   1c8d2:	3304      	adds	r3, #4
   1c8d4:	0018      	movs	r0, r3
   1c8d6:	4b40      	ldr	r3, [pc, #256]	; (1c9d8 <xTaskPriorityInherit+0x168>)
   1c8d8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c8da:	4b3d      	ldr	r3, [pc, #244]	; (1c9d0 <xTaskPriorityInherit+0x160>)
   1c8dc:	681b      	ldr	r3, [r3, #0]
   1c8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c8e0:	68bb      	ldr	r3, [r7, #8]
   1c8e2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1c8e4:	68bb      	ldr	r3, [r7, #8]
   1c8e6:	0018      	movs	r0, r3
   1c8e8:	4b3c      	ldr	r3, [pc, #240]	; (1c9dc <xTaskPriorityInherit+0x16c>)
   1c8ea:	4798      	blx	r3
   1c8ec:	0003      	movs	r3, r0
   1c8ee:	001a      	movs	r2, r3
   1c8f0:	4b3b      	ldr	r3, [pc, #236]	; (1c9e0 <xTaskPriorityInherit+0x170>)
   1c8f2:	881b      	ldrh	r3, [r3, #0]
   1c8f4:	4013      	ands	r3, r2
   1c8f6:	b29b      	uxth	r3, r3
   1c8f8:	2b00      	cmp	r3, #0
   1c8fa:	d008      	beq.n	1c90e <xTaskPriorityInherit+0x9e>
   1c8fc:	68bb      	ldr	r3, [r7, #8]
   1c8fe:	0018      	movs	r0, r3
   1c900:	4b38      	ldr	r3, [pc, #224]	; (1c9e4 <xTaskPriorityInherit+0x174>)
   1c902:	4798      	blx	r3
   1c904:	0003      	movs	r3, r0
   1c906:	b2db      	uxtb	r3, r3
   1c908:	0018      	movs	r0, r3
   1c90a:	4b37      	ldr	r3, [pc, #220]	; (1c9e8 <xTaskPriorityInherit+0x178>)
   1c90c:	4798      	blx	r3
   1c90e:	68bb      	ldr	r3, [r7, #8]
   1c910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c912:	4b36      	ldr	r3, [pc, #216]	; (1c9ec <xTaskPriorityInherit+0x17c>)
   1c914:	681b      	ldr	r3, [r3, #0]
   1c916:	429a      	cmp	r2, r3
   1c918:	d903      	bls.n	1c922 <xTaskPriorityInherit+0xb2>
   1c91a:	68bb      	ldr	r3, [r7, #8]
   1c91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c91e:	4b33      	ldr	r3, [pc, #204]	; (1c9ec <xTaskPriorityInherit+0x17c>)
   1c920:	601a      	str	r2, [r3, #0]
   1c922:	68bb      	ldr	r3, [r7, #8]
   1c924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c926:	0013      	movs	r3, r2
   1c928:	009b      	lsls	r3, r3, #2
   1c92a:	189b      	adds	r3, r3, r2
   1c92c:	009b      	lsls	r3, r3, #2
   1c92e:	4a29      	ldr	r2, [pc, #164]	; (1c9d4 <xTaskPriorityInherit+0x164>)
   1c930:	189a      	adds	r2, r3, r2
   1c932:	68bb      	ldr	r3, [r7, #8]
   1c934:	3304      	adds	r3, #4
   1c936:	0019      	movs	r1, r3
   1c938:	0010      	movs	r0, r2
   1c93a:	4b2d      	ldr	r3, [pc, #180]	; (1c9f0 <xTaskPriorityInherit+0x180>)
   1c93c:	4798      	blx	r3
   1c93e:	e004      	b.n	1c94a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c940:	4b23      	ldr	r3, [pc, #140]	; (1c9d0 <xTaskPriorityInherit+0x160>)
   1c942:	681b      	ldr	r3, [r3, #0]
   1c944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c946:	68bb      	ldr	r3, [r7, #8]
   1c948:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1c94a:	68bb      	ldr	r3, [r7, #8]
   1c94c:	0018      	movs	r0, r3
   1c94e:	4b23      	ldr	r3, [pc, #140]	; (1c9dc <xTaskPriorityInherit+0x16c>)
   1c950:	4798      	blx	r3
   1c952:	0003      	movs	r3, r0
   1c954:	001a      	movs	r2, r3
   1c956:	4b22      	ldr	r3, [pc, #136]	; (1c9e0 <xTaskPriorityInherit+0x170>)
   1c958:	881b      	ldrh	r3, [r3, #0]
   1c95a:	4013      	ands	r3, r2
   1c95c:	b29b      	uxth	r3, r3
   1c95e:	2b00      	cmp	r3, #0
   1c960:	d024      	beq.n	1c9ac <xTaskPriorityInherit+0x13c>
   1c962:	68bb      	ldr	r3, [r7, #8]
   1c964:	0018      	movs	r0, r3
   1c966:	4b1f      	ldr	r3, [pc, #124]	; (1c9e4 <xTaskPriorityInherit+0x174>)
   1c968:	4798      	blx	r3
   1c96a:	0003      	movs	r3, r0
   1c96c:	b2db      	uxtb	r3, r3
   1c96e:	001c      	movs	r4, r3
   1c970:	68bb      	ldr	r3, [r7, #8]
   1c972:	0018      	movs	r0, r3
   1c974:	4b1b      	ldr	r3, [pc, #108]	; (1c9e4 <xTaskPriorityInherit+0x174>)
   1c976:	4798      	blx	r3
   1c978:	0003      	movs	r3, r0
   1c97a:	b2db      	uxtb	r3, r3
   1c97c:	0019      	movs	r1, r3
   1c97e:	2003      	movs	r0, #3
   1c980:	4b1c      	ldr	r3, [pc, #112]	; (1c9f4 <xTaskPriorityInherit+0x184>)
   1c982:	4798      	blx	r3
   1c984:	0003      	movs	r3, r0
   1c986:	0022      	movs	r2, r4
   1c988:	2103      	movs	r1, #3
   1c98a:	208e      	movs	r0, #142	; 0x8e
   1c98c:	4c1a      	ldr	r4, [pc, #104]	; (1c9f8 <xTaskPriorityInherit+0x188>)
   1c98e:	47a0      	blx	r4
   1c990:	68bb      	ldr	r3, [r7, #8]
   1c992:	0018      	movs	r0, r3
   1c994:	4b13      	ldr	r3, [pc, #76]	; (1c9e4 <xTaskPriorityInherit+0x174>)
   1c996:	4798      	blx	r3
   1c998:	0003      	movs	r3, r0
   1c99a:	b2d9      	uxtb	r1, r3
   1c99c:	4b0c      	ldr	r3, [pc, #48]	; (1c9d0 <xTaskPriorityInherit+0x160>)
   1c99e:	681b      	ldr	r3, [r3, #0]
   1c9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9a2:	b2db      	uxtb	r3, r3
   1c9a4:	001a      	movs	r2, r3
   1c9a6:	2003      	movs	r0, #3
   1c9a8:	4b14      	ldr	r3, [pc, #80]	; (1c9fc <xTaskPriorityInherit+0x18c>)
   1c9aa:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1c9ac:	2301      	movs	r3, #1
   1c9ae:	60fb      	str	r3, [r7, #12]
   1c9b0:	e008      	b.n	1c9c4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1c9b2:	68bb      	ldr	r3, [r7, #8]
   1c9b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c9b6:	4b06      	ldr	r3, [pc, #24]	; (1c9d0 <xTaskPriorityInherit+0x160>)
   1c9b8:	681b      	ldr	r3, [r3, #0]
   1c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9bc:	429a      	cmp	r2, r3
   1c9be:	d201      	bcs.n	1c9c4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1c9c0:	2301      	movs	r3, #1
   1c9c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c9c4:	68fb      	ldr	r3, [r7, #12]
	}
   1c9c6:	0018      	movs	r0, r3
   1c9c8:	46bd      	mov	sp, r7
   1c9ca:	b005      	add	sp, #20
   1c9cc:	bd90      	pop	{r4, r7, pc}
   1c9ce:	46c0      	nop			; (mov r8, r8)
   1c9d0:	20003f38 	.word	0x20003f38
   1c9d4:	20003f3c 	.word	0x20003f3c
   1c9d8:	0001998f 	.word	0x0001998f
   1c9dc:	00017b15 	.word	0x00017b15
   1c9e0:	200000f8 	.word	0x200000f8
   1c9e4:	00017af5 	.word	0x00017af5
   1c9e8:	000182c5 	.word	0x000182c5
   1c9ec:	20004018 	.word	0x20004018
   1c9f0:	000198df 	.word	0x000198df
   1c9f4:	00018acd 	.word	0x00018acd
   1c9f8:	0001863d 	.word	0x0001863d
   1c9fc:	00018a29 	.word	0x00018a29

0001ca00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1ca00:	b590      	push	{r4, r7, lr}
   1ca02:	b085      	sub	sp, #20
   1ca04:	af00      	add	r7, sp, #0
   1ca06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1ca08:	687b      	ldr	r3, [r7, #4]
   1ca0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1ca0c:	2300      	movs	r3, #0
   1ca0e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1ca10:	687b      	ldr	r3, [r7, #4]
   1ca12:	2b00      	cmp	r3, #0
   1ca14:	d100      	bne.n	1ca18 <xTaskPriorityDisinherit+0x18>
   1ca16:	e089      	b.n	1cb2c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1ca18:	4b47      	ldr	r3, [pc, #284]	; (1cb38 <xTaskPriorityDisinherit+0x138>)
   1ca1a:	681b      	ldr	r3, [r3, #0]
   1ca1c:	68ba      	ldr	r2, [r7, #8]
   1ca1e:	429a      	cmp	r2, r3
   1ca20:	d001      	beq.n	1ca26 <xTaskPriorityDisinherit+0x26>
   1ca22:	b672      	cpsid	i
   1ca24:	e7fe      	b.n	1ca24 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1ca26:	68bb      	ldr	r3, [r7, #8]
   1ca28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca2a:	2b00      	cmp	r3, #0
   1ca2c:	d101      	bne.n	1ca32 <xTaskPriorityDisinherit+0x32>
   1ca2e:	b672      	cpsid	i
   1ca30:	e7fe      	b.n	1ca30 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1ca32:	68bb      	ldr	r3, [r7, #8]
   1ca34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca36:	1e5a      	subs	r2, r3, #1
   1ca38:	68bb      	ldr	r3, [r7, #8]
   1ca3a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1ca3c:	68bb      	ldr	r3, [r7, #8]
   1ca3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca40:	68bb      	ldr	r3, [r7, #8]
   1ca42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ca44:	429a      	cmp	r2, r3
   1ca46:	d071      	beq.n	1cb2c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1ca48:	68bb      	ldr	r3, [r7, #8]
   1ca4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca4c:	2b00      	cmp	r3, #0
   1ca4e:	d16d      	bne.n	1cb2c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ca50:	68bb      	ldr	r3, [r7, #8]
   1ca52:	3304      	adds	r3, #4
   1ca54:	0018      	movs	r0, r3
   1ca56:	4b39      	ldr	r3, [pc, #228]	; (1cb3c <xTaskPriorityDisinherit+0x13c>)
   1ca58:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1ca5a:	68bb      	ldr	r3, [r7, #8]
   1ca5c:	0018      	movs	r0, r3
   1ca5e:	4b38      	ldr	r3, [pc, #224]	; (1cb40 <xTaskPriorityDisinherit+0x140>)
   1ca60:	4798      	blx	r3
   1ca62:	0003      	movs	r3, r0
   1ca64:	001a      	movs	r2, r3
   1ca66:	4b37      	ldr	r3, [pc, #220]	; (1cb44 <xTaskPriorityDisinherit+0x144>)
   1ca68:	881b      	ldrh	r3, [r3, #0]
   1ca6a:	4013      	ands	r3, r2
   1ca6c:	b29b      	uxth	r3, r3
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	d023      	beq.n	1caba <xTaskPriorityDisinherit+0xba>
   1ca72:	68bb      	ldr	r3, [r7, #8]
   1ca74:	0018      	movs	r0, r3
   1ca76:	4b34      	ldr	r3, [pc, #208]	; (1cb48 <xTaskPriorityDisinherit+0x148>)
   1ca78:	4798      	blx	r3
   1ca7a:	0003      	movs	r3, r0
   1ca7c:	b2db      	uxtb	r3, r3
   1ca7e:	001c      	movs	r4, r3
   1ca80:	68bb      	ldr	r3, [r7, #8]
   1ca82:	0018      	movs	r0, r3
   1ca84:	4b30      	ldr	r3, [pc, #192]	; (1cb48 <xTaskPriorityDisinherit+0x148>)
   1ca86:	4798      	blx	r3
   1ca88:	0003      	movs	r3, r0
   1ca8a:	b2db      	uxtb	r3, r3
   1ca8c:	0019      	movs	r1, r3
   1ca8e:	2003      	movs	r0, #3
   1ca90:	4b2e      	ldr	r3, [pc, #184]	; (1cb4c <xTaskPriorityDisinherit+0x14c>)
   1ca92:	4798      	blx	r3
   1ca94:	0003      	movs	r3, r0
   1ca96:	0022      	movs	r2, r4
   1ca98:	2103      	movs	r1, #3
   1ca9a:	208f      	movs	r0, #143	; 0x8f
   1ca9c:	4c2c      	ldr	r4, [pc, #176]	; (1cb50 <xTaskPriorityDisinherit+0x150>)
   1ca9e:	47a0      	blx	r4
   1caa0:	68bb      	ldr	r3, [r7, #8]
   1caa2:	0018      	movs	r0, r3
   1caa4:	4b28      	ldr	r3, [pc, #160]	; (1cb48 <xTaskPriorityDisinherit+0x148>)
   1caa6:	4798      	blx	r3
   1caa8:	0003      	movs	r3, r0
   1caaa:	b2d9      	uxtb	r1, r3
   1caac:	68bb      	ldr	r3, [r7, #8]
   1caae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cab0:	b2db      	uxtb	r3, r3
   1cab2:	001a      	movs	r2, r3
   1cab4:	2003      	movs	r0, #3
   1cab6:	4b27      	ldr	r3, [pc, #156]	; (1cb54 <xTaskPriorityDisinherit+0x154>)
   1cab8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1caba:	68bb      	ldr	r3, [r7, #8]
   1cabc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cabe:	68bb      	ldr	r3, [r7, #8]
   1cac0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cac2:	68bb      	ldr	r3, [r7, #8]
   1cac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cac6:	2205      	movs	r2, #5
   1cac8:	1ad2      	subs	r2, r2, r3
   1caca:	68bb      	ldr	r3, [r7, #8]
   1cacc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1cace:	68bb      	ldr	r3, [r7, #8]
   1cad0:	0018      	movs	r0, r3
   1cad2:	4b1b      	ldr	r3, [pc, #108]	; (1cb40 <xTaskPriorityDisinherit+0x140>)
   1cad4:	4798      	blx	r3
   1cad6:	0003      	movs	r3, r0
   1cad8:	001a      	movs	r2, r3
   1cada:	4b1a      	ldr	r3, [pc, #104]	; (1cb44 <xTaskPriorityDisinherit+0x144>)
   1cadc:	881b      	ldrh	r3, [r3, #0]
   1cade:	4013      	ands	r3, r2
   1cae0:	b29b      	uxth	r3, r3
   1cae2:	2b00      	cmp	r3, #0
   1cae4:	d008      	beq.n	1caf8 <xTaskPriorityDisinherit+0xf8>
   1cae6:	68bb      	ldr	r3, [r7, #8]
   1cae8:	0018      	movs	r0, r3
   1caea:	4b17      	ldr	r3, [pc, #92]	; (1cb48 <xTaskPriorityDisinherit+0x148>)
   1caec:	4798      	blx	r3
   1caee:	0003      	movs	r3, r0
   1caf0:	b2db      	uxtb	r3, r3
   1caf2:	0018      	movs	r0, r3
   1caf4:	4b18      	ldr	r3, [pc, #96]	; (1cb58 <xTaskPriorityDisinherit+0x158>)
   1caf6:	4798      	blx	r3
   1caf8:	68bb      	ldr	r3, [r7, #8]
   1cafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cafc:	4b17      	ldr	r3, [pc, #92]	; (1cb5c <xTaskPriorityDisinherit+0x15c>)
   1cafe:	681b      	ldr	r3, [r3, #0]
   1cb00:	429a      	cmp	r2, r3
   1cb02:	d903      	bls.n	1cb0c <xTaskPriorityDisinherit+0x10c>
   1cb04:	68bb      	ldr	r3, [r7, #8]
   1cb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb08:	4b14      	ldr	r3, [pc, #80]	; (1cb5c <xTaskPriorityDisinherit+0x15c>)
   1cb0a:	601a      	str	r2, [r3, #0]
   1cb0c:	68bb      	ldr	r3, [r7, #8]
   1cb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb10:	0013      	movs	r3, r2
   1cb12:	009b      	lsls	r3, r3, #2
   1cb14:	189b      	adds	r3, r3, r2
   1cb16:	009b      	lsls	r3, r3, #2
   1cb18:	4a11      	ldr	r2, [pc, #68]	; (1cb60 <xTaskPriorityDisinherit+0x160>)
   1cb1a:	189a      	adds	r2, r3, r2
   1cb1c:	68bb      	ldr	r3, [r7, #8]
   1cb1e:	3304      	adds	r3, #4
   1cb20:	0019      	movs	r1, r3
   1cb22:	0010      	movs	r0, r2
   1cb24:	4b0f      	ldr	r3, [pc, #60]	; (1cb64 <xTaskPriorityDisinherit+0x164>)
   1cb26:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1cb28:	2301      	movs	r3, #1
   1cb2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cb2c:	68fb      	ldr	r3, [r7, #12]
	}
   1cb2e:	0018      	movs	r0, r3
   1cb30:	46bd      	mov	sp, r7
   1cb32:	b005      	add	sp, #20
   1cb34:	bd90      	pop	{r4, r7, pc}
   1cb36:	46c0      	nop			; (mov r8, r8)
   1cb38:	20003f38 	.word	0x20003f38
   1cb3c:	0001998f 	.word	0x0001998f
   1cb40:	00017b15 	.word	0x00017b15
   1cb44:	200000f8 	.word	0x200000f8
   1cb48:	00017af5 	.word	0x00017af5
   1cb4c:	00018acd 	.word	0x00018acd
   1cb50:	0001863d 	.word	0x0001863d
   1cb54:	00018a29 	.word	0x00018a29
   1cb58:	000182c5 	.word	0x000182c5
   1cb5c:	20004018 	.word	0x20004018
   1cb60:	20003f3c 	.word	0x20003f3c
   1cb64:	000198df 	.word	0x000198df

0001cb68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1cb68:	b590      	push	{r4, r7, lr}
   1cb6a:	b087      	sub	sp, #28
   1cb6c:	af00      	add	r7, sp, #0
   1cb6e:	6078      	str	r0, [r7, #4]
   1cb70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cb72:	687b      	ldr	r3, [r7, #4]
   1cb74:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1cb76:	2301      	movs	r3, #1
   1cb78:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cb7a:	687b      	ldr	r3, [r7, #4]
   1cb7c:	2b00      	cmp	r3, #0
   1cb7e:	d100      	bne.n	1cb82 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1cb80:	e0a4      	b.n	1cccc <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1cb82:	693b      	ldr	r3, [r7, #16]
   1cb84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cb86:	2b00      	cmp	r3, #0
   1cb88:	d101      	bne.n	1cb8e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1cb8a:	b672      	cpsid	i
   1cb8c:	e7fe      	b.n	1cb8c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1cb8e:	693b      	ldr	r3, [r7, #16]
   1cb90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cb92:	683b      	ldr	r3, [r7, #0]
   1cb94:	429a      	cmp	r2, r3
   1cb96:	d202      	bcs.n	1cb9e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1cb98:	683b      	ldr	r3, [r7, #0]
   1cb9a:	617b      	str	r3, [r7, #20]
   1cb9c:	e002      	b.n	1cba4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1cb9e:	693b      	ldr	r3, [r7, #16]
   1cba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cba2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1cba4:	693b      	ldr	r3, [r7, #16]
   1cba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cba8:	697b      	ldr	r3, [r7, #20]
   1cbaa:	429a      	cmp	r2, r3
   1cbac:	d100      	bne.n	1cbb0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1cbae:	e08d      	b.n	1cccc <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1cbb0:	693b      	ldr	r3, [r7, #16]
   1cbb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cbb4:	68fb      	ldr	r3, [r7, #12]
   1cbb6:	429a      	cmp	r2, r3
   1cbb8:	d000      	beq.n	1cbbc <vTaskPriorityDisinheritAfterTimeout+0x54>
   1cbba:	e087      	b.n	1cccc <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1cbbc:	4b45      	ldr	r3, [pc, #276]	; (1ccd4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1cbbe:	681b      	ldr	r3, [r3, #0]
   1cbc0:	693a      	ldr	r2, [r7, #16]
   1cbc2:	429a      	cmp	r2, r3
   1cbc4:	d101      	bne.n	1cbca <vTaskPriorityDisinheritAfterTimeout+0x62>
   1cbc6:	b672      	cpsid	i
   1cbc8:	e7fe      	b.n	1cbc8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1cbca:	693b      	ldr	r3, [r7, #16]
   1cbcc:	0018      	movs	r0, r3
   1cbce:	4b42      	ldr	r3, [pc, #264]	; (1ccd8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cbd0:	4798      	blx	r3
   1cbd2:	0003      	movs	r3, r0
   1cbd4:	001a      	movs	r2, r3
   1cbd6:	4b41      	ldr	r3, [pc, #260]	; (1ccdc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cbd8:	881b      	ldrh	r3, [r3, #0]
   1cbda:	4013      	ands	r3, r2
   1cbdc:	b29b      	uxth	r3, r3
   1cbde:	2b00      	cmp	r3, #0
   1cbe0:	d023      	beq.n	1cc2a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1cbe2:	693b      	ldr	r3, [r7, #16]
   1cbe4:	0018      	movs	r0, r3
   1cbe6:	4b3e      	ldr	r3, [pc, #248]	; (1cce0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cbe8:	4798      	blx	r3
   1cbea:	0003      	movs	r3, r0
   1cbec:	b2db      	uxtb	r3, r3
   1cbee:	001c      	movs	r4, r3
   1cbf0:	693b      	ldr	r3, [r7, #16]
   1cbf2:	0018      	movs	r0, r3
   1cbf4:	4b3a      	ldr	r3, [pc, #232]	; (1cce0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cbf6:	4798      	blx	r3
   1cbf8:	0003      	movs	r3, r0
   1cbfa:	b2db      	uxtb	r3, r3
   1cbfc:	0019      	movs	r1, r3
   1cbfe:	2003      	movs	r0, #3
   1cc00:	4b38      	ldr	r3, [pc, #224]	; (1cce4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1cc02:	4798      	blx	r3
   1cc04:	0003      	movs	r3, r0
   1cc06:	0022      	movs	r2, r4
   1cc08:	2103      	movs	r1, #3
   1cc0a:	208f      	movs	r0, #143	; 0x8f
   1cc0c:	4c36      	ldr	r4, [pc, #216]	; (1cce8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1cc0e:	47a0      	blx	r4
   1cc10:	693b      	ldr	r3, [r7, #16]
   1cc12:	0018      	movs	r0, r3
   1cc14:	4b32      	ldr	r3, [pc, #200]	; (1cce0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cc16:	4798      	blx	r3
   1cc18:	0003      	movs	r3, r0
   1cc1a:	b2d9      	uxtb	r1, r3
   1cc1c:	693b      	ldr	r3, [r7, #16]
   1cc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cc20:	b2db      	uxtb	r3, r3
   1cc22:	001a      	movs	r2, r3
   1cc24:	2003      	movs	r0, #3
   1cc26:	4b31      	ldr	r3, [pc, #196]	; (1ccec <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1cc28:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1cc2a:	693b      	ldr	r3, [r7, #16]
   1cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc2e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1cc30:	693b      	ldr	r3, [r7, #16]
   1cc32:	697a      	ldr	r2, [r7, #20]
   1cc34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cc36:	693b      	ldr	r3, [r7, #16]
   1cc38:	699b      	ldr	r3, [r3, #24]
   1cc3a:	2b00      	cmp	r3, #0
   1cc3c:	db04      	blt.n	1cc48 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cc3e:	697b      	ldr	r3, [r7, #20]
   1cc40:	2205      	movs	r2, #5
   1cc42:	1ad2      	subs	r2, r2, r3
   1cc44:	693b      	ldr	r3, [r7, #16]
   1cc46:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1cc48:	693b      	ldr	r3, [r7, #16]
   1cc4a:	6959      	ldr	r1, [r3, #20]
   1cc4c:	68ba      	ldr	r2, [r7, #8]
   1cc4e:	0013      	movs	r3, r2
   1cc50:	009b      	lsls	r3, r3, #2
   1cc52:	189b      	adds	r3, r3, r2
   1cc54:	009b      	lsls	r3, r3, #2
   1cc56:	4a26      	ldr	r2, [pc, #152]	; (1ccf0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1cc58:	189b      	adds	r3, r3, r2
   1cc5a:	4299      	cmp	r1, r3
   1cc5c:	d101      	bne.n	1cc62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1cc5e:	2301      	movs	r3, #1
   1cc60:	e000      	b.n	1cc64 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1cc62:	2300      	movs	r3, #0
   1cc64:	2b00      	cmp	r3, #0
   1cc66:	d031      	beq.n	1cccc <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cc68:	693b      	ldr	r3, [r7, #16]
   1cc6a:	3304      	adds	r3, #4
   1cc6c:	0018      	movs	r0, r3
   1cc6e:	4b21      	ldr	r3, [pc, #132]	; (1ccf4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1cc70:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1cc72:	693b      	ldr	r3, [r7, #16]
   1cc74:	0018      	movs	r0, r3
   1cc76:	4b18      	ldr	r3, [pc, #96]	; (1ccd8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cc78:	4798      	blx	r3
   1cc7a:	0003      	movs	r3, r0
   1cc7c:	001a      	movs	r2, r3
   1cc7e:	4b17      	ldr	r3, [pc, #92]	; (1ccdc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cc80:	881b      	ldrh	r3, [r3, #0]
   1cc82:	4013      	ands	r3, r2
   1cc84:	b29b      	uxth	r3, r3
   1cc86:	2b00      	cmp	r3, #0
   1cc88:	d008      	beq.n	1cc9c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1cc8a:	693b      	ldr	r3, [r7, #16]
   1cc8c:	0018      	movs	r0, r3
   1cc8e:	4b14      	ldr	r3, [pc, #80]	; (1cce0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cc90:	4798      	blx	r3
   1cc92:	0003      	movs	r3, r0
   1cc94:	b2db      	uxtb	r3, r3
   1cc96:	0018      	movs	r0, r3
   1cc98:	4b17      	ldr	r3, [pc, #92]	; (1ccf8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1cc9a:	4798      	blx	r3
   1cc9c:	693b      	ldr	r3, [r7, #16]
   1cc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cca0:	4b16      	ldr	r3, [pc, #88]	; (1ccfc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1cca2:	681b      	ldr	r3, [r3, #0]
   1cca4:	429a      	cmp	r2, r3
   1cca6:	d903      	bls.n	1ccb0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1cca8:	693b      	ldr	r3, [r7, #16]
   1ccaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccac:	4b13      	ldr	r3, [pc, #76]	; (1ccfc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1ccae:	601a      	str	r2, [r3, #0]
   1ccb0:	693b      	ldr	r3, [r7, #16]
   1ccb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccb4:	0013      	movs	r3, r2
   1ccb6:	009b      	lsls	r3, r3, #2
   1ccb8:	189b      	adds	r3, r3, r2
   1ccba:	009b      	lsls	r3, r3, #2
   1ccbc:	4a0c      	ldr	r2, [pc, #48]	; (1ccf0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ccbe:	189a      	adds	r2, r3, r2
   1ccc0:	693b      	ldr	r3, [r7, #16]
   1ccc2:	3304      	adds	r3, #4
   1ccc4:	0019      	movs	r1, r3
   1ccc6:	0010      	movs	r0, r2
   1ccc8:	4b0d      	ldr	r3, [pc, #52]	; (1cd00 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1ccca:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cccc:	46c0      	nop			; (mov r8, r8)
   1ccce:	46bd      	mov	sp, r7
   1ccd0:	b007      	add	sp, #28
   1ccd2:	bd90      	pop	{r4, r7, pc}
   1ccd4:	20003f38 	.word	0x20003f38
   1ccd8:	00017b15 	.word	0x00017b15
   1ccdc:	200000f8 	.word	0x200000f8
   1cce0:	00017af5 	.word	0x00017af5
   1cce4:	00018acd 	.word	0x00018acd
   1cce8:	0001863d 	.word	0x0001863d
   1ccec:	00018a29 	.word	0x00018a29
   1ccf0:	20003f3c 	.word	0x20003f3c
   1ccf4:	0001998f 	.word	0x0001998f
   1ccf8:	000182c5 	.word	0x000182c5
   1ccfc:	20004018 	.word	0x20004018
   1cd00:	000198df 	.word	0x000198df

0001cd04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1cd04:	b580      	push	{r7, lr}
   1cd06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1cd08:	4b06      	ldr	r3, [pc, #24]	; (1cd24 <pvTaskIncrementMutexHeldCount+0x20>)
   1cd0a:	681b      	ldr	r3, [r3, #0]
   1cd0c:	2b00      	cmp	r3, #0
   1cd0e:	d004      	beq.n	1cd1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1cd10:	4b04      	ldr	r3, [pc, #16]	; (1cd24 <pvTaskIncrementMutexHeldCount+0x20>)
   1cd12:	681b      	ldr	r3, [r3, #0]
   1cd14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cd16:	3201      	adds	r2, #1
   1cd18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1cd1a:	4b02      	ldr	r3, [pc, #8]	; (1cd24 <pvTaskIncrementMutexHeldCount+0x20>)
   1cd1c:	681b      	ldr	r3, [r3, #0]
	}
   1cd1e:	0018      	movs	r0, r3
   1cd20:	46bd      	mov	sp, r7
   1cd22:	bd80      	pop	{r7, pc}
   1cd24:	20003f38 	.word	0x20003f38

0001cd28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1cd28:	b580      	push	{r7, lr}
   1cd2a:	b084      	sub	sp, #16
   1cd2c:	af00      	add	r7, sp, #0
   1cd2e:	6078      	str	r0, [r7, #4]
   1cd30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1cd32:	4b21      	ldr	r3, [pc, #132]	; (1cdb8 <prvAddCurrentTaskToDelayedList+0x90>)
   1cd34:	681b      	ldr	r3, [r3, #0]
   1cd36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cd38:	4b20      	ldr	r3, [pc, #128]	; (1cdbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cd3a:	681b      	ldr	r3, [r3, #0]
   1cd3c:	3304      	adds	r3, #4
   1cd3e:	0018      	movs	r0, r3
   1cd40:	4b1f      	ldr	r3, [pc, #124]	; (1cdc0 <prvAddCurrentTaskToDelayedList+0x98>)
   1cd42:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1cd44:	687b      	ldr	r3, [r7, #4]
   1cd46:	3301      	adds	r3, #1
   1cd48:	d10b      	bne.n	1cd62 <prvAddCurrentTaskToDelayedList+0x3a>
   1cd4a:	683b      	ldr	r3, [r7, #0]
   1cd4c:	2b00      	cmp	r3, #0
   1cd4e:	d008      	beq.n	1cd62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cd50:	4b1a      	ldr	r3, [pc, #104]	; (1cdbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cd52:	681b      	ldr	r3, [r3, #0]
   1cd54:	1d1a      	adds	r2, r3, #4
   1cd56:	4b1b      	ldr	r3, [pc, #108]	; (1cdc4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1cd58:	0011      	movs	r1, r2
   1cd5a:	0018      	movs	r0, r3
   1cd5c:	4b1a      	ldr	r3, [pc, #104]	; (1cdc8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1cd5e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1cd60:	e026      	b.n	1cdb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1cd62:	68fa      	ldr	r2, [r7, #12]
   1cd64:	687b      	ldr	r3, [r7, #4]
   1cd66:	18d3      	adds	r3, r2, r3
   1cd68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1cd6a:	4b14      	ldr	r3, [pc, #80]	; (1cdbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cd6c:	681b      	ldr	r3, [r3, #0]
   1cd6e:	68ba      	ldr	r2, [r7, #8]
   1cd70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1cd72:	68ba      	ldr	r2, [r7, #8]
   1cd74:	68fb      	ldr	r3, [r7, #12]
   1cd76:	429a      	cmp	r2, r3
   1cd78:	d209      	bcs.n	1cd8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cd7a:	4b14      	ldr	r3, [pc, #80]	; (1cdcc <prvAddCurrentTaskToDelayedList+0xa4>)
   1cd7c:	681a      	ldr	r2, [r3, #0]
   1cd7e:	4b0f      	ldr	r3, [pc, #60]	; (1cdbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cd80:	681b      	ldr	r3, [r3, #0]
   1cd82:	3304      	adds	r3, #4
   1cd84:	0019      	movs	r1, r3
   1cd86:	0010      	movs	r0, r2
   1cd88:	4b11      	ldr	r3, [pc, #68]	; (1cdd0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1cd8a:	4798      	blx	r3
}
   1cd8c:	e010      	b.n	1cdb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cd8e:	4b11      	ldr	r3, [pc, #68]	; (1cdd4 <prvAddCurrentTaskToDelayedList+0xac>)
   1cd90:	681a      	ldr	r2, [r3, #0]
   1cd92:	4b0a      	ldr	r3, [pc, #40]	; (1cdbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cd94:	681b      	ldr	r3, [r3, #0]
   1cd96:	3304      	adds	r3, #4
   1cd98:	0019      	movs	r1, r3
   1cd9a:	0010      	movs	r0, r2
   1cd9c:	4b0c      	ldr	r3, [pc, #48]	; (1cdd0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1cd9e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1cda0:	4b0d      	ldr	r3, [pc, #52]	; (1cdd8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1cda2:	681b      	ldr	r3, [r3, #0]
   1cda4:	68ba      	ldr	r2, [r7, #8]
   1cda6:	429a      	cmp	r2, r3
   1cda8:	d202      	bcs.n	1cdb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1cdaa:	4b0b      	ldr	r3, [pc, #44]	; (1cdd8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1cdac:	68ba      	ldr	r2, [r7, #8]
   1cdae:	601a      	str	r2, [r3, #0]
}
   1cdb0:	46c0      	nop			; (mov r8, r8)
   1cdb2:	46bd      	mov	sp, r7
   1cdb4:	b004      	add	sp, #16
   1cdb6:	bd80      	pop	{r7, pc}
   1cdb8:	20004014 	.word	0x20004014
   1cdbc:	20003f38 	.word	0x20003f38
   1cdc0:	0001998f 	.word	0x0001998f
   1cdc4:	20003ffc 	.word	0x20003ffc
   1cdc8:	000198df 	.word	0x000198df
   1cdcc:	20003fcc 	.word	0x20003fcc
   1cdd0:	00019923 	.word	0x00019923
   1cdd4:	20003fc8 	.word	0x20003fc8
   1cdd8:	20004030 	.word	0x20004030

0001cddc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1cddc:	b590      	push	{r4, r7, lr}
   1cdde:	b085      	sub	sp, #20
   1cde0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1cde2:	2300      	movs	r3, #0
   1cde4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1cde6:	4b0e      	ldr	r3, [pc, #56]	; (1ce20 <xTimerCreateTimerTask+0x44>)
   1cde8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1cdea:	4b0e      	ldr	r3, [pc, #56]	; (1ce24 <xTimerCreateTimerTask+0x48>)
   1cdec:	681b      	ldr	r3, [r3, #0]
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	d00b      	beq.n	1ce0a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1cdf2:	490d      	ldr	r1, [pc, #52]	; (1ce28 <xTimerCreateTimerTask+0x4c>)
   1cdf4:	480d      	ldr	r0, [pc, #52]	; (1ce2c <xTimerCreateTimerTask+0x50>)
   1cdf6:	4b0e      	ldr	r3, [pc, #56]	; (1ce30 <xTimerCreateTimerTask+0x54>)
   1cdf8:	9301      	str	r3, [sp, #4]
   1cdfa:	2302      	movs	r3, #2
   1cdfc:	9300      	str	r3, [sp, #0]
   1cdfe:	2300      	movs	r3, #0
   1ce00:	2280      	movs	r2, #128	; 0x80
   1ce02:	4c0c      	ldr	r4, [pc, #48]	; (1ce34 <xTimerCreateTimerTask+0x58>)
   1ce04:	47a0      	blx	r4
   1ce06:	0003      	movs	r3, r0
   1ce08:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1ce0a:	687b      	ldr	r3, [r7, #4]
   1ce0c:	2b00      	cmp	r3, #0
   1ce0e:	d101      	bne.n	1ce14 <xTimerCreateTimerTask+0x38>
   1ce10:	b672      	cpsid	i
   1ce12:	e7fe      	b.n	1ce12 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1ce14:	687b      	ldr	r3, [r7, #4]
}
   1ce16:	0018      	movs	r0, r3
   1ce18:	46bd      	mov	sp, r7
   1ce1a:	b003      	add	sp, #12
   1ce1c:	bd90      	pop	{r4, r7, pc}
   1ce1e:	46c0      	nop			; (mov r8, r8)
   1ce20:	0001d325 	.word	0x0001d325
   1ce24:	2000406c 	.word	0x2000406c
   1ce28:	000376dc 	.word	0x000376dc
   1ce2c:	0001cf5d 	.word	0x0001cf5d
   1ce30:	20004070 	.word	0x20004070
   1ce34:	0001b775 	.word	0x0001b775

0001ce38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1ce38:	b590      	push	{r4, r7, lr}
   1ce3a:	b089      	sub	sp, #36	; 0x24
   1ce3c:	af00      	add	r7, sp, #0
   1ce3e:	60f8      	str	r0, [r7, #12]
   1ce40:	60b9      	str	r1, [r7, #8]
   1ce42:	607a      	str	r2, [r7, #4]
   1ce44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1ce46:	2300      	movs	r3, #0
   1ce48:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1ce4a:	68fb      	ldr	r3, [r7, #12]
   1ce4c:	2b00      	cmp	r3, #0
   1ce4e:	d101      	bne.n	1ce54 <xTimerGenericCommand+0x1c>
   1ce50:	b672      	cpsid	i
   1ce52:	e7fe      	b.n	1ce52 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1ce54:	4b1e      	ldr	r3, [pc, #120]	; (1ced0 <xTimerGenericCommand+0x98>)
   1ce56:	681b      	ldr	r3, [r3, #0]
   1ce58:	2b00      	cmp	r3, #0
   1ce5a:	d033      	beq.n	1cec4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1ce5c:	2310      	movs	r3, #16
   1ce5e:	18fb      	adds	r3, r7, r3
   1ce60:	68ba      	ldr	r2, [r7, #8]
   1ce62:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1ce64:	2310      	movs	r3, #16
   1ce66:	18fb      	adds	r3, r7, r3
   1ce68:	687a      	ldr	r2, [r7, #4]
   1ce6a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1ce6c:	2310      	movs	r3, #16
   1ce6e:	18fb      	adds	r3, r7, r3
   1ce70:	68fa      	ldr	r2, [r7, #12]
   1ce72:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1ce74:	68bb      	ldr	r3, [r7, #8]
   1ce76:	2b05      	cmp	r3, #5
   1ce78:	dc1a      	bgt.n	1ceb0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1ce7a:	4b16      	ldr	r3, [pc, #88]	; (1ced4 <xTimerGenericCommand+0x9c>)
   1ce7c:	4798      	blx	r3
   1ce7e:	0003      	movs	r3, r0
   1ce80:	2b02      	cmp	r3, #2
   1ce82:	d10a      	bne.n	1ce9a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1ce84:	4b12      	ldr	r3, [pc, #72]	; (1ced0 <xTimerGenericCommand+0x98>)
   1ce86:	6818      	ldr	r0, [r3, #0]
   1ce88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ce8a:	2310      	movs	r3, #16
   1ce8c:	18f9      	adds	r1, r7, r3
   1ce8e:	2300      	movs	r3, #0
   1ce90:	4c11      	ldr	r4, [pc, #68]	; (1ced8 <xTimerGenericCommand+0xa0>)
   1ce92:	47a0      	blx	r4
   1ce94:	0003      	movs	r3, r0
   1ce96:	61fb      	str	r3, [r7, #28]
   1ce98:	e014      	b.n	1cec4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1ce9a:	4b0d      	ldr	r3, [pc, #52]	; (1ced0 <xTimerGenericCommand+0x98>)
   1ce9c:	6818      	ldr	r0, [r3, #0]
   1ce9e:	2310      	movs	r3, #16
   1cea0:	18f9      	adds	r1, r7, r3
   1cea2:	2300      	movs	r3, #0
   1cea4:	2200      	movs	r2, #0
   1cea6:	4c0c      	ldr	r4, [pc, #48]	; (1ced8 <xTimerGenericCommand+0xa0>)
   1cea8:	47a0      	blx	r4
   1ceaa:	0003      	movs	r3, r0
   1ceac:	61fb      	str	r3, [r7, #28]
   1ceae:	e009      	b.n	1cec4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1ceb0:	4b07      	ldr	r3, [pc, #28]	; (1ced0 <xTimerGenericCommand+0x98>)
   1ceb2:	6818      	ldr	r0, [r3, #0]
   1ceb4:	683a      	ldr	r2, [r7, #0]
   1ceb6:	2310      	movs	r3, #16
   1ceb8:	18f9      	adds	r1, r7, r3
   1ceba:	2300      	movs	r3, #0
   1cebc:	4c07      	ldr	r4, [pc, #28]	; (1cedc <xTimerGenericCommand+0xa4>)
   1cebe:	47a0      	blx	r4
   1cec0:	0003      	movs	r3, r0
   1cec2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1cec4:	69fb      	ldr	r3, [r7, #28]
}
   1cec6:	0018      	movs	r0, r3
   1cec8:	46bd      	mov	sp, r7
   1ceca:	b009      	add	sp, #36	; 0x24
   1cecc:	bd90      	pop	{r4, r7, pc}
   1cece:	46c0      	nop			; (mov r8, r8)
   1ced0:	2000406c 	.word	0x2000406c
   1ced4:	0001c839 	.word	0x0001c839
   1ced8:	0001a0ad 	.word	0x0001a0ad
   1cedc:	0001a50d 	.word	0x0001a50d

0001cee0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1cee0:	b590      	push	{r4, r7, lr}
   1cee2:	b087      	sub	sp, #28
   1cee4:	af02      	add	r7, sp, #8
   1cee6:	6078      	str	r0, [r7, #4]
   1cee8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ceea:	4b18      	ldr	r3, [pc, #96]	; (1cf4c <prvProcessExpiredTimer+0x6c>)
   1ceec:	681b      	ldr	r3, [r3, #0]
   1ceee:	68db      	ldr	r3, [r3, #12]
   1cef0:	68db      	ldr	r3, [r3, #12]
   1cef2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1cef4:	68fb      	ldr	r3, [r7, #12]
   1cef6:	3304      	adds	r3, #4
   1cef8:	0018      	movs	r0, r3
   1cefa:	4b15      	ldr	r3, [pc, #84]	; (1cf50 <prvProcessExpiredTimer+0x70>)
   1cefc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1cefe:	68fb      	ldr	r3, [r7, #12]
   1cf00:	69db      	ldr	r3, [r3, #28]
   1cf02:	2b01      	cmp	r3, #1
   1cf04:	d119      	bne.n	1cf3a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1cf06:	68fb      	ldr	r3, [r7, #12]
   1cf08:	699a      	ldr	r2, [r3, #24]
   1cf0a:	687b      	ldr	r3, [r7, #4]
   1cf0c:	18d1      	adds	r1, r2, r3
   1cf0e:	687b      	ldr	r3, [r7, #4]
   1cf10:	683a      	ldr	r2, [r7, #0]
   1cf12:	68f8      	ldr	r0, [r7, #12]
   1cf14:	4c0f      	ldr	r4, [pc, #60]	; (1cf54 <prvProcessExpiredTimer+0x74>)
   1cf16:	47a0      	blx	r4
   1cf18:	1e03      	subs	r3, r0, #0
   1cf1a:	d00e      	beq.n	1cf3a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1cf1c:	687a      	ldr	r2, [r7, #4]
   1cf1e:	68f8      	ldr	r0, [r7, #12]
   1cf20:	2300      	movs	r3, #0
   1cf22:	9300      	str	r3, [sp, #0]
   1cf24:	2300      	movs	r3, #0
   1cf26:	2100      	movs	r1, #0
   1cf28:	4c0b      	ldr	r4, [pc, #44]	; (1cf58 <prvProcessExpiredTimer+0x78>)
   1cf2a:	47a0      	blx	r4
   1cf2c:	0003      	movs	r3, r0
   1cf2e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1cf30:	68bb      	ldr	r3, [r7, #8]
   1cf32:	2b00      	cmp	r3, #0
   1cf34:	d101      	bne.n	1cf3a <prvProcessExpiredTimer+0x5a>
   1cf36:	b672      	cpsid	i
   1cf38:	e7fe      	b.n	1cf38 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1cf3a:	68fb      	ldr	r3, [r7, #12]
   1cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cf3e:	68fa      	ldr	r2, [r7, #12]
   1cf40:	0010      	movs	r0, r2
   1cf42:	4798      	blx	r3
}
   1cf44:	46c0      	nop			; (mov r8, r8)
   1cf46:	46bd      	mov	sp, r7
   1cf48:	b005      	add	sp, #20
   1cf4a:	bd90      	pop	{r4, r7, pc}
   1cf4c:	20004064 	.word	0x20004064
   1cf50:	0001998f 	.word	0x0001998f
   1cf54:	0001d0c5 	.word	0x0001d0c5
   1cf58:	0001ce39 	.word	0x0001ce39

0001cf5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1cf5c:	b580      	push	{r7, lr}
   1cf5e:	b084      	sub	sp, #16
   1cf60:	af00      	add	r7, sp, #0
   1cf62:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1cf64:	4b08      	ldr	r3, [pc, #32]	; (1cf88 <prvTimerTask+0x2c>)
   1cf66:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1cf68:	2308      	movs	r3, #8
   1cf6a:	18fb      	adds	r3, r7, r3
   1cf6c:	0018      	movs	r0, r3
   1cf6e:	4b07      	ldr	r3, [pc, #28]	; (1cf8c <prvTimerTask+0x30>)
   1cf70:	4798      	blx	r3
   1cf72:	0003      	movs	r3, r0
   1cf74:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1cf76:	68ba      	ldr	r2, [r7, #8]
   1cf78:	68fb      	ldr	r3, [r7, #12]
   1cf7a:	0011      	movs	r1, r2
   1cf7c:	0018      	movs	r0, r3
   1cf7e:	4b04      	ldr	r3, [pc, #16]	; (1cf90 <prvTimerTask+0x34>)
   1cf80:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1cf82:	4b04      	ldr	r3, [pc, #16]	; (1cf94 <prvTimerTask+0x38>)
   1cf84:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1cf86:	e7ef      	b.n	1cf68 <prvTimerTask+0xc>
   1cf88:	00032175 	.word	0x00032175
   1cf8c:	0001d03d 	.word	0x0001d03d
   1cf90:	0001cf99 	.word	0x0001cf99
   1cf94:	0001d14d 	.word	0x0001d14d

0001cf98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1cf98:	b580      	push	{r7, lr}
   1cf9a:	b084      	sub	sp, #16
   1cf9c:	af00      	add	r7, sp, #0
   1cf9e:	6078      	str	r0, [r7, #4]
   1cfa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1cfa2:	4b1e      	ldr	r3, [pc, #120]	; (1d01c <prvProcessTimerOrBlockTask+0x84>)
   1cfa4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1cfa6:	2308      	movs	r3, #8
   1cfa8:	18fb      	adds	r3, r7, r3
   1cfaa:	0018      	movs	r0, r3
   1cfac:	4b1c      	ldr	r3, [pc, #112]	; (1d020 <prvProcessTimerOrBlockTask+0x88>)
   1cfae:	4798      	blx	r3
   1cfb0:	0003      	movs	r3, r0
   1cfb2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1cfb4:	68bb      	ldr	r3, [r7, #8]
   1cfb6:	2b00      	cmp	r3, #0
   1cfb8:	d129      	bne.n	1d00e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1cfba:	683b      	ldr	r3, [r7, #0]
   1cfbc:	2b00      	cmp	r3, #0
   1cfbe:	d10c      	bne.n	1cfda <prvProcessTimerOrBlockTask+0x42>
   1cfc0:	687a      	ldr	r2, [r7, #4]
   1cfc2:	68fb      	ldr	r3, [r7, #12]
   1cfc4:	429a      	cmp	r2, r3
   1cfc6:	d808      	bhi.n	1cfda <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1cfc8:	4b16      	ldr	r3, [pc, #88]	; (1d024 <prvProcessTimerOrBlockTask+0x8c>)
   1cfca:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1cfcc:	68fa      	ldr	r2, [r7, #12]
   1cfce:	687b      	ldr	r3, [r7, #4]
   1cfd0:	0011      	movs	r1, r2
   1cfd2:	0018      	movs	r0, r3
   1cfd4:	4b14      	ldr	r3, [pc, #80]	; (1d028 <prvProcessTimerOrBlockTask+0x90>)
   1cfd6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1cfd8:	e01b      	b.n	1d012 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1cfda:	683b      	ldr	r3, [r7, #0]
   1cfdc:	2b00      	cmp	r3, #0
   1cfde:	d006      	beq.n	1cfee <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1cfe0:	4b12      	ldr	r3, [pc, #72]	; (1d02c <prvProcessTimerOrBlockTask+0x94>)
   1cfe2:	681b      	ldr	r3, [r3, #0]
   1cfe4:	681b      	ldr	r3, [r3, #0]
   1cfe6:	425a      	negs	r2, r3
   1cfe8:	4153      	adcs	r3, r2
   1cfea:	b2db      	uxtb	r3, r3
   1cfec:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1cfee:	4b10      	ldr	r3, [pc, #64]	; (1d030 <prvProcessTimerOrBlockTask+0x98>)
   1cff0:	6818      	ldr	r0, [r3, #0]
   1cff2:	687a      	ldr	r2, [r7, #4]
   1cff4:	68fb      	ldr	r3, [r7, #12]
   1cff6:	1ad3      	subs	r3, r2, r3
   1cff8:	683a      	ldr	r2, [r7, #0]
   1cffa:	0019      	movs	r1, r3
   1cffc:	4b0d      	ldr	r3, [pc, #52]	; (1d034 <prvProcessTimerOrBlockTask+0x9c>)
   1cffe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d000:	4b08      	ldr	r3, [pc, #32]	; (1d024 <prvProcessTimerOrBlockTask+0x8c>)
   1d002:	4798      	blx	r3
   1d004:	1e03      	subs	r3, r0, #0
   1d006:	d104      	bne.n	1d012 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d008:	4b0b      	ldr	r3, [pc, #44]	; (1d038 <prvProcessTimerOrBlockTask+0xa0>)
   1d00a:	4798      	blx	r3
}
   1d00c:	e001      	b.n	1d012 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d00e:	4b05      	ldr	r3, [pc, #20]	; (1d024 <prvProcessTimerOrBlockTask+0x8c>)
   1d010:	4798      	blx	r3
}
   1d012:	46c0      	nop			; (mov r8, r8)
   1d014:	46bd      	mov	sp, r7
   1d016:	b004      	add	sp, #16
   1d018:	bd80      	pop	{r7, pc}
   1d01a:	46c0      	nop			; (mov r8, r8)
   1d01c:	0001bdd1 	.word	0x0001bdd1
   1d020:	0001d07d 	.word	0x0001d07d
   1d024:	0001bde9 	.word	0x0001bde9
   1d028:	0001cee1 	.word	0x0001cee1
   1d02c:	20004068 	.word	0x20004068
   1d030:	2000406c 	.word	0x2000406c
   1d034:	0001b571 	.word	0x0001b571
   1d038:	00019b01 	.word	0x00019b01

0001d03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d03c:	b580      	push	{r7, lr}
   1d03e:	b084      	sub	sp, #16
   1d040:	af00      	add	r7, sp, #0
   1d042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d044:	4b0c      	ldr	r3, [pc, #48]	; (1d078 <prvGetNextExpireTime+0x3c>)
   1d046:	681b      	ldr	r3, [r3, #0]
   1d048:	681b      	ldr	r3, [r3, #0]
   1d04a:	425a      	negs	r2, r3
   1d04c:	4153      	adcs	r3, r2
   1d04e:	b2db      	uxtb	r3, r3
   1d050:	001a      	movs	r2, r3
   1d052:	687b      	ldr	r3, [r7, #4]
   1d054:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d056:	687b      	ldr	r3, [r7, #4]
   1d058:	681b      	ldr	r3, [r3, #0]
   1d05a:	2b00      	cmp	r3, #0
   1d05c:	d105      	bne.n	1d06a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d05e:	4b06      	ldr	r3, [pc, #24]	; (1d078 <prvGetNextExpireTime+0x3c>)
   1d060:	681b      	ldr	r3, [r3, #0]
   1d062:	68db      	ldr	r3, [r3, #12]
   1d064:	681b      	ldr	r3, [r3, #0]
   1d066:	60fb      	str	r3, [r7, #12]
   1d068:	e001      	b.n	1d06e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d06a:	2300      	movs	r3, #0
   1d06c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d06e:	68fb      	ldr	r3, [r7, #12]
}
   1d070:	0018      	movs	r0, r3
   1d072:	46bd      	mov	sp, r7
   1d074:	b004      	add	sp, #16
   1d076:	bd80      	pop	{r7, pc}
   1d078:	20004064 	.word	0x20004064

0001d07c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d07c:	b580      	push	{r7, lr}
   1d07e:	b084      	sub	sp, #16
   1d080:	af00      	add	r7, sp, #0
   1d082:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d084:	4b0c      	ldr	r3, [pc, #48]	; (1d0b8 <prvSampleTimeNow+0x3c>)
   1d086:	4798      	blx	r3
   1d088:	0003      	movs	r3, r0
   1d08a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d08c:	4b0b      	ldr	r3, [pc, #44]	; (1d0bc <prvSampleTimeNow+0x40>)
   1d08e:	681b      	ldr	r3, [r3, #0]
   1d090:	68fa      	ldr	r2, [r7, #12]
   1d092:	429a      	cmp	r2, r3
   1d094:	d205      	bcs.n	1d0a2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d096:	4b0a      	ldr	r3, [pc, #40]	; (1d0c0 <prvSampleTimeNow+0x44>)
   1d098:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d09a:	687b      	ldr	r3, [r7, #4]
   1d09c:	2201      	movs	r2, #1
   1d09e:	601a      	str	r2, [r3, #0]
   1d0a0:	e002      	b.n	1d0a8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d0a2:	687b      	ldr	r3, [r7, #4]
   1d0a4:	2200      	movs	r2, #0
   1d0a6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d0a8:	4b04      	ldr	r3, [pc, #16]	; (1d0bc <prvSampleTimeNow+0x40>)
   1d0aa:	68fa      	ldr	r2, [r7, #12]
   1d0ac:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d0ae:	68fb      	ldr	r3, [r7, #12]
}
   1d0b0:	0018      	movs	r0, r3
   1d0b2:	46bd      	mov	sp, r7
   1d0b4:	b004      	add	sp, #16
   1d0b6:	bd80      	pop	{r7, pc}
   1d0b8:	0001bf59 	.word	0x0001bf59
   1d0bc:	20004074 	.word	0x20004074
   1d0c0:	0001d265 	.word	0x0001d265

0001d0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d0c4:	b580      	push	{r7, lr}
   1d0c6:	b086      	sub	sp, #24
   1d0c8:	af00      	add	r7, sp, #0
   1d0ca:	60f8      	str	r0, [r7, #12]
   1d0cc:	60b9      	str	r1, [r7, #8]
   1d0ce:	607a      	str	r2, [r7, #4]
   1d0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d0d2:	2300      	movs	r3, #0
   1d0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d0d6:	68fb      	ldr	r3, [r7, #12]
   1d0d8:	68ba      	ldr	r2, [r7, #8]
   1d0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d0dc:	68fb      	ldr	r3, [r7, #12]
   1d0de:	68fa      	ldr	r2, [r7, #12]
   1d0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d0e2:	68ba      	ldr	r2, [r7, #8]
   1d0e4:	687b      	ldr	r3, [r7, #4]
   1d0e6:	429a      	cmp	r2, r3
   1d0e8:	d812      	bhi.n	1d110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d0ea:	687a      	ldr	r2, [r7, #4]
   1d0ec:	683b      	ldr	r3, [r7, #0]
   1d0ee:	1ad2      	subs	r2, r2, r3
   1d0f0:	68fb      	ldr	r3, [r7, #12]
   1d0f2:	699b      	ldr	r3, [r3, #24]
   1d0f4:	429a      	cmp	r2, r3
   1d0f6:	d302      	bcc.n	1d0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d0f8:	2301      	movs	r3, #1
   1d0fa:	617b      	str	r3, [r7, #20]
   1d0fc:	e01b      	b.n	1d136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d0fe:	4b10      	ldr	r3, [pc, #64]	; (1d140 <prvInsertTimerInActiveList+0x7c>)
   1d100:	681a      	ldr	r2, [r3, #0]
   1d102:	68fb      	ldr	r3, [r7, #12]
   1d104:	3304      	adds	r3, #4
   1d106:	0019      	movs	r1, r3
   1d108:	0010      	movs	r0, r2
   1d10a:	4b0e      	ldr	r3, [pc, #56]	; (1d144 <prvInsertTimerInActiveList+0x80>)
   1d10c:	4798      	blx	r3
   1d10e:	e012      	b.n	1d136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d110:	687a      	ldr	r2, [r7, #4]
   1d112:	683b      	ldr	r3, [r7, #0]
   1d114:	429a      	cmp	r2, r3
   1d116:	d206      	bcs.n	1d126 <prvInsertTimerInActiveList+0x62>
   1d118:	68ba      	ldr	r2, [r7, #8]
   1d11a:	683b      	ldr	r3, [r7, #0]
   1d11c:	429a      	cmp	r2, r3
   1d11e:	d302      	bcc.n	1d126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d120:	2301      	movs	r3, #1
   1d122:	617b      	str	r3, [r7, #20]
   1d124:	e007      	b.n	1d136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d126:	4b08      	ldr	r3, [pc, #32]	; (1d148 <prvInsertTimerInActiveList+0x84>)
   1d128:	681a      	ldr	r2, [r3, #0]
   1d12a:	68fb      	ldr	r3, [r7, #12]
   1d12c:	3304      	adds	r3, #4
   1d12e:	0019      	movs	r1, r3
   1d130:	0010      	movs	r0, r2
   1d132:	4b04      	ldr	r3, [pc, #16]	; (1d144 <prvInsertTimerInActiveList+0x80>)
   1d134:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d136:	697b      	ldr	r3, [r7, #20]
}
   1d138:	0018      	movs	r0, r3
   1d13a:	46bd      	mov	sp, r7
   1d13c:	b006      	add	sp, #24
   1d13e:	bd80      	pop	{r7, pc}
   1d140:	20004068 	.word	0x20004068
   1d144:	00019923 	.word	0x00019923
   1d148:	20004064 	.word	0x20004064

0001d14c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d14c:	b590      	push	{r4, r7, lr}
   1d14e:	b08b      	sub	sp, #44	; 0x2c
   1d150:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d152:	e068      	b.n	1d226 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d154:	2308      	movs	r3, #8
   1d156:	18fb      	adds	r3, r7, r3
   1d158:	681b      	ldr	r3, [r3, #0]
   1d15a:	2b00      	cmp	r3, #0
   1d15c:	db63      	blt.n	1d226 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d15e:	2308      	movs	r3, #8
   1d160:	18fb      	adds	r3, r7, r3
   1d162:	689b      	ldr	r3, [r3, #8]
   1d164:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d166:	69fb      	ldr	r3, [r7, #28]
   1d168:	695b      	ldr	r3, [r3, #20]
   1d16a:	2b00      	cmp	r3, #0
   1d16c:	d004      	beq.n	1d178 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d16e:	69fb      	ldr	r3, [r7, #28]
   1d170:	3304      	adds	r3, #4
   1d172:	0018      	movs	r0, r3
   1d174:	4b33      	ldr	r3, [pc, #204]	; (1d244 <prvProcessReceivedCommands+0xf8>)
   1d176:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d178:	1d3b      	adds	r3, r7, #4
   1d17a:	0018      	movs	r0, r3
   1d17c:	4b32      	ldr	r3, [pc, #200]	; (1d248 <prvProcessReceivedCommands+0xfc>)
   1d17e:	4798      	blx	r3
   1d180:	0003      	movs	r3, r0
   1d182:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d184:	2308      	movs	r3, #8
   1d186:	18fb      	adds	r3, r7, r3
   1d188:	681b      	ldr	r3, [r3, #0]
   1d18a:	2b09      	cmp	r3, #9
   1d18c:	d84a      	bhi.n	1d224 <prvProcessReceivedCommands+0xd8>
   1d18e:	009a      	lsls	r2, r3, #2
   1d190:	4b2e      	ldr	r3, [pc, #184]	; (1d24c <prvProcessReceivedCommands+0x100>)
   1d192:	18d3      	adds	r3, r2, r3
   1d194:	681b      	ldr	r3, [r3, #0]
   1d196:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d198:	2308      	movs	r3, #8
   1d19a:	18fb      	adds	r3, r7, r3
   1d19c:	685a      	ldr	r2, [r3, #4]
   1d19e:	69fb      	ldr	r3, [r7, #28]
   1d1a0:	699b      	ldr	r3, [r3, #24]
   1d1a2:	18d1      	adds	r1, r2, r3
   1d1a4:	2308      	movs	r3, #8
   1d1a6:	18fb      	adds	r3, r7, r3
   1d1a8:	685b      	ldr	r3, [r3, #4]
   1d1aa:	69ba      	ldr	r2, [r7, #24]
   1d1ac:	69f8      	ldr	r0, [r7, #28]
   1d1ae:	4c28      	ldr	r4, [pc, #160]	; (1d250 <prvProcessReceivedCommands+0x104>)
   1d1b0:	47a0      	blx	r4
   1d1b2:	1e03      	subs	r3, r0, #0
   1d1b4:	d037      	beq.n	1d226 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d1b6:	69fb      	ldr	r3, [r7, #28]
   1d1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d1ba:	69fa      	ldr	r2, [r7, #28]
   1d1bc:	0010      	movs	r0, r2
   1d1be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d1c0:	69fb      	ldr	r3, [r7, #28]
   1d1c2:	69db      	ldr	r3, [r3, #28]
   1d1c4:	2b01      	cmp	r3, #1
   1d1c6:	d12e      	bne.n	1d226 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d1c8:	2308      	movs	r3, #8
   1d1ca:	18fb      	adds	r3, r7, r3
   1d1cc:	685a      	ldr	r2, [r3, #4]
   1d1ce:	69fb      	ldr	r3, [r7, #28]
   1d1d0:	699b      	ldr	r3, [r3, #24]
   1d1d2:	18d2      	adds	r2, r2, r3
   1d1d4:	69f8      	ldr	r0, [r7, #28]
   1d1d6:	2300      	movs	r3, #0
   1d1d8:	9300      	str	r3, [sp, #0]
   1d1da:	2300      	movs	r3, #0
   1d1dc:	2100      	movs	r1, #0
   1d1de:	4c1d      	ldr	r4, [pc, #116]	; (1d254 <prvProcessReceivedCommands+0x108>)
   1d1e0:	47a0      	blx	r4
   1d1e2:	0003      	movs	r3, r0
   1d1e4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d1e6:	697b      	ldr	r3, [r7, #20]
   1d1e8:	2b00      	cmp	r3, #0
   1d1ea:	d11c      	bne.n	1d226 <prvProcessReceivedCommands+0xda>
   1d1ec:	b672      	cpsid	i
   1d1ee:	e7fe      	b.n	1d1ee <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d1f0:	2308      	movs	r3, #8
   1d1f2:	18fb      	adds	r3, r7, r3
   1d1f4:	685a      	ldr	r2, [r3, #4]
   1d1f6:	69fb      	ldr	r3, [r7, #28]
   1d1f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d1fa:	69fb      	ldr	r3, [r7, #28]
   1d1fc:	699b      	ldr	r3, [r3, #24]
   1d1fe:	2b00      	cmp	r3, #0
   1d200:	d101      	bne.n	1d206 <prvProcessReceivedCommands+0xba>
   1d202:	b672      	cpsid	i
   1d204:	e7fe      	b.n	1d204 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d206:	69fb      	ldr	r3, [r7, #28]
   1d208:	699a      	ldr	r2, [r3, #24]
   1d20a:	69bb      	ldr	r3, [r7, #24]
   1d20c:	18d1      	adds	r1, r2, r3
   1d20e:	69bb      	ldr	r3, [r7, #24]
   1d210:	69ba      	ldr	r2, [r7, #24]
   1d212:	69f8      	ldr	r0, [r7, #28]
   1d214:	4c0e      	ldr	r4, [pc, #56]	; (1d250 <prvProcessReceivedCommands+0x104>)
   1d216:	47a0      	blx	r4
					break;
   1d218:	e005      	b.n	1d226 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d21a:	69fb      	ldr	r3, [r7, #28]
   1d21c:	0018      	movs	r0, r3
   1d21e:	4b0e      	ldr	r3, [pc, #56]	; (1d258 <prvProcessReceivedCommands+0x10c>)
   1d220:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d222:	e000      	b.n	1d226 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d224:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d226:	4b0d      	ldr	r3, [pc, #52]	; (1d25c <prvProcessReceivedCommands+0x110>)
   1d228:	681b      	ldr	r3, [r3, #0]
   1d22a:	2208      	movs	r2, #8
   1d22c:	18b9      	adds	r1, r7, r2
   1d22e:	2200      	movs	r2, #0
   1d230:	0018      	movs	r0, r3
   1d232:	4b0b      	ldr	r3, [pc, #44]	; (1d260 <prvProcessReceivedCommands+0x114>)
   1d234:	4798      	blx	r3
   1d236:	1e03      	subs	r3, r0, #0
   1d238:	d18c      	bne.n	1d154 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d23a:	46c0      	nop			; (mov r8, r8)
   1d23c:	46bd      	mov	sp, r7
   1d23e:	b009      	add	sp, #36	; 0x24
   1d240:	bd90      	pop	{r4, r7, pc}
   1d242:	46c0      	nop			; (mov r8, r8)
   1d244:	0001998f 	.word	0x0001998f
   1d248:	0001d07d 	.word	0x0001d07d
   1d24c:	000376e4 	.word	0x000376e4
   1d250:	0001d0c5 	.word	0x0001d0c5
   1d254:	0001ce39 	.word	0x0001ce39
   1d258:	00019d15 	.word	0x00019d15
   1d25c:	2000406c 	.word	0x2000406c
   1d260:	0001a965 	.word	0x0001a965

0001d264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d264:	b590      	push	{r4, r7, lr}
   1d266:	b089      	sub	sp, #36	; 0x24
   1d268:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d26a:	e03e      	b.n	1d2ea <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d26c:	4b28      	ldr	r3, [pc, #160]	; (1d310 <prvSwitchTimerLists+0xac>)
   1d26e:	681b      	ldr	r3, [r3, #0]
   1d270:	68db      	ldr	r3, [r3, #12]
   1d272:	681b      	ldr	r3, [r3, #0]
   1d274:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d276:	4b26      	ldr	r3, [pc, #152]	; (1d310 <prvSwitchTimerLists+0xac>)
   1d278:	681b      	ldr	r3, [r3, #0]
   1d27a:	68db      	ldr	r3, [r3, #12]
   1d27c:	68db      	ldr	r3, [r3, #12]
   1d27e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d280:	693b      	ldr	r3, [r7, #16]
   1d282:	3304      	adds	r3, #4
   1d284:	0018      	movs	r0, r3
   1d286:	4b23      	ldr	r3, [pc, #140]	; (1d314 <prvSwitchTimerLists+0xb0>)
   1d288:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d28a:	693b      	ldr	r3, [r7, #16]
   1d28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d28e:	693a      	ldr	r2, [r7, #16]
   1d290:	0010      	movs	r0, r2
   1d292:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d294:	693b      	ldr	r3, [r7, #16]
   1d296:	69db      	ldr	r3, [r3, #28]
   1d298:	2b01      	cmp	r3, #1
   1d29a:	d126      	bne.n	1d2ea <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d29c:	693b      	ldr	r3, [r7, #16]
   1d29e:	699a      	ldr	r2, [r3, #24]
   1d2a0:	697b      	ldr	r3, [r7, #20]
   1d2a2:	18d3      	adds	r3, r2, r3
   1d2a4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d2a6:	68fa      	ldr	r2, [r7, #12]
   1d2a8:	697b      	ldr	r3, [r7, #20]
   1d2aa:	429a      	cmp	r2, r3
   1d2ac:	d90e      	bls.n	1d2cc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d2ae:	693b      	ldr	r3, [r7, #16]
   1d2b0:	68fa      	ldr	r2, [r7, #12]
   1d2b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d2b4:	693b      	ldr	r3, [r7, #16]
   1d2b6:	693a      	ldr	r2, [r7, #16]
   1d2b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d2ba:	4b15      	ldr	r3, [pc, #84]	; (1d310 <prvSwitchTimerLists+0xac>)
   1d2bc:	681a      	ldr	r2, [r3, #0]
   1d2be:	693b      	ldr	r3, [r7, #16]
   1d2c0:	3304      	adds	r3, #4
   1d2c2:	0019      	movs	r1, r3
   1d2c4:	0010      	movs	r0, r2
   1d2c6:	4b14      	ldr	r3, [pc, #80]	; (1d318 <prvSwitchTimerLists+0xb4>)
   1d2c8:	4798      	blx	r3
   1d2ca:	e00e      	b.n	1d2ea <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d2cc:	697a      	ldr	r2, [r7, #20]
   1d2ce:	6938      	ldr	r0, [r7, #16]
   1d2d0:	2300      	movs	r3, #0
   1d2d2:	9300      	str	r3, [sp, #0]
   1d2d4:	2300      	movs	r3, #0
   1d2d6:	2100      	movs	r1, #0
   1d2d8:	4c10      	ldr	r4, [pc, #64]	; (1d31c <prvSwitchTimerLists+0xb8>)
   1d2da:	47a0      	blx	r4
   1d2dc:	0003      	movs	r3, r0
   1d2de:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d2e0:	68bb      	ldr	r3, [r7, #8]
   1d2e2:	2b00      	cmp	r3, #0
   1d2e4:	d101      	bne.n	1d2ea <prvSwitchTimerLists+0x86>
   1d2e6:	b672      	cpsid	i
   1d2e8:	e7fe      	b.n	1d2e8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d2ea:	4b09      	ldr	r3, [pc, #36]	; (1d310 <prvSwitchTimerLists+0xac>)
   1d2ec:	681b      	ldr	r3, [r3, #0]
   1d2ee:	681b      	ldr	r3, [r3, #0]
   1d2f0:	2b00      	cmp	r3, #0
   1d2f2:	d1bb      	bne.n	1d26c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d2f4:	4b06      	ldr	r3, [pc, #24]	; (1d310 <prvSwitchTimerLists+0xac>)
   1d2f6:	681b      	ldr	r3, [r3, #0]
   1d2f8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d2fa:	4b09      	ldr	r3, [pc, #36]	; (1d320 <prvSwitchTimerLists+0xbc>)
   1d2fc:	681a      	ldr	r2, [r3, #0]
   1d2fe:	4b04      	ldr	r3, [pc, #16]	; (1d310 <prvSwitchTimerLists+0xac>)
   1d300:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d302:	4b07      	ldr	r3, [pc, #28]	; (1d320 <prvSwitchTimerLists+0xbc>)
   1d304:	687a      	ldr	r2, [r7, #4]
   1d306:	601a      	str	r2, [r3, #0]
}
   1d308:	46c0      	nop			; (mov r8, r8)
   1d30a:	46bd      	mov	sp, r7
   1d30c:	b007      	add	sp, #28
   1d30e:	bd90      	pop	{r4, r7, pc}
   1d310:	20004064 	.word	0x20004064
   1d314:	0001998f 	.word	0x0001998f
   1d318:	00019923 	.word	0x00019923
   1d31c:	0001ce39 	.word	0x0001ce39
   1d320:	20004068 	.word	0x20004068

0001d324 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d324:	b580      	push	{r7, lr}
   1d326:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d328:	4b10      	ldr	r3, [pc, #64]	; (1d36c <prvCheckForValidListAndQueue+0x48>)
   1d32a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d32c:	4b10      	ldr	r3, [pc, #64]	; (1d370 <prvCheckForValidListAndQueue+0x4c>)
   1d32e:	681b      	ldr	r3, [r3, #0]
   1d330:	2b00      	cmp	r3, #0
   1d332:	d115      	bne.n	1d360 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d334:	4b0f      	ldr	r3, [pc, #60]	; (1d374 <prvCheckForValidListAndQueue+0x50>)
   1d336:	0018      	movs	r0, r3
   1d338:	4b0f      	ldr	r3, [pc, #60]	; (1d378 <prvCheckForValidListAndQueue+0x54>)
   1d33a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d33c:	4b0f      	ldr	r3, [pc, #60]	; (1d37c <prvCheckForValidListAndQueue+0x58>)
   1d33e:	0018      	movs	r0, r3
   1d340:	4b0d      	ldr	r3, [pc, #52]	; (1d378 <prvCheckForValidListAndQueue+0x54>)
   1d342:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d344:	4b0e      	ldr	r3, [pc, #56]	; (1d380 <prvCheckForValidListAndQueue+0x5c>)
   1d346:	4a0b      	ldr	r2, [pc, #44]	; (1d374 <prvCheckForValidListAndQueue+0x50>)
   1d348:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d34a:	4b0e      	ldr	r3, [pc, #56]	; (1d384 <prvCheckForValidListAndQueue+0x60>)
   1d34c:	4a0b      	ldr	r2, [pc, #44]	; (1d37c <prvCheckForValidListAndQueue+0x58>)
   1d34e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d350:	2200      	movs	r2, #0
   1d352:	210c      	movs	r1, #12
   1d354:	2005      	movs	r0, #5
   1d356:	4b0c      	ldr	r3, [pc, #48]	; (1d388 <prvCheckForValidListAndQueue+0x64>)
   1d358:	4798      	blx	r3
   1d35a:	0002      	movs	r2, r0
   1d35c:	4b04      	ldr	r3, [pc, #16]	; (1d370 <prvCheckForValidListAndQueue+0x4c>)
   1d35e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d360:	4b0a      	ldr	r3, [pc, #40]	; (1d38c <prvCheckForValidListAndQueue+0x68>)
   1d362:	4798      	blx	r3
}
   1d364:	46c0      	nop			; (mov r8, r8)
   1d366:	46bd      	mov	sp, r7
   1d368:	bd80      	pop	{r7, pc}
   1d36a:	46c0      	nop			; (mov r8, r8)
   1d36c:	00019b19 	.word	0x00019b19
   1d370:	2000406c 	.word	0x2000406c
   1d374:	2000403c 	.word	0x2000403c
   1d378:	0001988d 	.word	0x0001988d
   1d37c:	20004050 	.word	0x20004050
   1d380:	20004064 	.word	0x20004064
   1d384:	20004068 	.word	0x20004068
   1d388:	00019e05 	.word	0x00019e05
   1d38c:	00019b3d 	.word	0x00019b3d

0001d390 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1d390:	b580      	push	{r7, lr}
   1d392:	b082      	sub	sp, #8
   1d394:	af00      	add	r7, sp, #0
   1d396:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1d398:	687b      	ldr	r3, [r7, #4]
   1d39a:	7c1b      	ldrb	r3, [r3, #16]
   1d39c:	2b00      	cmp	r3, #0
   1d39e:	d00b      	beq.n	1d3b8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d3a0:	687b      	ldr	r3, [r7, #4]
   1d3a2:	689b      	ldr	r3, [r3, #8]
   1d3a4:	1c5a      	adds	r2, r3, #1
   1d3a6:	687b      	ldr	r3, [r7, #4]
   1d3a8:	68d9      	ldr	r1, [r3, #12]
   1d3aa:	4b10      	ldr	r3, [pc, #64]	; (1d3ec <advance_pointer+0x5c>)
   1d3ac:	0010      	movs	r0, r2
   1d3ae:	4798      	blx	r3
   1d3b0:	000b      	movs	r3, r1
   1d3b2:	001a      	movs	r2, r3
   1d3b4:	687b      	ldr	r3, [r7, #4]
   1d3b6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1d3b8:	687b      	ldr	r3, [r7, #4]
   1d3ba:	685b      	ldr	r3, [r3, #4]
   1d3bc:	1c5a      	adds	r2, r3, #1
   1d3be:	687b      	ldr	r3, [r7, #4]
   1d3c0:	68d9      	ldr	r1, [r3, #12]
   1d3c2:	4b0a      	ldr	r3, [pc, #40]	; (1d3ec <advance_pointer+0x5c>)
   1d3c4:	0010      	movs	r0, r2
   1d3c6:	4798      	blx	r3
   1d3c8:	000b      	movs	r3, r1
   1d3ca:	001a      	movs	r2, r3
   1d3cc:	687b      	ldr	r3, [r7, #4]
   1d3ce:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1d3d0:	687b      	ldr	r3, [r7, #4]
   1d3d2:	685a      	ldr	r2, [r3, #4]
   1d3d4:	687b      	ldr	r3, [r7, #4]
   1d3d6:	689b      	ldr	r3, [r3, #8]
   1d3d8:	1ad3      	subs	r3, r2, r3
   1d3da:	425a      	negs	r2, r3
   1d3dc:	4153      	adcs	r3, r2
   1d3de:	b2da      	uxtb	r2, r3
   1d3e0:	687b      	ldr	r3, [r7, #4]
   1d3e2:	741a      	strb	r2, [r3, #16]
 }
   1d3e4:	46c0      	nop			; (mov r8, r8)
   1d3e6:	46bd      	mov	sp, r7
   1d3e8:	b002      	add	sp, #8
   1d3ea:	bd80      	pop	{r7, pc}
   1d3ec:	00032495 	.word	0x00032495

0001d3f0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1d3f0:	b580      	push	{r7, lr}
   1d3f2:	b082      	sub	sp, #8
   1d3f4:	af00      	add	r7, sp, #0
   1d3f6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1d3f8:	687b      	ldr	r3, [r7, #4]
   1d3fa:	2200      	movs	r2, #0
   1d3fc:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d3fe:	687b      	ldr	r3, [r7, #4]
   1d400:	689b      	ldr	r3, [r3, #8]
   1d402:	1c5a      	adds	r2, r3, #1
   1d404:	687b      	ldr	r3, [r7, #4]
   1d406:	68d9      	ldr	r1, [r3, #12]
   1d408:	4b05      	ldr	r3, [pc, #20]	; (1d420 <retreat_pointer+0x30>)
   1d40a:	0010      	movs	r0, r2
   1d40c:	4798      	blx	r3
   1d40e:	000b      	movs	r3, r1
   1d410:	001a      	movs	r2, r3
   1d412:	687b      	ldr	r3, [r7, #4]
   1d414:	609a      	str	r2, [r3, #8]
 }
   1d416:	46c0      	nop			; (mov r8, r8)
   1d418:	46bd      	mov	sp, r7
   1d41a:	b002      	add	sp, #8
   1d41c:	bd80      	pop	{r7, pc}
   1d41e:	46c0      	nop			; (mov r8, r8)
   1d420:	00032495 	.word	0x00032495

0001d424 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1d424:	b580      	push	{r7, lr}
   1d426:	b084      	sub	sp, #16
   1d428:	af00      	add	r7, sp, #0
   1d42a:	6078      	str	r0, [r7, #4]
   1d42c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1d42e:	2014      	movs	r0, #20
   1d430:	4b09      	ldr	r3, [pc, #36]	; (1d458 <circular_buf_init+0x34>)
   1d432:	4798      	blx	r3
   1d434:	0003      	movs	r3, r0
   1d436:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1d438:	68fb      	ldr	r3, [r7, #12]
   1d43a:	687a      	ldr	r2, [r7, #4]
   1d43c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1d43e:	68fb      	ldr	r3, [r7, #12]
   1d440:	683a      	ldr	r2, [r7, #0]
   1d442:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1d444:	68fb      	ldr	r3, [r7, #12]
   1d446:	0018      	movs	r0, r3
   1d448:	4b04      	ldr	r3, [pc, #16]	; (1d45c <circular_buf_init+0x38>)
   1d44a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1d44c:	68fb      	ldr	r3, [r7, #12]
 }
   1d44e:	0018      	movs	r0, r3
   1d450:	46bd      	mov	sp, r7
   1d452:	b004      	add	sp, #16
   1d454:	bd80      	pop	{r7, pc}
   1d456:	46c0      	nop			; (mov r8, r8)
   1d458:	00033fe5 	.word	0x00033fe5
   1d45c:	0001d461 	.word	0x0001d461

0001d460 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1d460:	b580      	push	{r7, lr}
   1d462:	b082      	sub	sp, #8
   1d464:	af00      	add	r7, sp, #0
   1d466:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1d468:	687b      	ldr	r3, [r7, #4]
   1d46a:	2200      	movs	r2, #0
   1d46c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1d46e:	687b      	ldr	r3, [r7, #4]
   1d470:	2200      	movs	r2, #0
   1d472:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1d474:	687b      	ldr	r3, [r7, #4]
   1d476:	2200      	movs	r2, #0
   1d478:	741a      	strb	r2, [r3, #16]
 }
   1d47a:	46c0      	nop			; (mov r8, r8)
   1d47c:	46bd      	mov	sp, r7
   1d47e:	b002      	add	sp, #8
   1d480:	bd80      	pop	{r7, pc}
	...

0001d484 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1d484:	b580      	push	{r7, lr}
   1d486:	b082      	sub	sp, #8
   1d488:	af00      	add	r7, sp, #0
   1d48a:	6078      	str	r0, [r7, #4]
   1d48c:	000a      	movs	r2, r1
   1d48e:	1cfb      	adds	r3, r7, #3
   1d490:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1d492:	687b      	ldr	r3, [r7, #4]
   1d494:	681a      	ldr	r2, [r3, #0]
   1d496:	687b      	ldr	r3, [r7, #4]
   1d498:	685b      	ldr	r3, [r3, #4]
   1d49a:	18d3      	adds	r3, r2, r3
   1d49c:	1cfa      	adds	r2, r7, #3
   1d49e:	7812      	ldrb	r2, [r2, #0]
   1d4a0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1d4a2:	687b      	ldr	r3, [r7, #4]
   1d4a4:	0018      	movs	r0, r3
   1d4a6:	4b03      	ldr	r3, [pc, #12]	; (1d4b4 <circular_buf_put+0x30>)
   1d4a8:	4798      	blx	r3
 }
   1d4aa:	46c0      	nop			; (mov r8, r8)
   1d4ac:	46bd      	mov	sp, r7
   1d4ae:	b002      	add	sp, #8
   1d4b0:	bd80      	pop	{r7, pc}
   1d4b2:	46c0      	nop			; (mov r8, r8)
   1d4b4:	0001d391 	.word	0x0001d391

0001d4b8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1d4b8:	b580      	push	{r7, lr}
   1d4ba:	b084      	sub	sp, #16
   1d4bc:	af00      	add	r7, sp, #0
   1d4be:	6078      	str	r0, [r7, #4]
   1d4c0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1d4c2:	2301      	movs	r3, #1
   1d4c4:	425b      	negs	r3, r3
   1d4c6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1d4c8:	687b      	ldr	r3, [r7, #4]
   1d4ca:	0018      	movs	r0, r3
   1d4cc:	4b0d      	ldr	r3, [pc, #52]	; (1d504 <circular_buf_get+0x4c>)
   1d4ce:	4798      	blx	r3
   1d4d0:	0003      	movs	r3, r0
   1d4d2:	001a      	movs	r2, r3
   1d4d4:	2301      	movs	r3, #1
   1d4d6:	4053      	eors	r3, r2
   1d4d8:	b2db      	uxtb	r3, r3
   1d4da:	2b00      	cmp	r3, #0
   1d4dc:	d00d      	beq.n	1d4fa <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1d4de:	687b      	ldr	r3, [r7, #4]
   1d4e0:	681a      	ldr	r2, [r3, #0]
   1d4e2:	687b      	ldr	r3, [r7, #4]
   1d4e4:	689b      	ldr	r3, [r3, #8]
   1d4e6:	18d3      	adds	r3, r2, r3
   1d4e8:	781a      	ldrb	r2, [r3, #0]
   1d4ea:	683b      	ldr	r3, [r7, #0]
   1d4ec:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1d4ee:	687b      	ldr	r3, [r7, #4]
   1d4f0:	0018      	movs	r0, r3
   1d4f2:	4b05      	ldr	r3, [pc, #20]	; (1d508 <circular_buf_get+0x50>)
   1d4f4:	4798      	blx	r3

		 r = 0;
   1d4f6:	2300      	movs	r3, #0
   1d4f8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1d4fa:	68fb      	ldr	r3, [r7, #12]
 }
   1d4fc:	0018      	movs	r0, r3
   1d4fe:	46bd      	mov	sp, r7
   1d500:	b004      	add	sp, #16
   1d502:	bd80      	pop	{r7, pc}
   1d504:	0001d50d 	.word	0x0001d50d
   1d508:	0001d3f1 	.word	0x0001d3f1

0001d50c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1d50c:	b580      	push	{r7, lr}
   1d50e:	b082      	sub	sp, #8
   1d510:	af00      	add	r7, sp, #0
   1d512:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1d514:	687b      	ldr	r3, [r7, #4]
   1d516:	7c1b      	ldrb	r3, [r3, #16]
   1d518:	2201      	movs	r2, #1
   1d51a:	4053      	eors	r3, r2
   1d51c:	b2db      	uxtb	r3, r3
   1d51e:	2b00      	cmp	r3, #0
   1d520:	d007      	beq.n	1d532 <circular_buf_empty+0x26>
   1d522:	687b      	ldr	r3, [r7, #4]
   1d524:	685a      	ldr	r2, [r3, #4]
   1d526:	687b      	ldr	r3, [r7, #4]
   1d528:	689b      	ldr	r3, [r3, #8]
   1d52a:	429a      	cmp	r2, r3
   1d52c:	d101      	bne.n	1d532 <circular_buf_empty+0x26>
   1d52e:	2301      	movs	r3, #1
   1d530:	e000      	b.n	1d534 <circular_buf_empty+0x28>
   1d532:	2300      	movs	r3, #0
   1d534:	1c1a      	adds	r2, r3, #0
   1d536:	2301      	movs	r3, #1
   1d538:	4013      	ands	r3, r2
   1d53a:	b2db      	uxtb	r3, r3
 }
   1d53c:	0018      	movs	r0, r3
   1d53e:	46bd      	mov	sp, r7
   1d540:	b002      	add	sp, #8
   1d542:	bd80      	pop	{r7, pc}

0001d544 <system_interrupt_enable>:
{
   1d544:	b580      	push	{r7, lr}
   1d546:	b082      	sub	sp, #8
   1d548:	af00      	add	r7, sp, #0
   1d54a:	0002      	movs	r2, r0
   1d54c:	1dfb      	adds	r3, r7, #7
   1d54e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d550:	4b06      	ldr	r3, [pc, #24]	; (1d56c <system_interrupt_enable+0x28>)
   1d552:	1dfa      	adds	r2, r7, #7
   1d554:	7812      	ldrb	r2, [r2, #0]
   1d556:	0011      	movs	r1, r2
   1d558:	221f      	movs	r2, #31
   1d55a:	400a      	ands	r2, r1
   1d55c:	2101      	movs	r1, #1
   1d55e:	4091      	lsls	r1, r2
   1d560:	000a      	movs	r2, r1
   1d562:	601a      	str	r2, [r3, #0]
}
   1d564:	46c0      	nop			; (mov r8, r8)
   1d566:	46bd      	mov	sp, r7
   1d568:	b002      	add	sp, #8
   1d56a:	bd80      	pop	{r7, pc}
   1d56c:	e000e100 	.word	0xe000e100

0001d570 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1d570:	b580      	push	{r7, lr}
   1d572:	b084      	sub	sp, #16
   1d574:	af00      	add	r7, sp, #0
   1d576:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1d578:	687b      	ldr	r3, [r7, #4]
   1d57a:	681b      	ldr	r3, [r3, #0]
   1d57c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1d57e:	68fb      	ldr	r3, [r7, #12]
   1d580:	69db      	ldr	r3, [r3, #28]
   1d582:	1e5a      	subs	r2, r3, #1
   1d584:	4193      	sbcs	r3, r2
   1d586:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1d588:	0018      	movs	r0, r3
   1d58a:	46bd      	mov	sp, r7
   1d58c:	b004      	add	sp, #16
   1d58e:	bd80      	pop	{r7, pc}

0001d590 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1d590:	b580      	push	{r7, lr}
   1d592:	b082      	sub	sp, #8
   1d594:	af00      	add	r7, sp, #0
   1d596:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1d598:	46c0      	nop			; (mov r8, r8)
   1d59a:	687b      	ldr	r3, [r7, #4]
   1d59c:	0018      	movs	r0, r3
   1d59e:	4b04      	ldr	r3, [pc, #16]	; (1d5b0 <_usart_wait_for_sync+0x20>)
   1d5a0:	4798      	blx	r3
   1d5a2:	1e03      	subs	r3, r0, #0
   1d5a4:	d1f9      	bne.n	1d59a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1d5a6:	46c0      	nop			; (mov r8, r8)
   1d5a8:	46bd      	mov	sp, r7
   1d5aa:	b002      	add	sp, #8
   1d5ac:	bd80      	pop	{r7, pc}
   1d5ae:	46c0      	nop			; (mov r8, r8)
   1d5b0:	0001d571 	.word	0x0001d571

0001d5b4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1d5b4:	b580      	push	{r7, lr}
   1d5b6:	b082      	sub	sp, #8
   1d5b8:	af00      	add	r7, sp, #0
   1d5ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1d5bc:	687b      	ldr	r3, [r7, #4]
   1d5be:	2280      	movs	r2, #128	; 0x80
   1d5c0:	05d2      	lsls	r2, r2, #23
   1d5c2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1d5c4:	687b      	ldr	r3, [r7, #4]
   1d5c6:	2200      	movs	r2, #0
   1d5c8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1d5ca:	687b      	ldr	r3, [r7, #4]
   1d5cc:	22ff      	movs	r2, #255	; 0xff
   1d5ce:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1d5d0:	687b      	ldr	r3, [r7, #4]
   1d5d2:	2200      	movs	r2, #0
   1d5d4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1d5d6:	687b      	ldr	r3, [r7, #4]
   1d5d8:	2200      	movs	r2, #0
   1d5da:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1d5dc:	687b      	ldr	r3, [r7, #4]
   1d5de:	2296      	movs	r2, #150	; 0x96
   1d5e0:	0192      	lsls	r2, r2, #6
   1d5e2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1d5e4:	687b      	ldr	r3, [r7, #4]
   1d5e6:	2224      	movs	r2, #36	; 0x24
   1d5e8:	2101      	movs	r1, #1
   1d5ea:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1d5ec:	687b      	ldr	r3, [r7, #4]
   1d5ee:	2225      	movs	r2, #37	; 0x25
   1d5f0:	2101      	movs	r1, #1
   1d5f2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1d5f4:	687b      	ldr	r3, [r7, #4]
   1d5f6:	2226      	movs	r2, #38	; 0x26
   1d5f8:	2100      	movs	r1, #0
   1d5fa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1d5fc:	687b      	ldr	r3, [r7, #4]
   1d5fe:	2227      	movs	r2, #39	; 0x27
   1d600:	2100      	movs	r1, #0
   1d602:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1d604:	687b      	ldr	r3, [r7, #4]
   1d606:	2200      	movs	r2, #0
   1d608:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1d60a:	687b      	ldr	r3, [r7, #4]
   1d60c:	2288      	movs	r2, #136	; 0x88
   1d60e:	0352      	lsls	r2, r2, #13
   1d610:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1d612:	687b      	ldr	r3, [r7, #4]
   1d614:	222c      	movs	r2, #44	; 0x2c
   1d616:	2100      	movs	r1, #0
   1d618:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1d61a:	687b      	ldr	r3, [r7, #4]
   1d61c:	222d      	movs	r2, #45	; 0x2d
   1d61e:	2100      	movs	r1, #0
   1d620:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1d622:	687b      	ldr	r3, [r7, #4]
   1d624:	2200      	movs	r2, #0
   1d626:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1d628:	687b      	ldr	r3, [r7, #4]
   1d62a:	2200      	movs	r2, #0
   1d62c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1d62e:	687b      	ldr	r3, [r7, #4]
   1d630:	2200      	movs	r2, #0
   1d632:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1d634:	687b      	ldr	r3, [r7, #4]
   1d636:	2200      	movs	r2, #0
   1d638:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1d63a:	687b      	ldr	r3, [r7, #4]
   1d63c:	2200      	movs	r2, #0
   1d63e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1d640:	687b      	ldr	r3, [r7, #4]
   1d642:	2200      	movs	r2, #0
   1d644:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1d646:	687b      	ldr	r3, [r7, #4]
   1d648:	2200      	movs	r2, #0
   1d64a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1d64c:	687b      	ldr	r3, [r7, #4]
   1d64e:	2200      	movs	r2, #0
   1d650:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1d652:	687b      	ldr	r3, [r7, #4]
   1d654:	2200      	movs	r2, #0
   1d656:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1d658:	687b      	ldr	r3, [r7, #4]
   1d65a:	2200      	movs	r2, #0
   1d65c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1d65e:	687b      	ldr	r3, [r7, #4]
   1d660:	2213      	movs	r2, #19
   1d662:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1d664:	687b      	ldr	r3, [r7, #4]
   1d666:	2200      	movs	r2, #0
   1d668:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1d66a:	46c0      	nop			; (mov r8, r8)
   1d66c:	46bd      	mov	sp, r7
   1d66e:	b002      	add	sp, #8
   1d670:	bd80      	pop	{r7, pc}
	...

0001d674 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1d674:	b580      	push	{r7, lr}
   1d676:	b084      	sub	sp, #16
   1d678:	af00      	add	r7, sp, #0
   1d67a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1d67c:	687b      	ldr	r3, [r7, #4]
   1d67e:	681b      	ldr	r3, [r3, #0]
   1d680:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d682:	687b      	ldr	r3, [r7, #4]
   1d684:	681b      	ldr	r3, [r3, #0]
   1d686:	0018      	movs	r0, r3
   1d688:	4b09      	ldr	r3, [pc, #36]	; (1d6b0 <usart_enable+0x3c>)
   1d68a:	4798      	blx	r3
   1d68c:	0003      	movs	r3, r0
   1d68e:	0018      	movs	r0, r3
   1d690:	4b08      	ldr	r3, [pc, #32]	; (1d6b4 <usart_enable+0x40>)
   1d692:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1d694:	687b      	ldr	r3, [r7, #4]
   1d696:	0018      	movs	r0, r3
   1d698:	4b07      	ldr	r3, [pc, #28]	; (1d6b8 <usart_enable+0x44>)
   1d69a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1d69c:	68fb      	ldr	r3, [r7, #12]
   1d69e:	681b      	ldr	r3, [r3, #0]
   1d6a0:	2202      	movs	r2, #2
   1d6a2:	431a      	orrs	r2, r3
   1d6a4:	68fb      	ldr	r3, [r7, #12]
   1d6a6:	601a      	str	r2, [r3, #0]
}
   1d6a8:	46c0      	nop			; (mov r8, r8)
   1d6aa:	46bd      	mov	sp, r7
   1d6ac:	b004      	add	sp, #16
   1d6ae:	bd80      	pop	{r7, pc}
   1d6b0:	00027079 	.word	0x00027079
   1d6b4:	0001d545 	.word	0x0001d545
   1d6b8:	0001d591 	.word	0x0001d591

0001d6bc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1d6bc:	b580      	push	{r7, lr}
   1d6be:	b082      	sub	sp, #8
   1d6c0:	af00      	add	r7, sp, #0
   1d6c2:	6078      	str	r0, [r7, #4]
   1d6c4:	000a      	movs	r2, r1
   1d6c6:	1cfb      	adds	r3, r7, #3
   1d6c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1d6ca:	687b      	ldr	r3, [r7, #4]
   1d6cc:	2231      	movs	r2, #49	; 0x31
   1d6ce:	5c9b      	ldrb	r3, [r3, r2]
   1d6d0:	b25a      	sxtb	r2, r3
   1d6d2:	1cfb      	adds	r3, r7, #3
   1d6d4:	781b      	ldrb	r3, [r3, #0]
   1d6d6:	2101      	movs	r1, #1
   1d6d8:	4099      	lsls	r1, r3
   1d6da:	000b      	movs	r3, r1
   1d6dc:	b25b      	sxtb	r3, r3
   1d6de:	4313      	orrs	r3, r2
   1d6e0:	b25b      	sxtb	r3, r3
   1d6e2:	b2d9      	uxtb	r1, r3
   1d6e4:	687b      	ldr	r3, [r7, #4]
   1d6e6:	2231      	movs	r2, #49	; 0x31
   1d6e8:	5499      	strb	r1, [r3, r2]

}
   1d6ea:	46c0      	nop			; (mov r8, r8)
   1d6ec:	46bd      	mov	sp, r7
   1d6ee:	b002      	add	sp, #8
   1d6f0:	bd80      	pop	{r7, pc}
	...

0001d6f4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1d6f4:	b580      	push	{r7, lr}
   1d6f6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1d6f8:	2380      	movs	r3, #128	; 0x80
   1d6fa:	009a      	lsls	r2, r3, #2
   1d6fc:	4b0f      	ldr	r3, [pc, #60]	; (1d73c <InitializeSerialConsole+0x48>)
   1d6fe:	0011      	movs	r1, r2
   1d700:	0018      	movs	r0, r3
   1d702:	4b0f      	ldr	r3, [pc, #60]	; (1d740 <InitializeSerialConsole+0x4c>)
   1d704:	4798      	blx	r3
   1d706:	0002      	movs	r2, r0
   1d708:	4b0e      	ldr	r3, [pc, #56]	; (1d744 <InitializeSerialConsole+0x50>)
   1d70a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1d70c:	2380      	movs	r3, #128	; 0x80
   1d70e:	009a      	lsls	r2, r3, #2
   1d710:	4b0d      	ldr	r3, [pc, #52]	; (1d748 <InitializeSerialConsole+0x54>)
   1d712:	0011      	movs	r1, r2
   1d714:	0018      	movs	r0, r3
   1d716:	4b0a      	ldr	r3, [pc, #40]	; (1d740 <InitializeSerialConsole+0x4c>)
   1d718:	4798      	blx	r3
   1d71a:	0002      	movs	r2, r0
   1d71c:	4b0b      	ldr	r3, [pc, #44]	; (1d74c <InitializeSerialConsole+0x58>)
   1d71e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1d720:	4b0b      	ldr	r3, [pc, #44]	; (1d750 <InitializeSerialConsole+0x5c>)
   1d722:	4798      	blx	r3
    configure_usart_callbacks();
   1d724:	4b0b      	ldr	r3, [pc, #44]	; (1d754 <InitializeSerialConsole+0x60>)
   1d726:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1d728:	490b      	ldr	r1, [pc, #44]	; (1d758 <InitializeSerialConsole+0x64>)
   1d72a:	4b0c      	ldr	r3, [pc, #48]	; (1d75c <InitializeSerialConsole+0x68>)
   1d72c:	2201      	movs	r2, #1
   1d72e:	0018      	movs	r0, r3
   1d730:	4b0b      	ldr	r3, [pc, #44]	; (1d760 <InitializeSerialConsole+0x6c>)
   1d732:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1d734:	46c0      	nop			; (mov r8, r8)
   1d736:	46bd      	mov	sp, r7
   1d738:	bd80      	pop	{r7, pc}
   1d73a:	46c0      	nop			; (mov r8, r8)
   1d73c:	20005744 	.word	0x20005744
   1d740:	0001d425 	.word	0x0001d425
   1d744:	2000553c 	.word	0x2000553c
   1d748:	20005544 	.word	0x20005544
   1d74c:	20005948 	.word	0x20005948
   1d750:	0001d8c9 	.word	0x0001d8c9
   1d754:	0001d941 	.word	0x0001d941
   1d758:	20005540 	.word	0x20005540
   1d75c:	20005508 	.word	0x20005508
   1d760:	00028921 	.word	0x00028921

0001d764 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1d764:	b580      	push	{r7, lr}
   1d766:	b084      	sub	sp, #16
   1d768:	af00      	add	r7, sp, #0
   1d76a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1d76c:	4b1a      	ldr	r3, [pc, #104]	; (1d7d8 <SerialConsoleWriteString+0x74>)
   1d76e:	4798      	blx	r3
    if (string != NULL) {
   1d770:	687b      	ldr	r3, [r7, #4]
   1d772:	2b00      	cmp	r3, #0
   1d774:	d02a      	beq.n	1d7cc <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1d776:	2300      	movs	r3, #0
   1d778:	60fb      	str	r3, [r7, #12]
   1d77a:	e00b      	b.n	1d794 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1d77c:	4b17      	ldr	r3, [pc, #92]	; (1d7dc <SerialConsoleWriteString+0x78>)
   1d77e:	6818      	ldr	r0, [r3, #0]
   1d780:	687a      	ldr	r2, [r7, #4]
   1d782:	68fb      	ldr	r3, [r7, #12]
   1d784:	18d3      	adds	r3, r2, r3
   1d786:	781b      	ldrb	r3, [r3, #0]
   1d788:	0019      	movs	r1, r3
   1d78a:	4b15      	ldr	r3, [pc, #84]	; (1d7e0 <SerialConsoleWriteString+0x7c>)
   1d78c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1d78e:	68fb      	ldr	r3, [r7, #12]
   1d790:	3301      	adds	r3, #1
   1d792:	60fb      	str	r3, [r7, #12]
   1d794:	687b      	ldr	r3, [r7, #4]
   1d796:	0018      	movs	r0, r3
   1d798:	4b12      	ldr	r3, [pc, #72]	; (1d7e4 <SerialConsoleWriteString+0x80>)
   1d79a:	4798      	blx	r3
   1d79c:	0002      	movs	r2, r0
   1d79e:	68fb      	ldr	r3, [r7, #12]
   1d7a0:	429a      	cmp	r2, r3
   1d7a2:	d8eb      	bhi.n	1d77c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1d7a4:	4b10      	ldr	r3, [pc, #64]	; (1d7e8 <SerialConsoleWriteString+0x84>)
   1d7a6:	2101      	movs	r1, #1
   1d7a8:	0018      	movs	r0, r3
   1d7aa:	4b10      	ldr	r3, [pc, #64]	; (1d7ec <SerialConsoleWriteString+0x88>)
   1d7ac:	4798      	blx	r3
   1d7ae:	1e03      	subs	r3, r0, #0
   1d7b0:	d10c      	bne.n	1d7cc <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1d7b2:	4b0a      	ldr	r3, [pc, #40]	; (1d7dc <SerialConsoleWriteString+0x78>)
   1d7b4:	681b      	ldr	r3, [r3, #0]
   1d7b6:	4a0e      	ldr	r2, [pc, #56]	; (1d7f0 <SerialConsoleWriteString+0x8c>)
   1d7b8:	0011      	movs	r1, r2
   1d7ba:	0018      	movs	r0, r3
   1d7bc:	4b0d      	ldr	r3, [pc, #52]	; (1d7f4 <SerialConsoleWriteString+0x90>)
   1d7be:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d7c0:	490b      	ldr	r1, [pc, #44]	; (1d7f0 <SerialConsoleWriteString+0x8c>)
   1d7c2:	4b09      	ldr	r3, [pc, #36]	; (1d7e8 <SerialConsoleWriteString+0x84>)
   1d7c4:	2201      	movs	r2, #1
   1d7c6:	0018      	movs	r0, r3
   1d7c8:	4b0b      	ldr	r3, [pc, #44]	; (1d7f8 <SerialConsoleWriteString+0x94>)
   1d7ca:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1d7cc:	4b0b      	ldr	r3, [pc, #44]	; (1d7fc <SerialConsoleWriteString+0x98>)
   1d7ce:	4798      	blx	r3
}
   1d7d0:	46c0      	nop			; (mov r8, r8)
   1d7d2:	46bd      	mov	sp, r7
   1d7d4:	b004      	add	sp, #16
   1d7d6:	bd80      	pop	{r7, pc}
   1d7d8:	0001bdd1 	.word	0x0001bdd1
   1d7dc:	20005948 	.word	0x20005948
   1d7e0:	0001d485 	.word	0x0001d485
   1d7e4:	000343fb 	.word	0x000343fb
   1d7e8:	20005508 	.word	0x20005508
   1d7ec:	00028969 	.word	0x00028969
   1d7f0:	20005944 	.word	0x20005944
   1d7f4:	0001d4b9 	.word	0x0001d4b9
   1d7f8:	000288d9 	.word	0x000288d9
   1d7fc:	0001bde9 	.word	0x0001bde9

0001d800 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1d800:	b580      	push	{r7, lr}
   1d802:	b084      	sub	sp, #16
   1d804:	af00      	add	r7, sp, #0
   1d806:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1d808:	4b08      	ldr	r3, [pc, #32]	; (1d82c <SerialConsoleReadCharacter+0x2c>)
   1d80a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1d80c:	4b08      	ldr	r3, [pc, #32]	; (1d830 <SerialConsoleReadCharacter+0x30>)
   1d80e:	681b      	ldr	r3, [r3, #0]
   1d810:	687a      	ldr	r2, [r7, #4]
   1d812:	0011      	movs	r1, r2
   1d814:	0018      	movs	r0, r3
   1d816:	4b07      	ldr	r3, [pc, #28]	; (1d834 <SerialConsoleReadCharacter+0x34>)
   1d818:	4798      	blx	r3
   1d81a:	0003      	movs	r3, r0
   1d81c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1d81e:	4b06      	ldr	r3, [pc, #24]	; (1d838 <SerialConsoleReadCharacter+0x38>)
   1d820:	4798      	blx	r3
    return a;
   1d822:	68fb      	ldr	r3, [r7, #12]
}
   1d824:	0018      	movs	r0, r3
   1d826:	46bd      	mov	sp, r7
   1d828:	b004      	add	sp, #16
   1d82a:	bd80      	pop	{r7, pc}
   1d82c:	0001bdd1 	.word	0x0001bdd1
   1d830:	2000553c 	.word	0x2000553c
   1d834:	0001d4b9 	.word	0x0001d4b9
   1d838:	0001bde9 	.word	0x0001bde9

0001d83c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1d83c:	b580      	push	{r7, lr}
   1d83e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1d840:	4b02      	ldr	r3, [pc, #8]	; (1d84c <getLogLevel+0x10>)
   1d842:	781b      	ldrb	r3, [r3, #0]
}
   1d844:	0018      	movs	r0, r3
   1d846:	46bd      	mov	sp, r7
   1d848:	bd80      	pop	{r7, pc}
   1d84a:	46c0      	nop			; (mov r8, r8)
   1d84c:	20004078 	.word	0x20004078

0001d850 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1d850:	b40e      	push	{r1, r2, r3}
   1d852:	b590      	push	{r4, r7, lr}
   1d854:	b084      	sub	sp, #16
   1d856:	af00      	add	r7, sp, #0
   1d858:	0002      	movs	r2, r0
   1d85a:	1dfb      	adds	r3, r7, #7
   1d85c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1d85e:	4b0e      	ldr	r3, [pc, #56]	; (1d898 <LogMessage+0x48>)
   1d860:	4798      	blx	r3
   1d862:	0003      	movs	r3, r0
   1d864:	001a      	movs	r2, r3
   1d866:	1dfb      	adds	r3, r7, #7
   1d868:	781b      	ldrb	r3, [r3, #0]
   1d86a:	4293      	cmp	r3, r2
   1d86c:	d30c      	bcc.n	1d888 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1d86e:	2320      	movs	r3, #32
   1d870:	18fb      	adds	r3, r7, r3
   1d872:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1d874:	68fb      	ldr	r3, [r7, #12]
   1d876:	69fa      	ldr	r2, [r7, #28]
   1d878:	4808      	ldr	r0, [pc, #32]	; (1d89c <LogMessage+0x4c>)
   1d87a:	217f      	movs	r1, #127	; 0x7f
   1d87c:	4c08      	ldr	r4, [pc, #32]	; (1d8a0 <LogMessage+0x50>)
   1d87e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1d880:	4b06      	ldr	r3, [pc, #24]	; (1d89c <LogMessage+0x4c>)
   1d882:	0018      	movs	r0, r3
   1d884:	4b07      	ldr	r3, [pc, #28]	; (1d8a4 <LogMessage+0x54>)
   1d886:	4798      	blx	r3
        va_end(ap);
    }
};
   1d888:	46c0      	nop			; (mov r8, r8)
   1d88a:	46bd      	mov	sp, r7
   1d88c:	b004      	add	sp, #16
   1d88e:	bc90      	pop	{r4, r7}
   1d890:	bc08      	pop	{r3}
   1d892:	b003      	add	sp, #12
   1d894:	4718      	bx	r3
   1d896:	46c0      	nop			; (mov r8, r8)
   1d898:	0001d83d 	.word	0x0001d83d
   1d89c:	20005488 	.word	0x20005488
   1d8a0:	00034635 	.word	0x00034635
   1d8a4:	0001d765 	.word	0x0001d765

0001d8a8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1d8a8:	b40f      	push	{r0, r1, r2, r3}
   1d8aa:	b580      	push	{r7, lr}
   1d8ac:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1d8ae:	68bb      	ldr	r3, [r7, #8]
   1d8b0:	0019      	movs	r1, r3
   1d8b2:	2001      	movs	r0, #1
   1d8b4:	4b03      	ldr	r3, [pc, #12]	; (1d8c4 <LogMessageDebug+0x1c>)
   1d8b6:	4798      	blx	r3
};
   1d8b8:	46c0      	nop			; (mov r8, r8)
   1d8ba:	46bd      	mov	sp, r7
   1d8bc:	bc80      	pop	{r7}
   1d8be:	bc08      	pop	{r3}
   1d8c0:	b004      	add	sp, #16
   1d8c2:	4718      	bx	r3
   1d8c4:	0001d851 	.word	0x0001d851

0001d8c8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1d8c8:	b580      	push	{r7, lr}
   1d8ca:	b090      	sub	sp, #64	; 0x40
   1d8cc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1d8ce:	003b      	movs	r3, r7
   1d8d0:	0018      	movs	r0, r3
   1d8d2:	4b14      	ldr	r3, [pc, #80]	; (1d924 <configure_usart+0x5c>)
   1d8d4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1d8d6:	003b      	movs	r3, r7
   1d8d8:	22e1      	movs	r2, #225	; 0xe1
   1d8da:	0252      	lsls	r2, r2, #9
   1d8dc:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1d8de:	003b      	movs	r3, r7
   1d8e0:	22c4      	movs	r2, #196	; 0xc4
   1d8e2:	0392      	lsls	r2, r2, #14
   1d8e4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1d8e6:	003b      	movs	r3, r7
   1d8e8:	2201      	movs	r2, #1
   1d8ea:	4252      	negs	r2, r2
   1d8ec:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1d8ee:	003b      	movs	r3, r7
   1d8f0:	2201      	movs	r2, #1
   1d8f2:	4252      	negs	r2, r2
   1d8f4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1d8f6:	003b      	movs	r3, r7
   1d8f8:	4a0b      	ldr	r2, [pc, #44]	; (1d928 <configure_usart+0x60>)
   1d8fa:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1d8fc:	003b      	movs	r3, r7
   1d8fe:	4a0b      	ldr	r2, [pc, #44]	; (1d92c <configure_usart+0x64>)
   1d900:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1d902:	46c0      	nop			; (mov r8, r8)
   1d904:	003a      	movs	r2, r7
   1d906:	490a      	ldr	r1, [pc, #40]	; (1d930 <configure_usart+0x68>)
   1d908:	4b0a      	ldr	r3, [pc, #40]	; (1d934 <configure_usart+0x6c>)
   1d90a:	0018      	movs	r0, r3
   1d90c:	4b0a      	ldr	r3, [pc, #40]	; (1d938 <configure_usart+0x70>)
   1d90e:	4798      	blx	r3
   1d910:	1e03      	subs	r3, r0, #0
   1d912:	d1f7      	bne.n	1d904 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1d914:	4b07      	ldr	r3, [pc, #28]	; (1d934 <configure_usart+0x6c>)
   1d916:	0018      	movs	r0, r3
   1d918:	4b08      	ldr	r3, [pc, #32]	; (1d93c <configure_usart+0x74>)
   1d91a:	4798      	blx	r3
}
   1d91c:	46c0      	nop			; (mov r8, r8)
   1d91e:	46bd      	mov	sp, r7
   1d920:	b010      	add	sp, #64	; 0x40
   1d922:	bd80      	pop	{r7, pc}
   1d924:	0001d5b5 	.word	0x0001d5b5
   1d928:	002a0003 	.word	0x002a0003
   1d92c:	002b0003 	.word	0x002b0003
   1d930:	42001800 	.word	0x42001800
   1d934:	20005508 	.word	0x20005508
   1d938:	000284dd 	.word	0x000284dd
   1d93c:	0001d675 	.word	0x0001d675

0001d940 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1d940:	b580      	push	{r7, lr}
   1d942:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d944:	490c      	ldr	r1, [pc, #48]	; (1d978 <configure_usart_callbacks+0x38>)
   1d946:	4b0d      	ldr	r3, [pc, #52]	; (1d97c <configure_usart_callbacks+0x3c>)
   1d948:	2200      	movs	r2, #0
   1d94a:	0018      	movs	r0, r3
   1d94c:	4b0c      	ldr	r3, [pc, #48]	; (1d980 <configure_usart_callbacks+0x40>)
   1d94e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1d950:	490c      	ldr	r1, [pc, #48]	; (1d984 <configure_usart_callbacks+0x44>)
   1d952:	4b0a      	ldr	r3, [pc, #40]	; (1d97c <configure_usart_callbacks+0x3c>)
   1d954:	2201      	movs	r2, #1
   1d956:	0018      	movs	r0, r3
   1d958:	4b09      	ldr	r3, [pc, #36]	; (1d980 <configure_usart_callbacks+0x40>)
   1d95a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d95c:	4b07      	ldr	r3, [pc, #28]	; (1d97c <configure_usart_callbacks+0x3c>)
   1d95e:	2100      	movs	r1, #0
   1d960:	0018      	movs	r0, r3
   1d962:	4b09      	ldr	r3, [pc, #36]	; (1d988 <configure_usart_callbacks+0x48>)
   1d964:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1d966:	4b05      	ldr	r3, [pc, #20]	; (1d97c <configure_usart_callbacks+0x3c>)
   1d968:	2101      	movs	r1, #1
   1d96a:	0018      	movs	r0, r3
   1d96c:	4b06      	ldr	r3, [pc, #24]	; (1d988 <configure_usart_callbacks+0x48>)
   1d96e:	4798      	blx	r3
}
   1d970:	46c0      	nop			; (mov r8, r8)
   1d972:	46bd      	mov	sp, r7
   1d974:	bd80      	pop	{r7, pc}
   1d976:	46c0      	nop			; (mov r8, r8)
   1d978:	0001d9d5 	.word	0x0001d9d5
   1d97c:	20005508 	.word	0x20005508
   1d980:	00028891 	.word	0x00028891
   1d984:	0001d98d 	.word	0x0001d98d
   1d988:	0001d6bd 	.word	0x0001d6bd

0001d98c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1d98c:	b580      	push	{r7, lr}
   1d98e:	b082      	sub	sp, #8
   1d990:	af00      	add	r7, sp, #0
   1d992:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1d994:	4b09      	ldr	r3, [pc, #36]	; (1d9bc <usart_read_callback+0x30>)
   1d996:	681a      	ldr	r2, [r3, #0]
   1d998:	4b09      	ldr	r3, [pc, #36]	; (1d9c0 <usart_read_callback+0x34>)
   1d99a:	781b      	ldrb	r3, [r3, #0]
   1d99c:	0019      	movs	r1, r3
   1d99e:	0010      	movs	r0, r2
   1d9a0:	4b08      	ldr	r3, [pc, #32]	; (1d9c4 <usart_read_callback+0x38>)
   1d9a2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1d9a4:	4906      	ldr	r1, [pc, #24]	; (1d9c0 <usart_read_callback+0x34>)
   1d9a6:	4b08      	ldr	r3, [pc, #32]	; (1d9c8 <usart_read_callback+0x3c>)
   1d9a8:	2201      	movs	r2, #1
   1d9aa:	0018      	movs	r0, r3
   1d9ac:	4b07      	ldr	r3, [pc, #28]	; (1d9cc <usart_read_callback+0x40>)
   1d9ae:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1d9b0:	4b07      	ldr	r3, [pc, #28]	; (1d9d0 <usart_read_callback+0x44>)
   1d9b2:	4798      	blx	r3
}
   1d9b4:	46c0      	nop			; (mov r8, r8)
   1d9b6:	46bd      	mov	sp, r7
   1d9b8:	b002      	add	sp, #8
   1d9ba:	bd80      	pop	{r7, pc}
   1d9bc:	2000553c 	.word	0x2000553c
   1d9c0:	20005540 	.word	0x20005540
   1d9c4:	0001d485 	.word	0x0001d485
   1d9c8:	20005508 	.word	0x20005508
   1d9cc:	00028921 	.word	0x00028921
   1d9d0:	000139e1 	.word	0x000139e1

0001d9d4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1d9d4:	b580      	push	{r7, lr}
   1d9d6:	b082      	sub	sp, #8
   1d9d8:	af00      	add	r7, sp, #0
   1d9da:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1d9dc:	4b09      	ldr	r3, [pc, #36]	; (1da04 <usart_write_callback+0x30>)
   1d9de:	681b      	ldr	r3, [r3, #0]
   1d9e0:	4a09      	ldr	r2, [pc, #36]	; (1da08 <usart_write_callback+0x34>)
   1d9e2:	0011      	movs	r1, r2
   1d9e4:	0018      	movs	r0, r3
   1d9e6:	4b09      	ldr	r3, [pc, #36]	; (1da0c <usart_write_callback+0x38>)
   1d9e8:	4798      	blx	r3
   1d9ea:	0003      	movs	r3, r0
   1d9ec:	3301      	adds	r3, #1
   1d9ee:	d005      	beq.n	1d9fc <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d9f0:	4905      	ldr	r1, [pc, #20]	; (1da08 <usart_write_callback+0x34>)
   1d9f2:	4b07      	ldr	r3, [pc, #28]	; (1da10 <usart_write_callback+0x3c>)
   1d9f4:	2201      	movs	r2, #1
   1d9f6:	0018      	movs	r0, r3
   1d9f8:	4b06      	ldr	r3, [pc, #24]	; (1da14 <usart_write_callback+0x40>)
   1d9fa:	4798      	blx	r3
    }
}
   1d9fc:	46c0      	nop			; (mov r8, r8)
   1d9fe:	46bd      	mov	sp, r7
   1da00:	b002      	add	sp, #8
   1da02:	bd80      	pop	{r7, pc}
   1da04:	20005948 	.word	0x20005948
   1da08:	20005944 	.word	0x20005944
   1da0c:	0001d4b9 	.word	0x0001d4b9
   1da10:	20005508 	.word	0x20005508
   1da14:	000288d9 	.word	0x000288d9

0001da18 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1da18:	b590      	push	{r4, r7, lr}
   1da1a:	b087      	sub	sp, #28
   1da1c:	af00      	add	r7, sp, #0
   1da1e:	60f8      	str	r0, [r7, #12]
   1da20:	000c      	movs	r4, r1
   1da22:	0010      	movs	r0, r2
   1da24:	0019      	movs	r1, r3
   1da26:	230a      	movs	r3, #10
   1da28:	18fb      	adds	r3, r7, r3
   1da2a:	1c22      	adds	r2, r4, #0
   1da2c:	801a      	strh	r2, [r3, #0]
   1da2e:	2308      	movs	r3, #8
   1da30:	18fb      	adds	r3, r7, r3
   1da32:	1c02      	adds	r2, r0, #0
   1da34:	801a      	strh	r2, [r3, #0]
   1da36:	1dfb      	adds	r3, r7, #7
   1da38:	1c0a      	adds	r2, r1, #0
   1da3a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1da3c:	230a      	movs	r3, #10
   1da3e:	18fb      	adds	r3, r7, r3
   1da40:	881a      	ldrh	r2, [r3, #0]
   1da42:	2308      	movs	r3, #8
   1da44:	18fb      	adds	r3, r7, r3
   1da46:	881b      	ldrh	r3, [r3, #0]
   1da48:	1ad3      	subs	r3, r2, r3
   1da4a:	3307      	adds	r3, #7
   1da4c:	2b00      	cmp	r3, #0
   1da4e:	da00      	bge.n	1da52 <SDMMC_UNSTUFF_BITS+0x3a>
   1da50:	3307      	adds	r3, #7
   1da52:	10db      	asrs	r3, r3, #3
   1da54:	3b01      	subs	r3, #1
   1da56:	68fa      	ldr	r2, [r7, #12]
   1da58:	18d3      	adds	r3, r2, r3
   1da5a:	781b      	ldrb	r3, [r3, #0]
   1da5c:	0019      	movs	r1, r3
   1da5e:	2308      	movs	r3, #8
   1da60:	18fb      	adds	r3, r7, r3
   1da62:	881b      	ldrh	r3, [r3, #0]
   1da64:	2207      	movs	r2, #7
   1da66:	4013      	ands	r3, r2
   1da68:	4119      	asrs	r1, r3
   1da6a:	000b      	movs	r3, r1
   1da6c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1da6e:	2308      	movs	r3, #8
   1da70:	18fb      	adds	r3, r7, r3
   1da72:	881b      	ldrh	r3, [r3, #0]
   1da74:	2207      	movs	r2, #7
   1da76:	401a      	ands	r2, r3
   1da78:	1dfb      	adds	r3, r7, #7
   1da7a:	781b      	ldrb	r3, [r3, #0]
   1da7c:	18d3      	adds	r3, r2, r3
   1da7e:	2b08      	cmp	r3, #8
   1da80:	dd1c      	ble.n	1dabc <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1da82:	230a      	movs	r3, #10
   1da84:	18fb      	adds	r3, r7, r3
   1da86:	881a      	ldrh	r2, [r3, #0]
   1da88:	2308      	movs	r3, #8
   1da8a:	18fb      	adds	r3, r7, r3
   1da8c:	881b      	ldrh	r3, [r3, #0]
   1da8e:	1ad3      	subs	r3, r2, r3
   1da90:	3307      	adds	r3, #7
   1da92:	2b00      	cmp	r3, #0
   1da94:	da00      	bge.n	1da98 <SDMMC_UNSTUFF_BITS+0x80>
   1da96:	3307      	adds	r3, #7
   1da98:	10db      	asrs	r3, r3, #3
   1da9a:	3b02      	subs	r3, #2
   1da9c:	68fa      	ldr	r2, [r7, #12]
   1da9e:	18d3      	adds	r3, r2, r3
   1daa0:	781b      	ldrb	r3, [r3, #0]
   1daa2:	0019      	movs	r1, r3
   1daa4:	2308      	movs	r3, #8
   1daa6:	18fb      	adds	r3, r7, r3
   1daa8:	881b      	ldrh	r3, [r3, #0]
   1daaa:	2207      	movs	r2, #7
   1daac:	4013      	ands	r3, r2
   1daae:	2208      	movs	r2, #8
   1dab0:	1ad3      	subs	r3, r2, r3
   1dab2:	4099      	lsls	r1, r3
   1dab4:	000b      	movs	r3, r1
   1dab6:	697a      	ldr	r2, [r7, #20]
   1dab8:	4313      	orrs	r3, r2
   1daba:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1dabc:	2308      	movs	r3, #8
   1dabe:	18fb      	adds	r3, r7, r3
   1dac0:	881b      	ldrh	r3, [r3, #0]
   1dac2:	2207      	movs	r2, #7
   1dac4:	401a      	ands	r2, r3
   1dac6:	1dfb      	adds	r3, r7, #7
   1dac8:	781b      	ldrb	r3, [r3, #0]
   1daca:	18d3      	adds	r3, r2, r3
   1dacc:	2b10      	cmp	r3, #16
   1dace:	dd1c      	ble.n	1db0a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1dad0:	230a      	movs	r3, #10
   1dad2:	18fb      	adds	r3, r7, r3
   1dad4:	881a      	ldrh	r2, [r3, #0]
   1dad6:	2308      	movs	r3, #8
   1dad8:	18fb      	adds	r3, r7, r3
   1dada:	881b      	ldrh	r3, [r3, #0]
   1dadc:	1ad3      	subs	r3, r2, r3
   1dade:	3307      	adds	r3, #7
   1dae0:	2b00      	cmp	r3, #0
   1dae2:	da00      	bge.n	1dae6 <SDMMC_UNSTUFF_BITS+0xce>
   1dae4:	3307      	adds	r3, #7
   1dae6:	10db      	asrs	r3, r3, #3
   1dae8:	3b03      	subs	r3, #3
   1daea:	68fa      	ldr	r2, [r7, #12]
   1daec:	18d3      	adds	r3, r2, r3
   1daee:	781b      	ldrb	r3, [r3, #0]
   1daf0:	0019      	movs	r1, r3
   1daf2:	2308      	movs	r3, #8
   1daf4:	18fb      	adds	r3, r7, r3
   1daf6:	881b      	ldrh	r3, [r3, #0]
   1daf8:	2207      	movs	r2, #7
   1dafa:	4013      	ands	r3, r2
   1dafc:	2210      	movs	r2, #16
   1dafe:	1ad3      	subs	r3, r2, r3
   1db00:	4099      	lsls	r1, r3
   1db02:	000b      	movs	r3, r1
   1db04:	697a      	ldr	r2, [r7, #20]
   1db06:	4313      	orrs	r3, r2
   1db08:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1db0a:	2308      	movs	r3, #8
   1db0c:	18fb      	adds	r3, r7, r3
   1db0e:	881b      	ldrh	r3, [r3, #0]
   1db10:	2207      	movs	r2, #7
   1db12:	401a      	ands	r2, r3
   1db14:	1dfb      	adds	r3, r7, #7
   1db16:	781b      	ldrb	r3, [r3, #0]
   1db18:	18d3      	adds	r3, r2, r3
   1db1a:	2b10      	cmp	r3, #16
   1db1c:	dd1c      	ble.n	1db58 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1db1e:	230a      	movs	r3, #10
   1db20:	18fb      	adds	r3, r7, r3
   1db22:	881a      	ldrh	r2, [r3, #0]
   1db24:	2308      	movs	r3, #8
   1db26:	18fb      	adds	r3, r7, r3
   1db28:	881b      	ldrh	r3, [r3, #0]
   1db2a:	1ad3      	subs	r3, r2, r3
   1db2c:	3307      	adds	r3, #7
   1db2e:	2b00      	cmp	r3, #0
   1db30:	da00      	bge.n	1db34 <SDMMC_UNSTUFF_BITS+0x11c>
   1db32:	3307      	adds	r3, #7
   1db34:	10db      	asrs	r3, r3, #3
   1db36:	3b03      	subs	r3, #3
   1db38:	68fa      	ldr	r2, [r7, #12]
   1db3a:	18d3      	adds	r3, r2, r3
   1db3c:	781b      	ldrb	r3, [r3, #0]
   1db3e:	0019      	movs	r1, r3
   1db40:	2308      	movs	r3, #8
   1db42:	18fb      	adds	r3, r7, r3
   1db44:	881b      	ldrh	r3, [r3, #0]
   1db46:	2207      	movs	r2, #7
   1db48:	4013      	ands	r3, r2
   1db4a:	2210      	movs	r2, #16
   1db4c:	1ad3      	subs	r3, r2, r3
   1db4e:	4099      	lsls	r1, r3
   1db50:	000b      	movs	r3, r1
   1db52:	697a      	ldr	r2, [r7, #20]
   1db54:	4313      	orrs	r3, r2
   1db56:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1db58:	1dfb      	adds	r3, r7, #7
   1db5a:	781b      	ldrb	r3, [r3, #0]
   1db5c:	2201      	movs	r2, #1
   1db5e:	409a      	lsls	r2, r3
   1db60:	0013      	movs	r3, r2
   1db62:	1e5a      	subs	r2, r3, #1
   1db64:	697b      	ldr	r3, [r7, #20]
   1db66:	4013      	ands	r3, r2
   1db68:	617b      	str	r3, [r7, #20]
	return value;
   1db6a:	697b      	ldr	r3, [r7, #20]
}
   1db6c:	0018      	movs	r0, r3
   1db6e:	46bd      	mov	sp, r7
   1db70:	b007      	add	sp, #28
   1db72:	bd90      	pop	{r4, r7, pc}

0001db74 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1db74:	b580      	push	{r7, lr}
   1db76:	b082      	sub	sp, #8
   1db78:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1db7a:	4b23      	ldr	r3, [pc, #140]	; (1dc08 <mmc_spi_op_cond+0x94>)
   1db7c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1db7e:	4b23      	ldr	r3, [pc, #140]	; (1dc0c <mmc_spi_op_cond+0x98>)
   1db80:	2100      	movs	r1, #0
   1db82:	0018      	movs	r0, r3
   1db84:	4b22      	ldr	r3, [pc, #136]	; (1dc10 <mmc_spi_op_cond+0x9c>)
   1db86:	4798      	blx	r3
   1db88:	0003      	movs	r3, r0
   1db8a:	001a      	movs	r2, r3
   1db8c:	2301      	movs	r3, #1
   1db8e:	4053      	eors	r3, r2
   1db90:	b2db      	uxtb	r3, r3
   1db92:	2b00      	cmp	r3, #0
   1db94:	d001      	beq.n	1db9a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1db96:	2300      	movs	r3, #0
   1db98:	e031      	b.n	1dbfe <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1db9a:	4b1e      	ldr	r3, [pc, #120]	; (1dc14 <mmc_spi_op_cond+0xa0>)
   1db9c:	4798      	blx	r3
   1db9e:	0003      	movs	r3, r0
   1dba0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1dba2:	683b      	ldr	r3, [r7, #0]
   1dba4:	2201      	movs	r2, #1
   1dba6:	4013      	ands	r3, r2
   1dba8:	d006      	beq.n	1dbb8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1dbaa:	687b      	ldr	r3, [r7, #4]
   1dbac:	1e5a      	subs	r2, r3, #1
   1dbae:	607a      	str	r2, [r7, #4]
   1dbb0:	2b00      	cmp	r3, #0
   1dbb2:	d1e4      	bne.n	1db7e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1dbb4:	2300      	movs	r3, #0
   1dbb6:	e022      	b.n	1dbfe <mmc_spi_op_cond+0x8a>
			break;
   1dbb8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1dbba:	4b17      	ldr	r3, [pc, #92]	; (1dc18 <mmc_spi_op_cond+0xa4>)
   1dbbc:	2100      	movs	r1, #0
   1dbbe:	0018      	movs	r0, r3
   1dbc0:	4b13      	ldr	r3, [pc, #76]	; (1dc10 <mmc_spi_op_cond+0x9c>)
   1dbc2:	4798      	blx	r3
   1dbc4:	0003      	movs	r3, r0
   1dbc6:	001a      	movs	r2, r3
   1dbc8:	2301      	movs	r3, #1
   1dbca:	4053      	eors	r3, r2
   1dbcc:	b2db      	uxtb	r3, r3
   1dbce:	2b00      	cmp	r3, #0
   1dbd0:	d001      	beq.n	1dbd6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1dbd2:	2300      	movs	r3, #0
   1dbd4:	e013      	b.n	1dbfe <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1dbd6:	4b0f      	ldr	r3, [pc, #60]	; (1dc14 <mmc_spi_op_cond+0xa0>)
   1dbd8:	4798      	blx	r3
   1dbda:	0002      	movs	r2, r0
   1dbdc:	23c0      	movs	r3, #192	; 0xc0
   1dbde:	05db      	lsls	r3, r3, #23
   1dbe0:	401a      	ands	r2, r3
   1dbe2:	2380      	movs	r3, #128	; 0x80
   1dbe4:	05db      	lsls	r3, r3, #23
   1dbe6:	429a      	cmp	r2, r3
   1dbe8:	d108      	bne.n	1dbfc <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1dbea:	4b0c      	ldr	r3, [pc, #48]	; (1dc1c <mmc_spi_op_cond+0xa8>)
   1dbec:	681a      	ldr	r2, [r3, #0]
   1dbee:	4b0b      	ldr	r3, [pc, #44]	; (1dc1c <mmc_spi_op_cond+0xa8>)
   1dbf0:	681b      	ldr	r3, [r3, #0]
   1dbf2:	7adb      	ldrb	r3, [r3, #11]
   1dbf4:	2108      	movs	r1, #8
   1dbf6:	430b      	orrs	r3, r1
   1dbf8:	b2db      	uxtb	r3, r3
   1dbfa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1dbfc:	2301      	movs	r3, #1
}
   1dbfe:	0018      	movs	r0, r3
   1dc00:	46bd      	mov	sp, r7
   1dc02:	b002      	add	sp, #8
   1dc04:	bd80      	pop	{r7, pc}
   1dc06:	46c0      	nop			; (mov r8, r8)
   1dc08:	00001bee 	.word	0x00001bee
   1dc0c:	00001101 	.word	0x00001101
   1dc10:	0001f5f1 	.word	0x0001f5f1
   1dc14:	0001f831 	.word	0x0001f831
   1dc18:	0000053a 	.word	0x0000053a
   1dc1c:	200040a0 	.word	0x200040a0

0001dc20 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1dc20:	b580      	push	{r7, lr}
   1dc22:	b086      	sub	sp, #24
   1dc24:	af00      	add	r7, sp, #0
   1dc26:	0002      	movs	r2, r0
   1dc28:	1dfb      	adds	r3, r7, #7
   1dc2a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1dc2c:	4b2e      	ldr	r3, [pc, #184]	; (1dce8 <sd_spi_op_cond+0xc8>)
   1dc2e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1dc30:	4b2e      	ldr	r3, [pc, #184]	; (1dcec <sd_spi_op_cond+0xcc>)
   1dc32:	2100      	movs	r1, #0
   1dc34:	0018      	movs	r0, r3
   1dc36:	4b2e      	ldr	r3, [pc, #184]	; (1dcf0 <sd_spi_op_cond+0xd0>)
   1dc38:	4798      	blx	r3
   1dc3a:	0003      	movs	r3, r0
   1dc3c:	001a      	movs	r2, r3
   1dc3e:	2301      	movs	r3, #1
   1dc40:	4053      	eors	r3, r2
   1dc42:	b2db      	uxtb	r3, r3
   1dc44:	2b00      	cmp	r3, #0
   1dc46:	d001      	beq.n	1dc4c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1dc48:	2300      	movs	r3, #0
   1dc4a:	e048      	b.n	1dcde <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1dc4c:	2300      	movs	r3, #0
   1dc4e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1dc50:	1dfb      	adds	r3, r7, #7
   1dc52:	781b      	ldrb	r3, [r3, #0]
   1dc54:	2b00      	cmp	r3, #0
   1dc56:	d004      	beq.n	1dc62 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1dc58:	697b      	ldr	r3, [r7, #20]
   1dc5a:	2280      	movs	r2, #128	; 0x80
   1dc5c:	05d2      	lsls	r2, r2, #23
   1dc5e:	4313      	orrs	r3, r2
   1dc60:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1dc62:	697b      	ldr	r3, [r7, #20]
   1dc64:	4a23      	ldr	r2, [pc, #140]	; (1dcf4 <sd_spi_op_cond+0xd4>)
   1dc66:	0019      	movs	r1, r3
   1dc68:	0010      	movs	r0, r2
   1dc6a:	4b21      	ldr	r3, [pc, #132]	; (1dcf0 <sd_spi_op_cond+0xd0>)
   1dc6c:	4798      	blx	r3
   1dc6e:	0003      	movs	r3, r0
   1dc70:	001a      	movs	r2, r3
   1dc72:	2301      	movs	r3, #1
   1dc74:	4053      	eors	r3, r2
   1dc76:	b2db      	uxtb	r3, r3
   1dc78:	2b00      	cmp	r3, #0
   1dc7a:	d001      	beq.n	1dc80 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1dc7c:	2300      	movs	r3, #0
   1dc7e:	e02e      	b.n	1dcde <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1dc80:	4b1d      	ldr	r3, [pc, #116]	; (1dcf8 <sd_spi_op_cond+0xd8>)
   1dc82:	4798      	blx	r3
   1dc84:	0003      	movs	r3, r0
   1dc86:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1dc88:	68fb      	ldr	r3, [r7, #12]
   1dc8a:	2201      	movs	r2, #1
   1dc8c:	4013      	ands	r3, r2
   1dc8e:	d006      	beq.n	1dc9e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1dc90:	693b      	ldr	r3, [r7, #16]
   1dc92:	1e5a      	subs	r2, r3, #1
   1dc94:	613a      	str	r2, [r7, #16]
   1dc96:	2b00      	cmp	r3, #0
   1dc98:	d1ca      	bne.n	1dc30 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1dc9a:	2300      	movs	r3, #0
   1dc9c:	e01f      	b.n	1dcde <sd_spi_op_cond+0xbe>
			break;
   1dc9e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1dca0:	4b16      	ldr	r3, [pc, #88]	; (1dcfc <sd_spi_op_cond+0xdc>)
   1dca2:	2100      	movs	r1, #0
   1dca4:	0018      	movs	r0, r3
   1dca6:	4b12      	ldr	r3, [pc, #72]	; (1dcf0 <sd_spi_op_cond+0xd0>)
   1dca8:	4798      	blx	r3
   1dcaa:	0003      	movs	r3, r0
   1dcac:	001a      	movs	r2, r3
   1dcae:	2301      	movs	r3, #1
   1dcb0:	4053      	eors	r3, r2
   1dcb2:	b2db      	uxtb	r3, r3
   1dcb4:	2b00      	cmp	r3, #0
   1dcb6:	d001      	beq.n	1dcbc <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1dcb8:	2300      	movs	r3, #0
   1dcba:	e010      	b.n	1dcde <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1dcbc:	4b0e      	ldr	r3, [pc, #56]	; (1dcf8 <sd_spi_op_cond+0xd8>)
   1dcbe:	4798      	blx	r3
   1dcc0:	0002      	movs	r2, r0
   1dcc2:	2380      	movs	r3, #128	; 0x80
   1dcc4:	05db      	lsls	r3, r3, #23
   1dcc6:	4013      	ands	r3, r2
   1dcc8:	d008      	beq.n	1dcdc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1dcca:	4b0d      	ldr	r3, [pc, #52]	; (1dd00 <sd_spi_op_cond+0xe0>)
   1dccc:	681a      	ldr	r2, [r3, #0]
   1dcce:	4b0c      	ldr	r3, [pc, #48]	; (1dd00 <sd_spi_op_cond+0xe0>)
   1dcd0:	681b      	ldr	r3, [r3, #0]
   1dcd2:	7adb      	ldrb	r3, [r3, #11]
   1dcd4:	2108      	movs	r1, #8
   1dcd6:	430b      	orrs	r3, r1
   1dcd8:	b2db      	uxtb	r3, r3
   1dcda:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1dcdc:	2301      	movs	r3, #1
}
   1dcde:	0018      	movs	r0, r3
   1dce0:	46bd      	mov	sp, r7
   1dce2:	b006      	add	sp, #24
   1dce4:	bd80      	pop	{r7, pc}
   1dce6:	46c0      	nop			; (mov r8, r8)
   1dce8:	00001bee 	.word	0x00001bee
   1dcec:	00001137 	.word	0x00001137
   1dcf0:	0001f5f1 	.word	0x0001f5f1
   1dcf4:	00001129 	.word	0x00001129
   1dcf8:	0001f831 	.word	0x0001f831
   1dcfc:	0000053a 	.word	0x0000053a
   1dd00:	200040a0 	.word	0x200040a0

0001dd04 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1dd04:	b580      	push	{r7, lr}
   1dd06:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1dd08:	2301      	movs	r3, #1
}
   1dd0a:	0018      	movs	r0, r3
   1dd0c:	46bd      	mov	sp, r7
   1dd0e:	bd80      	pop	{r7, pc}

0001dd10 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1dd10:	b580      	push	{r7, lr}
   1dd12:	b084      	sub	sp, #16
   1dd14:	af00      	add	r7, sp, #0
   1dd16:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1dd18:	687b      	ldr	r3, [r7, #4]
   1dd1a:	2200      	movs	r2, #0
   1dd1c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1dd1e:	23d5      	movs	r3, #213	; 0xd5
   1dd20:	005b      	lsls	r3, r3, #1
   1dd22:	4a14      	ldr	r2, [pc, #80]	; (1dd74 <sd_cmd8+0x64>)
   1dd24:	0019      	movs	r1, r3
   1dd26:	0010      	movs	r0, r2
   1dd28:	4b13      	ldr	r3, [pc, #76]	; (1dd78 <sd_cmd8+0x68>)
   1dd2a:	4798      	blx	r3
   1dd2c:	0003      	movs	r3, r0
   1dd2e:	001a      	movs	r2, r3
   1dd30:	2301      	movs	r3, #1
   1dd32:	4053      	eors	r3, r2
   1dd34:	b2db      	uxtb	r3, r3
   1dd36:	2b00      	cmp	r3, #0
   1dd38:	d001      	beq.n	1dd3e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1dd3a:	2301      	movs	r3, #1
   1dd3c:	e015      	b.n	1dd6a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1dd3e:	4b0f      	ldr	r3, [pc, #60]	; (1dd7c <sd_cmd8+0x6c>)
   1dd40:	4798      	blx	r3
   1dd42:	0003      	movs	r3, r0
   1dd44:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1dd46:	68fb      	ldr	r3, [r7, #12]
   1dd48:	3301      	adds	r3, #1
   1dd4a:	d101      	bne.n	1dd50 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1dd4c:	2301      	movs	r3, #1
   1dd4e:	e00c      	b.n	1dd6a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1dd50:	68fb      	ldr	r3, [r7, #12]
   1dd52:	051b      	lsls	r3, r3, #20
   1dd54:	0d1a      	lsrs	r2, r3, #20
   1dd56:	23d5      	movs	r3, #213	; 0xd5
   1dd58:	005b      	lsls	r3, r3, #1
   1dd5a:	429a      	cmp	r2, r3
   1dd5c:	d001      	beq.n	1dd62 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1dd5e:	2300      	movs	r3, #0
   1dd60:	e003      	b.n	1dd6a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1dd62:	687b      	ldr	r3, [r7, #4]
   1dd64:	2201      	movs	r2, #1
   1dd66:	701a      	strb	r2, [r3, #0]
	return true;
   1dd68:	2301      	movs	r3, #1
}
   1dd6a:	0018      	movs	r0, r3
   1dd6c:	46bd      	mov	sp, r7
   1dd6e:	b004      	add	sp, #16
   1dd70:	bd80      	pop	{r7, pc}
   1dd72:	46c0      	nop			; (mov r8, r8)
   1dd74:	00005508 	.word	0x00005508
   1dd78:	0001f5f1 	.word	0x0001f5f1
   1dd7c:	0001f831 	.word	0x0001f831

0001dd80 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1dd80:	b590      	push	{r4, r7, lr}
   1dd82:	b089      	sub	sp, #36	; 0x24
   1dd84:	af02      	add	r7, sp, #8
   1dd86:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1dd88:	2380      	movs	r3, #128	; 0x80
   1dd8a:	009a      	lsls	r2, r3, #2
   1dd8c:	4841      	ldr	r0, [pc, #260]	; (1de94 <mmc_cmd8+0x114>)
   1dd8e:	2300      	movs	r3, #0
   1dd90:	9300      	str	r3, [sp, #0]
   1dd92:	2301      	movs	r3, #1
   1dd94:	2100      	movs	r1, #0
   1dd96:	4c40      	ldr	r4, [pc, #256]	; (1de98 <mmc_cmd8+0x118>)
   1dd98:	47a0      	blx	r4
   1dd9a:	0003      	movs	r3, r0
   1dd9c:	001a      	movs	r2, r3
   1dd9e:	2301      	movs	r3, #1
   1dda0:	4053      	eors	r3, r2
   1dda2:	b2db      	uxtb	r3, r3
   1dda4:	2b00      	cmp	r3, #0
   1dda6:	d001      	beq.n	1ddac <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1dda8:	2300      	movs	r3, #0
   1ddaa:	e06e      	b.n	1de8a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ddac:	2316      	movs	r3, #22
   1ddae:	18fb      	adds	r3, r7, r3
   1ddb0:	2200      	movs	r2, #0
   1ddb2:	801a      	strh	r2, [r3, #0]
   1ddb4:	e014      	b.n	1dde0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1ddb6:	2310      	movs	r3, #16
   1ddb8:	18fb      	adds	r3, r7, r3
   1ddba:	0018      	movs	r0, r3
   1ddbc:	4b37      	ldr	r3, [pc, #220]	; (1de9c <mmc_cmd8+0x11c>)
   1ddbe:	4798      	blx	r3
   1ddc0:	0003      	movs	r3, r0
   1ddc2:	001a      	movs	r2, r3
   1ddc4:	2301      	movs	r3, #1
   1ddc6:	4053      	eors	r3, r2
   1ddc8:	b2db      	uxtb	r3, r3
   1ddca:	2b00      	cmp	r3, #0
   1ddcc:	d001      	beq.n	1ddd2 <mmc_cmd8+0x52>
			return false;
   1ddce:	2300      	movs	r3, #0
   1ddd0:	e05b      	b.n	1de8a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ddd2:	2316      	movs	r3, #22
   1ddd4:	18fb      	adds	r3, r7, r3
   1ddd6:	881a      	ldrh	r2, [r3, #0]
   1ddd8:	2316      	movs	r3, #22
   1ddda:	18fb      	adds	r3, r7, r3
   1dddc:	3201      	adds	r2, #1
   1ddde:	801a      	strh	r2, [r3, #0]
   1dde0:	2316      	movs	r3, #22
   1dde2:	18fb      	adds	r3, r7, r3
   1dde4:	881b      	ldrh	r3, [r3, #0]
   1dde6:	2b31      	cmp	r3, #49	; 0x31
   1dde8:	d9e5      	bls.n	1ddb6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1ddea:	693b      	ldr	r3, [r7, #16]
   1ddec:	b2db      	uxtb	r3, r3
   1ddee:	2202      	movs	r2, #2
   1ddf0:	4013      	ands	r3, r2
   1ddf2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1ddf4:	687b      	ldr	r3, [r7, #4]
   1ddf6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1ddf8:	4b29      	ldr	r3, [pc, #164]	; (1dea0 <mmc_cmd8+0x120>)
   1ddfa:	681b      	ldr	r3, [r3, #0]
   1ddfc:	330e      	adds	r3, #14
   1ddfe:	0018      	movs	r0, r3
   1de00:	230c      	movs	r3, #12
   1de02:	223e      	movs	r2, #62	; 0x3e
   1de04:	2180      	movs	r1, #128	; 0x80
   1de06:	4c27      	ldr	r4, [pc, #156]	; (1dea4 <mmc_cmd8+0x124>)
   1de08:	47a0      	blx	r4
   1de0a:	0002      	movs	r2, r0
   1de0c:	4b26      	ldr	r3, [pc, #152]	; (1dea8 <mmc_cmd8+0x128>)
   1de0e:	429a      	cmp	r2, r3
   1de10:	d135      	bne.n	1de7e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1de12:	e014      	b.n	1de3e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1de14:	230c      	movs	r3, #12
   1de16:	18fb      	adds	r3, r7, r3
   1de18:	0018      	movs	r0, r3
   1de1a:	4b20      	ldr	r3, [pc, #128]	; (1de9c <mmc_cmd8+0x11c>)
   1de1c:	4798      	blx	r3
   1de1e:	0003      	movs	r3, r0
   1de20:	001a      	movs	r2, r3
   1de22:	2301      	movs	r3, #1
   1de24:	4053      	eors	r3, r2
   1de26:	b2db      	uxtb	r3, r3
   1de28:	2b00      	cmp	r3, #0
   1de2a:	d001      	beq.n	1de30 <mmc_cmd8+0xb0>
				return false;
   1de2c:	2300      	movs	r3, #0
   1de2e:	e02c      	b.n	1de8a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1de30:	2316      	movs	r3, #22
   1de32:	18fb      	adds	r3, r7, r3
   1de34:	881a      	ldrh	r2, [r3, #0]
   1de36:	2316      	movs	r3, #22
   1de38:	18fb      	adds	r3, r7, r3
   1de3a:	3201      	adds	r2, #1
   1de3c:	801a      	strh	r2, [r3, #0]
   1de3e:	2316      	movs	r3, #22
   1de40:	18fb      	adds	r3, r7, r3
   1de42:	881b      	ldrh	r3, [r3, #0]
   1de44:	2b35      	cmp	r3, #53	; 0x35
   1de46:	d9e5      	bls.n	1de14 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1de48:	4b15      	ldr	r3, [pc, #84]	; (1dea0 <mmc_cmd8+0x120>)
   1de4a:	681b      	ldr	r3, [r3, #0]
   1de4c:	68fa      	ldr	r2, [r7, #12]
   1de4e:	0852      	lsrs	r2, r2, #1
   1de50:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1de52:	e014      	b.n	1de7e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1de54:	230c      	movs	r3, #12
   1de56:	18fb      	adds	r3, r7, r3
   1de58:	0018      	movs	r0, r3
   1de5a:	4b10      	ldr	r3, [pc, #64]	; (1de9c <mmc_cmd8+0x11c>)
   1de5c:	4798      	blx	r3
   1de5e:	0003      	movs	r3, r0
   1de60:	001a      	movs	r2, r3
   1de62:	2301      	movs	r3, #1
   1de64:	4053      	eors	r3, r2
   1de66:	b2db      	uxtb	r3, r3
   1de68:	2b00      	cmp	r3, #0
   1de6a:	d001      	beq.n	1de70 <mmc_cmd8+0xf0>
			return false;
   1de6c:	2300      	movs	r3, #0
   1de6e:	e00c      	b.n	1de8a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1de70:	2316      	movs	r3, #22
   1de72:	18fb      	adds	r3, r7, r3
   1de74:	881a      	ldrh	r2, [r3, #0]
   1de76:	2316      	movs	r3, #22
   1de78:	18fb      	adds	r3, r7, r3
   1de7a:	3201      	adds	r2, #1
   1de7c:	801a      	strh	r2, [r3, #0]
   1de7e:	2316      	movs	r3, #22
   1de80:	18fb      	adds	r3, r7, r3
   1de82:	881b      	ldrh	r3, [r3, #0]
   1de84:	2b7f      	cmp	r3, #127	; 0x7f
   1de86:	d9e5      	bls.n	1de54 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1de88:	2301      	movs	r3, #1
}
   1de8a:	0018      	movs	r0, r3
   1de8c:	46bd      	mov	sp, r7
   1de8e:	b007      	add	sp, #28
   1de90:	bd90      	pop	{r4, r7, pc}
   1de92:	46c0      	nop			; (mov r8, r8)
   1de94:	00081108 	.word	0x00081108
   1de98:	0001f619 	.word	0x0001f619
   1de9c:	0001f845 	.word	0x0001f845
   1dea0:	200040a0 	.word	0x200040a0
   1dea4:	0001da19 	.word	0x0001da19
   1dea8:	00000fff 	.word	0x00000fff

0001deac <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1deac:	b590      	push	{r4, r7, lr}
   1deae:	b083      	sub	sp, #12
   1deb0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1deb2:	4b15      	ldr	r3, [pc, #84]	; (1df08 <sd_mmc_cmd9_spi+0x5c>)
   1deb4:	681b      	ldr	r3, [r3, #0]
   1deb6:	891b      	ldrh	r3, [r3, #8]
   1deb8:	0419      	lsls	r1, r3, #16
   1deba:	4814      	ldr	r0, [pc, #80]	; (1df0c <sd_mmc_cmd9_spi+0x60>)
   1debc:	2301      	movs	r3, #1
   1debe:	9300      	str	r3, [sp, #0]
   1dec0:	2301      	movs	r3, #1
   1dec2:	2210      	movs	r2, #16
   1dec4:	4c12      	ldr	r4, [pc, #72]	; (1df10 <sd_mmc_cmd9_spi+0x64>)
   1dec6:	47a0      	blx	r4
   1dec8:	0003      	movs	r3, r0
   1deca:	001a      	movs	r2, r3
   1decc:	2301      	movs	r3, #1
   1dece:	4053      	eors	r3, r2
   1ded0:	b2db      	uxtb	r3, r3
   1ded2:	2b00      	cmp	r3, #0
   1ded4:	d001      	beq.n	1deda <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1ded6:	2300      	movs	r3, #0
   1ded8:	e012      	b.n	1df00 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1deda:	4b0b      	ldr	r3, [pc, #44]	; (1df08 <sd_mmc_cmd9_spi+0x5c>)
   1dedc:	681b      	ldr	r3, [r3, #0]
   1dede:	330e      	adds	r3, #14
   1dee0:	2101      	movs	r1, #1
   1dee2:	0018      	movs	r0, r3
   1dee4:	4b0b      	ldr	r3, [pc, #44]	; (1df14 <sd_mmc_cmd9_spi+0x68>)
   1dee6:	4798      	blx	r3
   1dee8:	0003      	movs	r3, r0
   1deea:	001a      	movs	r2, r3
   1deec:	2301      	movs	r3, #1
   1deee:	4053      	eors	r3, r2
   1def0:	b2db      	uxtb	r3, r3
   1def2:	2b00      	cmp	r3, #0
   1def4:	d001      	beq.n	1defa <sd_mmc_cmd9_spi+0x4e>
		return false;
   1def6:	2300      	movs	r3, #0
   1def8:	e002      	b.n	1df00 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1defa:	4b07      	ldr	r3, [pc, #28]	; (1df18 <sd_mmc_cmd9_spi+0x6c>)
   1defc:	4798      	blx	r3
   1defe:	0003      	movs	r3, r0
}
   1df00:	0018      	movs	r0, r3
   1df02:	46bd      	mov	sp, r7
   1df04:	b001      	add	sp, #4
   1df06:	bd90      	pop	{r4, r7, pc}
   1df08:	200040a0 	.word	0x200040a0
   1df0c:	00081109 	.word	0x00081109
   1df10:	0001f619 	.word	0x0001f619
   1df14:	0001f8e9 	.word	0x0001f8e9
   1df18:	0001f98d 	.word	0x0001f98d

0001df1c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1df1c:	b5b0      	push	{r4, r5, r7, lr}
   1df1e:	b084      	sub	sp, #16
   1df20:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1df22:	4b45      	ldr	r3, [pc, #276]	; (1e038 <mmc_decode_csd+0x11c>)
   1df24:	681b      	ldr	r3, [r3, #0]
   1df26:	330e      	adds	r3, #14
   1df28:	0018      	movs	r0, r3
   1df2a:	2304      	movs	r3, #4
   1df2c:	227a      	movs	r2, #122	; 0x7a
   1df2e:	2180      	movs	r1, #128	; 0x80
   1df30:	4c42      	ldr	r4, [pc, #264]	; (1e03c <mmc_decode_csd+0x120>)
   1df32:	47a0      	blx	r4
   1df34:	0003      	movs	r3, r0
   1df36:	2b02      	cmp	r3, #2
   1df38:	d011      	beq.n	1df5e <mmc_decode_csd+0x42>
   1df3a:	d802      	bhi.n	1df42 <mmc_decode_csd+0x26>
   1df3c:	2b01      	cmp	r3, #1
   1df3e:	d009      	beq.n	1df54 <mmc_decode_csd+0x38>
   1df40:	e003      	b.n	1df4a <mmc_decode_csd+0x2e>
   1df42:	2b03      	cmp	r3, #3
   1df44:	d010      	beq.n	1df68 <mmc_decode_csd+0x4c>
   1df46:	2b04      	cmp	r3, #4
   1df48:	d013      	beq.n	1df72 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1df4a:	4b3b      	ldr	r3, [pc, #236]	; (1e038 <mmc_decode_csd+0x11c>)
   1df4c:	681b      	ldr	r3, [r3, #0]
   1df4e:	2212      	movs	r2, #18
   1df50:	731a      	strb	r2, [r3, #12]
		break;
   1df52:	e013      	b.n	1df7c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1df54:	4b38      	ldr	r3, [pc, #224]	; (1e038 <mmc_decode_csd+0x11c>)
   1df56:	681b      	ldr	r3, [r3, #0]
   1df58:	2214      	movs	r2, #20
   1df5a:	731a      	strb	r2, [r3, #12]
		break;
   1df5c:	e00e      	b.n	1df7c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1df5e:	4b36      	ldr	r3, [pc, #216]	; (1e038 <mmc_decode_csd+0x11c>)
   1df60:	681b      	ldr	r3, [r3, #0]
   1df62:	2222      	movs	r2, #34	; 0x22
   1df64:	731a      	strb	r2, [r3, #12]
		break;
   1df66:	e009      	b.n	1df7c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1df68:	4b33      	ldr	r3, [pc, #204]	; (1e038 <mmc_decode_csd+0x11c>)
   1df6a:	681b      	ldr	r3, [r3, #0]
   1df6c:	2230      	movs	r2, #48	; 0x30
   1df6e:	731a      	strb	r2, [r3, #12]
		break;
   1df70:	e004      	b.n	1df7c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1df72:	4b31      	ldr	r3, [pc, #196]	; (1e038 <mmc_decode_csd+0x11c>)
   1df74:	681b      	ldr	r3, [r3, #0]
   1df76:	2240      	movs	r2, #64	; 0x40
   1df78:	731a      	strb	r2, [r3, #12]
		break;
   1df7a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1df7c:	4b2e      	ldr	r3, [pc, #184]	; (1e038 <mmc_decode_csd+0x11c>)
   1df7e:	681b      	ldr	r3, [r3, #0]
   1df80:	330e      	adds	r3, #14
   1df82:	0018      	movs	r0, r3
   1df84:	2308      	movs	r3, #8
   1df86:	2260      	movs	r2, #96	; 0x60
   1df88:	2180      	movs	r1, #128	; 0x80
   1df8a:	4c2c      	ldr	r4, [pc, #176]	; (1e03c <mmc_decode_csd+0x120>)
   1df8c:	47a0      	blx	r4
   1df8e:	0003      	movs	r3, r0
   1df90:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1df92:	68fb      	ldr	r3, [r7, #12]
   1df94:	2207      	movs	r2, #7
   1df96:	401a      	ands	r2, r3
   1df98:	4b29      	ldr	r3, [pc, #164]	; (1e040 <mmc_decode_csd+0x124>)
   1df9a:	0092      	lsls	r2, r2, #2
   1df9c:	58d3      	ldr	r3, [r2, r3]
   1df9e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1dfa0:	68fb      	ldr	r3, [r7, #12]
   1dfa2:	08db      	lsrs	r3, r3, #3
   1dfa4:	220f      	movs	r2, #15
   1dfa6:	401a      	ands	r2, r3
   1dfa8:	4b26      	ldr	r3, [pc, #152]	; (1e044 <mmc_decode_csd+0x128>)
   1dfaa:	0092      	lsls	r2, r2, #2
   1dfac:	58d3      	ldr	r3, [r2, r3]
   1dfae:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1dfb0:	4b21      	ldr	r3, [pc, #132]	; (1e038 <mmc_decode_csd+0x11c>)
   1dfb2:	681b      	ldr	r3, [r3, #0]
   1dfb4:	68ba      	ldr	r2, [r7, #8]
   1dfb6:	6879      	ldr	r1, [r7, #4]
   1dfb8:	434a      	muls	r2, r1
   1dfba:	21fa      	movs	r1, #250	; 0xfa
   1dfbc:	0089      	lsls	r1, r1, #2
   1dfbe:	434a      	muls	r2, r1
   1dfc0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1dfc2:	4b1d      	ldr	r3, [pc, #116]	; (1e038 <mmc_decode_csd+0x11c>)
   1dfc4:	681b      	ldr	r3, [r3, #0]
   1dfc6:	330e      	adds	r3, #14
   1dfc8:	0018      	movs	r0, r3
   1dfca:	230c      	movs	r3, #12
   1dfcc:	223e      	movs	r2, #62	; 0x3e
   1dfce:	2180      	movs	r1, #128	; 0x80
   1dfd0:	4c1a      	ldr	r4, [pc, #104]	; (1e03c <mmc_decode_csd+0x120>)
   1dfd2:	47a0      	blx	r4
   1dfd4:	0002      	movs	r2, r0
   1dfd6:	4b1c      	ldr	r3, [pc, #112]	; (1e048 <mmc_decode_csd+0x12c>)
   1dfd8:	429a      	cmp	r2, r3
   1dfda:	d028      	beq.n	1e02e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1dfdc:	4b16      	ldr	r3, [pc, #88]	; (1e038 <mmc_decode_csd+0x11c>)
   1dfde:	681b      	ldr	r3, [r3, #0]
   1dfe0:	330e      	adds	r3, #14
   1dfe2:	0018      	movs	r0, r3
   1dfe4:	230c      	movs	r3, #12
   1dfe6:	223e      	movs	r2, #62	; 0x3e
   1dfe8:	2180      	movs	r1, #128	; 0x80
   1dfea:	4c14      	ldr	r4, [pc, #80]	; (1e03c <mmc_decode_csd+0x120>)
   1dfec:	47a0      	blx	r4
   1dfee:	0003      	movs	r3, r0
   1dff0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1dff2:	4b11      	ldr	r3, [pc, #68]	; (1e038 <mmc_decode_csd+0x11c>)
   1dff4:	681b      	ldr	r3, [r3, #0]
   1dff6:	330e      	adds	r3, #14
   1dff8:	0018      	movs	r0, r3
   1dffa:	2303      	movs	r3, #3
   1dffc:	222f      	movs	r2, #47	; 0x2f
   1dffe:	2180      	movs	r1, #128	; 0x80
   1e000:	4d0e      	ldr	r5, [pc, #56]	; (1e03c <mmc_decode_csd+0x120>)
   1e002:	47a8      	blx	r5
   1e004:	0003      	movs	r3, r0
   1e006:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e008:	409c      	lsls	r4, r3
   1e00a:	0023      	movs	r3, r4
   1e00c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e00e:	4b0a      	ldr	r3, [pc, #40]	; (1e038 <mmc_decode_csd+0x11c>)
   1e010:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e012:	4b09      	ldr	r3, [pc, #36]	; (1e038 <mmc_decode_csd+0x11c>)
   1e014:	681b      	ldr	r3, [r3, #0]
   1e016:	330e      	adds	r3, #14
   1e018:	0018      	movs	r0, r3
   1e01a:	2304      	movs	r3, #4
   1e01c:	2250      	movs	r2, #80	; 0x50
   1e01e:	2180      	movs	r1, #128	; 0x80
   1e020:	4d06      	ldr	r5, [pc, #24]	; (1e03c <mmc_decode_csd+0x120>)
   1e022:	47a8      	blx	r5
   1e024:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e026:	683b      	ldr	r3, [r7, #0]
   1e028:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e02a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e02c:	6063      	str	r3, [r4, #4]
	}
}
   1e02e:	46c0      	nop			; (mov r8, r8)
   1e030:	46bd      	mov	sp, r7
   1e032:	b004      	add	sp, #16
   1e034:	bdb0      	pop	{r4, r5, r7, pc}
   1e036:	46c0      	nop			; (mov r8, r8)
   1e038:	200040a0 	.word	0x200040a0
   1e03c:	0001da19 	.word	0x0001da19
   1e040:	0003770c 	.word	0x0003770c
   1e044:	00037768 	.word	0x00037768
   1e048:	00000fff 	.word	0x00000fff

0001e04c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e04c:	b5b0      	push	{r4, r5, r7, lr}
   1e04e:	b084      	sub	sp, #16
   1e050:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e052:	4b35      	ldr	r3, [pc, #212]	; (1e128 <sd_decode_csd+0xdc>)
   1e054:	681b      	ldr	r3, [r3, #0]
   1e056:	330e      	adds	r3, #14
   1e058:	0018      	movs	r0, r3
   1e05a:	2308      	movs	r3, #8
   1e05c:	2260      	movs	r2, #96	; 0x60
   1e05e:	2180      	movs	r1, #128	; 0x80
   1e060:	4c32      	ldr	r4, [pc, #200]	; (1e12c <sd_decode_csd+0xe0>)
   1e062:	47a0      	blx	r4
   1e064:	0003      	movs	r3, r0
   1e066:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e068:	68fb      	ldr	r3, [r7, #12]
   1e06a:	2207      	movs	r2, #7
   1e06c:	401a      	ands	r2, r3
   1e06e:	4b30      	ldr	r3, [pc, #192]	; (1e130 <sd_decode_csd+0xe4>)
   1e070:	0092      	lsls	r2, r2, #2
   1e072:	58d3      	ldr	r3, [r2, r3]
   1e074:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e076:	68fb      	ldr	r3, [r7, #12]
   1e078:	08db      	lsrs	r3, r3, #3
   1e07a:	220f      	movs	r2, #15
   1e07c:	401a      	ands	r2, r3
   1e07e:	4b2d      	ldr	r3, [pc, #180]	; (1e134 <sd_decode_csd+0xe8>)
   1e080:	0092      	lsls	r2, r2, #2
   1e082:	58d3      	ldr	r3, [r2, r3]
   1e084:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e086:	4b28      	ldr	r3, [pc, #160]	; (1e128 <sd_decode_csd+0xdc>)
   1e088:	681b      	ldr	r3, [r3, #0]
   1e08a:	68ba      	ldr	r2, [r7, #8]
   1e08c:	6879      	ldr	r1, [r7, #4]
   1e08e:	434a      	muls	r2, r1
   1e090:	21fa      	movs	r1, #250	; 0xfa
   1e092:	0089      	lsls	r1, r1, #2
   1e094:	434a      	muls	r2, r1
   1e096:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e098:	4b23      	ldr	r3, [pc, #140]	; (1e128 <sd_decode_csd+0xdc>)
   1e09a:	681b      	ldr	r3, [r3, #0]
   1e09c:	330e      	adds	r3, #14
   1e09e:	0018      	movs	r0, r3
   1e0a0:	2302      	movs	r3, #2
   1e0a2:	227e      	movs	r2, #126	; 0x7e
   1e0a4:	2180      	movs	r1, #128	; 0x80
   1e0a6:	4c21      	ldr	r4, [pc, #132]	; (1e12c <sd_decode_csd+0xe0>)
   1e0a8:	47a0      	blx	r4
   1e0aa:	1e03      	subs	r3, r0, #0
   1e0ac:	d00f      	beq.n	1e0ce <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e0ae:	4b1e      	ldr	r3, [pc, #120]	; (1e128 <sd_decode_csd+0xdc>)
   1e0b0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e0b2:	4b1d      	ldr	r3, [pc, #116]	; (1e128 <sd_decode_csd+0xdc>)
   1e0b4:	681b      	ldr	r3, [r3, #0]
   1e0b6:	330e      	adds	r3, #14
   1e0b8:	0018      	movs	r0, r3
   1e0ba:	2316      	movs	r3, #22
   1e0bc:	2230      	movs	r2, #48	; 0x30
   1e0be:	2180      	movs	r1, #128	; 0x80
   1e0c0:	4d1a      	ldr	r5, [pc, #104]	; (1e12c <sd_decode_csd+0xe0>)
   1e0c2:	47a8      	blx	r5
   1e0c4:	0003      	movs	r3, r0
				* 512;
   1e0c6:	3301      	adds	r3, #1
   1e0c8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e0ca:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e0cc:	e028      	b.n	1e120 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e0ce:	4b16      	ldr	r3, [pc, #88]	; (1e128 <sd_decode_csd+0xdc>)
   1e0d0:	681b      	ldr	r3, [r3, #0]
   1e0d2:	330e      	adds	r3, #14
   1e0d4:	0018      	movs	r0, r3
   1e0d6:	230c      	movs	r3, #12
   1e0d8:	223e      	movs	r2, #62	; 0x3e
   1e0da:	2180      	movs	r1, #128	; 0x80
   1e0dc:	4c13      	ldr	r4, [pc, #76]	; (1e12c <sd_decode_csd+0xe0>)
   1e0de:	47a0      	blx	r4
   1e0e0:	0003      	movs	r3, r0
   1e0e2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e0e4:	4b10      	ldr	r3, [pc, #64]	; (1e128 <sd_decode_csd+0xdc>)
   1e0e6:	681b      	ldr	r3, [r3, #0]
   1e0e8:	330e      	adds	r3, #14
   1e0ea:	0018      	movs	r0, r3
   1e0ec:	2303      	movs	r3, #3
   1e0ee:	222f      	movs	r2, #47	; 0x2f
   1e0f0:	2180      	movs	r1, #128	; 0x80
   1e0f2:	4d0e      	ldr	r5, [pc, #56]	; (1e12c <sd_decode_csd+0xe0>)
   1e0f4:	47a8      	blx	r5
   1e0f6:	0003      	movs	r3, r0
   1e0f8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e0fa:	409c      	lsls	r4, r3
   1e0fc:	0023      	movs	r3, r4
   1e0fe:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e100:	4b09      	ldr	r3, [pc, #36]	; (1e128 <sd_decode_csd+0xdc>)
   1e102:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e104:	4b08      	ldr	r3, [pc, #32]	; (1e128 <sd_decode_csd+0xdc>)
   1e106:	681b      	ldr	r3, [r3, #0]
   1e108:	330e      	adds	r3, #14
   1e10a:	0018      	movs	r0, r3
   1e10c:	2304      	movs	r3, #4
   1e10e:	2250      	movs	r2, #80	; 0x50
   1e110:	2180      	movs	r1, #128	; 0x80
   1e112:	4d06      	ldr	r5, [pc, #24]	; (1e12c <sd_decode_csd+0xe0>)
   1e114:	47a8      	blx	r5
   1e116:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e118:	683b      	ldr	r3, [r7, #0]
   1e11a:	4093      	lsls	r3, r2
				/ 1024;
   1e11c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e11e:	6063      	str	r3, [r4, #4]
}
   1e120:	46c0      	nop			; (mov r8, r8)
   1e122:	46bd      	mov	sp, r7
   1e124:	b004      	add	sp, #16
   1e126:	bdb0      	pop	{r4, r5, r7, pc}
   1e128:	200040a0 	.word	0x200040a0
   1e12c:	0001da19 	.word	0x0001da19
   1e130:	0003770c 	.word	0x0003770c
   1e134:	00037728 	.word	0x00037728

0001e138 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e138:	b580      	push	{r7, lr}
   1e13a:	b082      	sub	sp, #8
   1e13c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e13e:	4b11      	ldr	r3, [pc, #68]	; (1e184 <sd_mmc_cmd13+0x4c>)
   1e140:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e142:	4b11      	ldr	r3, [pc, #68]	; (1e188 <sd_mmc_cmd13+0x50>)
   1e144:	2100      	movs	r1, #0
   1e146:	0018      	movs	r0, r3
   1e148:	4b10      	ldr	r3, [pc, #64]	; (1e18c <sd_mmc_cmd13+0x54>)
   1e14a:	4798      	blx	r3
   1e14c:	0003      	movs	r3, r0
   1e14e:	001a      	movs	r2, r3
   1e150:	2301      	movs	r3, #1
   1e152:	4053      	eors	r3, r2
   1e154:	b2db      	uxtb	r3, r3
   1e156:	2b00      	cmp	r3, #0
   1e158:	d001      	beq.n	1e15e <sd_mmc_cmd13+0x26>
				return false;
   1e15a:	2300      	movs	r3, #0
   1e15c:	e00e      	b.n	1e17c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e15e:	4b0c      	ldr	r3, [pc, #48]	; (1e190 <sd_mmc_cmd13+0x58>)
   1e160:	4798      	blx	r3
   1e162:	0002      	movs	r2, r0
   1e164:	23ff      	movs	r3, #255	; 0xff
   1e166:	4013      	ands	r3, r2
   1e168:	d006      	beq.n	1e178 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e16a:	687b      	ldr	r3, [r7, #4]
   1e16c:	1e5a      	subs	r2, r3, #1
   1e16e:	607a      	str	r2, [r7, #4]
   1e170:	2b00      	cmp	r3, #0
   1e172:	d1e6      	bne.n	1e142 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e174:	2300      	movs	r3, #0
   1e176:	e001      	b.n	1e17c <sd_mmc_cmd13+0x44>
				break;
   1e178:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e17a:	2301      	movs	r3, #1
}
   1e17c:	0018      	movs	r0, r3
   1e17e:	46bd      	mov	sp, r7
   1e180:	b002      	add	sp, #8
   1e182:	bd80      	pop	{r7, pc}
   1e184:	00030d40 	.word	0x00030d40
   1e188:	00001b0d 	.word	0x00001b0d
   1e18c:	0001f5f1 	.word	0x0001f5f1
   1e190:	0001f831 	.word	0x0001f831

0001e194 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e194:	b590      	push	{r4, r7, lr}
   1e196:	b085      	sub	sp, #20
   1e198:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e19a:	4b38      	ldr	r3, [pc, #224]	; (1e27c <sd_acmd51+0xe8>)
   1e19c:	681b      	ldr	r3, [r3, #0]
   1e19e:	891b      	ldrh	r3, [r3, #8]
   1e1a0:	041b      	lsls	r3, r3, #16
   1e1a2:	4a37      	ldr	r2, [pc, #220]	; (1e280 <sd_acmd51+0xec>)
   1e1a4:	0019      	movs	r1, r3
   1e1a6:	0010      	movs	r0, r2
   1e1a8:	4b36      	ldr	r3, [pc, #216]	; (1e284 <sd_acmd51+0xf0>)
   1e1aa:	4798      	blx	r3
   1e1ac:	0003      	movs	r3, r0
   1e1ae:	001a      	movs	r2, r3
   1e1b0:	2301      	movs	r3, #1
   1e1b2:	4053      	eors	r3, r2
   1e1b4:	b2db      	uxtb	r3, r3
   1e1b6:	2b00      	cmp	r3, #0
   1e1b8:	d001      	beq.n	1e1be <sd_acmd51+0x2a>
		return false;
   1e1ba:	2300      	movs	r3, #0
   1e1bc:	e059      	b.n	1e272 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e1be:	4832      	ldr	r0, [pc, #200]	; (1e288 <sd_acmd51+0xf4>)
   1e1c0:	2301      	movs	r3, #1
   1e1c2:	9300      	str	r3, [sp, #0]
   1e1c4:	2301      	movs	r3, #1
   1e1c6:	2208      	movs	r2, #8
   1e1c8:	2100      	movs	r1, #0
   1e1ca:	4c30      	ldr	r4, [pc, #192]	; (1e28c <sd_acmd51+0xf8>)
   1e1cc:	47a0      	blx	r4
   1e1ce:	0003      	movs	r3, r0
   1e1d0:	001a      	movs	r2, r3
   1e1d2:	2301      	movs	r3, #1
   1e1d4:	4053      	eors	r3, r2
   1e1d6:	b2db      	uxtb	r3, r3
   1e1d8:	2b00      	cmp	r3, #0
   1e1da:	d001      	beq.n	1e1e0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e1dc:	2300      	movs	r3, #0
   1e1de:	e048      	b.n	1e272 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e1e0:	003b      	movs	r3, r7
   1e1e2:	2101      	movs	r1, #1
   1e1e4:	0018      	movs	r0, r3
   1e1e6:	4b2a      	ldr	r3, [pc, #168]	; (1e290 <sd_acmd51+0xfc>)
   1e1e8:	4798      	blx	r3
   1e1ea:	0003      	movs	r3, r0
   1e1ec:	001a      	movs	r2, r3
   1e1ee:	2301      	movs	r3, #1
   1e1f0:	4053      	eors	r3, r2
   1e1f2:	b2db      	uxtb	r3, r3
   1e1f4:	2b00      	cmp	r3, #0
   1e1f6:	d001      	beq.n	1e1fc <sd_acmd51+0x68>
		return false;
   1e1f8:	2300      	movs	r3, #0
   1e1fa:	e03a      	b.n	1e272 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e1fc:	4b25      	ldr	r3, [pc, #148]	; (1e294 <sd_acmd51+0x100>)
   1e1fe:	4798      	blx	r3
   1e200:	0003      	movs	r3, r0
   1e202:	001a      	movs	r2, r3
   1e204:	2301      	movs	r3, #1
   1e206:	4053      	eors	r3, r2
   1e208:	b2db      	uxtb	r3, r3
   1e20a:	2b00      	cmp	r3, #0
   1e20c:	d001      	beq.n	1e212 <sd_acmd51+0x7e>
		return false;
   1e20e:	2300      	movs	r3, #0
   1e210:	e02f      	b.n	1e272 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e212:	0038      	movs	r0, r7
   1e214:	2304      	movs	r3, #4
   1e216:	2238      	movs	r2, #56	; 0x38
   1e218:	2140      	movs	r1, #64	; 0x40
   1e21a:	4c1f      	ldr	r4, [pc, #124]	; (1e298 <sd_acmd51+0x104>)
   1e21c:	47a0      	blx	r4
   1e21e:	0003      	movs	r3, r0
   1e220:	2b01      	cmp	r3, #1
   1e222:	d008      	beq.n	1e236 <sd_acmd51+0xa2>
   1e224:	d302      	bcc.n	1e22c <sd_acmd51+0x98>
   1e226:	2b02      	cmp	r3, #2
   1e228:	d00a      	beq.n	1e240 <sd_acmd51+0xac>
   1e22a:	e01c      	b.n	1e266 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e22c:	4b13      	ldr	r3, [pc, #76]	; (1e27c <sd_acmd51+0xe8>)
   1e22e:	681b      	ldr	r3, [r3, #0]
   1e230:	2210      	movs	r2, #16
   1e232:	731a      	strb	r2, [r3, #12]
		break;
   1e234:	e01c      	b.n	1e270 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e236:	4b11      	ldr	r3, [pc, #68]	; (1e27c <sd_acmd51+0xe8>)
   1e238:	681b      	ldr	r3, [r3, #0]
   1e23a:	221a      	movs	r2, #26
   1e23c:	731a      	strb	r2, [r3, #12]
		break;
   1e23e:	e017      	b.n	1e270 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e240:	0038      	movs	r0, r7
   1e242:	2301      	movs	r3, #1
   1e244:	222f      	movs	r2, #47	; 0x2f
   1e246:	2140      	movs	r1, #64	; 0x40
   1e248:	4c13      	ldr	r4, [pc, #76]	; (1e298 <sd_acmd51+0x104>)
   1e24a:	47a0      	blx	r4
   1e24c:	0003      	movs	r3, r0
   1e24e:	2b01      	cmp	r3, #1
   1e250:	d104      	bne.n	1e25c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e252:	4b0a      	ldr	r3, [pc, #40]	; (1e27c <sd_acmd51+0xe8>)
   1e254:	681b      	ldr	r3, [r3, #0]
   1e256:	2230      	movs	r2, #48	; 0x30
   1e258:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e25a:	e009      	b.n	1e270 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e25c:	4b07      	ldr	r3, [pc, #28]	; (1e27c <sd_acmd51+0xe8>)
   1e25e:	681b      	ldr	r3, [r3, #0]
   1e260:	2220      	movs	r2, #32
   1e262:	731a      	strb	r2, [r3, #12]
		break;
   1e264:	e004      	b.n	1e270 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e266:	4b05      	ldr	r3, [pc, #20]	; (1e27c <sd_acmd51+0xe8>)
   1e268:	681b      	ldr	r3, [r3, #0]
   1e26a:	2210      	movs	r2, #16
   1e26c:	731a      	strb	r2, [r3, #12]
		break;
   1e26e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e270:	2301      	movs	r3, #1
}
   1e272:	0018      	movs	r0, r3
   1e274:	46bd      	mov	sp, r7
   1e276:	b003      	add	sp, #12
   1e278:	bd90      	pop	{r4, r7, pc}
   1e27a:	46c0      	nop			; (mov r8, r8)
   1e27c:	200040a0 	.word	0x200040a0
   1e280:	00001137 	.word	0x00001137
   1e284:	0001f5f1 	.word	0x0001f5f1
   1e288:	00081133 	.word	0x00081133
   1e28c:	0001f619 	.word	0x0001f619
   1e290:	0001f8e9 	.word	0x0001f8e9
   1e294:	0001f98d 	.word	0x0001f98d
   1e298:	0001da19 	.word	0x0001da19

0001e29c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e29c:	b580      	push	{r7, lr}
   1e29e:	b082      	sub	sp, #8
   1e2a0:	af00      	add	r7, sp, #0
   1e2a2:	0002      	movs	r2, r0
   1e2a4:	1dfb      	adds	r3, r7, #7
   1e2a6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e2a8:	1dfb      	adds	r3, r7, #7
   1e2aa:	781b      	ldrb	r3, [r3, #0]
   1e2ac:	2b00      	cmp	r3, #0
   1e2ae:	d001      	beq.n	1e2b4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e2b0:	2304      	movs	r3, #4
   1e2b2:	e047      	b.n	1e344 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e2b4:	1dfb      	adds	r3, r7, #7
   1e2b6:	781b      	ldrb	r3, [r3, #0]
   1e2b8:	4a24      	ldr	r2, [pc, #144]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e2ba:	015b      	lsls	r3, r3, #5
   1e2bc:	18d3      	adds	r3, r2, r3
   1e2be:	330a      	adds	r3, #10
   1e2c0:	781b      	ldrb	r3, [r3, #0]
   1e2c2:	2b04      	cmp	r3, #4
   1e2c4:	d008      	beq.n	1e2d8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e2c6:	1dfb      	adds	r3, r7, #7
   1e2c8:	781b      	ldrb	r3, [r3, #0]
   1e2ca:	4a20      	ldr	r2, [pc, #128]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e2cc:	015b      	lsls	r3, r3, #5
   1e2ce:	18d3      	adds	r3, r2, r3
   1e2d0:	330a      	adds	r3, #10
   1e2d2:	781b      	ldrb	r3, [r3, #0]
   1e2d4:	2b03      	cmp	r3, #3
   1e2d6:	d11d      	bne.n	1e314 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e2d8:	1dfb      	adds	r3, r7, #7
   1e2da:	781b      	ldrb	r3, [r3, #0]
   1e2dc:	4a1b      	ldr	r2, [pc, #108]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e2de:	015b      	lsls	r3, r3, #5
   1e2e0:	18d3      	adds	r3, r2, r3
   1e2e2:	330a      	adds	r3, #10
   1e2e4:	2202      	movs	r2, #2
   1e2e6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e2e8:	1dfb      	adds	r3, r7, #7
   1e2ea:	781a      	ldrb	r2, [r3, #0]
   1e2ec:	4b17      	ldr	r3, [pc, #92]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e2ee:	0152      	lsls	r2, r2, #5
   1e2f0:	4917      	ldr	r1, [pc, #92]	; (1e350 <sd_mmc_select_slot+0xb4>)
   1e2f2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e2f4:	1dfb      	adds	r3, r7, #7
   1e2f6:	781b      	ldrb	r3, [r3, #0]
   1e2f8:	4a14      	ldr	r2, [pc, #80]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e2fa:	015b      	lsls	r3, r3, #5
   1e2fc:	18d3      	adds	r3, r2, r3
   1e2fe:	330d      	adds	r3, #13
   1e300:	2201      	movs	r2, #1
   1e302:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e304:	1dfb      	adds	r3, r7, #7
   1e306:	781b      	ldrb	r3, [r3, #0]
   1e308:	4a10      	ldr	r2, [pc, #64]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e30a:	015b      	lsls	r3, r3, #5
   1e30c:	18d3      	adds	r3, r2, r3
   1e30e:	331e      	adds	r3, #30
   1e310:	2200      	movs	r2, #0
   1e312:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e314:	4b0f      	ldr	r3, [pc, #60]	; (1e354 <sd_mmc_select_slot+0xb8>)
   1e316:	1dfa      	adds	r2, r7, #7
   1e318:	7812      	ldrb	r2, [r2, #0]
   1e31a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e31c:	1dfb      	adds	r3, r7, #7
   1e31e:	781b      	ldrb	r3, [r3, #0]
   1e320:	015a      	lsls	r2, r3, #5
   1e322:	4b0a      	ldr	r3, [pc, #40]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e324:	18d2      	adds	r2, r2, r3
   1e326:	4b0c      	ldr	r3, [pc, #48]	; (1e358 <sd_mmc_select_slot+0xbc>)
   1e328:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e32a:	4b0c      	ldr	r3, [pc, #48]	; (1e35c <sd_mmc_select_slot+0xc0>)
   1e32c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e32e:	1dfb      	adds	r3, r7, #7
   1e330:	781b      	ldrb	r3, [r3, #0]
   1e332:	4a06      	ldr	r2, [pc, #24]	; (1e34c <sd_mmc_select_slot+0xb0>)
   1e334:	015b      	lsls	r3, r3, #5
   1e336:	18d3      	adds	r3, r2, r3
   1e338:	330a      	adds	r3, #10
   1e33a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e33c:	3b02      	subs	r3, #2
   1e33e:	425a      	negs	r2, r3
   1e340:	4153      	adcs	r3, r2
   1e342:	b2db      	uxtb	r3, r3
}
   1e344:	0018      	movs	r0, r3
   1e346:	46bd      	mov	sp, r7
   1e348:	b002      	add	sp, #8
   1e34a:	bd80      	pop	{r7, pc}
   1e34c:	2000407c 	.word	0x2000407c
   1e350:	00061a80 	.word	0x00061a80
   1e354:	2000409c 	.word	0x2000409c
   1e358:	200040a0 	.word	0x200040a0
   1e35c:	0001e361 	.word	0x0001e361

0001e360 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1e360:	b5b0      	push	{r4, r5, r7, lr}
   1e362:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e364:	4b09      	ldr	r3, [pc, #36]	; (1e38c <sd_mmc_configure_slot+0x2c>)
   1e366:	7818      	ldrb	r0, [r3, #0]
   1e368:	4b09      	ldr	r3, [pc, #36]	; (1e390 <sd_mmc_configure_slot+0x30>)
   1e36a:	681b      	ldr	r3, [r3, #0]
   1e36c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e36e:	4b08      	ldr	r3, [pc, #32]	; (1e390 <sd_mmc_configure_slot+0x30>)
   1e370:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e372:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e374:	4b06      	ldr	r3, [pc, #24]	; (1e390 <sd_mmc_configure_slot+0x30>)
   1e376:	681b      	ldr	r3, [r3, #0]
   1e378:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e37a:	1e5c      	subs	r4, r3, #1
   1e37c:	41a3      	sbcs	r3, r4
   1e37e:	b2db      	uxtb	r3, r3
   1e380:	4c04      	ldr	r4, [pc, #16]	; (1e394 <sd_mmc_configure_slot+0x34>)
   1e382:	47a0      	blx	r4
}
   1e384:	46c0      	nop			; (mov r8, r8)
   1e386:	46bd      	mov	sp, r7
   1e388:	bdb0      	pop	{r4, r5, r7, pc}
   1e38a:	46c0      	nop			; (mov r8, r8)
   1e38c:	2000409c 	.word	0x2000409c
   1e390:	200040a0 	.word	0x200040a0
   1e394:	0001f4d9 	.word	0x0001f4d9

0001e398 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1e398:	b580      	push	{r7, lr}
   1e39a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1e39c:	4b05      	ldr	r3, [pc, #20]	; (1e3b4 <sd_mmc_deselect_slot+0x1c>)
   1e39e:	781b      	ldrb	r3, [r3, #0]
   1e3a0:	2b00      	cmp	r3, #0
   1e3a2:	d104      	bne.n	1e3ae <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1e3a4:	4b03      	ldr	r3, [pc, #12]	; (1e3b4 <sd_mmc_deselect_slot+0x1c>)
   1e3a6:	781b      	ldrb	r3, [r3, #0]
   1e3a8:	0018      	movs	r0, r3
   1e3aa:	4b03      	ldr	r3, [pc, #12]	; (1e3b8 <sd_mmc_deselect_slot+0x20>)
   1e3ac:	4798      	blx	r3
	}
}
   1e3ae:	46c0      	nop			; (mov r8, r8)
   1e3b0:	46bd      	mov	sp, r7
   1e3b2:	bd80      	pop	{r7, pc}
   1e3b4:	2000409c 	.word	0x2000409c
   1e3b8:	0001f561 	.word	0x0001f561

0001e3bc <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1e3bc:	b580      	push	{r7, lr}
   1e3be:	b082      	sub	sp, #8
   1e3c0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1e3c2:	1dfb      	adds	r3, r7, #7
   1e3c4:	2200      	movs	r2, #0
   1e3c6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1e3c8:	4b59      	ldr	r3, [pc, #356]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e3ca:	681b      	ldr	r3, [r3, #0]
   1e3cc:	2201      	movs	r2, #1
   1e3ce:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1e3d0:	4b57      	ldr	r3, [pc, #348]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e3d2:	681b      	ldr	r3, [r3, #0]
   1e3d4:	2200      	movs	r2, #0
   1e3d6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1e3d8:	4b55      	ldr	r3, [pc, #340]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e3da:	681b      	ldr	r3, [r3, #0]
   1e3dc:	2200      	movs	r2, #0
   1e3de:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1e3e0:	4b54      	ldr	r3, [pc, #336]	; (1e534 <sd_mmc_spi_card_init+0x178>)
   1e3e2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e3e4:	2388      	movs	r3, #136	; 0x88
   1e3e6:	015b      	lsls	r3, r3, #5
   1e3e8:	2100      	movs	r1, #0
   1e3ea:	0018      	movs	r0, r3
   1e3ec:	4b52      	ldr	r3, [pc, #328]	; (1e538 <sd_mmc_spi_card_init+0x17c>)
   1e3ee:	4798      	blx	r3
   1e3f0:	0003      	movs	r3, r0
   1e3f2:	001a      	movs	r2, r3
   1e3f4:	2301      	movs	r3, #1
   1e3f6:	4053      	eors	r3, r2
   1e3f8:	b2db      	uxtb	r3, r3
   1e3fa:	2b00      	cmp	r3, #0
   1e3fc:	d001      	beq.n	1e402 <sd_mmc_spi_card_init+0x46>
		return false;
   1e3fe:	2300      	movs	r3, #0
   1e400:	e092      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1e402:	1dfb      	adds	r3, r7, #7
   1e404:	0018      	movs	r0, r3
   1e406:	4b4d      	ldr	r3, [pc, #308]	; (1e53c <sd_mmc_spi_card_init+0x180>)
   1e408:	4798      	blx	r3
   1e40a:	0003      	movs	r3, r0
   1e40c:	001a      	movs	r2, r3
   1e40e:	2301      	movs	r3, #1
   1e410:	4053      	eors	r3, r2
   1e412:	b2db      	uxtb	r3, r3
   1e414:	2b00      	cmp	r3, #0
   1e416:	d001      	beq.n	1e41c <sd_mmc_spi_card_init+0x60>
		return false;
   1e418:	2300      	movs	r3, #0
   1e41a:	e085      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1e41c:	4b48      	ldr	r3, [pc, #288]	; (1e540 <sd_mmc_spi_card_init+0x184>)
   1e41e:	4798      	blx	r3
   1e420:	0003      	movs	r3, r0
   1e422:	001a      	movs	r2, r3
   1e424:	2301      	movs	r3, #1
   1e426:	4053      	eors	r3, r2
   1e428:	b2db      	uxtb	r3, r3
   1e42a:	2b00      	cmp	r3, #0
   1e42c:	d001      	beq.n	1e432 <sd_mmc_spi_card_init+0x76>
		return false;
   1e42e:	2300      	movs	r3, #0
   1e430:	e07a      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e432:	4b3f      	ldr	r3, [pc, #252]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e434:	681b      	ldr	r3, [r3, #0]
   1e436:	7adb      	ldrb	r3, [r3, #11]
   1e438:	001a      	movs	r2, r3
   1e43a:	2301      	movs	r3, #1
   1e43c:	4013      	ands	r3, r2
   1e43e:	d021      	beq.n	1e484 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1e440:	1dfb      	adds	r3, r7, #7
   1e442:	781b      	ldrb	r3, [r3, #0]
   1e444:	0018      	movs	r0, r3
   1e446:	4b3f      	ldr	r3, [pc, #252]	; (1e544 <sd_mmc_spi_card_init+0x188>)
   1e448:	4798      	blx	r3
   1e44a:	0003      	movs	r3, r0
   1e44c:	001a      	movs	r2, r3
   1e44e:	2301      	movs	r3, #1
   1e450:	4053      	eors	r3, r2
   1e452:	b2db      	uxtb	r3, r3
   1e454:	2b00      	cmp	r3, #0
   1e456:	d007      	beq.n	1e468 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1e458:	4b35      	ldr	r3, [pc, #212]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e45a:	681b      	ldr	r3, [r3, #0]
   1e45c:	2202      	movs	r2, #2
   1e45e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1e460:	4b39      	ldr	r3, [pc, #228]	; (1e548 <sd_mmc_spi_card_init+0x18c>)
   1e462:	4798      	blx	r3
   1e464:	0003      	movs	r3, r0
   1e466:	e05f      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e468:	4b38      	ldr	r3, [pc, #224]	; (1e54c <sd_mmc_spi_card_init+0x190>)
   1e46a:	2100      	movs	r1, #0
   1e46c:	0018      	movs	r0, r3
   1e46e:	4b32      	ldr	r3, [pc, #200]	; (1e538 <sd_mmc_spi_card_init+0x17c>)
   1e470:	4798      	blx	r3
   1e472:	0003      	movs	r3, r0
   1e474:	001a      	movs	r2, r3
   1e476:	2301      	movs	r3, #1
   1e478:	4053      	eors	r3, r2
   1e47a:	b2db      	uxtb	r3, r3
   1e47c:	2b00      	cmp	r3, #0
   1e47e:	d001      	beq.n	1e484 <sd_mmc_spi_card_init+0xc8>
			return false;
   1e480:	2300      	movs	r3, #0
   1e482:	e051      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e484:	4b2a      	ldr	r3, [pc, #168]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e486:	681b      	ldr	r3, [r3, #0]
   1e488:	7adb      	ldrb	r3, [r3, #11]
   1e48a:	001a      	movs	r2, r3
   1e48c:	2301      	movs	r3, #1
   1e48e:	4013      	ands	r3, r2
   1e490:	d017      	beq.n	1e4c2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1e492:	4b2f      	ldr	r3, [pc, #188]	; (1e550 <sd_mmc_spi_card_init+0x194>)
   1e494:	4798      	blx	r3
   1e496:	0003      	movs	r3, r0
   1e498:	001a      	movs	r2, r3
   1e49a:	2301      	movs	r3, #1
   1e49c:	4053      	eors	r3, r2
   1e49e:	b2db      	uxtb	r3, r3
   1e4a0:	2b00      	cmp	r3, #0
   1e4a2:	d001      	beq.n	1e4a8 <sd_mmc_spi_card_init+0xec>
			return false;
   1e4a4:	2300      	movs	r3, #0
   1e4a6:	e03f      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1e4a8:	4b2a      	ldr	r3, [pc, #168]	; (1e554 <sd_mmc_spi_card_init+0x198>)
   1e4aa:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1e4ac:	4b2a      	ldr	r3, [pc, #168]	; (1e558 <sd_mmc_spi_card_init+0x19c>)
   1e4ae:	4798      	blx	r3
   1e4b0:	0003      	movs	r3, r0
   1e4b2:	001a      	movs	r2, r3
   1e4b4:	2301      	movs	r3, #1
   1e4b6:	4053      	eors	r3, r2
   1e4b8:	b2db      	uxtb	r3, r3
   1e4ba:	2b00      	cmp	r3, #0
   1e4bc:	d001      	beq.n	1e4c2 <sd_mmc_spi_card_init+0x106>
			return false;
   1e4be:	2300      	movs	r3, #0
   1e4c0:	e032      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e4c2:	4b1b      	ldr	r3, [pc, #108]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e4c4:	681b      	ldr	r3, [r3, #0]
   1e4c6:	7adb      	ldrb	r3, [r3, #11]
   1e4c8:	001a      	movs	r2, r3
   1e4ca:	2301      	movs	r3, #1
   1e4cc:	4013      	ands	r3, r2
   1e4ce:	d016      	beq.n	1e4fe <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1e4d0:	4b17      	ldr	r3, [pc, #92]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e4d2:	681b      	ldr	r3, [r3, #0]
   1e4d4:	7adb      	ldrb	r3, [r3, #11]
   1e4d6:	001a      	movs	r2, r3
   1e4d8:	2308      	movs	r3, #8
   1e4da:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e4dc:	d10f      	bne.n	1e4fe <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e4de:	2380      	movs	r3, #128	; 0x80
   1e4e0:	009b      	lsls	r3, r3, #2
   1e4e2:	4a1e      	ldr	r2, [pc, #120]	; (1e55c <sd_mmc_spi_card_init+0x1a0>)
   1e4e4:	0019      	movs	r1, r3
   1e4e6:	0010      	movs	r0, r2
   1e4e8:	4b13      	ldr	r3, [pc, #76]	; (1e538 <sd_mmc_spi_card_init+0x17c>)
   1e4ea:	4798      	blx	r3
   1e4ec:	0003      	movs	r3, r0
   1e4ee:	001a      	movs	r2, r3
   1e4f0:	2301      	movs	r3, #1
   1e4f2:	4053      	eors	r3, r2
   1e4f4:	b2db      	uxtb	r3, r3
   1e4f6:	2b00      	cmp	r3, #0
   1e4f8:	d001      	beq.n	1e4fe <sd_mmc_spi_card_init+0x142>
			return false;
   1e4fa:	2300      	movs	r3, #0
   1e4fc:	e014      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e4fe:	4b0c      	ldr	r3, [pc, #48]	; (1e530 <sd_mmc_spi_card_init+0x174>)
   1e500:	681b      	ldr	r3, [r3, #0]
   1e502:	7adb      	ldrb	r3, [r3, #11]
   1e504:	001a      	movs	r2, r3
   1e506:	2301      	movs	r3, #1
   1e508:	4013      	ands	r3, r2
   1e50a:	d00a      	beq.n	1e522 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1e50c:	4b14      	ldr	r3, [pc, #80]	; (1e560 <sd_mmc_spi_card_init+0x1a4>)
   1e50e:	4798      	blx	r3
   1e510:	0003      	movs	r3, r0
   1e512:	001a      	movs	r2, r3
   1e514:	2301      	movs	r3, #1
   1e516:	4053      	eors	r3, r2
   1e518:	b2db      	uxtb	r3, r3
   1e51a:	2b00      	cmp	r3, #0
   1e51c:	d001      	beq.n	1e522 <sd_mmc_spi_card_init+0x166>
			return false;
   1e51e:	2300      	movs	r3, #0
   1e520:	e002      	b.n	1e528 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e522:	4b10      	ldr	r3, [pc, #64]	; (1e564 <sd_mmc_spi_card_init+0x1a8>)
   1e524:	4798      	blx	r3
	return true;
   1e526:	2301      	movs	r3, #1
}
   1e528:	0018      	movs	r0, r3
   1e52a:	46bd      	mov	sp, r7
   1e52c:	b002      	add	sp, #8
   1e52e:	bd80      	pop	{r7, pc}
   1e530:	200040a0 	.word	0x200040a0
   1e534:	0001f5a5 	.word	0x0001f5a5
   1e538:	0001f5f1 	.word	0x0001f5f1
   1e53c:	0001dd11 	.word	0x0001dd11
   1e540:	0001dd05 	.word	0x0001dd05
   1e544:	0001dc21 	.word	0x0001dc21
   1e548:	0001e569 	.word	0x0001e569
   1e54c:	0000113b 	.word	0x0000113b
   1e550:	0001dead 	.word	0x0001dead
   1e554:	0001e04d 	.word	0x0001e04d
   1e558:	0001e195 	.word	0x0001e195
   1e55c:	00001110 	.word	0x00001110
   1e560:	0001e139 	.word	0x0001e139
   1e564:	0001e361 	.word	0x0001e361

0001e568 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1e568:	b580      	push	{r7, lr}
   1e56a:	b082      	sub	sp, #8
   1e56c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e56e:	2388      	movs	r3, #136	; 0x88
   1e570:	015b      	lsls	r3, r3, #5
   1e572:	2100      	movs	r1, #0
   1e574:	0018      	movs	r0, r3
   1e576:	4b32      	ldr	r3, [pc, #200]	; (1e640 <sd_mmc_spi_install_mmc+0xd8>)
   1e578:	4798      	blx	r3
   1e57a:	0003      	movs	r3, r0
   1e57c:	001a      	movs	r2, r3
   1e57e:	2301      	movs	r3, #1
   1e580:	4053      	eors	r3, r2
   1e582:	b2db      	uxtb	r3, r3
   1e584:	2b00      	cmp	r3, #0
   1e586:	d001      	beq.n	1e58c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1e588:	2300      	movs	r3, #0
   1e58a:	e055      	b.n	1e638 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1e58c:	4b2d      	ldr	r3, [pc, #180]	; (1e644 <sd_mmc_spi_install_mmc+0xdc>)
   1e58e:	4798      	blx	r3
   1e590:	0003      	movs	r3, r0
   1e592:	001a      	movs	r2, r3
   1e594:	2301      	movs	r3, #1
   1e596:	4053      	eors	r3, r2
   1e598:	b2db      	uxtb	r3, r3
   1e59a:	2b00      	cmp	r3, #0
   1e59c:	d001      	beq.n	1e5a2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1e59e:	2300      	movs	r3, #0
   1e5a0:	e04a      	b.n	1e638 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e5a2:	4b29      	ldr	r3, [pc, #164]	; (1e648 <sd_mmc_spi_install_mmc+0xe0>)
   1e5a4:	2100      	movs	r1, #0
   1e5a6:	0018      	movs	r0, r3
   1e5a8:	4b25      	ldr	r3, [pc, #148]	; (1e640 <sd_mmc_spi_install_mmc+0xd8>)
   1e5aa:	4798      	blx	r3
   1e5ac:	0003      	movs	r3, r0
   1e5ae:	001a      	movs	r2, r3
   1e5b0:	2301      	movs	r3, #1
   1e5b2:	4053      	eors	r3, r2
   1e5b4:	b2db      	uxtb	r3, r3
   1e5b6:	2b00      	cmp	r3, #0
   1e5b8:	d001      	beq.n	1e5be <sd_mmc_spi_install_mmc+0x56>
		return false;
   1e5ba:	2300      	movs	r3, #0
   1e5bc:	e03c      	b.n	1e638 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1e5be:	4b23      	ldr	r3, [pc, #140]	; (1e64c <sd_mmc_spi_install_mmc+0xe4>)
   1e5c0:	4798      	blx	r3
   1e5c2:	0003      	movs	r3, r0
   1e5c4:	001a      	movs	r2, r3
   1e5c6:	2301      	movs	r3, #1
   1e5c8:	4053      	eors	r3, r2
   1e5ca:	b2db      	uxtb	r3, r3
   1e5cc:	2b00      	cmp	r3, #0
   1e5ce:	d001      	beq.n	1e5d4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1e5d0:	2300      	movs	r3, #0
   1e5d2:	e031      	b.n	1e638 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1e5d4:	4b1e      	ldr	r3, [pc, #120]	; (1e650 <sd_mmc_spi_install_mmc+0xe8>)
   1e5d6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1e5d8:	4b1e      	ldr	r3, [pc, #120]	; (1e654 <sd_mmc_spi_install_mmc+0xec>)
   1e5da:	681b      	ldr	r3, [r3, #0]
   1e5dc:	7b1b      	ldrb	r3, [r3, #12]
   1e5de:	2b3f      	cmp	r3, #63	; 0x3f
   1e5e0:	d90c      	bls.n	1e5fc <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1e5e2:	1dfb      	adds	r3, r7, #7
   1e5e4:	0018      	movs	r0, r3
   1e5e6:	4b1c      	ldr	r3, [pc, #112]	; (1e658 <sd_mmc_spi_install_mmc+0xf0>)
   1e5e8:	4798      	blx	r3
   1e5ea:	0003      	movs	r3, r0
   1e5ec:	001a      	movs	r2, r3
   1e5ee:	2301      	movs	r3, #1
   1e5f0:	4053      	eors	r3, r2
   1e5f2:	b2db      	uxtb	r3, r3
   1e5f4:	2b00      	cmp	r3, #0
   1e5f6:	d001      	beq.n	1e5fc <sd_mmc_spi_install_mmc+0x94>
			return false;
   1e5f8:	2300      	movs	r3, #0
   1e5fa:	e01d      	b.n	1e638 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e5fc:	2380      	movs	r3, #128	; 0x80
   1e5fe:	009b      	lsls	r3, r3, #2
   1e600:	4a16      	ldr	r2, [pc, #88]	; (1e65c <sd_mmc_spi_install_mmc+0xf4>)
   1e602:	0019      	movs	r1, r3
   1e604:	0010      	movs	r0, r2
   1e606:	4b0e      	ldr	r3, [pc, #56]	; (1e640 <sd_mmc_spi_install_mmc+0xd8>)
   1e608:	4798      	blx	r3
   1e60a:	0003      	movs	r3, r0
   1e60c:	001a      	movs	r2, r3
   1e60e:	2301      	movs	r3, #1
   1e610:	4053      	eors	r3, r2
   1e612:	b2db      	uxtb	r3, r3
   1e614:	2b00      	cmp	r3, #0
   1e616:	d001      	beq.n	1e61c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1e618:	2300      	movs	r3, #0
   1e61a:	e00d      	b.n	1e638 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1e61c:	4b10      	ldr	r3, [pc, #64]	; (1e660 <sd_mmc_spi_install_mmc+0xf8>)
   1e61e:	4798      	blx	r3
   1e620:	0003      	movs	r3, r0
   1e622:	001a      	movs	r2, r3
   1e624:	2301      	movs	r3, #1
   1e626:	4053      	eors	r3, r2
   1e628:	b2db      	uxtb	r3, r3
   1e62a:	2b00      	cmp	r3, #0
   1e62c:	d001      	beq.n	1e632 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1e62e:	2300      	movs	r3, #0
   1e630:	e002      	b.n	1e638 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e632:	4b0c      	ldr	r3, [pc, #48]	; (1e664 <sd_mmc_spi_install_mmc+0xfc>)
   1e634:	4798      	blx	r3
	return true;
   1e636:	2301      	movs	r3, #1
}
   1e638:	0018      	movs	r0, r3
   1e63a:	46bd      	mov	sp, r7
   1e63c:	b002      	add	sp, #8
   1e63e:	bd80      	pop	{r7, pc}
   1e640:	0001f5f1 	.word	0x0001f5f1
   1e644:	0001db75 	.word	0x0001db75
   1e648:	0000113b 	.word	0x0000113b
   1e64c:	0001dead 	.word	0x0001dead
   1e650:	0001df1d 	.word	0x0001df1d
   1e654:	200040a0 	.word	0x200040a0
   1e658:	0001dd81 	.word	0x0001dd81
   1e65c:	00001110 	.word	0x00001110
   1e660:	0001e139 	.word	0x0001e139
   1e664:	0001e361 	.word	0x0001e361

0001e668 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1e668:	b580      	push	{r7, lr}
   1e66a:	b082      	sub	sp, #8
   1e66c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e66e:	1dfb      	adds	r3, r7, #7
   1e670:	2200      	movs	r2, #0
   1e672:	701a      	strb	r2, [r3, #0]
   1e674:	e00c      	b.n	1e690 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1e676:	1dfb      	adds	r3, r7, #7
   1e678:	781b      	ldrb	r3, [r3, #0]
   1e67a:	4a0c      	ldr	r2, [pc, #48]	; (1e6ac <sd_mmc_init+0x44>)
   1e67c:	015b      	lsls	r3, r3, #5
   1e67e:	18d3      	adds	r3, r2, r3
   1e680:	330a      	adds	r3, #10
   1e682:	2204      	movs	r2, #4
   1e684:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e686:	1dfb      	adds	r3, r7, #7
   1e688:	781a      	ldrb	r2, [r3, #0]
   1e68a:	1dfb      	adds	r3, r7, #7
   1e68c:	3201      	adds	r2, #1
   1e68e:	701a      	strb	r2, [r3, #0]
   1e690:	1dfb      	adds	r3, r7, #7
   1e692:	781b      	ldrb	r3, [r3, #0]
   1e694:	2b00      	cmp	r3, #0
   1e696:	d0ee      	beq.n	1e676 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1e698:	4b05      	ldr	r3, [pc, #20]	; (1e6b0 <sd_mmc_init+0x48>)
   1e69a:	22ff      	movs	r2, #255	; 0xff
   1e69c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1e69e:	4b05      	ldr	r3, [pc, #20]	; (1e6b4 <sd_mmc_init+0x4c>)
   1e6a0:	4798      	blx	r3
}
   1e6a2:	46c0      	nop			; (mov r8, r8)
   1e6a4:	46bd      	mov	sp, r7
   1e6a6:	b002      	add	sp, #8
   1e6a8:	bd80      	pop	{r7, pc}
   1e6aa:	46c0      	nop			; (mov r8, r8)
   1e6ac:	2000407c 	.word	0x2000407c
   1e6b0:	2000409c 	.word	0x2000409c
   1e6b4:	0001f411 	.word	0x0001f411

0001e6b8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1e6b8:	b590      	push	{r4, r7, lr}
   1e6ba:	b085      	sub	sp, #20
   1e6bc:	af00      	add	r7, sp, #0
   1e6be:	0002      	movs	r2, r0
   1e6c0:	1dfb      	adds	r3, r7, #7
   1e6c2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e6c4:	230f      	movs	r3, #15
   1e6c6:	18fc      	adds	r4, r7, r3
   1e6c8:	1dfb      	adds	r3, r7, #7
   1e6ca:	781b      	ldrb	r3, [r3, #0]
   1e6cc:	0018      	movs	r0, r3
   1e6ce:	4b13      	ldr	r3, [pc, #76]	; (1e71c <sd_mmc_check+0x64>)
   1e6d0:	4798      	blx	r3
   1e6d2:	0003      	movs	r3, r0
   1e6d4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1e6d6:	230f      	movs	r3, #15
   1e6d8:	18fb      	adds	r3, r7, r3
   1e6da:	781b      	ldrb	r3, [r3, #0]
   1e6dc:	2b01      	cmp	r3, #1
   1e6de:	d005      	beq.n	1e6ec <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1e6e0:	4b0f      	ldr	r3, [pc, #60]	; (1e720 <sd_mmc_check+0x68>)
   1e6e2:	4798      	blx	r3
		return sd_mmc_err;
   1e6e4:	230f      	movs	r3, #15
   1e6e6:	18fb      	adds	r3, r7, r3
   1e6e8:	781b      	ldrb	r3, [r3, #0]
   1e6ea:	e012      	b.n	1e712 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1e6ec:	4b0d      	ldr	r3, [pc, #52]	; (1e724 <sd_mmc_check+0x6c>)
   1e6ee:	4798      	blx	r3
   1e6f0:	1e03      	subs	r3, r0, #0
   1e6f2:	d007      	beq.n	1e704 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1e6f4:	4b0c      	ldr	r3, [pc, #48]	; (1e728 <sd_mmc_check+0x70>)
   1e6f6:	681b      	ldr	r3, [r3, #0]
   1e6f8:	2200      	movs	r2, #0
   1e6fa:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1e6fc:	4b08      	ldr	r3, [pc, #32]	; (1e720 <sd_mmc_check+0x68>)
   1e6fe:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1e700:	2301      	movs	r3, #1
   1e702:	e006      	b.n	1e712 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1e704:	4b08      	ldr	r3, [pc, #32]	; (1e728 <sd_mmc_check+0x70>)
   1e706:	681b      	ldr	r3, [r3, #0]
   1e708:	2203      	movs	r2, #3
   1e70a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1e70c:	4b04      	ldr	r3, [pc, #16]	; (1e720 <sd_mmc_check+0x68>)
   1e70e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1e710:	2303      	movs	r3, #3
}
   1e712:	0018      	movs	r0, r3
   1e714:	46bd      	mov	sp, r7
   1e716:	b005      	add	sp, #20
   1e718:	bd90      	pop	{r4, r7, pc}
   1e71a:	46c0      	nop			; (mov r8, r8)
   1e71c:	0001e29d 	.word	0x0001e29d
   1e720:	0001e399 	.word	0x0001e399
   1e724:	0001e3bd 	.word	0x0001e3bd
   1e728:	200040a0 	.word	0x200040a0

0001e72c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1e72c:	b580      	push	{r7, lr}
   1e72e:	b082      	sub	sp, #8
   1e730:	af00      	add	r7, sp, #0
   1e732:	0002      	movs	r2, r0
   1e734:	1dfb      	adds	r3, r7, #7
   1e736:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e738:	1dfb      	adds	r3, r7, #7
   1e73a:	781b      	ldrb	r3, [r3, #0]
   1e73c:	0018      	movs	r0, r3
   1e73e:	4b07      	ldr	r3, [pc, #28]	; (1e75c <sd_mmc_get_type+0x30>)
   1e740:	4798      	blx	r3
   1e742:	1e03      	subs	r3, r0, #0
   1e744:	d001      	beq.n	1e74a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1e746:	2300      	movs	r3, #0
   1e748:	e004      	b.n	1e754 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1e74a:	4b05      	ldr	r3, [pc, #20]	; (1e760 <sd_mmc_get_type+0x34>)
   1e74c:	4798      	blx	r3
	return sd_mmc_card->type;
   1e74e:	4b05      	ldr	r3, [pc, #20]	; (1e764 <sd_mmc_get_type+0x38>)
   1e750:	681b      	ldr	r3, [r3, #0]
   1e752:	7adb      	ldrb	r3, [r3, #11]
}
   1e754:	0018      	movs	r0, r3
   1e756:	46bd      	mov	sp, r7
   1e758:	b002      	add	sp, #8
   1e75a:	bd80      	pop	{r7, pc}
   1e75c:	0001e29d 	.word	0x0001e29d
   1e760:	0001e399 	.word	0x0001e399
   1e764:	200040a0 	.word	0x200040a0

0001e768 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1e768:	b580      	push	{r7, lr}
   1e76a:	b082      	sub	sp, #8
   1e76c:	af00      	add	r7, sp, #0
   1e76e:	0002      	movs	r2, r0
   1e770:	1dfb      	adds	r3, r7, #7
   1e772:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e774:	1dfb      	adds	r3, r7, #7
   1e776:	781b      	ldrb	r3, [r3, #0]
   1e778:	0018      	movs	r0, r3
   1e77a:	4b07      	ldr	r3, [pc, #28]	; (1e798 <sd_mmc_get_capacity+0x30>)
   1e77c:	4798      	blx	r3
   1e77e:	1e03      	subs	r3, r0, #0
   1e780:	d001      	beq.n	1e786 <sd_mmc_get_capacity+0x1e>
		return 0;
   1e782:	2300      	movs	r3, #0
   1e784:	e004      	b.n	1e790 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1e786:	4b05      	ldr	r3, [pc, #20]	; (1e79c <sd_mmc_get_capacity+0x34>)
   1e788:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1e78a:	4b05      	ldr	r3, [pc, #20]	; (1e7a0 <sd_mmc_get_capacity+0x38>)
   1e78c:	681b      	ldr	r3, [r3, #0]
   1e78e:	685b      	ldr	r3, [r3, #4]
}
   1e790:	0018      	movs	r0, r3
   1e792:	46bd      	mov	sp, r7
   1e794:	b002      	add	sp, #8
   1e796:	bd80      	pop	{r7, pc}
   1e798:	0001e29d 	.word	0x0001e29d
   1e79c:	0001e399 	.word	0x0001e399
   1e7a0:	200040a0 	.word	0x200040a0

0001e7a4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1e7a4:	b580      	push	{r7, lr}
   1e7a6:	b082      	sub	sp, #8
   1e7a8:	af00      	add	r7, sp, #0
   1e7aa:	0002      	movs	r2, r0
   1e7ac:	1dfb      	adds	r3, r7, #7
   1e7ae:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1e7b0:	2300      	movs	r3, #0
}
   1e7b2:	0018      	movs	r0, r3
   1e7b4:	46bd      	mov	sp, r7
   1e7b6:	b002      	add	sp, #8
   1e7b8:	bd80      	pop	{r7, pc}
	...

0001e7bc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e7bc:	b590      	push	{r4, r7, lr}
   1e7be:	b089      	sub	sp, #36	; 0x24
   1e7c0:	af02      	add	r7, sp, #8
   1e7c2:	6039      	str	r1, [r7, #0]
   1e7c4:	0011      	movs	r1, r2
   1e7c6:	1dfb      	adds	r3, r7, #7
   1e7c8:	1c02      	adds	r2, r0, #0
   1e7ca:	701a      	strb	r2, [r3, #0]
   1e7cc:	1d3b      	adds	r3, r7, #4
   1e7ce:	1c0a      	adds	r2, r1, #0
   1e7d0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e7d2:	230f      	movs	r3, #15
   1e7d4:	18fc      	adds	r4, r7, r3
   1e7d6:	1dfb      	adds	r3, r7, #7
   1e7d8:	781b      	ldrb	r3, [r3, #0]
   1e7da:	0018      	movs	r0, r3
   1e7dc:	4b29      	ldr	r3, [pc, #164]	; (1e884 <sd_mmc_init_read_blocks+0xc8>)
   1e7de:	4798      	blx	r3
   1e7e0:	0003      	movs	r3, r0
   1e7e2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e7e4:	230f      	movs	r3, #15
   1e7e6:	18fb      	adds	r3, r7, r3
   1e7e8:	781b      	ldrb	r3, [r3, #0]
   1e7ea:	2b00      	cmp	r3, #0
   1e7ec:	d003      	beq.n	1e7f6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1e7ee:	230f      	movs	r3, #15
   1e7f0:	18fb      	adds	r3, r7, r3
   1e7f2:	781b      	ldrb	r3, [r3, #0]
   1e7f4:	e041      	b.n	1e87a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1e7f6:	4b24      	ldr	r3, [pc, #144]	; (1e888 <sd_mmc_init_read_blocks+0xcc>)
   1e7f8:	4798      	blx	r3
   1e7fa:	0003      	movs	r3, r0
   1e7fc:	001a      	movs	r2, r3
   1e7fe:	2301      	movs	r3, #1
   1e800:	4053      	eors	r3, r2
   1e802:	b2db      	uxtb	r3, r3
   1e804:	2b00      	cmp	r3, #0
   1e806:	d003      	beq.n	1e810 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1e808:	4b20      	ldr	r3, [pc, #128]	; (1e88c <sd_mmc_init_read_blocks+0xd0>)
   1e80a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e80c:	2305      	movs	r3, #5
   1e80e:	e034      	b.n	1e87a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1e810:	1d3b      	adds	r3, r7, #4
   1e812:	881b      	ldrh	r3, [r3, #0]
   1e814:	2b01      	cmp	r3, #1
   1e816:	d902      	bls.n	1e81e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1e818:	4b1d      	ldr	r3, [pc, #116]	; (1e890 <sd_mmc_init_read_blocks+0xd4>)
   1e81a:	617b      	str	r3, [r7, #20]
   1e81c:	e001      	b.n	1e822 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1e81e:	4b1d      	ldr	r3, [pc, #116]	; (1e894 <sd_mmc_init_read_blocks+0xd8>)
   1e820:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e822:	4b1d      	ldr	r3, [pc, #116]	; (1e898 <sd_mmc_init_read_blocks+0xdc>)
   1e824:	681b      	ldr	r3, [r3, #0]
   1e826:	7adb      	ldrb	r3, [r3, #11]
   1e828:	001a      	movs	r2, r3
   1e82a:	2308      	movs	r3, #8
   1e82c:	4013      	ands	r3, r2
   1e82e:	d002      	beq.n	1e836 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1e830:	683b      	ldr	r3, [r7, #0]
   1e832:	613b      	str	r3, [r7, #16]
   1e834:	e002      	b.n	1e83c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e836:	683b      	ldr	r3, [r7, #0]
   1e838:	025b      	lsls	r3, r3, #9
   1e83a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e83c:	1d3b      	adds	r3, r7, #4
   1e83e:	881c      	ldrh	r4, [r3, #0]
   1e840:	2380      	movs	r3, #128	; 0x80
   1e842:	009a      	lsls	r2, r3, #2
   1e844:	6939      	ldr	r1, [r7, #16]
   1e846:	6978      	ldr	r0, [r7, #20]
   1e848:	2301      	movs	r3, #1
   1e84a:	9300      	str	r3, [sp, #0]
   1e84c:	0023      	movs	r3, r4
   1e84e:	4c13      	ldr	r4, [pc, #76]	; (1e89c <sd_mmc_init_read_blocks+0xe0>)
   1e850:	47a0      	blx	r4
   1e852:	0003      	movs	r3, r0
   1e854:	001a      	movs	r2, r3
   1e856:	2301      	movs	r3, #1
   1e858:	4053      	eors	r3, r2
   1e85a:	b2db      	uxtb	r3, r3
   1e85c:	2b00      	cmp	r3, #0
   1e85e:	d003      	beq.n	1e868 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1e860:	4b0a      	ldr	r3, [pc, #40]	; (1e88c <sd_mmc_init_read_blocks+0xd0>)
   1e862:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e864:	2305      	movs	r3, #5
   1e866:	e008      	b.n	1e87a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e868:	4b0d      	ldr	r3, [pc, #52]	; (1e8a0 <sd_mmc_init_read_blocks+0xe4>)
   1e86a:	1d3a      	adds	r2, r7, #4
   1e86c:	8812      	ldrh	r2, [r2, #0]
   1e86e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e870:	4b0c      	ldr	r3, [pc, #48]	; (1e8a4 <sd_mmc_init_read_blocks+0xe8>)
   1e872:	1d3a      	adds	r2, r7, #4
   1e874:	8812      	ldrh	r2, [r2, #0]
   1e876:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e878:	2300      	movs	r3, #0
}
   1e87a:	0018      	movs	r0, r3
   1e87c:	46bd      	mov	sp, r7
   1e87e:	b007      	add	sp, #28
   1e880:	bd90      	pop	{r4, r7, pc}
   1e882:	46c0      	nop			; (mov r8, r8)
   1e884:	0001e29d 	.word	0x0001e29d
   1e888:	0001e139 	.word	0x0001e139
   1e88c:	0001e399 	.word	0x0001e399
   1e890:	00101112 	.word	0x00101112
   1e894:	00081111 	.word	0x00081111
   1e898:	200040a0 	.word	0x200040a0
   1e89c:	0001f619 	.word	0x0001f619
   1e8a0:	200040a6 	.word	0x200040a6
   1e8a4:	200040a4 	.word	0x200040a4

0001e8a8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1e8a8:	b580      	push	{r7, lr}
   1e8aa:	b082      	sub	sp, #8
   1e8ac:	af00      	add	r7, sp, #0
   1e8ae:	6078      	str	r0, [r7, #4]
   1e8b0:	000a      	movs	r2, r1
   1e8b2:	1cbb      	adds	r3, r7, #2
   1e8b4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1e8b6:	1cbb      	adds	r3, r7, #2
   1e8b8:	881a      	ldrh	r2, [r3, #0]
   1e8ba:	687b      	ldr	r3, [r7, #4]
   1e8bc:	0011      	movs	r1, r2
   1e8be:	0018      	movs	r0, r3
   1e8c0:	4b0d      	ldr	r3, [pc, #52]	; (1e8f8 <sd_mmc_start_read_blocks+0x50>)
   1e8c2:	4798      	blx	r3
   1e8c4:	0003      	movs	r3, r0
   1e8c6:	001a      	movs	r2, r3
   1e8c8:	2301      	movs	r3, #1
   1e8ca:	4053      	eors	r3, r2
   1e8cc:	b2db      	uxtb	r3, r3
   1e8ce:	2b00      	cmp	r3, #0
   1e8d0:	d004      	beq.n	1e8dc <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e8d2:	4b0a      	ldr	r3, [pc, #40]	; (1e8fc <sd_mmc_start_read_blocks+0x54>)
   1e8d4:	2200      	movs	r2, #0
   1e8d6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e8d8:	2305      	movs	r3, #5
   1e8da:	e008      	b.n	1e8ee <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e8dc:	4b07      	ldr	r3, [pc, #28]	; (1e8fc <sd_mmc_start_read_blocks+0x54>)
   1e8de:	881a      	ldrh	r2, [r3, #0]
   1e8e0:	1cbb      	adds	r3, r7, #2
   1e8e2:	881b      	ldrh	r3, [r3, #0]
   1e8e4:	1ad3      	subs	r3, r2, r3
   1e8e6:	b29a      	uxth	r2, r3
   1e8e8:	4b04      	ldr	r3, [pc, #16]	; (1e8fc <sd_mmc_start_read_blocks+0x54>)
   1e8ea:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e8ec:	2300      	movs	r3, #0
}
   1e8ee:	0018      	movs	r0, r3
   1e8f0:	46bd      	mov	sp, r7
   1e8f2:	b002      	add	sp, #8
   1e8f4:	bd80      	pop	{r7, pc}
   1e8f6:	46c0      	nop			; (mov r8, r8)
   1e8f8:	0001f8e9 	.word	0x0001f8e9
   1e8fc:	200040a6 	.word	0x200040a6

0001e900 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1e900:	b580      	push	{r7, lr}
   1e902:	b082      	sub	sp, #8
   1e904:	af00      	add	r7, sp, #0
   1e906:	0002      	movs	r2, r0
   1e908:	1dfb      	adds	r3, r7, #7
   1e90a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1e90c:	4b1c      	ldr	r3, [pc, #112]	; (1e980 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1e90e:	4798      	blx	r3
   1e910:	0003      	movs	r3, r0
   1e912:	001a      	movs	r2, r3
   1e914:	2301      	movs	r3, #1
   1e916:	4053      	eors	r3, r2
   1e918:	b2db      	uxtb	r3, r3
   1e91a:	2b00      	cmp	r3, #0
   1e91c:	d001      	beq.n	1e922 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e91e:	2305      	movs	r3, #5
   1e920:	e029      	b.n	1e976 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1e922:	1dfb      	adds	r3, r7, #7
   1e924:	781b      	ldrb	r3, [r3, #0]
   1e926:	2b00      	cmp	r3, #0
   1e928:	d003      	beq.n	1e932 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e92a:	4b16      	ldr	r3, [pc, #88]	; (1e984 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e92c:	2200      	movs	r2, #0
   1e92e:	801a      	strh	r2, [r3, #0]
   1e930:	e005      	b.n	1e93e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e932:	4b14      	ldr	r3, [pc, #80]	; (1e984 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e934:	881b      	ldrh	r3, [r3, #0]
   1e936:	2b00      	cmp	r3, #0
   1e938:	d001      	beq.n	1e93e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1e93a:	2300      	movs	r3, #0
   1e93c:	e01b      	b.n	1e976 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e93e:	4b12      	ldr	r3, [pc, #72]	; (1e988 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1e940:	881b      	ldrh	r3, [r3, #0]
   1e942:	2b01      	cmp	r3, #1
   1e944:	d103      	bne.n	1e94e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e946:	4b11      	ldr	r3, [pc, #68]	; (1e98c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e948:	4798      	blx	r3
		return SD_MMC_OK;
   1e94a:	2300      	movs	r3, #0
   1e94c:	e013      	b.n	1e976 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1e94e:	4b10      	ldr	r3, [pc, #64]	; (1e990 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e950:	2100      	movs	r1, #0
   1e952:	0018      	movs	r0, r3
   1e954:	4b0f      	ldr	r3, [pc, #60]	; (1e994 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e956:	4798      	blx	r3
   1e958:	0003      	movs	r3, r0
   1e95a:	001a      	movs	r2, r3
   1e95c:	2301      	movs	r3, #1
   1e95e:	4053      	eors	r3, r2
   1e960:	b2db      	uxtb	r3, r3
   1e962:	2b00      	cmp	r3, #0
   1e964:	d004      	beq.n	1e970 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1e966:	4b0a      	ldr	r3, [pc, #40]	; (1e990 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e968:	2100      	movs	r1, #0
   1e96a:	0018      	movs	r0, r3
   1e96c:	4b09      	ldr	r3, [pc, #36]	; (1e994 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e96e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1e970:	4b06      	ldr	r3, [pc, #24]	; (1e98c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e972:	4798      	blx	r3
	return SD_MMC_OK;
   1e974:	2300      	movs	r3, #0
}
   1e976:	0018      	movs	r0, r3
   1e978:	46bd      	mov	sp, r7
   1e97a:	b002      	add	sp, #8
   1e97c:	bd80      	pop	{r7, pc}
   1e97e:	46c0      	nop			; (mov r8, r8)
   1e980:	0001f98d 	.word	0x0001f98d
   1e984:	200040a6 	.word	0x200040a6
   1e988:	200040a4 	.word	0x200040a4
   1e98c:	0001e399 	.word	0x0001e399
   1e990:	0000310c 	.word	0x0000310c
   1e994:	0001f5f1 	.word	0x0001f5f1

0001e998 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e998:	b590      	push	{r4, r7, lr}
   1e99a:	b089      	sub	sp, #36	; 0x24
   1e99c:	af02      	add	r7, sp, #8
   1e99e:	6039      	str	r1, [r7, #0]
   1e9a0:	0011      	movs	r1, r2
   1e9a2:	1dfb      	adds	r3, r7, #7
   1e9a4:	1c02      	adds	r2, r0, #0
   1e9a6:	701a      	strb	r2, [r3, #0]
   1e9a8:	1d3b      	adds	r3, r7, #4
   1e9aa:	1c0a      	adds	r2, r1, #0
   1e9ac:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e9ae:	230f      	movs	r3, #15
   1e9b0:	18fc      	adds	r4, r7, r3
   1e9b2:	1dfb      	adds	r3, r7, #7
   1e9b4:	781b      	ldrb	r3, [r3, #0]
   1e9b6:	0018      	movs	r0, r3
   1e9b8:	4b28      	ldr	r3, [pc, #160]	; (1ea5c <sd_mmc_init_write_blocks+0xc4>)
   1e9ba:	4798      	blx	r3
   1e9bc:	0003      	movs	r3, r0
   1e9be:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e9c0:	230f      	movs	r3, #15
   1e9c2:	18fb      	adds	r3, r7, r3
   1e9c4:	781b      	ldrb	r3, [r3, #0]
   1e9c6:	2b00      	cmp	r3, #0
   1e9c8:	d003      	beq.n	1e9d2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1e9ca:	230f      	movs	r3, #15
   1e9cc:	18fb      	adds	r3, r7, r3
   1e9ce:	781b      	ldrb	r3, [r3, #0]
   1e9d0:	e03f      	b.n	1ea52 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1e9d2:	1dfb      	adds	r3, r7, #7
   1e9d4:	781b      	ldrb	r3, [r3, #0]
   1e9d6:	0018      	movs	r0, r3
   1e9d8:	4b21      	ldr	r3, [pc, #132]	; (1ea60 <sd_mmc_init_write_blocks+0xc8>)
   1e9da:	4798      	blx	r3
   1e9dc:	1e03      	subs	r3, r0, #0
   1e9de:	d003      	beq.n	1e9e8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1e9e0:	4b20      	ldr	r3, [pc, #128]	; (1ea64 <sd_mmc_init_write_blocks+0xcc>)
   1e9e2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1e9e4:	2307      	movs	r3, #7
   1e9e6:	e034      	b.n	1ea52 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1e9e8:	1d3b      	adds	r3, r7, #4
   1e9ea:	881b      	ldrh	r3, [r3, #0]
   1e9ec:	2b01      	cmp	r3, #1
   1e9ee:	d902      	bls.n	1e9f6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1e9f0:	4b1d      	ldr	r3, [pc, #116]	; (1ea68 <sd_mmc_init_write_blocks+0xd0>)
   1e9f2:	617b      	str	r3, [r7, #20]
   1e9f4:	e001      	b.n	1e9fa <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1e9f6:	4b1d      	ldr	r3, [pc, #116]	; (1ea6c <sd_mmc_init_write_blocks+0xd4>)
   1e9f8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e9fa:	4b1d      	ldr	r3, [pc, #116]	; (1ea70 <sd_mmc_init_write_blocks+0xd8>)
   1e9fc:	681b      	ldr	r3, [r3, #0]
   1e9fe:	7adb      	ldrb	r3, [r3, #11]
   1ea00:	001a      	movs	r2, r3
   1ea02:	2308      	movs	r3, #8
   1ea04:	4013      	ands	r3, r2
   1ea06:	d002      	beq.n	1ea0e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1ea08:	683b      	ldr	r3, [r7, #0]
   1ea0a:	613b      	str	r3, [r7, #16]
   1ea0c:	e002      	b.n	1ea14 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ea0e:	683b      	ldr	r3, [r7, #0]
   1ea10:	025b      	lsls	r3, r3, #9
   1ea12:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ea14:	1d3b      	adds	r3, r7, #4
   1ea16:	881c      	ldrh	r4, [r3, #0]
   1ea18:	2380      	movs	r3, #128	; 0x80
   1ea1a:	009a      	lsls	r2, r3, #2
   1ea1c:	6939      	ldr	r1, [r7, #16]
   1ea1e:	6978      	ldr	r0, [r7, #20]
   1ea20:	2301      	movs	r3, #1
   1ea22:	9300      	str	r3, [sp, #0]
   1ea24:	0023      	movs	r3, r4
   1ea26:	4c13      	ldr	r4, [pc, #76]	; (1ea74 <sd_mmc_init_write_blocks+0xdc>)
   1ea28:	47a0      	blx	r4
   1ea2a:	0003      	movs	r3, r0
   1ea2c:	001a      	movs	r2, r3
   1ea2e:	2301      	movs	r3, #1
   1ea30:	4053      	eors	r3, r2
   1ea32:	b2db      	uxtb	r3, r3
   1ea34:	2b00      	cmp	r3, #0
   1ea36:	d003      	beq.n	1ea40 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1ea38:	4b0a      	ldr	r3, [pc, #40]	; (1ea64 <sd_mmc_init_write_blocks+0xcc>)
   1ea3a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ea3c:	2305      	movs	r3, #5
   1ea3e:	e008      	b.n	1ea52 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ea40:	4b0d      	ldr	r3, [pc, #52]	; (1ea78 <sd_mmc_init_write_blocks+0xe0>)
   1ea42:	1d3a      	adds	r2, r7, #4
   1ea44:	8812      	ldrh	r2, [r2, #0]
   1ea46:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ea48:	4b0c      	ldr	r3, [pc, #48]	; (1ea7c <sd_mmc_init_write_blocks+0xe4>)
   1ea4a:	1d3a      	adds	r2, r7, #4
   1ea4c:	8812      	ldrh	r2, [r2, #0]
   1ea4e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ea50:	2300      	movs	r3, #0
}
   1ea52:	0018      	movs	r0, r3
   1ea54:	46bd      	mov	sp, r7
   1ea56:	b007      	add	sp, #28
   1ea58:	bd90      	pop	{r4, r7, pc}
   1ea5a:	46c0      	nop			; (mov r8, r8)
   1ea5c:	0001e29d 	.word	0x0001e29d
   1ea60:	0001e7a5 	.word	0x0001e7a5
   1ea64:	0001e399 	.word	0x0001e399
   1ea68:	00109119 	.word	0x00109119
   1ea6c:	00089118 	.word	0x00089118
   1ea70:	200040a0 	.word	0x200040a0
   1ea74:	0001f619 	.word	0x0001f619
   1ea78:	200040a6 	.word	0x200040a6
   1ea7c:	200040a4 	.word	0x200040a4

0001ea80 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ea80:	b580      	push	{r7, lr}
   1ea82:	b082      	sub	sp, #8
   1ea84:	af00      	add	r7, sp, #0
   1ea86:	6078      	str	r0, [r7, #4]
   1ea88:	000a      	movs	r2, r1
   1ea8a:	1cbb      	adds	r3, r7, #2
   1ea8c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1ea8e:	1cbb      	adds	r3, r7, #2
   1ea90:	881a      	ldrh	r2, [r3, #0]
   1ea92:	687b      	ldr	r3, [r7, #4]
   1ea94:	0011      	movs	r1, r2
   1ea96:	0018      	movs	r0, r3
   1ea98:	4b0d      	ldr	r3, [pc, #52]	; (1ead0 <sd_mmc_start_write_blocks+0x50>)
   1ea9a:	4798      	blx	r3
   1ea9c:	0003      	movs	r3, r0
   1ea9e:	001a      	movs	r2, r3
   1eaa0:	2301      	movs	r3, #1
   1eaa2:	4053      	eors	r3, r2
   1eaa4:	b2db      	uxtb	r3, r3
   1eaa6:	2b00      	cmp	r3, #0
   1eaa8:	d004      	beq.n	1eab4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1eaaa:	4b0a      	ldr	r3, [pc, #40]	; (1ead4 <sd_mmc_start_write_blocks+0x54>)
   1eaac:	2200      	movs	r2, #0
   1eaae:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1eab0:	2305      	movs	r3, #5
   1eab2:	e008      	b.n	1eac6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1eab4:	4b07      	ldr	r3, [pc, #28]	; (1ead4 <sd_mmc_start_write_blocks+0x54>)
   1eab6:	881a      	ldrh	r2, [r3, #0]
   1eab8:	1cbb      	adds	r3, r7, #2
   1eaba:	881b      	ldrh	r3, [r3, #0]
   1eabc:	1ad3      	subs	r3, r2, r3
   1eabe:	b29a      	uxth	r2, r3
   1eac0:	4b04      	ldr	r3, [pc, #16]	; (1ead4 <sd_mmc_start_write_blocks+0x54>)
   1eac2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1eac4:	2300      	movs	r3, #0
}
   1eac6:	0018      	movs	r0, r3
   1eac8:	46bd      	mov	sp, r7
   1eaca:	b002      	add	sp, #8
   1eacc:	bd80      	pop	{r7, pc}
   1eace:	46c0      	nop			; (mov r8, r8)
   1ead0:	0001f999 	.word	0x0001f999
   1ead4:	200040a6 	.word	0x200040a6

0001ead8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ead8:	b580      	push	{r7, lr}
   1eada:	b082      	sub	sp, #8
   1eadc:	af00      	add	r7, sp, #0
   1eade:	0002      	movs	r2, r0
   1eae0:	1dfb      	adds	r3, r7, #7
   1eae2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1eae4:	4b13      	ldr	r3, [pc, #76]	; (1eb34 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1eae6:	4798      	blx	r3
   1eae8:	0003      	movs	r3, r0
   1eaea:	001a      	movs	r2, r3
   1eaec:	2301      	movs	r3, #1
   1eaee:	4053      	eors	r3, r2
   1eaf0:	b2db      	uxtb	r3, r3
   1eaf2:	2b00      	cmp	r3, #0
   1eaf4:	d001      	beq.n	1eafa <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1eaf6:	2305      	movs	r3, #5
   1eaf8:	e018      	b.n	1eb2c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1eafa:	1dfb      	adds	r3, r7, #7
   1eafc:	781b      	ldrb	r3, [r3, #0]
   1eafe:	2b00      	cmp	r3, #0
   1eb00:	d003      	beq.n	1eb0a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1eb02:	4b0d      	ldr	r3, [pc, #52]	; (1eb38 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1eb04:	2200      	movs	r2, #0
   1eb06:	801a      	strh	r2, [r3, #0]
   1eb08:	e005      	b.n	1eb16 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1eb0a:	4b0b      	ldr	r3, [pc, #44]	; (1eb38 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1eb0c:	881b      	ldrh	r3, [r3, #0]
   1eb0e:	2b00      	cmp	r3, #0
   1eb10:	d001      	beq.n	1eb16 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1eb12:	2300      	movs	r3, #0
   1eb14:	e00a      	b.n	1eb2c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1eb16:	4b09      	ldr	r3, [pc, #36]	; (1eb3c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1eb18:	881b      	ldrh	r3, [r3, #0]
   1eb1a:	2b01      	cmp	r3, #1
   1eb1c:	d103      	bne.n	1eb26 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1eb1e:	4b08      	ldr	r3, [pc, #32]	; (1eb40 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1eb20:	4798      	blx	r3
		return SD_MMC_OK;
   1eb22:	2300      	movs	r3, #0
   1eb24:	e002      	b.n	1eb2c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1eb26:	4b06      	ldr	r3, [pc, #24]	; (1eb40 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1eb28:	4798      	blx	r3
	return SD_MMC_OK;
   1eb2a:	2300      	movs	r3, #0
}
   1eb2c:	0018      	movs	r0, r3
   1eb2e:	46bd      	mov	sp, r7
   1eb30:	b002      	add	sp, #8
   1eb32:	bd80      	pop	{r7, pc}
   1eb34:	0001fa59 	.word	0x0001fa59
   1eb38:	200040a6 	.word	0x200040a6
   1eb3c:	200040a4 	.word	0x200040a4
   1eb40:	0001e399 	.word	0x0001e399

0001eb44 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1eb44:	b580      	push	{r7, lr}
   1eb46:	b082      	sub	sp, #8
   1eb48:	af00      	add	r7, sp, #0
   1eb4a:	0002      	movs	r2, r0
   1eb4c:	1dfb      	adds	r3, r7, #7
   1eb4e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1eb50:	1dfb      	adds	r3, r7, #7
   1eb52:	781b      	ldrb	r3, [r3, #0]
   1eb54:	0018      	movs	r0, r3
   1eb56:	4b16      	ldr	r3, [pc, #88]	; (1ebb0 <sd_mmc_test_unit_ready+0x6c>)
   1eb58:	4798      	blx	r3
   1eb5a:	0003      	movs	r3, r0
   1eb5c:	2b01      	cmp	r3, #1
   1eb5e:	d019      	beq.n	1eb94 <sd_mmc_test_unit_ready+0x50>
   1eb60:	2b02      	cmp	r3, #2
   1eb62:	d019      	beq.n	1eb98 <sd_mmc_test_unit_ready+0x54>
   1eb64:	2b00      	cmp	r3, #0
   1eb66:	d11e      	bne.n	1eba6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1eb68:	1dfb      	adds	r3, r7, #7
   1eb6a:	781b      	ldrb	r3, [r3, #0]
   1eb6c:	4a11      	ldr	r2, [pc, #68]	; (1ebb4 <sd_mmc_test_unit_ready+0x70>)
   1eb6e:	5cd3      	ldrb	r3, [r2, r3]
   1eb70:	2b00      	cmp	r3, #0
   1eb72:	d001      	beq.n	1eb78 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1eb74:	2302      	movs	r3, #2
   1eb76:	e017      	b.n	1eba8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1eb78:	1dfb      	adds	r3, r7, #7
   1eb7a:	781b      	ldrb	r3, [r3, #0]
   1eb7c:	0018      	movs	r0, r3
   1eb7e:	4b0e      	ldr	r3, [pc, #56]	; (1ebb8 <sd_mmc_test_unit_ready+0x74>)
   1eb80:	4798      	blx	r3
   1eb82:	0003      	movs	r3, r0
   1eb84:	001a      	movs	r2, r3
   1eb86:	2303      	movs	r3, #3
   1eb88:	4013      	ands	r3, r2
   1eb8a:	d001      	beq.n	1eb90 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1eb8c:	2300      	movs	r3, #0
   1eb8e:	e00b      	b.n	1eba8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1eb90:	2302      	movs	r3, #2
   1eb92:	e009      	b.n	1eba8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1eb94:	2303      	movs	r3, #3
   1eb96:	e007      	b.n	1eba8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1eb98:	1dfb      	adds	r3, r7, #7
   1eb9a:	781b      	ldrb	r3, [r3, #0]
   1eb9c:	4a05      	ldr	r2, [pc, #20]	; (1ebb4 <sd_mmc_test_unit_ready+0x70>)
   1eb9e:	2100      	movs	r1, #0
   1eba0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1eba2:	2302      	movs	r3, #2
   1eba4:	e000      	b.n	1eba8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1eba6:	2301      	movs	r3, #1
	}
}
   1eba8:	0018      	movs	r0, r3
   1ebaa:	46bd      	mov	sp, r7
   1ebac:	b002      	add	sp, #8
   1ebae:	bd80      	pop	{r7, pc}
   1ebb0:	0001e6b9 	.word	0x0001e6b9
   1ebb4:	200040a8 	.word	0x200040a8
   1ebb8:	0001e72d 	.word	0x0001e72d

0001ebbc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1ebbc:	b580      	push	{r7, lr}
   1ebbe:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1ebc0:	2000      	movs	r0, #0
   1ebc2:	4b03      	ldr	r3, [pc, #12]	; (1ebd0 <sd_mmc_test_unit_ready_0+0x14>)
   1ebc4:	4798      	blx	r3
   1ebc6:	0003      	movs	r3, r0
}
   1ebc8:	0018      	movs	r0, r3
   1ebca:	46bd      	mov	sp, r7
   1ebcc:	bd80      	pop	{r7, pc}
   1ebce:	46c0      	nop			; (mov r8, r8)
   1ebd0:	0001eb45 	.word	0x0001eb45

0001ebd4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ebd4:	b580      	push	{r7, lr}
   1ebd6:	b082      	sub	sp, #8
   1ebd8:	af00      	add	r7, sp, #0
   1ebda:	0002      	movs	r2, r0
   1ebdc:	6039      	str	r1, [r7, #0]
   1ebde:	1dfb      	adds	r3, r7, #7
   1ebe0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ebe2:	1dfb      	adds	r3, r7, #7
   1ebe4:	781b      	ldrb	r3, [r3, #0]
   1ebe6:	0018      	movs	r0, r3
   1ebe8:	4b08      	ldr	r3, [pc, #32]	; (1ec0c <sd_mmc_read_capacity+0x38>)
   1ebea:	4798      	blx	r3
   1ebec:	0003      	movs	r3, r0
   1ebee:	005b      	lsls	r3, r3, #1
   1ebf0:	1e5a      	subs	r2, r3, #1
   1ebf2:	683b      	ldr	r3, [r7, #0]
   1ebf4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ebf6:	1dfb      	adds	r3, r7, #7
   1ebf8:	781b      	ldrb	r3, [r3, #0]
   1ebfa:	0018      	movs	r0, r3
   1ebfc:	4b04      	ldr	r3, [pc, #16]	; (1ec10 <sd_mmc_read_capacity+0x3c>)
   1ebfe:	4798      	blx	r3
   1ec00:	0003      	movs	r3, r0
}
   1ec02:	0018      	movs	r0, r3
   1ec04:	46bd      	mov	sp, r7
   1ec06:	b002      	add	sp, #8
   1ec08:	bd80      	pop	{r7, pc}
   1ec0a:	46c0      	nop			; (mov r8, r8)
   1ec0c:	0001e769 	.word	0x0001e769
   1ec10:	0001eb45 	.word	0x0001eb45

0001ec14 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1ec14:	b580      	push	{r7, lr}
   1ec16:	b082      	sub	sp, #8
   1ec18:	af00      	add	r7, sp, #0
   1ec1a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1ec1c:	687b      	ldr	r3, [r7, #4]
   1ec1e:	0019      	movs	r1, r3
   1ec20:	2000      	movs	r0, #0
   1ec22:	4b03      	ldr	r3, [pc, #12]	; (1ec30 <sd_mmc_read_capacity_0+0x1c>)
   1ec24:	4798      	blx	r3
   1ec26:	0003      	movs	r3, r0
}
   1ec28:	0018      	movs	r0, r3
   1ec2a:	46bd      	mov	sp, r7
   1ec2c:	b002      	add	sp, #8
   1ec2e:	bd80      	pop	{r7, pc}
   1ec30:	0001ebd5 	.word	0x0001ebd5

0001ec34 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1ec34:	b580      	push	{r7, lr}
   1ec36:	b082      	sub	sp, #8
   1ec38:	af00      	add	r7, sp, #0
   1ec3a:	0002      	movs	r2, r0
   1ec3c:	1dfb      	adds	r3, r7, #7
   1ec3e:	701a      	strb	r2, [r3, #0]
   1ec40:	1dbb      	adds	r3, r7, #6
   1ec42:	1c0a      	adds	r2, r1, #0
   1ec44:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1ec46:	1dfb      	adds	r3, r7, #7
   1ec48:	781b      	ldrb	r3, [r3, #0]
   1ec4a:	4a04      	ldr	r2, [pc, #16]	; (1ec5c <sd_mmc_unload+0x28>)
   1ec4c:	1db9      	adds	r1, r7, #6
   1ec4e:	7809      	ldrb	r1, [r1, #0]
   1ec50:	54d1      	strb	r1, [r2, r3]
	return true;
   1ec52:	2301      	movs	r3, #1
}
   1ec54:	0018      	movs	r0, r3
   1ec56:	46bd      	mov	sp, r7
   1ec58:	b002      	add	sp, #8
   1ec5a:	bd80      	pop	{r7, pc}
   1ec5c:	200040a8 	.word	0x200040a8

0001ec60 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1ec60:	b580      	push	{r7, lr}
   1ec62:	b082      	sub	sp, #8
   1ec64:	af00      	add	r7, sp, #0
   1ec66:	0002      	movs	r2, r0
   1ec68:	1dfb      	adds	r3, r7, #7
   1ec6a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1ec6c:	1dfb      	adds	r3, r7, #7
   1ec6e:	781b      	ldrb	r3, [r3, #0]
   1ec70:	0019      	movs	r1, r3
   1ec72:	2000      	movs	r0, #0
   1ec74:	4b03      	ldr	r3, [pc, #12]	; (1ec84 <sd_mmc_unload_0+0x24>)
   1ec76:	4798      	blx	r3
   1ec78:	0003      	movs	r3, r0
}
   1ec7a:	0018      	movs	r0, r3
   1ec7c:	46bd      	mov	sp, r7
   1ec7e:	b002      	add	sp, #8
   1ec80:	bd80      	pop	{r7, pc}
   1ec82:	46c0      	nop			; (mov r8, r8)
   1ec84:	0001ec35 	.word	0x0001ec35

0001ec88 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1ec88:	b580      	push	{r7, lr}
   1ec8a:	b082      	sub	sp, #8
   1ec8c:	af00      	add	r7, sp, #0
   1ec8e:	0002      	movs	r2, r0
   1ec90:	1dfb      	adds	r3, r7, #7
   1ec92:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1ec94:	1dfb      	adds	r3, r7, #7
   1ec96:	781b      	ldrb	r3, [r3, #0]
   1ec98:	0018      	movs	r0, r3
   1ec9a:	4b03      	ldr	r3, [pc, #12]	; (1eca8 <sd_mmc_wr_protect+0x20>)
   1ec9c:	4798      	blx	r3
   1ec9e:	0003      	movs	r3, r0
}
   1eca0:	0018      	movs	r0, r3
   1eca2:	46bd      	mov	sp, r7
   1eca4:	b002      	add	sp, #8
   1eca6:	bd80      	pop	{r7, pc}
   1eca8:	0001e7a5 	.word	0x0001e7a5

0001ecac <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1ecac:	b580      	push	{r7, lr}
   1ecae:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1ecb0:	2000      	movs	r0, #0
   1ecb2:	4b03      	ldr	r3, [pc, #12]	; (1ecc0 <sd_mmc_wr_protect_0+0x14>)
   1ecb4:	4798      	blx	r3
   1ecb6:	0003      	movs	r3, r0
}
   1ecb8:	0018      	movs	r0, r3
   1ecba:	46bd      	mov	sp, r7
   1ecbc:	bd80      	pop	{r7, pc}
   1ecbe:	46c0      	nop			; (mov r8, r8)
   1ecc0:	0001ec89 	.word	0x0001ec89

0001ecc4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1ecc4:	b580      	push	{r7, lr}
   1ecc6:	b082      	sub	sp, #8
   1ecc8:	af00      	add	r7, sp, #0
   1ecca:	0002      	movs	r2, r0
   1eccc:	1dfb      	adds	r3, r7, #7
   1ecce:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1ecd0:	2301      	movs	r3, #1
}
   1ecd2:	0018      	movs	r0, r3
   1ecd4:	46bd      	mov	sp, r7
   1ecd6:	b002      	add	sp, #8
   1ecd8:	bd80      	pop	{r7, pc}
	...

0001ecdc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1ecdc:	b580      	push	{r7, lr}
   1ecde:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1ece0:	2000      	movs	r0, #0
   1ece2:	4b03      	ldr	r3, [pc, #12]	; (1ecf0 <sd_mmc_removal_0+0x14>)
   1ece4:	4798      	blx	r3
   1ece6:	0003      	movs	r3, r0
}
   1ece8:	0018      	movs	r0, r3
   1ecea:	46bd      	mov	sp, r7
   1ecec:	bd80      	pop	{r7, pc}
   1ecee:	46c0      	nop			; (mov r8, r8)
   1ecf0:	0001ecc5 	.word	0x0001ecc5

0001ecf4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1ecf4:	b580      	push	{r7, lr}
   1ecf6:	b084      	sub	sp, #16
   1ecf8:	af00      	add	r7, sp, #0
   1ecfa:	60b9      	str	r1, [r7, #8]
   1ecfc:	607a      	str	r2, [r7, #4]
   1ecfe:	230f      	movs	r3, #15
   1ed00:	18fb      	adds	r3, r7, r3
   1ed02:	1c02      	adds	r2, r0, #0
   1ed04:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1ed06:	68b9      	ldr	r1, [r7, #8]
   1ed08:	230f      	movs	r3, #15
   1ed0a:	18fb      	adds	r3, r7, r3
   1ed0c:	781b      	ldrb	r3, [r3, #0]
   1ed0e:	2201      	movs	r2, #1
   1ed10:	0018      	movs	r0, r3
   1ed12:	4b10      	ldr	r3, [pc, #64]	; (1ed54 <sd_mmc_mem_2_ram+0x60>)
   1ed14:	4798      	blx	r3
   1ed16:	1e03      	subs	r3, r0, #0
   1ed18:	d005      	beq.n	1ed26 <sd_mmc_mem_2_ram+0x32>
   1ed1a:	2b02      	cmp	r3, #2
   1ed1c:	d101      	bne.n	1ed22 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1ed1e:	2302      	movs	r3, #2
   1ed20:	e013      	b.n	1ed4a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1ed22:	2301      	movs	r3, #1
   1ed24:	e011      	b.n	1ed4a <sd_mmc_mem_2_ram+0x56>
		break;
   1ed26:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1ed28:	687b      	ldr	r3, [r7, #4]
   1ed2a:	2101      	movs	r1, #1
   1ed2c:	0018      	movs	r0, r3
   1ed2e:	4b0a      	ldr	r3, [pc, #40]	; (1ed58 <sd_mmc_mem_2_ram+0x64>)
   1ed30:	4798      	blx	r3
   1ed32:	1e03      	subs	r3, r0, #0
   1ed34:	d001      	beq.n	1ed3a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1ed36:	2301      	movs	r3, #1
   1ed38:	e007      	b.n	1ed4a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1ed3a:	2000      	movs	r0, #0
   1ed3c:	4b07      	ldr	r3, [pc, #28]	; (1ed5c <sd_mmc_mem_2_ram+0x68>)
   1ed3e:	4798      	blx	r3
   1ed40:	1e03      	subs	r3, r0, #0
   1ed42:	d001      	beq.n	1ed48 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1ed44:	2301      	movs	r3, #1
   1ed46:	e000      	b.n	1ed4a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1ed48:	2300      	movs	r3, #0
}
   1ed4a:	0018      	movs	r0, r3
   1ed4c:	46bd      	mov	sp, r7
   1ed4e:	b004      	add	sp, #16
   1ed50:	bd80      	pop	{r7, pc}
   1ed52:	46c0      	nop			; (mov r8, r8)
   1ed54:	0001e7bd 	.word	0x0001e7bd
   1ed58:	0001e8a9 	.word	0x0001e8a9
   1ed5c:	0001e901 	.word	0x0001e901

0001ed60 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1ed60:	b580      	push	{r7, lr}
   1ed62:	b082      	sub	sp, #8
   1ed64:	af00      	add	r7, sp, #0
   1ed66:	6078      	str	r0, [r7, #4]
   1ed68:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1ed6a:	683a      	ldr	r2, [r7, #0]
   1ed6c:	687b      	ldr	r3, [r7, #4]
   1ed6e:	0019      	movs	r1, r3
   1ed70:	2000      	movs	r0, #0
   1ed72:	4b03      	ldr	r3, [pc, #12]	; (1ed80 <sd_mmc_mem_2_ram_0+0x20>)
   1ed74:	4798      	blx	r3
   1ed76:	0003      	movs	r3, r0
}
   1ed78:	0018      	movs	r0, r3
   1ed7a:	46bd      	mov	sp, r7
   1ed7c:	b002      	add	sp, #8
   1ed7e:	bd80      	pop	{r7, pc}
   1ed80:	0001ecf5 	.word	0x0001ecf5

0001ed84 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1ed84:	b580      	push	{r7, lr}
   1ed86:	b084      	sub	sp, #16
   1ed88:	af00      	add	r7, sp, #0
   1ed8a:	60b9      	str	r1, [r7, #8]
   1ed8c:	607a      	str	r2, [r7, #4]
   1ed8e:	230f      	movs	r3, #15
   1ed90:	18fb      	adds	r3, r7, r3
   1ed92:	1c02      	adds	r2, r0, #0
   1ed94:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1ed96:	68b9      	ldr	r1, [r7, #8]
   1ed98:	230f      	movs	r3, #15
   1ed9a:	18fb      	adds	r3, r7, r3
   1ed9c:	781b      	ldrb	r3, [r3, #0]
   1ed9e:	2201      	movs	r2, #1
   1eda0:	0018      	movs	r0, r3
   1eda2:	4b10      	ldr	r3, [pc, #64]	; (1ede4 <sd_mmc_ram_2_mem+0x60>)
   1eda4:	4798      	blx	r3
   1eda6:	1e03      	subs	r3, r0, #0
   1eda8:	d005      	beq.n	1edb6 <sd_mmc_ram_2_mem+0x32>
   1edaa:	2b02      	cmp	r3, #2
   1edac:	d101      	bne.n	1edb2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1edae:	2302      	movs	r3, #2
   1edb0:	e013      	b.n	1edda <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1edb2:	2301      	movs	r3, #1
   1edb4:	e011      	b.n	1edda <sd_mmc_ram_2_mem+0x56>
		break;
   1edb6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1edb8:	687b      	ldr	r3, [r7, #4]
   1edba:	2101      	movs	r1, #1
   1edbc:	0018      	movs	r0, r3
   1edbe:	4b0a      	ldr	r3, [pc, #40]	; (1ede8 <sd_mmc_ram_2_mem+0x64>)
   1edc0:	4798      	blx	r3
   1edc2:	1e03      	subs	r3, r0, #0
   1edc4:	d001      	beq.n	1edca <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1edc6:	2301      	movs	r3, #1
   1edc8:	e007      	b.n	1edda <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1edca:	2000      	movs	r0, #0
   1edcc:	4b07      	ldr	r3, [pc, #28]	; (1edec <sd_mmc_ram_2_mem+0x68>)
   1edce:	4798      	blx	r3
   1edd0:	1e03      	subs	r3, r0, #0
   1edd2:	d001      	beq.n	1edd8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1edd4:	2301      	movs	r3, #1
   1edd6:	e000      	b.n	1edda <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1edd8:	2300      	movs	r3, #0
}
   1edda:	0018      	movs	r0, r3
   1eddc:	46bd      	mov	sp, r7
   1edde:	b004      	add	sp, #16
   1ede0:	bd80      	pop	{r7, pc}
   1ede2:	46c0      	nop			; (mov r8, r8)
   1ede4:	0001e999 	.word	0x0001e999
   1ede8:	0001ea81 	.word	0x0001ea81
   1edec:	0001ead9 	.word	0x0001ead9

0001edf0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1edf0:	b580      	push	{r7, lr}
   1edf2:	b082      	sub	sp, #8
   1edf4:	af00      	add	r7, sp, #0
   1edf6:	6078      	str	r0, [r7, #4]
   1edf8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1edfa:	683a      	ldr	r2, [r7, #0]
   1edfc:	687b      	ldr	r3, [r7, #4]
   1edfe:	0019      	movs	r1, r3
   1ee00:	2000      	movs	r0, #0
   1ee02:	4b03      	ldr	r3, [pc, #12]	; (1ee10 <sd_mmc_ram_2_mem_0+0x20>)
   1ee04:	4798      	blx	r3
   1ee06:	0003      	movs	r3, r0
}
   1ee08:	0018      	movs	r0, r3
   1ee0a:	46bd      	mov	sp, r7
   1ee0c:	b002      	add	sp, #8
   1ee0e:	bd80      	pop	{r7, pc}
   1ee10:	0001ed85 	.word	0x0001ed85

0001ee14 <system_pinmux_get_group_from_gpio_pin>:
{
   1ee14:	b580      	push	{r7, lr}
   1ee16:	b084      	sub	sp, #16
   1ee18:	af00      	add	r7, sp, #0
   1ee1a:	0002      	movs	r2, r0
   1ee1c:	1dfb      	adds	r3, r7, #7
   1ee1e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ee20:	230f      	movs	r3, #15
   1ee22:	18fb      	adds	r3, r7, r3
   1ee24:	1dfa      	adds	r2, r7, #7
   1ee26:	7812      	ldrb	r2, [r2, #0]
   1ee28:	09d2      	lsrs	r2, r2, #7
   1ee2a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ee2c:	230e      	movs	r3, #14
   1ee2e:	18fb      	adds	r3, r7, r3
   1ee30:	1dfa      	adds	r2, r7, #7
   1ee32:	7812      	ldrb	r2, [r2, #0]
   1ee34:	0952      	lsrs	r2, r2, #5
   1ee36:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ee38:	4b0d      	ldr	r3, [pc, #52]	; (1ee70 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ee3a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1ee3c:	230f      	movs	r3, #15
   1ee3e:	18fb      	adds	r3, r7, r3
   1ee40:	781b      	ldrb	r3, [r3, #0]
   1ee42:	2b00      	cmp	r3, #0
   1ee44:	d10f      	bne.n	1ee66 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ee46:	230f      	movs	r3, #15
   1ee48:	18fb      	adds	r3, r7, r3
   1ee4a:	781b      	ldrb	r3, [r3, #0]
   1ee4c:	009b      	lsls	r3, r3, #2
   1ee4e:	2210      	movs	r2, #16
   1ee50:	4694      	mov	ip, r2
   1ee52:	44bc      	add	ip, r7
   1ee54:	4463      	add	r3, ip
   1ee56:	3b08      	subs	r3, #8
   1ee58:	681a      	ldr	r2, [r3, #0]
   1ee5a:	230e      	movs	r3, #14
   1ee5c:	18fb      	adds	r3, r7, r3
   1ee5e:	781b      	ldrb	r3, [r3, #0]
   1ee60:	01db      	lsls	r3, r3, #7
   1ee62:	18d3      	adds	r3, r2, r3
   1ee64:	e000      	b.n	1ee68 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1ee66:	2300      	movs	r3, #0
}
   1ee68:	0018      	movs	r0, r3
   1ee6a:	46bd      	mov	sp, r7
   1ee6c:	b004      	add	sp, #16
   1ee6e:	bd80      	pop	{r7, pc}
   1ee70:	41004400 	.word	0x41004400

0001ee74 <system_interrupt_enable>:
{
   1ee74:	b580      	push	{r7, lr}
   1ee76:	b082      	sub	sp, #8
   1ee78:	af00      	add	r7, sp, #0
   1ee7a:	0002      	movs	r2, r0
   1ee7c:	1dfb      	adds	r3, r7, #7
   1ee7e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ee80:	4b06      	ldr	r3, [pc, #24]	; (1ee9c <system_interrupt_enable+0x28>)
   1ee82:	1dfa      	adds	r2, r7, #7
   1ee84:	7812      	ldrb	r2, [r2, #0]
   1ee86:	0011      	movs	r1, r2
   1ee88:	221f      	movs	r2, #31
   1ee8a:	400a      	ands	r2, r1
   1ee8c:	2101      	movs	r1, #1
   1ee8e:	4091      	lsls	r1, r2
   1ee90:	000a      	movs	r2, r1
   1ee92:	601a      	str	r2, [r3, #0]
}
   1ee94:	46c0      	nop			; (mov r8, r8)
   1ee96:	46bd      	mov	sp, r7
   1ee98:	b002      	add	sp, #8
   1ee9a:	bd80      	pop	{r7, pc}
   1ee9c:	e000e100 	.word	0xe000e100

0001eea0 <port_get_group_from_gpio_pin>:
{
   1eea0:	b580      	push	{r7, lr}
   1eea2:	b082      	sub	sp, #8
   1eea4:	af00      	add	r7, sp, #0
   1eea6:	0002      	movs	r2, r0
   1eea8:	1dfb      	adds	r3, r7, #7
   1eeaa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1eeac:	1dfb      	adds	r3, r7, #7
   1eeae:	781b      	ldrb	r3, [r3, #0]
   1eeb0:	0018      	movs	r0, r3
   1eeb2:	4b03      	ldr	r3, [pc, #12]	; (1eec0 <port_get_group_from_gpio_pin+0x20>)
   1eeb4:	4798      	blx	r3
   1eeb6:	0003      	movs	r3, r0
}
   1eeb8:	0018      	movs	r0, r3
   1eeba:	46bd      	mov	sp, r7
   1eebc:	b002      	add	sp, #8
   1eebe:	bd80      	pop	{r7, pc}
   1eec0:	0001ee15 	.word	0x0001ee15

0001eec4 <port_get_config_defaults>:
{
   1eec4:	b580      	push	{r7, lr}
   1eec6:	b082      	sub	sp, #8
   1eec8:	af00      	add	r7, sp, #0
   1eeca:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1eecc:	687b      	ldr	r3, [r7, #4]
   1eece:	2200      	movs	r2, #0
   1eed0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1eed2:	687b      	ldr	r3, [r7, #4]
   1eed4:	2201      	movs	r2, #1
   1eed6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1eed8:	687b      	ldr	r3, [r7, #4]
   1eeda:	2200      	movs	r2, #0
   1eedc:	709a      	strb	r2, [r3, #2]
}
   1eede:	46c0      	nop			; (mov r8, r8)
   1eee0:	46bd      	mov	sp, r7
   1eee2:	b002      	add	sp, #8
   1eee4:	bd80      	pop	{r7, pc}
	...

0001eee8 <port_pin_set_output_level>:
{
   1eee8:	b580      	push	{r7, lr}
   1eeea:	b084      	sub	sp, #16
   1eeec:	af00      	add	r7, sp, #0
   1eeee:	0002      	movs	r2, r0
   1eef0:	1dfb      	adds	r3, r7, #7
   1eef2:	701a      	strb	r2, [r3, #0]
   1eef4:	1dbb      	adds	r3, r7, #6
   1eef6:	1c0a      	adds	r2, r1, #0
   1eef8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1eefa:	1dfb      	adds	r3, r7, #7
   1eefc:	781b      	ldrb	r3, [r3, #0]
   1eefe:	0018      	movs	r0, r3
   1ef00:	4b0d      	ldr	r3, [pc, #52]	; (1ef38 <port_pin_set_output_level+0x50>)
   1ef02:	4798      	blx	r3
   1ef04:	0003      	movs	r3, r0
   1ef06:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ef08:	1dfb      	adds	r3, r7, #7
   1ef0a:	781b      	ldrb	r3, [r3, #0]
   1ef0c:	221f      	movs	r2, #31
   1ef0e:	4013      	ands	r3, r2
   1ef10:	2201      	movs	r2, #1
   1ef12:	409a      	lsls	r2, r3
   1ef14:	0013      	movs	r3, r2
   1ef16:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ef18:	1dbb      	adds	r3, r7, #6
   1ef1a:	781b      	ldrb	r3, [r3, #0]
   1ef1c:	2b00      	cmp	r3, #0
   1ef1e:	d003      	beq.n	1ef28 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ef20:	68fb      	ldr	r3, [r7, #12]
   1ef22:	68ba      	ldr	r2, [r7, #8]
   1ef24:	619a      	str	r2, [r3, #24]
}
   1ef26:	e002      	b.n	1ef2e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ef28:	68fb      	ldr	r3, [r7, #12]
   1ef2a:	68ba      	ldr	r2, [r7, #8]
   1ef2c:	615a      	str	r2, [r3, #20]
}
   1ef2e:	46c0      	nop			; (mov r8, r8)
   1ef30:	46bd      	mov	sp, r7
   1ef32:	b004      	add	sp, #16
   1ef34:	bd80      	pop	{r7, pc}
   1ef36:	46c0      	nop			; (mov r8, r8)
   1ef38:	0001eea1 	.word	0x0001eea1

0001ef3c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1ef3c:	b580      	push	{r7, lr}
   1ef3e:	b084      	sub	sp, #16
   1ef40:	af00      	add	r7, sp, #0
   1ef42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ef44:	687b      	ldr	r3, [r7, #4]
   1ef46:	681b      	ldr	r3, [r3, #0]
   1ef48:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1ef4a:	68fb      	ldr	r3, [r7, #12]
   1ef4c:	69db      	ldr	r3, [r3, #28]
   1ef4e:	1e5a      	subs	r2, r3, #1
   1ef50:	4193      	sbcs	r3, r2
   1ef52:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1ef54:	0018      	movs	r0, r3
   1ef56:	46bd      	mov	sp, r7
   1ef58:	b004      	add	sp, #16
   1ef5a:	bd80      	pop	{r7, pc}

0001ef5c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1ef5c:	b580      	push	{r7, lr}
   1ef5e:	b082      	sub	sp, #8
   1ef60:	af00      	add	r7, sp, #0
   1ef62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1ef64:	687b      	ldr	r3, [r7, #4]
   1ef66:	2201      	movs	r2, #1
   1ef68:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1ef6a:	687b      	ldr	r3, [r7, #4]
   1ef6c:	2200      	movs	r2, #0
   1ef6e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1ef70:	687b      	ldr	r3, [r7, #4]
   1ef72:	2200      	movs	r2, #0
   1ef74:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1ef76:	687b      	ldr	r3, [r7, #4]
   1ef78:	22c0      	movs	r2, #192	; 0xc0
   1ef7a:	0392      	lsls	r2, r2, #14
   1ef7c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1ef7e:	687b      	ldr	r3, [r7, #4]
   1ef80:	2200      	movs	r2, #0
   1ef82:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1ef84:	687b      	ldr	r3, [r7, #4]
   1ef86:	2200      	movs	r2, #0
   1ef88:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1ef8a:	687b      	ldr	r3, [r7, #4]
   1ef8c:	2201      	movs	r2, #1
   1ef8e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1ef90:	687b      	ldr	r3, [r7, #4]
   1ef92:	2201      	movs	r2, #1
   1ef94:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1ef96:	687b      	ldr	r3, [r7, #4]
   1ef98:	2200      	movs	r2, #0
   1ef9a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1ef9c:	687b      	ldr	r3, [r7, #4]
   1ef9e:	2224      	movs	r2, #36	; 0x24
   1efa0:	2100      	movs	r1, #0
   1efa2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1efa4:	687b      	ldr	r3, [r7, #4]
   1efa6:	3318      	adds	r3, #24
   1efa8:	220c      	movs	r2, #12
   1efaa:	2100      	movs	r1, #0
   1efac:	0018      	movs	r0, r3
   1efae:	4b0a      	ldr	r3, [pc, #40]	; (1efd8 <spi_get_config_defaults+0x7c>)
   1efb0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1efb2:	687b      	ldr	r3, [r7, #4]
   1efb4:	4a09      	ldr	r2, [pc, #36]	; (1efdc <spi_get_config_defaults+0x80>)
   1efb6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1efb8:	687b      	ldr	r3, [r7, #4]
   1efba:	2200      	movs	r2, #0
   1efbc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1efbe:	687b      	ldr	r3, [r7, #4]
   1efc0:	2200      	movs	r2, #0
   1efc2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1efc4:	687b      	ldr	r3, [r7, #4]
   1efc6:	2200      	movs	r2, #0
   1efc8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1efca:	687b      	ldr	r3, [r7, #4]
   1efcc:	2200      	movs	r2, #0
   1efce:	635a      	str	r2, [r3, #52]	; 0x34

};
   1efd0:	46c0      	nop			; (mov r8, r8)
   1efd2:	46bd      	mov	sp, r7
   1efd4:	b002      	add	sp, #8
   1efd6:	bd80      	pop	{r7, pc}
   1efd8:	00034043 	.word	0x00034043
   1efdc:	000186a0 	.word	0x000186a0

0001efe0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1efe0:	b580      	push	{r7, lr}
   1efe2:	b082      	sub	sp, #8
   1efe4:	af00      	add	r7, sp, #0
   1efe6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1efe8:	687b      	ldr	r3, [r7, #4]
   1efea:	220a      	movs	r2, #10
   1efec:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1efee:	687b      	ldr	r3, [r7, #4]
   1eff0:	2200      	movs	r2, #0
   1eff2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1eff4:	687b      	ldr	r3, [r7, #4]
   1eff6:	2200      	movs	r2, #0
   1eff8:	709a      	strb	r2, [r3, #2]
}
   1effa:	46c0      	nop			; (mov r8, r8)
   1effc:	46bd      	mov	sp, r7
   1effe:	b002      	add	sp, #8
   1f000:	bd80      	pop	{r7, pc}
	...

0001f004 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1f004:	b580      	push	{r7, lr}
   1f006:	b084      	sub	sp, #16
   1f008:	af00      	add	r7, sp, #0
   1f00a:	6078      	str	r0, [r7, #4]
   1f00c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1f00e:	683b      	ldr	r3, [r7, #0]
   1f010:	781a      	ldrb	r2, [r3, #0]
   1f012:	687b      	ldr	r3, [r7, #4]
   1f014:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f016:	683b      	ldr	r3, [r7, #0]
   1f018:	785a      	ldrb	r2, [r3, #1]
   1f01a:	687b      	ldr	r3, [r7, #4]
   1f01c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f01e:	683b      	ldr	r3, [r7, #0]
   1f020:	789a      	ldrb	r2, [r3, #2]
   1f022:	687b      	ldr	r3, [r7, #4]
   1f024:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f026:	230c      	movs	r3, #12
   1f028:	18fb      	adds	r3, r7, r3
   1f02a:	0018      	movs	r0, r3
   1f02c:	4b0b      	ldr	r3, [pc, #44]	; (1f05c <spi_attach_slave+0x58>)
   1f02e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f030:	230c      	movs	r3, #12
   1f032:	18fb      	adds	r3, r7, r3
   1f034:	2201      	movs	r2, #1
   1f036:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f038:	687b      	ldr	r3, [r7, #4]
   1f03a:	781b      	ldrb	r3, [r3, #0]
   1f03c:	220c      	movs	r2, #12
   1f03e:	18ba      	adds	r2, r7, r2
   1f040:	0011      	movs	r1, r2
   1f042:	0018      	movs	r0, r3
   1f044:	4b06      	ldr	r3, [pc, #24]	; (1f060 <spi_attach_slave+0x5c>)
   1f046:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f048:	687b      	ldr	r3, [r7, #4]
   1f04a:	781b      	ldrb	r3, [r3, #0]
   1f04c:	2101      	movs	r1, #1
   1f04e:	0018      	movs	r0, r3
   1f050:	4b04      	ldr	r3, [pc, #16]	; (1f064 <spi_attach_slave+0x60>)
   1f052:	4798      	blx	r3
}
   1f054:	46c0      	nop			; (mov r8, r8)
   1f056:	46bd      	mov	sp, r7
   1f058:	b004      	add	sp, #16
   1f05a:	bd80      	pop	{r7, pc}
   1f05c:	0001eec5 	.word	0x0001eec5
   1f060:	000263a9 	.word	0x000263a9
   1f064:	0001eee9 	.word	0x0001eee9

0001f068 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1f068:	b580      	push	{r7, lr}
   1f06a:	b084      	sub	sp, #16
   1f06c:	af00      	add	r7, sp, #0
   1f06e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f070:	687b      	ldr	r3, [r7, #4]
   1f072:	681b      	ldr	r3, [r3, #0]
   1f074:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f076:	687b      	ldr	r3, [r7, #4]
   1f078:	681b      	ldr	r3, [r3, #0]
   1f07a:	0018      	movs	r0, r3
   1f07c:	4b0b      	ldr	r3, [pc, #44]	; (1f0ac <spi_enable+0x44>)
   1f07e:	4798      	blx	r3
   1f080:	0003      	movs	r3, r0
   1f082:	0018      	movs	r0, r3
   1f084:	4b0a      	ldr	r3, [pc, #40]	; (1f0b0 <spi_enable+0x48>)
   1f086:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f088:	46c0      	nop			; (mov r8, r8)
   1f08a:	687b      	ldr	r3, [r7, #4]
   1f08c:	0018      	movs	r0, r3
   1f08e:	4b09      	ldr	r3, [pc, #36]	; (1f0b4 <spi_enable+0x4c>)
   1f090:	4798      	blx	r3
   1f092:	1e03      	subs	r3, r0, #0
   1f094:	d1f9      	bne.n	1f08a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f096:	68fb      	ldr	r3, [r7, #12]
   1f098:	681b      	ldr	r3, [r3, #0]
   1f09a:	2202      	movs	r2, #2
   1f09c:	431a      	orrs	r2, r3
   1f09e:	68fb      	ldr	r3, [r7, #12]
   1f0a0:	601a      	str	r2, [r3, #0]
}
   1f0a2:	46c0      	nop			; (mov r8, r8)
   1f0a4:	46bd      	mov	sp, r7
   1f0a6:	b004      	add	sp, #16
   1f0a8:	bd80      	pop	{r7, pc}
   1f0aa:	46c0      	nop			; (mov r8, r8)
   1f0ac:	00027079 	.word	0x00027079
   1f0b0:	0001ee75 	.word	0x0001ee75
   1f0b4:	0001ef3d 	.word	0x0001ef3d

0001f0b8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f0b8:	b580      	push	{r7, lr}
   1f0ba:	b084      	sub	sp, #16
   1f0bc:	af00      	add	r7, sp, #0
   1f0be:	6078      	str	r0, [r7, #4]
   1f0c0:	000a      	movs	r2, r1
   1f0c2:	1cfb      	adds	r3, r7, #3
   1f0c4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f0c6:	230f      	movs	r3, #15
   1f0c8:	18fb      	adds	r3, r7, r3
   1f0ca:	2200      	movs	r2, #0
   1f0cc:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f0ce:	e038      	b.n	1f142 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f0d0:	687b      	ldr	r3, [r7, #4]
   1f0d2:	1c5a      	adds	r2, r3, #1
   1f0d4:	607a      	str	r2, [r7, #4]
   1f0d6:	220e      	movs	r2, #14
   1f0d8:	18ba      	adds	r2, r7, r2
   1f0da:	781b      	ldrb	r3, [r3, #0]
   1f0dc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f0de:	230d      	movs	r3, #13
   1f0e0:	18fb      	adds	r3, r7, r3
   1f0e2:	2200      	movs	r2, #0
   1f0e4:	701a      	strb	r2, [r3, #0]
   1f0e6:	e027      	b.n	1f138 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f0e8:	230f      	movs	r3, #15
   1f0ea:	18fa      	adds	r2, r7, r3
   1f0ec:	230f      	movs	r3, #15
   1f0ee:	18fb      	adds	r3, r7, r3
   1f0f0:	781b      	ldrb	r3, [r3, #0]
   1f0f2:	18db      	adds	r3, r3, r3
   1f0f4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f0f6:	230e      	movs	r3, #14
   1f0f8:	18fa      	adds	r2, r7, r3
   1f0fa:	230f      	movs	r3, #15
   1f0fc:	18fb      	adds	r3, r7, r3
   1f0fe:	7812      	ldrb	r2, [r2, #0]
   1f100:	781b      	ldrb	r3, [r3, #0]
   1f102:	4053      	eors	r3, r2
   1f104:	b2db      	uxtb	r3, r3
   1f106:	b25b      	sxtb	r3, r3
   1f108:	2b00      	cmp	r3, #0
   1f10a:	da07      	bge.n	1f11c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f10c:	230f      	movs	r3, #15
   1f10e:	18fb      	adds	r3, r7, r3
   1f110:	220f      	movs	r2, #15
   1f112:	18ba      	adds	r2, r7, r2
   1f114:	7812      	ldrb	r2, [r2, #0]
   1f116:	2109      	movs	r1, #9
   1f118:	404a      	eors	r2, r1
   1f11a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f11c:	230e      	movs	r3, #14
   1f11e:	18fa      	adds	r2, r7, r3
   1f120:	230e      	movs	r3, #14
   1f122:	18fb      	adds	r3, r7, r3
   1f124:	781b      	ldrb	r3, [r3, #0]
   1f126:	18db      	adds	r3, r3, r3
   1f128:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f12a:	230d      	movs	r3, #13
   1f12c:	18fb      	adds	r3, r7, r3
   1f12e:	781a      	ldrb	r2, [r3, #0]
   1f130:	230d      	movs	r3, #13
   1f132:	18fb      	adds	r3, r7, r3
   1f134:	3201      	adds	r2, #1
   1f136:	701a      	strb	r2, [r3, #0]
   1f138:	230d      	movs	r3, #13
   1f13a:	18fb      	adds	r3, r7, r3
   1f13c:	781b      	ldrb	r3, [r3, #0]
   1f13e:	2b07      	cmp	r3, #7
   1f140:	d9d2      	bls.n	1f0e8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f142:	1cfb      	adds	r3, r7, #3
   1f144:	781b      	ldrb	r3, [r3, #0]
   1f146:	1cfa      	adds	r2, r7, #3
   1f148:	1e59      	subs	r1, r3, #1
   1f14a:	7011      	strb	r1, [r2, #0]
   1f14c:	2b00      	cmp	r3, #0
   1f14e:	d1bf      	bne.n	1f0d0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f150:	230f      	movs	r3, #15
   1f152:	18fb      	adds	r3, r7, r3
   1f154:	781b      	ldrb	r3, [r3, #0]
   1f156:	005b      	lsls	r3, r3, #1
   1f158:	b25b      	sxtb	r3, r3
   1f15a:	2201      	movs	r2, #1
   1f15c:	4313      	orrs	r3, r2
   1f15e:	b25a      	sxtb	r2, r3
   1f160:	230f      	movs	r3, #15
   1f162:	18fb      	adds	r3, r7, r3
   1f164:	701a      	strb	r2, [r3, #0]
	return crc;
   1f166:	230f      	movs	r3, #15
   1f168:	18fb      	adds	r3, r7, r3
   1f16a:	781b      	ldrb	r3, [r3, #0]
}
   1f16c:	0018      	movs	r0, r3
   1f16e:	46bd      	mov	sp, r7
   1f170:	b004      	add	sp, #16
   1f172:	bd80      	pop	{r7, pc}

0001f174 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f174:	b590      	push	{r4, r7, lr}
   1f176:	b083      	sub	sp, #12
   1f178:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f17a:	1c7b      	adds	r3, r7, #1
   1f17c:	22ff      	movs	r2, #255	; 0xff
   1f17e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f180:	1cbb      	adds	r3, r7, #2
   1f182:	22ff      	movs	r2, #255	; 0xff
   1f184:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f186:	1cbb      	adds	r3, r7, #2
   1f188:	881b      	ldrh	r3, [r3, #0]
   1f18a:	1c79      	adds	r1, r7, #1
   1f18c:	4811      	ldr	r0, [pc, #68]	; (1f1d4 <sd_mmc_spi_wait_busy+0x60>)
   1f18e:	2201      	movs	r2, #1
   1f190:	4c11      	ldr	r4, [pc, #68]	; (1f1d8 <sd_mmc_spi_wait_busy+0x64>)
   1f192:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f194:	4b11      	ldr	r3, [pc, #68]	; (1f1dc <sd_mmc_spi_wait_busy+0x68>)
   1f196:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f198:	1cbb      	adds	r3, r7, #2
   1f19a:	881b      	ldrh	r3, [r3, #0]
   1f19c:	1c79      	adds	r1, r7, #1
   1f19e:	480d      	ldr	r0, [pc, #52]	; (1f1d4 <sd_mmc_spi_wait_busy+0x60>)
   1f1a0:	2201      	movs	r2, #1
   1f1a2:	4c0d      	ldr	r4, [pc, #52]	; (1f1d8 <sd_mmc_spi_wait_busy+0x64>)
   1f1a4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f1a6:	1cbb      	adds	r3, r7, #2
   1f1a8:	881b      	ldrh	r3, [r3, #0]
   1f1aa:	1c79      	adds	r1, r7, #1
   1f1ac:	4809      	ldr	r0, [pc, #36]	; (1f1d4 <sd_mmc_spi_wait_busy+0x60>)
   1f1ae:	2201      	movs	r2, #1
   1f1b0:	4c09      	ldr	r4, [pc, #36]	; (1f1d8 <sd_mmc_spi_wait_busy+0x64>)
   1f1b2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f1b4:	687b      	ldr	r3, [r7, #4]
   1f1b6:	1e5a      	subs	r2, r3, #1
   1f1b8:	607a      	str	r2, [r7, #4]
   1f1ba:	2b00      	cmp	r3, #0
   1f1bc:	d101      	bne.n	1f1c2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f1be:	2300      	movs	r3, #0
   1f1c0:	e004      	b.n	1f1cc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f1c2:	1c7b      	adds	r3, r7, #1
   1f1c4:	781b      	ldrb	r3, [r3, #0]
   1f1c6:	2bff      	cmp	r3, #255	; 0xff
   1f1c8:	d1ed      	bne.n	1f1a6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f1ca:	2301      	movs	r3, #1
}
   1f1cc:	0018      	movs	r0, r3
   1f1ce:	46bd      	mov	sp, r7
   1f1d0:	b003      	add	sp, #12
   1f1d2:	bd90      	pop	{r4, r7, pc}
   1f1d4:	200040ac 	.word	0x200040ac
   1f1d8:	000279b9 	.word	0x000279b9
   1f1dc:	00030d40 	.word	0x00030d40

0001f1e0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f1e0:	b590      	push	{r4, r7, lr}
   1f1e2:	b083      	sub	sp, #12
   1f1e4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f1e6:	1cbb      	adds	r3, r7, #2
   1f1e8:	22ff      	movs	r2, #255	; 0xff
   1f1ea:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f1ec:	1c7b      	adds	r3, r7, #1
   1f1ee:	2200      	movs	r2, #0
   1f1f0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f1f2:	4b18      	ldr	r3, [pc, #96]	; (1f254 <sd_mmc_spi_start_read_block+0x74>)
   1f1f4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f1f6:	687b      	ldr	r3, [r7, #4]
   1f1f8:	1e5a      	subs	r2, r3, #1
   1f1fa:	607a      	str	r2, [r7, #4]
   1f1fc:	2b00      	cmp	r3, #0
   1f1fe:	d104      	bne.n	1f20a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f200:	4b15      	ldr	r3, [pc, #84]	; (1f258 <sd_mmc_spi_start_read_block+0x78>)
   1f202:	2204      	movs	r2, #4
   1f204:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f206:	2300      	movs	r3, #0
   1f208:	e020      	b.n	1f24c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f20a:	1cbb      	adds	r3, r7, #2
   1f20c:	881b      	ldrh	r3, [r3, #0]
   1f20e:	1c79      	adds	r1, r7, #1
   1f210:	4812      	ldr	r0, [pc, #72]	; (1f25c <sd_mmc_spi_start_read_block+0x7c>)
   1f212:	2201      	movs	r2, #1
   1f214:	4c12      	ldr	r4, [pc, #72]	; (1f260 <sd_mmc_spi_start_read_block+0x80>)
   1f216:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f218:	1c7b      	adds	r3, r7, #1
   1f21a:	781b      	ldrb	r3, [r3, #0]
   1f21c:	001a      	movs	r2, r3
   1f21e:	23f0      	movs	r3, #240	; 0xf0
   1f220:	4013      	ands	r3, r2
   1f222:	d10e      	bne.n	1f242 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f224:	1c7b      	adds	r3, r7, #1
   1f226:	781b      	ldrb	r3, [r3, #0]
   1f228:	001a      	movs	r2, r3
   1f22a:	2307      	movs	r3, #7
   1f22c:	4013      	ands	r3, r2
   1f22e:	d003      	beq.n	1f238 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f230:	4b09      	ldr	r3, [pc, #36]	; (1f258 <sd_mmc_spi_start_read_block+0x78>)
   1f232:	2207      	movs	r2, #7
   1f234:	701a      	strb	r2, [r3, #0]
   1f236:	e002      	b.n	1f23e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f238:	4b07      	ldr	r3, [pc, #28]	; (1f258 <sd_mmc_spi_start_read_block+0x78>)
   1f23a:	220b      	movs	r2, #11
   1f23c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f23e:	2300      	movs	r3, #0
   1f240:	e004      	b.n	1f24c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f242:	1c7b      	adds	r3, r7, #1
   1f244:	781b      	ldrb	r3, [r3, #0]
   1f246:	2bfe      	cmp	r3, #254	; 0xfe
   1f248:	d1d5      	bne.n	1f1f6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f24a:	2301      	movs	r3, #1
}
   1f24c:	0018      	movs	r0, r3
   1f24e:	46bd      	mov	sp, r7
   1f250:	b003      	add	sp, #12
   1f252:	bd90      	pop	{r4, r7, pc}
   1f254:	0007a120 	.word	0x0007a120
   1f258:	200040ef 	.word	0x200040ef
   1f25c:	200040ac 	.word	0x200040ac
   1f260:	000279b9 	.word	0x000279b9

0001f264 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f264:	b590      	push	{r4, r7, lr}
   1f266:	b083      	sub	sp, #12
   1f268:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f26a:	1dbb      	adds	r3, r7, #6
   1f26c:	22ff      	movs	r2, #255	; 0xff
   1f26e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f270:	1dbb      	adds	r3, r7, #6
   1f272:	881b      	ldrh	r3, [r3, #0]
   1f274:	1d39      	adds	r1, r7, #4
   1f276:	4804      	ldr	r0, [pc, #16]	; (1f288 <sd_mmc_spi_stop_read_block+0x24>)
   1f278:	2202      	movs	r2, #2
   1f27a:	4c04      	ldr	r4, [pc, #16]	; (1f28c <sd_mmc_spi_stop_read_block+0x28>)
   1f27c:	47a0      	blx	r4
			dummy);
}
   1f27e:	46c0      	nop			; (mov r8, r8)
   1f280:	46bd      	mov	sp, r7
   1f282:	b003      	add	sp, #12
   1f284:	bd90      	pop	{r4, r7, pc}
   1f286:	46c0      	nop			; (mov r8, r8)
   1f288:	200040ac 	.word	0x200040ac
   1f28c:	000279b9 	.word	0x000279b9

0001f290 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f290:	b580      	push	{r7, lr}
   1f292:	b082      	sub	sp, #8
   1f294:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f296:	1dfb      	adds	r3, r7, #7
   1f298:	22ff      	movs	r2, #255	; 0xff
   1f29a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f29c:	1df9      	adds	r1, r7, #7
   1f29e:	4b0d      	ldr	r3, [pc, #52]	; (1f2d4 <sd_mmc_spi_start_write_block+0x44>)
   1f2a0:	2201      	movs	r2, #1
   1f2a2:	0018      	movs	r0, r3
   1f2a4:	4b0c      	ldr	r3, [pc, #48]	; (1f2d8 <sd_mmc_spi_start_write_block+0x48>)
   1f2a6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f2a8:	4b0c      	ldr	r3, [pc, #48]	; (1f2dc <sd_mmc_spi_start_write_block+0x4c>)
   1f2aa:	881b      	ldrh	r3, [r3, #0]
   1f2ac:	2b01      	cmp	r3, #1
   1f2ae:	d103      	bne.n	1f2b8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f2b0:	1dbb      	adds	r3, r7, #6
   1f2b2:	22fe      	movs	r2, #254	; 0xfe
   1f2b4:	701a      	strb	r2, [r3, #0]
   1f2b6:	e002      	b.n	1f2be <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f2b8:	1dbb      	adds	r3, r7, #6
   1f2ba:	22fc      	movs	r2, #252	; 0xfc
   1f2bc:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f2be:	1db9      	adds	r1, r7, #6
   1f2c0:	4b04      	ldr	r3, [pc, #16]	; (1f2d4 <sd_mmc_spi_start_write_block+0x44>)
   1f2c2:	2201      	movs	r2, #1
   1f2c4:	0018      	movs	r0, r3
   1f2c6:	4b04      	ldr	r3, [pc, #16]	; (1f2d8 <sd_mmc_spi_start_write_block+0x48>)
   1f2c8:	4798      	blx	r3
}
   1f2ca:	46c0      	nop			; (mov r8, r8)
   1f2cc:	46bd      	mov	sp, r7
   1f2ce:	b002      	add	sp, #8
   1f2d0:	bd80      	pop	{r7, pc}
   1f2d2:	46c0      	nop			; (mov r8, r8)
   1f2d4:	200040ac 	.word	0x200040ac
   1f2d8:	00027bdd 	.word	0x00027bdd
   1f2dc:	200040fa 	.word	0x200040fa

0001f2e0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f2e0:	b590      	push	{r4, r7, lr}
   1f2e2:	b083      	sub	sp, #12
   1f2e4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f2e6:	1dbb      	adds	r3, r7, #6
   1f2e8:	22ff      	movs	r2, #255	; 0xff
   1f2ea:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f2ec:	1cbb      	adds	r3, r7, #2
   1f2ee:	2201      	movs	r2, #1
   1f2f0:	4252      	negs	r2, r2
   1f2f2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f2f4:	1cb9      	adds	r1, r7, #2
   1f2f6:	4b1b      	ldr	r3, [pc, #108]	; (1f364 <sd_mmc_spi_stop_write_block+0x84>)
   1f2f8:	2202      	movs	r2, #2
   1f2fa:	0018      	movs	r0, r3
   1f2fc:	4b1a      	ldr	r3, [pc, #104]	; (1f368 <sd_mmc_spi_stop_write_block+0x88>)
   1f2fe:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f300:	1dbb      	adds	r3, r7, #6
   1f302:	881b      	ldrh	r3, [r3, #0]
   1f304:	1d79      	adds	r1, r7, #5
   1f306:	4817      	ldr	r0, [pc, #92]	; (1f364 <sd_mmc_spi_stop_write_block+0x84>)
   1f308:	2201      	movs	r2, #1
   1f30a:	4c18      	ldr	r4, [pc, #96]	; (1f36c <sd_mmc_spi_stop_write_block+0x8c>)
   1f30c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f30e:	1d7b      	adds	r3, r7, #5
   1f310:	781b      	ldrb	r3, [r3, #0]
   1f312:	001a      	movs	r2, r3
   1f314:	2310      	movs	r3, #16
   1f316:	4013      	ands	r3, r2
   1f318:	d105      	bne.n	1f326 <sd_mmc_spi_stop_write_block+0x46>
   1f31a:	1d7b      	adds	r3, r7, #5
   1f31c:	781b      	ldrb	r3, [r3, #0]
   1f31e:	001a      	movs	r2, r3
   1f320:	2301      	movs	r3, #1
   1f322:	4013      	ands	r3, r2
   1f324:	d104      	bne.n	1f330 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f326:	4b12      	ldr	r3, [pc, #72]	; (1f370 <sd_mmc_spi_stop_write_block+0x90>)
   1f328:	2201      	movs	r2, #1
   1f32a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f32c:	2300      	movs	r3, #0
   1f32e:	e014      	b.n	1f35a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f330:	1d7b      	adds	r3, r7, #5
   1f332:	781b      	ldrb	r3, [r3, #0]
   1f334:	001a      	movs	r2, r3
   1f336:	231e      	movs	r3, #30
   1f338:	4013      	ands	r3, r2
   1f33a:	2b04      	cmp	r3, #4
   1f33c:	d00b      	beq.n	1f356 <sd_mmc_spi_stop_write_block+0x76>
   1f33e:	2b0a      	cmp	r3, #10
   1f340:	d104      	bne.n	1f34c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f342:	4b0b      	ldr	r3, [pc, #44]	; (1f370 <sd_mmc_spi_stop_write_block+0x90>)
   1f344:	2208      	movs	r2, #8
   1f346:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f348:	2300      	movs	r3, #0
   1f34a:	e006      	b.n	1f35a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f34c:	4b08      	ldr	r3, [pc, #32]	; (1f370 <sd_mmc_spi_stop_write_block+0x90>)
   1f34e:	220a      	movs	r2, #10
   1f350:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f352:	2300      	movs	r3, #0
   1f354:	e001      	b.n	1f35a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f356:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f358:	2301      	movs	r3, #1
}
   1f35a:	0018      	movs	r0, r3
   1f35c:	46bd      	mov	sp, r7
   1f35e:	b003      	add	sp, #12
   1f360:	bd90      	pop	{r4, r7, pc}
   1f362:	46c0      	nop			; (mov r8, r8)
   1f364:	200040ac 	.word	0x200040ac
   1f368:	00027bdd 	.word	0x00027bdd
   1f36c:	000279b9 	.word	0x000279b9
   1f370:	200040ef 	.word	0x200040ef

0001f374 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f374:	b590      	push	{r4, r7, lr}
   1f376:	b083      	sub	sp, #12
   1f378:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f37a:	4b1d      	ldr	r3, [pc, #116]	; (1f3f0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f37c:	881b      	ldrh	r3, [r3, #0]
   1f37e:	2b01      	cmp	r3, #1
   1f380:	d101      	bne.n	1f386 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f382:	2301      	movs	r3, #1
   1f384:	e030      	b.n	1f3e8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f386:	4b1a      	ldr	r3, [pc, #104]	; (1f3f0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f388:	881b      	ldrh	r3, [r3, #0]
   1f38a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f38c:	4b19      	ldr	r3, [pc, #100]	; (1f3f4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f38e:	681a      	ldr	r2, [r3, #0]
   1f390:	4b19      	ldr	r3, [pc, #100]	; (1f3f8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f392:	881b      	ldrh	r3, [r3, #0]
   1f394:	0019      	movs	r1, r3
   1f396:	4b19      	ldr	r3, [pc, #100]	; (1f3fc <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f398:	0010      	movs	r0, r2
   1f39a:	4798      	blx	r3
   1f39c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f39e:	429c      	cmp	r4, r3
   1f3a0:	d901      	bls.n	1f3a6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f3a2:	2301      	movs	r3, #1
   1f3a4:	e020      	b.n	1f3e8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f3a6:	1dfb      	adds	r3, r7, #7
   1f3a8:	22ff      	movs	r2, #255	; 0xff
   1f3aa:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f3ac:	1df9      	adds	r1, r7, #7
   1f3ae:	4b14      	ldr	r3, [pc, #80]	; (1f400 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f3b0:	2201      	movs	r2, #1
   1f3b2:	0018      	movs	r0, r3
   1f3b4:	4b13      	ldr	r3, [pc, #76]	; (1f404 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f3b6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f3b8:	1dfb      	adds	r3, r7, #7
   1f3ba:	22fd      	movs	r2, #253	; 0xfd
   1f3bc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f3be:	1df9      	adds	r1, r7, #7
   1f3c0:	4b0f      	ldr	r3, [pc, #60]	; (1f400 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f3c2:	2201      	movs	r2, #1
   1f3c4:	0018      	movs	r0, r3
   1f3c6:	4b0f      	ldr	r3, [pc, #60]	; (1f404 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f3c8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f3ca:	4b0f      	ldr	r3, [pc, #60]	; (1f408 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f3cc:	4798      	blx	r3
   1f3ce:	0003      	movs	r3, r0
   1f3d0:	001a      	movs	r2, r3
   1f3d2:	2301      	movs	r3, #1
   1f3d4:	4053      	eors	r3, r2
   1f3d6:	b2db      	uxtb	r3, r3
   1f3d8:	2b00      	cmp	r3, #0
   1f3da:	d004      	beq.n	1f3e6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f3dc:	4b0b      	ldr	r3, [pc, #44]	; (1f40c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f3de:	2205      	movs	r2, #5
   1f3e0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f3e2:	2300      	movs	r3, #0
   1f3e4:	e000      	b.n	1f3e8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f3e6:	2301      	movs	r3, #1
}
   1f3e8:	0018      	movs	r0, r3
   1f3ea:	46bd      	mov	sp, r7
   1f3ec:	b003      	add	sp, #12
   1f3ee:	bd90      	pop	{r4, r7, pc}
   1f3f0:	200040fa 	.word	0x200040fa
   1f3f4:	200040f4 	.word	0x200040f4
   1f3f8:	200040f8 	.word	0x200040f8
   1f3fc:	00032389 	.word	0x00032389
   1f400:	200040ac 	.word	0x200040ac
   1f404:	00027bdd 	.word	0x00027bdd
   1f408:	0001f175 	.word	0x0001f175
   1f40c:	200040ef 	.word	0x200040ef

0001f410 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1f410:	b580      	push	{r7, lr}
   1f412:	b090      	sub	sp, #64	; 0x40
   1f414:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f416:	4b1f      	ldr	r3, [pc, #124]	; (1f494 <sd_mmc_spi_init+0x84>)
   1f418:	2200      	movs	r2, #0
   1f41a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f41c:	233c      	movs	r3, #60	; 0x3c
   1f41e:	18fb      	adds	r3, r7, r3
   1f420:	0018      	movs	r0, r3
   1f422:	4b1d      	ldr	r3, [pc, #116]	; (1f498 <sd_mmc_spi_init+0x88>)
   1f424:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1f426:	1d3b      	adds	r3, r7, #4
   1f428:	0018      	movs	r0, r3
   1f42a:	4b1c      	ldr	r3, [pc, #112]	; (1f49c <sd_mmc_spi_init+0x8c>)
   1f42c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1f42e:	1d3b      	adds	r3, r7, #4
   1f430:	2280      	movs	r2, #128	; 0x80
   1f432:	0252      	lsls	r2, r2, #9
   1f434:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1f436:	1d3b      	adds	r3, r7, #4
   1f438:	4a19      	ldr	r2, [pc, #100]	; (1f4a0 <sd_mmc_spi_init+0x90>)
   1f43a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1f43c:	1d3b      	adds	r3, r7, #4
   1f43e:	4a19      	ldr	r2, [pc, #100]	; (1f4a4 <sd_mmc_spi_init+0x94>)
   1f440:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1f442:	1d3b      	adds	r3, r7, #4
   1f444:	4a18      	ldr	r2, [pc, #96]	; (1f4a8 <sd_mmc_spi_init+0x98>)
   1f446:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1f448:	1d3b      	adds	r3, r7, #4
   1f44a:	4a18      	ldr	r2, [pc, #96]	; (1f4ac <sd_mmc_spi_init+0x9c>)
   1f44c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1f44e:	1d3b      	adds	r3, r7, #4
   1f450:	2224      	movs	r2, #36	; 0x24
   1f452:	2100      	movs	r1, #0
   1f454:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1f456:	1d3b      	adds	r3, r7, #4
   1f458:	4a15      	ldr	r2, [pc, #84]	; (1f4b0 <sd_mmc_spi_init+0xa0>)
   1f45a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1f45c:	1d3a      	adds	r2, r7, #4
   1f45e:	4915      	ldr	r1, [pc, #84]	; (1f4b4 <sd_mmc_spi_init+0xa4>)
   1f460:	4b15      	ldr	r3, [pc, #84]	; (1f4b8 <sd_mmc_spi_init+0xa8>)
   1f462:	0018      	movs	r0, r3
   1f464:	4b15      	ldr	r3, [pc, #84]	; (1f4bc <sd_mmc_spi_init+0xac>)
   1f466:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1f468:	4b13      	ldr	r3, [pc, #76]	; (1f4b8 <sd_mmc_spi_init+0xa8>)
   1f46a:	0018      	movs	r0, r3
   1f46c:	4b14      	ldr	r3, [pc, #80]	; (1f4c0 <sd_mmc_spi_init+0xb0>)
   1f46e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1f470:	4b14      	ldr	r3, [pc, #80]	; (1f4c4 <sd_mmc_spi_init+0xb4>)
   1f472:	0018      	movs	r0, r3
   1f474:	4b14      	ldr	r3, [pc, #80]	; (1f4c8 <sd_mmc_spi_init+0xb8>)
   1f476:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1f478:	4b14      	ldr	r3, [pc, #80]	; (1f4cc <sd_mmc_spi_init+0xbc>)
   1f47a:	781a      	ldrb	r2, [r3, #0]
   1f47c:	4b11      	ldr	r3, [pc, #68]	; (1f4c4 <sd_mmc_spi_init+0xb4>)
   1f47e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1f480:	4a10      	ldr	r2, [pc, #64]	; (1f4c4 <sd_mmc_spi_init+0xb4>)
   1f482:	4b13      	ldr	r3, [pc, #76]	; (1f4d0 <sd_mmc_spi_init+0xc0>)
   1f484:	0011      	movs	r1, r2
   1f486:	0018      	movs	r0, r3
   1f488:	4b12      	ldr	r3, [pc, #72]	; (1f4d4 <sd_mmc_spi_init+0xc4>)
   1f48a:	4798      	blx	r3
}
   1f48c:	46c0      	nop			; (mov r8, r8)
   1f48e:	46bd      	mov	sp, r7
   1f490:	b010      	add	sp, #64	; 0x40
   1f492:	bd80      	pop	{r7, pc}
   1f494:	200040ef 	.word	0x200040ef
   1f498:	0001eec5 	.word	0x0001eec5
   1f49c:	0001ef5d 	.word	0x0001ef5d
   1f4a0:	00100002 	.word	0x00100002
   1f4a4:	00110002 	.word	0x00110002
   1f4a8:	00120002 	.word	0x00120002
   1f4ac:	00130002 	.word	0x00130002
   1f4b0:	00061a80 	.word	0x00061a80
   1f4b4:	42000c00 	.word	0x42000c00
   1f4b8:	200040ac 	.word	0x200040ac
   1f4bc:	00027829 	.word	0x00027829
   1f4c0:	0001f069 	.word	0x0001f069
   1f4c4:	200040ec 	.word	0x200040ec
   1f4c8:	0001efe1 	.word	0x0001efe1
   1f4cc:	20000100 	.word	0x20000100
   1f4d0:	200040e8 	.word	0x200040e8
   1f4d4:	0001f005 	.word	0x0001f005

0001f4d8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1f4d8:	b590      	push	{r4, r7, lr}
   1f4da:	b083      	sub	sp, #12
   1f4dc:	af00      	add	r7, sp, #0
   1f4de:	0004      	movs	r4, r0
   1f4e0:	6039      	str	r1, [r7, #0]
   1f4e2:	0010      	movs	r0, r2
   1f4e4:	0019      	movs	r1, r3
   1f4e6:	1dfb      	adds	r3, r7, #7
   1f4e8:	1c22      	adds	r2, r4, #0
   1f4ea:	701a      	strb	r2, [r3, #0]
   1f4ec:	1dbb      	adds	r3, r7, #6
   1f4ee:	1c02      	adds	r2, r0, #0
   1f4f0:	701a      	strb	r2, [r3, #0]
   1f4f2:	1d7b      	adds	r3, r7, #5
   1f4f4:	1c0a      	adds	r2, r1, #0
   1f4f6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f4f8:	4b13      	ldr	r3, [pc, #76]	; (1f548 <sd_mmc_spi_select_device+0x70>)
   1f4fa:	2200      	movs	r2, #0
   1f4fc:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1f4fe:	683b      	ldr	r3, [r7, #0]
   1f500:	4a12      	ldr	r2, [pc, #72]	; (1f54c <sd_mmc_spi_select_device+0x74>)
   1f502:	4293      	cmp	r3, r2
   1f504:	d907      	bls.n	1f516 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1f506:	4b11      	ldr	r3, [pc, #68]	; (1f54c <sd_mmc_spi_select_device+0x74>)
   1f508:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f50a:	e004      	b.n	1f516 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1f50c:	683b      	ldr	r3, [r7, #0]
   1f50e:	08db      	lsrs	r3, r3, #3
   1f510:	683a      	ldr	r2, [r7, #0]
   1f512:	1ad3      	subs	r3, r2, r3
   1f514:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f516:	683a      	ldr	r2, [r7, #0]
   1f518:	4b0d      	ldr	r3, [pc, #52]	; (1f550 <sd_mmc_spi_select_device+0x78>)
   1f51a:	0011      	movs	r1, r2
   1f51c:	0018      	movs	r0, r3
   1f51e:	4b0d      	ldr	r3, [pc, #52]	; (1f554 <sd_mmc_spi_select_device+0x7c>)
   1f520:	4798      	blx	r3
   1f522:	0003      	movs	r3, r0
   1f524:	2b17      	cmp	r3, #23
   1f526:	d0f1      	beq.n	1f50c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1f528:	1dfb      	adds	r3, r7, #7
   1f52a:	781a      	ldrb	r2, [r3, #0]
   1f52c:	0013      	movs	r3, r2
   1f52e:	005b      	lsls	r3, r3, #1
   1f530:	189b      	adds	r3, r3, r2
   1f532:	4a09      	ldr	r2, [pc, #36]	; (1f558 <sd_mmc_spi_select_device+0x80>)
   1f534:	1899      	adds	r1, r3, r2
   1f536:	4b06      	ldr	r3, [pc, #24]	; (1f550 <sd_mmc_spi_select_device+0x78>)
   1f538:	2201      	movs	r2, #1
   1f53a:	0018      	movs	r0, r3
   1f53c:	4b07      	ldr	r3, [pc, #28]	; (1f55c <sd_mmc_spi_select_device+0x84>)
   1f53e:	4798      	blx	r3
}
   1f540:	46c0      	nop			; (mov r8, r8)
   1f542:	46bd      	mov	sp, r7
   1f544:	b003      	add	sp, #12
   1f546:	bd90      	pop	{r4, r7, pc}
   1f548:	200040ef 	.word	0x200040ef
   1f54c:	00989680 	.word	0x00989680
   1f550:	200040ac 	.word	0x200040ac
   1f554:	00027551 	.word	0x00027551
   1f558:	200040e8 	.word	0x200040e8
   1f55c:	00027aed 	.word	0x00027aed

0001f560 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1f560:	b580      	push	{r7, lr}
   1f562:	b082      	sub	sp, #8
   1f564:	af00      	add	r7, sp, #0
   1f566:	0002      	movs	r2, r0
   1f568:	1dfb      	adds	r3, r7, #7
   1f56a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f56c:	4b09      	ldr	r3, [pc, #36]	; (1f594 <sd_mmc_spi_deselect_device+0x34>)
   1f56e:	2200      	movs	r2, #0
   1f570:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1f572:	1dfb      	adds	r3, r7, #7
   1f574:	781a      	ldrb	r2, [r3, #0]
   1f576:	0013      	movs	r3, r2
   1f578:	005b      	lsls	r3, r3, #1
   1f57a:	189b      	adds	r3, r3, r2
   1f57c:	4a06      	ldr	r2, [pc, #24]	; (1f598 <sd_mmc_spi_deselect_device+0x38>)
   1f57e:	1899      	adds	r1, r3, r2
   1f580:	4b06      	ldr	r3, [pc, #24]	; (1f59c <sd_mmc_spi_deselect_device+0x3c>)
   1f582:	2200      	movs	r2, #0
   1f584:	0018      	movs	r0, r3
   1f586:	4b06      	ldr	r3, [pc, #24]	; (1f5a0 <sd_mmc_spi_deselect_device+0x40>)
   1f588:	4798      	blx	r3
}
   1f58a:	46c0      	nop			; (mov r8, r8)
   1f58c:	46bd      	mov	sp, r7
   1f58e:	b002      	add	sp, #8
   1f590:	bd80      	pop	{r7, pc}
   1f592:	46c0      	nop			; (mov r8, r8)
   1f594:	200040ef 	.word	0x200040ef
   1f598:	200040e8 	.word	0x200040e8
   1f59c:	200040ac 	.word	0x200040ac
   1f5a0:	00027aed 	.word	0x00027aed

0001f5a4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1f5a4:	b580      	push	{r7, lr}
   1f5a6:	b082      	sub	sp, #8
   1f5a8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1f5aa:	1dbb      	adds	r3, r7, #6
   1f5ac:	22ff      	movs	r2, #255	; 0xff
   1f5ae:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f5b0:	4b0c      	ldr	r3, [pc, #48]	; (1f5e4 <sd_mmc_spi_send_clock+0x40>)
   1f5b2:	2200      	movs	r2, #0
   1f5b4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1f5b6:	1dfb      	adds	r3, r7, #7
   1f5b8:	2200      	movs	r2, #0
   1f5ba:	701a      	strb	r2, [r3, #0]
   1f5bc:	e00a      	b.n	1f5d4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1f5be:	1db9      	adds	r1, r7, #6
   1f5c0:	4b09      	ldr	r3, [pc, #36]	; (1f5e8 <sd_mmc_spi_send_clock+0x44>)
   1f5c2:	2201      	movs	r2, #1
   1f5c4:	0018      	movs	r0, r3
   1f5c6:	4b09      	ldr	r3, [pc, #36]	; (1f5ec <sd_mmc_spi_send_clock+0x48>)
   1f5c8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1f5ca:	1dfb      	adds	r3, r7, #7
   1f5cc:	781a      	ldrb	r2, [r3, #0]
   1f5ce:	1dfb      	adds	r3, r7, #7
   1f5d0:	3201      	adds	r2, #1
   1f5d2:	701a      	strb	r2, [r3, #0]
   1f5d4:	1dfb      	adds	r3, r7, #7
   1f5d6:	781b      	ldrb	r3, [r3, #0]
   1f5d8:	2b09      	cmp	r3, #9
   1f5da:	d9f0      	bls.n	1f5be <sd_mmc_spi_send_clock+0x1a>
	}
}
   1f5dc:	46c0      	nop			; (mov r8, r8)
   1f5de:	46bd      	mov	sp, r7
   1f5e0:	b002      	add	sp, #8
   1f5e2:	bd80      	pop	{r7, pc}
   1f5e4:	200040ef 	.word	0x200040ef
   1f5e8:	200040ac 	.word	0x200040ac
   1f5ec:	00027bdd 	.word	0x00027bdd

0001f5f0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1f5f0:	b590      	push	{r4, r7, lr}
   1f5f2:	b085      	sub	sp, #20
   1f5f4:	af02      	add	r7, sp, #8
   1f5f6:	6078      	str	r0, [r7, #4]
   1f5f8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1f5fa:	6839      	ldr	r1, [r7, #0]
   1f5fc:	6878      	ldr	r0, [r7, #4]
   1f5fe:	2300      	movs	r3, #0
   1f600:	9300      	str	r3, [sp, #0]
   1f602:	2300      	movs	r3, #0
   1f604:	2200      	movs	r2, #0
   1f606:	4c03      	ldr	r4, [pc, #12]	; (1f614 <sd_mmc_spi_send_cmd+0x24>)
   1f608:	47a0      	blx	r4
   1f60a:	0003      	movs	r3, r0
}
   1f60c:	0018      	movs	r0, r3
   1f60e:	46bd      	mov	sp, r7
   1f610:	b003      	add	sp, #12
   1f612:	bd90      	pop	{r4, r7, pc}
   1f614:	0001f619 	.word	0x0001f619

0001f618 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1f618:	b590      	push	{r4, r7, lr}
   1f61a:	b089      	sub	sp, #36	; 0x24
   1f61c:	af00      	add	r7, sp, #0
   1f61e:	60f8      	str	r0, [r7, #12]
   1f620:	60b9      	str	r1, [r7, #8]
   1f622:	0019      	movs	r1, r3
   1f624:	1dbb      	adds	r3, r7, #6
   1f626:	801a      	strh	r2, [r3, #0]
   1f628:	1d3b      	adds	r3, r7, #4
   1f62a:	1c0a      	adds	r2, r1, #0
   1f62c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f62e:	231b      	movs	r3, #27
   1f630:	18fb      	adds	r3, r7, r3
   1f632:	22ff      	movs	r2, #255	; 0xff
   1f634:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f636:	231c      	movs	r3, #28
   1f638:	18fb      	adds	r3, r7, r3
   1f63a:	22ff      	movs	r2, #255	; 0xff
   1f63c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f63e:	4b72      	ldr	r3, [pc, #456]	; (1f808 <sd_mmc_spi_adtc_start+0x1f0>)
   1f640:	2200      	movs	r2, #0
   1f642:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f644:	68fb      	ldr	r3, [r7, #12]
   1f646:	b2db      	uxtb	r3, r3
   1f648:	223f      	movs	r2, #63	; 0x3f
   1f64a:	4013      	ands	r3, r2
   1f64c:	b2db      	uxtb	r3, r3
   1f64e:	2240      	movs	r2, #64	; 0x40
   1f650:	4313      	orrs	r3, r2
   1f652:	b2da      	uxtb	r2, r3
   1f654:	2314      	movs	r3, #20
   1f656:	18fb      	adds	r3, r7, r3
   1f658:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f65a:	68bb      	ldr	r3, [r7, #8]
   1f65c:	0e1b      	lsrs	r3, r3, #24
   1f65e:	b2da      	uxtb	r2, r3
   1f660:	2314      	movs	r3, #20
   1f662:	18fb      	adds	r3, r7, r3
   1f664:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f666:	68bb      	ldr	r3, [r7, #8]
   1f668:	0c1b      	lsrs	r3, r3, #16
   1f66a:	b2da      	uxtb	r2, r3
   1f66c:	2314      	movs	r3, #20
   1f66e:	18fb      	adds	r3, r7, r3
   1f670:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f672:	68bb      	ldr	r3, [r7, #8]
   1f674:	0a1b      	lsrs	r3, r3, #8
   1f676:	b2da      	uxtb	r2, r3
   1f678:	2314      	movs	r3, #20
   1f67a:	18fb      	adds	r3, r7, r3
   1f67c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f67e:	68bb      	ldr	r3, [r7, #8]
   1f680:	b2da      	uxtb	r2, r3
   1f682:	2314      	movs	r3, #20
   1f684:	18fb      	adds	r3, r7, r3
   1f686:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f688:	2314      	movs	r3, #20
   1f68a:	18fb      	adds	r3, r7, r3
   1f68c:	2105      	movs	r1, #5
   1f68e:	0018      	movs	r0, r3
   1f690:	4b5e      	ldr	r3, [pc, #376]	; (1f80c <sd_mmc_spi_adtc_start+0x1f4>)
   1f692:	4798      	blx	r3
   1f694:	0003      	movs	r3, r0
   1f696:	001a      	movs	r2, r3
   1f698:	2314      	movs	r3, #20
   1f69a:	18fb      	adds	r3, r7, r3
   1f69c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f69e:	231b      	movs	r3, #27
   1f6a0:	18f9      	adds	r1, r7, r3
   1f6a2:	4b5b      	ldr	r3, [pc, #364]	; (1f810 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6a4:	2201      	movs	r2, #1
   1f6a6:	0018      	movs	r0, r3
   1f6a8:	4b5a      	ldr	r3, [pc, #360]	; (1f814 <sd_mmc_spi_adtc_start+0x1fc>)
   1f6aa:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f6ac:	2314      	movs	r3, #20
   1f6ae:	18f9      	adds	r1, r7, r3
   1f6b0:	4b57      	ldr	r3, [pc, #348]	; (1f810 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6b2:	2206      	movs	r2, #6
   1f6b4:	0018      	movs	r0, r3
   1f6b6:	4b57      	ldr	r3, [pc, #348]	; (1f814 <sd_mmc_spi_adtc_start+0x1fc>)
   1f6b8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f6ba:	2313      	movs	r3, #19
   1f6bc:	18fb      	adds	r3, r7, r3
   1f6be:	22ff      	movs	r2, #255	; 0xff
   1f6c0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f6c2:	231c      	movs	r3, #28
   1f6c4:	18fb      	adds	r3, r7, r3
   1f6c6:	881b      	ldrh	r3, [r3, #0]
   1f6c8:	2213      	movs	r2, #19
   1f6ca:	18b9      	adds	r1, r7, r2
   1f6cc:	4850      	ldr	r0, [pc, #320]	; (1f810 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6ce:	2201      	movs	r2, #1
   1f6d0:	4c51      	ldr	r4, [pc, #324]	; (1f818 <sd_mmc_spi_adtc_start+0x200>)
   1f6d2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1f6d4:	231f      	movs	r3, #31
   1f6d6:	18fb      	adds	r3, r7, r3
   1f6d8:	2207      	movs	r2, #7
   1f6da:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f6dc:	231c      	movs	r3, #28
   1f6de:	18fb      	adds	r3, r7, r3
   1f6e0:	881b      	ldrh	r3, [r3, #0]
   1f6e2:	2213      	movs	r2, #19
   1f6e4:	18b9      	adds	r1, r7, r2
   1f6e6:	484a      	ldr	r0, [pc, #296]	; (1f810 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6e8:	2201      	movs	r2, #1
   1f6ea:	4c4b      	ldr	r4, [pc, #300]	; (1f818 <sd_mmc_spi_adtc_start+0x200>)
   1f6ec:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1f6ee:	2313      	movs	r3, #19
   1f6f0:	18fb      	adds	r3, r7, r3
   1f6f2:	781b      	ldrb	r3, [r3, #0]
   1f6f4:	b25b      	sxtb	r3, r3
   1f6f6:	2b00      	cmp	r3, #0
   1f6f8:	da10      	bge.n	1f71c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1f6fa:	231f      	movs	r3, #31
   1f6fc:	18fb      	adds	r3, r7, r3
   1f6fe:	221f      	movs	r2, #31
   1f700:	18ba      	adds	r2, r7, r2
   1f702:	7812      	ldrb	r2, [r2, #0]
   1f704:	3a01      	subs	r2, #1
   1f706:	701a      	strb	r2, [r3, #0]
   1f708:	231f      	movs	r3, #31
   1f70a:	18fb      	adds	r3, r7, r3
   1f70c:	781b      	ldrb	r3, [r3, #0]
   1f70e:	2b00      	cmp	r3, #0
   1f710:	d1e4      	bne.n	1f6dc <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1f712:	4b3d      	ldr	r3, [pc, #244]	; (1f808 <sd_mmc_spi_adtc_start+0x1f0>)
   1f714:	2202      	movs	r2, #2
   1f716:	701a      	strb	r2, [r3, #0]
			return false;
   1f718:	2300      	movs	r3, #0
   1f71a:	e070      	b.n	1f7fe <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1f71c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1f71e:	2313      	movs	r3, #19
   1f720:	18fb      	adds	r3, r7, r3
   1f722:	781b      	ldrb	r3, [r3, #0]
   1f724:	001a      	movs	r2, r3
   1f726:	4b3d      	ldr	r3, [pc, #244]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f728:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1f72a:	2313      	movs	r3, #19
   1f72c:	18fb      	adds	r3, r7, r3
   1f72e:	781b      	ldrb	r3, [r3, #0]
   1f730:	001a      	movs	r2, r3
   1f732:	2308      	movs	r3, #8
   1f734:	4013      	ands	r3, r2
   1f736:	d004      	beq.n	1f742 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1f738:	4b33      	ldr	r3, [pc, #204]	; (1f808 <sd_mmc_spi_adtc_start+0x1f0>)
   1f73a:	2206      	movs	r2, #6
   1f73c:	701a      	strb	r2, [r3, #0]
		return false;
   1f73e:	2300      	movs	r3, #0
   1f740:	e05d      	b.n	1f7fe <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1f742:	2313      	movs	r3, #19
   1f744:	18fb      	adds	r3, r7, r3
   1f746:	781b      	ldrb	r3, [r3, #0]
   1f748:	001a      	movs	r2, r3
   1f74a:	2304      	movs	r3, #4
   1f74c:	4013      	ands	r3, r2
   1f74e:	d004      	beq.n	1f75a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1f750:	4b2d      	ldr	r3, [pc, #180]	; (1f808 <sd_mmc_spi_adtc_start+0x1f0>)
   1f752:	2209      	movs	r2, #9
   1f754:	701a      	strb	r2, [r3, #0]
		return false;
   1f756:	2300      	movs	r3, #0
   1f758:	e051      	b.n	1f7fe <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1f75a:	2313      	movs	r3, #19
   1f75c:	18fb      	adds	r3, r7, r3
   1f75e:	781b      	ldrb	r3, [r3, #0]
   1f760:	001a      	movs	r2, r3
   1f762:	2301      	movs	r3, #1
   1f764:	439a      	bics	r2, r3
   1f766:	1e13      	subs	r3, r2, #0
   1f768:	d004      	beq.n	1f774 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f76a:	4b27      	ldr	r3, [pc, #156]	; (1f808 <sd_mmc_spi_adtc_start+0x1f0>)
   1f76c:	2201      	movs	r2, #1
   1f76e:	701a      	strb	r2, [r3, #0]
		return false;
   1f770:	2300      	movs	r3, #0
   1f772:	e044      	b.n	1f7fe <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1f774:	68fa      	ldr	r2, [r7, #12]
   1f776:	2380      	movs	r3, #128	; 0x80
   1f778:	019b      	lsls	r3, r3, #6
   1f77a:	4013      	ands	r3, r2
   1f77c:	d00d      	beq.n	1f79a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1f77e:	4b28      	ldr	r3, [pc, #160]	; (1f820 <sd_mmc_spi_adtc_start+0x208>)
   1f780:	4798      	blx	r3
   1f782:	0003      	movs	r3, r0
   1f784:	001a      	movs	r2, r3
   1f786:	2301      	movs	r3, #1
   1f788:	4053      	eors	r3, r2
   1f78a:	b2db      	uxtb	r3, r3
   1f78c:	2b00      	cmp	r3, #0
   1f78e:	d004      	beq.n	1f79a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1f790:	4b1d      	ldr	r3, [pc, #116]	; (1f808 <sd_mmc_spi_adtc_start+0x1f0>)
   1f792:	2203      	movs	r2, #3
   1f794:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1f796:	2300      	movs	r3, #0
   1f798:	e031      	b.n	1f7fe <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1f79a:	68fa      	ldr	r2, [r7, #12]
   1f79c:	2380      	movs	r3, #128	; 0x80
   1f79e:	009b      	lsls	r3, r3, #2
   1f7a0:	4013      	ands	r3, r2
   1f7a2:	d00e      	beq.n	1f7c2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1f7a4:	4b1d      	ldr	r3, [pc, #116]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f7a6:	2200      	movs	r2, #0
   1f7a8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1f7aa:	231c      	movs	r3, #28
   1f7ac:	18fb      	adds	r3, r7, r3
   1f7ae:	881b      	ldrh	r3, [r3, #0]
   1f7b0:	491a      	ldr	r1, [pc, #104]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f7b2:	4817      	ldr	r0, [pc, #92]	; (1f810 <sd_mmc_spi_adtc_start+0x1f8>)
   1f7b4:	2201      	movs	r2, #1
   1f7b6:	4c18      	ldr	r4, [pc, #96]	; (1f818 <sd_mmc_spi_adtc_start+0x200>)
   1f7b8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1f7ba:	4b18      	ldr	r3, [pc, #96]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f7bc:	681a      	ldr	r2, [r3, #0]
   1f7be:	4b17      	ldr	r3, [pc, #92]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f7c0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1f7c2:	68fa      	ldr	r2, [r7, #12]
   1f7c4:	2380      	movs	r3, #128	; 0x80
   1f7c6:	00db      	lsls	r3, r3, #3
   1f7c8:	4013      	ands	r3, r2
   1f7ca:	d00c      	beq.n	1f7e6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1f7cc:	231c      	movs	r3, #28
   1f7ce:	18fb      	adds	r3, r7, r3
   1f7d0:	881b      	ldrh	r3, [r3, #0]
   1f7d2:	4912      	ldr	r1, [pc, #72]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f7d4:	480e      	ldr	r0, [pc, #56]	; (1f810 <sd_mmc_spi_adtc_start+0x1f8>)
   1f7d6:	2204      	movs	r2, #4
   1f7d8:	4c0f      	ldr	r4, [pc, #60]	; (1f818 <sd_mmc_spi_adtc_start+0x200>)
   1f7da:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1f7dc:	4b0f      	ldr	r3, [pc, #60]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f7de:	681b      	ldr	r3, [r3, #0]
   1f7e0:	ba1a      	rev	r2, r3
   1f7e2:	4b0e      	ldr	r3, [pc, #56]	; (1f81c <sd_mmc_spi_adtc_start+0x204>)
   1f7e4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1f7e6:	4b0f      	ldr	r3, [pc, #60]	; (1f824 <sd_mmc_spi_adtc_start+0x20c>)
   1f7e8:	1dba      	adds	r2, r7, #6
   1f7ea:	8812      	ldrh	r2, [r2, #0]
   1f7ec:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1f7ee:	4b0e      	ldr	r3, [pc, #56]	; (1f828 <sd_mmc_spi_adtc_start+0x210>)
   1f7f0:	1d3a      	adds	r2, r7, #4
   1f7f2:	8812      	ldrh	r2, [r2, #0]
   1f7f4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1f7f6:	4b0d      	ldr	r3, [pc, #52]	; (1f82c <sd_mmc_spi_adtc_start+0x214>)
   1f7f8:	2200      	movs	r2, #0
   1f7fa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1f7fc:	2301      	movs	r3, #1
}
   1f7fe:	0018      	movs	r0, r3
   1f800:	46bd      	mov	sp, r7
   1f802:	b009      	add	sp, #36	; 0x24
   1f804:	bd90      	pop	{r4, r7, pc}
   1f806:	46c0      	nop			; (mov r8, r8)
   1f808:	200040ef 	.word	0x200040ef
   1f80c:	0001f0b9 	.word	0x0001f0b9
   1f810:	200040ac 	.word	0x200040ac
   1f814:	00027bdd 	.word	0x00027bdd
   1f818:	000279b9 	.word	0x000279b9
   1f81c:	200040f0 	.word	0x200040f0
   1f820:	0001f175 	.word	0x0001f175
   1f824:	200040f8 	.word	0x200040f8
   1f828:	200040fa 	.word	0x200040fa
   1f82c:	200040f4 	.word	0x200040f4

0001f830 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1f830:	b580      	push	{r7, lr}
   1f832:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1f834:	4b02      	ldr	r3, [pc, #8]	; (1f840 <sd_mmc_spi_get_response+0x10>)
   1f836:	681b      	ldr	r3, [r3, #0]
}
   1f838:	0018      	movs	r0, r3
   1f83a:	46bd      	mov	sp, r7
   1f83c:	bd80      	pop	{r7, pc}
   1f83e:	46c0      	nop			; (mov r8, r8)
   1f840:	200040f0 	.word	0x200040f0

0001f844 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1f844:	b590      	push	{r4, r7, lr}
   1f846:	b085      	sub	sp, #20
   1f848:	af00      	add	r7, sp, #0
   1f84a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1f84c:	230e      	movs	r3, #14
   1f84e:	18fb      	adds	r3, r7, r3
   1f850:	22ff      	movs	r2, #255	; 0xff
   1f852:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f854:	4b1c      	ldr	r3, [pc, #112]	; (1f8c8 <sd_mmc_spi_read_word+0x84>)
   1f856:	2200      	movs	r2, #0
   1f858:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f85a:	4b1c      	ldr	r3, [pc, #112]	; (1f8cc <sd_mmc_spi_read_word+0x88>)
   1f85c:	681a      	ldr	r2, [r3, #0]
   1f85e:	4b1c      	ldr	r3, [pc, #112]	; (1f8d0 <sd_mmc_spi_read_word+0x8c>)
   1f860:	881b      	ldrh	r3, [r3, #0]
   1f862:	0019      	movs	r1, r3
   1f864:	4b1b      	ldr	r3, [pc, #108]	; (1f8d4 <sd_mmc_spi_read_word+0x90>)
   1f866:	0010      	movs	r0, r2
   1f868:	4798      	blx	r3
   1f86a:	1e0b      	subs	r3, r1, #0
   1f86c:	d10a      	bne.n	1f884 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1f86e:	4b1a      	ldr	r3, [pc, #104]	; (1f8d8 <sd_mmc_spi_read_word+0x94>)
   1f870:	4798      	blx	r3
   1f872:	0003      	movs	r3, r0
   1f874:	001a      	movs	r2, r3
   1f876:	2301      	movs	r3, #1
   1f878:	4053      	eors	r3, r2
   1f87a:	b2db      	uxtb	r3, r3
   1f87c:	2b00      	cmp	r3, #0
   1f87e:	d001      	beq.n	1f884 <sd_mmc_spi_read_word+0x40>
			return false;
   1f880:	2300      	movs	r3, #0
   1f882:	e01d      	b.n	1f8c0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1f884:	230e      	movs	r3, #14
   1f886:	18fb      	adds	r3, r7, r3
   1f888:	881b      	ldrh	r3, [r3, #0]
   1f88a:	1d39      	adds	r1, r7, #4
   1f88c:	4813      	ldr	r0, [pc, #76]	; (1f8dc <sd_mmc_spi_read_word+0x98>)
   1f88e:	2204      	movs	r2, #4
   1f890:	4c13      	ldr	r4, [pc, #76]	; (1f8e0 <sd_mmc_spi_read_word+0x9c>)
   1f892:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1f894:	687b      	ldr	r3, [r7, #4]
   1f896:	687a      	ldr	r2, [r7, #4]
   1f898:	6812      	ldr	r2, [r2, #0]
   1f89a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1f89c:	4b0b      	ldr	r3, [pc, #44]	; (1f8cc <sd_mmc_spi_read_word+0x88>)
   1f89e:	681b      	ldr	r3, [r3, #0]
   1f8a0:	1d1a      	adds	r2, r3, #4
   1f8a2:	4b0a      	ldr	r3, [pc, #40]	; (1f8cc <sd_mmc_spi_read_word+0x88>)
   1f8a4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f8a6:	4b09      	ldr	r3, [pc, #36]	; (1f8cc <sd_mmc_spi_read_word+0x88>)
   1f8a8:	681a      	ldr	r2, [r3, #0]
   1f8aa:	4b09      	ldr	r3, [pc, #36]	; (1f8d0 <sd_mmc_spi_read_word+0x8c>)
   1f8ac:	881b      	ldrh	r3, [r3, #0]
   1f8ae:	0019      	movs	r1, r3
   1f8b0:	4b08      	ldr	r3, [pc, #32]	; (1f8d4 <sd_mmc_spi_read_word+0x90>)
   1f8b2:	0010      	movs	r0, r2
   1f8b4:	4798      	blx	r3
   1f8b6:	1e0b      	subs	r3, r1, #0
   1f8b8:	d101      	bne.n	1f8be <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1f8ba:	4b0a      	ldr	r3, [pc, #40]	; (1f8e4 <sd_mmc_spi_read_word+0xa0>)
   1f8bc:	4798      	blx	r3
	}
	return true;
   1f8be:	2301      	movs	r3, #1
}
   1f8c0:	0018      	movs	r0, r3
   1f8c2:	46bd      	mov	sp, r7
   1f8c4:	b005      	add	sp, #20
   1f8c6:	bd90      	pop	{r4, r7, pc}
   1f8c8:	200040ef 	.word	0x200040ef
   1f8cc:	200040f4 	.word	0x200040f4
   1f8d0:	200040f8 	.word	0x200040f8
   1f8d4:	00032495 	.word	0x00032495
   1f8d8:	0001f1e1 	.word	0x0001f1e1
   1f8dc:	200040ac 	.word	0x200040ac
   1f8e0:	000279b9 	.word	0x000279b9
   1f8e4:	0001f265 	.word	0x0001f265

0001f8e8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f8e8:	b590      	push	{r4, r7, lr}
   1f8ea:	b085      	sub	sp, #20
   1f8ec:	af00      	add	r7, sp, #0
   1f8ee:	6078      	str	r0, [r7, #4]
   1f8f0:	000a      	movs	r2, r1
   1f8f2:	1cbb      	adds	r3, r7, #2
   1f8f4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1f8f6:	230a      	movs	r3, #10
   1f8f8:	18fb      	adds	r3, r7, r3
   1f8fa:	22ff      	movs	r2, #255	; 0xff
   1f8fc:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f8fe:	4b1c      	ldr	r3, [pc, #112]	; (1f970 <sd_mmc_spi_start_read_blocks+0x88>)
   1f900:	2200      	movs	r2, #0
   1f902:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f904:	2300      	movs	r3, #0
   1f906:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f908:	e025      	b.n	1f956 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1f90a:	4b1a      	ldr	r3, [pc, #104]	; (1f974 <sd_mmc_spi_start_read_blocks+0x8c>)
   1f90c:	4798      	blx	r3
   1f90e:	0003      	movs	r3, r0
   1f910:	001a      	movs	r2, r3
   1f912:	2301      	movs	r3, #1
   1f914:	4053      	eors	r3, r2
   1f916:	b2db      	uxtb	r3, r3
   1f918:	2b00      	cmp	r3, #0
   1f91a:	d001      	beq.n	1f920 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1f91c:	2300      	movs	r3, #0
   1f91e:	e022      	b.n	1f966 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1f920:	687a      	ldr	r2, [r7, #4]
   1f922:	68fb      	ldr	r3, [r7, #12]
   1f924:	18d1      	adds	r1, r2, r3
   1f926:	4b14      	ldr	r3, [pc, #80]	; (1f978 <sd_mmc_spi_start_read_blocks+0x90>)
   1f928:	881a      	ldrh	r2, [r3, #0]
   1f92a:	230a      	movs	r3, #10
   1f92c:	18fb      	adds	r3, r7, r3
   1f92e:	881b      	ldrh	r3, [r3, #0]
   1f930:	4812      	ldr	r0, [pc, #72]	; (1f97c <sd_mmc_spi_start_read_blocks+0x94>)
   1f932:	4c13      	ldr	r4, [pc, #76]	; (1f980 <sd_mmc_spi_start_read_blocks+0x98>)
   1f934:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1f936:	4b10      	ldr	r3, [pc, #64]	; (1f978 <sd_mmc_spi_start_read_blocks+0x90>)
   1f938:	881b      	ldrh	r3, [r3, #0]
   1f93a:	001a      	movs	r2, r3
   1f93c:	68fb      	ldr	r3, [r7, #12]
   1f93e:	189b      	adds	r3, r3, r2
   1f940:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f942:	4b0d      	ldr	r3, [pc, #52]	; (1f978 <sd_mmc_spi_start_read_blocks+0x90>)
   1f944:	881b      	ldrh	r3, [r3, #0]
   1f946:	001a      	movs	r2, r3
   1f948:	4b0e      	ldr	r3, [pc, #56]	; (1f984 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f94a:	681b      	ldr	r3, [r3, #0]
   1f94c:	18d2      	adds	r2, r2, r3
   1f94e:	4b0d      	ldr	r3, [pc, #52]	; (1f984 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f950:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1f952:	4b0d      	ldr	r3, [pc, #52]	; (1f988 <sd_mmc_spi_start_read_blocks+0xa0>)
   1f954:	4798      	blx	r3
	while (nb_block--) {
   1f956:	1cbb      	adds	r3, r7, #2
   1f958:	881b      	ldrh	r3, [r3, #0]
   1f95a:	1cba      	adds	r2, r7, #2
   1f95c:	1e59      	subs	r1, r3, #1
   1f95e:	8011      	strh	r1, [r2, #0]
   1f960:	2b00      	cmp	r3, #0
   1f962:	d1d2      	bne.n	1f90a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f964:	2301      	movs	r3, #1
}
   1f966:	0018      	movs	r0, r3
   1f968:	46bd      	mov	sp, r7
   1f96a:	b005      	add	sp, #20
   1f96c:	bd90      	pop	{r4, r7, pc}
   1f96e:	46c0      	nop			; (mov r8, r8)
   1f970:	200040ef 	.word	0x200040ef
   1f974:	0001f1e1 	.word	0x0001f1e1
   1f978:	200040f8 	.word	0x200040f8
   1f97c:	200040ac 	.word	0x200040ac
   1f980:	000279b9 	.word	0x000279b9
   1f984:	200040f4 	.word	0x200040f4
   1f988:	0001f265 	.word	0x0001f265

0001f98c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f98c:	b580      	push	{r7, lr}
   1f98e:	af00      	add	r7, sp, #0
	return true;
   1f990:	2301      	movs	r3, #1
}
   1f992:	0018      	movs	r0, r3
   1f994:	46bd      	mov	sp, r7
   1f996:	bd80      	pop	{r7, pc}

0001f998 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f998:	b580      	push	{r7, lr}
   1f99a:	b084      	sub	sp, #16
   1f99c:	af00      	add	r7, sp, #0
   1f99e:	6078      	str	r0, [r7, #4]
   1f9a0:	000a      	movs	r2, r1
   1f9a2:	1cbb      	adds	r3, r7, #2
   1f9a4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f9a6:	4b24      	ldr	r3, [pc, #144]	; (1fa38 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f9a8:	2200      	movs	r2, #0
   1f9aa:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f9ac:	2300      	movs	r3, #0
   1f9ae:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f9b0:	e035      	b.n	1fa1e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f9b2:	4b22      	ldr	r3, [pc, #136]	; (1fa3c <sd_mmc_spi_start_write_blocks+0xa4>)
   1f9b4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f9b6:	687a      	ldr	r2, [r7, #4]
   1f9b8:	68fb      	ldr	r3, [r7, #12]
   1f9ba:	18d1      	adds	r1, r2, r3
   1f9bc:	4b20      	ldr	r3, [pc, #128]	; (1fa40 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f9be:	881a      	ldrh	r2, [r3, #0]
   1f9c0:	4b20      	ldr	r3, [pc, #128]	; (1fa44 <sd_mmc_spi_start_write_blocks+0xac>)
   1f9c2:	0018      	movs	r0, r3
   1f9c4:	4b20      	ldr	r3, [pc, #128]	; (1fa48 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f9c6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f9c8:	4b1d      	ldr	r3, [pc, #116]	; (1fa40 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f9ca:	881b      	ldrh	r3, [r3, #0]
   1f9cc:	001a      	movs	r2, r3
   1f9ce:	68fb      	ldr	r3, [r7, #12]
   1f9d0:	189b      	adds	r3, r3, r2
   1f9d2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f9d4:	4b1a      	ldr	r3, [pc, #104]	; (1fa40 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f9d6:	881b      	ldrh	r3, [r3, #0]
   1f9d8:	001a      	movs	r2, r3
   1f9da:	4b1c      	ldr	r3, [pc, #112]	; (1fa4c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f9dc:	681b      	ldr	r3, [r3, #0]
   1f9de:	18d2      	adds	r2, r2, r3
   1f9e0:	4b1a      	ldr	r3, [pc, #104]	; (1fa4c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f9e2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f9e4:	4b1a      	ldr	r3, [pc, #104]	; (1fa50 <sd_mmc_spi_start_write_blocks+0xb8>)
   1f9e6:	4798      	blx	r3
   1f9e8:	0003      	movs	r3, r0
   1f9ea:	001a      	movs	r2, r3
   1f9ec:	2301      	movs	r3, #1
   1f9ee:	4053      	eors	r3, r2
   1f9f0:	b2db      	uxtb	r3, r3
   1f9f2:	2b00      	cmp	r3, #0
   1f9f4:	d001      	beq.n	1f9fa <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f9f6:	2300      	movs	r3, #0
   1f9f8:	e019      	b.n	1fa2e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f9fa:	1cbb      	adds	r3, r7, #2
   1f9fc:	881b      	ldrh	r3, [r3, #0]
   1f9fe:	2b00      	cmp	r3, #0
   1fa00:	d00d      	beq.n	1fa1e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1fa02:	4b14      	ldr	r3, [pc, #80]	; (1fa54 <sd_mmc_spi_start_write_blocks+0xbc>)
   1fa04:	4798      	blx	r3
   1fa06:	0003      	movs	r3, r0
   1fa08:	001a      	movs	r2, r3
   1fa0a:	2301      	movs	r3, #1
   1fa0c:	4053      	eors	r3, r2
   1fa0e:	b2db      	uxtb	r3, r3
   1fa10:	2b00      	cmp	r3, #0
   1fa12:	d004      	beq.n	1fa1e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fa14:	4b08      	ldr	r3, [pc, #32]	; (1fa38 <sd_mmc_spi_start_write_blocks+0xa0>)
   1fa16:	2205      	movs	r2, #5
   1fa18:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1fa1a:	2300      	movs	r3, #0
   1fa1c:	e007      	b.n	1fa2e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1fa1e:	1cbb      	adds	r3, r7, #2
   1fa20:	881b      	ldrh	r3, [r3, #0]
   1fa22:	1cba      	adds	r2, r7, #2
   1fa24:	1e59      	subs	r1, r3, #1
   1fa26:	8011      	strh	r1, [r2, #0]
   1fa28:	2b00      	cmp	r3, #0
   1fa2a:	d1c2      	bne.n	1f9b2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1fa2c:	2301      	movs	r3, #1
}
   1fa2e:	0018      	movs	r0, r3
   1fa30:	46bd      	mov	sp, r7
   1fa32:	b004      	add	sp, #16
   1fa34:	bd80      	pop	{r7, pc}
   1fa36:	46c0      	nop			; (mov r8, r8)
   1fa38:	200040ef 	.word	0x200040ef
   1fa3c:	0001f291 	.word	0x0001f291
   1fa40:	200040f8 	.word	0x200040f8
   1fa44:	200040ac 	.word	0x200040ac
   1fa48:	00027bdd 	.word	0x00027bdd
   1fa4c:	200040f4 	.word	0x200040f4
   1fa50:	0001f2e1 	.word	0x0001f2e1
   1fa54:	0001f175 	.word	0x0001f175

0001fa58 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1fa58:	b580      	push	{r7, lr}
   1fa5a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1fa5c:	4b09      	ldr	r3, [pc, #36]	; (1fa84 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1fa5e:	4798      	blx	r3
   1fa60:	0003      	movs	r3, r0
   1fa62:	001a      	movs	r2, r3
   1fa64:	2301      	movs	r3, #1
   1fa66:	4053      	eors	r3, r2
   1fa68:	b2db      	uxtb	r3, r3
   1fa6a:	2b00      	cmp	r3, #0
   1fa6c:	d004      	beq.n	1fa78 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fa6e:	4b06      	ldr	r3, [pc, #24]	; (1fa88 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1fa70:	2205      	movs	r2, #5
   1fa72:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1fa74:	2300      	movs	r3, #0
   1fa76:	e002      	b.n	1fa7e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1fa78:	4b04      	ldr	r3, [pc, #16]	; (1fa8c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1fa7a:	4798      	blx	r3
   1fa7c:	0003      	movs	r3, r0
}
   1fa7e:	0018      	movs	r0, r3
   1fa80:	46bd      	mov	sp, r7
   1fa82:	bd80      	pop	{r7, pc}
   1fa84:	0001f175 	.word	0x0001f175
   1fa88:	200040ef 	.word	0x200040ef
   1fa8c:	0001f375 	.word	0x0001f375

0001fa90 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1fa90:	b580      	push	{r7, lr}
   1fa92:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1fa94:	2000      	movs	r0, #0
   1fa96:	4b0f      	ldr	r3, [pc, #60]	; (1fad4 <delay_init+0x44>)
   1fa98:	4798      	blx	r3
   1fa9a:	0002      	movs	r2, r0
   1fa9c:	4b0e      	ldr	r3, [pc, #56]	; (1fad8 <delay_init+0x48>)
   1fa9e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1faa0:	4b0d      	ldr	r3, [pc, #52]	; (1fad8 <delay_init+0x48>)
   1faa2:	6818      	ldr	r0, [r3, #0]
   1faa4:	4b0d      	ldr	r3, [pc, #52]	; (1fadc <delay_init+0x4c>)
   1faa6:	22fa      	movs	r2, #250	; 0xfa
   1faa8:	0091      	lsls	r1, r2, #2
   1faaa:	4798      	blx	r3
   1faac:	0003      	movs	r3, r0
   1faae:	001a      	movs	r2, r3
   1fab0:	4b09      	ldr	r3, [pc, #36]	; (1fad8 <delay_init+0x48>)
   1fab2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1fab4:	4b08      	ldr	r3, [pc, #32]	; (1fad8 <delay_init+0x48>)
   1fab6:	6818      	ldr	r0, [r3, #0]
   1fab8:	4b08      	ldr	r3, [pc, #32]	; (1fadc <delay_init+0x4c>)
   1faba:	22fa      	movs	r2, #250	; 0xfa
   1fabc:	0091      	lsls	r1, r2, #2
   1fabe:	4798      	blx	r3
   1fac0:	0003      	movs	r3, r0
   1fac2:	001a      	movs	r2, r3
   1fac4:	4b06      	ldr	r3, [pc, #24]	; (1fae0 <delay_init+0x50>)
   1fac6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1fac8:	4b06      	ldr	r3, [pc, #24]	; (1fae4 <delay_init+0x54>)
   1faca:	2205      	movs	r2, #5
   1facc:	601a      	str	r2, [r3, #0]
}
   1face:	46c0      	nop			; (mov r8, r8)
   1fad0:	46bd      	mov	sp, r7
   1fad2:	bd80      	pop	{r7, pc}
   1fad4:	00029761 	.word	0x00029761
   1fad8:	20000104 	.word	0x20000104
   1fadc:	00032389 	.word	0x00032389
   1fae0:	20000108 	.word	0x20000108
   1fae4:	e000e010 	.word	0xe000e010

0001fae8 <system_pinmux_get_group_from_gpio_pin>:
{
   1fae8:	b580      	push	{r7, lr}
   1faea:	b084      	sub	sp, #16
   1faec:	af00      	add	r7, sp, #0
   1faee:	0002      	movs	r2, r0
   1faf0:	1dfb      	adds	r3, r7, #7
   1faf2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1faf4:	230f      	movs	r3, #15
   1faf6:	18fb      	adds	r3, r7, r3
   1faf8:	1dfa      	adds	r2, r7, #7
   1fafa:	7812      	ldrb	r2, [r2, #0]
   1fafc:	09d2      	lsrs	r2, r2, #7
   1fafe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fb00:	230e      	movs	r3, #14
   1fb02:	18fb      	adds	r3, r7, r3
   1fb04:	1dfa      	adds	r2, r7, #7
   1fb06:	7812      	ldrb	r2, [r2, #0]
   1fb08:	0952      	lsrs	r2, r2, #5
   1fb0a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fb0c:	4b0d      	ldr	r3, [pc, #52]	; (1fb44 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fb0e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fb10:	230f      	movs	r3, #15
   1fb12:	18fb      	adds	r3, r7, r3
   1fb14:	781b      	ldrb	r3, [r3, #0]
   1fb16:	2b00      	cmp	r3, #0
   1fb18:	d10f      	bne.n	1fb3a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fb1a:	230f      	movs	r3, #15
   1fb1c:	18fb      	adds	r3, r7, r3
   1fb1e:	781b      	ldrb	r3, [r3, #0]
   1fb20:	009b      	lsls	r3, r3, #2
   1fb22:	2210      	movs	r2, #16
   1fb24:	4694      	mov	ip, r2
   1fb26:	44bc      	add	ip, r7
   1fb28:	4463      	add	r3, ip
   1fb2a:	3b08      	subs	r3, #8
   1fb2c:	681a      	ldr	r2, [r3, #0]
   1fb2e:	230e      	movs	r3, #14
   1fb30:	18fb      	adds	r3, r7, r3
   1fb32:	781b      	ldrb	r3, [r3, #0]
   1fb34:	01db      	lsls	r3, r3, #7
   1fb36:	18d3      	adds	r3, r2, r3
   1fb38:	e000      	b.n	1fb3c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fb3a:	2300      	movs	r3, #0
}
   1fb3c:	0018      	movs	r0, r3
   1fb3e:	46bd      	mov	sp, r7
   1fb40:	b004      	add	sp, #16
   1fb42:	bd80      	pop	{r7, pc}
   1fb44:	41004400 	.word	0x41004400

0001fb48 <system_interrupt_enable_global>:
{
   1fb48:	b580      	push	{r7, lr}
   1fb4a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1fb4c:	4b04      	ldr	r3, [pc, #16]	; (1fb60 <system_interrupt_enable_global+0x18>)
   1fb4e:	2201      	movs	r2, #1
   1fb50:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1fb52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1fb56:	b662      	cpsie	i
}
   1fb58:	46c0      	nop			; (mov r8, r8)
   1fb5a:	46bd      	mov	sp, r7
   1fb5c:	bd80      	pop	{r7, pc}
   1fb5e:	46c0      	nop			; (mov r8, r8)
   1fb60:	2000010e 	.word	0x2000010e

0001fb64 <port_get_group_from_gpio_pin>:
{
   1fb64:	b580      	push	{r7, lr}
   1fb66:	b082      	sub	sp, #8
   1fb68:	af00      	add	r7, sp, #0
   1fb6a:	0002      	movs	r2, r0
   1fb6c:	1dfb      	adds	r3, r7, #7
   1fb6e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fb70:	1dfb      	adds	r3, r7, #7
   1fb72:	781b      	ldrb	r3, [r3, #0]
   1fb74:	0018      	movs	r0, r3
   1fb76:	4b03      	ldr	r3, [pc, #12]	; (1fb84 <port_get_group_from_gpio_pin+0x20>)
   1fb78:	4798      	blx	r3
   1fb7a:	0003      	movs	r3, r0
}
   1fb7c:	0018      	movs	r0, r3
   1fb7e:	46bd      	mov	sp, r7
   1fb80:	b002      	add	sp, #8
   1fb82:	bd80      	pop	{r7, pc}
   1fb84:	0001fae9 	.word	0x0001fae9

0001fb88 <port_get_config_defaults>:
{
   1fb88:	b580      	push	{r7, lr}
   1fb8a:	b082      	sub	sp, #8
   1fb8c:	af00      	add	r7, sp, #0
   1fb8e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fb90:	687b      	ldr	r3, [r7, #4]
   1fb92:	2200      	movs	r2, #0
   1fb94:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fb96:	687b      	ldr	r3, [r7, #4]
   1fb98:	2201      	movs	r2, #1
   1fb9a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fb9c:	687b      	ldr	r3, [r7, #4]
   1fb9e:	2200      	movs	r2, #0
   1fba0:	709a      	strb	r2, [r3, #2]
}
   1fba2:	46c0      	nop			; (mov r8, r8)
   1fba4:	46bd      	mov	sp, r7
   1fba6:	b002      	add	sp, #8
   1fba8:	bd80      	pop	{r7, pc}
	...

0001fbac <port_pin_set_output_level>:
{
   1fbac:	b580      	push	{r7, lr}
   1fbae:	b084      	sub	sp, #16
   1fbb0:	af00      	add	r7, sp, #0
   1fbb2:	0002      	movs	r2, r0
   1fbb4:	1dfb      	adds	r3, r7, #7
   1fbb6:	701a      	strb	r2, [r3, #0]
   1fbb8:	1dbb      	adds	r3, r7, #6
   1fbba:	1c0a      	adds	r2, r1, #0
   1fbbc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fbbe:	1dfb      	adds	r3, r7, #7
   1fbc0:	781b      	ldrb	r3, [r3, #0]
   1fbc2:	0018      	movs	r0, r3
   1fbc4:	4b0d      	ldr	r3, [pc, #52]	; (1fbfc <port_pin_set_output_level+0x50>)
   1fbc6:	4798      	blx	r3
   1fbc8:	0003      	movs	r3, r0
   1fbca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fbcc:	1dfb      	adds	r3, r7, #7
   1fbce:	781b      	ldrb	r3, [r3, #0]
   1fbd0:	221f      	movs	r2, #31
   1fbd2:	4013      	ands	r3, r2
   1fbd4:	2201      	movs	r2, #1
   1fbd6:	409a      	lsls	r2, r3
   1fbd8:	0013      	movs	r3, r2
   1fbda:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fbdc:	1dbb      	adds	r3, r7, #6
   1fbde:	781b      	ldrb	r3, [r3, #0]
   1fbe0:	2b00      	cmp	r3, #0
   1fbe2:	d003      	beq.n	1fbec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fbe4:	68fb      	ldr	r3, [r7, #12]
   1fbe6:	68ba      	ldr	r2, [r7, #8]
   1fbe8:	619a      	str	r2, [r3, #24]
}
   1fbea:	e002      	b.n	1fbf2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fbec:	68fb      	ldr	r3, [r7, #12]
   1fbee:	68ba      	ldr	r2, [r7, #8]
   1fbf0:	615a      	str	r2, [r3, #20]
}
   1fbf2:	46c0      	nop			; (mov r8, r8)
   1fbf4:	46bd      	mov	sp, r7
   1fbf6:	b004      	add	sp, #16
   1fbf8:	bd80      	pop	{r7, pc}
   1fbfa:	46c0      	nop			; (mov r8, r8)
   1fbfc:	0001fb65 	.word	0x0001fb65

0001fc00 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1fc00:	b580      	push	{r7, lr}
   1fc02:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1fc04:	4b04      	ldr	r3, [pc, #16]	; (1fc18 <chip_isr+0x18>)
   1fc06:	681b      	ldr	r3, [r3, #0]
   1fc08:	2b00      	cmp	r3, #0
   1fc0a:	d002      	beq.n	1fc12 <chip_isr+0x12>
		gpfIsr();
   1fc0c:	4b02      	ldr	r3, [pc, #8]	; (1fc18 <chip_isr+0x18>)
   1fc0e:	681b      	ldr	r3, [r3, #0]
   1fc10:	4798      	blx	r3
	}
}
   1fc12:	46c0      	nop			; (mov r8, r8)
   1fc14:	46bd      	mov	sp, r7
   1fc16:	bd80      	pop	{r7, pc}
   1fc18:	200040fc 	.word	0x200040fc

0001fc1c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1fc1c:	b580      	push	{r7, lr}
   1fc1e:	b082      	sub	sp, #8
   1fc20:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1fc22:	1d3b      	adds	r3, r7, #4
   1fc24:	0018      	movs	r0, r3
   1fc26:	4b10      	ldr	r3, [pc, #64]	; (1fc68 <init_chip_pins+0x4c>)
   1fc28:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1fc2a:	1d3b      	adds	r3, r7, #4
   1fc2c:	2201      	movs	r2, #1
   1fc2e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1fc30:	1d3b      	adds	r3, r7, #4
   1fc32:	0019      	movs	r1, r3
   1fc34:	201b      	movs	r0, #27
   1fc36:	4b0d      	ldr	r3, [pc, #52]	; (1fc6c <init_chip_pins+0x50>)
   1fc38:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1fc3a:	1d3b      	adds	r3, r7, #4
   1fc3c:	0019      	movs	r1, r3
   1fc3e:	201c      	movs	r0, #28
   1fc40:	4b0a      	ldr	r3, [pc, #40]	; (1fc6c <init_chip_pins+0x50>)
   1fc42:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1fc44:	1d3b      	adds	r3, r7, #4
   1fc46:	0019      	movs	r1, r3
   1fc48:	2028      	movs	r0, #40	; 0x28
   1fc4a:	4b08      	ldr	r3, [pc, #32]	; (1fc6c <init_chip_pins+0x50>)
   1fc4c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fc4e:	2100      	movs	r1, #0
   1fc50:	201c      	movs	r0, #28
   1fc52:	4b07      	ldr	r3, [pc, #28]	; (1fc70 <init_chip_pins+0x54>)
   1fc54:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fc56:	2100      	movs	r1, #0
   1fc58:	201b      	movs	r0, #27
   1fc5a:	4b05      	ldr	r3, [pc, #20]	; (1fc70 <init_chip_pins+0x54>)
   1fc5c:	4798      	blx	r3
}
   1fc5e:	46c0      	nop			; (mov r8, r8)
   1fc60:	46bd      	mov	sp, r7
   1fc62:	b002      	add	sp, #8
   1fc64:	bd80      	pop	{r7, pc}
   1fc66:	46c0      	nop			; (mov r8, r8)
   1fc68:	0001fb89 	.word	0x0001fb89
   1fc6c:	000263a9 	.word	0x000263a9
   1fc70:	0001fbad 	.word	0x0001fbad

0001fc74 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1fc74:	b580      	push	{r7, lr}
   1fc76:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1fc78:	4b0b      	ldr	r3, [pc, #44]	; (1fca8 <nm_bsp_init+0x34>)
   1fc7a:	2200      	movs	r2, #0
   1fc7c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1fc7e:	4b0b      	ldr	r3, [pc, #44]	; (1fcac <nm_bsp_init+0x38>)
   1fc80:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1fc82:	4b0b      	ldr	r3, [pc, #44]	; (1fcb0 <nm_bsp_init+0x3c>)
   1fc84:	681b      	ldr	r3, [r3, #0]
   1fc86:	2201      	movs	r2, #1
   1fc88:	4013      	ands	r3, r2
   1fc8a:	d004      	beq.n	1fc96 <nm_bsp_init+0x22>
   1fc8c:	4b08      	ldr	r3, [pc, #32]	; (1fcb0 <nm_bsp_init+0x3c>)
   1fc8e:	681b      	ldr	r3, [r3, #0]
   1fc90:	2202      	movs	r2, #2
   1fc92:	4013      	ands	r3, r2
   1fc94:	d101      	bne.n	1fc9a <nm_bsp_init+0x26>
	    delay_init();
   1fc96:	4b07      	ldr	r3, [pc, #28]	; (1fcb4 <nm_bsp_init+0x40>)
   1fc98:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1fc9a:	4b07      	ldr	r3, [pc, #28]	; (1fcb8 <nm_bsp_init+0x44>)
   1fc9c:	4798      	blx	r3

	return M2M_SUCCESS;
   1fc9e:	2300      	movs	r3, #0
}
   1fca0:	0018      	movs	r0, r3
   1fca2:	46bd      	mov	sp, r7
   1fca4:	bd80      	pop	{r7, pc}
   1fca6:	46c0      	nop			; (mov r8, r8)
   1fca8:	200040fc 	.word	0x200040fc
   1fcac:	0001fc1d 	.word	0x0001fc1d
   1fcb0:	e000e010 	.word	0xe000e010
   1fcb4:	0001fa91 	.word	0x0001fa91
   1fcb8:	0001fb49 	.word	0x0001fb49

0001fcbc <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1fcbc:	b580      	push	{r7, lr}
   1fcbe:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fcc0:	2100      	movs	r1, #0
   1fcc2:	201c      	movs	r0, #28
   1fcc4:	4b0b      	ldr	r3, [pc, #44]	; (1fcf4 <nm_bsp_reset+0x38>)
   1fcc6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fcc8:	2100      	movs	r1, #0
   1fcca:	201b      	movs	r0, #27
   1fccc:	4b09      	ldr	r3, [pc, #36]	; (1fcf4 <nm_bsp_reset+0x38>)
   1fcce:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fcd0:	2001      	movs	r0, #1
   1fcd2:	4b09      	ldr	r3, [pc, #36]	; (1fcf8 <nm_bsp_reset+0x3c>)
   1fcd4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1fcd6:	2101      	movs	r1, #1
   1fcd8:	201c      	movs	r0, #28
   1fcda:	4b06      	ldr	r3, [pc, #24]	; (1fcf4 <nm_bsp_reset+0x38>)
   1fcdc:	4798      	blx	r3
	nm_bsp_sleep(10);
   1fcde:	200a      	movs	r0, #10
   1fce0:	4b05      	ldr	r3, [pc, #20]	; (1fcf8 <nm_bsp_reset+0x3c>)
   1fce2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1fce4:	2101      	movs	r1, #1
   1fce6:	201b      	movs	r0, #27
   1fce8:	4b02      	ldr	r3, [pc, #8]	; (1fcf4 <nm_bsp_reset+0x38>)
   1fcea:	4798      	blx	r3
}
   1fcec:	46c0      	nop			; (mov r8, r8)
   1fcee:	46bd      	mov	sp, r7
   1fcf0:	bd80      	pop	{r7, pc}
   1fcf2:	46c0      	nop			; (mov r8, r8)
   1fcf4:	0001fbad 	.word	0x0001fbad
   1fcf8:	0001fcfd 	.word	0x0001fcfd

0001fcfc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1fcfc:	b580      	push	{r7, lr}
   1fcfe:	b082      	sub	sp, #8
   1fd00:	af00      	add	r7, sp, #0
   1fd02:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1fd04:	687b      	ldr	r3, [r7, #4]
   1fd06:	0018      	movs	r0, r3
   1fd08:	4b02      	ldr	r3, [pc, #8]	; (1fd14 <nm_bsp_sleep+0x18>)
   1fd0a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1fd0c:	46c0      	nop			; (mov r8, r8)
   1fd0e:	46bd      	mov	sp, r7
   1fd10:	b002      	add	sp, #8
   1fd12:	bd80      	pop	{r7, pc}
   1fd14:	0001bb11 	.word	0x0001bb11

0001fd18 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1fd18:	b580      	push	{r7, lr}
   1fd1a:	b086      	sub	sp, #24
   1fd1c:	af00      	add	r7, sp, #0
   1fd1e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1fd20:	4b15      	ldr	r3, [pc, #84]	; (1fd78 <nm_bsp_register_isr+0x60>)
   1fd22:	687a      	ldr	r2, [r7, #4]
   1fd24:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1fd26:	230c      	movs	r3, #12
   1fd28:	18fb      	adds	r3, r7, r3
   1fd2a:	0018      	movs	r0, r3
   1fd2c:	4b13      	ldr	r3, [pc, #76]	; (1fd7c <nm_bsp_register_isr+0x64>)
   1fd2e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1fd30:	230c      	movs	r3, #12
   1fd32:	18fb      	adds	r3, r7, r3
   1fd34:	2229      	movs	r2, #41	; 0x29
   1fd36:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1fd38:	230c      	movs	r3, #12
   1fd3a:	18fb      	adds	r3, r7, r3
   1fd3c:	2200      	movs	r2, #0
   1fd3e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1fd40:	230c      	movs	r3, #12
   1fd42:	18fb      	adds	r3, r7, r3
   1fd44:	2201      	movs	r2, #1
   1fd46:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1fd48:	230c      	movs	r3, #12
   1fd4a:	18fb      	adds	r3, r7, r3
   1fd4c:	2202      	movs	r2, #2
   1fd4e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1fd50:	230c      	movs	r3, #12
   1fd52:	18fb      	adds	r3, r7, r3
   1fd54:	0019      	movs	r1, r3
   1fd56:	2009      	movs	r0, #9
   1fd58:	4b09      	ldr	r3, [pc, #36]	; (1fd80 <nm_bsp_register_isr+0x68>)
   1fd5a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1fd5c:	4b09      	ldr	r3, [pc, #36]	; (1fd84 <nm_bsp_register_isr+0x6c>)
   1fd5e:	2200      	movs	r2, #0
   1fd60:	2109      	movs	r1, #9
   1fd62:	0018      	movs	r0, r3
   1fd64:	4b08      	ldr	r3, [pc, #32]	; (1fd88 <nm_bsp_register_isr+0x70>)
   1fd66:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fd68:	2100      	movs	r1, #0
   1fd6a:	2009      	movs	r0, #9
   1fd6c:	4b07      	ldr	r3, [pc, #28]	; (1fd8c <nm_bsp_register_isr+0x74>)
   1fd6e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1fd70:	46c0      	nop			; (mov r8, r8)
   1fd72:	46bd      	mov	sp, r7
   1fd74:	b006      	add	sp, #24
   1fd76:	bd80      	pop	{r7, pc}
   1fd78:	200040fc 	.word	0x200040fc
   1fd7c:	00026251 	.word	0x00026251
   1fd80:	00026285 	.word	0x00026285
   1fd84:	0001fc01 	.word	0x0001fc01
   1fd88:	00025e51 	.word	0x00025e51
   1fd8c:	00025eb5 	.word	0x00025eb5

0001fd90 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1fd90:	b580      	push	{r7, lr}
   1fd92:	b082      	sub	sp, #8
   1fd94:	af00      	add	r7, sp, #0
   1fd96:	0002      	movs	r2, r0
   1fd98:	1dfb      	adds	r3, r7, #7
   1fd9a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1fd9c:	1dfb      	adds	r3, r7, #7
   1fd9e:	781b      	ldrb	r3, [r3, #0]
   1fda0:	2b00      	cmp	r3, #0
   1fda2:	d004      	beq.n	1fdae <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fda4:	2100      	movs	r1, #0
   1fda6:	2009      	movs	r0, #9
   1fda8:	4b05      	ldr	r3, [pc, #20]	; (1fdc0 <nm_bsp_interrupt_ctrl+0x30>)
   1fdaa:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1fdac:	e003      	b.n	1fdb6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1fdae:	2100      	movs	r1, #0
   1fdb0:	2009      	movs	r0, #9
   1fdb2:	4b04      	ldr	r3, [pc, #16]	; (1fdc4 <nm_bsp_interrupt_ctrl+0x34>)
   1fdb4:	4798      	blx	r3
}
   1fdb6:	46c0      	nop			; (mov r8, r8)
   1fdb8:	46bd      	mov	sp, r7
   1fdba:	b002      	add	sp, #8
   1fdbc:	bd80      	pop	{r7, pc}
   1fdbe:	46c0      	nop			; (mov r8, r8)
   1fdc0:	00025eb5 	.word	0x00025eb5
   1fdc4:	00025efd 	.word	0x00025efd

0001fdc8 <system_pinmux_get_group_from_gpio_pin>:
{
   1fdc8:	b580      	push	{r7, lr}
   1fdca:	b084      	sub	sp, #16
   1fdcc:	af00      	add	r7, sp, #0
   1fdce:	0002      	movs	r2, r0
   1fdd0:	1dfb      	adds	r3, r7, #7
   1fdd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fdd4:	230f      	movs	r3, #15
   1fdd6:	18fb      	adds	r3, r7, r3
   1fdd8:	1dfa      	adds	r2, r7, #7
   1fdda:	7812      	ldrb	r2, [r2, #0]
   1fddc:	09d2      	lsrs	r2, r2, #7
   1fdde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fde0:	230e      	movs	r3, #14
   1fde2:	18fb      	adds	r3, r7, r3
   1fde4:	1dfa      	adds	r2, r7, #7
   1fde6:	7812      	ldrb	r2, [r2, #0]
   1fde8:	0952      	lsrs	r2, r2, #5
   1fdea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fdec:	4b0d      	ldr	r3, [pc, #52]	; (1fe24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fdee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fdf0:	230f      	movs	r3, #15
   1fdf2:	18fb      	adds	r3, r7, r3
   1fdf4:	781b      	ldrb	r3, [r3, #0]
   1fdf6:	2b00      	cmp	r3, #0
   1fdf8:	d10f      	bne.n	1fe1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fdfa:	230f      	movs	r3, #15
   1fdfc:	18fb      	adds	r3, r7, r3
   1fdfe:	781b      	ldrb	r3, [r3, #0]
   1fe00:	009b      	lsls	r3, r3, #2
   1fe02:	2210      	movs	r2, #16
   1fe04:	4694      	mov	ip, r2
   1fe06:	44bc      	add	ip, r7
   1fe08:	4463      	add	r3, ip
   1fe0a:	3b08      	subs	r3, #8
   1fe0c:	681a      	ldr	r2, [r3, #0]
   1fe0e:	230e      	movs	r3, #14
   1fe10:	18fb      	adds	r3, r7, r3
   1fe12:	781b      	ldrb	r3, [r3, #0]
   1fe14:	01db      	lsls	r3, r3, #7
   1fe16:	18d3      	adds	r3, r2, r3
   1fe18:	e000      	b.n	1fe1c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fe1a:	2300      	movs	r3, #0
}
   1fe1c:	0018      	movs	r0, r3
   1fe1e:	46bd      	mov	sp, r7
   1fe20:	b004      	add	sp, #16
   1fe22:	bd80      	pop	{r7, pc}
   1fe24:	41004400 	.word	0x41004400

0001fe28 <system_interrupt_enable>:
{
   1fe28:	b580      	push	{r7, lr}
   1fe2a:	b082      	sub	sp, #8
   1fe2c:	af00      	add	r7, sp, #0
   1fe2e:	0002      	movs	r2, r0
   1fe30:	1dfb      	adds	r3, r7, #7
   1fe32:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fe34:	4b06      	ldr	r3, [pc, #24]	; (1fe50 <system_interrupt_enable+0x28>)
   1fe36:	1dfa      	adds	r2, r7, #7
   1fe38:	7812      	ldrb	r2, [r2, #0]
   1fe3a:	0011      	movs	r1, r2
   1fe3c:	221f      	movs	r2, #31
   1fe3e:	400a      	ands	r2, r1
   1fe40:	2101      	movs	r1, #1
   1fe42:	4091      	lsls	r1, r2
   1fe44:	000a      	movs	r2, r1
   1fe46:	601a      	str	r2, [r3, #0]
}
   1fe48:	46c0      	nop			; (mov r8, r8)
   1fe4a:	46bd      	mov	sp, r7
   1fe4c:	b002      	add	sp, #8
   1fe4e:	bd80      	pop	{r7, pc}
   1fe50:	e000e100 	.word	0xe000e100

0001fe54 <system_interrupt_disable>:
{
   1fe54:	b580      	push	{r7, lr}
   1fe56:	b082      	sub	sp, #8
   1fe58:	af00      	add	r7, sp, #0
   1fe5a:	0002      	movs	r2, r0
   1fe5c:	1dfb      	adds	r3, r7, #7
   1fe5e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fe60:	4a07      	ldr	r2, [pc, #28]	; (1fe80 <system_interrupt_disable+0x2c>)
   1fe62:	1dfb      	adds	r3, r7, #7
   1fe64:	781b      	ldrb	r3, [r3, #0]
   1fe66:	0019      	movs	r1, r3
   1fe68:	231f      	movs	r3, #31
   1fe6a:	400b      	ands	r3, r1
   1fe6c:	2101      	movs	r1, #1
   1fe6e:	4099      	lsls	r1, r3
   1fe70:	000b      	movs	r3, r1
   1fe72:	0019      	movs	r1, r3
   1fe74:	2380      	movs	r3, #128	; 0x80
   1fe76:	50d1      	str	r1, [r2, r3]
}
   1fe78:	46c0      	nop			; (mov r8, r8)
   1fe7a:	46bd      	mov	sp, r7
   1fe7c:	b002      	add	sp, #8
   1fe7e:	bd80      	pop	{r7, pc}
   1fe80:	e000e100 	.word	0xe000e100

0001fe84 <port_get_group_from_gpio_pin>:
{
   1fe84:	b580      	push	{r7, lr}
   1fe86:	b082      	sub	sp, #8
   1fe88:	af00      	add	r7, sp, #0
   1fe8a:	0002      	movs	r2, r0
   1fe8c:	1dfb      	adds	r3, r7, #7
   1fe8e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fe90:	1dfb      	adds	r3, r7, #7
   1fe92:	781b      	ldrb	r3, [r3, #0]
   1fe94:	0018      	movs	r0, r3
   1fe96:	4b03      	ldr	r3, [pc, #12]	; (1fea4 <port_get_group_from_gpio_pin+0x20>)
   1fe98:	4798      	blx	r3
   1fe9a:	0003      	movs	r3, r0
}
   1fe9c:	0018      	movs	r0, r3
   1fe9e:	46bd      	mov	sp, r7
   1fea0:	b002      	add	sp, #8
   1fea2:	bd80      	pop	{r7, pc}
   1fea4:	0001fdc9 	.word	0x0001fdc9

0001fea8 <port_get_config_defaults>:
{
   1fea8:	b580      	push	{r7, lr}
   1feaa:	b082      	sub	sp, #8
   1feac:	af00      	add	r7, sp, #0
   1feae:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1feb0:	687b      	ldr	r3, [r7, #4]
   1feb2:	2200      	movs	r2, #0
   1feb4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1feb6:	687b      	ldr	r3, [r7, #4]
   1feb8:	2201      	movs	r2, #1
   1feba:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1febc:	687b      	ldr	r3, [r7, #4]
   1febe:	2200      	movs	r2, #0
   1fec0:	709a      	strb	r2, [r3, #2]
}
   1fec2:	46c0      	nop			; (mov r8, r8)
   1fec4:	46bd      	mov	sp, r7
   1fec6:	b002      	add	sp, #8
   1fec8:	bd80      	pop	{r7, pc}
	...

0001fecc <port_pin_set_output_level>:
{
   1fecc:	b580      	push	{r7, lr}
   1fece:	b084      	sub	sp, #16
   1fed0:	af00      	add	r7, sp, #0
   1fed2:	0002      	movs	r2, r0
   1fed4:	1dfb      	adds	r3, r7, #7
   1fed6:	701a      	strb	r2, [r3, #0]
   1fed8:	1dbb      	adds	r3, r7, #6
   1feda:	1c0a      	adds	r2, r1, #0
   1fedc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fede:	1dfb      	adds	r3, r7, #7
   1fee0:	781b      	ldrb	r3, [r3, #0]
   1fee2:	0018      	movs	r0, r3
   1fee4:	4b0d      	ldr	r3, [pc, #52]	; (1ff1c <port_pin_set_output_level+0x50>)
   1fee6:	4798      	blx	r3
   1fee8:	0003      	movs	r3, r0
   1feea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1feec:	1dfb      	adds	r3, r7, #7
   1feee:	781b      	ldrb	r3, [r3, #0]
   1fef0:	221f      	movs	r2, #31
   1fef2:	4013      	ands	r3, r2
   1fef4:	2201      	movs	r2, #1
   1fef6:	409a      	lsls	r2, r3
   1fef8:	0013      	movs	r3, r2
   1fefa:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fefc:	1dbb      	adds	r3, r7, #6
   1fefe:	781b      	ldrb	r3, [r3, #0]
   1ff00:	2b00      	cmp	r3, #0
   1ff02:	d003      	beq.n	1ff0c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ff04:	68fb      	ldr	r3, [r7, #12]
   1ff06:	68ba      	ldr	r2, [r7, #8]
   1ff08:	619a      	str	r2, [r3, #24]
}
   1ff0a:	e002      	b.n	1ff12 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ff0c:	68fb      	ldr	r3, [r7, #12]
   1ff0e:	68ba      	ldr	r2, [r7, #8]
   1ff10:	615a      	str	r2, [r3, #20]
}
   1ff12:	46c0      	nop			; (mov r8, r8)
   1ff14:	46bd      	mov	sp, r7
   1ff16:	b004      	add	sp, #16
   1ff18:	bd80      	pop	{r7, pc}
   1ff1a:	46c0      	nop			; (mov r8, r8)
   1ff1c:	0001fe85 	.word	0x0001fe85

0001ff20 <spi_is_syncing>:
{
   1ff20:	b580      	push	{r7, lr}
   1ff22:	b084      	sub	sp, #16
   1ff24:	af00      	add	r7, sp, #0
   1ff26:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1ff28:	687b      	ldr	r3, [r7, #4]
   1ff2a:	681b      	ldr	r3, [r3, #0]
   1ff2c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1ff2e:	68fb      	ldr	r3, [r7, #12]
   1ff30:	69db      	ldr	r3, [r3, #28]
   1ff32:	1e5a      	subs	r2, r3, #1
   1ff34:	4193      	sbcs	r3, r2
   1ff36:	b2db      	uxtb	r3, r3
}
   1ff38:	0018      	movs	r0, r3
   1ff3a:	46bd      	mov	sp, r7
   1ff3c:	b004      	add	sp, #16
   1ff3e:	bd80      	pop	{r7, pc}

0001ff40 <spi_get_config_defaults>:
{
   1ff40:	b580      	push	{r7, lr}
   1ff42:	b082      	sub	sp, #8
   1ff44:	af00      	add	r7, sp, #0
   1ff46:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1ff48:	687b      	ldr	r3, [r7, #4]
   1ff4a:	2201      	movs	r2, #1
   1ff4c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1ff4e:	687b      	ldr	r3, [r7, #4]
   1ff50:	2200      	movs	r2, #0
   1ff52:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1ff54:	687b      	ldr	r3, [r7, #4]
   1ff56:	2200      	movs	r2, #0
   1ff58:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1ff5a:	687b      	ldr	r3, [r7, #4]
   1ff5c:	22c0      	movs	r2, #192	; 0xc0
   1ff5e:	0392      	lsls	r2, r2, #14
   1ff60:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1ff62:	687b      	ldr	r3, [r7, #4]
   1ff64:	2200      	movs	r2, #0
   1ff66:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1ff68:	687b      	ldr	r3, [r7, #4]
   1ff6a:	2200      	movs	r2, #0
   1ff6c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1ff6e:	687b      	ldr	r3, [r7, #4]
   1ff70:	2201      	movs	r2, #1
   1ff72:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1ff74:	687b      	ldr	r3, [r7, #4]
   1ff76:	2201      	movs	r2, #1
   1ff78:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1ff7a:	687b      	ldr	r3, [r7, #4]
   1ff7c:	2200      	movs	r2, #0
   1ff7e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1ff80:	687b      	ldr	r3, [r7, #4]
   1ff82:	2224      	movs	r2, #36	; 0x24
   1ff84:	2100      	movs	r1, #0
   1ff86:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1ff88:	687b      	ldr	r3, [r7, #4]
   1ff8a:	3318      	adds	r3, #24
   1ff8c:	220c      	movs	r2, #12
   1ff8e:	2100      	movs	r1, #0
   1ff90:	0018      	movs	r0, r3
   1ff92:	4b0a      	ldr	r3, [pc, #40]	; (1ffbc <spi_get_config_defaults+0x7c>)
   1ff94:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1ff96:	687b      	ldr	r3, [r7, #4]
   1ff98:	4a09      	ldr	r2, [pc, #36]	; (1ffc0 <spi_get_config_defaults+0x80>)
   1ff9a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1ff9c:	687b      	ldr	r3, [r7, #4]
   1ff9e:	2200      	movs	r2, #0
   1ffa0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1ffa2:	687b      	ldr	r3, [r7, #4]
   1ffa4:	2200      	movs	r2, #0
   1ffa6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1ffa8:	687b      	ldr	r3, [r7, #4]
   1ffaa:	2200      	movs	r2, #0
   1ffac:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1ffae:	687b      	ldr	r3, [r7, #4]
   1ffb0:	2200      	movs	r2, #0
   1ffb2:	635a      	str	r2, [r3, #52]	; 0x34
};
   1ffb4:	46c0      	nop			; (mov r8, r8)
   1ffb6:	46bd      	mov	sp, r7
   1ffb8:	b002      	add	sp, #8
   1ffba:	bd80      	pop	{r7, pc}
   1ffbc:	00034043 	.word	0x00034043
   1ffc0:	000186a0 	.word	0x000186a0

0001ffc4 <spi_slave_inst_get_config_defaults>:
{
   1ffc4:	b580      	push	{r7, lr}
   1ffc6:	b082      	sub	sp, #8
   1ffc8:	af00      	add	r7, sp, #0
   1ffca:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1ffcc:	687b      	ldr	r3, [r7, #4]
   1ffce:	220a      	movs	r2, #10
   1ffd0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1ffd2:	687b      	ldr	r3, [r7, #4]
   1ffd4:	2200      	movs	r2, #0
   1ffd6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1ffd8:	687b      	ldr	r3, [r7, #4]
   1ffda:	2200      	movs	r2, #0
   1ffdc:	709a      	strb	r2, [r3, #2]
}
   1ffde:	46c0      	nop			; (mov r8, r8)
   1ffe0:	46bd      	mov	sp, r7
   1ffe2:	b002      	add	sp, #8
   1ffe4:	bd80      	pop	{r7, pc}
	...

0001ffe8 <spi_attach_slave>:
{
   1ffe8:	b580      	push	{r7, lr}
   1ffea:	b084      	sub	sp, #16
   1ffec:	af00      	add	r7, sp, #0
   1ffee:	6078      	str	r0, [r7, #4]
   1fff0:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1fff2:	683b      	ldr	r3, [r7, #0]
   1fff4:	781a      	ldrb	r2, [r3, #0]
   1fff6:	687b      	ldr	r3, [r7, #4]
   1fff8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1fffa:	683b      	ldr	r3, [r7, #0]
   1fffc:	785a      	ldrb	r2, [r3, #1]
   1fffe:	687b      	ldr	r3, [r7, #4]
   20000:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20002:	683b      	ldr	r3, [r7, #0]
   20004:	789a      	ldrb	r2, [r3, #2]
   20006:	687b      	ldr	r3, [r7, #4]
   20008:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2000a:	230c      	movs	r3, #12
   2000c:	18fb      	adds	r3, r7, r3
   2000e:	0018      	movs	r0, r3
   20010:	4b0b      	ldr	r3, [pc, #44]	; (20040 <spi_attach_slave+0x58>)
   20012:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20014:	230c      	movs	r3, #12
   20016:	18fb      	adds	r3, r7, r3
   20018:	2201      	movs	r2, #1
   2001a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2001c:	687b      	ldr	r3, [r7, #4]
   2001e:	781b      	ldrb	r3, [r3, #0]
   20020:	220c      	movs	r2, #12
   20022:	18ba      	adds	r2, r7, r2
   20024:	0011      	movs	r1, r2
   20026:	0018      	movs	r0, r3
   20028:	4b06      	ldr	r3, [pc, #24]	; (20044 <spi_attach_slave+0x5c>)
   2002a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   2002c:	687b      	ldr	r3, [r7, #4]
   2002e:	781b      	ldrb	r3, [r3, #0]
   20030:	2101      	movs	r1, #1
   20032:	0018      	movs	r0, r3
   20034:	4b04      	ldr	r3, [pc, #16]	; (20048 <spi_attach_slave+0x60>)
   20036:	4798      	blx	r3
}
   20038:	46c0      	nop			; (mov r8, r8)
   2003a:	46bd      	mov	sp, r7
   2003c:	b004      	add	sp, #16
   2003e:	bd80      	pop	{r7, pc}
   20040:	0001fea9 	.word	0x0001fea9
   20044:	000263a9 	.word	0x000263a9
   20048:	0001fecd 	.word	0x0001fecd

0002004c <spi_enable>:
{
   2004c:	b580      	push	{r7, lr}
   2004e:	b084      	sub	sp, #16
   20050:	af00      	add	r7, sp, #0
   20052:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20054:	687b      	ldr	r3, [r7, #4]
   20056:	681b      	ldr	r3, [r3, #0]
   20058:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2005a:	687b      	ldr	r3, [r7, #4]
   2005c:	681b      	ldr	r3, [r3, #0]
   2005e:	0018      	movs	r0, r3
   20060:	4b0b      	ldr	r3, [pc, #44]	; (20090 <spi_enable+0x44>)
   20062:	4798      	blx	r3
   20064:	0003      	movs	r3, r0
   20066:	0018      	movs	r0, r3
   20068:	4b0a      	ldr	r3, [pc, #40]	; (20094 <spi_enable+0x48>)
   2006a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2006c:	46c0      	nop			; (mov r8, r8)
   2006e:	687b      	ldr	r3, [r7, #4]
   20070:	0018      	movs	r0, r3
   20072:	4b09      	ldr	r3, [pc, #36]	; (20098 <spi_enable+0x4c>)
   20074:	4798      	blx	r3
   20076:	1e03      	subs	r3, r0, #0
   20078:	d1f9      	bne.n	2006e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2007a:	68fb      	ldr	r3, [r7, #12]
   2007c:	681b      	ldr	r3, [r3, #0]
   2007e:	2202      	movs	r2, #2
   20080:	431a      	orrs	r2, r3
   20082:	68fb      	ldr	r3, [r7, #12]
   20084:	601a      	str	r2, [r3, #0]
}
   20086:	46c0      	nop			; (mov r8, r8)
   20088:	46bd      	mov	sp, r7
   2008a:	b004      	add	sp, #16
   2008c:	bd80      	pop	{r7, pc}
   2008e:	46c0      	nop			; (mov r8, r8)
   20090:	00027079 	.word	0x00027079
   20094:	0001fe29 	.word	0x0001fe29
   20098:	0001ff21 	.word	0x0001ff21

0002009c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   2009c:	b580      	push	{r7, lr}
   2009e:	b084      	sub	sp, #16
   200a0:	af00      	add	r7, sp, #0
   200a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   200a4:	687b      	ldr	r3, [r7, #4]
   200a6:	681b      	ldr	r3, [r3, #0]
   200a8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   200aa:	687b      	ldr	r3, [r7, #4]
   200ac:	681b      	ldr	r3, [r3, #0]
   200ae:	0018      	movs	r0, r3
   200b0:	4b0e      	ldr	r3, [pc, #56]	; (200ec <spi_disable+0x50>)
   200b2:	4798      	blx	r3
   200b4:	0003      	movs	r3, r0
   200b6:	0018      	movs	r0, r3
   200b8:	4b0d      	ldr	r3, [pc, #52]	; (200f0 <spi_disable+0x54>)
   200ba:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   200bc:	46c0      	nop			; (mov r8, r8)
   200be:	687b      	ldr	r3, [r7, #4]
   200c0:	0018      	movs	r0, r3
   200c2:	4b0c      	ldr	r3, [pc, #48]	; (200f4 <spi_disable+0x58>)
   200c4:	4798      	blx	r3
   200c6:	1e03      	subs	r3, r0, #0
   200c8:	d1f9      	bne.n	200be <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   200ca:	68fb      	ldr	r3, [r7, #12]
   200cc:	228f      	movs	r2, #143	; 0x8f
   200ce:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   200d0:	68fb      	ldr	r3, [r7, #12]
   200d2:	228f      	movs	r2, #143	; 0x8f
   200d4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   200d6:	68fb      	ldr	r3, [r7, #12]
   200d8:	681b      	ldr	r3, [r3, #0]
   200da:	2202      	movs	r2, #2
   200dc:	4393      	bics	r3, r2
   200de:	001a      	movs	r2, r3
   200e0:	68fb      	ldr	r3, [r7, #12]
   200e2:	601a      	str	r2, [r3, #0]
}
   200e4:	46c0      	nop			; (mov r8, r8)
   200e6:	46bd      	mov	sp, r7
   200e8:	b004      	add	sp, #16
   200ea:	bd80      	pop	{r7, pc}
   200ec:	00027079 	.word	0x00027079
   200f0:	0001fe55 	.word	0x0001fe55
   200f4:	0001ff21 	.word	0x0001ff21

000200f8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   200f8:	b580      	push	{r7, lr}
   200fa:	b084      	sub	sp, #16
   200fc:	af00      	add	r7, sp, #0
   200fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20100:	687b      	ldr	r3, [r7, #4]
   20102:	681b      	ldr	r3, [r3, #0]
   20104:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20106:	68fb      	ldr	r3, [r7, #12]
   20108:	7e1b      	ldrb	r3, [r3, #24]
   2010a:	b2db      	uxtb	r3, r3
   2010c:	001a      	movs	r2, r3
   2010e:	2302      	movs	r3, #2
   20110:	4013      	ands	r3, r2
   20112:	1e5a      	subs	r2, r3, #1
   20114:	4193      	sbcs	r3, r2
   20116:	b2db      	uxtb	r3, r3
}
   20118:	0018      	movs	r0, r3
   2011a:	46bd      	mov	sp, r7
   2011c:	b004      	add	sp, #16
   2011e:	bd80      	pop	{r7, pc}

00020120 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20120:	b580      	push	{r7, lr}
   20122:	b084      	sub	sp, #16
   20124:	af00      	add	r7, sp, #0
   20126:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20128:	687b      	ldr	r3, [r7, #4]
   2012a:	681b      	ldr	r3, [r3, #0]
   2012c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2012e:	68fb      	ldr	r3, [r7, #12]
   20130:	7e1b      	ldrb	r3, [r3, #24]
   20132:	b2db      	uxtb	r3, r3
   20134:	001a      	movs	r2, r3
   20136:	2301      	movs	r3, #1
   20138:	4013      	ands	r3, r2
   2013a:	1e5a      	subs	r2, r3, #1
   2013c:	4193      	sbcs	r3, r2
   2013e:	b2db      	uxtb	r3, r3
}
   20140:	0018      	movs	r0, r3
   20142:	46bd      	mov	sp, r7
   20144:	b004      	add	sp, #16
   20146:	bd80      	pop	{r7, pc}

00020148 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   20148:	b580      	push	{r7, lr}
   2014a:	b084      	sub	sp, #16
   2014c:	af00      	add	r7, sp, #0
   2014e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20150:	687b      	ldr	r3, [r7, #4]
   20152:	681b      	ldr	r3, [r3, #0]
   20154:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20156:	68fb      	ldr	r3, [r7, #12]
   20158:	7e1b      	ldrb	r3, [r3, #24]
   2015a:	b2db      	uxtb	r3, r3
   2015c:	001a      	movs	r2, r3
   2015e:	2304      	movs	r3, #4
   20160:	4013      	ands	r3, r2
   20162:	1e5a      	subs	r2, r3, #1
   20164:	4193      	sbcs	r3, r2
   20166:	b2db      	uxtb	r3, r3
}
   20168:	0018      	movs	r0, r3
   2016a:	46bd      	mov	sp, r7
   2016c:	b004      	add	sp, #16
   2016e:	bd80      	pop	{r7, pc}

00020170 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20170:	b580      	push	{r7, lr}
   20172:	b084      	sub	sp, #16
   20174:	af00      	add	r7, sp, #0
   20176:	6078      	str	r0, [r7, #4]
   20178:	000a      	movs	r2, r1
   2017a:	1cbb      	adds	r3, r7, #2
   2017c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2017e:	687b      	ldr	r3, [r7, #4]
   20180:	681b      	ldr	r3, [r3, #0]
   20182:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20184:	687b      	ldr	r3, [r7, #4]
   20186:	0018      	movs	r0, r3
   20188:	4b0a      	ldr	r3, [pc, #40]	; (201b4 <spi_write+0x44>)
   2018a:	4798      	blx	r3
   2018c:	0003      	movs	r3, r0
   2018e:	001a      	movs	r2, r3
   20190:	2301      	movs	r3, #1
   20192:	4053      	eors	r3, r2
   20194:	b2db      	uxtb	r3, r3
   20196:	2b00      	cmp	r3, #0
   20198:	d001      	beq.n	2019e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2019a:	2305      	movs	r3, #5
   2019c:	e006      	b.n	201ac <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2019e:	1cbb      	adds	r3, r7, #2
   201a0:	881b      	ldrh	r3, [r3, #0]
   201a2:	05db      	lsls	r3, r3, #23
   201a4:	0dda      	lsrs	r2, r3, #23
   201a6:	68fb      	ldr	r3, [r7, #12]
   201a8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   201aa:	2300      	movs	r3, #0
}
   201ac:	0018      	movs	r0, r3
   201ae:	46bd      	mov	sp, r7
   201b0:	b004      	add	sp, #16
   201b2:	bd80      	pop	{r7, pc}
   201b4:	00020121 	.word	0x00020121

000201b8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   201b8:	b580      	push	{r7, lr}
   201ba:	b084      	sub	sp, #16
   201bc:	af00      	add	r7, sp, #0
   201be:	6078      	str	r0, [r7, #4]
   201c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   201c2:	687b      	ldr	r3, [r7, #4]
   201c4:	681b      	ldr	r3, [r3, #0]
   201c6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   201c8:	687b      	ldr	r3, [r7, #4]
   201ca:	0018      	movs	r0, r3
   201cc:	4b1b      	ldr	r3, [pc, #108]	; (2023c <spi_read+0x84>)
   201ce:	4798      	blx	r3
   201d0:	0003      	movs	r3, r0
   201d2:	001a      	movs	r2, r3
   201d4:	2301      	movs	r3, #1
   201d6:	4053      	eors	r3, r2
   201d8:	b2db      	uxtb	r3, r3
   201da:	2b00      	cmp	r3, #0
   201dc:	d001      	beq.n	201e2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   201de:	2310      	movs	r3, #16
   201e0:	e027      	b.n	20232 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   201e2:	230f      	movs	r3, #15
   201e4:	18fb      	adds	r3, r7, r3
   201e6:	2200      	movs	r2, #0
   201e8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   201ea:	68bb      	ldr	r3, [r7, #8]
   201ec:	8b5b      	ldrh	r3, [r3, #26]
   201ee:	b29b      	uxth	r3, r3
   201f0:	001a      	movs	r2, r3
   201f2:	2304      	movs	r3, #4
   201f4:	4013      	ands	r3, r2
   201f6:	d006      	beq.n	20206 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   201f8:	230f      	movs	r3, #15
   201fa:	18fb      	adds	r3, r7, r3
   201fc:	221e      	movs	r2, #30
   201fe:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20200:	68bb      	ldr	r3, [r7, #8]
   20202:	2204      	movs	r2, #4
   20204:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20206:	687b      	ldr	r3, [r7, #4]
   20208:	799b      	ldrb	r3, [r3, #6]
   2020a:	2b01      	cmp	r3, #1
   2020c:	d108      	bne.n	20220 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2020e:	68bb      	ldr	r3, [r7, #8]
   20210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20212:	b29b      	uxth	r3, r3
   20214:	05db      	lsls	r3, r3, #23
   20216:	0ddb      	lsrs	r3, r3, #23
   20218:	b29a      	uxth	r2, r3
   2021a:	683b      	ldr	r3, [r7, #0]
   2021c:	801a      	strh	r2, [r3, #0]
   2021e:	e005      	b.n	2022c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20220:	68bb      	ldr	r3, [r7, #8]
   20222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20224:	b2db      	uxtb	r3, r3
   20226:	b29a      	uxth	r2, r3
   20228:	683b      	ldr	r3, [r7, #0]
   2022a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   2022c:	230f      	movs	r3, #15
   2022e:	18fb      	adds	r3, r7, r3
   20230:	781b      	ldrb	r3, [r3, #0]
}
   20232:	0018      	movs	r0, r3
   20234:	46bd      	mov	sp, r7
   20236:	b004      	add	sp, #16
   20238:	bd80      	pop	{r7, pc}
   2023a:	46c0      	nop			; (mov r8, r8)
   2023c:	00020149 	.word	0x00020149

00020240 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20240:	b580      	push	{r7, lr}
   20242:	b086      	sub	sp, #24
   20244:	af00      	add	r7, sp, #0
   20246:	60f8      	str	r0, [r7, #12]
   20248:	60b9      	str	r1, [r7, #8]
   2024a:	1dbb      	adds	r3, r7, #6
   2024c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   2024e:	2313      	movs	r3, #19
   20250:	18fb      	adds	r3, r7, r3
   20252:	22ff      	movs	r2, #255	; 0xff
   20254:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20256:	2317      	movs	r3, #23
   20258:	18fb      	adds	r3, r7, r3
   2025a:	2200      	movs	r2, #0
   2025c:	701a      	strb	r2, [r3, #0]
   2025e:	2316      	movs	r3, #22
   20260:	18fb      	adds	r3, r7, r3
   20262:	2200      	movs	r2, #0
   20264:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20266:	2314      	movs	r3, #20
   20268:	18fb      	adds	r3, r7, r3
   2026a:	2200      	movs	r2, #0
   2026c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   2026e:	2310      	movs	r3, #16
   20270:	18fb      	adds	r3, r7, r3
   20272:	2200      	movs	r2, #0
   20274:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   20276:	68bb      	ldr	r3, [r7, #8]
   20278:	2b00      	cmp	r3, #0
   2027a:	d102      	bne.n	20282 <spi_rw+0x42>
   2027c:	68fb      	ldr	r3, [r7, #12]
   2027e:	2b00      	cmp	r3, #0
   20280:	d003      	beq.n	2028a <spi_rw+0x4a>
   20282:	1dbb      	adds	r3, r7, #6
   20284:	881b      	ldrh	r3, [r3, #0]
   20286:	2b00      	cmp	r3, #0
   20288:	d102      	bne.n	20290 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2028a:	230f      	movs	r3, #15
   2028c:	425b      	negs	r3, r3
   2028e:	e07e      	b.n	2038e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20290:	68fb      	ldr	r3, [r7, #12]
   20292:	2b00      	cmp	r3, #0
   20294:	d106      	bne.n	202a4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20296:	2313      	movs	r3, #19
   20298:	18fb      	adds	r3, r7, r3
   2029a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2029c:	2317      	movs	r3, #23
   2029e:	18fb      	adds	r3, r7, r3
   202a0:	2201      	movs	r2, #1
   202a2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   202a4:	68bb      	ldr	r3, [r7, #8]
   202a6:	2b00      	cmp	r3, #0
   202a8:	d106      	bne.n	202b8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   202aa:	2313      	movs	r3, #19
   202ac:	18fb      	adds	r3, r7, r3
   202ae:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   202b0:	2316      	movs	r3, #22
   202b2:	18fb      	adds	r3, r7, r3
   202b4:	2201      	movs	r2, #1
   202b6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   202b8:	4937      	ldr	r1, [pc, #220]	; (20398 <spi_rw+0x158>)
   202ba:	4b38      	ldr	r3, [pc, #224]	; (2039c <spi_rw+0x15c>)
   202bc:	2201      	movs	r2, #1
   202be:	0018      	movs	r0, r3
   202c0:	4b37      	ldr	r3, [pc, #220]	; (203a0 <spi_rw+0x160>)
   202c2:	4798      	blx	r3

	while (u16Sz) {
   202c4:	e04c      	b.n	20360 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   202c6:	68fb      	ldr	r3, [r7, #12]
   202c8:	781a      	ldrb	r2, [r3, #0]
   202ca:	2314      	movs	r3, #20
   202cc:	18fb      	adds	r3, r7, r3
   202ce:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   202d0:	46c0      	nop			; (mov r8, r8)
   202d2:	4b32      	ldr	r3, [pc, #200]	; (2039c <spi_rw+0x15c>)
   202d4:	0018      	movs	r0, r3
   202d6:	4b33      	ldr	r3, [pc, #204]	; (203a4 <spi_rw+0x164>)
   202d8:	4798      	blx	r3
   202da:	0003      	movs	r3, r0
   202dc:	001a      	movs	r2, r3
   202de:	2301      	movs	r3, #1
   202e0:	4053      	eors	r3, r2
   202e2:	b2db      	uxtb	r3, r3
   202e4:	2b00      	cmp	r3, #0
   202e6:	d1f4      	bne.n	202d2 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   202e8:	46c0      	nop			; (mov r8, r8)
   202ea:	2314      	movs	r3, #20
   202ec:	18fb      	adds	r3, r7, r3
   202ee:	881a      	ldrh	r2, [r3, #0]
   202f0:	4b2a      	ldr	r3, [pc, #168]	; (2039c <spi_rw+0x15c>)
   202f2:	0011      	movs	r1, r2
   202f4:	0018      	movs	r0, r3
   202f6:	4b2c      	ldr	r3, [pc, #176]	; (203a8 <spi_rw+0x168>)
   202f8:	4798      	blx	r3
   202fa:	1e03      	subs	r3, r0, #0
   202fc:	d1f5      	bne.n	202ea <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   202fe:	46c0      	nop			; (mov r8, r8)
   20300:	4b26      	ldr	r3, [pc, #152]	; (2039c <spi_rw+0x15c>)
   20302:	0018      	movs	r0, r3
   20304:	4b29      	ldr	r3, [pc, #164]	; (203ac <spi_rw+0x16c>)
   20306:	4798      	blx	r3
   20308:	0003      	movs	r3, r0
   2030a:	001a      	movs	r2, r3
   2030c:	2301      	movs	r3, #1
   2030e:	4053      	eors	r3, r2
   20310:	b2db      	uxtb	r3, r3
   20312:	2b00      	cmp	r3, #0
   20314:	d1f4      	bne.n	20300 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20316:	46c0      	nop			; (mov r8, r8)
   20318:	2310      	movs	r3, #16
   2031a:	18fa      	adds	r2, r7, r3
   2031c:	4b1f      	ldr	r3, [pc, #124]	; (2039c <spi_rw+0x15c>)
   2031e:	0011      	movs	r1, r2
   20320:	0018      	movs	r0, r3
   20322:	4b23      	ldr	r3, [pc, #140]	; (203b0 <spi_rw+0x170>)
   20324:	4798      	blx	r3
   20326:	1e03      	subs	r3, r0, #0
   20328:	d1f6      	bne.n	20318 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2032a:	2310      	movs	r3, #16
   2032c:	18fb      	adds	r3, r7, r3
   2032e:	881b      	ldrh	r3, [r3, #0]
   20330:	b2da      	uxtb	r2, r3
   20332:	68bb      	ldr	r3, [r7, #8]
   20334:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   20336:	1dbb      	adds	r3, r7, #6
   20338:	881a      	ldrh	r2, [r3, #0]
   2033a:	1dbb      	adds	r3, r7, #6
   2033c:	3a01      	subs	r2, #1
   2033e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20340:	2316      	movs	r3, #22
   20342:	18fb      	adds	r3, r7, r3
   20344:	781b      	ldrb	r3, [r3, #0]
   20346:	2b00      	cmp	r3, #0
   20348:	d102      	bne.n	20350 <spi_rw+0x110>
			pu8Miso++;
   2034a:	68bb      	ldr	r3, [r7, #8]
   2034c:	3301      	adds	r3, #1
   2034e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20350:	2317      	movs	r3, #23
   20352:	18fb      	adds	r3, r7, r3
   20354:	781b      	ldrb	r3, [r3, #0]
   20356:	2b00      	cmp	r3, #0
   20358:	d102      	bne.n	20360 <spi_rw+0x120>
			pu8Mosi++;
   2035a:	68fb      	ldr	r3, [r7, #12]
   2035c:	3301      	adds	r3, #1
   2035e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20360:	1dbb      	adds	r3, r7, #6
   20362:	881b      	ldrh	r3, [r3, #0]
   20364:	2b00      	cmp	r3, #0
   20366:	d1ae      	bne.n	202c6 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   20368:	46c0      	nop			; (mov r8, r8)
   2036a:	4b0c      	ldr	r3, [pc, #48]	; (2039c <spi_rw+0x15c>)
   2036c:	0018      	movs	r0, r3
   2036e:	4b11      	ldr	r3, [pc, #68]	; (203b4 <spi_rw+0x174>)
   20370:	4798      	blx	r3
   20372:	0003      	movs	r3, r0
   20374:	001a      	movs	r2, r3
   20376:	2301      	movs	r3, #1
   20378:	4053      	eors	r3, r2
   2037a:	b2db      	uxtb	r3, r3
   2037c:	2b00      	cmp	r3, #0
   2037e:	d1f4      	bne.n	2036a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20380:	4905      	ldr	r1, [pc, #20]	; (20398 <spi_rw+0x158>)
   20382:	4b06      	ldr	r3, [pc, #24]	; (2039c <spi_rw+0x15c>)
   20384:	2200      	movs	r2, #0
   20386:	0018      	movs	r0, r3
   20388:	4b05      	ldr	r3, [pc, #20]	; (203a0 <spi_rw+0x160>)
   2038a:	4798      	blx	r3

	return M2M_SUCCESS;
   2038c:	2300      	movs	r3, #0
}
   2038e:	0018      	movs	r0, r3
   20390:	46bd      	mov	sp, r7
   20392:	b006      	add	sp, #24
   20394:	bd80      	pop	{r7, pc}
   20396:	46c0      	nop			; (mov r8, r8)
   20398:	2000594c 	.word	0x2000594c
   2039c:	20005950 	.word	0x20005950
   203a0:	00027aed 	.word	0x00027aed
   203a4:	00020121 	.word	0x00020121
   203a8:	00020171 	.word	0x00020171
   203ac:	00020149 	.word	0x00020149
   203b0:	000201b9 	.word	0x000201b9
   203b4:	000200f9 	.word	0x000200f9

000203b8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   203b8:	b580      	push	{r7, lr}
   203ba:	b092      	sub	sp, #72	; 0x48
   203bc:	af00      	add	r7, sp, #0
   203be:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   203c0:	2347      	movs	r3, #71	; 0x47
   203c2:	18fb      	adds	r3, r7, r3
   203c4:	2200      	movs	r2, #0
   203c6:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   203c8:	2308      	movs	r3, #8
   203ca:	18fb      	adds	r3, r7, r3
   203cc:	0018      	movs	r0, r3
   203ce:	4b26      	ldr	r3, [pc, #152]	; (20468 <nm_bus_init+0xb0>)
   203d0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   203d2:	2308      	movs	r3, #8
   203d4:	18fb      	adds	r3, r7, r3
   203d6:	220e      	movs	r2, #14
   203d8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   203da:	2308      	movs	r3, #8
   203dc:	18fa      	adds	r2, r7, r3
   203de:	4b23      	ldr	r3, [pc, #140]	; (2046c <nm_bus_init+0xb4>)
   203e0:	0011      	movs	r1, r2
   203e2:	0018      	movs	r0, r3
   203e4:	4b22      	ldr	r3, [pc, #136]	; (20470 <nm_bus_init+0xb8>)
   203e6:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   203e8:	230c      	movs	r3, #12
   203ea:	18fb      	adds	r3, r7, r3
   203ec:	0018      	movs	r0, r3
   203ee:	4b21      	ldr	r3, [pc, #132]	; (20474 <nm_bus_init+0xbc>)
   203f0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   203f2:	230c      	movs	r3, #12
   203f4:	18fb      	adds	r3, r7, r3
   203f6:	22c0      	movs	r2, #192	; 0xc0
   203f8:	0392      	lsls	r2, r2, #14
   203fa:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   203fc:	230c      	movs	r3, #12
   203fe:	18fb      	adds	r3, r7, r3
   20400:	4a1d      	ldr	r2, [pc, #116]	; (20478 <nm_bus_init+0xc0>)
   20402:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20404:	230c      	movs	r3, #12
   20406:	18fb      	adds	r3, r7, r3
   20408:	4a1c      	ldr	r2, [pc, #112]	; (2047c <nm_bus_init+0xc4>)
   2040a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2040c:	230c      	movs	r3, #12
   2040e:	18fb      	adds	r3, r7, r3
   20410:	2201      	movs	r2, #1
   20412:	4252      	negs	r2, r2
   20414:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20416:	230c      	movs	r3, #12
   20418:	18fb      	adds	r3, r7, r3
   2041a:	4a19      	ldr	r2, [pc, #100]	; (20480 <nm_bus_init+0xc8>)
   2041c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   2041e:	230c      	movs	r3, #12
   20420:	18fb      	adds	r3, r7, r3
   20422:	2200      	movs	r2, #0
   20424:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   20426:	230c      	movs	r3, #12
   20428:	18fb      	adds	r3, r7, r3
   2042a:	4a16      	ldr	r2, [pc, #88]	; (20484 <nm_bus_init+0xcc>)
   2042c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   2042e:	230c      	movs	r3, #12
   20430:	18fa      	adds	r2, r7, r3
   20432:	4915      	ldr	r1, [pc, #84]	; (20488 <nm_bus_init+0xd0>)
   20434:	4b15      	ldr	r3, [pc, #84]	; (2048c <nm_bus_init+0xd4>)
   20436:	0018      	movs	r0, r3
   20438:	4b15      	ldr	r3, [pc, #84]	; (20490 <nm_bus_init+0xd8>)
   2043a:	4798      	blx	r3
   2043c:	1e03      	subs	r3, r0, #0
   2043e:	d002      	beq.n	20446 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20440:	2306      	movs	r3, #6
   20442:	425b      	negs	r3, r3
   20444:	e00c      	b.n	20460 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   20446:	4b11      	ldr	r3, [pc, #68]	; (2048c <nm_bus_init+0xd4>)
   20448:	0018      	movs	r0, r3
   2044a:	4b12      	ldr	r3, [pc, #72]	; (20494 <nm_bus_init+0xdc>)
   2044c:	4798      	blx	r3

	nm_bsp_reset();
   2044e:	4b12      	ldr	r3, [pc, #72]	; (20498 <nm_bus_init+0xe0>)
   20450:	4798      	blx	r3
	nm_bsp_sleep(1);
   20452:	2001      	movs	r0, #1
   20454:	4b11      	ldr	r3, [pc, #68]	; (2049c <nm_bus_init+0xe4>)
   20456:	4798      	blx	r3
#endif
	return result;
   20458:	2347      	movs	r3, #71	; 0x47
   2045a:	18fb      	adds	r3, r7, r3
   2045c:	781b      	ldrb	r3, [r3, #0]
   2045e:	b25b      	sxtb	r3, r3
}
   20460:	0018      	movs	r0, r3
   20462:	46bd      	mov	sp, r7
   20464:	b012      	add	sp, #72	; 0x48
   20466:	bd80      	pop	{r7, pc}
   20468:	0001ffc5 	.word	0x0001ffc5
   2046c:	2000594c 	.word	0x2000594c
   20470:	0001ffe9 	.word	0x0001ffe9
   20474:	0001ff41 	.word	0x0001ff41
   20478:	000c0002 	.word	0x000c0002
   2047c:	000d0002 	.word	0x000d0002
   20480:	000f0002 	.word	0x000f0002
   20484:	00124f80 	.word	0x00124f80
   20488:	42001000 	.word	0x42001000
   2048c:	20005950 	.word	0x20005950
   20490:	00027829 	.word	0x00027829
   20494:	0002004d 	.word	0x0002004d
   20498:	0001fcbd 	.word	0x0001fcbd
   2049c:	0001fcfd 	.word	0x0001fcfd

000204a0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   204a0:	b590      	push	{r4, r7, lr}
   204a2:	b085      	sub	sp, #20
   204a4:	af00      	add	r7, sp, #0
   204a6:	0002      	movs	r2, r0
   204a8:	6039      	str	r1, [r7, #0]
   204aa:	1dfb      	adds	r3, r7, #7
   204ac:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   204ae:	230f      	movs	r3, #15
   204b0:	18fb      	adds	r3, r7, r3
   204b2:	2200      	movs	r2, #0
   204b4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   204b6:	1dfb      	adds	r3, r7, #7
   204b8:	781b      	ldrb	r3, [r3, #0]
   204ba:	2b03      	cmp	r3, #3
   204bc:	d10f      	bne.n	204de <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   204be:	683b      	ldr	r3, [r7, #0]
   204c0:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   204c2:	68bb      	ldr	r3, [r7, #8]
   204c4:	6818      	ldr	r0, [r3, #0]
   204c6:	68bb      	ldr	r3, [r7, #8]
   204c8:	6859      	ldr	r1, [r3, #4]
   204ca:	68bb      	ldr	r3, [r7, #8]
   204cc:	891b      	ldrh	r3, [r3, #8]
   204ce:	220f      	movs	r2, #15
   204d0:	18bc      	adds	r4, r7, r2
   204d2:	001a      	movs	r2, r3
   204d4:	4b10      	ldr	r3, [pc, #64]	; (20518 <nm_bus_ioctl+0x78>)
   204d6:	4798      	blx	r3
   204d8:	0003      	movs	r3, r0
   204da:	7023      	strb	r3, [r4, #0]
		}
		break;
   204dc:	e013      	b.n	20506 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   204de:	230f      	movs	r3, #15
   204e0:	18fb      	adds	r3, r7, r3
   204e2:	22ff      	movs	r2, #255	; 0xff
   204e4:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   204e6:	2383      	movs	r3, #131	; 0x83
   204e8:	005a      	lsls	r2, r3, #1
   204ea:	490c      	ldr	r1, [pc, #48]	; (2051c <nm_bus_ioctl+0x7c>)
   204ec:	4b0c      	ldr	r3, [pc, #48]	; (20520 <nm_bus_ioctl+0x80>)
   204ee:	0018      	movs	r0, r3
   204f0:	4b0c      	ldr	r3, [pc, #48]	; (20524 <nm_bus_ioctl+0x84>)
   204f2:	4798      	blx	r3
   204f4:	4b0c      	ldr	r3, [pc, #48]	; (20528 <nm_bus_ioctl+0x88>)
   204f6:	0018      	movs	r0, r3
   204f8:	4b0a      	ldr	r3, [pc, #40]	; (20524 <nm_bus_ioctl+0x84>)
   204fa:	4798      	blx	r3
   204fc:	4b0b      	ldr	r3, [pc, #44]	; (2052c <nm_bus_ioctl+0x8c>)
   204fe:	0018      	movs	r0, r3
   20500:	4b08      	ldr	r3, [pc, #32]	; (20524 <nm_bus_ioctl+0x84>)
   20502:	4798      	blx	r3
			break;
   20504:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20506:	230f      	movs	r3, #15
   20508:	18fb      	adds	r3, r7, r3
   2050a:	781b      	ldrb	r3, [r3, #0]
   2050c:	b25b      	sxtb	r3, r3
}
   2050e:	0018      	movs	r0, r3
   20510:	46bd      	mov	sp, r7
   20512:	b005      	add	sp, #20
   20514:	bd90      	pop	{r4, r7, pc}
   20516:	46c0      	nop			; (mov r8, r8)
   20518:	00020241 	.word	0x00020241
   2051c:	000377d4 	.word	0x000377d4
   20520:	000377a8 	.word	0x000377a8
   20524:	0001d8a9 	.word	0x0001d8a9
   20528:	000377bc 	.word	0x000377bc
   2052c:	000377d0 	.word	0x000377d0

00020530 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20530:	b580      	push	{r7, lr}
   20532:	b082      	sub	sp, #8
   20534:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   20536:	1dfb      	adds	r3, r7, #7
   20538:	2200      	movs	r2, #0
   2053a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   2053c:	1d3b      	adds	r3, r7, #4
   2053e:	0018      	movs	r0, r3
   20540:	4b13      	ldr	r3, [pc, #76]	; (20590 <nm_bus_deinit+0x60>)
   20542:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20544:	1d3b      	adds	r3, r7, #4
   20546:	2200      	movs	r2, #0
   20548:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2054a:	1d3b      	adds	r3, r7, #4
   2054c:	2200      	movs	r2, #0
   2054e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20550:	4b10      	ldr	r3, [pc, #64]	; (20594 <nm_bus_deinit+0x64>)
   20552:	0018      	movs	r0, r3
   20554:	4b10      	ldr	r3, [pc, #64]	; (20598 <nm_bus_deinit+0x68>)
   20556:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   20558:	1d3b      	adds	r3, r7, #4
   2055a:	0019      	movs	r1, r3
   2055c:	200c      	movs	r0, #12
   2055e:	4b0f      	ldr	r3, [pc, #60]	; (2059c <nm_bus_deinit+0x6c>)
   20560:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20562:	1d3b      	adds	r3, r7, #4
   20564:	0019      	movs	r1, r3
   20566:	200f      	movs	r0, #15
   20568:	4b0c      	ldr	r3, [pc, #48]	; (2059c <nm_bus_deinit+0x6c>)
   2056a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   2056c:	1d3b      	adds	r3, r7, #4
   2056e:	0019      	movs	r1, r3
   20570:	200d      	movs	r0, #13
   20572:	4b0a      	ldr	r3, [pc, #40]	; (2059c <nm_bus_deinit+0x6c>)
   20574:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   20576:	1d3b      	adds	r3, r7, #4
   20578:	0019      	movs	r1, r3
   2057a:	200e      	movs	r0, #14
   2057c:	4b07      	ldr	r3, [pc, #28]	; (2059c <nm_bus_deinit+0x6c>)
   2057e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   20580:	1dfb      	adds	r3, r7, #7
   20582:	781b      	ldrb	r3, [r3, #0]
   20584:	b25b      	sxtb	r3, r3
}
   20586:	0018      	movs	r0, r3
   20588:	46bd      	mov	sp, r7
   2058a:	b002      	add	sp, #8
   2058c:	bd80      	pop	{r7, pc}
   2058e:	46c0      	nop			; (mov r8, r8)
   20590:	0001fea9 	.word	0x0001fea9
   20594:	20005950 	.word	0x20005950
   20598:	0002009d 	.word	0x0002009d
   2059c:	000263a9 	.word	0x000263a9

000205a0 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   205a0:	b580      	push	{r7, lr}
   205a2:	b084      	sub	sp, #16
   205a4:	af00      	add	r7, sp, #0
   205a6:	60f8      	str	r0, [r7, #12]
   205a8:	60b9      	str	r1, [r7, #8]
   205aa:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   205ac:	687b      	ldr	r3, [r7, #4]
   205ae:	2b00      	cmp	r3, #0
   205b0:	d010      	beq.n	205d4 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   205b2:	68bb      	ldr	r3, [r7, #8]
   205b4:	781a      	ldrb	r2, [r3, #0]
   205b6:	68fb      	ldr	r3, [r7, #12]
   205b8:	701a      	strb	r2, [r3, #0]
		pDst++;
   205ba:	68fb      	ldr	r3, [r7, #12]
   205bc:	3301      	adds	r3, #1
   205be:	60fb      	str	r3, [r7, #12]
		pSrc++;
   205c0:	68bb      	ldr	r3, [r7, #8]
   205c2:	3301      	adds	r3, #1
   205c4:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   205c6:	687b      	ldr	r3, [r7, #4]
   205c8:	3b01      	subs	r3, #1
   205ca:	607b      	str	r3, [r7, #4]
   205cc:	687b      	ldr	r3, [r7, #4]
   205ce:	2b00      	cmp	r3, #0
   205d0:	d1ef      	bne.n	205b2 <m2m_memcpy+0x12>
   205d2:	e000      	b.n	205d6 <m2m_memcpy+0x36>
	if(sz == 0) return;
   205d4:	46c0      	nop			; (mov r8, r8)
}
   205d6:	46bd      	mov	sp, r7
   205d8:	b004      	add	sp, #16
   205da:	bd80      	pop	{r7, pc}

000205dc <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   205dc:	b580      	push	{r7, lr}
   205de:	b084      	sub	sp, #16
   205e0:	af00      	add	r7, sp, #0
   205e2:	60f8      	str	r0, [r7, #12]
   205e4:	607a      	str	r2, [r7, #4]
   205e6:	230b      	movs	r3, #11
   205e8:	18fb      	adds	r3, r7, r3
   205ea:	1c0a      	adds	r2, r1, #0
   205ec:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   205ee:	687b      	ldr	r3, [r7, #4]
   205f0:	2b00      	cmp	r3, #0
   205f2:	d00e      	beq.n	20612 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   205f4:	68fb      	ldr	r3, [r7, #12]
   205f6:	220b      	movs	r2, #11
   205f8:	18ba      	adds	r2, r7, r2
   205fa:	7812      	ldrb	r2, [r2, #0]
   205fc:	701a      	strb	r2, [r3, #0]
		pBuf++;
   205fe:	68fb      	ldr	r3, [r7, #12]
   20600:	3301      	adds	r3, #1
   20602:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20604:	687b      	ldr	r3, [r7, #4]
   20606:	3b01      	subs	r3, #1
   20608:	607b      	str	r3, [r7, #4]
   2060a:	687b      	ldr	r3, [r7, #4]
   2060c:	2b00      	cmp	r3, #0
   2060e:	d1f1      	bne.n	205f4 <m2m_memset+0x18>
   20610:	e000      	b.n	20614 <m2m_memset+0x38>
	if(sz == 0) return;
   20612:	46c0      	nop			; (mov r8, r8)
}
   20614:	46bd      	mov	sp, r7
   20616:	b004      	add	sp, #16
   20618:	bd80      	pop	{r7, pc}

0002061a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2061a:	b580      	push	{r7, lr}
   2061c:	b084      	sub	sp, #16
   2061e:	af00      	add	r7, sp, #0
   20620:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20622:	230e      	movs	r3, #14
   20624:	18fb      	adds	r3, r7, r3
   20626:	2200      	movs	r2, #0
   20628:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2062a:	e009      	b.n	20640 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   2062c:	230e      	movs	r3, #14
   2062e:	18fb      	adds	r3, r7, r3
   20630:	881a      	ldrh	r2, [r3, #0]
   20632:	230e      	movs	r3, #14
   20634:	18fb      	adds	r3, r7, r3
   20636:	3201      	adds	r2, #1
   20638:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2063a:	687b      	ldr	r3, [r7, #4]
   2063c:	3301      	adds	r3, #1
   2063e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20640:	687b      	ldr	r3, [r7, #4]
   20642:	781b      	ldrb	r3, [r3, #0]
   20644:	2b00      	cmp	r3, #0
   20646:	d1f1      	bne.n	2062c <m2m_strlen+0x12>
	}
	return u16StrLen;
   20648:	230e      	movs	r3, #14
   2064a:	18fb      	adds	r3, r7, r3
   2064c:	881b      	ldrh	r3, [r3, #0]
}
   2064e:	0018      	movs	r0, r3
   20650:	46bd      	mov	sp, r7
   20652:	b004      	add	sp, #16
   20654:	bd80      	pop	{r7, pc}
	...

00020658 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20658:	b580      	push	{r7, lr}
   2065a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   2065c:	4b04      	ldr	r3, [pc, #16]	; (20670 <isr+0x18>)
   2065e:	78db      	ldrb	r3, [r3, #3]
   20660:	b2db      	uxtb	r3, r3
   20662:	3301      	adds	r3, #1
   20664:	b2da      	uxtb	r2, r3
   20666:	4b02      	ldr	r3, [pc, #8]	; (20670 <isr+0x18>)
   20668:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2066a:	46c0      	nop			; (mov r8, r8)
   2066c:	46bd      	mov	sp, r7
   2066e:	bd80      	pop	{r7, pc}
   20670:	2000598c 	.word	0x2000598c

00020674 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   20674:	b590      	push	{r4, r7, lr}
   20676:	b083      	sub	sp, #12
   20678:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2067a:	1dfb      	adds	r3, r7, #7
   2067c:	2200      	movs	r2, #0
   2067e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   20680:	4b14      	ldr	r3, [pc, #80]	; (206d4 <hif_set_rx_done+0x60>)
   20682:	2200      	movs	r2, #0
   20684:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20686:	2001      	movs	r0, #1
   20688:	4b13      	ldr	r3, [pc, #76]	; (206d8 <hif_set_rx_done+0x64>)
   2068a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   2068c:	1dfc      	adds	r4, r7, #7
   2068e:	003b      	movs	r3, r7
   20690:	4a12      	ldr	r2, [pc, #72]	; (206dc <hif_set_rx_done+0x68>)
   20692:	0019      	movs	r1, r3
   20694:	0010      	movs	r0, r2
   20696:	4b12      	ldr	r3, [pc, #72]	; (206e0 <hif_set_rx_done+0x6c>)
   20698:	4798      	blx	r3
   2069a:	0003      	movs	r3, r0
   2069c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2069e:	1dfb      	adds	r3, r7, #7
   206a0:	781b      	ldrb	r3, [r3, #0]
   206a2:	b25b      	sxtb	r3, r3
   206a4:	2b00      	cmp	r3, #0
   206a6:	d10d      	bne.n	206c4 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   206a8:	683b      	ldr	r3, [r7, #0]
   206aa:	2202      	movs	r2, #2
   206ac:	4313      	orrs	r3, r2
   206ae:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   206b0:	683b      	ldr	r3, [r7, #0]
   206b2:	1dfc      	adds	r4, r7, #7
   206b4:	4a09      	ldr	r2, [pc, #36]	; (206dc <hif_set_rx_done+0x68>)
   206b6:	0019      	movs	r1, r3
   206b8:	0010      	movs	r0, r2
   206ba:	4b0a      	ldr	r3, [pc, #40]	; (206e4 <hif_set_rx_done+0x70>)
   206bc:	4798      	blx	r3
   206be:	0003      	movs	r3, r0
   206c0:	7023      	strb	r3, [r4, #0]
   206c2:	e000      	b.n	206c6 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   206c4:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   206c6:	1dfb      	adds	r3, r7, #7
   206c8:	781b      	ldrb	r3, [r3, #0]
   206ca:	b25b      	sxtb	r3, r3

}
   206cc:	0018      	movs	r0, r3
   206ce:	46bd      	mov	sp, r7
   206d0:	b003      	add	sp, #12
   206d2:	bd90      	pop	{r4, r7, pc}
   206d4:	2000598c 	.word	0x2000598c
   206d8:	0001fd91 	.word	0x0001fd91
   206dc:	00001070 	.word	0x00001070
   206e0:	0002266d 	.word	0x0002266d
   206e4:	00022691 	.word	0x00022691

000206e8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   206e8:	b580      	push	{r7, lr}
   206ea:	b082      	sub	sp, #8
   206ec:	af00      	add	r7, sp, #0
   206ee:	603a      	str	r2, [r7, #0]
   206f0:	1dfb      	adds	r3, r7, #7
   206f2:	1c02      	adds	r2, r0, #0
   206f4:	701a      	strb	r2, [r3, #0]
   206f6:	1d3b      	adds	r3, r7, #4
   206f8:	1c0a      	adds	r2, r1, #0
   206fa:	801a      	strh	r2, [r3, #0]


}
   206fc:	46c0      	nop			; (mov r8, r8)
   206fe:	46bd      	mov	sp, r7
   20700:	b002      	add	sp, #8
   20702:	bd80      	pop	{r7, pc}

00020704 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20704:	b590      	push	{r4, r7, lr}
   20706:	b083      	sub	sp, #12
   20708:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2070a:	1dfb      	adds	r3, r7, #7
   2070c:	2200      	movs	r2, #0
   2070e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20710:	4b16      	ldr	r3, [pc, #88]	; (2076c <hif_chip_wake+0x68>)
   20712:	789b      	ldrb	r3, [r3, #2]
   20714:	b2db      	uxtb	r3, r3
   20716:	2b00      	cmp	r3, #0
   20718:	d003      	beq.n	20722 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2071a:	1dfb      	adds	r3, r7, #7
   2071c:	781b      	ldrb	r3, [r3, #0]
   2071e:	b25b      	sxtb	r3, r3
   20720:	e01f      	b.n	20762 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20722:	4b12      	ldr	r3, [pc, #72]	; (2076c <hif_chip_wake+0x68>)
   20724:	785b      	ldrb	r3, [r3, #1]
   20726:	b2db      	uxtb	r3, r3
   20728:	2b00      	cmp	r3, #0
   2072a:	d10e      	bne.n	2074a <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2072c:	4b0f      	ldr	r3, [pc, #60]	; (2076c <hif_chip_wake+0x68>)
   2072e:	781b      	ldrb	r3, [r3, #0]
   20730:	b2db      	uxtb	r3, r3
   20732:	2b00      	cmp	r3, #0
   20734:	d009      	beq.n	2074a <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20736:	1dfc      	adds	r4, r7, #7
   20738:	4b0d      	ldr	r3, [pc, #52]	; (20770 <hif_chip_wake+0x6c>)
   2073a:	4798      	blx	r3
   2073c:	0003      	movs	r3, r0
   2073e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20740:	1dfb      	adds	r3, r7, #7
   20742:	781b      	ldrb	r3, [r3, #0]
   20744:	b25b      	sxtb	r3, r3
   20746:	2b00      	cmp	r3, #0
   20748:	d107      	bne.n	2075a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2074a:	4b08      	ldr	r3, [pc, #32]	; (2076c <hif_chip_wake+0x68>)
   2074c:	785b      	ldrb	r3, [r3, #1]
   2074e:	b2db      	uxtb	r3, r3
   20750:	3301      	adds	r3, #1
   20752:	b2da      	uxtb	r2, r3
   20754:	4b05      	ldr	r3, [pc, #20]	; (2076c <hif_chip_wake+0x68>)
   20756:	705a      	strb	r2, [r3, #1]
   20758:	e000      	b.n	2075c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2075a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   2075c:	1dfb      	adds	r3, r7, #7
   2075e:	781b      	ldrb	r3, [r3, #0]
   20760:	b25b      	sxtb	r3, r3
}
   20762:	0018      	movs	r0, r3
   20764:	46bd      	mov	sp, r7
   20766:	b003      	add	sp, #12
   20768:	bd90      	pop	{r4, r7, pc}
   2076a:	46c0      	nop			; (mov r8, r8)
   2076c:	2000598c 	.word	0x2000598c
   20770:	0002213d 	.word	0x0002213d

00020774 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   20774:	b580      	push	{r7, lr}
   20776:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   20778:	4b07      	ldr	r3, [pc, #28]	; (20798 <hif_chip_sleep_sc+0x24>)
   2077a:	785b      	ldrb	r3, [r3, #1]
   2077c:	b2db      	uxtb	r3, r3
   2077e:	2b00      	cmp	r3, #0
   20780:	d006      	beq.n	20790 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   20782:	4b05      	ldr	r3, [pc, #20]	; (20798 <hif_chip_sleep_sc+0x24>)
   20784:	785b      	ldrb	r3, [r3, #1]
   20786:	b2db      	uxtb	r3, r3
   20788:	3b01      	subs	r3, #1
   2078a:	b2da      	uxtb	r2, r3
   2078c:	4b02      	ldr	r3, [pc, #8]	; (20798 <hif_chip_sleep_sc+0x24>)
   2078e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   20790:	2300      	movs	r3, #0
}
   20792:	0018      	movs	r0, r3
   20794:	46bd      	mov	sp, r7
   20796:	bd80      	pop	{r7, pc}
   20798:	2000598c 	.word	0x2000598c

0002079c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   2079c:	b590      	push	{r4, r7, lr}
   2079e:	b083      	sub	sp, #12
   207a0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   207a2:	1dfb      	adds	r3, r7, #7
   207a4:	2200      	movs	r2, #0
   207a6:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   207a8:	4b10      	ldr	r3, [pc, #64]	; (207ec <hif_chip_sleep+0x50>)
   207aa:	785b      	ldrb	r3, [r3, #1]
   207ac:	b2db      	uxtb	r3, r3
   207ae:	2b00      	cmp	r3, #0
   207b0:	d006      	beq.n	207c0 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   207b2:	4b0e      	ldr	r3, [pc, #56]	; (207ec <hif_chip_sleep+0x50>)
   207b4:	785b      	ldrb	r3, [r3, #1]
   207b6:	b2db      	uxtb	r3, r3
   207b8:	3b01      	subs	r3, #1
   207ba:	b2da      	uxtb	r2, r3
   207bc:	4b0b      	ldr	r3, [pc, #44]	; (207ec <hif_chip_sleep+0x50>)
   207be:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   207c0:	4b0a      	ldr	r3, [pc, #40]	; (207ec <hif_chip_sleep+0x50>)
   207c2:	785b      	ldrb	r3, [r3, #1]
   207c4:	b2db      	uxtb	r3, r3
   207c6:	2b00      	cmp	r3, #0
   207c8:	d109      	bne.n	207de <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   207ca:	4b08      	ldr	r3, [pc, #32]	; (207ec <hif_chip_sleep+0x50>)
   207cc:	781b      	ldrb	r3, [r3, #0]
   207ce:	b2db      	uxtb	r3, r3
   207d0:	2b00      	cmp	r3, #0
   207d2:	d004      	beq.n	207de <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   207d4:	1dfc      	adds	r4, r7, #7
   207d6:	4b06      	ldr	r3, [pc, #24]	; (207f0 <hif_chip_sleep+0x54>)
   207d8:	4798      	blx	r3
   207da:	0003      	movs	r3, r0
   207dc:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   207de:	1dfb      	adds	r3, r7, #7
   207e0:	781b      	ldrb	r3, [r3, #0]
   207e2:	b25b      	sxtb	r3, r3
}
   207e4:	0018      	movs	r0, r3
   207e6:	46bd      	mov	sp, r7
   207e8:	b003      	add	sp, #12
   207ea:	bd90      	pop	{r4, r7, pc}
   207ec:	2000598c 	.word	0x2000598c
   207f0:	00022065 	.word	0x00022065

000207f4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   207f4:	b580      	push	{r7, lr}
   207f6:	b082      	sub	sp, #8
   207f8:	af00      	add	r7, sp, #0
   207fa:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   207fc:	4b09      	ldr	r3, [pc, #36]	; (20824 <hif_init+0x30>)
   207fe:	222c      	movs	r2, #44	; 0x2c
   20800:	2100      	movs	r1, #0
   20802:	0018      	movs	r0, r3
   20804:	4b08      	ldr	r3, [pc, #32]	; (20828 <hif_init+0x34>)
   20806:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20808:	4b08      	ldr	r3, [pc, #32]	; (2082c <hif_init+0x38>)
   2080a:	0018      	movs	r0, r3
   2080c:	4b08      	ldr	r3, [pc, #32]	; (20830 <hif_init+0x3c>)
   2080e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20810:	4b08      	ldr	r3, [pc, #32]	; (20834 <hif_init+0x40>)
   20812:	0019      	movs	r1, r3
   20814:	2003      	movs	r0, #3
   20816:	4b08      	ldr	r3, [pc, #32]	; (20838 <hif_init+0x44>)
   20818:	4798      	blx	r3
	return M2M_SUCCESS;
   2081a:	2300      	movs	r3, #0
}
   2081c:	0018      	movs	r0, r3
   2081e:	46bd      	mov	sp, r7
   20820:	b002      	add	sp, #8
   20822:	bd80      	pop	{r7, pc}
   20824:	2000598c 	.word	0x2000598c
   20828:	000205dd 	.word	0x000205dd
   2082c:	00020659 	.word	0x00020659
   20830:	0001fd19 	.word	0x0001fd19
   20834:	000206e9 	.word	0x000206e9
   20838:	000212d9 	.word	0x000212d9

0002083c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   2083c:	b590      	push	{r4, r7, lr}
   2083e:	b089      	sub	sp, #36	; 0x24
   20840:	af00      	add	r7, sp, #0
   20842:	0004      	movs	r4, r0
   20844:	0008      	movs	r0, r1
   20846:	603a      	str	r2, [r7, #0]
   20848:	0019      	movs	r1, r3
   2084a:	1dfb      	adds	r3, r7, #7
   2084c:	1c22      	adds	r2, r4, #0
   2084e:	701a      	strb	r2, [r3, #0]
   20850:	1dbb      	adds	r3, r7, #6
   20852:	1c02      	adds	r2, r0, #0
   20854:	701a      	strb	r2, [r3, #0]
   20856:	1d3b      	adds	r3, r7, #4
   20858:	1c0a      	adds	r2, r1, #0
   2085a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   2085c:	231f      	movs	r3, #31
   2085e:	18fb      	adds	r3, r7, r3
   20860:	22ff      	movs	r2, #255	; 0xff
   20862:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20864:	1dbb      	adds	r3, r7, #6
   20866:	781b      	ldrb	r3, [r3, #0]
   20868:	227f      	movs	r2, #127	; 0x7f
   2086a:	4013      	ands	r3, r2
   2086c:	b2da      	uxtb	r2, r3
   2086e:	2318      	movs	r3, #24
   20870:	18fb      	adds	r3, r7, r3
   20872:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20874:	2318      	movs	r3, #24
   20876:	18fb      	adds	r3, r7, r3
   20878:	1dfa      	adds	r2, r7, #7
   2087a:	7812      	ldrb	r2, [r2, #0]
   2087c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   2087e:	2318      	movs	r3, #24
   20880:	18fb      	adds	r3, r7, r3
   20882:	2208      	movs	r2, #8
   20884:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20888:	2b00      	cmp	r3, #0
   2088a:	d011      	beq.n	208b0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   2088c:	2318      	movs	r3, #24
   2088e:	18fb      	adds	r3, r7, r3
   20890:	885b      	ldrh	r3, [r3, #2]
   20892:	b29a      	uxth	r2, r3
   20894:	2338      	movs	r3, #56	; 0x38
   20896:	18f9      	adds	r1, r7, r3
   20898:	2334      	movs	r3, #52	; 0x34
   2089a:	18fb      	adds	r3, r7, r3
   2089c:	8809      	ldrh	r1, [r1, #0]
   2089e:	881b      	ldrh	r3, [r3, #0]
   208a0:	18cb      	adds	r3, r1, r3
   208a2:	b29b      	uxth	r3, r3
   208a4:	18d3      	adds	r3, r2, r3
   208a6:	b29a      	uxth	r2, r3
   208a8:	2318      	movs	r3, #24
   208aa:	18fb      	adds	r3, r7, r3
   208ac:	805a      	strh	r2, [r3, #2]
   208ae:	e00a      	b.n	208c6 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   208b0:	2318      	movs	r3, #24
   208b2:	18fb      	adds	r3, r7, r3
   208b4:	885b      	ldrh	r3, [r3, #2]
   208b6:	b29a      	uxth	r2, r3
   208b8:	1d3b      	adds	r3, r7, #4
   208ba:	881b      	ldrh	r3, [r3, #0]
   208bc:	18d3      	adds	r3, r2, r3
   208be:	b29a      	uxth	r2, r3
   208c0:	2318      	movs	r3, #24
   208c2:	18fb      	adds	r3, r7, r3
   208c4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   208c6:	231f      	movs	r3, #31
   208c8:	18fc      	adds	r4, r7, r3
   208ca:	4bb2      	ldr	r3, [pc, #712]	; (20b94 <hif_send+0x358>)
   208cc:	4798      	blx	r3
   208ce:	0003      	movs	r3, r0
   208d0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   208d2:	231f      	movs	r3, #31
   208d4:	18fb      	adds	r3, r7, r3
   208d6:	781b      	ldrb	r3, [r3, #0]
   208d8:	b25b      	sxtb	r3, r3
   208da:	2b00      	cmp	r3, #0
   208dc:	d000      	beq.n	208e0 <hif_send+0xa4>
   208de:	e129      	b.n	20b34 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   208e0:	2300      	movs	r3, #0
   208e2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   208e4:	230e      	movs	r3, #14
   208e6:	18fb      	adds	r3, r7, r3
   208e8:	2200      	movs	r2, #0
   208ea:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   208ec:	2300      	movs	r3, #0
   208ee:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   208f0:	1dfb      	adds	r3, r7, #7
   208f2:	781a      	ldrb	r2, [r3, #0]
   208f4:	697b      	ldr	r3, [r7, #20]
   208f6:	4313      	orrs	r3, r2
   208f8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   208fa:	1dbb      	adds	r3, r7, #6
   208fc:	781b      	ldrb	r3, [r3, #0]
   208fe:	021a      	lsls	r2, r3, #8
   20900:	697b      	ldr	r3, [r7, #20]
   20902:	4313      	orrs	r3, r2
   20904:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20906:	2318      	movs	r3, #24
   20908:	18fb      	adds	r3, r7, r3
   2090a:	885b      	ldrh	r3, [r3, #2]
   2090c:	b29b      	uxth	r3, r3
   2090e:	041a      	lsls	r2, r3, #16
   20910:	697b      	ldr	r3, [r7, #20]
   20912:	4313      	orrs	r3, r2
   20914:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20916:	697b      	ldr	r3, [r7, #20]
   20918:	221f      	movs	r2, #31
   2091a:	18bc      	adds	r4, r7, r2
   2091c:	4a9e      	ldr	r2, [pc, #632]	; (20b98 <hif_send+0x35c>)
   2091e:	0019      	movs	r1, r3
   20920:	0010      	movs	r0, r2
   20922:	4b9e      	ldr	r3, [pc, #632]	; (20b9c <hif_send+0x360>)
   20924:	4798      	blx	r3
   20926:	0003      	movs	r3, r0
   20928:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2092a:	231f      	movs	r3, #31
   2092c:	18fb      	adds	r3, r7, r3
   2092e:	781b      	ldrb	r3, [r3, #0]
   20930:	b25b      	sxtb	r3, r3
   20932:	2b00      	cmp	r3, #0
   20934:	d000      	beq.n	20938 <hif_send+0xfc>
   20936:	e119      	b.n	20b6c <hif_send+0x330>

		reg = 0UL;
   20938:	2300      	movs	r3, #0
   2093a:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   2093c:	697b      	ldr	r3, [r7, #20]
   2093e:	2202      	movs	r2, #2
   20940:	4313      	orrs	r3, r2
   20942:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20944:	697b      	ldr	r3, [r7, #20]
   20946:	221f      	movs	r2, #31
   20948:	18bc      	adds	r4, r7, r2
   2094a:	4a95      	ldr	r2, [pc, #596]	; (20ba0 <hif_send+0x364>)
   2094c:	0019      	movs	r1, r3
   2094e:	0010      	movs	r0, r2
   20950:	4b92      	ldr	r3, [pc, #584]	; (20b9c <hif_send+0x360>)
   20952:	4798      	blx	r3
   20954:	0003      	movs	r3, r0
   20956:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20958:	231f      	movs	r3, #31
   2095a:	18fb      	adds	r3, r7, r3
   2095c:	781b      	ldrb	r3, [r3, #0]
   2095e:	b25b      	sxtb	r3, r3
   20960:	2b00      	cmp	r3, #0
   20962:	d000      	beq.n	20966 <hif_send+0x12a>
   20964:	e104      	b.n	20b70 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   20966:	2300      	movs	r3, #0
   20968:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2096a:	230e      	movs	r3, #14
   2096c:	18fb      	adds	r3, r7, r3
   2096e:	2200      	movs	r2, #0
   20970:	801a      	strh	r2, [r3, #0]
   20972:	e050      	b.n	20a16 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20974:	231f      	movs	r3, #31
   20976:	18fc      	adds	r4, r7, r3
   20978:	2314      	movs	r3, #20
   2097a:	18fb      	adds	r3, r7, r3
   2097c:	4a88      	ldr	r2, [pc, #544]	; (20ba0 <hif_send+0x364>)
   2097e:	0019      	movs	r1, r3
   20980:	0010      	movs	r0, r2
   20982:	4b88      	ldr	r3, [pc, #544]	; (20ba4 <hif_send+0x368>)
   20984:	4798      	blx	r3
   20986:	0003      	movs	r3, r0
   20988:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2098a:	231f      	movs	r3, #31
   2098c:	18fb      	adds	r3, r7, r3
   2098e:	781b      	ldrb	r3, [r3, #0]
   20990:	b25b      	sxtb	r3, r3
   20992:	2b00      	cmp	r3, #0
   20994:	d147      	bne.n	20a26 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   20996:	230e      	movs	r3, #14
   20998:	18fb      	adds	r3, r7, r3
   2099a:	881b      	ldrh	r3, [r3, #0]
   2099c:	b29a      	uxth	r2, r3
   2099e:	23f4      	movs	r3, #244	; 0xf4
   209a0:	33ff      	adds	r3, #255	; 0xff
   209a2:	429a      	cmp	r2, r3
   209a4:	d916      	bls.n	209d4 <hif_send+0x198>
				if(cnt < 501) {
   209a6:	230e      	movs	r3, #14
   209a8:	18fb      	adds	r3, r7, r3
   209aa:	881b      	ldrh	r3, [r3, #0]
   209ac:	b29a      	uxth	r2, r3
   209ae:	23fa      	movs	r3, #250	; 0xfa
   209b0:	005b      	lsls	r3, r3, #1
   209b2:	429a      	cmp	r2, r3
   209b4:	d80b      	bhi.n	209ce <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   209b6:	4b7c      	ldr	r3, [pc, #496]	; (20ba8 <hif_send+0x36c>)
   209b8:	0018      	movs	r0, r3
   209ba:	4b7c      	ldr	r3, [pc, #496]	; (20bac <hif_send+0x370>)
   209bc:	4798      	blx	r3
   209be:	4b7c      	ldr	r3, [pc, #496]	; (20bb0 <hif_send+0x374>)
   209c0:	0018      	movs	r0, r3
   209c2:	4b7a      	ldr	r3, [pc, #488]	; (20bac <hif_send+0x370>)
   209c4:	4798      	blx	r3
   209c6:	4b7b      	ldr	r3, [pc, #492]	; (20bb4 <hif_send+0x378>)
   209c8:	0018      	movs	r0, r3
   209ca:	4b78      	ldr	r3, [pc, #480]	; (20bac <hif_send+0x370>)
   209cc:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   209ce:	2001      	movs	r0, #1
   209d0:	4b79      	ldr	r3, [pc, #484]	; (20bb8 <hif_send+0x37c>)
   209d2:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   209d4:	697b      	ldr	r3, [r7, #20]
   209d6:	2202      	movs	r2, #2
   209d8:	4013      	ands	r3, r2
   209da:	d113      	bne.n	20a04 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   209dc:	231f      	movs	r3, #31
   209de:	18fc      	adds	r4, r7, r3
   209e0:	2310      	movs	r3, #16
   209e2:	18fb      	adds	r3, r7, r3
   209e4:	4a75      	ldr	r2, [pc, #468]	; (20bbc <hif_send+0x380>)
   209e6:	0019      	movs	r1, r3
   209e8:	0010      	movs	r0, r2
   209ea:	4b6e      	ldr	r3, [pc, #440]	; (20ba4 <hif_send+0x368>)
   209ec:	4798      	blx	r3
   209ee:	0003      	movs	r3, r0
   209f0:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   209f2:	231f      	movs	r3, #31
   209f4:	18fb      	adds	r3, r7, r3
   209f6:	781b      	ldrb	r3, [r3, #0]
   209f8:	b25b      	sxtb	r3, r3
   209fa:	2b00      	cmp	r3, #0
   209fc:	d015      	beq.n	20a2a <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   209fe:	2300      	movs	r3, #0
   20a00:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20a02:	e0bc      	b.n	20b7e <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20a04:	230e      	movs	r3, #14
   20a06:	18fb      	adds	r3, r7, r3
   20a08:	881b      	ldrh	r3, [r3, #0]
   20a0a:	b29b      	uxth	r3, r3
   20a0c:	3301      	adds	r3, #1
   20a0e:	b29a      	uxth	r2, r3
   20a10:	230e      	movs	r3, #14
   20a12:	18fb      	adds	r3, r7, r3
   20a14:	801a      	strh	r2, [r3, #0]
   20a16:	230e      	movs	r3, #14
   20a18:	18fb      	adds	r3, r7, r3
   20a1a:	881b      	ldrh	r3, [r3, #0]
   20a1c:	b29b      	uxth	r3, r3
   20a1e:	4a68      	ldr	r2, [pc, #416]	; (20bc0 <hif_send+0x384>)
   20a20:	4293      	cmp	r3, r2
   20a22:	d9a7      	bls.n	20974 <hif_send+0x138>
   20a24:	e002      	b.n	20a2c <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20a26:	46c0      	nop			; (mov r8, r8)
   20a28:	e000      	b.n	20a2c <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20a2a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20a2c:	693b      	ldr	r3, [r7, #16]
   20a2e:	2b00      	cmp	r3, #0
   20a30:	d100      	bne.n	20a34 <hif_send+0x1f8>
   20a32:	e074      	b.n	20b1e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20a34:	693b      	ldr	r3, [r7, #16]
   20a36:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20a38:	2318      	movs	r3, #24
   20a3a:	18fb      	adds	r3, r7, r3
   20a3c:	885b      	ldrh	r3, [r3, #2]
   20a3e:	b29a      	uxth	r2, r3
   20a40:	2318      	movs	r3, #24
   20a42:	18fb      	adds	r3, r7, r3
   20a44:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20a46:	68bb      	ldr	r3, [r7, #8]
   20a48:	221f      	movs	r2, #31
   20a4a:	18bc      	adds	r4, r7, r2
   20a4c:	2218      	movs	r2, #24
   20a4e:	18b9      	adds	r1, r7, r2
   20a50:	2208      	movs	r2, #8
   20a52:	0018      	movs	r0, r3
   20a54:	4b5b      	ldr	r3, [pc, #364]	; (20bc4 <hif_send+0x388>)
   20a56:	4798      	blx	r3
   20a58:	0003      	movs	r3, r0
   20a5a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20a5c:	231f      	movs	r3, #31
   20a5e:	18fb      	adds	r3, r7, r3
   20a60:	781b      	ldrb	r3, [r3, #0]
   20a62:	b25b      	sxtb	r3, r3
   20a64:	2b00      	cmp	r3, #0
   20a66:	d000      	beq.n	20a6a <hif_send+0x22e>
   20a68:	e084      	b.n	20b74 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20a6a:	68bb      	ldr	r3, [r7, #8]
   20a6c:	3308      	adds	r3, #8
   20a6e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20a70:	683b      	ldr	r3, [r7, #0]
   20a72:	2b00      	cmp	r3, #0
   20a74:	d016      	beq.n	20aa4 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20a76:	68b8      	ldr	r0, [r7, #8]
   20a78:	1d3b      	adds	r3, r7, #4
   20a7a:	881a      	ldrh	r2, [r3, #0]
   20a7c:	231f      	movs	r3, #31
   20a7e:	18fc      	adds	r4, r7, r3
   20a80:	683b      	ldr	r3, [r7, #0]
   20a82:	0019      	movs	r1, r3
   20a84:	4b4f      	ldr	r3, [pc, #316]	; (20bc4 <hif_send+0x388>)
   20a86:	4798      	blx	r3
   20a88:	0003      	movs	r3, r0
   20a8a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20a8c:	231f      	movs	r3, #31
   20a8e:	18fb      	adds	r3, r7, r3
   20a90:	781b      	ldrb	r3, [r3, #0]
   20a92:	b25b      	sxtb	r3, r3
   20a94:	2b00      	cmp	r3, #0
   20a96:	d000      	beq.n	20a9a <hif_send+0x25e>
   20a98:	e06e      	b.n	20b78 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   20a9a:	1d3b      	adds	r3, r7, #4
   20a9c:	881a      	ldrh	r2, [r3, #0]
   20a9e:	68bb      	ldr	r3, [r7, #8]
   20aa0:	18d3      	adds	r3, r2, r3
   20aa2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20aa6:	2b00      	cmp	r3, #0
   20aa8:	d021      	beq.n	20aee <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   20aaa:	2338      	movs	r3, #56	; 0x38
   20aac:	18fb      	adds	r3, r7, r3
   20aae:	881a      	ldrh	r2, [r3, #0]
   20ab0:	1d3b      	adds	r3, r7, #4
   20ab2:	881b      	ldrh	r3, [r3, #0]
   20ab4:	1ad3      	subs	r3, r2, r3
   20ab6:	001a      	movs	r2, r3
   20ab8:	68bb      	ldr	r3, [r7, #8]
   20aba:	18d3      	adds	r3, r2, r3
   20abc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   20abe:	68b8      	ldr	r0, [r7, #8]
   20ac0:	2334      	movs	r3, #52	; 0x34
   20ac2:	18fb      	adds	r3, r7, r3
   20ac4:	881a      	ldrh	r2, [r3, #0]
   20ac6:	231f      	movs	r3, #31
   20ac8:	18fc      	adds	r4, r7, r3
   20aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20acc:	0019      	movs	r1, r3
   20ace:	4b3d      	ldr	r3, [pc, #244]	; (20bc4 <hif_send+0x388>)
   20ad0:	4798      	blx	r3
   20ad2:	0003      	movs	r3, r0
   20ad4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20ad6:	231f      	movs	r3, #31
   20ad8:	18fb      	adds	r3, r7, r3
   20ada:	781b      	ldrb	r3, [r3, #0]
   20adc:	b25b      	sxtb	r3, r3
   20ade:	2b00      	cmp	r3, #0
   20ae0:	d14c      	bne.n	20b7c <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20ae2:	2334      	movs	r3, #52	; 0x34
   20ae4:	18fb      	adds	r3, r7, r3
   20ae6:	881a      	ldrh	r2, [r3, #0]
   20ae8:	68bb      	ldr	r3, [r7, #8]
   20aea:	18d3      	adds	r3, r2, r3
   20aec:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   20aee:	693b      	ldr	r3, [r7, #16]
   20af0:	009b      	lsls	r3, r3, #2
   20af2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20af4:	697b      	ldr	r3, [r7, #20]
   20af6:	2202      	movs	r2, #2
   20af8:	4313      	orrs	r3, r2
   20afa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   20afc:	697b      	ldr	r3, [r7, #20]
   20afe:	221f      	movs	r2, #31
   20b00:	18bc      	adds	r4, r7, r2
   20b02:	4a31      	ldr	r2, [pc, #196]	; (20bc8 <hif_send+0x38c>)
   20b04:	0019      	movs	r1, r3
   20b06:	0010      	movs	r0, r2
   20b08:	4b24      	ldr	r3, [pc, #144]	; (20b9c <hif_send+0x360>)
   20b0a:	4798      	blx	r3
   20b0c:	0003      	movs	r3, r0
   20b0e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20b10:	231f      	movs	r3, #31
   20b12:	18fb      	adds	r3, r7, r3
   20b14:	781b      	ldrb	r3, [r3, #0]
   20b16:	b25b      	sxtb	r3, r3
   20b18:	2b00      	cmp	r3, #0
   20b1a:	d01c      	beq.n	20b56 <hif_send+0x31a>
   20b1c:	e02f      	b.n	20b7e <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20b1e:	231f      	movs	r3, #31
   20b20:	18fc      	adds	r4, r7, r3
   20b22:	4b2a      	ldr	r3, [pc, #168]	; (20bcc <hif_send+0x390>)
   20b24:	4798      	blx	r3
   20b26:	0003      	movs	r3, r0
   20b28:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   20b2a:	231f      	movs	r3, #31
   20b2c:	18fb      	adds	r3, r7, r3
   20b2e:	22fd      	movs	r2, #253	; 0xfd
   20b30:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20b32:	e026      	b.n	20b82 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20b34:	2398      	movs	r3, #152	; 0x98
   20b36:	33ff      	adds	r3, #255	; 0xff
   20b38:	001a      	movs	r2, r3
   20b3a:	4925      	ldr	r1, [pc, #148]	; (20bd0 <hif_send+0x394>)
   20b3c:	4b25      	ldr	r3, [pc, #148]	; (20bd4 <hif_send+0x398>)
   20b3e:	0018      	movs	r0, r3
   20b40:	4b1a      	ldr	r3, [pc, #104]	; (20bac <hif_send+0x370>)
   20b42:	4798      	blx	r3
   20b44:	4b24      	ldr	r3, [pc, #144]	; (20bd8 <hif_send+0x39c>)
   20b46:	0018      	movs	r0, r3
   20b48:	4b18      	ldr	r3, [pc, #96]	; (20bac <hif_send+0x370>)
   20b4a:	4798      	blx	r3
   20b4c:	4b19      	ldr	r3, [pc, #100]	; (20bb4 <hif_send+0x378>)
   20b4e:	0018      	movs	r0, r3
   20b50:	4b16      	ldr	r3, [pc, #88]	; (20bac <hif_send+0x370>)
   20b52:	4798      	blx	r3
		goto ERR2;
   20b54:	e015      	b.n	20b82 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20b56:	231f      	movs	r3, #31
   20b58:	18fc      	adds	r4, r7, r3
   20b5a:	4b1c      	ldr	r3, [pc, #112]	; (20bcc <hif_send+0x390>)
   20b5c:	4798      	blx	r3
   20b5e:	0003      	movs	r3, r0
   20b60:	7023      	strb	r3, [r4, #0]
	return ret;
   20b62:	231f      	movs	r3, #31
   20b64:	18fb      	adds	r3, r7, r3
   20b66:	781b      	ldrb	r3, [r3, #0]
   20b68:	b25b      	sxtb	r3, r3
   20b6a:	e00e      	b.n	20b8a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20b6c:	46c0      	nop			; (mov r8, r8)
   20b6e:	e006      	b.n	20b7e <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20b70:	46c0      	nop			; (mov r8, r8)
   20b72:	e004      	b.n	20b7e <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20b74:	46c0      	nop			; (mov r8, r8)
   20b76:	e002      	b.n	20b7e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20b78:	46c0      	nop			; (mov r8, r8)
   20b7a:	e000      	b.n	20b7e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20b7c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20b7e:	4b17      	ldr	r3, [pc, #92]	; (20bdc <hif_send+0x3a0>)
   20b80:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20b82:	231f      	movs	r3, #31
   20b84:	18fb      	adds	r3, r7, r3
   20b86:	781b      	ldrb	r3, [r3, #0]
   20b88:	b25b      	sxtb	r3, r3
}
   20b8a:	0018      	movs	r0, r3
   20b8c:	46bd      	mov	sp, r7
   20b8e:	b009      	add	sp, #36	; 0x24
   20b90:	bd90      	pop	{r4, r7, pc}
   20b92:	46c0      	nop			; (mov r8, r8)
   20b94:	00020705 	.word	0x00020705
   20b98:	0000108c 	.word	0x0000108c
   20b9c:	00022691 	.word	0x00022691
   20ba0:	00001078 	.word	0x00001078
   20ba4:	0002266d 	.word	0x0002266d
   20ba8:	000377e4 	.word	0x000377e4
   20bac:	0001d8a9 	.word	0x0001d8a9
   20bb0:	000377f0 	.word	0x000377f0
   20bb4:	00037804 	.word	0x00037804
   20bb8:	0001fcfd 	.word	0x0001fcfd
   20bbc:	00150400 	.word	0x00150400
   20bc0:	000003e7 	.word	0x000003e7
   20bc4:	000227d9 	.word	0x000227d9
   20bc8:	0000106c 	.word	0x0000106c
   20bcc:	0002079d 	.word	0x0002079d
   20bd0:	00037b0c 	.word	0x00037b0c
   20bd4:	00037808 	.word	0x00037808
   20bd8:	0003781c 	.word	0x0003781c
   20bdc:	00020775 	.word	0x00020775

00020be0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20be0:	b590      	push	{r4, r7, lr}
   20be2:	b087      	sub	sp, #28
   20be4:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   20be6:	230f      	movs	r3, #15
   20be8:	18fb      	adds	r3, r7, r3
   20bea:	2200      	movs	r2, #0
   20bec:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20bee:	230f      	movs	r3, #15
   20bf0:	18fc      	adds	r4, r7, r3
   20bf2:	2308      	movs	r3, #8
   20bf4:	18fb      	adds	r3, r7, r3
   20bf6:	4adc      	ldr	r2, [pc, #880]	; (20f68 <hif_isr+0x388>)
   20bf8:	0019      	movs	r1, r3
   20bfa:	0010      	movs	r0, r2
   20bfc:	4bdb      	ldr	r3, [pc, #876]	; (20f6c <hif_isr+0x38c>)
   20bfe:	4798      	blx	r3
   20c00:	0003      	movs	r3, r0
   20c02:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20c04:	230f      	movs	r3, #15
   20c06:	18fb      	adds	r3, r7, r3
   20c08:	781b      	ldrb	r3, [r3, #0]
   20c0a:	b25b      	sxtb	r3, r3
   20c0c:	2b00      	cmp	r3, #0
   20c0e:	d000      	beq.n	20c12 <hif_isr+0x32>
   20c10:	e21e      	b.n	21050 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20c12:	68bb      	ldr	r3, [r7, #8]
   20c14:	2201      	movs	r2, #1
   20c16:	4013      	ands	r3, r2
   20c18:	d100      	bne.n	20c1c <hif_isr+0x3c>
   20c1a:	e204      	b.n	21026 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20c1c:	2000      	movs	r0, #0
   20c1e:	4bd4      	ldr	r3, [pc, #848]	; (20f70 <hif_isr+0x390>)
   20c20:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20c22:	68bb      	ldr	r3, [r7, #8]
   20c24:	2201      	movs	r2, #1
   20c26:	4393      	bics	r3, r2
   20c28:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20c2a:	68bb      	ldr	r3, [r7, #8]
   20c2c:	220f      	movs	r2, #15
   20c2e:	18bc      	adds	r4, r7, r2
   20c30:	4acd      	ldr	r2, [pc, #820]	; (20f68 <hif_isr+0x388>)
   20c32:	0019      	movs	r1, r3
   20c34:	0010      	movs	r0, r2
   20c36:	4bcf      	ldr	r3, [pc, #828]	; (20f74 <hif_isr+0x394>)
   20c38:	4798      	blx	r3
   20c3a:	0003      	movs	r3, r0
   20c3c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20c3e:	230f      	movs	r3, #15
   20c40:	18fb      	adds	r3, r7, r3
   20c42:	781b      	ldrb	r3, [r3, #0]
   20c44:	b25b      	sxtb	r3, r3
   20c46:	2b00      	cmp	r3, #0
   20c48:	d000      	beq.n	20c4c <hif_isr+0x6c>
   20c4a:	e210      	b.n	2106e <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20c4c:	4bca      	ldr	r3, [pc, #808]	; (20f78 <hif_isr+0x398>)
   20c4e:	2201      	movs	r2, #1
   20c50:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20c52:	68bb      	ldr	r3, [r7, #8]
   20c54:	089b      	lsrs	r3, r3, #2
   20c56:	b29a      	uxth	r2, r3
   20c58:	230c      	movs	r3, #12
   20c5a:	18fb      	adds	r3, r7, r3
   20c5c:	0512      	lsls	r2, r2, #20
   20c5e:	0d12      	lsrs	r2, r2, #20
   20c60:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20c62:	230c      	movs	r3, #12
   20c64:	18fb      	adds	r3, r7, r3
   20c66:	881b      	ldrh	r3, [r3, #0]
   20c68:	2b00      	cmp	r3, #0
   20c6a:	d100      	bne.n	20c6e <hif_isr+0x8e>
   20c6c:	e1c8      	b.n	21000 <hif_isr+0x420>
				uint32 address = 0;
   20c6e:	2300      	movs	r3, #0
   20c70:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20c72:	230f      	movs	r3, #15
   20c74:	18fc      	adds	r4, r7, r3
   20c76:	003b      	movs	r3, r7
   20c78:	4ac0      	ldr	r2, [pc, #768]	; (20f7c <hif_isr+0x39c>)
   20c7a:	0019      	movs	r1, r3
   20c7c:	0010      	movs	r0, r2
   20c7e:	4bbb      	ldr	r3, [pc, #748]	; (20f6c <hif_isr+0x38c>)
   20c80:	4798      	blx	r3
   20c82:	0003      	movs	r3, r0
   20c84:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   20c86:	230f      	movs	r3, #15
   20c88:	18fb      	adds	r3, r7, r3
   20c8a:	781b      	ldrb	r3, [r3, #0]
   20c8c:	b25b      	sxtb	r3, r3
   20c8e:	2b00      	cmp	r3, #0
   20c90:	d012      	beq.n	20cb8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20c92:	23e4      	movs	r3, #228	; 0xe4
   20c94:	005a      	lsls	r2, r3, #1
   20c96:	49ba      	ldr	r1, [pc, #744]	; (20f80 <hif_isr+0x3a0>)
   20c98:	4bba      	ldr	r3, [pc, #744]	; (20f84 <hif_isr+0x3a4>)
   20c9a:	0018      	movs	r0, r3
   20c9c:	4bba      	ldr	r3, [pc, #744]	; (20f88 <hif_isr+0x3a8>)
   20c9e:	4798      	blx	r3
   20ca0:	4bba      	ldr	r3, [pc, #744]	; (20f8c <hif_isr+0x3ac>)
   20ca2:	0018      	movs	r0, r3
   20ca4:	4bb8      	ldr	r3, [pc, #736]	; (20f88 <hif_isr+0x3a8>)
   20ca6:	4798      	blx	r3
   20ca8:	4bb9      	ldr	r3, [pc, #740]	; (20f90 <hif_isr+0x3b0>)
   20caa:	0018      	movs	r0, r3
   20cac:	4bb6      	ldr	r3, [pc, #728]	; (20f88 <hif_isr+0x3a8>)
   20cae:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20cb0:	2001      	movs	r0, #1
   20cb2:	4baf      	ldr	r3, [pc, #700]	; (20f70 <hif_isr+0x390>)
   20cb4:	4798      	blx	r3
					goto ERR1;
   20cb6:	e1db      	b.n	21070 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   20cb8:	683a      	ldr	r2, [r7, #0]
   20cba:	4baf      	ldr	r3, [pc, #700]	; (20f78 <hif_isr+0x398>)
   20cbc:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   20cbe:	230c      	movs	r3, #12
   20cc0:	18fb      	adds	r3, r7, r3
   20cc2:	881a      	ldrh	r2, [r3, #0]
   20cc4:	4bac      	ldr	r3, [pc, #688]	; (20f78 <hif_isr+0x398>)
   20cc6:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   20cc8:	683b      	ldr	r3, [r7, #0]
   20cca:	220f      	movs	r2, #15
   20ccc:	18bc      	adds	r4, r7, r2
   20cce:	1d39      	adds	r1, r7, #4
   20cd0:	2204      	movs	r2, #4
   20cd2:	0018      	movs	r0, r3
   20cd4:	4baf      	ldr	r3, [pc, #700]	; (20f94 <hif_isr+0x3b4>)
   20cd6:	4798      	blx	r3
   20cd8:	0003      	movs	r3, r0
   20cda:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   20cdc:	1d3b      	adds	r3, r7, #4
   20cde:	885b      	ldrh	r3, [r3, #2]
   20ce0:	b29a      	uxth	r2, r3
   20ce2:	1d3b      	adds	r3, r7, #4
   20ce4:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   20ce6:	230f      	movs	r3, #15
   20ce8:	18fb      	adds	r3, r7, r3
   20cea:	781b      	ldrb	r3, [r3, #0]
   20cec:	b25b      	sxtb	r3, r3
   20cee:	2b00      	cmp	r3, #0
   20cf0:	d012      	beq.n	20d18 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20cf2:	23e9      	movs	r3, #233	; 0xe9
   20cf4:	005a      	lsls	r2, r3, #1
   20cf6:	49a2      	ldr	r1, [pc, #648]	; (20f80 <hif_isr+0x3a0>)
   20cf8:	4ba2      	ldr	r3, [pc, #648]	; (20f84 <hif_isr+0x3a4>)
   20cfa:	0018      	movs	r0, r3
   20cfc:	4ba2      	ldr	r3, [pc, #648]	; (20f88 <hif_isr+0x3a8>)
   20cfe:	4798      	blx	r3
   20d00:	4ba5      	ldr	r3, [pc, #660]	; (20f98 <hif_isr+0x3b8>)
   20d02:	0018      	movs	r0, r3
   20d04:	4ba0      	ldr	r3, [pc, #640]	; (20f88 <hif_isr+0x3a8>)
   20d06:	4798      	blx	r3
   20d08:	4ba1      	ldr	r3, [pc, #644]	; (20f90 <hif_isr+0x3b0>)
   20d0a:	0018      	movs	r0, r3
   20d0c:	4b9e      	ldr	r3, [pc, #632]	; (20f88 <hif_isr+0x3a8>)
   20d0e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20d10:	2001      	movs	r0, #1
   20d12:	4b97      	ldr	r3, [pc, #604]	; (20f70 <hif_isr+0x390>)
   20d14:	4798      	blx	r3
					goto ERR1;
   20d16:	e1ab      	b.n	21070 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   20d18:	1d3b      	adds	r3, r7, #4
   20d1a:	885b      	ldrh	r3, [r3, #2]
   20d1c:	b29b      	uxth	r3, r3
   20d1e:	220c      	movs	r2, #12
   20d20:	18ba      	adds	r2, r7, r2
   20d22:	8812      	ldrh	r2, [r2, #0]
   20d24:	429a      	cmp	r2, r3
   20d26:	d02f      	beq.n	20d88 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   20d28:	230c      	movs	r3, #12
   20d2a:	18fb      	adds	r3, r7, r3
   20d2c:	881b      	ldrh	r3, [r3, #0]
   20d2e:	1d3a      	adds	r2, r7, #4
   20d30:	8852      	ldrh	r2, [r2, #2]
   20d32:	b292      	uxth	r2, r2
   20d34:	1a9b      	subs	r3, r3, r2
   20d36:	2b04      	cmp	r3, #4
   20d38:	dd26      	ble.n	20d88 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   20d3a:	23dc      	movs	r3, #220	; 0xdc
   20d3c:	33ff      	adds	r3, #255	; 0xff
   20d3e:	001a      	movs	r2, r3
   20d40:	498f      	ldr	r1, [pc, #572]	; (20f80 <hif_isr+0x3a0>)
   20d42:	4b90      	ldr	r3, [pc, #576]	; (20f84 <hif_isr+0x3a4>)
   20d44:	0018      	movs	r0, r3
   20d46:	4b90      	ldr	r3, [pc, #576]	; (20f88 <hif_isr+0x3a8>)
   20d48:	4798      	blx	r3
   20d4a:	230c      	movs	r3, #12
   20d4c:	18fb      	adds	r3, r7, r3
   20d4e:	8819      	ldrh	r1, [r3, #0]
   20d50:	1d3b      	adds	r3, r7, #4
   20d52:	885b      	ldrh	r3, [r3, #2]
   20d54:	b29b      	uxth	r3, r3
   20d56:	001a      	movs	r2, r3
   20d58:	1d3b      	adds	r3, r7, #4
   20d5a:	781b      	ldrb	r3, [r3, #0]
   20d5c:	b2db      	uxtb	r3, r3
   20d5e:	001c      	movs	r4, r3
   20d60:	1d3b      	adds	r3, r7, #4
   20d62:	785b      	ldrb	r3, [r3, #1]
   20d64:	b2db      	uxtb	r3, r3
   20d66:	488d      	ldr	r0, [pc, #564]	; (20f9c <hif_isr+0x3bc>)
   20d68:	9300      	str	r3, [sp, #0]
   20d6a:	0023      	movs	r3, r4
   20d6c:	4c86      	ldr	r4, [pc, #536]	; (20f88 <hif_isr+0x3a8>)
   20d6e:	47a0      	blx	r4
   20d70:	4b87      	ldr	r3, [pc, #540]	; (20f90 <hif_isr+0x3b0>)
   20d72:	0018      	movs	r0, r3
   20d74:	4b84      	ldr	r3, [pc, #528]	; (20f88 <hif_isr+0x3a8>)
   20d76:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   20d78:	2001      	movs	r0, #1
   20d7a:	4b7d      	ldr	r3, [pc, #500]	; (20f70 <hif_isr+0x390>)
   20d7c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   20d7e:	230f      	movs	r3, #15
   20d80:	18fb      	adds	r3, r7, r3
   20d82:	22fa      	movs	r2, #250	; 0xfa
   20d84:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   20d86:	e173      	b.n	21070 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   20d88:	1d3b      	adds	r3, r7, #4
   20d8a:	781b      	ldrb	r3, [r3, #0]
   20d8c:	b2db      	uxtb	r3, r3
   20d8e:	2b01      	cmp	r3, #1
   20d90:	d122      	bne.n	20dd8 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   20d92:	4b79      	ldr	r3, [pc, #484]	; (20f78 <hif_isr+0x398>)
   20d94:	691b      	ldr	r3, [r3, #16]
   20d96:	2b00      	cmp	r3, #0
   20d98:	d00d      	beq.n	20db6 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20d9a:	4b77      	ldr	r3, [pc, #476]	; (20f78 <hif_isr+0x398>)
   20d9c:	691b      	ldr	r3, [r3, #16]
   20d9e:	1d3a      	adds	r2, r7, #4
   20da0:	7852      	ldrb	r2, [r2, #1]
   20da2:	b2d0      	uxtb	r0, r2
   20da4:	1d3a      	adds	r2, r7, #4
   20da6:	8852      	ldrh	r2, [r2, #2]
   20da8:	b292      	uxth	r2, r2
   20daa:	3a08      	subs	r2, #8
   20dac:	b291      	uxth	r1, r2
   20dae:	683a      	ldr	r2, [r7, #0]
   20db0:	3208      	adds	r2, #8
   20db2:	4798      	blx	r3
   20db4:	e102      	b.n	20fbc <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   20db6:	23e8      	movs	r3, #232	; 0xe8
   20db8:	33ff      	adds	r3, #255	; 0xff
   20dba:	001a      	movs	r2, r3
   20dbc:	4970      	ldr	r1, [pc, #448]	; (20f80 <hif_isr+0x3a0>)
   20dbe:	4b71      	ldr	r3, [pc, #452]	; (20f84 <hif_isr+0x3a4>)
   20dc0:	0018      	movs	r0, r3
   20dc2:	4b71      	ldr	r3, [pc, #452]	; (20f88 <hif_isr+0x3a8>)
   20dc4:	4798      	blx	r3
   20dc6:	4b76      	ldr	r3, [pc, #472]	; (20fa0 <hif_isr+0x3c0>)
   20dc8:	0018      	movs	r0, r3
   20dca:	4b6f      	ldr	r3, [pc, #444]	; (20f88 <hif_isr+0x3a8>)
   20dcc:	4798      	blx	r3
   20dce:	4b70      	ldr	r3, [pc, #448]	; (20f90 <hif_isr+0x3b0>)
   20dd0:	0018      	movs	r0, r3
   20dd2:	4b6d      	ldr	r3, [pc, #436]	; (20f88 <hif_isr+0x3a8>)
   20dd4:	4798      	blx	r3
   20dd6:	e0f1      	b.n	20fbc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   20dd8:	1d3b      	adds	r3, r7, #4
   20dda:	781b      	ldrb	r3, [r3, #0]
   20ddc:	b2db      	uxtb	r3, r3
   20dde:	2b02      	cmp	r3, #2
   20de0:	d122      	bne.n	20e28 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   20de2:	4b65      	ldr	r3, [pc, #404]	; (20f78 <hif_isr+0x398>)
   20de4:	695b      	ldr	r3, [r3, #20]
   20de6:	2b00      	cmp	r3, #0
   20de8:	d00d      	beq.n	20e06 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20dea:	4b63      	ldr	r3, [pc, #396]	; (20f78 <hif_isr+0x398>)
   20dec:	695b      	ldr	r3, [r3, #20]
   20dee:	1d3a      	adds	r2, r7, #4
   20df0:	7852      	ldrb	r2, [r2, #1]
   20df2:	b2d0      	uxtb	r0, r2
   20df4:	1d3a      	adds	r2, r7, #4
   20df6:	8852      	ldrh	r2, [r2, #2]
   20df8:	b292      	uxth	r2, r2
   20dfa:	3a08      	subs	r2, #8
   20dfc:	b291      	uxth	r1, r2
   20dfe:	683a      	ldr	r2, [r7, #0]
   20e00:	3208      	adds	r2, #8
   20e02:	4798      	blx	r3
   20e04:	e0da      	b.n	20fbc <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   20e06:	23f0      	movs	r3, #240	; 0xf0
   20e08:	33ff      	adds	r3, #255	; 0xff
   20e0a:	001a      	movs	r2, r3
   20e0c:	495c      	ldr	r1, [pc, #368]	; (20f80 <hif_isr+0x3a0>)
   20e0e:	4b5d      	ldr	r3, [pc, #372]	; (20f84 <hif_isr+0x3a4>)
   20e10:	0018      	movs	r0, r3
   20e12:	4b5d      	ldr	r3, [pc, #372]	; (20f88 <hif_isr+0x3a8>)
   20e14:	4798      	blx	r3
   20e16:	4b63      	ldr	r3, [pc, #396]	; (20fa4 <hif_isr+0x3c4>)
   20e18:	0018      	movs	r0, r3
   20e1a:	4b5b      	ldr	r3, [pc, #364]	; (20f88 <hif_isr+0x3a8>)
   20e1c:	4798      	blx	r3
   20e1e:	4b5c      	ldr	r3, [pc, #368]	; (20f90 <hif_isr+0x3b0>)
   20e20:	0018      	movs	r0, r3
   20e22:	4b59      	ldr	r3, [pc, #356]	; (20f88 <hif_isr+0x3a8>)
   20e24:	4798      	blx	r3
   20e26:	e0c9      	b.n	20fbc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   20e28:	1d3b      	adds	r3, r7, #4
   20e2a:	781b      	ldrb	r3, [r3, #0]
   20e2c:	b2db      	uxtb	r3, r3
   20e2e:	2b04      	cmp	r3, #4
   20e30:	d122      	bne.n	20e78 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   20e32:	4b51      	ldr	r3, [pc, #324]	; (20f78 <hif_isr+0x398>)
   20e34:	699b      	ldr	r3, [r3, #24]
   20e36:	2b00      	cmp	r3, #0
   20e38:	d00d      	beq.n	20e56 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20e3a:	4b4f      	ldr	r3, [pc, #316]	; (20f78 <hif_isr+0x398>)
   20e3c:	699b      	ldr	r3, [r3, #24]
   20e3e:	1d3a      	adds	r2, r7, #4
   20e40:	7852      	ldrb	r2, [r2, #1]
   20e42:	b2d0      	uxtb	r0, r2
   20e44:	1d3a      	adds	r2, r7, #4
   20e46:	8852      	ldrh	r2, [r2, #2]
   20e48:	b292      	uxth	r2, r2
   20e4a:	3a08      	subs	r2, #8
   20e4c:	b291      	uxth	r1, r2
   20e4e:	683a      	ldr	r2, [r7, #0]
   20e50:	3208      	adds	r2, #8
   20e52:	4798      	blx	r3
   20e54:	e0b2      	b.n	20fbc <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   20e56:	23f8      	movs	r3, #248	; 0xf8
   20e58:	33ff      	adds	r3, #255	; 0xff
   20e5a:	001a      	movs	r2, r3
   20e5c:	4948      	ldr	r1, [pc, #288]	; (20f80 <hif_isr+0x3a0>)
   20e5e:	4b49      	ldr	r3, [pc, #292]	; (20f84 <hif_isr+0x3a4>)
   20e60:	0018      	movs	r0, r3
   20e62:	4b49      	ldr	r3, [pc, #292]	; (20f88 <hif_isr+0x3a8>)
   20e64:	4798      	blx	r3
   20e66:	4b50      	ldr	r3, [pc, #320]	; (20fa8 <hif_isr+0x3c8>)
   20e68:	0018      	movs	r0, r3
   20e6a:	4b47      	ldr	r3, [pc, #284]	; (20f88 <hif_isr+0x3a8>)
   20e6c:	4798      	blx	r3
   20e6e:	4b48      	ldr	r3, [pc, #288]	; (20f90 <hif_isr+0x3b0>)
   20e70:	0018      	movs	r0, r3
   20e72:	4b45      	ldr	r3, [pc, #276]	; (20f88 <hif_isr+0x3a8>)
   20e74:	4798      	blx	r3
   20e76:	e0a1      	b.n	20fbc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   20e78:	1d3b      	adds	r3, r7, #4
   20e7a:	781b      	ldrb	r3, [r3, #0]
   20e7c:	b2db      	uxtb	r3, r3
   20e7e:	2b06      	cmp	r3, #6
   20e80:	d121      	bne.n	20ec6 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   20e82:	4b3d      	ldr	r3, [pc, #244]	; (20f78 <hif_isr+0x398>)
   20e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20e86:	2b00      	cmp	r3, #0
   20e88:	d00d      	beq.n	20ea6 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20e8a:	4b3b      	ldr	r3, [pc, #236]	; (20f78 <hif_isr+0x398>)
   20e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20e8e:	1d3a      	adds	r2, r7, #4
   20e90:	7852      	ldrb	r2, [r2, #1]
   20e92:	b2d0      	uxtb	r0, r2
   20e94:	1d3a      	adds	r2, r7, #4
   20e96:	8852      	ldrh	r2, [r2, #2]
   20e98:	b292      	uxth	r2, r2
   20e9a:	3a08      	subs	r2, #8
   20e9c:	b291      	uxth	r1, r2
   20e9e:	683a      	ldr	r2, [r7, #0]
   20ea0:	3208      	adds	r2, #8
   20ea2:	4798      	blx	r3
   20ea4:	e08a      	b.n	20fbc <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   20ea6:	2380      	movs	r3, #128	; 0x80
   20ea8:	009a      	lsls	r2, r3, #2
   20eaa:	4935      	ldr	r1, [pc, #212]	; (20f80 <hif_isr+0x3a0>)
   20eac:	4b35      	ldr	r3, [pc, #212]	; (20f84 <hif_isr+0x3a4>)
   20eae:	0018      	movs	r0, r3
   20eb0:	4b35      	ldr	r3, [pc, #212]	; (20f88 <hif_isr+0x3a8>)
   20eb2:	4798      	blx	r3
   20eb4:	4b3d      	ldr	r3, [pc, #244]	; (20fac <hif_isr+0x3cc>)
   20eb6:	0018      	movs	r0, r3
   20eb8:	4b33      	ldr	r3, [pc, #204]	; (20f88 <hif_isr+0x3a8>)
   20eba:	4798      	blx	r3
   20ebc:	4b34      	ldr	r3, [pc, #208]	; (20f90 <hif_isr+0x3b0>)
   20ebe:	0018      	movs	r0, r3
   20ec0:	4b31      	ldr	r3, [pc, #196]	; (20f88 <hif_isr+0x3a8>)
   20ec2:	4798      	blx	r3
   20ec4:	e07a      	b.n	20fbc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   20ec6:	1d3b      	adds	r3, r7, #4
   20ec8:	781b      	ldrb	r3, [r3, #0]
   20eca:	b2db      	uxtb	r3, r3
   20ecc:	2b07      	cmp	r3, #7
   20ece:	d120      	bne.n	20f12 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   20ed0:	4b29      	ldr	r3, [pc, #164]	; (20f78 <hif_isr+0x398>)
   20ed2:	69db      	ldr	r3, [r3, #28]
   20ed4:	2b00      	cmp	r3, #0
   20ed6:	d00d      	beq.n	20ef4 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20ed8:	4b27      	ldr	r3, [pc, #156]	; (20f78 <hif_isr+0x398>)
   20eda:	69db      	ldr	r3, [r3, #28]
   20edc:	1d3a      	adds	r2, r7, #4
   20ede:	7852      	ldrb	r2, [r2, #1]
   20ee0:	b2d0      	uxtb	r0, r2
   20ee2:	1d3a      	adds	r2, r7, #4
   20ee4:	8852      	ldrh	r2, [r2, #2]
   20ee6:	b292      	uxth	r2, r2
   20ee8:	3a08      	subs	r2, #8
   20eea:	b291      	uxth	r1, r2
   20eec:	683a      	ldr	r2, [r7, #0]
   20eee:	3208      	adds	r2, #8
   20ef0:	4798      	blx	r3
   20ef2:	e063      	b.n	20fbc <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   20ef4:	4a2e      	ldr	r2, [pc, #184]	; (20fb0 <hif_isr+0x3d0>)
   20ef6:	4922      	ldr	r1, [pc, #136]	; (20f80 <hif_isr+0x3a0>)
   20ef8:	4b22      	ldr	r3, [pc, #136]	; (20f84 <hif_isr+0x3a4>)
   20efa:	0018      	movs	r0, r3
   20efc:	4b22      	ldr	r3, [pc, #136]	; (20f88 <hif_isr+0x3a8>)
   20efe:	4798      	blx	r3
   20f00:	4b2c      	ldr	r3, [pc, #176]	; (20fb4 <hif_isr+0x3d4>)
   20f02:	0018      	movs	r0, r3
   20f04:	4b20      	ldr	r3, [pc, #128]	; (20f88 <hif_isr+0x3a8>)
   20f06:	4798      	blx	r3
   20f08:	4b21      	ldr	r3, [pc, #132]	; (20f90 <hif_isr+0x3b0>)
   20f0a:	0018      	movs	r0, r3
   20f0c:	4b1e      	ldr	r3, [pc, #120]	; (20f88 <hif_isr+0x3a8>)
   20f0e:	4798      	blx	r3
   20f10:	e054      	b.n	20fbc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   20f12:	1d3b      	adds	r3, r7, #4
   20f14:	781b      	ldrb	r3, [r3, #0]
   20f16:	b2db      	uxtb	r3, r3
   20f18:	2b05      	cmp	r3, #5
   20f1a:	d111      	bne.n	20f40 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   20f1c:	4b16      	ldr	r3, [pc, #88]	; (20f78 <hif_isr+0x398>)
   20f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20f20:	2b00      	cmp	r3, #0
   20f22:	d04b      	beq.n	20fbc <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20f24:	4b14      	ldr	r3, [pc, #80]	; (20f78 <hif_isr+0x398>)
   20f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20f28:	1d3a      	adds	r2, r7, #4
   20f2a:	7852      	ldrb	r2, [r2, #1]
   20f2c:	b2d0      	uxtb	r0, r2
   20f2e:	1d3a      	adds	r2, r7, #4
   20f30:	8852      	ldrh	r2, [r2, #2]
   20f32:	b292      	uxth	r2, r2
   20f34:	3a08      	subs	r2, #8
   20f36:	b291      	uxth	r1, r2
   20f38:	683a      	ldr	r2, [r7, #0]
   20f3a:	3208      	adds	r2, #8
   20f3c:	4798      	blx	r3
   20f3e:	e03d      	b.n	20fbc <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   20f40:	2384      	movs	r3, #132	; 0x84
   20f42:	009a      	lsls	r2, r3, #2
   20f44:	490e      	ldr	r1, [pc, #56]	; (20f80 <hif_isr+0x3a0>)
   20f46:	4b0f      	ldr	r3, [pc, #60]	; (20f84 <hif_isr+0x3a4>)
   20f48:	0018      	movs	r0, r3
   20f4a:	4b0f      	ldr	r3, [pc, #60]	; (20f88 <hif_isr+0x3a8>)
   20f4c:	4798      	blx	r3
   20f4e:	4b1a      	ldr	r3, [pc, #104]	; (20fb8 <hif_isr+0x3d8>)
   20f50:	0018      	movs	r0, r3
   20f52:	4b0d      	ldr	r3, [pc, #52]	; (20f88 <hif_isr+0x3a8>)
   20f54:	4798      	blx	r3
   20f56:	4b0e      	ldr	r3, [pc, #56]	; (20f90 <hif_isr+0x3b0>)
   20f58:	0018      	movs	r0, r3
   20f5a:	4b0b      	ldr	r3, [pc, #44]	; (20f88 <hif_isr+0x3a8>)
   20f5c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   20f5e:	230f      	movs	r3, #15
   20f60:	18fb      	adds	r3, r7, r3
   20f62:	22fa      	movs	r2, #250	; 0xfa
   20f64:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   20f66:	e083      	b.n	21070 <hif_isr+0x490>
   20f68:	00001070 	.word	0x00001070
   20f6c:	0002266d 	.word	0x0002266d
   20f70:	0001fd91 	.word	0x0001fd91
   20f74:	00022691 	.word	0x00022691
   20f78:	2000598c 	.word	0x2000598c
   20f7c:	00001084 	.word	0x00001084
   20f80:	00037b18 	.word	0x00037b18
   20f84:	00037808 	.word	0x00037808
   20f88:	0001d8a9 	.word	0x0001d8a9
   20f8c:	0003783c 	.word	0x0003783c
   20f90:	00037804 	.word	0x00037804
   20f94:	000226e1 	.word	0x000226e1
   20f98:	00037864 	.word	0x00037864
   20f9c:	0003787c 	.word	0x0003787c
   20fa0:	000378bc 	.word	0x000378bc
   20fa4:	000378e0 	.word	0x000378e0
   20fa8:	00037904 	.word	0x00037904
   20fac:	00037924 	.word	0x00037924
   20fb0:	00000207 	.word	0x00000207
   20fb4:	00037948 	.word	0x00037948
   20fb8:	0003796c 	.word	0x0003796c
				}
				if(gstrHifCxt.u8HifRXDone)
   20fbc:	4b30      	ldr	r3, [pc, #192]	; (21080 <hif_isr+0x4a0>)
   20fbe:	789b      	ldrb	r3, [r3, #2]
   20fc0:	b2db      	uxtb	r3, r3
   20fc2:	2b00      	cmp	r3, #0
   20fc4:	d054      	beq.n	21070 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   20fc6:	4a2f      	ldr	r2, [pc, #188]	; (21084 <hif_isr+0x4a4>)
   20fc8:	492f      	ldr	r1, [pc, #188]	; (21088 <hif_isr+0x4a8>)
   20fca:	4b30      	ldr	r3, [pc, #192]	; (2108c <hif_isr+0x4ac>)
   20fcc:	0018      	movs	r0, r3
   20fce:	4b30      	ldr	r3, [pc, #192]	; (21090 <hif_isr+0x4b0>)
   20fd0:	4798      	blx	r3
   20fd2:	1d3b      	adds	r3, r7, #4
   20fd4:	781b      	ldrb	r3, [r3, #0]
   20fd6:	b2db      	uxtb	r3, r3
   20fd8:	0019      	movs	r1, r3
   20fda:	1d3b      	adds	r3, r7, #4
   20fdc:	785b      	ldrb	r3, [r3, #1]
   20fde:	b2db      	uxtb	r3, r3
   20fe0:	001a      	movs	r2, r3
   20fe2:	4b2c      	ldr	r3, [pc, #176]	; (21094 <hif_isr+0x4b4>)
   20fe4:	0018      	movs	r0, r3
   20fe6:	4b2a      	ldr	r3, [pc, #168]	; (21090 <hif_isr+0x4b0>)
   20fe8:	4798      	blx	r3
   20fea:	4b2b      	ldr	r3, [pc, #172]	; (21098 <hif_isr+0x4b8>)
   20fec:	0018      	movs	r0, r3
   20fee:	4b28      	ldr	r3, [pc, #160]	; (21090 <hif_isr+0x4b0>)
   20ff0:	4798      	blx	r3
					ret = hif_set_rx_done();
   20ff2:	230f      	movs	r3, #15
   20ff4:	18fc      	adds	r4, r7, r3
   20ff6:	4b29      	ldr	r3, [pc, #164]	; (2109c <hif_isr+0x4bc>)
   20ff8:	4798      	blx	r3
   20ffa:	0003      	movs	r3, r0
   20ffc:	7023      	strb	r3, [r4, #0]
   20ffe:	e037      	b.n	21070 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21000:	4a27      	ldr	r2, [pc, #156]	; (210a0 <hif_isr+0x4c0>)
   21002:	4921      	ldr	r1, [pc, #132]	; (21088 <hif_isr+0x4a8>)
   21004:	4b21      	ldr	r3, [pc, #132]	; (2108c <hif_isr+0x4ac>)
   21006:	0018      	movs	r0, r3
   21008:	4b21      	ldr	r3, [pc, #132]	; (21090 <hif_isr+0x4b0>)
   2100a:	4798      	blx	r3
   2100c:	4b25      	ldr	r3, [pc, #148]	; (210a4 <hif_isr+0x4c4>)
   2100e:	0018      	movs	r0, r3
   21010:	4b1f      	ldr	r3, [pc, #124]	; (21090 <hif_isr+0x4b0>)
   21012:	4798      	blx	r3
   21014:	4b20      	ldr	r3, [pc, #128]	; (21098 <hif_isr+0x4b8>)
   21016:	0018      	movs	r0, r3
   21018:	4b1d      	ldr	r3, [pc, #116]	; (21090 <hif_isr+0x4b0>)
   2101a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   2101c:	230f      	movs	r3, #15
   2101e:	18fb      	adds	r3, r7, r3
   21020:	22fe      	movs	r2, #254	; 0xfe
   21022:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21024:	e024      	b.n	21070 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   21026:	4a20      	ldr	r2, [pc, #128]	; (210a8 <hif_isr+0x4c8>)
   21028:	4917      	ldr	r1, [pc, #92]	; (21088 <hif_isr+0x4a8>)
   2102a:	4b18      	ldr	r3, [pc, #96]	; (2108c <hif_isr+0x4ac>)
   2102c:	0018      	movs	r0, r3
   2102e:	4b18      	ldr	r3, [pc, #96]	; (21090 <hif_isr+0x4b0>)
   21030:	4798      	blx	r3
   21032:	68ba      	ldr	r2, [r7, #8]
   21034:	4b1d      	ldr	r3, [pc, #116]	; (210ac <hif_isr+0x4cc>)
   21036:	0011      	movs	r1, r2
   21038:	0018      	movs	r0, r3
   2103a:	4b15      	ldr	r3, [pc, #84]	; (21090 <hif_isr+0x4b0>)
   2103c:	4798      	blx	r3
   2103e:	4b16      	ldr	r3, [pc, #88]	; (21098 <hif_isr+0x4b8>)
   21040:	0018      	movs	r0, r3
   21042:	4b13      	ldr	r3, [pc, #76]	; (21090 <hif_isr+0x4b0>)
   21044:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21046:	230f      	movs	r3, #15
   21048:	18fb      	adds	r3, r7, r3
   2104a:	22f4      	movs	r2, #244	; 0xf4
   2104c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2104e:	e00f      	b.n	21070 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21050:	4a17      	ldr	r2, [pc, #92]	; (210b0 <hif_isr+0x4d0>)
   21052:	490d      	ldr	r1, [pc, #52]	; (21088 <hif_isr+0x4a8>)
   21054:	4b0d      	ldr	r3, [pc, #52]	; (2108c <hif_isr+0x4ac>)
   21056:	0018      	movs	r0, r3
   21058:	4b0d      	ldr	r3, [pc, #52]	; (21090 <hif_isr+0x4b0>)
   2105a:	4798      	blx	r3
   2105c:	4b15      	ldr	r3, [pc, #84]	; (210b4 <hif_isr+0x4d4>)
   2105e:	0018      	movs	r0, r3
   21060:	4b0b      	ldr	r3, [pc, #44]	; (21090 <hif_isr+0x4b0>)
   21062:	4798      	blx	r3
   21064:	4b0c      	ldr	r3, [pc, #48]	; (21098 <hif_isr+0x4b8>)
   21066:	0018      	movs	r0, r3
   21068:	4b09      	ldr	r3, [pc, #36]	; (21090 <hif_isr+0x4b0>)
   2106a:	4798      	blx	r3
		goto ERR1;
   2106c:	e000      	b.n	21070 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   2106e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21070:	230f      	movs	r3, #15
   21072:	18fb      	adds	r3, r7, r3
   21074:	781b      	ldrb	r3, [r3, #0]
   21076:	b25b      	sxtb	r3, r3
}
   21078:	0018      	movs	r0, r3
   2107a:	46bd      	mov	sp, r7
   2107c:	b005      	add	sp, #20
   2107e:	bd90      	pop	{r4, r7, pc}
   21080:	2000598c 	.word	0x2000598c
   21084:	00000216 	.word	0x00000216
   21088:	00037b18 	.word	0x00037b18
   2108c:	00037808 	.word	0x00037808
   21090:	0001d8a9 	.word	0x0001d8a9
   21094:	00037984 	.word	0x00037984
   21098:	00037804 	.word	0x00037804
   2109c:	00020675 	.word	0x00020675
   210a0:	0000021d 	.word	0x0000021d
   210a4:	000379b0 	.word	0x000379b0
   210a8:	00000225 	.word	0x00000225
   210ac:	000379c4 	.word	0x000379c4
   210b0:	0000022e 	.word	0x0000022e
   210b4:	000379e0 	.word	0x000379e0

000210b8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   210b8:	b590      	push	{r4, r7, lr}
   210ba:	b083      	sub	sp, #12
   210bc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   210be:	1dfb      	adds	r3, r7, #7
   210c0:	2200      	movs	r2, #0
   210c2:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   210c4:	4b1c      	ldr	r3, [pc, #112]	; (21138 <hif_handle_isr+0x80>)
   210c6:	2200      	movs	r2, #0
   210c8:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   210ca:	e024      	b.n	21116 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   210cc:	4b1a      	ldr	r3, [pc, #104]	; (21138 <hif_handle_isr+0x80>)
   210ce:	78db      	ldrb	r3, [r3, #3]
   210d0:	b2db      	uxtb	r3, r3
   210d2:	3b01      	subs	r3, #1
   210d4:	b2da      	uxtb	r2, r3
   210d6:	4b18      	ldr	r3, [pc, #96]	; (21138 <hif_handle_isr+0x80>)
   210d8:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   210da:	1dfc      	adds	r4, r7, #7
   210dc:	4b17      	ldr	r3, [pc, #92]	; (2113c <hif_handle_isr+0x84>)
   210de:	4798      	blx	r3
   210e0:	0003      	movs	r3, r0
   210e2:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   210e4:	1dfb      	adds	r3, r7, #7
   210e6:	781b      	ldrb	r3, [r3, #0]
   210e8:	b25b      	sxtb	r3, r3
   210ea:	2b00      	cmp	r3, #0
   210ec:	d100      	bne.n	210f0 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   210ee:	e012      	b.n	21116 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   210f0:	4a13      	ldr	r2, [pc, #76]	; (21140 <hif_handle_isr+0x88>)
   210f2:	4914      	ldr	r1, [pc, #80]	; (21144 <hif_handle_isr+0x8c>)
   210f4:	4b14      	ldr	r3, [pc, #80]	; (21148 <hif_handle_isr+0x90>)
   210f6:	0018      	movs	r0, r3
   210f8:	4b14      	ldr	r3, [pc, #80]	; (2114c <hif_handle_isr+0x94>)
   210fa:	4798      	blx	r3
   210fc:	1dfb      	adds	r3, r7, #7
   210fe:	2200      	movs	r2, #0
   21100:	569a      	ldrsb	r2, [r3, r2]
   21102:	4b13      	ldr	r3, [pc, #76]	; (21150 <hif_handle_isr+0x98>)
   21104:	0011      	movs	r1, r2
   21106:	0018      	movs	r0, r3
   21108:	4b10      	ldr	r3, [pc, #64]	; (2114c <hif_handle_isr+0x94>)
   2110a:	4798      	blx	r3
   2110c:	4b11      	ldr	r3, [pc, #68]	; (21154 <hif_handle_isr+0x9c>)
   2110e:	0018      	movs	r0, r3
   21110:	4b0e      	ldr	r3, [pc, #56]	; (2114c <hif_handle_isr+0x94>)
   21112:	4798      	blx	r3
			ret = hif_isr();
   21114:	e7e1      	b.n	210da <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21116:	4b08      	ldr	r3, [pc, #32]	; (21138 <hif_handle_isr+0x80>)
   21118:	78db      	ldrb	r3, [r3, #3]
   2111a:	b2db      	uxtb	r3, r3
   2111c:	2b00      	cmp	r3, #0
   2111e:	d004      	beq.n	2112a <hif_handle_isr+0x72>
   21120:	4b05      	ldr	r3, [pc, #20]	; (21138 <hif_handle_isr+0x80>)
   21122:	791b      	ldrb	r3, [r3, #4]
   21124:	b2db      	uxtb	r3, r3
   21126:	2b00      	cmp	r3, #0
   21128:	d0d0      	beq.n	210cc <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2112a:	1dfb      	adds	r3, r7, #7
   2112c:	781b      	ldrb	r3, [r3, #0]
   2112e:	b25b      	sxtb	r3, r3
}
   21130:	0018      	movs	r0, r3
   21132:	46bd      	mov	sp, r7
   21134:	b003      	add	sp, #12
   21136:	bd90      	pop	{r4, r7, pc}
   21138:	2000598c 	.word	0x2000598c
   2113c:	00020be1 	.word	0x00020be1
   21140:	00000257 	.word	0x00000257
   21144:	00037b20 	.word	0x00037b20
   21148:	00037808 	.word	0x00037808
   2114c:	0001d8a9 	.word	0x0001d8a9
   21150:	00037a04 	.word	0x00037a04
   21154:	00037804 	.word	0x00037804

00021158 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21158:	b590      	push	{r4, r7, lr}
   2115a:	b087      	sub	sp, #28
   2115c:	af00      	add	r7, sp, #0
   2115e:	60f8      	str	r0, [r7, #12]
   21160:	60b9      	str	r1, [r7, #8]
   21162:	0019      	movs	r1, r3
   21164:	1dbb      	adds	r3, r7, #6
   21166:	801a      	strh	r2, [r3, #0]
   21168:	1d7b      	adds	r3, r7, #5
   2116a:	1c0a      	adds	r2, r1, #0
   2116c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2116e:	2317      	movs	r3, #23
   21170:	18fb      	adds	r3, r7, r3
   21172:	2200      	movs	r2, #0
   21174:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   21176:	68fb      	ldr	r3, [r7, #12]
   21178:	2b00      	cmp	r3, #0
   2117a:	d006      	beq.n	2118a <hif_receive+0x32>
   2117c:	68bb      	ldr	r3, [r7, #8]
   2117e:	2b00      	cmp	r3, #0
   21180:	d003      	beq.n	2118a <hif_receive+0x32>
   21182:	1dbb      	adds	r3, r7, #6
   21184:	881b      	ldrh	r3, [r3, #0]
   21186:	2b00      	cmp	r3, #0
   21188:	d11e      	bne.n	211c8 <hif_receive+0x70>
	{
		if(isDone)
   2118a:	1d7b      	adds	r3, r7, #5
   2118c:	781b      	ldrb	r3, [r3, #0]
   2118e:	2b00      	cmp	r3, #0
   21190:	d006      	beq.n	211a0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21192:	2317      	movs	r3, #23
   21194:	18fc      	adds	r4, r7, r3
   21196:	4b45      	ldr	r3, [pc, #276]	; (212ac <hif_receive+0x154>)
   21198:	4798      	blx	r3
   2119a:	0003      	movs	r3, r0
   2119c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2119e:	e07c      	b.n	2129a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   211a0:	2317      	movs	r3, #23
   211a2:	18fb      	adds	r3, r7, r3
   211a4:	22f4      	movs	r2, #244	; 0xf4
   211a6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   211a8:	239e      	movs	r3, #158	; 0x9e
   211aa:	009a      	lsls	r2, r3, #2
   211ac:	4940      	ldr	r1, [pc, #256]	; (212b0 <hif_receive+0x158>)
   211ae:	4b41      	ldr	r3, [pc, #260]	; (212b4 <hif_receive+0x15c>)
   211b0:	0018      	movs	r0, r3
   211b2:	4b41      	ldr	r3, [pc, #260]	; (212b8 <hif_receive+0x160>)
   211b4:	4798      	blx	r3
   211b6:	4b41      	ldr	r3, [pc, #260]	; (212bc <hif_receive+0x164>)
   211b8:	0018      	movs	r0, r3
   211ba:	4b3f      	ldr	r3, [pc, #252]	; (212b8 <hif_receive+0x160>)
   211bc:	4798      	blx	r3
   211be:	4b40      	ldr	r3, [pc, #256]	; (212c0 <hif_receive+0x168>)
   211c0:	0018      	movs	r0, r3
   211c2:	4b3d      	ldr	r3, [pc, #244]	; (212b8 <hif_receive+0x160>)
   211c4:	4798      	blx	r3
		goto ERR1;
   211c6:	e068      	b.n	2129a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   211c8:	1dbb      	adds	r3, r7, #6
   211ca:	881a      	ldrh	r2, [r3, #0]
   211cc:	4b3d      	ldr	r3, [pc, #244]	; (212c4 <hif_receive+0x16c>)
   211ce:	68db      	ldr	r3, [r3, #12]
   211d0:	429a      	cmp	r2, r3
   211d2:	d917      	bls.n	21204 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   211d4:	2317      	movs	r3, #23
   211d6:	18fb      	adds	r3, r7, r3
   211d8:	22f4      	movs	r2, #244	; 0xf4
   211da:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   211dc:	23a0      	movs	r3, #160	; 0xa0
   211de:	009a      	lsls	r2, r3, #2
   211e0:	4933      	ldr	r1, [pc, #204]	; (212b0 <hif_receive+0x158>)
   211e2:	4b34      	ldr	r3, [pc, #208]	; (212b4 <hif_receive+0x15c>)
   211e4:	0018      	movs	r0, r3
   211e6:	4b34      	ldr	r3, [pc, #208]	; (212b8 <hif_receive+0x160>)
   211e8:	4798      	blx	r3
   211ea:	1dbb      	adds	r3, r7, #6
   211ec:	8819      	ldrh	r1, [r3, #0]
   211ee:	4b35      	ldr	r3, [pc, #212]	; (212c4 <hif_receive+0x16c>)
   211f0:	68da      	ldr	r2, [r3, #12]
   211f2:	4b35      	ldr	r3, [pc, #212]	; (212c8 <hif_receive+0x170>)
   211f4:	0018      	movs	r0, r3
   211f6:	4b30      	ldr	r3, [pc, #192]	; (212b8 <hif_receive+0x160>)
   211f8:	4798      	blx	r3
   211fa:	4b31      	ldr	r3, [pc, #196]	; (212c0 <hif_receive+0x168>)
   211fc:	0018      	movs	r0, r3
   211fe:	4b2e      	ldr	r3, [pc, #184]	; (212b8 <hif_receive+0x160>)
   21200:	4798      	blx	r3
		goto ERR1;
   21202:	e04a      	b.n	2129a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21204:	4b2f      	ldr	r3, [pc, #188]	; (212c4 <hif_receive+0x16c>)
   21206:	689a      	ldr	r2, [r3, #8]
   21208:	68fb      	ldr	r3, [r7, #12]
   2120a:	429a      	cmp	r2, r3
   2120c:	d80a      	bhi.n	21224 <hif_receive+0xcc>
   2120e:	1dbb      	adds	r3, r7, #6
   21210:	881a      	ldrh	r2, [r3, #0]
   21212:	68fb      	ldr	r3, [r7, #12]
   21214:	18d2      	adds	r2, r2, r3
   21216:	4b2b      	ldr	r3, [pc, #172]	; (212c4 <hif_receive+0x16c>)
   21218:	6899      	ldr	r1, [r3, #8]
   2121a:	4b2a      	ldr	r3, [pc, #168]	; (212c4 <hif_receive+0x16c>)
   2121c:	68db      	ldr	r3, [r3, #12]
   2121e:	18cb      	adds	r3, r1, r3
   21220:	429a      	cmp	r2, r3
   21222:	d912      	bls.n	2124a <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21224:	2317      	movs	r3, #23
   21226:	18fb      	adds	r3, r7, r3
   21228:	22f4      	movs	r2, #244	; 0xf4
   2122a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   2122c:	4a27      	ldr	r2, [pc, #156]	; (212cc <hif_receive+0x174>)
   2122e:	4920      	ldr	r1, [pc, #128]	; (212b0 <hif_receive+0x158>)
   21230:	4b20      	ldr	r3, [pc, #128]	; (212b4 <hif_receive+0x15c>)
   21232:	0018      	movs	r0, r3
   21234:	4b20      	ldr	r3, [pc, #128]	; (212b8 <hif_receive+0x160>)
   21236:	4798      	blx	r3
   21238:	4b25      	ldr	r3, [pc, #148]	; (212d0 <hif_receive+0x178>)
   2123a:	0018      	movs	r0, r3
   2123c:	4b1e      	ldr	r3, [pc, #120]	; (212b8 <hif_receive+0x160>)
   2123e:	4798      	blx	r3
   21240:	4b1f      	ldr	r3, [pc, #124]	; (212c0 <hif_receive+0x168>)
   21242:	0018      	movs	r0, r3
   21244:	4b1c      	ldr	r3, [pc, #112]	; (212b8 <hif_receive+0x160>)
   21246:	4798      	blx	r3
		goto ERR1;
   21248:	e027      	b.n	2129a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2124a:	1dbb      	adds	r3, r7, #6
   2124c:	881a      	ldrh	r2, [r3, #0]
   2124e:	2317      	movs	r3, #23
   21250:	18fc      	adds	r4, r7, r3
   21252:	68b9      	ldr	r1, [r7, #8]
   21254:	68fb      	ldr	r3, [r7, #12]
   21256:	0018      	movs	r0, r3
   21258:	4b1e      	ldr	r3, [pc, #120]	; (212d4 <hif_receive+0x17c>)
   2125a:	4798      	blx	r3
   2125c:	0003      	movs	r3, r0
   2125e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21260:	2317      	movs	r3, #23
   21262:	18fb      	adds	r3, r7, r3
   21264:	781b      	ldrb	r3, [r3, #0]
   21266:	b25b      	sxtb	r3, r3
   21268:	2b00      	cmp	r3, #0
   2126a:	d115      	bne.n	21298 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   2126c:	4b15      	ldr	r3, [pc, #84]	; (212c4 <hif_receive+0x16c>)
   2126e:	689a      	ldr	r2, [r3, #8]
   21270:	4b14      	ldr	r3, [pc, #80]	; (212c4 <hif_receive+0x16c>)
   21272:	68db      	ldr	r3, [r3, #12]
   21274:	18d2      	adds	r2, r2, r3
   21276:	1dbb      	adds	r3, r7, #6
   21278:	8819      	ldrh	r1, [r3, #0]
   2127a:	68fb      	ldr	r3, [r7, #12]
   2127c:	18cb      	adds	r3, r1, r3
   2127e:	429a      	cmp	r2, r3
   21280:	d003      	beq.n	2128a <hif_receive+0x132>
   21282:	1d7b      	adds	r3, r7, #5
   21284:	781b      	ldrb	r3, [r3, #0]
   21286:	2b00      	cmp	r3, #0
   21288:	d007      	beq.n	2129a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2128a:	2317      	movs	r3, #23
   2128c:	18fc      	adds	r4, r7, r3
   2128e:	4b07      	ldr	r3, [pc, #28]	; (212ac <hif_receive+0x154>)
   21290:	4798      	blx	r3
   21292:	0003      	movs	r3, r0
   21294:	7023      	strb	r3, [r4, #0]
   21296:	e000      	b.n	2129a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21298:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2129a:	2317      	movs	r3, #23
   2129c:	18fb      	adds	r3, r7, r3
   2129e:	781b      	ldrb	r3, [r3, #0]
   212a0:	b25b      	sxtb	r3, r3
}
   212a2:	0018      	movs	r0, r3
   212a4:	46bd      	mov	sp, r7
   212a6:	b007      	add	sp, #28
   212a8:	bd90      	pop	{r4, r7, pc}
   212aa:	46c0      	nop			; (mov r8, r8)
   212ac:	00020675 	.word	0x00020675
   212b0:	00037b30 	.word	0x00037b30
   212b4:	00037808 	.word	0x00037808
   212b8:	0001d8a9 	.word	0x0001d8a9
   212bc:	00037a34 	.word	0x00037a34
   212c0:	00037804 	.word	0x00037804
   212c4:	2000598c 	.word	0x2000598c
   212c8:	00037a54 	.word	0x00037a54
   212cc:	00000286 	.word	0x00000286
   212d0:	00037a9c 	.word	0x00037a9c
   212d4:	000226e1 	.word	0x000226e1

000212d8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   212d8:	b580      	push	{r7, lr}
   212da:	b084      	sub	sp, #16
   212dc:	af00      	add	r7, sp, #0
   212de:	0002      	movs	r2, r0
   212e0:	6039      	str	r1, [r7, #0]
   212e2:	1dfb      	adds	r3, r7, #7
   212e4:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   212e6:	230f      	movs	r3, #15
   212e8:	18fb      	adds	r3, r7, r3
   212ea:	2200      	movs	r2, #0
   212ec:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   212ee:	1dfb      	adds	r3, r7, #7
   212f0:	781b      	ldrb	r3, [r3, #0]
   212f2:	2b07      	cmp	r3, #7
   212f4:	d820      	bhi.n	21338 <hif_register_cb+0x60>
   212f6:	009a      	lsls	r2, r3, #2
   212f8:	4b1e      	ldr	r3, [pc, #120]	; (21374 <hif_register_cb+0x9c>)
   212fa:	18d3      	adds	r3, r2, r3
   212fc:	681b      	ldr	r3, [r3, #0]
   212fe:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21300:	4b1d      	ldr	r3, [pc, #116]	; (21378 <hif_register_cb+0xa0>)
   21302:	683a      	ldr	r2, [r7, #0]
   21304:	615a      	str	r2, [r3, #20]
			break;
   21306:	e02d      	b.n	21364 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21308:	4b1b      	ldr	r3, [pc, #108]	; (21378 <hif_register_cb+0xa0>)
   2130a:	683a      	ldr	r2, [r7, #0]
   2130c:	611a      	str	r2, [r3, #16]
			break;
   2130e:	e029      	b.n	21364 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21310:	4b19      	ldr	r3, [pc, #100]	; (21378 <hif_register_cb+0xa0>)
   21312:	683a      	ldr	r2, [r7, #0]
   21314:	619a      	str	r2, [r3, #24]
			break;
   21316:	e025      	b.n	21364 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21318:	4b17      	ldr	r3, [pc, #92]	; (21378 <hif_register_cb+0xa0>)
   2131a:	683a      	ldr	r2, [r7, #0]
   2131c:	621a      	str	r2, [r3, #32]
			break;
   2131e:	e021      	b.n	21364 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21320:	4b15      	ldr	r3, [pc, #84]	; (21378 <hif_register_cb+0xa0>)
   21322:	683a      	ldr	r2, [r7, #0]
   21324:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   21326:	e01d      	b.n	21364 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   21328:	4b13      	ldr	r3, [pc, #76]	; (21378 <hif_register_cb+0xa0>)
   2132a:	683a      	ldr	r2, [r7, #0]
   2132c:	61da      	str	r2, [r3, #28]
			break;
   2132e:	e019      	b.n	21364 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21330:	4b11      	ldr	r3, [pc, #68]	; (21378 <hif_register_cb+0xa0>)
   21332:	683a      	ldr	r2, [r7, #0]
   21334:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   21336:	e015      	b.n	21364 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   21338:	4a10      	ldr	r2, [pc, #64]	; (2137c <hif_register_cb+0xa4>)
   2133a:	4911      	ldr	r1, [pc, #68]	; (21380 <hif_register_cb+0xa8>)
   2133c:	4b11      	ldr	r3, [pc, #68]	; (21384 <hif_register_cb+0xac>)
   2133e:	0018      	movs	r0, r3
   21340:	4b11      	ldr	r3, [pc, #68]	; (21388 <hif_register_cb+0xb0>)
   21342:	4798      	blx	r3
   21344:	1dfb      	adds	r3, r7, #7
   21346:	781a      	ldrb	r2, [r3, #0]
   21348:	4b10      	ldr	r3, [pc, #64]	; (2138c <hif_register_cb+0xb4>)
   2134a:	0011      	movs	r1, r2
   2134c:	0018      	movs	r0, r3
   2134e:	4b0e      	ldr	r3, [pc, #56]	; (21388 <hif_register_cb+0xb0>)
   21350:	4798      	blx	r3
   21352:	4b0f      	ldr	r3, [pc, #60]	; (21390 <hif_register_cb+0xb8>)
   21354:	0018      	movs	r0, r3
   21356:	4b0c      	ldr	r3, [pc, #48]	; (21388 <hif_register_cb+0xb0>)
   21358:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2135a:	230f      	movs	r3, #15
   2135c:	18fb      	adds	r3, r7, r3
   2135e:	22f4      	movs	r2, #244	; 0xf4
   21360:	701a      	strb	r2, [r3, #0]
			break;
   21362:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21364:	230f      	movs	r3, #15
   21366:	18fb      	adds	r3, r7, r3
   21368:	781b      	ldrb	r3, [r3, #0]
   2136a:	b25b      	sxtb	r3, r3
}
   2136c:	0018      	movs	r0, r3
   2136e:	46bd      	mov	sp, r7
   21370:	b004      	add	sp, #16
   21372:	bd80      	pop	{r7, pc}
   21374:	00037aec 	.word	0x00037aec
   21378:	2000598c 	.word	0x2000598c
   2137c:	000002be 	.word	0x000002be
   21380:	00037b3c 	.word	0x00037b3c
   21384:	00037808 	.word	0x00037808
   21388:	0001d8a9 	.word	0x0001d8a9
   2138c:	00037ae0 	.word	0x00037ae0
   21390:	00037804 	.word	0x00037804

00021394 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21394:	b590      	push	{r4, r7, lr}
   21396:	b0af      	sub	sp, #188	; 0xbc
   21398:	af02      	add	r7, sp, #8
   2139a:	603a      	str	r2, [r7, #0]
   2139c:	1dfb      	adds	r3, r7, #7
   2139e:	1c02      	adds	r2, r0, #0
   213a0:	701a      	strb	r2, [r3, #0]
   213a2:	1d3b      	adds	r3, r7, #4
   213a4:	1c0a      	adds	r2, r1, #0
   213a6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   213a8:	1dfb      	adds	r3, r7, #7
   213aa:	781b      	ldrb	r3, [r3, #0]
   213ac:	2b2c      	cmp	r3, #44	; 0x2c
   213ae:	d116      	bne.n	213de <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   213b0:	23a4      	movs	r3, #164	; 0xa4
   213b2:	18f9      	adds	r1, r7, r3
   213b4:	6838      	ldr	r0, [r7, #0]
   213b6:	2300      	movs	r3, #0
   213b8:	2204      	movs	r2, #4
   213ba:	4cca      	ldr	r4, [pc, #808]	; (216e4 <m2m_wifi_cb+0x350>)
   213bc:	47a0      	blx	r4
   213be:	1e03      	subs	r3, r0, #0
   213c0:	d000      	beq.n	213c4 <m2m_wifi_cb+0x30>
   213c2:	e1b4      	b.n	2172e <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   213c4:	4bc8      	ldr	r3, [pc, #800]	; (216e8 <m2m_wifi_cb+0x354>)
   213c6:	681b      	ldr	r3, [r3, #0]
   213c8:	2b00      	cmp	r3, #0
   213ca:	d100      	bne.n	213ce <m2m_wifi_cb+0x3a>
   213cc:	e1af      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   213ce:	4bc6      	ldr	r3, [pc, #792]	; (216e8 <m2m_wifi_cb+0x354>)
   213d0:	681b      	ldr	r3, [r3, #0]
   213d2:	22a4      	movs	r2, #164	; 0xa4
   213d4:	18ba      	adds	r2, r7, r2
   213d6:	0011      	movs	r1, r2
   213d8:	202c      	movs	r0, #44	; 0x2c
   213da:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   213dc:	e1a7      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   213de:	1dfb      	adds	r3, r7, #7
   213e0:	781b      	ldrb	r3, [r3, #0]
   213e2:	2b1b      	cmp	r3, #27
   213e4:	d116      	bne.n	21414 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   213e6:	239c      	movs	r3, #156	; 0x9c
   213e8:	18f9      	adds	r1, r7, r3
   213ea:	6838      	ldr	r0, [r7, #0]
   213ec:	2300      	movs	r3, #0
   213ee:	2208      	movs	r2, #8
   213f0:	4cbc      	ldr	r4, [pc, #752]	; (216e4 <m2m_wifi_cb+0x350>)
   213f2:	47a0      	blx	r4
   213f4:	1e03      	subs	r3, r0, #0
   213f6:	d000      	beq.n	213fa <m2m_wifi_cb+0x66>
   213f8:	e199      	b.n	2172e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   213fa:	4bbb      	ldr	r3, [pc, #748]	; (216e8 <m2m_wifi_cb+0x354>)
   213fc:	681b      	ldr	r3, [r3, #0]
   213fe:	2b00      	cmp	r3, #0
   21400:	d100      	bne.n	21404 <m2m_wifi_cb+0x70>
   21402:	e194      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21404:	4bb8      	ldr	r3, [pc, #736]	; (216e8 <m2m_wifi_cb+0x354>)
   21406:	681b      	ldr	r3, [r3, #0]
   21408:	229c      	movs	r2, #156	; 0x9c
   2140a:	18ba      	adds	r2, r7, r2
   2140c:	0011      	movs	r1, r2
   2140e:	201b      	movs	r0, #27
   21410:	4798      	blx	r3
}
   21412:	e18c      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21414:	1dfb      	adds	r3, r7, #7
   21416:	781b      	ldrb	r3, [r3, #0]
   21418:	2b06      	cmp	r3, #6
   2141a:	d116      	bne.n	2144a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   2141c:	230c      	movs	r3, #12
   2141e:	18f9      	adds	r1, r7, r3
   21420:	6838      	ldr	r0, [r7, #0]
   21422:	2301      	movs	r3, #1
   21424:	2230      	movs	r2, #48	; 0x30
   21426:	4caf      	ldr	r4, [pc, #700]	; (216e4 <m2m_wifi_cb+0x350>)
   21428:	47a0      	blx	r4
   2142a:	1e03      	subs	r3, r0, #0
   2142c:	d000      	beq.n	21430 <m2m_wifi_cb+0x9c>
   2142e:	e17e      	b.n	2172e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21430:	4bad      	ldr	r3, [pc, #692]	; (216e8 <m2m_wifi_cb+0x354>)
   21432:	681b      	ldr	r3, [r3, #0]
   21434:	2b00      	cmp	r3, #0
   21436:	d100      	bne.n	2143a <m2m_wifi_cb+0xa6>
   21438:	e179      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2143a:	4bab      	ldr	r3, [pc, #684]	; (216e8 <m2m_wifi_cb+0x354>)
   2143c:	681b      	ldr	r3, [r3, #0]
   2143e:	220c      	movs	r2, #12
   21440:	18ba      	adds	r2, r7, r2
   21442:	0011      	movs	r1, r2
   21444:	2006      	movs	r0, #6
   21446:	4798      	blx	r3
}
   21448:	e171      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2144a:	1dfb      	adds	r3, r7, #7
   2144c:	781b      	ldrb	r3, [r3, #0]
   2144e:	2b0e      	cmp	r3, #14
   21450:	d100      	bne.n	21454 <m2m_wifi_cb+0xc0>
   21452:	e16c      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21454:	1dfb      	adds	r3, r7, #7
   21456:	781b      	ldrb	r3, [r3, #0]
   21458:	2b32      	cmp	r3, #50	; 0x32
   2145a:	d116      	bne.n	2148a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   2145c:	2384      	movs	r3, #132	; 0x84
   2145e:	18f9      	adds	r1, r7, r3
   21460:	6838      	ldr	r0, [r7, #0]
   21462:	2300      	movs	r3, #0
   21464:	2218      	movs	r2, #24
   21466:	4c9f      	ldr	r4, [pc, #636]	; (216e4 <m2m_wifi_cb+0x350>)
   21468:	47a0      	blx	r4
   2146a:	1e03      	subs	r3, r0, #0
   2146c:	d000      	beq.n	21470 <m2m_wifi_cb+0xdc>
   2146e:	e15e      	b.n	2172e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21470:	4b9d      	ldr	r3, [pc, #628]	; (216e8 <m2m_wifi_cb+0x354>)
   21472:	681b      	ldr	r3, [r3, #0]
   21474:	2b00      	cmp	r3, #0
   21476:	d100      	bne.n	2147a <m2m_wifi_cb+0xe6>
   21478:	e159      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2147a:	4b9b      	ldr	r3, [pc, #620]	; (216e8 <m2m_wifi_cb+0x354>)
   2147c:	681b      	ldr	r3, [r3, #0]
   2147e:	2284      	movs	r2, #132	; 0x84
   21480:	18ba      	adds	r2, r7, r2
   21482:	0011      	movs	r1, r2
   21484:	2032      	movs	r0, #50	; 0x32
   21486:	4798      	blx	r3
}
   21488:	e151      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2148a:	1dfb      	adds	r3, r7, #7
   2148c:	781b      	ldrb	r3, [r3, #0]
   2148e:	2b2f      	cmp	r3, #47	; 0x2f
   21490:	d11d      	bne.n	214ce <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   21492:	230c      	movs	r3, #12
   21494:	18fb      	adds	r3, r7, r3
   21496:	2264      	movs	r2, #100	; 0x64
   21498:	2100      	movs	r1, #0
   2149a:	0018      	movs	r0, r3
   2149c:	4b93      	ldr	r3, [pc, #588]	; (216ec <m2m_wifi_cb+0x358>)
   2149e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   214a0:	230c      	movs	r3, #12
   214a2:	18f9      	adds	r1, r7, r3
   214a4:	6838      	ldr	r0, [r7, #0]
   214a6:	2300      	movs	r3, #0
   214a8:	2264      	movs	r2, #100	; 0x64
   214aa:	4c8e      	ldr	r4, [pc, #568]	; (216e4 <m2m_wifi_cb+0x350>)
   214ac:	47a0      	blx	r4
   214ae:	1e03      	subs	r3, r0, #0
   214b0:	d000      	beq.n	214b4 <m2m_wifi_cb+0x120>
   214b2:	e13c      	b.n	2172e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   214b4:	4b8c      	ldr	r3, [pc, #560]	; (216e8 <m2m_wifi_cb+0x354>)
   214b6:	681b      	ldr	r3, [r3, #0]
   214b8:	2b00      	cmp	r3, #0
   214ba:	d100      	bne.n	214be <m2m_wifi_cb+0x12a>
   214bc:	e137      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   214be:	4b8a      	ldr	r3, [pc, #552]	; (216e8 <m2m_wifi_cb+0x354>)
   214c0:	681b      	ldr	r3, [r3, #0]
   214c2:	220c      	movs	r2, #12
   214c4:	18ba      	adds	r2, r7, r2
   214c6:	0011      	movs	r1, r2
   214c8:	202f      	movs	r0, #47	; 0x2f
   214ca:	4798      	blx	r3
}
   214cc:	e12f      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   214ce:	1dfb      	adds	r3, r7, #7
   214d0:	781b      	ldrb	r3, [r3, #0]
   214d2:	2b34      	cmp	r3, #52	; 0x34
   214d4:	d137      	bne.n	21546 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   214d6:	2380      	movs	r3, #128	; 0x80
   214d8:	18f9      	adds	r1, r7, r3
   214da:	6838      	ldr	r0, [r7, #0]
   214dc:	2300      	movs	r3, #0
   214de:	2204      	movs	r2, #4
   214e0:	4c80      	ldr	r4, [pc, #512]	; (216e4 <m2m_wifi_cb+0x350>)
   214e2:	47a0      	blx	r4
   214e4:	1e03      	subs	r3, r0, #0
   214e6:	d000      	beq.n	214ea <m2m_wifi_cb+0x156>
   214e8:	e121      	b.n	2172e <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   214ea:	4b81      	ldr	r3, [pc, #516]	; (216f0 <m2m_wifi_cb+0x35c>)
   214ec:	0018      	movs	r0, r3
   214ee:	4b81      	ldr	r3, [pc, #516]	; (216f4 <m2m_wifi_cb+0x360>)
   214f0:	4798      	blx	r3
   214f2:	2380      	movs	r3, #128	; 0x80
   214f4:	18fb      	adds	r3, r7, r3
   214f6:	681b      	ldr	r3, [r3, #0]
   214f8:	0e1b      	lsrs	r3, r3, #24
   214fa:	b2db      	uxtb	r3, r3
   214fc:	0019      	movs	r1, r3
   214fe:	2380      	movs	r3, #128	; 0x80
   21500:	18fb      	adds	r3, r7, r3
   21502:	681b      	ldr	r3, [r3, #0]
   21504:	0c1b      	lsrs	r3, r3, #16
   21506:	b2db      	uxtb	r3, r3
   21508:	001a      	movs	r2, r3
   2150a:	2380      	movs	r3, #128	; 0x80
   2150c:	18fb      	adds	r3, r7, r3
   2150e:	681b      	ldr	r3, [r3, #0]
   21510:	0a1b      	lsrs	r3, r3, #8
   21512:	b2db      	uxtb	r3, r3
   21514:	001c      	movs	r4, r3
   21516:	2380      	movs	r3, #128	; 0x80
   21518:	18fb      	adds	r3, r7, r3
   2151a:	681b      	ldr	r3, [r3, #0]
   2151c:	b2db      	uxtb	r3, r3
   2151e:	4876      	ldr	r0, [pc, #472]	; (216f8 <m2m_wifi_cb+0x364>)
   21520:	9300      	str	r3, [sp, #0]
   21522:	0023      	movs	r3, r4
   21524:	4c73      	ldr	r4, [pc, #460]	; (216f4 <m2m_wifi_cb+0x360>)
   21526:	47a0      	blx	r4
   21528:	4b74      	ldr	r3, [pc, #464]	; (216fc <m2m_wifi_cb+0x368>)
   2152a:	0018      	movs	r0, r3
   2152c:	4b71      	ldr	r3, [pc, #452]	; (216f4 <m2m_wifi_cb+0x360>)
   2152e:	4798      	blx	r3
			if (gpfAppWifiCb)
   21530:	4b6d      	ldr	r3, [pc, #436]	; (216e8 <m2m_wifi_cb+0x354>)
   21532:	681b      	ldr	r3, [r3, #0]
   21534:	2b00      	cmp	r3, #0
   21536:	d100      	bne.n	2153a <m2m_wifi_cb+0x1a6>
   21538:	e0f9      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2153a:	4b6b      	ldr	r3, [pc, #428]	; (216e8 <m2m_wifi_cb+0x354>)
   2153c:	681b      	ldr	r3, [r3, #0]
   2153e:	2100      	movs	r1, #0
   21540:	2034      	movs	r0, #52	; 0x34
   21542:	4798      	blx	r3
}
   21544:	e0f3      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   21546:	1dfb      	adds	r3, r7, #7
   21548:	781b      	ldrb	r3, [r3, #0]
   2154a:	2b11      	cmp	r3, #17
   2154c:	d11e      	bne.n	2158c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   2154e:	4b6c      	ldr	r3, [pc, #432]	; (21700 <m2m_wifi_cb+0x36c>)
   21550:	2200      	movs	r2, #0
   21552:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21554:	237c      	movs	r3, #124	; 0x7c
   21556:	18f9      	adds	r1, r7, r3
   21558:	6838      	ldr	r0, [r7, #0]
   2155a:	2300      	movs	r3, #0
   2155c:	2204      	movs	r2, #4
   2155e:	4c61      	ldr	r4, [pc, #388]	; (216e4 <m2m_wifi_cb+0x350>)
   21560:	47a0      	blx	r4
   21562:	1e03      	subs	r3, r0, #0
   21564:	d000      	beq.n	21568 <m2m_wifi_cb+0x1d4>
   21566:	e0e2      	b.n	2172e <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   21568:	237c      	movs	r3, #124	; 0x7c
   2156a:	18fb      	adds	r3, r7, r3
   2156c:	781a      	ldrb	r2, [r3, #0]
   2156e:	4b65      	ldr	r3, [pc, #404]	; (21704 <m2m_wifi_cb+0x370>)
   21570:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   21572:	4b5d      	ldr	r3, [pc, #372]	; (216e8 <m2m_wifi_cb+0x354>)
   21574:	681b      	ldr	r3, [r3, #0]
   21576:	2b00      	cmp	r3, #0
   21578:	d100      	bne.n	2157c <m2m_wifi_cb+0x1e8>
   2157a:	e0d8      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   2157c:	4b5a      	ldr	r3, [pc, #360]	; (216e8 <m2m_wifi_cb+0x354>)
   2157e:	681b      	ldr	r3, [r3, #0]
   21580:	227c      	movs	r2, #124	; 0x7c
   21582:	18ba      	adds	r2, r7, r2
   21584:	0011      	movs	r1, r2
   21586:	2011      	movs	r0, #17
   21588:	4798      	blx	r3
}
   2158a:	e0d0      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   2158c:	1dfb      	adds	r3, r7, #7
   2158e:	781b      	ldrb	r3, [r3, #0]
   21590:	2b13      	cmp	r3, #19
   21592:	d116      	bne.n	215c2 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   21594:	230c      	movs	r3, #12
   21596:	18f9      	adds	r1, r7, r3
   21598:	6838      	ldr	r0, [r7, #0]
   2159a:	2300      	movs	r3, #0
   2159c:	222c      	movs	r2, #44	; 0x2c
   2159e:	4c51      	ldr	r4, [pc, #324]	; (216e4 <m2m_wifi_cb+0x350>)
   215a0:	47a0      	blx	r4
   215a2:	1e03      	subs	r3, r0, #0
   215a4:	d000      	beq.n	215a8 <m2m_wifi_cb+0x214>
   215a6:	e0c2      	b.n	2172e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   215a8:	4b4f      	ldr	r3, [pc, #316]	; (216e8 <m2m_wifi_cb+0x354>)
   215aa:	681b      	ldr	r3, [r3, #0]
   215ac:	2b00      	cmp	r3, #0
   215ae:	d100      	bne.n	215b2 <m2m_wifi_cb+0x21e>
   215b0:	e0bd      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   215b2:	4b4d      	ldr	r3, [pc, #308]	; (216e8 <m2m_wifi_cb+0x354>)
   215b4:	681b      	ldr	r3, [r3, #0]
   215b6:	220c      	movs	r2, #12
   215b8:	18ba      	adds	r2, r7, r2
   215ba:	0011      	movs	r1, r2
   215bc:	2013      	movs	r0, #19
   215be:	4798      	blx	r3
}
   215c0:	e0b5      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   215c2:	1dfb      	adds	r3, r7, #7
   215c4:	781b      	ldrb	r3, [r3, #0]
   215c6:	2b04      	cmp	r3, #4
   215c8:	d116      	bne.n	215f8 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   215ca:	23a8      	movs	r3, #168	; 0xa8
   215cc:	18f9      	adds	r1, r7, r3
   215ce:	6838      	ldr	r0, [r7, #0]
   215d0:	2300      	movs	r3, #0
   215d2:	2204      	movs	r2, #4
   215d4:	4c43      	ldr	r4, [pc, #268]	; (216e4 <m2m_wifi_cb+0x350>)
   215d6:	47a0      	blx	r4
   215d8:	1e03      	subs	r3, r0, #0
   215da:	d000      	beq.n	215de <m2m_wifi_cb+0x24a>
   215dc:	e0a7      	b.n	2172e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   215de:	4b42      	ldr	r3, [pc, #264]	; (216e8 <m2m_wifi_cb+0x354>)
   215e0:	681b      	ldr	r3, [r3, #0]
   215e2:	2b00      	cmp	r3, #0
   215e4:	d100      	bne.n	215e8 <m2m_wifi_cb+0x254>
   215e6:	e0a2      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   215e8:	4b3f      	ldr	r3, [pc, #252]	; (216e8 <m2m_wifi_cb+0x354>)
   215ea:	681b      	ldr	r3, [r3, #0]
   215ec:	22a8      	movs	r2, #168	; 0xa8
   215ee:	18ba      	adds	r2, r7, r2
   215f0:	0011      	movs	r1, r2
   215f2:	2004      	movs	r0, #4
   215f4:	4798      	blx	r3
}
   215f6:	e09a      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   215f8:	1dfb      	adds	r3, r7, #7
   215fa:	781b      	ldrb	r3, [r3, #0]
   215fc:	2b65      	cmp	r3, #101	; 0x65
   215fe:	d116      	bne.n	2162e <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21600:	23a8      	movs	r3, #168	; 0xa8
   21602:	18f9      	adds	r1, r7, r3
   21604:	6838      	ldr	r0, [r7, #0]
   21606:	2300      	movs	r3, #0
   21608:	2204      	movs	r2, #4
   2160a:	4c36      	ldr	r4, [pc, #216]	; (216e4 <m2m_wifi_cb+0x350>)
   2160c:	47a0      	blx	r4
   2160e:	1e03      	subs	r3, r0, #0
   21610:	d000      	beq.n	21614 <m2m_wifi_cb+0x280>
   21612:	e08c      	b.n	2172e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21614:	4b34      	ldr	r3, [pc, #208]	; (216e8 <m2m_wifi_cb+0x354>)
   21616:	681b      	ldr	r3, [r3, #0]
   21618:	2b00      	cmp	r3, #0
   2161a:	d100      	bne.n	2161e <m2m_wifi_cb+0x28a>
   2161c:	e087      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2161e:	4b32      	ldr	r3, [pc, #200]	; (216e8 <m2m_wifi_cb+0x354>)
   21620:	681b      	ldr	r3, [r3, #0]
   21622:	22a8      	movs	r2, #168	; 0xa8
   21624:	18ba      	adds	r2, r7, r2
   21626:	0011      	movs	r1, r2
   21628:	2065      	movs	r0, #101	; 0x65
   2162a:	4798      	blx	r3
}
   2162c:	e07f      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2162e:	1dfb      	adds	r3, r7, #7
   21630:	781b      	ldrb	r3, [r3, #0]
   21632:	2b09      	cmp	r3, #9
   21634:	d116      	bne.n	21664 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21636:	230c      	movs	r3, #12
   21638:	18f9      	adds	r1, r7, r3
   2163a:	6838      	ldr	r0, [r7, #0]
   2163c:	2301      	movs	r3, #1
   2163e:	2264      	movs	r2, #100	; 0x64
   21640:	4c28      	ldr	r4, [pc, #160]	; (216e4 <m2m_wifi_cb+0x350>)
   21642:	47a0      	blx	r4
   21644:	1e03      	subs	r3, r0, #0
   21646:	d000      	beq.n	2164a <m2m_wifi_cb+0x2b6>
   21648:	e071      	b.n	2172e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2164a:	4b27      	ldr	r3, [pc, #156]	; (216e8 <m2m_wifi_cb+0x354>)
   2164c:	681b      	ldr	r3, [r3, #0]
   2164e:	2b00      	cmp	r3, #0
   21650:	d100      	bne.n	21654 <m2m_wifi_cb+0x2c0>
   21652:	e06c      	b.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21654:	4b24      	ldr	r3, [pc, #144]	; (216e8 <m2m_wifi_cb+0x354>)
   21656:	681b      	ldr	r3, [r3, #0]
   21658:	220c      	movs	r2, #12
   2165a:	18ba      	adds	r2, r7, r2
   2165c:	0011      	movs	r1, r2
   2165e:	2009      	movs	r0, #9
   21660:	4798      	blx	r3
}
   21662:	e064      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21664:	1dfb      	adds	r3, r7, #7
   21666:	781b      	ldrb	r3, [r3, #0]
   21668:	2b2a      	cmp	r3, #42	; 0x2a
   2166a:	d114      	bne.n	21696 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   2166c:	2378      	movs	r3, #120	; 0x78
   2166e:	18f9      	adds	r1, r7, r3
   21670:	6838      	ldr	r0, [r7, #0]
   21672:	2301      	movs	r3, #1
   21674:	2204      	movs	r2, #4
   21676:	4c1b      	ldr	r4, [pc, #108]	; (216e4 <m2m_wifi_cb+0x350>)
   21678:	47a0      	blx	r4
   2167a:	1e03      	subs	r3, r0, #0
   2167c:	d157      	bne.n	2172e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2167e:	4b1a      	ldr	r3, [pc, #104]	; (216e8 <m2m_wifi_cb+0x354>)
   21680:	681b      	ldr	r3, [r3, #0]
   21682:	2b00      	cmp	r3, #0
   21684:	d053      	beq.n	2172e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21686:	4b18      	ldr	r3, [pc, #96]	; (216e8 <m2m_wifi_cb+0x354>)
   21688:	681b      	ldr	r3, [r3, #0]
   2168a:	2278      	movs	r2, #120	; 0x78
   2168c:	18ba      	adds	r2, r7, r2
   2168e:	0011      	movs	r1, r2
   21690:	202a      	movs	r0, #42	; 0x2a
   21692:	4798      	blx	r3
}
   21694:	e04b      	b.n	2172e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21696:	1dfb      	adds	r3, r7, #7
   21698:	781b      	ldrb	r3, [r3, #0]
   2169a:	2b20      	cmp	r3, #32
   2169c:	d134      	bne.n	21708 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   2169e:	2370      	movs	r3, #112	; 0x70
   216a0:	18f9      	adds	r1, r7, r3
   216a2:	6838      	ldr	r0, [r7, #0]
   216a4:	2300      	movs	r3, #0
   216a6:	2208      	movs	r2, #8
   216a8:	4c0e      	ldr	r4, [pc, #56]	; (216e4 <m2m_wifi_cb+0x350>)
   216aa:	47a0      	blx	r4
   216ac:	1e03      	subs	r3, r0, #0
   216ae:	d13e      	bne.n	2172e <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   216b0:	683b      	ldr	r3, [r7, #0]
   216b2:	3308      	adds	r3, #8
   216b4:	0018      	movs	r0, r3
   216b6:	2370      	movs	r3, #112	; 0x70
   216b8:	18fb      	adds	r3, r7, r3
   216ba:	6819      	ldr	r1, [r3, #0]
   216bc:	2370      	movs	r3, #112	; 0x70
   216be:	18fb      	adds	r3, r7, r3
   216c0:	889a      	ldrh	r2, [r3, #4]
   216c2:	2301      	movs	r3, #1
   216c4:	4c07      	ldr	r4, [pc, #28]	; (216e4 <m2m_wifi_cb+0x350>)
   216c6:	47a0      	blx	r4
   216c8:	1e03      	subs	r3, r0, #0
   216ca:	d130      	bne.n	2172e <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   216cc:	4b06      	ldr	r3, [pc, #24]	; (216e8 <m2m_wifi_cb+0x354>)
   216ce:	681b      	ldr	r3, [r3, #0]
   216d0:	2b00      	cmp	r3, #0
   216d2:	d02c      	beq.n	2172e <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   216d4:	4b04      	ldr	r3, [pc, #16]	; (216e8 <m2m_wifi_cb+0x354>)
   216d6:	681b      	ldr	r3, [r3, #0]
   216d8:	2270      	movs	r2, #112	; 0x70
   216da:	18ba      	adds	r2, r7, r2
   216dc:	0011      	movs	r1, r2
   216de:	2020      	movs	r0, #32
   216e0:	4798      	blx	r3
}
   216e2:	e024      	b.n	2172e <m2m_wifi_cb+0x39a>
   216e4:	00021159 	.word	0x00021159
   216e8:	20004104 	.word	0x20004104
   216ec:	000205dd 	.word	0x000205dd
   216f0:	00037b4c 	.word	0x00037b4c
   216f4:	0001d8a9 	.word	0x0001d8a9
   216f8:	00037b58 	.word	0x00037b58
   216fc:	00037b78 	.word	0x00037b78
   21700:	20004101 	.word	0x20004101
   21704:	20004100 	.word	0x20004100
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21708:	2324      	movs	r3, #36	; 0x24
   2170a:	33ff      	adds	r3, #255	; 0xff
   2170c:	001a      	movs	r2, r3
   2170e:	490a      	ldr	r1, [pc, #40]	; (21738 <m2m_wifi_cb+0x3a4>)
   21710:	4b0a      	ldr	r3, [pc, #40]	; (2173c <m2m_wifi_cb+0x3a8>)
   21712:	0018      	movs	r0, r3
   21714:	4b0a      	ldr	r3, [pc, #40]	; (21740 <m2m_wifi_cb+0x3ac>)
   21716:	4798      	blx	r3
   21718:	1dfb      	adds	r3, r7, #7
   2171a:	781a      	ldrb	r2, [r3, #0]
   2171c:	4b09      	ldr	r3, [pc, #36]	; (21744 <m2m_wifi_cb+0x3b0>)
   2171e:	0011      	movs	r1, r2
   21720:	0018      	movs	r0, r3
   21722:	4b07      	ldr	r3, [pc, #28]	; (21740 <m2m_wifi_cb+0x3ac>)
   21724:	4798      	blx	r3
   21726:	4b08      	ldr	r3, [pc, #32]	; (21748 <m2m_wifi_cb+0x3b4>)
   21728:	0018      	movs	r0, r3
   2172a:	4b05      	ldr	r3, [pc, #20]	; (21740 <m2m_wifi_cb+0x3ac>)
   2172c:	4798      	blx	r3
}
   2172e:	46c0      	nop			; (mov r8, r8)
   21730:	46bd      	mov	sp, r7
   21732:	b02d      	add	sp, #180	; 0xb4
   21734:	bd90      	pop	{r4, r7, pc}
   21736:	46c0      	nop			; (mov r8, r8)
   21738:	00037f18 	.word	0x00037f18
   2173c:	00037b7c 	.word	0x00037b7c
   21740:	0001d8a9 	.word	0x0001d8a9
   21744:	00037b90 	.word	0x00037b90
   21748:	00037b78 	.word	0x00037b78

0002174c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   2174c:	b590      	push	{r4, r7, lr}
   2174e:	b091      	sub	sp, #68	; 0x44
   21750:	af02      	add	r7, sp, #8
   21752:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21754:	2337      	movs	r3, #55	; 0x37
   21756:	18fb      	adds	r3, r7, r3
   21758:	2200      	movs	r2, #0
   2175a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   2175c:	230b      	movs	r3, #11
   2175e:	18fb      	adds	r3, r7, r3
   21760:	2201      	movs	r2, #1
   21762:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21764:	687b      	ldr	r3, [r7, #4]
   21766:	2b00      	cmp	r3, #0
   21768:	d104      	bne.n	21774 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2176a:	2337      	movs	r3, #55	; 0x37
   2176c:	18fb      	adds	r3, r7, r3
   2176e:	22f4      	movs	r2, #244	; 0xf4
   21770:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   21772:	e0b3      	b.n	218dc <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   21774:	687b      	ldr	r3, [r7, #4]
   21776:	681a      	ldr	r2, [r3, #0]
   21778:	4b5c      	ldr	r3, [pc, #368]	; (218ec <m2m_wifi_init+0x1a0>)
   2177a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   2177c:	4b5c      	ldr	r3, [pc, #368]	; (218f0 <m2m_wifi_init+0x1a4>)
   2177e:	2200      	movs	r2, #0
   21780:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   21782:	2337      	movs	r3, #55	; 0x37
   21784:	18fc      	adds	r4, r7, r3
   21786:	230b      	movs	r3, #11
   21788:	18fb      	adds	r3, r7, r3
   2178a:	0018      	movs	r0, r3
   2178c:	4b59      	ldr	r3, [pc, #356]	; (218f4 <m2m_wifi_init+0x1a8>)
   2178e:	4798      	blx	r3
   21790:	0003      	movs	r3, r0
   21792:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21794:	2337      	movs	r3, #55	; 0x37
   21796:	18fb      	adds	r3, r7, r3
   21798:	781b      	ldrb	r3, [r3, #0]
   2179a:	b25b      	sxtb	r3, r3
   2179c:	2b00      	cmp	r3, #0
   2179e:	d000      	beq.n	217a2 <m2m_wifi_init+0x56>
   217a0:	e099      	b.n	218d6 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   217a2:	2337      	movs	r3, #55	; 0x37
   217a4:	18fc      	adds	r4, r7, r3
   217a6:	2000      	movs	r0, #0
   217a8:	4b53      	ldr	r3, [pc, #332]	; (218f8 <m2m_wifi_init+0x1ac>)
   217aa:	4798      	blx	r3
   217ac:	0003      	movs	r3, r0
   217ae:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   217b0:	2337      	movs	r3, #55	; 0x37
   217b2:	18fb      	adds	r3, r7, r3
   217b4:	781b      	ldrb	r3, [r3, #0]
   217b6:	b25b      	sxtb	r3, r3
   217b8:	2b00      	cmp	r3, #0
   217ba:	d000      	beq.n	217be <m2m_wifi_init+0x72>
   217bc:	e086      	b.n	218cc <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   217be:	4b4f      	ldr	r3, [pc, #316]	; (218fc <m2m_wifi_init+0x1b0>)
   217c0:	0019      	movs	r1, r3
   217c2:	2001      	movs	r0, #1
   217c4:	4b4e      	ldr	r3, [pc, #312]	; (21900 <m2m_wifi_init+0x1b4>)
   217c6:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   217c8:	2337      	movs	r3, #55	; 0x37
   217ca:	18fc      	adds	r4, r7, r3
   217cc:	230c      	movs	r3, #12
   217ce:	18fb      	adds	r3, r7, r3
   217d0:	0018      	movs	r0, r3
   217d2:	4b4c      	ldr	r3, [pc, #304]	; (21904 <m2m_wifi_init+0x1b8>)
   217d4:	4798      	blx	r3
   217d6:	0003      	movs	r3, r0
   217d8:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   217da:	4b4b      	ldr	r3, [pc, #300]	; (21908 <m2m_wifi_init+0x1bc>)
   217dc:	0018      	movs	r0, r3
   217de:	4b4b      	ldr	r3, [pc, #300]	; (2190c <m2m_wifi_init+0x1c0>)
   217e0:	4798      	blx	r3
   217e2:	230c      	movs	r3, #12
   217e4:	18fb      	adds	r3, r7, r3
   217e6:	791b      	ldrb	r3, [r3, #4]
   217e8:	0019      	movs	r1, r3
   217ea:	230c      	movs	r3, #12
   217ec:	18fb      	adds	r3, r7, r3
   217ee:	795b      	ldrb	r3, [r3, #5]
   217f0:	001a      	movs	r2, r3
   217f2:	230c      	movs	r3, #12
   217f4:	18fb      	adds	r3, r7, r3
   217f6:	799b      	ldrb	r3, [r3, #6]
   217f8:	001c      	movs	r4, r3
   217fa:	230c      	movs	r3, #12
   217fc:	18fb      	adds	r3, r7, r3
   217fe:	8c1b      	ldrh	r3, [r3, #32]
   21800:	4843      	ldr	r0, [pc, #268]	; (21910 <m2m_wifi_init+0x1c4>)
   21802:	9300      	str	r3, [sp, #0]
   21804:	0023      	movs	r3, r4
   21806:	4c41      	ldr	r4, [pc, #260]	; (2190c <m2m_wifi_init+0x1c0>)
   21808:	47a0      	blx	r4
   2180a:	4b42      	ldr	r3, [pc, #264]	; (21914 <m2m_wifi_init+0x1c8>)
   2180c:	0018      	movs	r0, r3
   2180e:	4b3f      	ldr	r3, [pc, #252]	; (2190c <m2m_wifi_init+0x1c0>)
   21810:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21812:	4b3d      	ldr	r3, [pc, #244]	; (21908 <m2m_wifi_init+0x1bc>)
   21814:	0018      	movs	r0, r3
   21816:	4b3d      	ldr	r3, [pc, #244]	; (2190c <m2m_wifi_init+0x1c0>)
   21818:	4798      	blx	r3
   2181a:	230c      	movs	r3, #12
   2181c:	18fb      	adds	r3, r7, r3
   2181e:	3316      	adds	r3, #22
   21820:	001a      	movs	r2, r3
   21822:	230c      	movs	r3, #12
   21824:	18fb      	adds	r3, r7, r3
   21826:	330a      	adds	r3, #10
   21828:	0019      	movs	r1, r3
   2182a:	4b3b      	ldr	r3, [pc, #236]	; (21918 <m2m_wifi_init+0x1cc>)
   2182c:	0018      	movs	r0, r3
   2182e:	4b37      	ldr	r3, [pc, #220]	; (2190c <m2m_wifi_init+0x1c0>)
   21830:	4798      	blx	r3
   21832:	4b38      	ldr	r3, [pc, #224]	; (21914 <m2m_wifi_init+0x1c8>)
   21834:	0018      	movs	r0, r3
   21836:	4b35      	ldr	r3, [pc, #212]	; (2190c <m2m_wifi_init+0x1c0>)
   21838:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   2183a:	4b33      	ldr	r3, [pc, #204]	; (21908 <m2m_wifi_init+0x1bc>)
   2183c:	0018      	movs	r0, r3
   2183e:	4b33      	ldr	r3, [pc, #204]	; (2190c <m2m_wifi_init+0x1c0>)
   21840:	4798      	blx	r3
   21842:	230c      	movs	r3, #12
   21844:	18fb      	adds	r3, r7, r3
   21846:	79db      	ldrb	r3, [r3, #7]
   21848:	0019      	movs	r1, r3
   2184a:	230c      	movs	r3, #12
   2184c:	18fb      	adds	r3, r7, r3
   2184e:	7a1b      	ldrb	r3, [r3, #8]
   21850:	001a      	movs	r2, r3
   21852:	230c      	movs	r3, #12
   21854:	18fb      	adds	r3, r7, r3
   21856:	7a5b      	ldrb	r3, [r3, #9]
   21858:	4830      	ldr	r0, [pc, #192]	; (2191c <m2m_wifi_init+0x1d0>)
   2185a:	4c2c      	ldr	r4, [pc, #176]	; (2190c <m2m_wifi_init+0x1c0>)
   2185c:	47a0      	blx	r4
   2185e:	4b2d      	ldr	r3, [pc, #180]	; (21914 <m2m_wifi_init+0x1c8>)
   21860:	0018      	movs	r0, r3
   21862:	4b2a      	ldr	r3, [pc, #168]	; (2190c <m2m_wifi_init+0x1c0>)
   21864:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21866:	4b28      	ldr	r3, [pc, #160]	; (21908 <m2m_wifi_init+0x1bc>)
   21868:	0018      	movs	r0, r3
   2186a:	4b28      	ldr	r3, [pc, #160]	; (2190c <m2m_wifi_init+0x1c0>)
   2186c:	4798      	blx	r3
   2186e:	482c      	ldr	r0, [pc, #176]	; (21920 <m2m_wifi_init+0x1d4>)
   21870:	2304      	movs	r3, #4
   21872:	2205      	movs	r2, #5
   21874:	2113      	movs	r1, #19
   21876:	4c25      	ldr	r4, [pc, #148]	; (2190c <m2m_wifi_init+0x1c0>)
   21878:	47a0      	blx	r4
   2187a:	4b26      	ldr	r3, [pc, #152]	; (21914 <m2m_wifi_init+0x1c8>)
   2187c:	0018      	movs	r0, r3
   2187e:	4b23      	ldr	r3, [pc, #140]	; (2190c <m2m_wifi_init+0x1c0>)
   21880:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   21882:	4b21      	ldr	r3, [pc, #132]	; (21908 <m2m_wifi_init+0x1bc>)
   21884:	0018      	movs	r0, r3
   21886:	4b21      	ldr	r3, [pc, #132]	; (2190c <m2m_wifi_init+0x1c0>)
   21888:	4798      	blx	r3
   2188a:	4a26      	ldr	r2, [pc, #152]	; (21924 <m2m_wifi_init+0x1d8>)
   2188c:	4926      	ldr	r1, [pc, #152]	; (21928 <m2m_wifi_init+0x1dc>)
   2188e:	4b27      	ldr	r3, [pc, #156]	; (2192c <m2m_wifi_init+0x1e0>)
   21890:	0018      	movs	r0, r3
   21892:	4b1e      	ldr	r3, [pc, #120]	; (2190c <m2m_wifi_init+0x1c0>)
   21894:	4798      	blx	r3
   21896:	4b1f      	ldr	r3, [pc, #124]	; (21914 <m2m_wifi_init+0x1c8>)
   21898:	0018      	movs	r0, r3
   2189a:	4b1c      	ldr	r3, [pc, #112]	; (2190c <m2m_wifi_init+0x1c0>)
   2189c:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   2189e:	2337      	movs	r3, #55	; 0x37
   218a0:	18fb      	adds	r3, r7, r3
   218a2:	781b      	ldrb	r3, [r3, #0]
   218a4:	b25b      	sxtb	r3, r3
   218a6:	330d      	adds	r3, #13
   218a8:	d117      	bne.n	218da <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   218aa:	23e8      	movs	r3, #232	; 0xe8
   218ac:	33ff      	adds	r3, #255	; 0xff
   218ae:	001a      	movs	r2, r3
   218b0:	491f      	ldr	r1, [pc, #124]	; (21930 <m2m_wifi_init+0x1e4>)
   218b2:	4b20      	ldr	r3, [pc, #128]	; (21934 <m2m_wifi_init+0x1e8>)
   218b4:	0018      	movs	r0, r3
   218b6:	4b15      	ldr	r3, [pc, #84]	; (2190c <m2m_wifi_init+0x1c0>)
   218b8:	4798      	blx	r3
   218ba:	4b1f      	ldr	r3, [pc, #124]	; (21938 <m2m_wifi_init+0x1ec>)
   218bc:	0018      	movs	r0, r3
   218be:	4b13      	ldr	r3, [pc, #76]	; (2190c <m2m_wifi_init+0x1c0>)
   218c0:	4798      	blx	r3
   218c2:	4b14      	ldr	r3, [pc, #80]	; (21914 <m2m_wifi_init+0x1c8>)
   218c4:	0018      	movs	r0, r3
   218c6:	4b11      	ldr	r3, [pc, #68]	; (2190c <m2m_wifi_init+0x1c0>)
   218c8:	4798      	blx	r3
	}

	goto _EXIT0;
   218ca:	e006      	b.n	218da <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   218cc:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   218ce:	2000      	movs	r0, #0
   218d0:	4b1a      	ldr	r3, [pc, #104]	; (2193c <m2m_wifi_init+0x1f0>)
   218d2:	4798      	blx	r3
   218d4:	e002      	b.n	218dc <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   218d6:	46c0      	nop			; (mov r8, r8)
   218d8:	e000      	b.n	218dc <m2m_wifi_init+0x190>
	goto _EXIT0;
   218da:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   218dc:	2337      	movs	r3, #55	; 0x37
   218de:	18fb      	adds	r3, r7, r3
   218e0:	781b      	ldrb	r3, [r3, #0]
   218e2:	b25b      	sxtb	r3, r3
}
   218e4:	0018      	movs	r0, r3
   218e6:	46bd      	mov	sp, r7
   218e8:	b00f      	add	sp, #60	; 0x3c
   218ea:	bd90      	pop	{r4, r7, pc}
   218ec:	20004104 	.word	0x20004104
   218f0:	20004101 	.word	0x20004101
   218f4:	00022a71 	.word	0x00022a71
   218f8:	000207f5 	.word	0x000207f5
   218fc:	00021395 	.word	0x00021395
   21900:	000212d9 	.word	0x000212d9
   21904:	000228a5 	.word	0x000228a5
   21908:	00037b4c 	.word	0x00037b4c
   2190c:	0001d8a9 	.word	0x0001d8a9
   21910:	00037cf0 	.word	0x00037cf0
   21914:	00037b78 	.word	0x00037b78
   21918:	00037d18 	.word	0x00037d18
   2191c:	00037d34 	.word	0x00037d34
   21920:	00037d58 	.word	0x00037d58
   21924:	00037d70 	.word	0x00037d70
   21928:	00037d7c 	.word	0x00037d7c
   2192c:	00037d88 	.word	0x00037d88
   21930:	00037f24 	.word	0x00037f24
   21934:	00037b7c 	.word	0x00037b7c
   21938:	00037da0 	.word	0x00037da0
   2193c:	00022c01 	.word	0x00022c01

00021940 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21940:	b580      	push	{r7, lr}
   21942:	b082      	sub	sp, #8
   21944:	af00      	add	r7, sp, #0
   21946:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21948:	4b03      	ldr	r3, [pc, #12]	; (21958 <m2m_wifi_handle_events+0x18>)
   2194a:	4798      	blx	r3
   2194c:	0003      	movs	r3, r0
}
   2194e:	0018      	movs	r0, r3
   21950:	46bd      	mov	sp, r7
   21952:	b002      	add	sp, #8
   21954:	bd80      	pop	{r7, pc}
   21956:	46c0      	nop			; (mov r8, r8)
   21958:	000210b9 	.word	0x000210b9

0002195c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   2195c:	b590      	push	{r4, r7, lr}
   2195e:	b087      	sub	sp, #28
   21960:	af02      	add	r7, sp, #8
   21962:	60f8      	str	r0, [r7, #12]
   21964:	0008      	movs	r0, r1
   21966:	0011      	movs	r1, r2
   21968:	607b      	str	r3, [r7, #4]
   2196a:	230b      	movs	r3, #11
   2196c:	18fb      	adds	r3, r7, r3
   2196e:	1c02      	adds	r2, r0, #0
   21970:	701a      	strb	r2, [r3, #0]
   21972:	230a      	movs	r3, #10
   21974:	18fb      	adds	r3, r7, r3
   21976:	1c0a      	adds	r2, r1, #0
   21978:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2197a:	687c      	ldr	r4, [r7, #4]
   2197c:	230a      	movs	r3, #10
   2197e:	18fb      	adds	r3, r7, r3
   21980:	781a      	ldrb	r2, [r3, #0]
   21982:	230b      	movs	r3, #11
   21984:	18fb      	adds	r3, r7, r3
   21986:	7819      	ldrb	r1, [r3, #0]
   21988:	68f8      	ldr	r0, [r7, #12]
   2198a:	2300      	movs	r3, #0
   2198c:	9301      	str	r3, [sp, #4]
   2198e:	2320      	movs	r3, #32
   21990:	18fb      	adds	r3, r7, r3
   21992:	881b      	ldrh	r3, [r3, #0]
   21994:	9300      	str	r3, [sp, #0]
   21996:	0023      	movs	r3, r4
   21998:	4c03      	ldr	r4, [pc, #12]	; (219a8 <m2m_wifi_connect+0x4c>)
   2199a:	47a0      	blx	r4
   2199c:	0003      	movs	r3, r0
}
   2199e:	0018      	movs	r0, r3
   219a0:	46bd      	mov	sp, r7
   219a2:	b005      	add	sp, #20
   219a4:	bd90      	pop	{r4, r7, pc}
   219a6:	46c0      	nop			; (mov r8, r8)
   219a8:	000219ad 	.word	0x000219ad

000219ac <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   219ac:	b5b0      	push	{r4, r5, r7, lr}
   219ae:	b0aa      	sub	sp, #168	; 0xa8
   219b0:	af04      	add	r7, sp, #16
   219b2:	60f8      	str	r0, [r7, #12]
   219b4:	0008      	movs	r0, r1
   219b6:	0011      	movs	r1, r2
   219b8:	607b      	str	r3, [r7, #4]
   219ba:	230b      	movs	r3, #11
   219bc:	18fb      	adds	r3, r7, r3
   219be:	1c02      	adds	r2, r0, #0
   219c0:	701a      	strb	r2, [r3, #0]
   219c2:	230a      	movs	r3, #10
   219c4:	18fb      	adds	r3, r7, r3
   219c6:	1c0a      	adds	r2, r1, #0
   219c8:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   219ca:	2397      	movs	r3, #151	; 0x97
   219cc:	18fb      	adds	r3, r7, r3
   219ce:	2200      	movs	r2, #0
   219d0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   219d2:	230a      	movs	r3, #10
   219d4:	18fb      	adds	r3, r7, r3
   219d6:	781b      	ldrb	r3, [r3, #0]
   219d8:	2b01      	cmp	r3, #1
   219da:	d100      	bne.n	219de <m2m_wifi_connect_sc+0x32>
   219dc:	e085      	b.n	21aea <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   219de:	687b      	ldr	r3, [r7, #4]
   219e0:	2b00      	cmp	r3, #0
   219e2:	d112      	bne.n	21a0a <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   219e4:	4ad8      	ldr	r2, [pc, #864]	; (21d48 <m2m_wifi_connect_sc+0x39c>)
   219e6:	49d9      	ldr	r1, [pc, #868]	; (21d4c <m2m_wifi_connect_sc+0x3a0>)
   219e8:	4bd9      	ldr	r3, [pc, #868]	; (21d50 <m2m_wifi_connect_sc+0x3a4>)
   219ea:	0018      	movs	r0, r3
   219ec:	4bd9      	ldr	r3, [pc, #868]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   219ee:	4798      	blx	r3
   219f0:	4bd9      	ldr	r3, [pc, #868]	; (21d58 <m2m_wifi_connect_sc+0x3ac>)
   219f2:	0018      	movs	r0, r3
   219f4:	4bd7      	ldr	r3, [pc, #860]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   219f6:	4798      	blx	r3
   219f8:	4bd8      	ldr	r3, [pc, #864]	; (21d5c <m2m_wifi_connect_sc+0x3b0>)
   219fa:	0018      	movs	r0, r3
   219fc:	4bd5      	ldr	r3, [pc, #852]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   219fe:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21a00:	2397      	movs	r3, #151	; 0x97
   21a02:	18fb      	adds	r3, r7, r3
   21a04:	22f4      	movs	r2, #244	; 0xf4
   21a06:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21a08:	e1f9      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   21a0a:	230a      	movs	r3, #10
   21a0c:	18fb      	adds	r3, r7, r3
   21a0e:	781b      	ldrb	r3, [r3, #0]
   21a10:	2b02      	cmp	r3, #2
   21a12:	d16a      	bne.n	21aea <m2m_wifi_connect_sc+0x13e>
   21a14:	687b      	ldr	r3, [r7, #4]
   21a16:	0018      	movs	r0, r3
   21a18:	4bd1      	ldr	r3, [pc, #836]	; (21d60 <m2m_wifi_connect_sc+0x3b4>)
   21a1a:	4798      	blx	r3
   21a1c:	0003      	movs	r3, r0
   21a1e:	2b40      	cmp	r3, #64	; 0x40
   21a20:	d163      	bne.n	21aea <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21a22:	2396      	movs	r3, #150	; 0x96
   21a24:	18fb      	adds	r3, r7, r3
   21a26:	2200      	movs	r2, #0
   21a28:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21a2a:	687b      	ldr	r3, [r7, #4]
   21a2c:	2290      	movs	r2, #144	; 0x90
   21a2e:	18ba      	adds	r2, r7, r2
   21a30:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21a32:	e055      	b.n	21ae0 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21a34:	2396      	movs	r3, #150	; 0x96
   21a36:	18fb      	adds	r3, r7, r3
   21a38:	781b      	ldrb	r3, [r3, #0]
   21a3a:	2290      	movs	r2, #144	; 0x90
   21a3c:	18ba      	adds	r2, r7, r2
   21a3e:	6812      	ldr	r2, [r2, #0]
   21a40:	18d3      	adds	r3, r2, r3
   21a42:	781b      	ldrb	r3, [r3, #0]
   21a44:	2b2f      	cmp	r3, #47	; 0x2f
   21a46:	d931      	bls.n	21aac <m2m_wifi_connect_sc+0x100>
   21a48:	2396      	movs	r3, #150	; 0x96
   21a4a:	18fb      	adds	r3, r7, r3
   21a4c:	781b      	ldrb	r3, [r3, #0]
   21a4e:	2290      	movs	r2, #144	; 0x90
   21a50:	18ba      	adds	r2, r7, r2
   21a52:	6812      	ldr	r2, [r2, #0]
   21a54:	18d3      	adds	r3, r2, r3
   21a56:	781b      	ldrb	r3, [r3, #0]
   21a58:	2b39      	cmp	r3, #57	; 0x39
   21a5a:	d909      	bls.n	21a70 <m2m_wifi_connect_sc+0xc4>
   21a5c:	2396      	movs	r3, #150	; 0x96
   21a5e:	18fb      	adds	r3, r7, r3
   21a60:	781b      	ldrb	r3, [r3, #0]
   21a62:	2290      	movs	r2, #144	; 0x90
   21a64:	18ba      	adds	r2, r7, r2
   21a66:	6812      	ldr	r2, [r2, #0]
   21a68:	18d3      	adds	r3, r2, r3
   21a6a:	781b      	ldrb	r3, [r3, #0]
   21a6c:	2b40      	cmp	r3, #64	; 0x40
   21a6e:	d91d      	bls.n	21aac <m2m_wifi_connect_sc+0x100>
   21a70:	2396      	movs	r3, #150	; 0x96
   21a72:	18fb      	adds	r3, r7, r3
   21a74:	781b      	ldrb	r3, [r3, #0]
   21a76:	2290      	movs	r2, #144	; 0x90
   21a78:	18ba      	adds	r2, r7, r2
   21a7a:	6812      	ldr	r2, [r2, #0]
   21a7c:	18d3      	adds	r3, r2, r3
   21a7e:	781b      	ldrb	r3, [r3, #0]
   21a80:	2b46      	cmp	r3, #70	; 0x46
   21a82:	d909      	bls.n	21a98 <m2m_wifi_connect_sc+0xec>
   21a84:	2396      	movs	r3, #150	; 0x96
   21a86:	18fb      	adds	r3, r7, r3
   21a88:	781b      	ldrb	r3, [r3, #0]
   21a8a:	2290      	movs	r2, #144	; 0x90
   21a8c:	18ba      	adds	r2, r7, r2
   21a8e:	6812      	ldr	r2, [r2, #0]
   21a90:	18d3      	adds	r3, r2, r3
   21a92:	781b      	ldrb	r3, [r3, #0]
   21a94:	2b60      	cmp	r3, #96	; 0x60
   21a96:	d909      	bls.n	21aac <m2m_wifi_connect_sc+0x100>
   21a98:	2396      	movs	r3, #150	; 0x96
   21a9a:	18fb      	adds	r3, r7, r3
   21a9c:	781b      	ldrb	r3, [r3, #0]
   21a9e:	2290      	movs	r2, #144	; 0x90
   21aa0:	18ba      	adds	r2, r7, r2
   21aa2:	6812      	ldr	r2, [r2, #0]
   21aa4:	18d3      	adds	r3, r2, r3
   21aa6:	781b      	ldrb	r3, [r3, #0]
   21aa8:	2b66      	cmp	r3, #102	; 0x66
   21aaa:	d912      	bls.n	21ad2 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21aac:	4aad      	ldr	r2, [pc, #692]	; (21d64 <m2m_wifi_connect_sc+0x3b8>)
   21aae:	49a7      	ldr	r1, [pc, #668]	; (21d4c <m2m_wifi_connect_sc+0x3a0>)
   21ab0:	4ba7      	ldr	r3, [pc, #668]	; (21d50 <m2m_wifi_connect_sc+0x3a4>)
   21ab2:	0018      	movs	r0, r3
   21ab4:	4ba7      	ldr	r3, [pc, #668]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21ab6:	4798      	blx	r3
   21ab8:	4bab      	ldr	r3, [pc, #684]	; (21d68 <m2m_wifi_connect_sc+0x3bc>)
   21aba:	0018      	movs	r0, r3
   21abc:	4ba5      	ldr	r3, [pc, #660]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21abe:	4798      	blx	r3
   21ac0:	4ba6      	ldr	r3, [pc, #664]	; (21d5c <m2m_wifi_connect_sc+0x3b0>)
   21ac2:	0018      	movs	r0, r3
   21ac4:	4ba3      	ldr	r3, [pc, #652]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21ac6:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21ac8:	2397      	movs	r3, #151	; 0x97
   21aca:	18fb      	adds	r3, r7, r3
   21acc:	22f4      	movs	r2, #244	; 0xf4
   21ace:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21ad0:	e195      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21ad2:	2396      	movs	r3, #150	; 0x96
   21ad4:	18fb      	adds	r3, r7, r3
   21ad6:	781a      	ldrb	r2, [r3, #0]
   21ad8:	2396      	movs	r3, #150	; 0x96
   21ada:	18fb      	adds	r3, r7, r3
   21adc:	3201      	adds	r2, #1
   21ade:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21ae0:	2396      	movs	r3, #150	; 0x96
   21ae2:	18fb      	adds	r3, r7, r3
   21ae4:	781b      	ldrb	r3, [r3, #0]
   21ae6:	2b3f      	cmp	r3, #63	; 0x3f
   21ae8:	d9a4      	bls.n	21a34 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   21aea:	230b      	movs	r3, #11
   21aec:	18fb      	adds	r3, r7, r3
   21aee:	781b      	ldrb	r3, [r3, #0]
   21af0:	2b00      	cmp	r3, #0
   21af2:	d004      	beq.n	21afe <m2m_wifi_connect_sc+0x152>
   21af4:	230b      	movs	r3, #11
   21af6:	18fb      	adds	r3, r7, r3
   21af8:	781b      	ldrb	r3, [r3, #0]
   21afa:	2b20      	cmp	r3, #32
   21afc:	d913      	bls.n	21b26 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21afe:	238c      	movs	r3, #140	; 0x8c
   21b00:	009a      	lsls	r2, r3, #2
   21b02:	4992      	ldr	r1, [pc, #584]	; (21d4c <m2m_wifi_connect_sc+0x3a0>)
   21b04:	4b92      	ldr	r3, [pc, #584]	; (21d50 <m2m_wifi_connect_sc+0x3a4>)
   21b06:	0018      	movs	r0, r3
   21b08:	4b92      	ldr	r3, [pc, #584]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21b0a:	4798      	blx	r3
   21b0c:	4b97      	ldr	r3, [pc, #604]	; (21d6c <m2m_wifi_connect_sc+0x3c0>)
   21b0e:	0018      	movs	r0, r3
   21b10:	4b90      	ldr	r3, [pc, #576]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21b12:	4798      	blx	r3
   21b14:	4b91      	ldr	r3, [pc, #580]	; (21d5c <m2m_wifi_connect_sc+0x3b0>)
   21b16:	0018      	movs	r0, r3
   21b18:	4b8e      	ldr	r3, [pc, #568]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21b1a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21b1c:	2397      	movs	r3, #151	; 0x97
   21b1e:	18fb      	adds	r3, r7, r3
   21b20:	22f4      	movs	r2, #244	; 0xf4
   21b22:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21b24:	e16b      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21b26:	23a8      	movs	r3, #168	; 0xa8
   21b28:	18fb      	adds	r3, r7, r3
   21b2a:	881b      	ldrh	r3, [r3, #0]
   21b2c:	2b00      	cmp	r3, #0
   21b2e:	d004      	beq.n	21b3a <m2m_wifi_connect_sc+0x18e>
   21b30:	23a8      	movs	r3, #168	; 0xa8
   21b32:	18fb      	adds	r3, r7, r3
   21b34:	881b      	ldrh	r3, [r3, #0]
   21b36:	2b0e      	cmp	r3, #14
   21b38:	d917      	bls.n	21b6a <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21b3a:	23a8      	movs	r3, #168	; 0xa8
   21b3c:	18fb      	adds	r3, r7, r3
   21b3e:	881b      	ldrh	r3, [r3, #0]
   21b40:	2bff      	cmp	r3, #255	; 0xff
   21b42:	d012      	beq.n	21b6a <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21b44:	4a8a      	ldr	r2, [pc, #552]	; (21d70 <m2m_wifi_connect_sc+0x3c4>)
   21b46:	4981      	ldr	r1, [pc, #516]	; (21d4c <m2m_wifi_connect_sc+0x3a0>)
   21b48:	4b81      	ldr	r3, [pc, #516]	; (21d50 <m2m_wifi_connect_sc+0x3a4>)
   21b4a:	0018      	movs	r0, r3
   21b4c:	4b81      	ldr	r3, [pc, #516]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21b4e:	4798      	blx	r3
   21b50:	4b88      	ldr	r3, [pc, #544]	; (21d74 <m2m_wifi_connect_sc+0x3c8>)
   21b52:	0018      	movs	r0, r3
   21b54:	4b7f      	ldr	r3, [pc, #508]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21b56:	4798      	blx	r3
   21b58:	4b80      	ldr	r3, [pc, #512]	; (21d5c <m2m_wifi_connect_sc+0x3b0>)
   21b5a:	0018      	movs	r0, r3
   21b5c:	4b7d      	ldr	r3, [pc, #500]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21b5e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21b60:	2397      	movs	r3, #151	; 0x97
   21b62:	18fb      	adds	r3, r7, r3
   21b64:	22f4      	movs	r2, #244	; 0xf4
   21b66:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21b68:	e149      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   21b6a:	230b      	movs	r3, #11
   21b6c:	18fb      	adds	r3, r7, r3
   21b6e:	781a      	ldrb	r2, [r3, #0]
   21b70:	68f9      	ldr	r1, [r7, #12]
   21b72:	2314      	movs	r3, #20
   21b74:	18fb      	adds	r3, r7, r3
   21b76:	3346      	adds	r3, #70	; 0x46
   21b78:	0018      	movs	r0, r3
   21b7a:	4b7f      	ldr	r3, [pc, #508]	; (21d78 <m2m_wifi_connect_sc+0x3cc>)
   21b7c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21b7e:	230b      	movs	r3, #11
   21b80:	18fb      	adds	r3, r7, r3
   21b82:	781b      	ldrb	r3, [r3, #0]
   21b84:	2214      	movs	r2, #20
   21b86:	18ba      	adds	r2, r7, r2
   21b88:	2146      	movs	r1, #70	; 0x46
   21b8a:	18d3      	adds	r3, r2, r3
   21b8c:	185b      	adds	r3, r3, r1
   21b8e:	2200      	movs	r2, #0
   21b90:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21b92:	2314      	movs	r3, #20
   21b94:	18fb      	adds	r3, r7, r3
   21b96:	22a8      	movs	r2, #168	; 0xa8
   21b98:	18ba      	adds	r2, r7, r2
   21b9a:	2144      	movs	r1, #68	; 0x44
   21b9c:	8812      	ldrh	r2, [r2, #0]
   21b9e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   21ba0:	23ac      	movs	r3, #172	; 0xac
   21ba2:	18fb      	adds	r3, r7, r3
   21ba4:	781b      	ldrb	r3, [r3, #0]
   21ba6:	1e5a      	subs	r2, r3, #1
   21ba8:	4193      	sbcs	r3, r2
   21baa:	b2db      	uxtb	r3, r3
   21bac:	0019      	movs	r1, r3
   21bae:	2314      	movs	r3, #20
   21bb0:	18fb      	adds	r3, r7, r3
   21bb2:	2267      	movs	r2, #103	; 0x67
   21bb4:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   21bb6:	2314      	movs	r3, #20
   21bb8:	18fb      	adds	r3, r7, r3
   21bba:	228c      	movs	r2, #140	; 0x8c
   21bbc:	18ba      	adds	r2, r7, r2
   21bbe:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21bc0:	238c      	movs	r3, #140	; 0x8c
   21bc2:	18fb      	adds	r3, r7, r3
   21bc4:	681b      	ldr	r3, [r3, #0]
   21bc6:	220a      	movs	r2, #10
   21bc8:	18ba      	adds	r2, r7, r2
   21bca:	2141      	movs	r1, #65	; 0x41
   21bcc:	7812      	ldrb	r2, [r2, #0]
   21bce:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21bd0:	230a      	movs	r3, #10
   21bd2:	18fb      	adds	r3, r7, r3
   21bd4:	781b      	ldrb	r3, [r3, #0]
   21bd6:	2b03      	cmp	r3, #3
   21bd8:	d000      	beq.n	21bdc <m2m_wifi_connect_sc+0x230>
   21bda:	e07d      	b.n	21cd8 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21bdc:	687b      	ldr	r3, [r7, #4]
   21bde:	2288      	movs	r2, #136	; 0x88
   21be0:	18ba      	adds	r2, r7, r2
   21be2:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21be4:	238c      	movs	r3, #140	; 0x8c
   21be6:	18fb      	adds	r3, r7, r3
   21be8:	681b      	ldr	r3, [r3, #0]
   21bea:	2284      	movs	r2, #132	; 0x84
   21bec:	18ba      	adds	r2, r7, r2
   21bee:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21bf0:	2388      	movs	r3, #136	; 0x88
   21bf2:	18fb      	adds	r3, r7, r3
   21bf4:	681b      	ldr	r3, [r3, #0]
   21bf6:	781b      	ldrb	r3, [r3, #0]
   21bf8:	3b01      	subs	r3, #1
   21bfa:	b2da      	uxtb	r2, r3
   21bfc:	2384      	movs	r3, #132	; 0x84
   21bfe:	18fb      	adds	r3, r7, r3
   21c00:	681b      	ldr	r3, [r3, #0]
   21c02:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21c04:	2384      	movs	r3, #132	; 0x84
   21c06:	18fb      	adds	r3, r7, r3
   21c08:	681b      	ldr	r3, [r3, #0]
   21c0a:	781b      	ldrb	r3, [r3, #0]
   21c0c:	2b03      	cmp	r3, #3
   21c0e:	d919      	bls.n	21c44 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21c10:	2394      	movs	r3, #148	; 0x94
   21c12:	009a      	lsls	r2, r3, #2
   21c14:	494d      	ldr	r1, [pc, #308]	; (21d4c <m2m_wifi_connect_sc+0x3a0>)
   21c16:	4b4e      	ldr	r3, [pc, #312]	; (21d50 <m2m_wifi_connect_sc+0x3a4>)
   21c18:	0018      	movs	r0, r3
   21c1a:	4b4e      	ldr	r3, [pc, #312]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21c1c:	4798      	blx	r3
   21c1e:	2384      	movs	r3, #132	; 0x84
   21c20:	18fb      	adds	r3, r7, r3
   21c22:	681b      	ldr	r3, [r3, #0]
   21c24:	781b      	ldrb	r3, [r3, #0]
   21c26:	001a      	movs	r2, r3
   21c28:	4b54      	ldr	r3, [pc, #336]	; (21d7c <m2m_wifi_connect_sc+0x3d0>)
   21c2a:	0011      	movs	r1, r2
   21c2c:	0018      	movs	r0, r3
   21c2e:	4b49      	ldr	r3, [pc, #292]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21c30:	4798      	blx	r3
   21c32:	4b4a      	ldr	r3, [pc, #296]	; (21d5c <m2m_wifi_connect_sc+0x3b0>)
   21c34:	0018      	movs	r0, r3
   21c36:	4b47      	ldr	r3, [pc, #284]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21c38:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21c3a:	2397      	movs	r3, #151	; 0x97
   21c3c:	18fb      	adds	r3, r7, r3
   21c3e:	22f4      	movs	r2, #244	; 0xf4
   21c40:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21c42:	e0dc      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21c44:	2388      	movs	r3, #136	; 0x88
   21c46:	18fb      	adds	r3, r7, r3
   21c48:	681b      	ldr	r3, [r3, #0]
   21c4a:	785b      	ldrb	r3, [r3, #1]
   21c4c:	3b01      	subs	r3, #1
   21c4e:	b2da      	uxtb	r2, r3
   21c50:	2384      	movs	r3, #132	; 0x84
   21c52:	18fb      	adds	r3, r7, r3
   21c54:	681b      	ldr	r3, [r3, #0]
   21c56:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21c58:	2384      	movs	r3, #132	; 0x84
   21c5a:	18fb      	adds	r3, r7, r3
   21c5c:	681b      	ldr	r3, [r3, #0]
   21c5e:	785b      	ldrb	r3, [r3, #1]
   21c60:	2b0a      	cmp	r3, #10
   21c62:	d01e      	beq.n	21ca2 <m2m_wifi_connect_sc+0x2f6>
   21c64:	2384      	movs	r3, #132	; 0x84
   21c66:	18fb      	adds	r3, r7, r3
   21c68:	681b      	ldr	r3, [r3, #0]
   21c6a:	785b      	ldrb	r3, [r3, #1]
   21c6c:	2b1a      	cmp	r3, #26
   21c6e:	d018      	beq.n	21ca2 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21c70:	4a43      	ldr	r2, [pc, #268]	; (21d80 <m2m_wifi_connect_sc+0x3d4>)
   21c72:	4936      	ldr	r1, [pc, #216]	; (21d4c <m2m_wifi_connect_sc+0x3a0>)
   21c74:	4b36      	ldr	r3, [pc, #216]	; (21d50 <m2m_wifi_connect_sc+0x3a4>)
   21c76:	0018      	movs	r0, r3
   21c78:	4b36      	ldr	r3, [pc, #216]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21c7a:	4798      	blx	r3
   21c7c:	2384      	movs	r3, #132	; 0x84
   21c7e:	18fb      	adds	r3, r7, r3
   21c80:	681b      	ldr	r3, [r3, #0]
   21c82:	785b      	ldrb	r3, [r3, #1]
   21c84:	001a      	movs	r2, r3
   21c86:	4b3f      	ldr	r3, [pc, #252]	; (21d84 <m2m_wifi_connect_sc+0x3d8>)
   21c88:	0011      	movs	r1, r2
   21c8a:	0018      	movs	r0, r3
   21c8c:	4b31      	ldr	r3, [pc, #196]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21c8e:	4798      	blx	r3
   21c90:	4b32      	ldr	r3, [pc, #200]	; (21d5c <m2m_wifi_connect_sc+0x3b0>)
   21c92:	0018      	movs	r0, r3
   21c94:	4b2f      	ldr	r3, [pc, #188]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21c96:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21c98:	2397      	movs	r3, #151	; 0x97
   21c9a:	18fb      	adds	r3, r7, r3
   21c9c:	22f4      	movs	r2, #244	; 0xf4
   21c9e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21ca0:	e0ad      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   21ca2:	2384      	movs	r3, #132	; 0x84
   21ca4:	18fb      	adds	r3, r7, r3
   21ca6:	681b      	ldr	r3, [r3, #0]
   21ca8:	1c98      	adds	r0, r3, #2
   21caa:	2388      	movs	r3, #136	; 0x88
   21cac:	18fb      	adds	r3, r7, r3
   21cae:	681b      	ldr	r3, [r3, #0]
   21cb0:	1c99      	adds	r1, r3, #2
   21cb2:	2388      	movs	r3, #136	; 0x88
   21cb4:	18fb      	adds	r3, r7, r3
   21cb6:	681b      	ldr	r3, [r3, #0]
   21cb8:	785b      	ldrb	r3, [r3, #1]
   21cba:	001a      	movs	r2, r3
   21cbc:	4b2e      	ldr	r3, [pc, #184]	; (21d78 <m2m_wifi_connect_sc+0x3cc>)
   21cbe:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21cc0:	2388      	movs	r3, #136	; 0x88
   21cc2:	18fb      	adds	r3, r7, r3
   21cc4:	681b      	ldr	r3, [r3, #0]
   21cc6:	785b      	ldrb	r3, [r3, #1]
   21cc8:	001a      	movs	r2, r3
   21cca:	2384      	movs	r3, #132	; 0x84
   21ccc:	18fb      	adds	r3, r7, r3
   21cce:	681b      	ldr	r3, [r3, #0]
   21cd0:	189b      	adds	r3, r3, r2
   21cd2:	2200      	movs	r2, #0
   21cd4:	709a      	strb	r2, [r3, #2]
   21cd6:	e081      	b.n	21ddc <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   21cd8:	230a      	movs	r3, #10
   21cda:	18fb      	adds	r3, r7, r3
   21cdc:	781b      	ldrb	r3, [r3, #0]
   21cde:	2b02      	cmp	r3, #2
   21ce0:	d156      	bne.n	21d90 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21ce2:	2382      	movs	r3, #130	; 0x82
   21ce4:	18fc      	adds	r4, r7, r3
   21ce6:	687b      	ldr	r3, [r7, #4]
   21ce8:	0018      	movs	r0, r3
   21cea:	4b1d      	ldr	r3, [pc, #116]	; (21d60 <m2m_wifi_connect_sc+0x3b4>)
   21cec:	4798      	blx	r3
   21cee:	0003      	movs	r3, r0
   21cf0:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21cf2:	2382      	movs	r3, #130	; 0x82
   21cf4:	18fb      	adds	r3, r7, r3
   21cf6:	881b      	ldrh	r3, [r3, #0]
   21cf8:	2b00      	cmp	r3, #0
   21cfa:	d004      	beq.n	21d06 <m2m_wifi_connect_sc+0x35a>
   21cfc:	2382      	movs	r3, #130	; 0x82
   21cfe:	18fb      	adds	r3, r7, r3
   21d00:	881b      	ldrh	r3, [r3, #0]
   21d02:	2b40      	cmp	r3, #64	; 0x40
   21d04:	d912      	bls.n	21d2c <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   21d06:	4a20      	ldr	r2, [pc, #128]	; (21d88 <m2m_wifi_connect_sc+0x3dc>)
   21d08:	4910      	ldr	r1, [pc, #64]	; (21d4c <m2m_wifi_connect_sc+0x3a0>)
   21d0a:	4b11      	ldr	r3, [pc, #68]	; (21d50 <m2m_wifi_connect_sc+0x3a4>)
   21d0c:	0018      	movs	r0, r3
   21d0e:	4b11      	ldr	r3, [pc, #68]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21d10:	4798      	blx	r3
   21d12:	4b1e      	ldr	r3, [pc, #120]	; (21d8c <m2m_wifi_connect_sc+0x3e0>)
   21d14:	0018      	movs	r0, r3
   21d16:	4b0f      	ldr	r3, [pc, #60]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21d18:	4798      	blx	r3
   21d1a:	4b10      	ldr	r3, [pc, #64]	; (21d5c <m2m_wifi_connect_sc+0x3b0>)
   21d1c:	0018      	movs	r0, r3
   21d1e:	4b0d      	ldr	r3, [pc, #52]	; (21d54 <m2m_wifi_connect_sc+0x3a8>)
   21d20:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21d22:	2397      	movs	r3, #151	; 0x97
   21d24:	18fb      	adds	r3, r7, r3
   21d26:	22f4      	movs	r2, #244	; 0xf4
   21d28:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21d2a:	e068      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21d2c:	238c      	movs	r3, #140	; 0x8c
   21d2e:	18fb      	adds	r3, r7, r3
   21d30:	6818      	ldr	r0, [r3, #0]
   21d32:	2382      	movs	r3, #130	; 0x82
   21d34:	18fb      	adds	r3, r7, r3
   21d36:	881b      	ldrh	r3, [r3, #0]
   21d38:	3301      	adds	r3, #1
   21d3a:	001a      	movs	r2, r3
   21d3c:	687b      	ldr	r3, [r7, #4]
   21d3e:	0019      	movs	r1, r3
   21d40:	4b0d      	ldr	r3, [pc, #52]	; (21d78 <m2m_wifi_connect_sc+0x3cc>)
   21d42:	4798      	blx	r3
   21d44:	e04a      	b.n	21ddc <m2m_wifi_connect_sc+0x430>
   21d46:	46c0      	nop			; (mov r8, r8)
   21d48:	0000021a 	.word	0x0000021a
   21d4c:	00037f34 	.word	0x00037f34
   21d50:	00037b7c 	.word	0x00037b7c
   21d54:	0001d8a9 	.word	0x0001d8a9
   21d58:	00037dbc 	.word	0x00037dbc
   21d5c:	00037b78 	.word	0x00037b78
   21d60:	0002061b 	.word	0x0002061b
   21d64:	00000226 	.word	0x00000226
   21d68:	00037dd0 	.word	0x00037dd0
   21d6c:	00037de0 	.word	0x00037de0
   21d70:	00000239 	.word	0x00000239
   21d74:	00037df4 	.word	0x00037df4
   21d78:	000205a1 	.word	0x000205a1
   21d7c:	00037e00 	.word	0x00037e00
   21d80:	00000257 	.word	0x00000257
   21d84:	00037e1c 	.word	0x00037e1c
   21d88:	00000266 	.word	0x00000266
   21d8c:	00037e38 	.word	0x00037e38
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   21d90:	230a      	movs	r3, #10
   21d92:	18fb      	adds	r3, r7, r3
   21d94:	781b      	ldrb	r3, [r3, #0]
   21d96:	2b04      	cmp	r3, #4
   21d98:	d108      	bne.n	21dac <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   21d9a:	238c      	movs	r3, #140	; 0x8c
   21d9c:	18fb      	adds	r3, r7, r3
   21d9e:	681b      	ldr	r3, [r3, #0]
   21da0:	6879      	ldr	r1, [r7, #4]
   21da2:	223e      	movs	r2, #62	; 0x3e
   21da4:	0018      	movs	r0, r3
   21da6:	4b1a      	ldr	r3, [pc, #104]	; (21e10 <m2m_wifi_connect_sc+0x464>)
   21da8:	4798      	blx	r3
   21daa:	e017      	b.n	21ddc <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   21dac:	230a      	movs	r3, #10
   21dae:	18fb      	adds	r3, r7, r3
   21db0:	781b      	ldrb	r3, [r3, #0]
   21db2:	2b01      	cmp	r3, #1
   21db4:	d012      	beq.n	21ddc <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   21db6:	4a17      	ldr	r2, [pc, #92]	; (21e14 <m2m_wifi_connect_sc+0x468>)
   21db8:	4917      	ldr	r1, [pc, #92]	; (21e18 <m2m_wifi_connect_sc+0x46c>)
   21dba:	4b18      	ldr	r3, [pc, #96]	; (21e1c <m2m_wifi_connect_sc+0x470>)
   21dbc:	0018      	movs	r0, r3
   21dbe:	4b18      	ldr	r3, [pc, #96]	; (21e20 <m2m_wifi_connect_sc+0x474>)
   21dc0:	4798      	blx	r3
   21dc2:	4b18      	ldr	r3, [pc, #96]	; (21e24 <m2m_wifi_connect_sc+0x478>)
   21dc4:	0018      	movs	r0, r3
   21dc6:	4b16      	ldr	r3, [pc, #88]	; (21e20 <m2m_wifi_connect_sc+0x474>)
   21dc8:	4798      	blx	r3
   21dca:	4b17      	ldr	r3, [pc, #92]	; (21e28 <m2m_wifi_connect_sc+0x47c>)
   21dcc:	0018      	movs	r0, r3
   21dce:	4b14      	ldr	r3, [pc, #80]	; (21e20 <m2m_wifi_connect_sc+0x474>)
   21dd0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21dd2:	2397      	movs	r3, #151	; 0x97
   21dd4:	18fb      	adds	r3, r7, r3
   21dd6:	22f4      	movs	r2, #244	; 0xf4
   21dd8:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21dda:	e010      	b.n	21dfe <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   21ddc:	2397      	movs	r3, #151	; 0x97
   21dde:	18fc      	adds	r4, r7, r3
   21de0:	2314      	movs	r3, #20
   21de2:	18fa      	adds	r2, r7, r3
   21de4:	2300      	movs	r3, #0
   21de6:	9302      	str	r3, [sp, #8]
   21de8:	2300      	movs	r3, #0
   21dea:	9301      	str	r3, [sp, #4]
   21dec:	2300      	movs	r3, #0
   21dee:	9300      	str	r3, [sp, #0]
   21df0:	236c      	movs	r3, #108	; 0x6c
   21df2:	2128      	movs	r1, #40	; 0x28
   21df4:	2001      	movs	r0, #1
   21df6:	4d0d      	ldr	r5, [pc, #52]	; (21e2c <m2m_wifi_connect_sc+0x480>)
   21df8:	47a8      	blx	r5
   21dfa:	0003      	movs	r3, r0
   21dfc:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   21dfe:	2397      	movs	r3, #151	; 0x97
   21e00:	18fb      	adds	r3, r7, r3
   21e02:	781b      	ldrb	r3, [r3, #0]
   21e04:	b25b      	sxtb	r3, r3
}
   21e06:	0018      	movs	r0, r3
   21e08:	46bd      	mov	sp, r7
   21e0a:	b026      	add	sp, #152	; 0x98
   21e0c:	bdb0      	pop	{r4, r5, r7, pc}
   21e0e:	46c0      	nop			; (mov r8, r8)
   21e10:	000205a1 	.word	0x000205a1
   21e14:	00000276 	.word	0x00000276
   21e18:	00037f34 	.word	0x00037f34
   21e1c:	00037b7c 	.word	0x00037b7c
   21e20:	0001d8a9 	.word	0x0001d8a9
   21e24:	00037e54 	.word	0x00037e54
   21e28:	00037b78 	.word	0x00037b78
   21e2c:	0002083d 	.word	0x0002083d

00021e30 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   21e30:	b580      	push	{r7, lr}
   21e32:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21e34:	2300      	movs	r3, #0
}
   21e36:	0018      	movs	r0, r3
   21e38:	46bd      	mov	sp, r7
   21e3a:	bd80      	pop	{r7, pc}

00021e3c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   21e3c:	b590      	push	{r4, r7, lr}
   21e3e:	b087      	sub	sp, #28
   21e40:	af00      	add	r7, sp, #0
   21e42:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21e44:	2317      	movs	r3, #23
   21e46:	18fb      	adds	r3, r7, r3
   21e48:	2200      	movs	r2, #0
   21e4a:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   21e4c:	687b      	ldr	r3, [r7, #4]
   21e4e:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   21e50:	693b      	ldr	r3, [r7, #16]
   21e52:	2280      	movs	r2, #128	; 0x80
   21e54:	0052      	lsls	r2, r2, #1
   21e56:	4313      	orrs	r3, r2
   21e58:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   21e5a:	693a      	ldr	r2, [r7, #16]
   21e5c:	23a5      	movs	r3, #165	; 0xa5
   21e5e:	015b      	lsls	r3, r3, #5
   21e60:	0011      	movs	r1, r2
   21e62:	0018      	movs	r0, r3
   21e64:	4b12      	ldr	r3, [pc, #72]	; (21eb0 <chip_apply_conf+0x74>)
   21e66:	4798      	blx	r3
		if(val32 != 0) {		
   21e68:	693b      	ldr	r3, [r7, #16]
   21e6a:	2b00      	cmp	r3, #0
   21e6c:	d018      	beq.n	21ea0 <chip_apply_conf+0x64>
			uint32 reg = 0;
   21e6e:	2300      	movs	r3, #0
   21e70:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   21e72:	2317      	movs	r3, #23
   21e74:	18fc      	adds	r4, r7, r3
   21e76:	230c      	movs	r3, #12
   21e78:	18fa      	adds	r2, r7, r3
   21e7a:	23a5      	movs	r3, #165	; 0xa5
   21e7c:	015b      	lsls	r3, r3, #5
   21e7e:	0011      	movs	r1, r2
   21e80:	0018      	movs	r0, r3
   21e82:	4b0c      	ldr	r3, [pc, #48]	; (21eb4 <chip_apply_conf+0x78>)
   21e84:	4798      	blx	r3
   21e86:	0003      	movs	r3, r0
   21e88:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21e8a:	2317      	movs	r3, #23
   21e8c:	18fb      	adds	r3, r7, r3
   21e8e:	781b      	ldrb	r3, [r3, #0]
   21e90:	b25b      	sxtb	r3, r3
   21e92:	2b00      	cmp	r3, #0
   21e94:	d1e1      	bne.n	21e5a <chip_apply_conf+0x1e>
				if(reg == val32)
   21e96:	68fa      	ldr	r2, [r7, #12]
   21e98:	693b      	ldr	r3, [r7, #16]
   21e9a:	429a      	cmp	r2, r3
   21e9c:	d002      	beq.n	21ea4 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   21e9e:	e7dc      	b.n	21e5a <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   21ea0:	46c0      	nop			; (mov r8, r8)
   21ea2:	e000      	b.n	21ea6 <chip_apply_conf+0x6a>
					break;
   21ea4:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   21ea6:	2300      	movs	r3, #0
}
   21ea8:	0018      	movs	r0, r3
   21eaa:	46bd      	mov	sp, r7
   21eac:	b007      	add	sp, #28
   21eae:	bd90      	pop	{r4, r7, pc}
   21eb0:	00022691 	.word	0x00022691
   21eb4:	0002266d 	.word	0x0002266d

00021eb8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   21eb8:	b590      	push	{r4, r7, lr}
   21eba:	b083      	sub	sp, #12
   21ebc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21ebe:	2300      	movs	r3, #0
   21ec0:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   21ec2:	1dfb      	adds	r3, r7, #7
   21ec4:	2200      	movs	r2, #0
   21ec6:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   21ec8:	1dfc      	adds	r4, r7, #7
   21eca:	003b      	movs	r3, r7
   21ecc:	4a24      	ldr	r2, [pc, #144]	; (21f60 <enable_interrupts+0xa8>)
   21ece:	0019      	movs	r1, r3
   21ed0:	0010      	movs	r0, r2
   21ed2:	4b24      	ldr	r3, [pc, #144]	; (21f64 <enable_interrupts+0xac>)
   21ed4:	4798      	blx	r3
   21ed6:	0003      	movs	r3, r0
   21ed8:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21eda:	1dfb      	adds	r3, r7, #7
   21edc:	781b      	ldrb	r3, [r3, #0]
   21ede:	b25b      	sxtb	r3, r3
   21ee0:	2b00      	cmp	r3, #0
   21ee2:	d131      	bne.n	21f48 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   21ee4:	683b      	ldr	r3, [r7, #0]
   21ee6:	2280      	movs	r2, #128	; 0x80
   21ee8:	0052      	lsls	r2, r2, #1
   21eea:	4313      	orrs	r3, r2
   21eec:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   21eee:	683b      	ldr	r3, [r7, #0]
   21ef0:	1dfc      	adds	r4, r7, #7
   21ef2:	4a1b      	ldr	r2, [pc, #108]	; (21f60 <enable_interrupts+0xa8>)
   21ef4:	0019      	movs	r1, r3
   21ef6:	0010      	movs	r0, r2
   21ef8:	4b1b      	ldr	r3, [pc, #108]	; (21f68 <enable_interrupts+0xb0>)
   21efa:	4798      	blx	r3
   21efc:	0003      	movs	r3, r0
   21efe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f00:	1dfb      	adds	r3, r7, #7
   21f02:	781b      	ldrb	r3, [r3, #0]
   21f04:	b25b      	sxtb	r3, r3
   21f06:	2b00      	cmp	r3, #0
   21f08:	d120      	bne.n	21f4c <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   21f0a:	1dfc      	adds	r4, r7, #7
   21f0c:	003a      	movs	r2, r7
   21f0e:	23d0      	movs	r3, #208	; 0xd0
   21f10:	015b      	lsls	r3, r3, #5
   21f12:	0011      	movs	r1, r2
   21f14:	0018      	movs	r0, r3
   21f16:	4b13      	ldr	r3, [pc, #76]	; (21f64 <enable_interrupts+0xac>)
   21f18:	4798      	blx	r3
   21f1a:	0003      	movs	r3, r0
   21f1c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f1e:	1dfb      	adds	r3, r7, #7
   21f20:	781b      	ldrb	r3, [r3, #0]
   21f22:	b25b      	sxtb	r3, r3
   21f24:	2b00      	cmp	r3, #0
   21f26:	d113      	bne.n	21f50 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   21f28:	683b      	ldr	r3, [r7, #0]
   21f2a:	2280      	movs	r2, #128	; 0x80
   21f2c:	0252      	lsls	r2, r2, #9
   21f2e:	4313      	orrs	r3, r2
   21f30:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   21f32:	683a      	ldr	r2, [r7, #0]
   21f34:	1dfc      	adds	r4, r7, #7
   21f36:	23d0      	movs	r3, #208	; 0xd0
   21f38:	015b      	lsls	r3, r3, #5
   21f3a:	0011      	movs	r1, r2
   21f3c:	0018      	movs	r0, r3
   21f3e:	4b0a      	ldr	r3, [pc, #40]	; (21f68 <enable_interrupts+0xb0>)
   21f40:	4798      	blx	r3
   21f42:	0003      	movs	r3, r0
   21f44:	7023      	strb	r3, [r4, #0]
   21f46:	e004      	b.n	21f52 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f48:	46c0      	nop			; (mov r8, r8)
   21f4a:	e002      	b.n	21f52 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f4c:	46c0      	nop			; (mov r8, r8)
   21f4e:	e000      	b.n	21f52 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f50:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   21f52:	1dfb      	adds	r3, r7, #7
   21f54:	781b      	ldrb	r3, [r3, #0]
   21f56:	b25b      	sxtb	r3, r3
}
   21f58:	0018      	movs	r0, r3
   21f5a:	46bd      	mov	sp, r7
   21f5c:	b003      	add	sp, #12
   21f5e:	bd90      	pop	{r4, r7, pc}
   21f60:	00001408 	.word	0x00001408
   21f64:	0002266d 	.word	0x0002266d
   21f68:	00022691 	.word	0x00022691

00021f6c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   21f6c:	b580      	push	{r7, lr}
   21f6e:	b082      	sub	sp, #8
   21f70:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   21f72:	4b32      	ldr	r3, [pc, #200]	; (2203c <nmi_get_chipid+0xd0>)
   21f74:	681b      	ldr	r3, [r3, #0]
   21f76:	2b00      	cmp	r3, #0
   21f78:	d159      	bne.n	2202e <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   21f7a:	4a30      	ldr	r2, [pc, #192]	; (2203c <nmi_get_chipid+0xd0>)
   21f7c:	2380      	movs	r3, #128	; 0x80
   21f7e:	015b      	lsls	r3, r3, #5
   21f80:	0011      	movs	r1, r2
   21f82:	0018      	movs	r0, r3
   21f84:	4b2e      	ldr	r3, [pc, #184]	; (22040 <nmi_get_chipid+0xd4>)
   21f86:	4798      	blx	r3
   21f88:	1e03      	subs	r3, r0, #0
   21f8a:	d004      	beq.n	21f96 <nmi_get_chipid+0x2a>
			chipid = 0;
   21f8c:	4b2b      	ldr	r3, [pc, #172]	; (2203c <nmi_get_chipid+0xd0>)
   21f8e:	2200      	movs	r2, #0
   21f90:	601a      	str	r2, [r3, #0]
			return 0;
   21f92:	2300      	movs	r3, #0
   21f94:	e04d      	b.n	22032 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   21f96:	1d3b      	adds	r3, r7, #4
   21f98:	4a2a      	ldr	r2, [pc, #168]	; (22044 <nmi_get_chipid+0xd8>)
   21f9a:	0019      	movs	r1, r3
   21f9c:	0010      	movs	r0, r2
   21f9e:	4b28      	ldr	r3, [pc, #160]	; (22040 <nmi_get_chipid+0xd4>)
   21fa0:	4798      	blx	r3
   21fa2:	1e03      	subs	r3, r0, #0
   21fa4:	d004      	beq.n	21fb0 <nmi_get_chipid+0x44>
			chipid = 0;
   21fa6:	4b25      	ldr	r3, [pc, #148]	; (2203c <nmi_get_chipid+0xd0>)
   21fa8:	2200      	movs	r2, #0
   21faa:	601a      	str	r2, [r3, #0]
			return 0;
   21fac:	2300      	movs	r3, #0
   21fae:	e040      	b.n	22032 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   21fb0:	4b22      	ldr	r3, [pc, #136]	; (2203c <nmi_get_chipid+0xd0>)
   21fb2:	681b      	ldr	r3, [r3, #0]
   21fb4:	4a24      	ldr	r2, [pc, #144]	; (22048 <nmi_get_chipid+0xdc>)
   21fb6:	4293      	cmp	r3, r2
   21fb8:	d106      	bne.n	21fc8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   21fba:	687b      	ldr	r3, [r7, #4]
   21fbc:	2b01      	cmp	r3, #1
   21fbe:	d029      	beq.n	22014 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   21fc0:	4b1e      	ldr	r3, [pc, #120]	; (2203c <nmi_get_chipid+0xd0>)
   21fc2:	4a22      	ldr	r2, [pc, #136]	; (2204c <nmi_get_chipid+0xe0>)
   21fc4:	601a      	str	r2, [r3, #0]
   21fc6:	e025      	b.n	22014 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   21fc8:	4b1c      	ldr	r3, [pc, #112]	; (2203c <nmi_get_chipid+0xd0>)
   21fca:	681b      	ldr	r3, [r3, #0]
   21fcc:	4a20      	ldr	r2, [pc, #128]	; (22050 <nmi_get_chipid+0xe4>)
   21fce:	4293      	cmp	r3, r2
   21fd0:	d10d      	bne.n	21fee <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   21fd2:	687b      	ldr	r3, [r7, #4]
   21fd4:	2b03      	cmp	r3, #3
   21fd6:	d01d      	beq.n	22014 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   21fd8:	687b      	ldr	r3, [r7, #4]
   21fda:	2b04      	cmp	r3, #4
   21fdc:	d103      	bne.n	21fe6 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   21fde:	4b17      	ldr	r3, [pc, #92]	; (2203c <nmi_get_chipid+0xd0>)
   21fe0:	4a1c      	ldr	r2, [pc, #112]	; (22054 <nmi_get_chipid+0xe8>)
   21fe2:	601a      	str	r2, [r3, #0]
   21fe4:	e016      	b.n	22014 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   21fe6:	4b15      	ldr	r3, [pc, #84]	; (2203c <nmi_get_chipid+0xd0>)
   21fe8:	4a1b      	ldr	r2, [pc, #108]	; (22058 <nmi_get_chipid+0xec>)
   21fea:	601a      	str	r2, [r3, #0]
   21fec:	e012      	b.n	22014 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   21fee:	4b13      	ldr	r3, [pc, #76]	; (2203c <nmi_get_chipid+0xd0>)
   21ff0:	681b      	ldr	r3, [r3, #0]
   21ff2:	4a1a      	ldr	r2, [pc, #104]	; (2205c <nmi_get_chipid+0xf0>)
   21ff4:	4293      	cmp	r3, r2
   21ff6:	d10d      	bne.n	22014 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   21ff8:	4a10      	ldr	r2, [pc, #64]	; (2203c <nmi_get_chipid+0xd0>)
   21ffa:	23ec      	movs	r3, #236	; 0xec
   21ffc:	039b      	lsls	r3, r3, #14
   21ffe:	0011      	movs	r1, r2
   22000:	0018      	movs	r0, r3
   22002:	4b0f      	ldr	r3, [pc, #60]	; (22040 <nmi_get_chipid+0xd4>)
   22004:	4798      	blx	r3
   22006:	1e03      	subs	r3, r0, #0
   22008:	d004      	beq.n	22014 <nmi_get_chipid+0xa8>
			chipid = 0;
   2200a:	4b0c      	ldr	r3, [pc, #48]	; (2203c <nmi_get_chipid+0xd0>)
   2200c:	2200      	movs	r2, #0
   2200e:	601a      	str	r2, [r3, #0]
			return 0;
   22010:	2300      	movs	r3, #0
   22012:	e00e      	b.n	22032 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22014:	4b09      	ldr	r3, [pc, #36]	; (2203c <nmi_get_chipid+0xd0>)
   22016:	681b      	ldr	r3, [r3, #0]
   22018:	4a11      	ldr	r2, [pc, #68]	; (22060 <nmi_get_chipid+0xf4>)
   2201a:	401a      	ands	r2, r3
   2201c:	4b07      	ldr	r3, [pc, #28]	; (2203c <nmi_get_chipid+0xd0>)
   2201e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22020:	4b06      	ldr	r3, [pc, #24]	; (2203c <nmi_get_chipid+0xd0>)
   22022:	681b      	ldr	r3, [r3, #0]
   22024:	22a0      	movs	r2, #160	; 0xa0
   22026:	02d2      	lsls	r2, r2, #11
   22028:	431a      	orrs	r2, r3
   2202a:	4b04      	ldr	r3, [pc, #16]	; (2203c <nmi_get_chipid+0xd0>)
   2202c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   2202e:	4b03      	ldr	r3, [pc, #12]	; (2203c <nmi_get_chipid+0xd0>)
   22030:	681b      	ldr	r3, [r3, #0]
}
   22032:	0018      	movs	r0, r3
   22034:	46bd      	mov	sp, r7
   22036:	b002      	add	sp, #8
   22038:	bd80      	pop	{r7, pc}
   2203a:	46c0      	nop			; (mov r8, r8)
   2203c:	20004108 	.word	0x20004108
   22040:	0002266d 	.word	0x0002266d
   22044:	000013f4 	.word	0x000013f4
   22048:	001002a0 	.word	0x001002a0
   2204c:	001002a1 	.word	0x001002a1
   22050:	001002b0 	.word	0x001002b0
   22054:	001002b1 	.word	0x001002b1
   22058:	001002b2 	.word	0x001002b2
   2205c:	001000f0 	.word	0x001000f0
   22060:	fff0ffff 	.word	0xfff0ffff

00022064 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22064:	b590      	push	{r4, r7, lr}
   22066:	b083      	sub	sp, #12
   22068:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2206a:	1dfb      	adds	r3, r7, #7
   2206c:	2200      	movs	r2, #0
   2206e:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22070:	1dfc      	adds	r4, r7, #7
   22072:	003b      	movs	r3, r7
   22074:	0019      	movs	r1, r3
   22076:	2010      	movs	r0, #16
   22078:	4b2e      	ldr	r3, [pc, #184]	; (22134 <chip_sleep+0xd0>)
   2207a:	4798      	blx	r3
   2207c:	0003      	movs	r3, r0
   2207e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22080:	1dfb      	adds	r3, r7, #7
   22082:	781b      	ldrb	r3, [r3, #0]
   22084:	b25b      	sxtb	r3, r3
   22086:	2b00      	cmp	r3, #0
   22088:	d145      	bne.n	22116 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2208a:	683b      	ldr	r3, [r7, #0]
   2208c:	2201      	movs	r2, #1
   2208e:	4013      	ands	r3, r2
   22090:	d000      	beq.n	22094 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22092:	e7ed      	b.n	22070 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   22094:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22096:	1dfc      	adds	r4, r7, #7
   22098:	003b      	movs	r3, r7
   2209a:	0019      	movs	r1, r3
   2209c:	2001      	movs	r0, #1
   2209e:	4b25      	ldr	r3, [pc, #148]	; (22134 <chip_sleep+0xd0>)
   220a0:	4798      	blx	r3
   220a2:	0003      	movs	r3, r0
   220a4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   220a6:	1dfb      	adds	r3, r7, #7
   220a8:	781b      	ldrb	r3, [r3, #0]
   220aa:	b25b      	sxtb	r3, r3
   220ac:	2b00      	cmp	r3, #0
   220ae:	d134      	bne.n	2211a <chip_sleep+0xb6>
	if(reg & NBIT1)
   220b0:	683b      	ldr	r3, [r7, #0]
   220b2:	2202      	movs	r2, #2
   220b4:	4013      	ands	r3, r2
   220b6:	d010      	beq.n	220da <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   220b8:	683b      	ldr	r3, [r7, #0]
   220ba:	2202      	movs	r2, #2
   220bc:	4393      	bics	r3, r2
   220be:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   220c0:	683b      	ldr	r3, [r7, #0]
   220c2:	1dfc      	adds	r4, r7, #7
   220c4:	0019      	movs	r1, r3
   220c6:	2001      	movs	r0, #1
   220c8:	4b1b      	ldr	r3, [pc, #108]	; (22138 <chip_sleep+0xd4>)
   220ca:	4798      	blx	r3
   220cc:	0003      	movs	r3, r0
   220ce:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   220d0:	1dfb      	adds	r3, r7, #7
   220d2:	781b      	ldrb	r3, [r3, #0]
   220d4:	b25b      	sxtb	r3, r3
   220d6:	2b00      	cmp	r3, #0
   220d8:	d121      	bne.n	2211e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   220da:	1dfc      	adds	r4, r7, #7
   220dc:	003b      	movs	r3, r7
   220de:	0019      	movs	r1, r3
   220e0:	200b      	movs	r0, #11
   220e2:	4b14      	ldr	r3, [pc, #80]	; (22134 <chip_sleep+0xd0>)
   220e4:	4798      	blx	r3
   220e6:	0003      	movs	r3, r0
   220e8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   220ea:	1dfb      	adds	r3, r7, #7
   220ec:	781b      	ldrb	r3, [r3, #0]
   220ee:	b25b      	sxtb	r3, r3
   220f0:	2b00      	cmp	r3, #0
   220f2:	d116      	bne.n	22122 <chip_sleep+0xbe>
	if(reg & NBIT0)
   220f4:	683b      	ldr	r3, [r7, #0]
   220f6:	2201      	movs	r2, #1
   220f8:	4013      	ands	r3, r2
   220fa:	d013      	beq.n	22124 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   220fc:	683b      	ldr	r3, [r7, #0]
   220fe:	2201      	movs	r2, #1
   22100:	4393      	bics	r3, r2
   22102:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22104:	683b      	ldr	r3, [r7, #0]
   22106:	1dfc      	adds	r4, r7, #7
   22108:	0019      	movs	r1, r3
   2210a:	200b      	movs	r0, #11
   2210c:	4b0a      	ldr	r3, [pc, #40]	; (22138 <chip_sleep+0xd4>)
   2210e:	4798      	blx	r3
   22110:	0003      	movs	r3, r0
   22112:	7023      	strb	r3, [r4, #0]
   22114:	e006      	b.n	22124 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   22116:	46c0      	nop			; (mov r8, r8)
   22118:	e004      	b.n	22124 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2211a:	46c0      	nop			; (mov r8, r8)
   2211c:	e002      	b.n	22124 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   2211e:	46c0      	nop			; (mov r8, r8)
   22120:	e000      	b.n	22124 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22122:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22124:	1dfb      	adds	r3, r7, #7
   22126:	781b      	ldrb	r3, [r3, #0]
   22128:	b25b      	sxtb	r3, r3
}
   2212a:	0018      	movs	r0, r3
   2212c:	46bd      	mov	sp, r7
   2212e:	b003      	add	sp, #12
   22130:	bd90      	pop	{r4, r7, pc}
   22132:	46c0      	nop			; (mov r8, r8)
   22134:	0002266d 	.word	0x0002266d
   22138:	00022691 	.word	0x00022691

0002213c <chip_wake>:
sint8 chip_wake(void)
{
   2213c:	b590      	push	{r4, r7, lr}
   2213e:	b085      	sub	sp, #20
   22140:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22142:	230f      	movs	r3, #15
   22144:	18fb      	adds	r3, r7, r3
   22146:	2200      	movs	r2, #0
   22148:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2214a:	2300      	movs	r3, #0
   2214c:	607b      	str	r3, [r7, #4]
   2214e:	2300      	movs	r3, #0
   22150:	603b      	str	r3, [r7, #0]
   22152:	2300      	movs	r3, #0
   22154:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22156:	230f      	movs	r3, #15
   22158:	18fc      	adds	r4, r7, r3
   2215a:	1d3b      	adds	r3, r7, #4
   2215c:	0019      	movs	r1, r3
   2215e:	200b      	movs	r0, #11
   22160:	4b4e      	ldr	r3, [pc, #312]	; (2229c <chip_wake+0x160>)
   22162:	4798      	blx	r3
   22164:	0003      	movs	r3, r0
   22166:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22168:	230f      	movs	r3, #15
   2216a:	18fb      	adds	r3, r7, r3
   2216c:	781b      	ldrb	r3, [r3, #0]
   2216e:	b25b      	sxtb	r3, r3
   22170:	2b00      	cmp	r3, #0
   22172:	d000      	beq.n	22176 <chip_wake+0x3a>
   22174:	e082      	b.n	2227c <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   22176:	687b      	ldr	r3, [r7, #4]
   22178:	2201      	movs	r2, #1
   2217a:	4013      	ands	r3, r2
   2217c:	d111      	bne.n	221a2 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   2217e:	687b      	ldr	r3, [r7, #4]
   22180:	2201      	movs	r2, #1
   22182:	4313      	orrs	r3, r2
   22184:	220f      	movs	r2, #15
   22186:	18bc      	adds	r4, r7, r2
   22188:	0019      	movs	r1, r3
   2218a:	200b      	movs	r0, #11
   2218c:	4b44      	ldr	r3, [pc, #272]	; (222a0 <chip_wake+0x164>)
   2218e:	4798      	blx	r3
   22190:	0003      	movs	r3, r0
   22192:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22194:	230f      	movs	r3, #15
   22196:	18fb      	adds	r3, r7, r3
   22198:	781b      	ldrb	r3, [r3, #0]
   2219a:	b25b      	sxtb	r3, r3
   2219c:	2b00      	cmp	r3, #0
   2219e:	d000      	beq.n	221a2 <chip_wake+0x66>
   221a0:	e06e      	b.n	22280 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   221a2:	230f      	movs	r3, #15
   221a4:	18fc      	adds	r4, r7, r3
   221a6:	1d3b      	adds	r3, r7, #4
   221a8:	0019      	movs	r1, r3
   221aa:	2001      	movs	r0, #1
   221ac:	4b3b      	ldr	r3, [pc, #236]	; (2229c <chip_wake+0x160>)
   221ae:	4798      	blx	r3
   221b0:	0003      	movs	r3, r0
   221b2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   221b4:	230f      	movs	r3, #15
   221b6:	18fb      	adds	r3, r7, r3
   221b8:	781b      	ldrb	r3, [r3, #0]
   221ba:	b25b      	sxtb	r3, r3
   221bc:	2b00      	cmp	r3, #0
   221be:	d161      	bne.n	22284 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   221c0:	687b      	ldr	r3, [r7, #4]
   221c2:	2202      	movs	r2, #2
   221c4:	4013      	ands	r3, r2
   221c6:	d110      	bne.n	221ea <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   221c8:	687b      	ldr	r3, [r7, #4]
   221ca:	2202      	movs	r2, #2
   221cc:	4313      	orrs	r3, r2
   221ce:	220f      	movs	r2, #15
   221d0:	18bc      	adds	r4, r7, r2
   221d2:	0019      	movs	r1, r3
   221d4:	2001      	movs	r0, #1
   221d6:	4b32      	ldr	r3, [pc, #200]	; (222a0 <chip_wake+0x164>)
   221d8:	4798      	blx	r3
   221da:	0003      	movs	r3, r0
   221dc:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   221de:	230f      	movs	r3, #15
   221e0:	18fb      	adds	r3, r7, r3
   221e2:	781b      	ldrb	r3, [r3, #0]
   221e4:	b25b      	sxtb	r3, r3
   221e6:	2b00      	cmp	r3, #0
   221e8:	d14e      	bne.n	22288 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   221ea:	230f      	movs	r3, #15
   221ec:	18fc      	adds	r4, r7, r3
   221ee:	003b      	movs	r3, r7
   221f0:	0019      	movs	r1, r3
   221f2:	200f      	movs	r0, #15
   221f4:	4b29      	ldr	r3, [pc, #164]	; (2229c <chip_wake+0x160>)
   221f6:	4798      	blx	r3
   221f8:	0003      	movs	r3, r0
   221fa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   221fc:	230f      	movs	r3, #15
   221fe:	18fb      	adds	r3, r7, r3
   22200:	781b      	ldrb	r3, [r3, #0]
   22202:	b25b      	sxtb	r3, r3
   22204:	2b00      	cmp	r3, #0
   22206:	d014      	beq.n	22232 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22208:	23a8      	movs	r3, #168	; 0xa8
   2220a:	005a      	lsls	r2, r3, #1
   2220c:	4925      	ldr	r1, [pc, #148]	; (222a4 <chip_wake+0x168>)
   2220e:	4b26      	ldr	r3, [pc, #152]	; (222a8 <chip_wake+0x16c>)
   22210:	0018      	movs	r0, r3
   22212:	4b26      	ldr	r3, [pc, #152]	; (222ac <chip_wake+0x170>)
   22214:	4798      	blx	r3
   22216:	230f      	movs	r3, #15
   22218:	18fb      	adds	r3, r7, r3
   2221a:	2100      	movs	r1, #0
   2221c:	5659      	ldrsb	r1, [r3, r1]
   2221e:	683a      	ldr	r2, [r7, #0]
   22220:	4b23      	ldr	r3, [pc, #140]	; (222b0 <chip_wake+0x174>)
   22222:	0018      	movs	r0, r3
   22224:	4b21      	ldr	r3, [pc, #132]	; (222ac <chip_wake+0x170>)
   22226:	4798      	blx	r3
   22228:	4b22      	ldr	r3, [pc, #136]	; (222b4 <chip_wake+0x178>)
   2222a:	0018      	movs	r0, r3
   2222c:	4b1f      	ldr	r3, [pc, #124]	; (222ac <chip_wake+0x170>)
   2222e:	4798      	blx	r3
			goto _WAKE_EXIT;
   22230:	e02b      	b.n	2228a <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22232:	683b      	ldr	r3, [r7, #0]
   22234:	2204      	movs	r2, #4
   22236:	4013      	ands	r3, r2
   22238:	d11c      	bne.n	22274 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2223a:	2002      	movs	r0, #2
   2223c:	4b1e      	ldr	r3, [pc, #120]	; (222b8 <chip_wake+0x17c>)
   2223e:	4798      	blx	r3
		trials++;
   22240:	68bb      	ldr	r3, [r7, #8]
   22242:	3301      	adds	r3, #1
   22244:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   22246:	68bb      	ldr	r3, [r7, #8]
   22248:	2b04      	cmp	r3, #4
   2224a:	d9ce      	bls.n	221ea <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   2224c:	23ad      	movs	r3, #173	; 0xad
   2224e:	005a      	lsls	r2, r3, #1
   22250:	4914      	ldr	r1, [pc, #80]	; (222a4 <chip_wake+0x168>)
   22252:	4b15      	ldr	r3, [pc, #84]	; (222a8 <chip_wake+0x16c>)
   22254:	0018      	movs	r0, r3
   22256:	4b15      	ldr	r3, [pc, #84]	; (222ac <chip_wake+0x170>)
   22258:	4798      	blx	r3
   2225a:	4b18      	ldr	r3, [pc, #96]	; (222bc <chip_wake+0x180>)
   2225c:	0018      	movs	r0, r3
   2225e:	4b13      	ldr	r3, [pc, #76]	; (222ac <chip_wake+0x170>)
   22260:	4798      	blx	r3
   22262:	4b14      	ldr	r3, [pc, #80]	; (222b4 <chip_wake+0x178>)
   22264:	0018      	movs	r0, r3
   22266:	4b11      	ldr	r3, [pc, #68]	; (222ac <chip_wake+0x170>)
   22268:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2226a:	230f      	movs	r3, #15
   2226c:	18fb      	adds	r3, r7, r3
   2226e:	22fc      	movs	r2, #252	; 0xfc
   22270:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22272:	e00a      	b.n	2228a <chip_wake+0x14e>
			break;
   22274:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   22276:	4b12      	ldr	r3, [pc, #72]	; (222c0 <chip_wake+0x184>)
   22278:	4798      	blx	r3
   2227a:	e006      	b.n	2228a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2227c:	46c0      	nop			; (mov r8, r8)
   2227e:	e004      	b.n	2228a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22280:	46c0      	nop			; (mov r8, r8)
   22282:	e002      	b.n	2228a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22284:	46c0      	nop			; (mov r8, r8)
   22286:	e000      	b.n	2228a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22288:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2228a:	230f      	movs	r3, #15
   2228c:	18fb      	adds	r3, r7, r3
   2228e:	781b      	ldrb	r3, [r3, #0]
   22290:	b25b      	sxtb	r3, r3
}
   22292:	0018      	movs	r0, r3
   22294:	46bd      	mov	sp, r7
   22296:	b005      	add	sp, #20
   22298:	bd90      	pop	{r4, r7, pc}
   2229a:	46c0      	nop			; (mov r8, r8)
   2229c:	0002266d 	.word	0x0002266d
   222a0:	00022691 	.word	0x00022691
   222a4:	00037fd4 	.word	0x00037fd4
   222a8:	00037f48 	.word	0x00037f48
   222ac:	0001d8a9 	.word	0x0001d8a9
   222b0:	00037f5c 	.word	0x00037f5c
   222b4:	00037f74 	.word	0x00037f74
   222b8:	0001fcfd 	.word	0x0001fcfd
   222bc:	00037f78 	.word	0x00037f78
   222c0:	0002262d 	.word	0x0002262d

000222c4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   222c4:	b580      	push	{r7, lr}
   222c6:	b088      	sub	sp, #32
   222c8:	af00      	add	r7, sp, #0
   222ca:	0002      	movs	r2, r0
   222cc:	1dfb      	adds	r3, r7, #7
   222ce:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   222d0:	2313      	movs	r3, #19
   222d2:	18fb      	adds	r3, r7, r3
   222d4:	2200      	movs	r2, #0
   222d6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   222d8:	2300      	movs	r3, #0
   222da:	61fb      	str	r3, [r7, #28]
   222dc:	2300      	movs	r3, #0
   222de:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   222e0:	2300      	movs	r3, #0
   222e2:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   222e4:	4b4a      	ldr	r3, [pc, #296]	; (22410 <wait_for_bootrom+0x14c>)
   222e6:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   222e8:	2300      	movs	r3, #0
   222ea:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   222ec:	4b49      	ldr	r3, [pc, #292]	; (22414 <wait_for_bootrom+0x150>)
   222ee:	0018      	movs	r0, r3
   222f0:	4b49      	ldr	r3, [pc, #292]	; (22418 <wait_for_bootrom+0x154>)
   222f2:	4798      	blx	r3
   222f4:	0003      	movs	r3, r0
   222f6:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   222f8:	69fb      	ldr	r3, [r7, #28]
   222fa:	2b00      	cmp	r3, #0
   222fc:	db03      	blt.n	22306 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   222fe:	2001      	movs	r0, #1
   22300:	4b46      	ldr	r3, [pc, #280]	; (2241c <wait_for_bootrom+0x158>)
   22302:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22304:	e7f2      	b.n	222ec <wait_for_bootrom+0x28>
			break;
   22306:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22308:	4b45      	ldr	r3, [pc, #276]	; (22420 <wait_for_bootrom+0x15c>)
   2230a:	0018      	movs	r0, r3
   2230c:	4b42      	ldr	r3, [pc, #264]	; (22418 <wait_for_bootrom+0x154>)
   2230e:	4798      	blx	r3
   22310:	0003      	movs	r3, r0
   22312:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22314:	69fb      	ldr	r3, [r7, #28]
   22316:	2201      	movs	r2, #1
   22318:	4013      	ands	r3, r2
   2231a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   2231c:	69fb      	ldr	r3, [r7, #28]
   2231e:	2b00      	cmp	r3, #0
   22320:	d112      	bne.n	22348 <wait_for_bootrom+0x84>
	{
		reg = 0;
   22322:	2300      	movs	r3, #0
   22324:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   22326:	e00b      	b.n	22340 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   22328:	2001      	movs	r0, #1
   2232a:	4b3c      	ldr	r3, [pc, #240]	; (2241c <wait_for_bootrom+0x158>)
   2232c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   2232e:	4b3d      	ldr	r3, [pc, #244]	; (22424 <wait_for_bootrom+0x160>)
   22330:	0018      	movs	r0, r3
   22332:	4b39      	ldr	r3, [pc, #228]	; (22418 <wait_for_bootrom+0x154>)
   22334:	4798      	blx	r3
   22336:	0003      	movs	r3, r0
   22338:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2233a:	69bb      	ldr	r3, [r7, #24]
   2233c:	3301      	adds	r3, #1
   2233e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22340:	69fb      	ldr	r3, [r7, #28]
   22342:	4a39      	ldr	r2, [pc, #228]	; (22428 <wait_for_bootrom+0x164>)
   22344:	4293      	cmp	r3, r2
   22346:	d1ef      	bne.n	22328 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   22348:	1dfb      	adds	r3, r7, #7
   2234a:	781b      	ldrb	r3, [r3, #0]
   2234c:	2b02      	cmp	r3, #2
   2234e:	d10d      	bne.n	2236c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22350:	4a36      	ldr	r2, [pc, #216]	; (2242c <wait_for_bootrom+0x168>)
   22352:	4b37      	ldr	r3, [pc, #220]	; (22430 <wait_for_bootrom+0x16c>)
   22354:	0011      	movs	r1, r2
   22356:	0018      	movs	r0, r3
   22358:	4b36      	ldr	r3, [pc, #216]	; (22434 <wait_for_bootrom+0x170>)
   2235a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   2235c:	2380      	movs	r3, #128	; 0x80
   2235e:	035b      	lsls	r3, r3, #13
   22360:	4a35      	ldr	r2, [pc, #212]	; (22438 <wait_for_bootrom+0x174>)
   22362:	0019      	movs	r1, r3
   22364:	0010      	movs	r0, r2
   22366:	4b33      	ldr	r3, [pc, #204]	; (22434 <wait_for_bootrom+0x170>)
   22368:	4798      	blx	r3
   2236a:	e022      	b.n	223b2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   2236c:	1dfb      	adds	r3, r7, #7
   2236e:	781b      	ldrb	r3, [r3, #0]
   22370:	2b03      	cmp	r3, #3
   22372:	d10b      	bne.n	2238c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22374:	4a2d      	ldr	r2, [pc, #180]	; (2242c <wait_for_bootrom+0x168>)
   22376:	4b2e      	ldr	r3, [pc, #184]	; (22430 <wait_for_bootrom+0x16c>)
   22378:	0011      	movs	r1, r2
   2237a:	0018      	movs	r0, r3
   2237c:	4b2d      	ldr	r3, [pc, #180]	; (22434 <wait_for_bootrom+0x170>)
   2237e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22380:	4b2d      	ldr	r3, [pc, #180]	; (22438 <wait_for_bootrom+0x174>)
   22382:	2100      	movs	r1, #0
   22384:	0018      	movs	r0, r3
   22386:	4b2b      	ldr	r3, [pc, #172]	; (22434 <wait_for_bootrom+0x170>)
   22388:	4798      	blx	r3
   2238a:	e012      	b.n	223b2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   2238c:	1dfb      	adds	r3, r7, #7
   2238e:	781b      	ldrb	r3, [r3, #0]
   22390:	2b04      	cmp	r3, #4
   22392:	d108      	bne.n	223a6 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   22394:	2380      	movs	r3, #128	; 0x80
   22396:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22398:	68fb      	ldr	r3, [r7, #12]
   2239a:	4a27      	ldr	r2, [pc, #156]	; (22438 <wait_for_bootrom+0x174>)
   2239c:	0019      	movs	r1, r3
   2239e:	0010      	movs	r0, r2
   223a0:	4b24      	ldr	r3, [pc, #144]	; (22434 <wait_for_bootrom+0x170>)
   223a2:	4798      	blx	r3
   223a4:	e005      	b.n	223b2 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   223a6:	68fb      	ldr	r3, [r7, #12]
   223a8:	4a23      	ldr	r2, [pc, #140]	; (22438 <wait_for_bootrom+0x174>)
   223aa:	0019      	movs	r1, r3
   223ac:	0010      	movs	r0, r2
   223ae:	4b21      	ldr	r3, [pc, #132]	; (22434 <wait_for_bootrom+0x170>)
   223b0:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   223b2:	4b22      	ldr	r3, [pc, #136]	; (2243c <wait_for_bootrom+0x178>)
   223b4:	4798      	blx	r3
   223b6:	0003      	movs	r3, r0
   223b8:	051b      	lsls	r3, r3, #20
   223ba:	0d1b      	lsrs	r3, r3, #20
   223bc:	4a20      	ldr	r2, [pc, #128]	; (22440 <wait_for_bootrom+0x17c>)
   223be:	4293      	cmp	r3, r2
   223c0:	d906      	bls.n	223d0 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   223c2:	697b      	ldr	r3, [r7, #20]
   223c4:	2202      	movs	r2, #2
   223c6:	4313      	orrs	r3, r2
   223c8:	0018      	movs	r0, r3
   223ca:	4b1e      	ldr	r3, [pc, #120]	; (22444 <wait_for_bootrom+0x180>)
   223cc:	4798      	blx	r3
   223ce:	e003      	b.n	223d8 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   223d0:	697b      	ldr	r3, [r7, #20]
   223d2:	0018      	movs	r0, r3
   223d4:	4b1b      	ldr	r3, [pc, #108]	; (22444 <wait_for_bootrom+0x180>)
   223d6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   223d8:	4b1b      	ldr	r3, [pc, #108]	; (22448 <wait_for_bootrom+0x184>)
   223da:	0018      	movs	r0, r3
   223dc:	4b1b      	ldr	r3, [pc, #108]	; (2244c <wait_for_bootrom+0x188>)
   223de:	4798      	blx	r3
   223e0:	68fa      	ldr	r2, [r7, #12]
   223e2:	4b1b      	ldr	r3, [pc, #108]	; (22450 <wait_for_bootrom+0x18c>)
   223e4:	0011      	movs	r1, r2
   223e6:	0018      	movs	r0, r3
   223e8:	4b18      	ldr	r3, [pc, #96]	; (2244c <wait_for_bootrom+0x188>)
   223ea:	4798      	blx	r3
   223ec:	4b19      	ldr	r3, [pc, #100]	; (22454 <wait_for_bootrom+0x190>)
   223ee:	0018      	movs	r0, r3
   223f0:	4b16      	ldr	r3, [pc, #88]	; (2244c <wait_for_bootrom+0x188>)
   223f2:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   223f4:	4a18      	ldr	r2, [pc, #96]	; (22458 <wait_for_bootrom+0x194>)
   223f6:	4b0b      	ldr	r3, [pc, #44]	; (22424 <wait_for_bootrom+0x160>)
   223f8:	0011      	movs	r1, r2
   223fa:	0018      	movs	r0, r3
   223fc:	4b0d      	ldr	r3, [pc, #52]	; (22434 <wait_for_bootrom+0x170>)
   223fe:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22400:	2313      	movs	r3, #19
   22402:	18fb      	adds	r3, r7, r3
   22404:	781b      	ldrb	r3, [r3, #0]
   22406:	b25b      	sxtb	r3, r3
}
   22408:	0018      	movs	r0, r3
   2240a:	46bd      	mov	sp, r7
   2240c:	b008      	add	sp, #32
   2240e:	bd80      	pop	{r7, pc}
   22410:	13301354 	.word	0x13301354
   22414:	00001014 	.word	0x00001014
   22418:	0002264d 	.word	0x0002264d
   2241c:	0001fcfd 	.word	0x0001fcfd
   22420:	000207bc 	.word	0x000207bc
   22424:	000c000c 	.word	0x000c000c
   22428:	10add09e 	.word	0x10add09e
   2242c:	3c1cd57d 	.word	0x3c1cd57d
   22430:	000207ac 	.word	0x000207ac
   22434:	00022691 	.word	0x00022691
   22438:	0000108c 	.word	0x0000108c
   2243c:	00021f6d 	.word	0x00021f6d
   22440:	0000039f 	.word	0x0000039f
   22444:	00021e3d 	.word	0x00021e3d
   22448:	00037f94 	.word	0x00037f94
   2244c:	0001d8a9 	.word	0x0001d8a9
   22450:	00037fa0 	.word	0x00037fa0
   22454:	00037f74 	.word	0x00037f74
   22458:	ef522f61 	.word	0xef522f61

0002245c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   2245c:	b580      	push	{r7, lr}
   2245e:	b088      	sub	sp, #32
   22460:	af00      	add	r7, sp, #0
   22462:	0002      	movs	r2, r0
   22464:	1dfb      	adds	r3, r7, #7
   22466:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22468:	231f      	movs	r3, #31
   2246a:	18fb      	adds	r3, r7, r3
   2246c:	2200      	movs	r2, #0
   2246e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22470:	2300      	movs	r3, #0
   22472:	61bb      	str	r3, [r7, #24]
   22474:	2300      	movs	r3, #0
   22476:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   22478:	2301      	movs	r3, #1
   2247a:	425b      	negs	r3, r3
   2247c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   2247e:	4b1d      	ldr	r3, [pc, #116]	; (224f4 <wait_for_firmware_start+0x98>)
   22480:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   22482:	4b1d      	ldr	r3, [pc, #116]	; (224f8 <wait_for_firmware_start+0x9c>)
   22484:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   22486:	1dfb      	adds	r3, r7, #7
   22488:	781b      	ldrb	r3, [r3, #0]
   2248a:	2b02      	cmp	r3, #2
   2248c:	d003      	beq.n	22496 <wait_for_firmware_start+0x3a>
   2248e:	1dfb      	adds	r3, r7, #7
   22490:	781b      	ldrb	r3, [r3, #0]
   22492:	2b03      	cmp	r3, #3
   22494:	d119      	bne.n	224ca <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   22496:	4b19      	ldr	r3, [pc, #100]	; (224fc <wait_for_firmware_start+0xa0>)
   22498:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2249a:	4b19      	ldr	r3, [pc, #100]	; (22500 <wait_for_firmware_start+0xa4>)
   2249c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   2249e:	e014      	b.n	224ca <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   224a0:	2002      	movs	r0, #2
   224a2:	4b18      	ldr	r3, [pc, #96]	; (22504 <wait_for_firmware_start+0xa8>)
   224a4:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   224a6:	68fb      	ldr	r3, [r7, #12]
   224a8:	0018      	movs	r0, r3
   224aa:	4b17      	ldr	r3, [pc, #92]	; (22508 <wait_for_firmware_start+0xac>)
   224ac:	4798      	blx	r3
   224ae:	0003      	movs	r3, r0
   224b0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   224b2:	697b      	ldr	r3, [r7, #20]
   224b4:	3301      	adds	r3, #1
   224b6:	617b      	str	r3, [r7, #20]
   224b8:	697a      	ldr	r2, [r7, #20]
   224ba:	693b      	ldr	r3, [r7, #16]
   224bc:	429a      	cmp	r2, r3
   224be:	d304      	bcc.n	224ca <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   224c0:	231f      	movs	r3, #31
   224c2:	18fb      	adds	r3, r7, r3
   224c4:	22fb      	movs	r2, #251	; 0xfb
   224c6:	701a      	strb	r2, [r3, #0]
			goto ERR;
   224c8:	e00c      	b.n	224e4 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   224ca:	68ba      	ldr	r2, [r7, #8]
   224cc:	69bb      	ldr	r3, [r7, #24]
   224ce:	429a      	cmp	r2, r3
   224d0:	d1e6      	bne.n	224a0 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   224d2:	68bb      	ldr	r3, [r7, #8]
   224d4:	4a08      	ldr	r2, [pc, #32]	; (224f8 <wait_for_firmware_start+0x9c>)
   224d6:	4293      	cmp	r3, r2
   224d8:	d104      	bne.n	224e4 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   224da:	4b06      	ldr	r3, [pc, #24]	; (224f4 <wait_for_firmware_start+0x98>)
   224dc:	2100      	movs	r1, #0
   224de:	0018      	movs	r0, r3
   224e0:	4b0a      	ldr	r3, [pc, #40]	; (2250c <wait_for_firmware_start+0xb0>)
   224e2:	4798      	blx	r3
	}
ERR:
	return ret;
   224e4:	231f      	movs	r3, #31
   224e6:	18fb      	adds	r3, r7, r3
   224e8:	781b      	ldrb	r3, [r3, #0]
   224ea:	b25b      	sxtb	r3, r3
}
   224ec:	0018      	movs	r0, r3
   224ee:	46bd      	mov	sp, r7
   224f0:	b008      	add	sp, #32
   224f2:	bd80      	pop	{r7, pc}
   224f4:	0000108c 	.word	0x0000108c
   224f8:	02532636 	.word	0x02532636
   224fc:	000207ac 	.word	0x000207ac
   22500:	d75dc1c3 	.word	0xd75dc1c3
   22504:	0001fcfd 	.word	0x0001fcfd
   22508:	0002264d 	.word	0x0002264d
   2250c:	00022691 	.word	0x00022691

00022510 <chip_deinit>:

sint8 chip_deinit(void)
{
   22510:	b590      	push	{r4, r7, lr}
   22512:	b083      	sub	sp, #12
   22514:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22516:	2300      	movs	r3, #0
   22518:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2251a:	1dfc      	adds	r4, r7, #7
   2251c:	003a      	movs	r2, r7
   2251e:	23a0      	movs	r3, #160	; 0xa0
   22520:	015b      	lsls	r3, r3, #5
   22522:	0011      	movs	r1, r2
   22524:	0018      	movs	r0, r3
   22526:	4b20      	ldr	r3, [pc, #128]	; (225a8 <chip_deinit+0x98>)
   22528:	4798      	blx	r3
   2252a:	0003      	movs	r3, r0
   2252c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   2252e:	1dfb      	adds	r3, r7, #7
   22530:	781b      	ldrb	r3, [r3, #0]
   22532:	b25b      	sxtb	r3, r3
   22534:	2b00      	cmp	r3, #0
   22536:	d00e      	beq.n	22556 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   22538:	4a1c      	ldr	r2, [pc, #112]	; (225ac <chip_deinit+0x9c>)
   2253a:	491d      	ldr	r1, [pc, #116]	; (225b0 <chip_deinit+0xa0>)
   2253c:	4b1d      	ldr	r3, [pc, #116]	; (225b4 <chip_deinit+0xa4>)
   2253e:	0018      	movs	r0, r3
   22540:	4b1d      	ldr	r3, [pc, #116]	; (225b8 <chip_deinit+0xa8>)
   22542:	4798      	blx	r3
   22544:	4b1d      	ldr	r3, [pc, #116]	; (225bc <chip_deinit+0xac>)
   22546:	0018      	movs	r0, r3
   22548:	4b1b      	ldr	r3, [pc, #108]	; (225b8 <chip_deinit+0xa8>)
   2254a:	4798      	blx	r3
   2254c:	4b1c      	ldr	r3, [pc, #112]	; (225c0 <chip_deinit+0xb0>)
   2254e:	0018      	movs	r0, r3
   22550:	4b19      	ldr	r3, [pc, #100]	; (225b8 <chip_deinit+0xa8>)
   22552:	4798      	blx	r3
		goto ERR1;
   22554:	e021      	b.n	2259a <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   22556:	683b      	ldr	r3, [r7, #0]
   22558:	4a1a      	ldr	r2, [pc, #104]	; (225c4 <chip_deinit+0xb4>)
   2255a:	4013      	ands	r3, r2
   2255c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   2255e:	683a      	ldr	r2, [r7, #0]
   22560:	1dfc      	adds	r4, r7, #7
   22562:	23a0      	movs	r3, #160	; 0xa0
   22564:	015b      	lsls	r3, r3, #5
   22566:	0011      	movs	r1, r2
   22568:	0018      	movs	r0, r3
   2256a:	4b17      	ldr	r3, [pc, #92]	; (225c8 <chip_deinit+0xb8>)
   2256c:	4798      	blx	r3
   2256e:	0003      	movs	r3, r0
   22570:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22572:	1dfb      	adds	r3, r7, #7
   22574:	781b      	ldrb	r3, [r3, #0]
   22576:	b25b      	sxtb	r3, r3
   22578:	2b00      	cmp	r3, #0
   2257a:	d00e      	beq.n	2259a <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   2257c:	4a13      	ldr	r2, [pc, #76]	; (225cc <chip_deinit+0xbc>)
   2257e:	490c      	ldr	r1, [pc, #48]	; (225b0 <chip_deinit+0xa0>)
   22580:	4b0c      	ldr	r3, [pc, #48]	; (225b4 <chip_deinit+0xa4>)
   22582:	0018      	movs	r0, r3
   22584:	4b0c      	ldr	r3, [pc, #48]	; (225b8 <chip_deinit+0xa8>)
   22586:	4798      	blx	r3
   22588:	4b0c      	ldr	r3, [pc, #48]	; (225bc <chip_deinit+0xac>)
   2258a:	0018      	movs	r0, r3
   2258c:	4b0a      	ldr	r3, [pc, #40]	; (225b8 <chip_deinit+0xa8>)
   2258e:	4798      	blx	r3
   22590:	4b0b      	ldr	r3, [pc, #44]	; (225c0 <chip_deinit+0xb0>)
   22592:	0018      	movs	r0, r3
   22594:	4b08      	ldr	r3, [pc, #32]	; (225b8 <chip_deinit+0xa8>)
   22596:	4798      	blx	r3
		goto ERR1;
   22598:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2259a:	1dfb      	adds	r3, r7, #7
   2259c:	781b      	ldrb	r3, [r3, #0]
   2259e:	b25b      	sxtb	r3, r3
}
   225a0:	0018      	movs	r0, r3
   225a2:	46bd      	mov	sp, r7
   225a4:	b003      	add	sp, #12
   225a6:	bd90      	pop	{r4, r7, pc}
   225a8:	0002266d 	.word	0x0002266d
   225ac:	00000201 	.word	0x00000201
   225b0:	00037fe0 	.word	0x00037fe0
   225b4:	00037f48 	.word	0x00037f48
   225b8:	0001d8a9 	.word	0x0001d8a9
   225bc:	00037fb8 	.word	0x00037fb8
   225c0:	00037f74 	.word	0x00037f74
   225c4:	fffffbff 	.word	0xfffffbff
   225c8:	00022691 	.word	0x00022691
   225cc:	00000207 	.word	0x00000207

000225d0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   225d0:	b590      	push	{r4, r7, lr}
   225d2:	b085      	sub	sp, #20
   225d4:	af00      	add	r7, sp, #0
   225d6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   225d8:	230f      	movs	r3, #15
   225da:	18fb      	adds	r3, r7, r3
   225dc:	2200      	movs	r2, #0
   225de:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   225e0:	230f      	movs	r3, #15
   225e2:	18fc      	adds	r4, r7, r3
   225e4:	687b      	ldr	r3, [r7, #4]
   225e6:	0018      	movs	r0, r3
   225e8:	4b05      	ldr	r3, [pc, #20]	; (22600 <nm_bus_iface_init+0x30>)
   225ea:	4798      	blx	r3
   225ec:	0003      	movs	r3, r0
   225ee:	7023      	strb	r3, [r4, #0]
	return ret;
   225f0:	230f      	movs	r3, #15
   225f2:	18fb      	adds	r3, r7, r3
   225f4:	781b      	ldrb	r3, [r3, #0]
   225f6:	b25b      	sxtb	r3, r3
}
   225f8:	0018      	movs	r0, r3
   225fa:	46bd      	mov	sp, r7
   225fc:	b005      	add	sp, #20
   225fe:	bd90      	pop	{r4, r7, pc}
   22600:	000203b9 	.word	0x000203b9

00022604 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22604:	b590      	push	{r4, r7, lr}
   22606:	b083      	sub	sp, #12
   22608:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2260a:	1dfb      	adds	r3, r7, #7
   2260c:	2200      	movs	r2, #0
   2260e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22610:	1dfc      	adds	r4, r7, #7
   22612:	4b05      	ldr	r3, [pc, #20]	; (22628 <nm_bus_iface_deinit+0x24>)
   22614:	4798      	blx	r3
   22616:	0003      	movs	r3, r0
   22618:	7023      	strb	r3, [r4, #0]

	return ret;
   2261a:	1dfb      	adds	r3, r7, #7
   2261c:	781b      	ldrb	r3, [r3, #0]
   2261e:	b25b      	sxtb	r3, r3
}
   22620:	0018      	movs	r0, r3
   22622:	46bd      	mov	sp, r7
   22624:	b003      	add	sp, #12
   22626:	bd90      	pop	{r4, r7, pc}
   22628:	00020531 	.word	0x00020531

0002262c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   2262c:	b580      	push	{r7, lr}
   2262e:	b082      	sub	sp, #8
   22630:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22632:	1dfb      	adds	r3, r7, #7
   22634:	2200      	movs	r2, #0
   22636:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22638:	4b03      	ldr	r3, [pc, #12]	; (22648 <nm_bus_reset+0x1c>)
   2263a:	4798      	blx	r3
   2263c:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   2263e:	0018      	movs	r0, r3
   22640:	46bd      	mov	sp, r7
   22642:	b002      	add	sp, #8
   22644:	bd80      	pop	{r7, pc}
   22646:	46c0      	nop			; (mov r8, r8)
   22648:	00024459 	.word	0x00024459

0002264c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   2264c:	b580      	push	{r7, lr}
   2264e:	b082      	sub	sp, #8
   22650:	af00      	add	r7, sp, #0
   22652:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22654:	687b      	ldr	r3, [r7, #4]
   22656:	0018      	movs	r0, r3
   22658:	4b03      	ldr	r3, [pc, #12]	; (22668 <nm_read_reg+0x1c>)
   2265a:	4798      	blx	r3
   2265c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   2265e:	0018      	movs	r0, r3
   22660:	46bd      	mov	sp, r7
   22662:	b002      	add	sp, #8
   22664:	bd80      	pop	{r7, pc}
   22666:	46c0      	nop			; (mov r8, r8)
   22668:	000245ed 	.word	0x000245ed

0002266c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   2266c:	b580      	push	{r7, lr}
   2266e:	b082      	sub	sp, #8
   22670:	af00      	add	r7, sp, #0
   22672:	6078      	str	r0, [r7, #4]
   22674:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   22676:	683a      	ldr	r2, [r7, #0]
   22678:	687b      	ldr	r3, [r7, #4]
   2267a:	0011      	movs	r1, r2
   2267c:	0018      	movs	r0, r3
   2267e:	4b03      	ldr	r3, [pc, #12]	; (2268c <nm_read_reg_with_ret+0x20>)
   22680:	4798      	blx	r3
   22682:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22684:	0018      	movs	r0, r3
   22686:	46bd      	mov	sp, r7
   22688:	b002      	add	sp, #8
   2268a:	bd80      	pop	{r7, pc}
   2268c:	00024611 	.word	0x00024611

00022690 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   22690:	b580      	push	{r7, lr}
   22692:	b082      	sub	sp, #8
   22694:	af00      	add	r7, sp, #0
   22696:	6078      	str	r0, [r7, #4]
   22698:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2269a:	683a      	ldr	r2, [r7, #0]
   2269c:	687b      	ldr	r3, [r7, #4]
   2269e:	0011      	movs	r1, r2
   226a0:	0018      	movs	r0, r3
   226a2:	4b03      	ldr	r3, [pc, #12]	; (226b0 <nm_write_reg+0x20>)
   226a4:	4798      	blx	r3
   226a6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   226a8:	0018      	movs	r0, r3
   226aa:	46bd      	mov	sp, r7
   226ac:	b002      	add	sp, #8
   226ae:	bd80      	pop	{r7, pc}
   226b0:	00024661 	.word	0x00024661

000226b4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   226b4:	b580      	push	{r7, lr}
   226b6:	b084      	sub	sp, #16
   226b8:	af00      	add	r7, sp, #0
   226ba:	60f8      	str	r0, [r7, #12]
   226bc:	60b9      	str	r1, [r7, #8]
   226be:	1dbb      	adds	r3, r7, #6
   226c0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   226c2:	1dbb      	adds	r3, r7, #6
   226c4:	881a      	ldrh	r2, [r3, #0]
   226c6:	68b9      	ldr	r1, [r7, #8]
   226c8:	68fb      	ldr	r3, [r7, #12]
   226ca:	0018      	movs	r0, r3
   226cc:	4b03      	ldr	r3, [pc, #12]	; (226dc <p_nm_read_block+0x28>)
   226ce:	4798      	blx	r3
   226d0:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   226d2:	0018      	movs	r0, r3
   226d4:	46bd      	mov	sp, r7
   226d6:	b004      	add	sp, #16
   226d8:	bd80      	pop	{r7, pc}
   226da:	46c0      	nop			; (mov r8, r8)
   226dc:	000246b1 	.word	0x000246b1

000226e0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   226e0:	b580      	push	{r7, lr}
   226e2:	b086      	sub	sp, #24
   226e4:	af00      	add	r7, sp, #0
   226e6:	60f8      	str	r0, [r7, #12]
   226e8:	60b9      	str	r1, [r7, #8]
   226ea:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   226ec:	4b2d      	ldr	r3, [pc, #180]	; (227a4 <nm_read_block+0xc4>)
   226ee:	881a      	ldrh	r2, [r3, #0]
   226f0:	2310      	movs	r3, #16
   226f2:	18fb      	adds	r3, r7, r3
   226f4:	3a08      	subs	r2, #8
   226f6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   226f8:	2300      	movs	r3, #0
   226fa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   226fc:	2313      	movs	r3, #19
   226fe:	18fb      	adds	r3, r7, r3
   22700:	2200      	movs	r2, #0
   22702:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22704:	2310      	movs	r3, #16
   22706:	18fb      	adds	r3, r7, r3
   22708:	881a      	ldrh	r2, [r3, #0]
   2270a:	687b      	ldr	r3, [r7, #4]
   2270c:	429a      	cmp	r2, r3
   2270e:	d313      	bcc.n	22738 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22710:	68ba      	ldr	r2, [r7, #8]
   22712:	697b      	ldr	r3, [r7, #20]
   22714:	18d1      	adds	r1, r2, r3
   22716:	687b      	ldr	r3, [r7, #4]
   22718:	b29a      	uxth	r2, r3
   2271a:	68fb      	ldr	r3, [r7, #12]
   2271c:	0018      	movs	r0, r3
   2271e:	4b22      	ldr	r3, [pc, #136]	; (227a8 <nm_read_block+0xc8>)
   22720:	4798      	blx	r3
   22722:	0003      	movs	r3, r0
   22724:	b2da      	uxtb	r2, r3
   22726:	2313      	movs	r3, #19
   22728:	18fb      	adds	r3, r7, r3
   2272a:	781b      	ldrb	r3, [r3, #0]
   2272c:	18d3      	adds	r3, r2, r3
   2272e:	b2da      	uxtb	r2, r3
   22730:	2313      	movs	r3, #19
   22732:	18fb      	adds	r3, r7, r3
   22734:	701a      	strb	r2, [r3, #0]
			break;
   22736:	e02d      	b.n	22794 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22738:	68ba      	ldr	r2, [r7, #8]
   2273a:	697b      	ldr	r3, [r7, #20]
   2273c:	18d1      	adds	r1, r2, r3
   2273e:	2310      	movs	r3, #16
   22740:	18fb      	adds	r3, r7, r3
   22742:	881a      	ldrh	r2, [r3, #0]
   22744:	68fb      	ldr	r3, [r7, #12]
   22746:	0018      	movs	r0, r3
   22748:	4b17      	ldr	r3, [pc, #92]	; (227a8 <nm_read_block+0xc8>)
   2274a:	4798      	blx	r3
   2274c:	0003      	movs	r3, r0
   2274e:	b2da      	uxtb	r2, r3
   22750:	2313      	movs	r3, #19
   22752:	18fb      	adds	r3, r7, r3
   22754:	781b      	ldrb	r3, [r3, #0]
   22756:	18d3      	adds	r3, r2, r3
   22758:	b2da      	uxtb	r2, r3
   2275a:	2313      	movs	r3, #19
   2275c:	18fb      	adds	r3, r7, r3
   2275e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22760:	2313      	movs	r3, #19
   22762:	18fb      	adds	r3, r7, r3
   22764:	781b      	ldrb	r3, [r3, #0]
   22766:	b25b      	sxtb	r3, r3
   22768:	2b00      	cmp	r3, #0
   2276a:	d112      	bne.n	22792 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   2276c:	2310      	movs	r3, #16
   2276e:	18fb      	adds	r3, r7, r3
   22770:	881b      	ldrh	r3, [r3, #0]
   22772:	687a      	ldr	r2, [r7, #4]
   22774:	1ad3      	subs	r3, r2, r3
   22776:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22778:	2310      	movs	r3, #16
   2277a:	18fb      	adds	r3, r7, r3
   2277c:	881b      	ldrh	r3, [r3, #0]
   2277e:	697a      	ldr	r2, [r7, #20]
   22780:	18d3      	adds	r3, r2, r3
   22782:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22784:	2310      	movs	r3, #16
   22786:	18fb      	adds	r3, r7, r3
   22788:	881b      	ldrh	r3, [r3, #0]
   2278a:	68fa      	ldr	r2, [r7, #12]
   2278c:	18d3      	adds	r3, r2, r3
   2278e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22790:	e7b8      	b.n	22704 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22792:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22794:	2313      	movs	r3, #19
   22796:	18fb      	adds	r3, r7, r3
   22798:	781b      	ldrb	r3, [r3, #0]
   2279a:	b25b      	sxtb	r3, r3
}
   2279c:	0018      	movs	r0, r3
   2279e:	46bd      	mov	sp, r7
   227a0:	b006      	add	sp, #24
   227a2:	bd80      	pop	{r7, pc}
   227a4:	2000010c 	.word	0x2000010c
   227a8:	000226b5 	.word	0x000226b5

000227ac <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   227ac:	b580      	push	{r7, lr}
   227ae:	b084      	sub	sp, #16
   227b0:	af00      	add	r7, sp, #0
   227b2:	60f8      	str	r0, [r7, #12]
   227b4:	60b9      	str	r1, [r7, #8]
   227b6:	1dbb      	adds	r3, r7, #6
   227b8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   227ba:	1dbb      	adds	r3, r7, #6
   227bc:	881a      	ldrh	r2, [r3, #0]
   227be:	68b9      	ldr	r1, [r7, #8]
   227c0:	68fb      	ldr	r3, [r7, #12]
   227c2:	0018      	movs	r0, r3
   227c4:	4b03      	ldr	r3, [pc, #12]	; (227d4 <p_nm_write_block+0x28>)
   227c6:	4798      	blx	r3
   227c8:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   227ca:	0018      	movs	r0, r3
   227cc:	46bd      	mov	sp, r7
   227ce:	b004      	add	sp, #16
   227d0:	bd80      	pop	{r7, pc}
   227d2:	46c0      	nop			; (mov r8, r8)
   227d4:	00024709 	.word	0x00024709

000227d8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   227d8:	b580      	push	{r7, lr}
   227da:	b086      	sub	sp, #24
   227dc:	af00      	add	r7, sp, #0
   227de:	60f8      	str	r0, [r7, #12]
   227e0:	60b9      	str	r1, [r7, #8]
   227e2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   227e4:	4b2d      	ldr	r3, [pc, #180]	; (2289c <nm_write_block+0xc4>)
   227e6:	881a      	ldrh	r2, [r3, #0]
   227e8:	2310      	movs	r3, #16
   227ea:	18fb      	adds	r3, r7, r3
   227ec:	3a08      	subs	r2, #8
   227ee:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   227f0:	2300      	movs	r3, #0
   227f2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   227f4:	2313      	movs	r3, #19
   227f6:	18fb      	adds	r3, r7, r3
   227f8:	2200      	movs	r2, #0
   227fa:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   227fc:	2310      	movs	r3, #16
   227fe:	18fb      	adds	r3, r7, r3
   22800:	881a      	ldrh	r2, [r3, #0]
   22802:	687b      	ldr	r3, [r7, #4]
   22804:	429a      	cmp	r2, r3
   22806:	d313      	bcc.n	22830 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22808:	68ba      	ldr	r2, [r7, #8]
   2280a:	697b      	ldr	r3, [r7, #20]
   2280c:	18d1      	adds	r1, r2, r3
   2280e:	687b      	ldr	r3, [r7, #4]
   22810:	b29a      	uxth	r2, r3
   22812:	68fb      	ldr	r3, [r7, #12]
   22814:	0018      	movs	r0, r3
   22816:	4b22      	ldr	r3, [pc, #136]	; (228a0 <nm_write_block+0xc8>)
   22818:	4798      	blx	r3
   2281a:	0003      	movs	r3, r0
   2281c:	b2da      	uxtb	r2, r3
   2281e:	2313      	movs	r3, #19
   22820:	18fb      	adds	r3, r7, r3
   22822:	781b      	ldrb	r3, [r3, #0]
   22824:	18d3      	adds	r3, r2, r3
   22826:	b2da      	uxtb	r2, r3
   22828:	2313      	movs	r3, #19
   2282a:	18fb      	adds	r3, r7, r3
   2282c:	701a      	strb	r2, [r3, #0]
			break;
   2282e:	e02d      	b.n	2288c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22830:	68ba      	ldr	r2, [r7, #8]
   22832:	697b      	ldr	r3, [r7, #20]
   22834:	18d1      	adds	r1, r2, r3
   22836:	2310      	movs	r3, #16
   22838:	18fb      	adds	r3, r7, r3
   2283a:	881a      	ldrh	r2, [r3, #0]
   2283c:	68fb      	ldr	r3, [r7, #12]
   2283e:	0018      	movs	r0, r3
   22840:	4b17      	ldr	r3, [pc, #92]	; (228a0 <nm_write_block+0xc8>)
   22842:	4798      	blx	r3
   22844:	0003      	movs	r3, r0
   22846:	b2da      	uxtb	r2, r3
   22848:	2313      	movs	r3, #19
   2284a:	18fb      	adds	r3, r7, r3
   2284c:	781b      	ldrb	r3, [r3, #0]
   2284e:	18d3      	adds	r3, r2, r3
   22850:	b2da      	uxtb	r2, r3
   22852:	2313      	movs	r3, #19
   22854:	18fb      	adds	r3, r7, r3
   22856:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22858:	2313      	movs	r3, #19
   2285a:	18fb      	adds	r3, r7, r3
   2285c:	781b      	ldrb	r3, [r3, #0]
   2285e:	b25b      	sxtb	r3, r3
   22860:	2b00      	cmp	r3, #0
   22862:	d112      	bne.n	2288a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22864:	2310      	movs	r3, #16
   22866:	18fb      	adds	r3, r7, r3
   22868:	881b      	ldrh	r3, [r3, #0]
   2286a:	687a      	ldr	r2, [r7, #4]
   2286c:	1ad3      	subs	r3, r2, r3
   2286e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22870:	2310      	movs	r3, #16
   22872:	18fb      	adds	r3, r7, r3
   22874:	881b      	ldrh	r3, [r3, #0]
   22876:	697a      	ldr	r2, [r7, #20]
   22878:	18d3      	adds	r3, r2, r3
   2287a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   2287c:	2310      	movs	r3, #16
   2287e:	18fb      	adds	r3, r7, r3
   22880:	881b      	ldrh	r3, [r3, #0]
   22882:	68fa      	ldr	r2, [r7, #12]
   22884:	18d3      	adds	r3, r2, r3
   22886:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22888:	e7b8      	b.n	227fc <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2288a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   2288c:	2313      	movs	r3, #19
   2288e:	18fb      	adds	r3, r7, r3
   22890:	781b      	ldrb	r3, [r3, #0]
   22892:	b25b      	sxtb	r3, r3
}
   22894:	0018      	movs	r0, r3
   22896:	46bd      	mov	sp, r7
   22898:	b006      	add	sp, #24
   2289a:	bd80      	pop	{r7, pc}
   2289c:	2000010c 	.word	0x2000010c
   228a0:	000227ad 	.word	0x000227ad

000228a4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   228a4:	b590      	push	{r4, r7, lr}
   228a6:	b089      	sub	sp, #36	; 0x24
   228a8:	af00      	add	r7, sp, #0
   228aa:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   228ac:	2300      	movs	r3, #0
   228ae:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   228b0:	231f      	movs	r3, #31
   228b2:	18fb      	adds	r3, r7, r3
   228b4:	2200      	movs	r2, #0
   228b6:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   228b8:	230c      	movs	r3, #12
   228ba:	18fb      	adds	r3, r7, r3
   228bc:	0018      	movs	r0, r3
   228be:	2308      	movs	r3, #8
   228c0:	001a      	movs	r2, r3
   228c2:	2100      	movs	r1, #0
   228c4:	4b64      	ldr	r3, [pc, #400]	; (22a58 <nm_get_firmware_full_info+0x1b4>)
   228c6:	4798      	blx	r3
	if (pstrRev != NULL)
   228c8:	687b      	ldr	r3, [r7, #4]
   228ca:	2b00      	cmp	r3, #0
   228cc:	d100      	bne.n	228d0 <nm_get_firmware_full_info+0x2c>
   228ce:	e0ba      	b.n	22a46 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   228d0:	687b      	ldr	r3, [r7, #4]
   228d2:	2228      	movs	r2, #40	; 0x28
   228d4:	2100      	movs	r1, #0
   228d6:	0018      	movs	r0, r3
   228d8:	4b60      	ldr	r3, [pc, #384]	; (22a5c <nm_get_firmware_full_info+0x1b8>)
   228da:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   228dc:	231f      	movs	r3, #31
   228de:	18fc      	adds	r4, r7, r3
   228e0:	2314      	movs	r3, #20
   228e2:	18fb      	adds	r3, r7, r3
   228e4:	4a5e      	ldr	r2, [pc, #376]	; (22a60 <nm_get_firmware_full_info+0x1bc>)
   228e6:	0019      	movs	r1, r3
   228e8:	0010      	movs	r0, r2
   228ea:	4b5e      	ldr	r3, [pc, #376]	; (22a64 <nm_get_firmware_full_info+0x1c0>)
   228ec:	4798      	blx	r3
   228ee:	0003      	movs	r3, r0
   228f0:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   228f2:	231f      	movs	r3, #31
   228f4:	18fb      	adds	r3, r7, r3
   228f6:	781b      	ldrb	r3, [r3, #0]
   228f8:	b25b      	sxtb	r3, r3
   228fa:	2b00      	cmp	r3, #0
   228fc:	d000      	beq.n	22900 <nm_get_firmware_full_info+0x5c>
   228fe:	e0a2      	b.n	22a46 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22900:	697b      	ldr	r3, [r7, #20]
   22902:	2b00      	cmp	r3, #0
   22904:	d100      	bne.n	22908 <nm_get_firmware_full_info+0x64>
   22906:	e09a      	b.n	22a3e <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22908:	697b      	ldr	r3, [r7, #20]
   2290a:	22c0      	movs	r2, #192	; 0xc0
   2290c:	0292      	lsls	r2, r2, #10
   2290e:	4313      	orrs	r3, r2
   22910:	221f      	movs	r2, #31
   22912:	18bc      	adds	r4, r7, r2
   22914:	220c      	movs	r2, #12
   22916:	18b9      	adds	r1, r7, r2
   22918:	2208      	movs	r2, #8
   2291a:	0018      	movs	r0, r3
   2291c:	4b52      	ldr	r3, [pc, #328]	; (22a68 <nm_get_firmware_full_info+0x1c4>)
   2291e:	4798      	blx	r3
   22920:	0003      	movs	r3, r0
   22922:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22924:	231f      	movs	r3, #31
   22926:	18fb      	adds	r3, r7, r3
   22928:	781b      	ldrb	r3, [r3, #0]
   2292a:	b25b      	sxtb	r3, r3
   2292c:	2b00      	cmp	r3, #0
   2292e:	d000      	beq.n	22932 <nm_get_firmware_full_info+0x8e>
   22930:	e089      	b.n	22a46 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22932:	230c      	movs	r3, #12
   22934:	18fb      	adds	r3, r7, r3
   22936:	685b      	ldr	r3, [r3, #4]
   22938:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   2293a:	697b      	ldr	r3, [r7, #20]
   2293c:	041b      	lsls	r3, r3, #16
   2293e:	0c1b      	lsrs	r3, r3, #16
   22940:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22942:	697b      	ldr	r3, [r7, #20]
   22944:	2b00      	cmp	r3, #0
   22946:	d100      	bne.n	2294a <nm_get_firmware_full_info+0xa6>
   22948:	e074      	b.n	22a34 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2294a:	697b      	ldr	r3, [r7, #20]
   2294c:	22c0      	movs	r2, #192	; 0xc0
   2294e:	0292      	lsls	r2, r2, #10
   22950:	4313      	orrs	r3, r2
   22952:	221f      	movs	r2, #31
   22954:	18bc      	adds	r4, r7, r2
   22956:	6879      	ldr	r1, [r7, #4]
   22958:	2228      	movs	r2, #40	; 0x28
   2295a:	0018      	movs	r0, r3
   2295c:	4b42      	ldr	r3, [pc, #264]	; (22a68 <nm_get_firmware_full_info+0x1c4>)
   2295e:	4798      	blx	r3
   22960:	0003      	movs	r3, r0
   22962:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22964:	231f      	movs	r3, #31
   22966:	18fb      	adds	r3, r7, r3
   22968:	781b      	ldrb	r3, [r3, #0]
   2296a:	b25b      	sxtb	r3, r3
   2296c:	2b00      	cmp	r3, #0
   2296e:	d16a      	bne.n	22a46 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22970:	687b      	ldr	r3, [r7, #4]
   22972:	791b      	ldrb	r3, [r3, #4]
   22974:	021b      	lsls	r3, r3, #8
   22976:	b21a      	sxth	r2, r3
   22978:	687b      	ldr	r3, [r7, #4]
   2297a:	795b      	ldrb	r3, [r3, #5]
   2297c:	011b      	lsls	r3, r3, #4
   2297e:	b21b      	sxth	r3, r3
   22980:	21ff      	movs	r1, #255	; 0xff
   22982:	400b      	ands	r3, r1
   22984:	b21b      	sxth	r3, r3
   22986:	4313      	orrs	r3, r2
   22988:	b21a      	sxth	r2, r3
   2298a:	687b      	ldr	r3, [r7, #4]
   2298c:	799b      	ldrb	r3, [r3, #6]
   2298e:	b21b      	sxth	r3, r3
   22990:	210f      	movs	r1, #15
   22992:	400b      	ands	r3, r1
   22994:	b21b      	sxth	r3, r3
   22996:	4313      	orrs	r3, r2
   22998:	b21a      	sxth	r2, r3
   2299a:	231c      	movs	r3, #28
   2299c:	18fb      	adds	r3, r7, r3
   2299e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   229a0:	231a      	movs	r3, #26
   229a2:	18fb      	adds	r3, r7, r3
   229a4:	4a31      	ldr	r2, [pc, #196]	; (22a6c <nm_get_firmware_full_info+0x1c8>)
   229a6:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   229a8:	687b      	ldr	r3, [r7, #4]
   229aa:	79db      	ldrb	r3, [r3, #7]
   229ac:	021b      	lsls	r3, r3, #8
   229ae:	b21a      	sxth	r2, r3
   229b0:	687b      	ldr	r3, [r7, #4]
   229b2:	7a1b      	ldrb	r3, [r3, #8]
   229b4:	011b      	lsls	r3, r3, #4
   229b6:	b21b      	sxth	r3, r3
   229b8:	21ff      	movs	r1, #255	; 0xff
   229ba:	400b      	ands	r3, r1
   229bc:	b21b      	sxth	r3, r3
   229be:	4313      	orrs	r3, r2
   229c0:	b21a      	sxth	r2, r3
   229c2:	687b      	ldr	r3, [r7, #4]
   229c4:	7a5b      	ldrb	r3, [r3, #9]
   229c6:	b21b      	sxth	r3, r3
   229c8:	210f      	movs	r1, #15
   229ca:	400b      	ands	r3, r1
   229cc:	b21b      	sxth	r3, r3
   229ce:	4313      	orrs	r3, r2
   229d0:	b21a      	sxth	r2, r3
   229d2:	2318      	movs	r3, #24
   229d4:	18fb      	adds	r3, r7, r3
   229d6:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   229d8:	231c      	movs	r3, #28
   229da:	18fb      	adds	r3, r7, r3
   229dc:	881b      	ldrh	r3, [r3, #0]
   229de:	2b00      	cmp	r3, #0
   229e0:	d009      	beq.n	229f6 <nm_get_firmware_full_info+0x152>
   229e2:	2318      	movs	r3, #24
   229e4:	18fb      	adds	r3, r7, r3
   229e6:	881b      	ldrh	r3, [r3, #0]
   229e8:	2b00      	cmp	r3, #0
   229ea:	d004      	beq.n	229f6 <nm_get_firmware_full_info+0x152>
   229ec:	2318      	movs	r3, #24
   229ee:	18fb      	adds	r3, r7, r3
   229f0:	881b      	ldrh	r3, [r3, #0]
   229f2:	2b00      	cmp	r3, #0
   229f4:	d104      	bne.n	22a00 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   229f6:	231f      	movs	r3, #31
   229f8:	18fb      	adds	r3, r7, r3
   229fa:	22f4      	movs	r2, #244	; 0xf4
   229fc:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   229fe:	e022      	b.n	22a46 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22a00:	231a      	movs	r3, #26
   22a02:	18fa      	adds	r2, r7, r3
   22a04:	2318      	movs	r3, #24
   22a06:	18fb      	adds	r3, r7, r3
   22a08:	8812      	ldrh	r2, [r2, #0]
   22a0a:	881b      	ldrh	r3, [r3, #0]
   22a0c:	429a      	cmp	r2, r3
   22a0e:	d204      	bcs.n	22a1a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22a10:	231f      	movs	r3, #31
   22a12:	18fb      	adds	r3, r7, r3
   22a14:	22f3      	movs	r2, #243	; 0xf3
   22a16:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a18:	e015      	b.n	22a46 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   22a1a:	231a      	movs	r3, #26
   22a1c:	18fa      	adds	r2, r7, r3
   22a1e:	231c      	movs	r3, #28
   22a20:	18fb      	adds	r3, r7, r3
   22a22:	8812      	ldrh	r2, [r2, #0]
   22a24:	881b      	ldrh	r3, [r3, #0]
   22a26:	429a      	cmp	r2, r3
   22a28:	d90d      	bls.n	22a46 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22a2a:	231f      	movs	r3, #31
   22a2c:	18fb      	adds	r3, r7, r3
   22a2e:	22f3      	movs	r2, #243	; 0xf3
   22a30:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a32:	e008      	b.n	22a46 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22a34:	231f      	movs	r3, #31
   22a36:	18fb      	adds	r3, r7, r3
   22a38:	22f4      	movs	r2, #244	; 0xf4
   22a3a:	701a      	strb	r2, [r3, #0]
   22a3c:	e003      	b.n	22a46 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22a3e:	231f      	movs	r3, #31
   22a40:	18fb      	adds	r3, r7, r3
   22a42:	22f4      	movs	r2, #244	; 0xf4
   22a44:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22a46:	231f      	movs	r3, #31
   22a48:	18fb      	adds	r3, r7, r3
   22a4a:	781b      	ldrb	r3, [r3, #0]
   22a4c:	b25b      	sxtb	r3, r3
}
   22a4e:	0018      	movs	r0, r3
   22a50:	46bd      	mov	sp, r7
   22a52:	b009      	add	sp, #36	; 0x24
   22a54:	bd90      	pop	{r4, r7, pc}
   22a56:	46c0      	nop			; (mov r8, r8)
   22a58:	00034043 	.word	0x00034043
   22a5c:	000205dd 	.word	0x000205dd
   22a60:	000c0008 	.word	0x000c0008
   22a64:	0002266d 	.word	0x0002266d
   22a68:	000226e1 	.word	0x000226e1
   22a6c:	00001354 	.word	0x00001354

00022a70 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22a70:	b590      	push	{r4, r7, lr}
   22a72:	b085      	sub	sp, #20
   22a74:	af00      	add	r7, sp, #0
   22a76:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22a78:	230f      	movs	r3, #15
   22a7a:	18fb      	adds	r3, r7, r3
   22a7c:	2200      	movs	r2, #0
   22a7e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22a80:	687b      	ldr	r3, [r7, #4]
   22a82:	2b00      	cmp	r3, #0
   22a84:	d013      	beq.n	22aae <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22a86:	230e      	movs	r3, #14
   22a88:	18fb      	adds	r3, r7, r3
   22a8a:	687a      	ldr	r2, [r7, #4]
   22a8c:	7812      	ldrb	r2, [r2, #0]
   22a8e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22a90:	230e      	movs	r3, #14
   22a92:	18fb      	adds	r3, r7, r3
   22a94:	781b      	ldrb	r3, [r3, #0]
   22a96:	2b00      	cmp	r3, #0
   22a98:	d004      	beq.n	22aa4 <nm_drv_init+0x34>
   22a9a:	230e      	movs	r3, #14
   22a9c:	18fb      	adds	r3, r7, r3
   22a9e:	781b      	ldrb	r3, [r3, #0]
   22aa0:	2b04      	cmp	r3, #4
   22aa2:	d908      	bls.n	22ab6 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22aa4:	230e      	movs	r3, #14
   22aa6:	18fb      	adds	r3, r7, r3
   22aa8:	2201      	movs	r2, #1
   22aaa:	701a      	strb	r2, [r3, #0]
   22aac:	e003      	b.n	22ab6 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22aae:	230e      	movs	r3, #14
   22ab0:	18fb      	adds	r3, r7, r3
   22ab2:	2201      	movs	r2, #1
   22ab4:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22ab6:	230f      	movs	r3, #15
   22ab8:	18fc      	adds	r4, r7, r3
   22aba:	2000      	movs	r0, #0
   22abc:	4b41      	ldr	r3, [pc, #260]	; (22bc4 <nm_drv_init+0x154>)
   22abe:	4798      	blx	r3
   22ac0:	0003      	movs	r3, r0
   22ac2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22ac4:	230f      	movs	r3, #15
   22ac6:	18fb      	adds	r3, r7, r3
   22ac8:	781b      	ldrb	r3, [r3, #0]
   22aca:	b25b      	sxtb	r3, r3
   22acc:	2b00      	cmp	r3, #0
   22ace:	d00f      	beq.n	22af0 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22ad0:	2390      	movs	r3, #144	; 0x90
   22ad2:	005a      	lsls	r2, r3, #1
   22ad4:	493c      	ldr	r1, [pc, #240]	; (22bc8 <nm_drv_init+0x158>)
   22ad6:	4b3d      	ldr	r3, [pc, #244]	; (22bcc <nm_drv_init+0x15c>)
   22ad8:	0018      	movs	r0, r3
   22ada:	4b3d      	ldr	r3, [pc, #244]	; (22bd0 <nm_drv_init+0x160>)
   22adc:	4798      	blx	r3
   22ade:	4b3d      	ldr	r3, [pc, #244]	; (22bd4 <nm_drv_init+0x164>)
   22ae0:	0018      	movs	r0, r3
   22ae2:	4b3b      	ldr	r3, [pc, #236]	; (22bd0 <nm_drv_init+0x160>)
   22ae4:	4798      	blx	r3
   22ae6:	4b3c      	ldr	r3, [pc, #240]	; (22bd8 <nm_drv_init+0x168>)
   22ae8:	0018      	movs	r0, r3
   22aea:	4b39      	ldr	r3, [pc, #228]	; (22bd0 <nm_drv_init+0x160>)
   22aec:	4798      	blx	r3
		goto ERR1;
   22aee:	e061      	b.n	22bb4 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22af0:	4b3a      	ldr	r3, [pc, #232]	; (22bdc <nm_drv_init+0x16c>)
   22af2:	0018      	movs	r0, r3
   22af4:	4b36      	ldr	r3, [pc, #216]	; (22bd0 <nm_drv_init+0x160>)
   22af6:	4798      	blx	r3
   22af8:	4b39      	ldr	r3, [pc, #228]	; (22be0 <nm_drv_init+0x170>)
   22afa:	4798      	blx	r3
   22afc:	0002      	movs	r2, r0
   22afe:	4b39      	ldr	r3, [pc, #228]	; (22be4 <nm_drv_init+0x174>)
   22b00:	0011      	movs	r1, r2
   22b02:	0018      	movs	r0, r3
   22b04:	4b32      	ldr	r3, [pc, #200]	; (22bd0 <nm_drv_init+0x160>)
   22b06:	4798      	blx	r3
   22b08:	4b33      	ldr	r3, [pc, #204]	; (22bd8 <nm_drv_init+0x168>)
   22b0a:	0018      	movs	r0, r3
   22b0c:	4b30      	ldr	r3, [pc, #192]	; (22bd0 <nm_drv_init+0x160>)
   22b0e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22b10:	4b35      	ldr	r3, [pc, #212]	; (22be8 <nm_drv_init+0x178>)
   22b12:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22b14:	230f      	movs	r3, #15
   22b16:	18fc      	adds	r4, r7, r3
   22b18:	230e      	movs	r3, #14
   22b1a:	18fb      	adds	r3, r7, r3
   22b1c:	781b      	ldrb	r3, [r3, #0]
   22b1e:	0018      	movs	r0, r3
   22b20:	4b32      	ldr	r3, [pc, #200]	; (22bec <nm_drv_init+0x17c>)
   22b22:	4798      	blx	r3
   22b24:	0003      	movs	r3, r0
   22b26:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b28:	230f      	movs	r3, #15
   22b2a:	18fb      	adds	r3, r7, r3
   22b2c:	781b      	ldrb	r3, [r3, #0]
   22b2e:	b25b      	sxtb	r3, r3
   22b30:	2b00      	cmp	r3, #0
   22b32:	d13a      	bne.n	22baa <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22b34:	230f      	movs	r3, #15
   22b36:	18fc      	adds	r4, r7, r3
   22b38:	230e      	movs	r3, #14
   22b3a:	18fb      	adds	r3, r7, r3
   22b3c:	781b      	ldrb	r3, [r3, #0]
   22b3e:	0018      	movs	r0, r3
   22b40:	4b2b      	ldr	r3, [pc, #172]	; (22bf0 <nm_drv_init+0x180>)
   22b42:	4798      	blx	r3
   22b44:	0003      	movs	r3, r0
   22b46:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b48:	230f      	movs	r3, #15
   22b4a:	18fb      	adds	r3, r7, r3
   22b4c:	781b      	ldrb	r3, [r3, #0]
   22b4e:	b25b      	sxtb	r3, r3
   22b50:	2b00      	cmp	r3, #0
   22b52:	d12c      	bne.n	22bae <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22b54:	230e      	movs	r3, #14
   22b56:	18fb      	adds	r3, r7, r3
   22b58:	781b      	ldrb	r3, [r3, #0]
   22b5a:	2b02      	cmp	r3, #2
   22b5c:	d02a      	beq.n	22bb4 <nm_drv_init+0x144>
   22b5e:	230e      	movs	r3, #14
   22b60:	18fb      	adds	r3, r7, r3
   22b62:	781b      	ldrb	r3, [r3, #0]
   22b64:	2b03      	cmp	r3, #3
   22b66:	d025      	beq.n	22bb4 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   22b68:	230f      	movs	r3, #15
   22b6a:	18fc      	adds	r4, r7, r3
   22b6c:	4b21      	ldr	r3, [pc, #132]	; (22bf4 <nm_drv_init+0x184>)
   22b6e:	4798      	blx	r3
   22b70:	0003      	movs	r3, r0
   22b72:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b74:	230f      	movs	r3, #15
   22b76:	18fb      	adds	r3, r7, r3
   22b78:	781b      	ldrb	r3, [r3, #0]
   22b7a:	b25b      	sxtb	r3, r3
   22b7c:	2b00      	cmp	r3, #0
   22b7e:	d00f      	beq.n	22ba0 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22b80:	23a7      	movs	r3, #167	; 0xa7
   22b82:	005a      	lsls	r2, r3, #1
   22b84:	4910      	ldr	r1, [pc, #64]	; (22bc8 <nm_drv_init+0x158>)
   22b86:	4b11      	ldr	r3, [pc, #68]	; (22bcc <nm_drv_init+0x15c>)
   22b88:	0018      	movs	r0, r3
   22b8a:	4b11      	ldr	r3, [pc, #68]	; (22bd0 <nm_drv_init+0x160>)
   22b8c:	4798      	blx	r3
   22b8e:	4b1a      	ldr	r3, [pc, #104]	; (22bf8 <nm_drv_init+0x188>)
   22b90:	0018      	movs	r0, r3
   22b92:	4b0f      	ldr	r3, [pc, #60]	; (22bd0 <nm_drv_init+0x160>)
   22b94:	4798      	blx	r3
   22b96:	4b10      	ldr	r3, [pc, #64]	; (22bd8 <nm_drv_init+0x168>)
   22b98:	0018      	movs	r0, r3
   22b9a:	4b0d      	ldr	r3, [pc, #52]	; (22bd0 <nm_drv_init+0x160>)
   22b9c:	4798      	blx	r3
		goto ERR2;
   22b9e:	e007      	b.n	22bb0 <nm_drv_init+0x140>
	}
	return ret;
   22ba0:	230f      	movs	r3, #15
   22ba2:	18fb      	adds	r3, r7, r3
   22ba4:	781b      	ldrb	r3, [r3, #0]
   22ba6:	b25b      	sxtb	r3, r3
   22ba8:	e008      	b.n	22bbc <nm_drv_init+0x14c>
		goto ERR2;
   22baa:	46c0      	nop			; (mov r8, r8)
   22bac:	e000      	b.n	22bb0 <nm_drv_init+0x140>
		goto ERR2;
   22bae:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   22bb0:	4b12      	ldr	r3, [pc, #72]	; (22bfc <nm_drv_init+0x18c>)
   22bb2:	4798      	blx	r3
ERR1:
	return ret;
   22bb4:	230f      	movs	r3, #15
   22bb6:	18fb      	adds	r3, r7, r3
   22bb8:	781b      	ldrb	r3, [r3, #0]
   22bba:	b25b      	sxtb	r3, r3
}
   22bbc:	0018      	movs	r0, r3
   22bbe:	46bd      	mov	sp, r7
   22bc0:	b005      	add	sp, #20
   22bc2:	bd90      	pop	{r4, r7, pc}
   22bc4:	000225d1 	.word	0x000225d1
   22bc8:	000380bc 	.word	0x000380bc
   22bcc:	00037fec 	.word	0x00037fec
   22bd0:	0001d8a9 	.word	0x0001d8a9
   22bd4:	00038000 	.word	0x00038000
   22bd8:	0003801c 	.word	0x0003801c
   22bdc:	00038020 	.word	0x00038020
   22be0:	00021f6d 	.word	0x00021f6d
   22be4:	0003802c 	.word	0x0003802c
   22be8:	00024489 	.word	0x00024489
   22bec:	000222c5 	.word	0x000222c5
   22bf0:	0002245d 	.word	0x0002245d
   22bf4:	00021eb9 	.word	0x00021eb9
   22bf8:	0003803c 	.word	0x0003803c
   22bfc:	00022605 	.word	0x00022605

00022c00 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22c00:	b590      	push	{r4, r7, lr}
   22c02:	b085      	sub	sp, #20
   22c04:	af00      	add	r7, sp, #0
   22c06:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   22c08:	230f      	movs	r3, #15
   22c0a:	18fc      	adds	r4, r7, r3
   22c0c:	4b2e      	ldr	r3, [pc, #184]	; (22cc8 <nm_drv_deinit+0xc8>)
   22c0e:	4798      	blx	r3
   22c10:	0003      	movs	r3, r0
   22c12:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22c14:	230f      	movs	r3, #15
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	b25b      	sxtb	r3, r3
   22c1c:	2b00      	cmp	r3, #0
   22c1e:	d010      	beq.n	22c42 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22c20:	2366      	movs	r3, #102	; 0x66
   22c22:	33ff      	adds	r3, #255	; 0xff
   22c24:	001a      	movs	r2, r3
   22c26:	4929      	ldr	r1, [pc, #164]	; (22ccc <nm_drv_deinit+0xcc>)
   22c28:	4b29      	ldr	r3, [pc, #164]	; (22cd0 <nm_drv_deinit+0xd0>)
   22c2a:	0018      	movs	r0, r3
   22c2c:	4b29      	ldr	r3, [pc, #164]	; (22cd4 <nm_drv_deinit+0xd4>)
   22c2e:	4798      	blx	r3
   22c30:	4b29      	ldr	r3, [pc, #164]	; (22cd8 <nm_drv_deinit+0xd8>)
   22c32:	0018      	movs	r0, r3
   22c34:	4b27      	ldr	r3, [pc, #156]	; (22cd4 <nm_drv_deinit+0xd4>)
   22c36:	4798      	blx	r3
   22c38:	4b28      	ldr	r3, [pc, #160]	; (22cdc <nm_drv_deinit+0xdc>)
   22c3a:	0018      	movs	r0, r3
   22c3c:	4b25      	ldr	r3, [pc, #148]	; (22cd4 <nm_drv_deinit+0xd4>)
   22c3e:	4798      	blx	r3
		goto ERR1;
   22c40:	e03a      	b.n	22cb8 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22c42:	230f      	movs	r3, #15
   22c44:	18fc      	adds	r4, r7, r3
   22c46:	2000      	movs	r0, #0
   22c48:	4b25      	ldr	r3, [pc, #148]	; (22ce0 <nm_drv_deinit+0xe0>)
   22c4a:	4798      	blx	r3
   22c4c:	0003      	movs	r3, r0
   22c4e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22c50:	230f      	movs	r3, #15
   22c52:	18fb      	adds	r3, r7, r3
   22c54:	781b      	ldrb	r3, [r3, #0]
   22c56:	b25b      	sxtb	r3, r3
   22c58:	2b00      	cmp	r3, #0
   22c5a:	d00f      	beq.n	22c7c <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22c5c:	23b6      	movs	r3, #182	; 0xb6
   22c5e:	005a      	lsls	r2, r3, #1
   22c60:	491a      	ldr	r1, [pc, #104]	; (22ccc <nm_drv_deinit+0xcc>)
   22c62:	4b1b      	ldr	r3, [pc, #108]	; (22cd0 <nm_drv_deinit+0xd0>)
   22c64:	0018      	movs	r0, r3
   22c66:	4b1b      	ldr	r3, [pc, #108]	; (22cd4 <nm_drv_deinit+0xd4>)
   22c68:	4798      	blx	r3
   22c6a:	4b1e      	ldr	r3, [pc, #120]	; (22ce4 <nm_drv_deinit+0xe4>)
   22c6c:	0018      	movs	r0, r3
   22c6e:	4b19      	ldr	r3, [pc, #100]	; (22cd4 <nm_drv_deinit+0xd4>)
   22c70:	4798      	blx	r3
   22c72:	4b1a      	ldr	r3, [pc, #104]	; (22cdc <nm_drv_deinit+0xdc>)
   22c74:	0018      	movs	r0, r3
   22c76:	4b17      	ldr	r3, [pc, #92]	; (22cd4 <nm_drv_deinit+0xd4>)
   22c78:	4798      	blx	r3
		goto ERR1;
   22c7a:	e01d      	b.n	22cb8 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22c7c:	230f      	movs	r3, #15
   22c7e:	18fc      	adds	r4, r7, r3
   22c80:	4b19      	ldr	r3, [pc, #100]	; (22ce8 <nm_drv_deinit+0xe8>)
   22c82:	4798      	blx	r3
   22c84:	0003      	movs	r3, r0
   22c86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22c88:	230f      	movs	r3, #15
   22c8a:	18fb      	adds	r3, r7, r3
   22c8c:	781b      	ldrb	r3, [r3, #0]
   22c8e:	b25b      	sxtb	r3, r3
   22c90:	2b00      	cmp	r3, #0
   22c92:	d00f      	beq.n	22cb4 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22c94:	23b9      	movs	r3, #185	; 0xb9
   22c96:	005a      	lsls	r2, r3, #1
   22c98:	490c      	ldr	r1, [pc, #48]	; (22ccc <nm_drv_deinit+0xcc>)
   22c9a:	4b0d      	ldr	r3, [pc, #52]	; (22cd0 <nm_drv_deinit+0xd0>)
   22c9c:	0018      	movs	r0, r3
   22c9e:	4b0d      	ldr	r3, [pc, #52]	; (22cd4 <nm_drv_deinit+0xd4>)
   22ca0:	4798      	blx	r3
   22ca2:	4b12      	ldr	r3, [pc, #72]	; (22cec <nm_drv_deinit+0xec>)
   22ca4:	0018      	movs	r0, r3
   22ca6:	4b0b      	ldr	r3, [pc, #44]	; (22cd4 <nm_drv_deinit+0xd4>)
   22ca8:	4798      	blx	r3
   22caa:	4b0c      	ldr	r3, [pc, #48]	; (22cdc <nm_drv_deinit+0xdc>)
   22cac:	0018      	movs	r0, r3
   22cae:	4b09      	ldr	r3, [pc, #36]	; (22cd4 <nm_drv_deinit+0xd4>)
   22cb0:	4798      	blx	r3
		goto ERR1;
   22cb2:	e001      	b.n	22cb8 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22cb4:	4b0e      	ldr	r3, [pc, #56]	; (22cf0 <nm_drv_deinit+0xf0>)
   22cb6:	4798      	blx	r3
#endif

ERR1:
	return ret;
   22cb8:	230f      	movs	r3, #15
   22cba:	18fb      	adds	r3, r7, r3
   22cbc:	781b      	ldrb	r3, [r3, #0]
   22cbe:	b25b      	sxtb	r3, r3
}
   22cc0:	0018      	movs	r0, r3
   22cc2:	46bd      	mov	sp, r7
   22cc4:	b005      	add	sp, #20
   22cc6:	bd90      	pop	{r4, r7, pc}
   22cc8:	00022511 	.word	0x00022511
   22ccc:	000380c8 	.word	0x000380c8
   22cd0:	00037fec 	.word	0x00037fec
   22cd4:	0001d8a9 	.word	0x0001d8a9
   22cd8:	0003805c 	.word	0x0003805c
   22cdc:	0003801c 	.word	0x0003801c
   22ce0:	00025931 	.word	0x00025931
   22ce4:	0003807c 	.word	0x0003807c
   22ce8:	00022605 	.word	0x00022605
   22cec:	000380a0 	.word	0x000380a0
   22cf0:	000245d5 	.word	0x000245d5

00022cf4 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22cf4:	b580      	push	{r7, lr}
   22cf6:	b086      	sub	sp, #24
   22cf8:	af00      	add	r7, sp, #0
   22cfa:	6078      	str	r0, [r7, #4]
   22cfc:	000a      	movs	r2, r1
   22cfe:	1cbb      	adds	r3, r7, #2
   22d00:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22d02:	230c      	movs	r3, #12
   22d04:	18fb      	adds	r3, r7, r3
   22d06:	2200      	movs	r2, #0
   22d08:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   22d0a:	230c      	movs	r3, #12
   22d0c:	18fb      	adds	r3, r7, r3
   22d0e:	687a      	ldr	r2, [r7, #4]
   22d10:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22d12:	230c      	movs	r3, #12
   22d14:	18fb      	adds	r3, r7, r3
   22d16:	1cba      	adds	r2, r7, #2
   22d18:	8812      	ldrh	r2, [r2, #0]
   22d1a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22d1c:	230c      	movs	r3, #12
   22d1e:	18fb      	adds	r3, r7, r3
   22d20:	0019      	movs	r1, r3
   22d22:	2003      	movs	r0, #3
   22d24:	4b03      	ldr	r3, [pc, #12]	; (22d34 <nmi_spi_read+0x40>)
   22d26:	4798      	blx	r3
   22d28:	0003      	movs	r3, r0
}
   22d2a:	0018      	movs	r0, r3
   22d2c:	46bd      	mov	sp, r7
   22d2e:	b006      	add	sp, #24
   22d30:	bd80      	pop	{r7, pc}
   22d32:	46c0      	nop			; (mov r8, r8)
   22d34:	000204a1 	.word	0x000204a1

00022d38 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   22d38:	b580      	push	{r7, lr}
   22d3a:	b086      	sub	sp, #24
   22d3c:	af00      	add	r7, sp, #0
   22d3e:	6078      	str	r0, [r7, #4]
   22d40:	000a      	movs	r2, r1
   22d42:	1cbb      	adds	r3, r7, #2
   22d44:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   22d46:	230c      	movs	r3, #12
   22d48:	18fb      	adds	r3, r7, r3
   22d4a:	687a      	ldr	r2, [r7, #4]
   22d4c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   22d4e:	230c      	movs	r3, #12
   22d50:	18fb      	adds	r3, r7, r3
   22d52:	2200      	movs	r2, #0
   22d54:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22d56:	230c      	movs	r3, #12
   22d58:	18fb      	adds	r3, r7, r3
   22d5a:	1cba      	adds	r2, r7, #2
   22d5c:	8812      	ldrh	r2, [r2, #0]
   22d5e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22d60:	230c      	movs	r3, #12
   22d62:	18fb      	adds	r3, r7, r3
   22d64:	0019      	movs	r1, r3
   22d66:	2003      	movs	r0, #3
   22d68:	4b03      	ldr	r3, [pc, #12]	; (22d78 <nmi_spi_write+0x40>)
   22d6a:	4798      	blx	r3
   22d6c:	0003      	movs	r3, r0
}
   22d6e:	0018      	movs	r0, r3
   22d70:	46bd      	mov	sp, r7
   22d72:	b006      	add	sp, #24
   22d74:	bd80      	pop	{r7, pc}
   22d76:	46c0      	nop			; (mov r8, r8)
   22d78:	000204a1 	.word	0x000204a1

00022d7c <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22d7c:	b580      	push	{r7, lr}
   22d7e:	b088      	sub	sp, #32
   22d80:	af00      	add	r7, sp, #0
   22d82:	60f8      	str	r0, [r7, #12]
   22d84:	60b9      	str	r1, [r7, #8]
   22d86:	1dbb      	adds	r3, r7, #6
   22d88:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   22d8a:	2314      	movs	r3, #20
   22d8c:	18fb      	adds	r3, r7, r3
   22d8e:	68fa      	ldr	r2, [r7, #12]
   22d90:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   22d92:	2314      	movs	r3, #20
   22d94:	18fb      	adds	r3, r7, r3
   22d96:	68ba      	ldr	r2, [r7, #8]
   22d98:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22d9a:	2314      	movs	r3, #20
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	1dba      	adds	r2, r7, #6
   22da0:	8812      	ldrh	r2, [r2, #0]
   22da2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   22da4:	2314      	movs	r3, #20
   22da6:	18fb      	adds	r3, r7, r3
   22da8:	0019      	movs	r1, r3
   22daa:	2003      	movs	r0, #3
   22dac:	4b03      	ldr	r3, [pc, #12]	; (22dbc <nmi_spi_rw+0x40>)
   22dae:	4798      	blx	r3
   22db0:	0003      	movs	r3, r0
}
   22db2:	0018      	movs	r0, r3
   22db4:	46bd      	mov	sp, r7
   22db6:	b008      	add	sp, #32
   22db8:	bd80      	pop	{r7, pc}
   22dba:	46c0      	nop			; (mov r8, r8)
   22dbc:	000204a1 	.word	0x000204a1

00022dc0 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   22dc0:	b580      	push	{r7, lr}
   22dc2:	b082      	sub	sp, #8
   22dc4:	af00      	add	r7, sp, #0
   22dc6:	0002      	movs	r2, r0
   22dc8:	1dfb      	adds	r3, r7, #7
   22dca:	701a      	strb	r2, [r3, #0]
   22dcc:	1dbb      	adds	r3, r7, #6
   22dce:	1c0a      	adds	r2, r1, #0
   22dd0:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   22dd2:	1dfb      	adds	r3, r7, #7
   22dd4:	781b      	ldrb	r3, [r3, #0]
   22dd6:	005a      	lsls	r2, r3, #1
   22dd8:	1dbb      	adds	r3, r7, #6
   22dda:	781b      	ldrb	r3, [r3, #0]
   22ddc:	4053      	eors	r3, r2
   22dde:	4a03      	ldr	r2, [pc, #12]	; (22dec <crc7_byte+0x2c>)
   22de0:	5cd3      	ldrb	r3, [r2, r3]
}
   22de2:	0018      	movs	r0, r3
   22de4:	46bd      	mov	sp, r7
   22de6:	b002      	add	sp, #8
   22de8:	bd80      	pop	{r7, pc}
   22dea:	46c0      	nop			; (mov r8, r8)
   22dec:	000380d8 	.word	0x000380d8

00022df0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   22df0:	b590      	push	{r4, r7, lr}
   22df2:	b085      	sub	sp, #20
   22df4:	af00      	add	r7, sp, #0
   22df6:	60b9      	str	r1, [r7, #8]
   22df8:	607a      	str	r2, [r7, #4]
   22dfa:	230f      	movs	r3, #15
   22dfc:	18fb      	adds	r3, r7, r3
   22dfe:	1c02      	adds	r2, r0, #0
   22e00:	701a      	strb	r2, [r3, #0]
	while (len--)
   22e02:	e00e      	b.n	22e22 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   22e04:	68bb      	ldr	r3, [r7, #8]
   22e06:	1c5a      	adds	r2, r3, #1
   22e08:	60ba      	str	r2, [r7, #8]
   22e0a:	781a      	ldrb	r2, [r3, #0]
   22e0c:	230f      	movs	r3, #15
   22e0e:	18fc      	adds	r4, r7, r3
   22e10:	230f      	movs	r3, #15
   22e12:	18fb      	adds	r3, r7, r3
   22e14:	781b      	ldrb	r3, [r3, #0]
   22e16:	0011      	movs	r1, r2
   22e18:	0018      	movs	r0, r3
   22e1a:	4b08      	ldr	r3, [pc, #32]	; (22e3c <crc7+0x4c>)
   22e1c:	4798      	blx	r3
   22e1e:	0003      	movs	r3, r0
   22e20:	7023      	strb	r3, [r4, #0]
	while (len--)
   22e22:	687b      	ldr	r3, [r7, #4]
   22e24:	1e5a      	subs	r2, r3, #1
   22e26:	607a      	str	r2, [r7, #4]
   22e28:	2b00      	cmp	r3, #0
   22e2a:	d1eb      	bne.n	22e04 <crc7+0x14>
	return crc;
   22e2c:	230f      	movs	r3, #15
   22e2e:	18fb      	adds	r3, r7, r3
   22e30:	781b      	ldrb	r3, [r3, #0]
}
   22e32:	0018      	movs	r0, r3
   22e34:	46bd      	mov	sp, r7
   22e36:	b005      	add	sp, #20
   22e38:	bd90      	pop	{r4, r7, pc}
   22e3a:	46c0      	nop			; (mov r8, r8)
   22e3c:	00022dc1 	.word	0x00022dc1

00022e40 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   22e40:	b590      	push	{r4, r7, lr}
   22e42:	b089      	sub	sp, #36	; 0x24
   22e44:	af00      	add	r7, sp, #0
   22e46:	60b9      	str	r1, [r7, #8]
   22e48:	607a      	str	r2, [r7, #4]
   22e4a:	603b      	str	r3, [r7, #0]
   22e4c:	230f      	movs	r3, #15
   22e4e:	18fb      	adds	r3, r7, r3
   22e50:	1c02      	adds	r2, r0, #0
   22e52:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22e54:	231f      	movs	r3, #31
   22e56:	18fb      	adds	r3, r7, r3
   22e58:	2205      	movs	r2, #5
   22e5a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22e5c:	231e      	movs	r3, #30
   22e5e:	18fb      	adds	r3, r7, r3
   22e60:	2201      	movs	r2, #1
   22e62:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22e64:	2314      	movs	r3, #20
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	220f      	movs	r2, #15
   22e6a:	18ba      	adds	r2, r7, r2
   22e6c:	7812      	ldrb	r2, [r2, #0]
   22e6e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22e70:	230f      	movs	r3, #15
   22e72:	18fb      	adds	r3, r7, r3
   22e74:	781b      	ldrb	r3, [r3, #0]
   22e76:	3bc1      	subs	r3, #193	; 0xc1
   22e78:	2b0e      	cmp	r3, #14
   22e7a:	d900      	bls.n	22e7e <spi_cmd+0x3e>
   22e7c:	e11b      	b.n	230b6 <spi_cmd+0x276>
   22e7e:	009a      	lsls	r2, r3, #2
   22e80:	4bb6      	ldr	r3, [pc, #728]	; (2315c <spi_cmd+0x31c>)
   22e82:	18d3      	adds	r3, r2, r3
   22e84:	681b      	ldr	r3, [r3, #0]
   22e86:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   22e88:	68bb      	ldr	r3, [r7, #8]
   22e8a:	0c1b      	lsrs	r3, r3, #16
   22e8c:	b2da      	uxtb	r2, r3
   22e8e:	2314      	movs	r3, #20
   22e90:	18fb      	adds	r3, r7, r3
   22e92:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22e94:	68bb      	ldr	r3, [r7, #8]
   22e96:	0a1b      	lsrs	r3, r3, #8
   22e98:	b2da      	uxtb	r2, r3
   22e9a:	2314      	movs	r3, #20
   22e9c:	18fb      	adds	r3, r7, r3
   22e9e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22ea0:	68bb      	ldr	r3, [r7, #8]
   22ea2:	b2da      	uxtb	r2, r3
   22ea4:	2314      	movs	r3, #20
   22ea6:	18fb      	adds	r3, r7, r3
   22ea8:	70da      	strb	r2, [r3, #3]
		len = 5;
   22eaa:	231f      	movs	r3, #31
   22eac:	18fb      	adds	r3, r7, r3
   22eae:	2205      	movs	r2, #5
   22eb0:	701a      	strb	r2, [r3, #0]
		break;
   22eb2:	e105      	b.n	230c0 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   22eb4:	68bb      	ldr	r3, [r7, #8]
   22eb6:	0a1b      	lsrs	r3, r3, #8
   22eb8:	b2da      	uxtb	r2, r3
   22eba:	2314      	movs	r3, #20
   22ebc:	18fb      	adds	r3, r7, r3
   22ebe:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22ec0:	2330      	movs	r3, #48	; 0x30
   22ec2:	18fb      	adds	r3, r7, r3
   22ec4:	781b      	ldrb	r3, [r3, #0]
   22ec6:	2b00      	cmp	r3, #0
   22ec8:	d009      	beq.n	22ede <spi_cmd+0x9e>
   22eca:	2314      	movs	r3, #20
   22ecc:	18fb      	adds	r3, r7, r3
   22ece:	785b      	ldrb	r3, [r3, #1]
   22ed0:	2280      	movs	r2, #128	; 0x80
   22ed2:	4252      	negs	r2, r2
   22ed4:	4313      	orrs	r3, r2
   22ed6:	b2da      	uxtb	r2, r3
   22ed8:	2314      	movs	r3, #20
   22eda:	18fb      	adds	r3, r7, r3
   22edc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   22ede:	68bb      	ldr	r3, [r7, #8]
   22ee0:	b2da      	uxtb	r2, r3
   22ee2:	2314      	movs	r3, #20
   22ee4:	18fb      	adds	r3, r7, r3
   22ee6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22ee8:	2314      	movs	r3, #20
   22eea:	18fb      	adds	r3, r7, r3
   22eec:	2200      	movs	r2, #0
   22eee:	70da      	strb	r2, [r3, #3]
		len = 5;
   22ef0:	231f      	movs	r3, #31
   22ef2:	18fb      	adds	r3, r7, r3
   22ef4:	2205      	movs	r2, #5
   22ef6:	701a      	strb	r2, [r3, #0]
		break;
   22ef8:	e0e2      	b.n	230c0 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   22efa:	2314      	movs	r3, #20
   22efc:	18fb      	adds	r3, r7, r3
   22efe:	2200      	movs	r2, #0
   22f00:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22f02:	2314      	movs	r3, #20
   22f04:	18fb      	adds	r3, r7, r3
   22f06:	2200      	movs	r2, #0
   22f08:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f0a:	2314      	movs	r3, #20
   22f0c:	18fb      	adds	r3, r7, r3
   22f0e:	2200      	movs	r2, #0
   22f10:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f12:	231f      	movs	r3, #31
   22f14:	18fb      	adds	r3, r7, r3
   22f16:	2205      	movs	r2, #5
   22f18:	701a      	strb	r2, [r3, #0]
		break;
   22f1a:	e0d1      	b.n	230c0 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   22f1c:	2314      	movs	r3, #20
   22f1e:	18fb      	adds	r3, r7, r3
   22f20:	2200      	movs	r2, #0
   22f22:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22f24:	2314      	movs	r3, #20
   22f26:	18fb      	adds	r3, r7, r3
   22f28:	2200      	movs	r2, #0
   22f2a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f2c:	2314      	movs	r3, #20
   22f2e:	18fb      	adds	r3, r7, r3
   22f30:	2200      	movs	r2, #0
   22f32:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f34:	231f      	movs	r3, #31
   22f36:	18fb      	adds	r3, r7, r3
   22f38:	2205      	movs	r2, #5
   22f3a:	701a      	strb	r2, [r3, #0]
		break;
   22f3c:	e0c0      	b.n	230c0 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   22f3e:	2314      	movs	r3, #20
   22f40:	18fb      	adds	r3, r7, r3
   22f42:	22ff      	movs	r2, #255	; 0xff
   22f44:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   22f46:	2314      	movs	r3, #20
   22f48:	18fb      	adds	r3, r7, r3
   22f4a:	22ff      	movs	r2, #255	; 0xff
   22f4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   22f4e:	2314      	movs	r3, #20
   22f50:	18fb      	adds	r3, r7, r3
   22f52:	22ff      	movs	r2, #255	; 0xff
   22f54:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f56:	231f      	movs	r3, #31
   22f58:	18fb      	adds	r3, r7, r3
   22f5a:	2205      	movs	r2, #5
   22f5c:	701a      	strb	r2, [r3, #0]
		break;
   22f5e:	e0af      	b.n	230c0 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   22f60:	68bb      	ldr	r3, [r7, #8]
   22f62:	0c1b      	lsrs	r3, r3, #16
   22f64:	b2da      	uxtb	r2, r3
   22f66:	2314      	movs	r3, #20
   22f68:	18fb      	adds	r3, r7, r3
   22f6a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22f6c:	68bb      	ldr	r3, [r7, #8]
   22f6e:	0a1b      	lsrs	r3, r3, #8
   22f70:	b2da      	uxtb	r2, r3
   22f72:	2314      	movs	r3, #20
   22f74:	18fb      	adds	r3, r7, r3
   22f76:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22f78:	68bb      	ldr	r3, [r7, #8]
   22f7a:	b2da      	uxtb	r2, r3
   22f7c:	2314      	movs	r3, #20
   22f7e:	18fb      	adds	r3, r7, r3
   22f80:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   22f82:	683b      	ldr	r3, [r7, #0]
   22f84:	0a1b      	lsrs	r3, r3, #8
   22f86:	b2da      	uxtb	r2, r3
   22f88:	2314      	movs	r3, #20
   22f8a:	18fb      	adds	r3, r7, r3
   22f8c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   22f8e:	683b      	ldr	r3, [r7, #0]
   22f90:	b2da      	uxtb	r2, r3
   22f92:	2314      	movs	r3, #20
   22f94:	18fb      	adds	r3, r7, r3
   22f96:	715a      	strb	r2, [r3, #5]
		len = 7;
   22f98:	231f      	movs	r3, #31
   22f9a:	18fb      	adds	r3, r7, r3
   22f9c:	2207      	movs	r2, #7
   22f9e:	701a      	strb	r2, [r3, #0]
		break;
   22fa0:	e08e      	b.n	230c0 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   22fa2:	68bb      	ldr	r3, [r7, #8]
   22fa4:	0c1b      	lsrs	r3, r3, #16
   22fa6:	b2da      	uxtb	r2, r3
   22fa8:	2314      	movs	r3, #20
   22faa:	18fb      	adds	r3, r7, r3
   22fac:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22fae:	68bb      	ldr	r3, [r7, #8]
   22fb0:	0a1b      	lsrs	r3, r3, #8
   22fb2:	b2da      	uxtb	r2, r3
   22fb4:	2314      	movs	r3, #20
   22fb6:	18fb      	adds	r3, r7, r3
   22fb8:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22fba:	68bb      	ldr	r3, [r7, #8]
   22fbc:	b2da      	uxtb	r2, r3
   22fbe:	2314      	movs	r3, #20
   22fc0:	18fb      	adds	r3, r7, r3
   22fc2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   22fc4:	683b      	ldr	r3, [r7, #0]
   22fc6:	0c1b      	lsrs	r3, r3, #16
   22fc8:	b2da      	uxtb	r2, r3
   22fca:	2314      	movs	r3, #20
   22fcc:	18fb      	adds	r3, r7, r3
   22fce:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   22fd0:	683b      	ldr	r3, [r7, #0]
   22fd2:	0a1b      	lsrs	r3, r3, #8
   22fd4:	b2da      	uxtb	r2, r3
   22fd6:	2314      	movs	r3, #20
   22fd8:	18fb      	adds	r3, r7, r3
   22fda:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   22fdc:	683b      	ldr	r3, [r7, #0]
   22fde:	b2da      	uxtb	r2, r3
   22fe0:	2314      	movs	r3, #20
   22fe2:	18fb      	adds	r3, r7, r3
   22fe4:	719a      	strb	r2, [r3, #6]
		len = 8;
   22fe6:	231f      	movs	r3, #31
   22fe8:	18fb      	adds	r3, r7, r3
   22fea:	2208      	movs	r2, #8
   22fec:	701a      	strb	r2, [r3, #0]
		break;
   22fee:	e067      	b.n	230c0 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   22ff0:	68bb      	ldr	r3, [r7, #8]
   22ff2:	0a1b      	lsrs	r3, r3, #8
   22ff4:	b2da      	uxtb	r2, r3
   22ff6:	2314      	movs	r3, #20
   22ff8:	18fb      	adds	r3, r7, r3
   22ffa:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22ffc:	2330      	movs	r3, #48	; 0x30
   22ffe:	18fb      	adds	r3, r7, r3
   23000:	781b      	ldrb	r3, [r3, #0]
   23002:	2b00      	cmp	r3, #0
   23004:	d009      	beq.n	2301a <spi_cmd+0x1da>
   23006:	2314      	movs	r3, #20
   23008:	18fb      	adds	r3, r7, r3
   2300a:	785b      	ldrb	r3, [r3, #1]
   2300c:	2280      	movs	r2, #128	; 0x80
   2300e:	4252      	negs	r2, r2
   23010:	4313      	orrs	r3, r2
   23012:	b2da      	uxtb	r2, r3
   23014:	2314      	movs	r3, #20
   23016:	18fb      	adds	r3, r7, r3
   23018:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2301a:	68bb      	ldr	r3, [r7, #8]
   2301c:	b2da      	uxtb	r2, r3
   2301e:	2314      	movs	r3, #20
   23020:	18fb      	adds	r3, r7, r3
   23022:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23024:	687b      	ldr	r3, [r7, #4]
   23026:	0e1b      	lsrs	r3, r3, #24
   23028:	b2da      	uxtb	r2, r3
   2302a:	2314      	movs	r3, #20
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23030:	687b      	ldr	r3, [r7, #4]
   23032:	0c1b      	lsrs	r3, r3, #16
   23034:	b2da      	uxtb	r2, r3
   23036:	2314      	movs	r3, #20
   23038:	18fb      	adds	r3, r7, r3
   2303a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   2303c:	687b      	ldr	r3, [r7, #4]
   2303e:	0a1b      	lsrs	r3, r3, #8
   23040:	b2da      	uxtb	r2, r3
   23042:	2314      	movs	r3, #20
   23044:	18fb      	adds	r3, r7, r3
   23046:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   23048:	687b      	ldr	r3, [r7, #4]
   2304a:	b2da      	uxtb	r2, r3
   2304c:	2314      	movs	r3, #20
   2304e:	18fb      	adds	r3, r7, r3
   23050:	719a      	strb	r2, [r3, #6]
		len = 8;
   23052:	231f      	movs	r3, #31
   23054:	18fb      	adds	r3, r7, r3
   23056:	2208      	movs	r2, #8
   23058:	701a      	strb	r2, [r3, #0]
		break;
   2305a:	e031      	b.n	230c0 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   2305c:	68bb      	ldr	r3, [r7, #8]
   2305e:	0c1b      	lsrs	r3, r3, #16
   23060:	b2da      	uxtb	r2, r3
   23062:	2314      	movs	r3, #20
   23064:	18fb      	adds	r3, r7, r3
   23066:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23068:	68bb      	ldr	r3, [r7, #8]
   2306a:	0a1b      	lsrs	r3, r3, #8
   2306c:	b2da      	uxtb	r2, r3
   2306e:	2314      	movs	r3, #20
   23070:	18fb      	adds	r3, r7, r3
   23072:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   23074:	68bb      	ldr	r3, [r7, #8]
   23076:	b2da      	uxtb	r2, r3
   23078:	2314      	movs	r3, #20
   2307a:	18fb      	adds	r3, r7, r3
   2307c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   2307e:	687b      	ldr	r3, [r7, #4]
   23080:	0e1b      	lsrs	r3, r3, #24
   23082:	b2da      	uxtb	r2, r3
   23084:	2314      	movs	r3, #20
   23086:	18fb      	adds	r3, r7, r3
   23088:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2308a:	687b      	ldr	r3, [r7, #4]
   2308c:	0c1b      	lsrs	r3, r3, #16
   2308e:	b2da      	uxtb	r2, r3
   23090:	2314      	movs	r3, #20
   23092:	18fb      	adds	r3, r7, r3
   23094:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   23096:	687b      	ldr	r3, [r7, #4]
   23098:	0a1b      	lsrs	r3, r3, #8
   2309a:	b2da      	uxtb	r2, r3
   2309c:	2314      	movs	r3, #20
   2309e:	18fb      	adds	r3, r7, r3
   230a0:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   230a2:	687b      	ldr	r3, [r7, #4]
   230a4:	b2da      	uxtb	r2, r3
   230a6:	2314      	movs	r3, #20
   230a8:	18fb      	adds	r3, r7, r3
   230aa:	71da      	strb	r2, [r3, #7]
		len = 9;
   230ac:	231f      	movs	r3, #31
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	2209      	movs	r2, #9
   230b2:	701a      	strb	r2, [r3, #0]
		break;
   230b4:	e004      	b.n	230c0 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   230b6:	231e      	movs	r3, #30
   230b8:	18fb      	adds	r3, r7, r3
   230ba:	2200      	movs	r2, #0
   230bc:	701a      	strb	r2, [r3, #0]
		break;
   230be:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   230c0:	231e      	movs	r3, #30
   230c2:	18fb      	adds	r3, r7, r3
   230c4:	781b      	ldrb	r3, [r3, #0]
   230c6:	b25b      	sxtb	r3, r3
   230c8:	2b00      	cmp	r3, #0
   230ca:	d03f      	beq.n	2314c <spi_cmd+0x30c>
		if (!gu8Crc_off)
   230cc:	4b24      	ldr	r3, [pc, #144]	; (23160 <spi_cmd+0x320>)
   230ce:	781b      	ldrb	r3, [r3, #0]
   230d0:	2b00      	cmp	r3, #0
   230d2:	d115      	bne.n	23100 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   230d4:	231f      	movs	r3, #31
   230d6:	18fb      	adds	r3, r7, r3
   230d8:	781b      	ldrb	r3, [r3, #0]
   230da:	1e5c      	subs	r4, r3, #1
   230dc:	231f      	movs	r3, #31
   230de:	18fb      	adds	r3, r7, r3
   230e0:	781b      	ldrb	r3, [r3, #0]
   230e2:	3b01      	subs	r3, #1
   230e4:	001a      	movs	r2, r3
   230e6:	2314      	movs	r3, #20
   230e8:	18fb      	adds	r3, r7, r3
   230ea:	0019      	movs	r1, r3
   230ec:	207f      	movs	r0, #127	; 0x7f
   230ee:	4b1d      	ldr	r3, [pc, #116]	; (23164 <spi_cmd+0x324>)
   230f0:	4798      	blx	r3
   230f2:	0003      	movs	r3, r0
   230f4:	18db      	adds	r3, r3, r3
   230f6:	b2da      	uxtb	r2, r3
   230f8:	2314      	movs	r3, #20
   230fa:	18fb      	adds	r3, r7, r3
   230fc:	551a      	strb	r2, [r3, r4]
   230fe:	e006      	b.n	2310e <spi_cmd+0x2ce>
		else
			len-=1;
   23100:	231f      	movs	r3, #31
   23102:	18fb      	adds	r3, r7, r3
   23104:	221f      	movs	r2, #31
   23106:	18ba      	adds	r2, r7, r2
   23108:	7812      	ldrb	r2, [r2, #0]
   2310a:	3a01      	subs	r2, #1
   2310c:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   2310e:	231f      	movs	r3, #31
   23110:	18fb      	adds	r3, r7, r3
   23112:	781b      	ldrb	r3, [r3, #0]
   23114:	b29a      	uxth	r2, r3
   23116:	2314      	movs	r3, #20
   23118:	18fb      	adds	r3, r7, r3
   2311a:	0011      	movs	r1, r2
   2311c:	0018      	movs	r0, r3
   2311e:	4b12      	ldr	r3, [pc, #72]	; (23168 <spi_cmd+0x328>)
   23120:	4798      	blx	r3
   23122:	1e03      	subs	r3, r0, #0
   23124:	d012      	beq.n	2314c <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23126:	2390      	movs	r3, #144	; 0x90
   23128:	005a      	lsls	r2, r3, #1
   2312a:	4910      	ldr	r1, [pc, #64]	; (2316c <spi_cmd+0x32c>)
   2312c:	4b10      	ldr	r3, [pc, #64]	; (23170 <spi_cmd+0x330>)
   2312e:	0018      	movs	r0, r3
   23130:	4b10      	ldr	r3, [pc, #64]	; (23174 <spi_cmd+0x334>)
   23132:	4798      	blx	r3
   23134:	4b10      	ldr	r3, [pc, #64]	; (23178 <spi_cmd+0x338>)
   23136:	0018      	movs	r0, r3
   23138:	4b0e      	ldr	r3, [pc, #56]	; (23174 <spi_cmd+0x334>)
   2313a:	4798      	blx	r3
   2313c:	4b0f      	ldr	r3, [pc, #60]	; (2317c <spi_cmd+0x33c>)
   2313e:	0018      	movs	r0, r3
   23140:	4b0c      	ldr	r3, [pc, #48]	; (23174 <spi_cmd+0x334>)
   23142:	4798      	blx	r3
			result = N_FAIL;
   23144:	231e      	movs	r3, #30
   23146:	18fb      	adds	r3, r7, r3
   23148:	2200      	movs	r2, #0
   2314a:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   2314c:	231e      	movs	r3, #30
   2314e:	18fb      	adds	r3, r7, r3
   23150:	781b      	ldrb	r3, [r3, #0]
   23152:	b25b      	sxtb	r3, r3
}
   23154:	0018      	movs	r0, r3
   23156:	46bd      	mov	sp, r7
   23158:	b009      	add	sp, #36	; 0x24
   2315a:	bd90      	pop	{r4, r7, pc}
   2315c:	00038750 	.word	0x00038750
   23160:	2000410c 	.word	0x2000410c
   23164:	00022df1 	.word	0x00022df1
   23168:	00022d39 	.word	0x00022d39
   2316c:	000387c8 	.word	0x000387c8
   23170:	000381d8 	.word	0x000381d8
   23174:	0001d8a9 	.word	0x0001d8a9
   23178:	000381ec 	.word	0x000381ec
   2317c:	00038218 	.word	0x00038218

00023180 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23180:	b590      	push	{r4, r7, lr}
   23182:	b085      	sub	sp, #20
   23184:	af00      	add	r7, sp, #0
   23186:	0002      	movs	r2, r0
   23188:	1dfb      	adds	r3, r7, #7
   2318a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   2318c:	230e      	movs	r3, #14
   2318e:	18fb      	adds	r3, r7, r3
   23190:	2201      	movs	r2, #1
   23192:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23194:	4b32      	ldr	r3, [pc, #200]	; (23260 <spi_data_rsp+0xe0>)
   23196:	781b      	ldrb	r3, [r3, #0]
   23198:	2b00      	cmp	r3, #0
   2319a:	d104      	bne.n	231a6 <spi_data_rsp+0x26>
		len = 2;
   2319c:	230f      	movs	r3, #15
   2319e:	18fb      	adds	r3, r7, r3
   231a0:	2202      	movs	r2, #2
   231a2:	701a      	strb	r2, [r3, #0]
   231a4:	e003      	b.n	231ae <spi_data_rsp+0x2e>
	else
		len = 3;
   231a6:	230f      	movs	r3, #15
   231a8:	18fb      	adds	r3, r7, r3
   231aa:	2203      	movs	r2, #3
   231ac:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   231ae:	230f      	movs	r3, #15
   231b0:	18fb      	adds	r3, r7, r3
   231b2:	781b      	ldrb	r3, [r3, #0]
   231b4:	b29a      	uxth	r2, r3
   231b6:	2308      	movs	r3, #8
   231b8:	18fb      	adds	r3, r7, r3
   231ba:	0011      	movs	r1, r2
   231bc:	0018      	movs	r0, r3
   231be:	4b29      	ldr	r3, [pc, #164]	; (23264 <spi_data_rsp+0xe4>)
   231c0:	4798      	blx	r3
   231c2:	1e03      	subs	r3, r0, #0
   231c4:	d013      	beq.n	231ee <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   231c6:	239a      	movs	r3, #154	; 0x9a
   231c8:	005a      	lsls	r2, r3, #1
   231ca:	4927      	ldr	r1, [pc, #156]	; (23268 <spi_data_rsp+0xe8>)
   231cc:	4b27      	ldr	r3, [pc, #156]	; (2326c <spi_data_rsp+0xec>)
   231ce:	0018      	movs	r0, r3
   231d0:	4b27      	ldr	r3, [pc, #156]	; (23270 <spi_data_rsp+0xf0>)
   231d2:	4798      	blx	r3
   231d4:	4b27      	ldr	r3, [pc, #156]	; (23274 <spi_data_rsp+0xf4>)
   231d6:	0018      	movs	r0, r3
   231d8:	4b25      	ldr	r3, [pc, #148]	; (23270 <spi_data_rsp+0xf0>)
   231da:	4798      	blx	r3
   231dc:	4b26      	ldr	r3, [pc, #152]	; (23278 <spi_data_rsp+0xf8>)
   231de:	0018      	movs	r0, r3
   231e0:	4b23      	ldr	r3, [pc, #140]	; (23270 <spi_data_rsp+0xf0>)
   231e2:	4798      	blx	r3
		result = N_FAIL;
   231e4:	230e      	movs	r3, #14
   231e6:	18fb      	adds	r3, r7, r3
   231e8:	2200      	movs	r2, #0
   231ea:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   231ec:	e030      	b.n	23250 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   231ee:	230f      	movs	r3, #15
   231f0:	18fb      	adds	r3, r7, r3
   231f2:	781b      	ldrb	r3, [r3, #0]
   231f4:	3b01      	subs	r3, #1
   231f6:	2208      	movs	r2, #8
   231f8:	18ba      	adds	r2, r7, r2
   231fa:	5cd3      	ldrb	r3, [r2, r3]
   231fc:	2b00      	cmp	r3, #0
   231fe:	d108      	bne.n	23212 <spi_data_rsp+0x92>
   23200:	230f      	movs	r3, #15
   23202:	18fb      	adds	r3, r7, r3
   23204:	781b      	ldrb	r3, [r3, #0]
   23206:	3b02      	subs	r3, #2
   23208:	2208      	movs	r2, #8
   2320a:	18ba      	adds	r2, r7, r2
   2320c:	5cd3      	ldrb	r3, [r2, r3]
   2320e:	2bc3      	cmp	r3, #195	; 0xc3
   23210:	d01e      	beq.n	23250 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23212:	233c      	movs	r3, #60	; 0x3c
   23214:	33ff      	adds	r3, #255	; 0xff
   23216:	001a      	movs	r2, r3
   23218:	4913      	ldr	r1, [pc, #76]	; (23268 <spi_data_rsp+0xe8>)
   2321a:	4b14      	ldr	r3, [pc, #80]	; (2326c <spi_data_rsp+0xec>)
   2321c:	0018      	movs	r0, r3
   2321e:	4b14      	ldr	r3, [pc, #80]	; (23270 <spi_data_rsp+0xf0>)
   23220:	4798      	blx	r3
   23222:	2308      	movs	r3, #8
   23224:	18fb      	adds	r3, r7, r3
   23226:	781b      	ldrb	r3, [r3, #0]
   23228:	0019      	movs	r1, r3
   2322a:	2308      	movs	r3, #8
   2322c:	18fb      	adds	r3, r7, r3
   2322e:	785b      	ldrb	r3, [r3, #1]
   23230:	001a      	movs	r2, r3
   23232:	2308      	movs	r3, #8
   23234:	18fb      	adds	r3, r7, r3
   23236:	789b      	ldrb	r3, [r3, #2]
   23238:	4810      	ldr	r0, [pc, #64]	; (2327c <spi_data_rsp+0xfc>)
   2323a:	4c0d      	ldr	r4, [pc, #52]	; (23270 <spi_data_rsp+0xf0>)
   2323c:	47a0      	blx	r4
   2323e:	4b0e      	ldr	r3, [pc, #56]	; (23278 <spi_data_rsp+0xf8>)
   23240:	0018      	movs	r0, r3
   23242:	4b0b      	ldr	r3, [pc, #44]	; (23270 <spi_data_rsp+0xf0>)
   23244:	4798      	blx	r3
		result = N_FAIL;
   23246:	230e      	movs	r3, #14
   23248:	18fb      	adds	r3, r7, r3
   2324a:	2200      	movs	r2, #0
   2324c:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   2324e:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23250:	230e      	movs	r3, #14
   23252:	18fb      	adds	r3, r7, r3
   23254:	781b      	ldrb	r3, [r3, #0]
   23256:	b25b      	sxtb	r3, r3
}
   23258:	0018      	movs	r0, r3
   2325a:	46bd      	mov	sp, r7
   2325c:	b005      	add	sp, #20
   2325e:	bd90      	pop	{r4, r7, pc}
   23260:	2000410c 	.word	0x2000410c
   23264:	00022cf5 	.word	0x00022cf5
   23268:	000387d0 	.word	0x000387d0
   2326c:	000381d8 	.word	0x000381d8
   23270:	0001d8a9 	.word	0x0001d8a9
   23274:	0003821c 	.word	0x0003821c
   23278:	00038218 	.word	0x00038218
   2327c:	0003823c 	.word	0x0003823c

00023280 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23280:	b580      	push	{r7, lr}
   23282:	b084      	sub	sp, #16
   23284:	af00      	add	r7, sp, #0
   23286:	0002      	movs	r2, r0
   23288:	1dfb      	adds	r3, r7, #7
   2328a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   2328c:	230f      	movs	r3, #15
   2328e:	18fb      	adds	r3, r7, r3
   23290:	2201      	movs	r2, #1
   23292:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23294:	1dfb      	adds	r3, r7, #7
   23296:	781b      	ldrb	r3, [r3, #0]
   23298:	2bcf      	cmp	r3, #207	; 0xcf
   2329a:	d007      	beq.n	232ac <spi_cmd_rsp+0x2c>
   2329c:	1dfb      	adds	r3, r7, #7
   2329e:	781b      	ldrb	r3, [r3, #0]
   232a0:	2bc5      	cmp	r3, #197	; 0xc5
   232a2:	d003      	beq.n	232ac <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   232a4:	1dfb      	adds	r3, r7, #7
   232a6:	781b      	ldrb	r3, [r3, #0]
   232a8:	2bc6      	cmp	r3, #198	; 0xc6
   232aa:	d10c      	bne.n	232c6 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   232ac:	230d      	movs	r3, #13
   232ae:	18fb      	adds	r3, r7, r3
   232b0:	2101      	movs	r1, #1
   232b2:	0018      	movs	r0, r3
   232b4:	4b3b      	ldr	r3, [pc, #236]	; (233a4 <spi_cmd_rsp+0x124>)
   232b6:	4798      	blx	r3
   232b8:	1e03      	subs	r3, r0, #0
   232ba:	d004      	beq.n	232c6 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   232bc:	230f      	movs	r3, #15
   232be:	18fb      	adds	r3, r7, r3
   232c0:	2200      	movs	r2, #0
   232c2:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   232c4:	e065      	b.n	23392 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   232c6:	230e      	movs	r3, #14
   232c8:	18fb      	adds	r3, r7, r3
   232ca:	220a      	movs	r2, #10
   232cc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   232ce:	230d      	movs	r3, #13
   232d0:	18fb      	adds	r3, r7, r3
   232d2:	2101      	movs	r1, #1
   232d4:	0018      	movs	r0, r3
   232d6:	4b33      	ldr	r3, [pc, #204]	; (233a4 <spi_cmd_rsp+0x124>)
   232d8:	4798      	blx	r3
   232da:	1e03      	subs	r3, r0, #0
   232dc:	d014      	beq.n	23308 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   232de:	235c      	movs	r3, #92	; 0x5c
   232e0:	33ff      	adds	r3, #255	; 0xff
   232e2:	001a      	movs	r2, r3
   232e4:	4930      	ldr	r1, [pc, #192]	; (233a8 <spi_cmd_rsp+0x128>)
   232e6:	4b31      	ldr	r3, [pc, #196]	; (233ac <spi_cmd_rsp+0x12c>)
   232e8:	0018      	movs	r0, r3
   232ea:	4b31      	ldr	r3, [pc, #196]	; (233b0 <spi_cmd_rsp+0x130>)
   232ec:	4798      	blx	r3
   232ee:	4b31      	ldr	r3, [pc, #196]	; (233b4 <spi_cmd_rsp+0x134>)
   232f0:	0018      	movs	r0, r3
   232f2:	4b2f      	ldr	r3, [pc, #188]	; (233b0 <spi_cmd_rsp+0x130>)
   232f4:	4798      	blx	r3
   232f6:	4b30      	ldr	r3, [pc, #192]	; (233b8 <spi_cmd_rsp+0x138>)
   232f8:	0018      	movs	r0, r3
   232fa:	4b2d      	ldr	r3, [pc, #180]	; (233b0 <spi_cmd_rsp+0x130>)
   232fc:	4798      	blx	r3
			result = N_FAIL;
   232fe:	230f      	movs	r3, #15
   23300:	18fb      	adds	r3, r7, r3
   23302:	2200      	movs	r2, #0
   23304:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23306:	e044      	b.n	23392 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23308:	230d      	movs	r3, #13
   2330a:	18fb      	adds	r3, r7, r3
   2330c:	781b      	ldrb	r3, [r3, #0]
   2330e:	1dfa      	adds	r2, r7, #7
   23310:	7812      	ldrb	r2, [r2, #0]
   23312:	429a      	cmp	r2, r3
   23314:	d00b      	beq.n	2332e <spi_cmd_rsp+0xae>
   23316:	230e      	movs	r3, #14
   23318:	18fb      	adds	r3, r7, r3
   2331a:	781b      	ldrb	r3, [r3, #0]
   2331c:	b25b      	sxtb	r3, r3
   2331e:	b2da      	uxtb	r2, r3
   23320:	3a01      	subs	r2, #1
   23322:	b2d1      	uxtb	r1, r2
   23324:	220e      	movs	r2, #14
   23326:	18ba      	adds	r2, r7, r2
   23328:	7011      	strb	r1, [r2, #0]
   2332a:	2b00      	cmp	r3, #0
   2332c:	dccf      	bgt.n	232ce <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2332e:	230e      	movs	r3, #14
   23330:	18fb      	adds	r3, r7, r3
   23332:	220a      	movs	r2, #10
   23334:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23336:	230d      	movs	r3, #13
   23338:	18fb      	adds	r3, r7, r3
   2333a:	2101      	movs	r1, #1
   2333c:	0018      	movs	r0, r3
   2333e:	4b19      	ldr	r3, [pc, #100]	; (233a4 <spi_cmd_rsp+0x124>)
   23340:	4798      	blx	r3
   23342:	1e03      	subs	r3, r0, #0
   23344:	d014      	beq.n	23370 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23346:	236a      	movs	r3, #106	; 0x6a
   23348:	33ff      	adds	r3, #255	; 0xff
   2334a:	001a      	movs	r2, r3
   2334c:	4916      	ldr	r1, [pc, #88]	; (233a8 <spi_cmd_rsp+0x128>)
   2334e:	4b17      	ldr	r3, [pc, #92]	; (233ac <spi_cmd_rsp+0x12c>)
   23350:	0018      	movs	r0, r3
   23352:	4b17      	ldr	r3, [pc, #92]	; (233b0 <spi_cmd_rsp+0x130>)
   23354:	4798      	blx	r3
   23356:	4b17      	ldr	r3, [pc, #92]	; (233b4 <spi_cmd_rsp+0x134>)
   23358:	0018      	movs	r0, r3
   2335a:	4b15      	ldr	r3, [pc, #84]	; (233b0 <spi_cmd_rsp+0x130>)
   2335c:	4798      	blx	r3
   2335e:	4b16      	ldr	r3, [pc, #88]	; (233b8 <spi_cmd_rsp+0x138>)
   23360:	0018      	movs	r0, r3
   23362:	4b13      	ldr	r3, [pc, #76]	; (233b0 <spi_cmd_rsp+0x130>)
   23364:	4798      	blx	r3
			result = N_FAIL;
   23366:	230f      	movs	r3, #15
   23368:	18fb      	adds	r3, r7, r3
   2336a:	2200      	movs	r2, #0
   2336c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2336e:	e010      	b.n	23392 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23370:	230d      	movs	r3, #13
   23372:	18fb      	adds	r3, r7, r3
   23374:	781b      	ldrb	r3, [r3, #0]
   23376:	2b00      	cmp	r3, #0
   23378:	d00b      	beq.n	23392 <spi_cmd_rsp+0x112>
   2337a:	230e      	movs	r3, #14
   2337c:	18fb      	adds	r3, r7, r3
   2337e:	781b      	ldrb	r3, [r3, #0]
   23380:	b25b      	sxtb	r3, r3
   23382:	b2da      	uxtb	r2, r3
   23384:	3a01      	subs	r2, #1
   23386:	b2d1      	uxtb	r1, r2
   23388:	220e      	movs	r2, #14
   2338a:	18ba      	adds	r2, r7, r2
   2338c:	7011      	strb	r1, [r2, #0]
   2338e:	2b00      	cmp	r3, #0
   23390:	dcd1      	bgt.n	23336 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   23392:	230f      	movs	r3, #15
   23394:	18fb      	adds	r3, r7, r3
   23396:	781b      	ldrb	r3, [r3, #0]
   23398:	b25b      	sxtb	r3, r3
}
   2339a:	0018      	movs	r0, r3
   2339c:	46bd      	mov	sp, r7
   2339e:	b004      	add	sp, #16
   233a0:	bd80      	pop	{r7, pc}
   233a2:	46c0      	nop			; (mov r8, r8)
   233a4:	00022cf5 	.word	0x00022cf5
   233a8:	000387e0 	.word	0x000387e0
   233ac:	000381d8 	.word	0x000381d8
   233b0:	0001d8a9 	.word	0x0001d8a9
   233b4:	0003826c 	.word	0x0003826c
   233b8:	00038218 	.word	0x00038218

000233bc <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   233bc:	b590      	push	{r4, r7, lr}
   233be:	b09f      	sub	sp, #124	; 0x7c
   233c0:	af00      	add	r7, sp, #0
   233c2:	60b9      	str	r1, [r7, #8]
   233c4:	607a      	str	r2, [r7, #4]
   233c6:	603b      	str	r3, [r7, #0]
   233c8:	230f      	movs	r3, #15
   233ca:	18fb      	adds	r3, r7, r3
   233cc:	1c02      	adds	r2, r0, #0
   233ce:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   233d0:	2300      	movs	r3, #0
   233d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   233d4:	2301      	movs	r3, #1
   233d6:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   233d8:	2338      	movs	r3, #56	; 0x38
   233da:	18fb      	adds	r3, r7, r3
   233dc:	220f      	movs	r2, #15
   233de:	18ba      	adds	r2, r7, r2
   233e0:	7812      	ldrb	r2, [r2, #0]
   233e2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   233e4:	230f      	movs	r3, #15
   233e6:	18fb      	adds	r3, r7, r3
   233e8:	781b      	ldrb	r3, [r3, #0]
   233ea:	3bc1      	subs	r3, #193	; 0xc1
   233ec:	2b0e      	cmp	r3, #14
   233ee:	d900      	bls.n	233f2 <spi_cmd_complete+0x36>
   233f0:	e103      	b.n	235fa <spi_cmd_complete+0x23e>
   233f2:	009a      	lsls	r2, r3, #2
   233f4:	4bd1      	ldr	r3, [pc, #836]	; (2373c <spi_cmd_complete+0x380>)
   233f6:	18d3      	adds	r3, r2, r3
   233f8:	681b      	ldr	r3, [r3, #0]
   233fa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   233fc:	68bb      	ldr	r3, [r7, #8]
   233fe:	0c1b      	lsrs	r3, r3, #16
   23400:	b2da      	uxtb	r2, r3
   23402:	2338      	movs	r3, #56	; 0x38
   23404:	18fb      	adds	r3, r7, r3
   23406:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23408:	68bb      	ldr	r3, [r7, #8]
   2340a:	0a1b      	lsrs	r3, r3, #8
   2340c:	b2da      	uxtb	r2, r3
   2340e:	2338      	movs	r3, #56	; 0x38
   23410:	18fb      	adds	r3, r7, r3
   23412:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23414:	68bb      	ldr	r3, [r7, #8]
   23416:	b2da      	uxtb	r2, r3
   23418:	2338      	movs	r3, #56	; 0x38
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2341e:	2305      	movs	r3, #5
   23420:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23422:	e0ed      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23424:	68bb      	ldr	r3, [r7, #8]
   23426:	0a1b      	lsrs	r3, r3, #8
   23428:	b2da      	uxtb	r2, r3
   2342a:	2338      	movs	r3, #56	; 0x38
   2342c:	18fb      	adds	r3, r7, r3
   2342e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23430:	2388      	movs	r3, #136	; 0x88
   23432:	18fb      	adds	r3, r7, r3
   23434:	781b      	ldrb	r3, [r3, #0]
   23436:	2b01      	cmp	r3, #1
   23438:	d109      	bne.n	2344e <spi_cmd_complete+0x92>
   2343a:	2338      	movs	r3, #56	; 0x38
   2343c:	18fb      	adds	r3, r7, r3
   2343e:	785b      	ldrb	r3, [r3, #1]
   23440:	2280      	movs	r2, #128	; 0x80
   23442:	4252      	negs	r2, r2
   23444:	4313      	orrs	r3, r2
   23446:	b2da      	uxtb	r2, r3
   23448:	2338      	movs	r3, #56	; 0x38
   2344a:	18fb      	adds	r3, r7, r3
   2344c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   2344e:	68bb      	ldr	r3, [r7, #8]
   23450:	b2da      	uxtb	r2, r3
   23452:	2338      	movs	r3, #56	; 0x38
   23454:	18fb      	adds	r3, r7, r3
   23456:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23458:	2338      	movs	r3, #56	; 0x38
   2345a:	18fb      	adds	r3, r7, r3
   2345c:	2200      	movs	r2, #0
   2345e:	70da      	strb	r2, [r3, #3]
		len = 5;
   23460:	2305      	movs	r3, #5
   23462:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23464:	e0cc      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   23466:	2338      	movs	r3, #56	; 0x38
   23468:	18fb      	adds	r3, r7, r3
   2346a:	2200      	movs	r2, #0
   2346c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   2346e:	2338      	movs	r3, #56	; 0x38
   23470:	18fb      	adds	r3, r7, r3
   23472:	2200      	movs	r2, #0
   23474:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23476:	2338      	movs	r3, #56	; 0x38
   23478:	18fb      	adds	r3, r7, r3
   2347a:	2200      	movs	r2, #0
   2347c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2347e:	2305      	movs	r3, #5
   23480:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23482:	e0bd      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   23484:	2338      	movs	r3, #56	; 0x38
   23486:	18fb      	adds	r3, r7, r3
   23488:	2200      	movs	r2, #0
   2348a:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   2348c:	2338      	movs	r3, #56	; 0x38
   2348e:	18fb      	adds	r3, r7, r3
   23490:	2200      	movs	r2, #0
   23492:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23494:	2338      	movs	r3, #56	; 0x38
   23496:	18fb      	adds	r3, r7, r3
   23498:	2200      	movs	r2, #0
   2349a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2349c:	2305      	movs	r3, #5
   2349e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234a0:	e0ae      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   234a2:	2338      	movs	r3, #56	; 0x38
   234a4:	18fb      	adds	r3, r7, r3
   234a6:	22ff      	movs	r2, #255	; 0xff
   234a8:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   234aa:	2338      	movs	r3, #56	; 0x38
   234ac:	18fb      	adds	r3, r7, r3
   234ae:	22ff      	movs	r2, #255	; 0xff
   234b0:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   234b2:	2338      	movs	r3, #56	; 0x38
   234b4:	18fb      	adds	r3, r7, r3
   234b6:	22ff      	movs	r2, #255	; 0xff
   234b8:	70da      	strb	r2, [r3, #3]
		len = 5;
   234ba:	2305      	movs	r3, #5
   234bc:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234be:	e09f      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   234c0:	68bb      	ldr	r3, [r7, #8]
   234c2:	0c1b      	lsrs	r3, r3, #16
   234c4:	b2da      	uxtb	r2, r3
   234c6:	2338      	movs	r3, #56	; 0x38
   234c8:	18fb      	adds	r3, r7, r3
   234ca:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   234cc:	68bb      	ldr	r3, [r7, #8]
   234ce:	0a1b      	lsrs	r3, r3, #8
   234d0:	b2da      	uxtb	r2, r3
   234d2:	2338      	movs	r3, #56	; 0x38
   234d4:	18fb      	adds	r3, r7, r3
   234d6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   234d8:	68bb      	ldr	r3, [r7, #8]
   234da:	b2da      	uxtb	r2, r3
   234dc:	2338      	movs	r3, #56	; 0x38
   234de:	18fb      	adds	r3, r7, r3
   234e0:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   234e2:	683b      	ldr	r3, [r7, #0]
   234e4:	0a1b      	lsrs	r3, r3, #8
   234e6:	b2da      	uxtb	r2, r3
   234e8:	2338      	movs	r3, #56	; 0x38
   234ea:	18fb      	adds	r3, r7, r3
   234ec:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   234ee:	683b      	ldr	r3, [r7, #0]
   234f0:	b2da      	uxtb	r2, r3
   234f2:	2338      	movs	r3, #56	; 0x38
   234f4:	18fb      	adds	r3, r7, r3
   234f6:	715a      	strb	r2, [r3, #5]
		len = 7;
   234f8:	2307      	movs	r3, #7
   234fa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234fc:	e080      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   234fe:	68bb      	ldr	r3, [r7, #8]
   23500:	0c1b      	lsrs	r3, r3, #16
   23502:	b2da      	uxtb	r2, r3
   23504:	2338      	movs	r3, #56	; 0x38
   23506:	18fb      	adds	r3, r7, r3
   23508:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2350a:	68bb      	ldr	r3, [r7, #8]
   2350c:	0a1b      	lsrs	r3, r3, #8
   2350e:	b2da      	uxtb	r2, r3
   23510:	2338      	movs	r3, #56	; 0x38
   23512:	18fb      	adds	r3, r7, r3
   23514:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23516:	68bb      	ldr	r3, [r7, #8]
   23518:	b2da      	uxtb	r2, r3
   2351a:	2338      	movs	r3, #56	; 0x38
   2351c:	18fb      	adds	r3, r7, r3
   2351e:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23520:	683b      	ldr	r3, [r7, #0]
   23522:	0c1b      	lsrs	r3, r3, #16
   23524:	b2da      	uxtb	r2, r3
   23526:	2338      	movs	r3, #56	; 0x38
   23528:	18fb      	adds	r3, r7, r3
   2352a:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   2352c:	683b      	ldr	r3, [r7, #0]
   2352e:	0a1b      	lsrs	r3, r3, #8
   23530:	b2da      	uxtb	r2, r3
   23532:	2338      	movs	r3, #56	; 0x38
   23534:	18fb      	adds	r3, r7, r3
   23536:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   23538:	683b      	ldr	r3, [r7, #0]
   2353a:	b2da      	uxtb	r2, r3
   2353c:	2338      	movs	r3, #56	; 0x38
   2353e:	18fb      	adds	r3, r7, r3
   23540:	719a      	strb	r2, [r3, #6]
		len = 8;
   23542:	2308      	movs	r3, #8
   23544:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23546:	e05b      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   23548:	68bb      	ldr	r3, [r7, #8]
   2354a:	0a1b      	lsrs	r3, r3, #8
   2354c:	b2da      	uxtb	r2, r3
   2354e:	2338      	movs	r3, #56	; 0x38
   23550:	18fb      	adds	r3, r7, r3
   23552:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23554:	2388      	movs	r3, #136	; 0x88
   23556:	18fb      	adds	r3, r7, r3
   23558:	781b      	ldrb	r3, [r3, #0]
   2355a:	2b01      	cmp	r3, #1
   2355c:	d109      	bne.n	23572 <spi_cmd_complete+0x1b6>
   2355e:	2338      	movs	r3, #56	; 0x38
   23560:	18fb      	adds	r3, r7, r3
   23562:	785b      	ldrb	r3, [r3, #1]
   23564:	2280      	movs	r2, #128	; 0x80
   23566:	4252      	negs	r2, r2
   23568:	4313      	orrs	r3, r2
   2356a:	b2da      	uxtb	r2, r3
   2356c:	2338      	movs	r3, #56	; 0x38
   2356e:	18fb      	adds	r3, r7, r3
   23570:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   23572:	68bb      	ldr	r3, [r7, #8]
   23574:	b2da      	uxtb	r2, r3
   23576:	2338      	movs	r3, #56	; 0x38
   23578:	18fb      	adds	r3, r7, r3
   2357a:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   2357c:	687b      	ldr	r3, [r7, #4]
   2357e:	78da      	ldrb	r2, [r3, #3]
   23580:	2338      	movs	r3, #56	; 0x38
   23582:	18fb      	adds	r3, r7, r3
   23584:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23586:	687b      	ldr	r3, [r7, #4]
   23588:	789a      	ldrb	r2, [r3, #2]
   2358a:	2338      	movs	r3, #56	; 0x38
   2358c:	18fb      	adds	r3, r7, r3
   2358e:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23590:	687b      	ldr	r3, [r7, #4]
   23592:	785a      	ldrb	r2, [r3, #1]
   23594:	2338      	movs	r3, #56	; 0x38
   23596:	18fb      	adds	r3, r7, r3
   23598:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2359a:	687b      	ldr	r3, [r7, #4]
   2359c:	781a      	ldrb	r2, [r3, #0]
   2359e:	2338      	movs	r3, #56	; 0x38
   235a0:	18fb      	adds	r3, r7, r3
   235a2:	719a      	strb	r2, [r3, #6]
		len = 8;
   235a4:	2308      	movs	r3, #8
   235a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   235a8:	e02a      	b.n	23600 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   235aa:	68bb      	ldr	r3, [r7, #8]
   235ac:	0c1b      	lsrs	r3, r3, #16
   235ae:	b2da      	uxtb	r2, r3
   235b0:	2338      	movs	r3, #56	; 0x38
   235b2:	18fb      	adds	r3, r7, r3
   235b4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   235b6:	68bb      	ldr	r3, [r7, #8]
   235b8:	0a1b      	lsrs	r3, r3, #8
   235ba:	b2da      	uxtb	r2, r3
   235bc:	2338      	movs	r3, #56	; 0x38
   235be:	18fb      	adds	r3, r7, r3
   235c0:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   235c2:	68bb      	ldr	r3, [r7, #8]
   235c4:	b2da      	uxtb	r2, r3
   235c6:	2338      	movs	r3, #56	; 0x38
   235c8:	18fb      	adds	r3, r7, r3
   235ca:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   235cc:	687b      	ldr	r3, [r7, #4]
   235ce:	78da      	ldrb	r2, [r3, #3]
   235d0:	2338      	movs	r3, #56	; 0x38
   235d2:	18fb      	adds	r3, r7, r3
   235d4:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   235d6:	687b      	ldr	r3, [r7, #4]
   235d8:	789a      	ldrb	r2, [r3, #2]
   235da:	2338      	movs	r3, #56	; 0x38
   235dc:	18fb      	adds	r3, r7, r3
   235de:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   235e0:	687b      	ldr	r3, [r7, #4]
   235e2:	785a      	ldrb	r2, [r3, #1]
   235e4:	2338      	movs	r3, #56	; 0x38
   235e6:	18fb      	adds	r3, r7, r3
   235e8:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   235ea:	687b      	ldr	r3, [r7, #4]
   235ec:	781a      	ldrb	r2, [r3, #0]
   235ee:	2338      	movs	r3, #56	; 0x38
   235f0:	18fb      	adds	r3, r7, r3
   235f2:	71da      	strb	r2, [r3, #7]
		len = 9;
   235f4:	2309      	movs	r3, #9
   235f6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   235f8:	e002      	b.n	23600 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   235fa:	2300      	movs	r3, #0
   235fc:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   235fe:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23602:	2b01      	cmp	r3, #1
   23604:	d001      	beq.n	2360a <spi_cmd_complete+0x24e>
		return result;
   23606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23608:	e33a      	b.n	23c80 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2360a:	4b4d      	ldr	r3, [pc, #308]	; (23740 <spi_cmd_complete+0x384>)
   2360c:	781b      	ldrb	r3, [r3, #0]
   2360e:	2b00      	cmp	r3, #0
   23610:	d111      	bne.n	23636 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23614:	1e5c      	subs	r4, r3, #1
   23616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23618:	3b01      	subs	r3, #1
   2361a:	001a      	movs	r2, r3
   2361c:	2338      	movs	r3, #56	; 0x38
   2361e:	18fb      	adds	r3, r7, r3
   23620:	0019      	movs	r1, r3
   23622:	207f      	movs	r0, #127	; 0x7f
   23624:	4b47      	ldr	r3, [pc, #284]	; (23744 <spi_cmd_complete+0x388>)
   23626:	4798      	blx	r3
   23628:	0003      	movs	r3, r0
   2362a:	18db      	adds	r3, r3, r3
   2362c:	b2da      	uxtb	r2, r3
   2362e:	2338      	movs	r3, #56	; 0x38
   23630:	18fb      	adds	r3, r7, r3
   23632:	551a      	strb	r2, [r3, r4]
   23634:	e002      	b.n	2363c <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23638:	3b01      	subs	r3, #1
   2363a:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   2363c:	230f      	movs	r3, #15
   2363e:	18fb      	adds	r3, r7, r3
   23640:	781b      	ldrb	r3, [r3, #0]
   23642:	2bcf      	cmp	r3, #207	; 0xcf
   23644:	d009      	beq.n	2365a <spi_cmd_complete+0x29e>
   23646:	230f      	movs	r3, #15
   23648:	18fb      	adds	r3, r7, r3
   2364a:	781b      	ldrb	r3, [r3, #0]
   2364c:	2bc5      	cmp	r3, #197	; 0xc5
   2364e:	d004      	beq.n	2365a <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23650:	230f      	movs	r3, #15
   23652:	18fb      	adds	r3, r7, r3
   23654:	781b      	ldrb	r3, [r3, #0]
   23656:	2bc6      	cmp	r3, #198	; 0xc6
   23658:	d103      	bne.n	23662 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2365a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2365c:	3306      	adds	r3, #6
   2365e:	673b      	str	r3, [r7, #112]	; 0x70
   23660:	e018      	b.n	23694 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23662:	230f      	movs	r3, #15
   23664:	18fb      	adds	r3, r7, r3
   23666:	781b      	ldrb	r3, [r3, #0]
   23668:	2bc4      	cmp	r3, #196	; 0xc4
   2366a:	d004      	beq.n	23676 <spi_cmd_complete+0x2ba>
   2366c:	230f      	movs	r3, #15
   2366e:	18fb      	adds	r3, r7, r3
   23670:	781b      	ldrb	r3, [r3, #0]
   23672:	2bca      	cmp	r3, #202	; 0xca
   23674:	d10b      	bne.n	2368e <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   23676:	4b32      	ldr	r3, [pc, #200]	; (23740 <spi_cmd_complete+0x384>)
   23678:	781b      	ldrb	r3, [r3, #0]
   2367a:	2b00      	cmp	r3, #0
   2367c:	d103      	bne.n	23686 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2367e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23680:	330c      	adds	r3, #12
   23682:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23684:	e006      	b.n	23694 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23688:	330a      	adds	r3, #10
   2368a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   2368c:	e002      	b.n	23694 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23690:	3305      	adds	r3, #5
   23692:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23696:	2b20      	cmp	r3, #32
   23698:	d914      	bls.n	236c4 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2369a:	23f7      	movs	r3, #247	; 0xf7
   2369c:	005a      	lsls	r2, r3, #1
   2369e:	492a      	ldr	r1, [pc, #168]	; (23748 <spi_cmd_complete+0x38c>)
   236a0:	4b2a      	ldr	r3, [pc, #168]	; (2374c <spi_cmd_complete+0x390>)
   236a2:	0018      	movs	r0, r3
   236a4:	4b2a      	ldr	r3, [pc, #168]	; (23750 <spi_cmd_complete+0x394>)
   236a6:	4798      	blx	r3
   236a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   236aa:	4b2a      	ldr	r3, [pc, #168]	; (23754 <spi_cmd_complete+0x398>)
   236ac:	2220      	movs	r2, #32
   236ae:	0018      	movs	r0, r3
   236b0:	4b27      	ldr	r3, [pc, #156]	; (23750 <spi_cmd_complete+0x394>)
   236b2:	4798      	blx	r3
   236b4:	4b28      	ldr	r3, [pc, #160]	; (23758 <spi_cmd_complete+0x39c>)
   236b6:	0018      	movs	r0, r3
   236b8:	4b25      	ldr	r3, [pc, #148]	; (23750 <spi_cmd_complete+0x394>)
   236ba:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   236bc:	2300      	movs	r3, #0
   236be:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   236c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   236c2:	e2dd      	b.n	23c80 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   236c4:	2377      	movs	r3, #119	; 0x77
   236c6:	18fb      	adds	r3, r7, r3
   236c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   236ca:	701a      	strb	r2, [r3, #0]
   236cc:	e00d      	b.n	236ea <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   236ce:	2377      	movs	r3, #119	; 0x77
   236d0:	18fb      	adds	r3, r7, r3
   236d2:	781b      	ldrb	r3, [r3, #0]
   236d4:	2238      	movs	r2, #56	; 0x38
   236d6:	18ba      	adds	r2, r7, r2
   236d8:	2100      	movs	r1, #0
   236da:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   236dc:	2377      	movs	r3, #119	; 0x77
   236de:	18fb      	adds	r3, r7, r3
   236e0:	781a      	ldrb	r2, [r3, #0]
   236e2:	2377      	movs	r3, #119	; 0x77
   236e4:	18fb      	adds	r3, r7, r3
   236e6:	3201      	adds	r2, #1
   236e8:	701a      	strb	r2, [r3, #0]
   236ea:	2377      	movs	r3, #119	; 0x77
   236ec:	18fb      	adds	r3, r7, r3
   236ee:	781a      	ldrb	r2, [r3, #0]
   236f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   236f2:	429a      	cmp	r2, r3
   236f4:	d3eb      	bcc.n	236ce <spi_cmd_complete+0x312>
	}
	rix = len;
   236f6:	2376      	movs	r3, #118	; 0x76
   236f8:	18fb      	adds	r3, r7, r3
   236fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   236fc:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   236fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23700:	b29a      	uxth	r2, r3
   23702:	2318      	movs	r3, #24
   23704:	18f9      	adds	r1, r7, r3
   23706:	2338      	movs	r3, #56	; 0x38
   23708:	18fb      	adds	r3, r7, r3
   2370a:	0018      	movs	r0, r3
   2370c:	4b13      	ldr	r3, [pc, #76]	; (2375c <spi_cmd_complete+0x3a0>)
   2370e:	4798      	blx	r3
   23710:	1e03      	subs	r3, r0, #0
   23712:	d027      	beq.n	23764 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23714:	23fa      	movs	r3, #250	; 0xfa
   23716:	33ff      	adds	r3, #255	; 0xff
   23718:	001a      	movs	r2, r3
   2371a:	490b      	ldr	r1, [pc, #44]	; (23748 <spi_cmd_complete+0x38c>)
   2371c:	4b0b      	ldr	r3, [pc, #44]	; (2374c <spi_cmd_complete+0x390>)
   2371e:	0018      	movs	r0, r3
   23720:	4b0b      	ldr	r3, [pc, #44]	; (23750 <spi_cmd_complete+0x394>)
   23722:	4798      	blx	r3
   23724:	4b0e      	ldr	r3, [pc, #56]	; (23760 <spi_cmd_complete+0x3a4>)
   23726:	0018      	movs	r0, r3
   23728:	4b09      	ldr	r3, [pc, #36]	; (23750 <spi_cmd_complete+0x394>)
   2372a:	4798      	blx	r3
   2372c:	4b0a      	ldr	r3, [pc, #40]	; (23758 <spi_cmd_complete+0x39c>)
   2372e:	0018      	movs	r0, r3
   23730:	4b07      	ldr	r3, [pc, #28]	; (23750 <spi_cmd_complete+0x394>)
   23732:	4798      	blx	r3
		result = N_FAIL;
   23734:	2300      	movs	r3, #0
   23736:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2373a:	e2a1      	b.n	23c80 <spi_cmd_complete+0x8c4>
   2373c:	0003878c 	.word	0x0003878c
   23740:	2000410c 	.word	0x2000410c
   23744:	00022df1 	.word	0x00022df1
   23748:	000387ec 	.word	0x000387ec
   2374c:	000381d8 	.word	0x000381d8
   23750:	0001d8a9 	.word	0x0001d8a9
   23754:	000382a0 	.word	0x000382a0
   23758:	00038218 	.word	0x00038218
   2375c:	00022d7d 	.word	0x00022d7d
   23760:	000381ec 	.word	0x000381ec
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23764:	230f      	movs	r3, #15
   23766:	18fb      	adds	r3, r7, r3
   23768:	781b      	ldrb	r3, [r3, #0]
   2376a:	2bcf      	cmp	r3, #207	; 0xcf
   2376c:	d009      	beq.n	23782 <spi_cmd_complete+0x3c6>
   2376e:	230f      	movs	r3, #15
   23770:	18fb      	adds	r3, r7, r3
   23772:	781b      	ldrb	r3, [r3, #0]
   23774:	2bc5      	cmp	r3, #197	; 0xc5
   23776:	d004      	beq.n	23782 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   23778:	230f      	movs	r3, #15
   2377a:	18fb      	adds	r3, r7, r3
   2377c:	781b      	ldrb	r3, [r3, #0]
   2377e:	2bc6      	cmp	r3, #198	; 0xc6
   23780:	d106      	bne.n	23790 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   23782:	2376      	movs	r3, #118	; 0x76
   23784:	18fb      	adds	r3, r7, r3
   23786:	781a      	ldrb	r2, [r3, #0]
   23788:	2376      	movs	r3, #118	; 0x76
   2378a:	18fb      	adds	r3, r7, r3
   2378c:	3201      	adds	r2, #1
   2378e:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   23790:	2376      	movs	r3, #118	; 0x76
   23792:	18fb      	adds	r3, r7, r3
   23794:	781b      	ldrb	r3, [r3, #0]
   23796:	2276      	movs	r2, #118	; 0x76
   23798:	18ba      	adds	r2, r7, r2
   2379a:	1c59      	adds	r1, r3, #1
   2379c:	7011      	strb	r1, [r2, #0]
   2379e:	001a      	movs	r2, r3
   237a0:	2318      	movs	r3, #24
   237a2:	18fb      	adds	r3, r7, r3
   237a4:	5c9a      	ldrb	r2, [r3, r2]
   237a6:	2317      	movs	r3, #23
   237a8:	18fb      	adds	r3, r7, r3
   237aa:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   237ac:	2317      	movs	r3, #23
   237ae:	18fb      	adds	r3, r7, r3
   237b0:	781b      	ldrb	r3, [r3, #0]
   237b2:	220f      	movs	r2, #15
   237b4:	18ba      	adds	r2, r7, r2
   237b6:	7812      	ldrb	r2, [r2, #0]
   237b8:	429a      	cmp	r2, r3
   237ba:	d018      	beq.n	237ee <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   237bc:	4add      	ldr	r2, [pc, #884]	; (23b34 <spi_cmd_complete+0x778>)
   237be:	49de      	ldr	r1, [pc, #888]	; (23b38 <spi_cmd_complete+0x77c>)
   237c0:	4bde      	ldr	r3, [pc, #888]	; (23b3c <spi_cmd_complete+0x780>)
   237c2:	0018      	movs	r0, r3
   237c4:	4bde      	ldr	r3, [pc, #888]	; (23b40 <spi_cmd_complete+0x784>)
   237c6:	4798      	blx	r3
   237c8:	230f      	movs	r3, #15
   237ca:	18fb      	adds	r3, r7, r3
   237cc:	7819      	ldrb	r1, [r3, #0]
   237ce:	2317      	movs	r3, #23
   237d0:	18fb      	adds	r3, r7, r3
   237d2:	781b      	ldrb	r3, [r3, #0]
   237d4:	001a      	movs	r2, r3
   237d6:	4bdb      	ldr	r3, [pc, #876]	; (23b44 <spi_cmd_complete+0x788>)
   237d8:	0018      	movs	r0, r3
   237da:	4bd9      	ldr	r3, [pc, #868]	; (23b40 <spi_cmd_complete+0x784>)
   237dc:	4798      	blx	r3
   237de:	4bda      	ldr	r3, [pc, #872]	; (23b48 <spi_cmd_complete+0x78c>)
   237e0:	0018      	movs	r0, r3
   237e2:	4bd7      	ldr	r3, [pc, #860]	; (23b40 <spi_cmd_complete+0x784>)
   237e4:	4798      	blx	r3
		result = N_FAIL;
   237e6:	2300      	movs	r3, #0
   237e8:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   237ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   237ec:	e248      	b.n	23c80 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   237ee:	2376      	movs	r3, #118	; 0x76
   237f0:	18fb      	adds	r3, r7, r3
   237f2:	781b      	ldrb	r3, [r3, #0]
   237f4:	2276      	movs	r2, #118	; 0x76
   237f6:	18ba      	adds	r2, r7, r2
   237f8:	1c59      	adds	r1, r3, #1
   237fa:	7011      	strb	r1, [r2, #0]
   237fc:	001a      	movs	r2, r3
   237fe:	2318      	movs	r3, #24
   23800:	18fb      	adds	r3, r7, r3
   23802:	5c9a      	ldrb	r2, [r3, r2]
   23804:	2317      	movs	r3, #23
   23806:	18fb      	adds	r3, r7, r3
   23808:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2380a:	2317      	movs	r3, #23
   2380c:	18fb      	adds	r3, r7, r3
   2380e:	781b      	ldrb	r3, [r3, #0]
   23810:	2b00      	cmp	r3, #0
   23812:	d016      	beq.n	23842 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23814:	4acd      	ldr	r2, [pc, #820]	; (23b4c <spi_cmd_complete+0x790>)
   23816:	49c8      	ldr	r1, [pc, #800]	; (23b38 <spi_cmd_complete+0x77c>)
   23818:	4bc8      	ldr	r3, [pc, #800]	; (23b3c <spi_cmd_complete+0x780>)
   2381a:	0018      	movs	r0, r3
   2381c:	4bc8      	ldr	r3, [pc, #800]	; (23b40 <spi_cmd_complete+0x784>)
   2381e:	4798      	blx	r3
   23820:	2317      	movs	r3, #23
   23822:	18fb      	adds	r3, r7, r3
   23824:	781b      	ldrb	r3, [r3, #0]
   23826:	001a      	movs	r2, r3
   23828:	4bc9      	ldr	r3, [pc, #804]	; (23b50 <spi_cmd_complete+0x794>)
   2382a:	0011      	movs	r1, r2
   2382c:	0018      	movs	r0, r3
   2382e:	4bc4      	ldr	r3, [pc, #784]	; (23b40 <spi_cmd_complete+0x784>)
   23830:	4798      	blx	r3
   23832:	4bc5      	ldr	r3, [pc, #788]	; (23b48 <spi_cmd_complete+0x78c>)
   23834:	0018      	movs	r0, r3
   23836:	4bc2      	ldr	r3, [pc, #776]	; (23b40 <spi_cmd_complete+0x784>)
   23838:	4798      	blx	r3
		result = N_FAIL;
   2383a:	2300      	movs	r3, #0
   2383c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2383e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23840:	e21e      	b.n	23c80 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23842:	230f      	movs	r3, #15
   23844:	18fb      	adds	r3, r7, r3
   23846:	781b      	ldrb	r3, [r3, #0]
   23848:	2bc4      	cmp	r3, #196	; 0xc4
   2384a:	d00f      	beq.n	2386c <spi_cmd_complete+0x4b0>
   2384c:	230f      	movs	r3, #15
   2384e:	18fb      	adds	r3, r7, r3
   23850:	781b      	ldrb	r3, [r3, #0]
   23852:	2bca      	cmp	r3, #202	; 0xca
   23854:	d00a      	beq.n	2386c <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23856:	230f      	movs	r3, #15
   23858:	18fb      	adds	r3, r7, r3
   2385a:	781b      	ldrb	r3, [r3, #0]
   2385c:	2bc2      	cmp	r3, #194	; 0xc2
   2385e:	d005      	beq.n	2386c <spi_cmd_complete+0x4b0>
   23860:	230f      	movs	r3, #15
   23862:	18fb      	adds	r3, r7, r3
   23864:	781b      	ldrb	r3, [r3, #0]
   23866:	2bc8      	cmp	r3, #200	; 0xc8
   23868:	d000      	beq.n	2386c <spi_cmd_complete+0x4b0>
   2386a:	e208      	b.n	23c7e <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   2386c:	230a      	movs	r3, #10
   2386e:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   23870:	2376      	movs	r3, #118	; 0x76
   23872:	18fb      	adds	r3, r7, r3
   23874:	781a      	ldrb	r2, [r3, #0]
   23876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23878:	429a      	cmp	r2, r3
   2387a:	d218      	bcs.n	238ae <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   2387c:	2376      	movs	r3, #118	; 0x76
   2387e:	18fb      	adds	r3, r7, r3
   23880:	781b      	ldrb	r3, [r3, #0]
   23882:	2276      	movs	r2, #118	; 0x76
   23884:	18ba      	adds	r2, r7, r2
   23886:	1c59      	adds	r1, r3, #1
   23888:	7011      	strb	r1, [r2, #0]
   2388a:	001a      	movs	r2, r3
   2388c:	2318      	movs	r3, #24
   2388e:	18fb      	adds	r3, r7, r3
   23890:	5c9a      	ldrb	r2, [r3, r2]
   23892:	2317      	movs	r3, #23
   23894:	18fb      	adds	r3, r7, r3
   23896:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23898:	2317      	movs	r3, #23
   2389a:	18fb      	adds	r3, r7, r3
   2389c:	781b      	ldrb	r3, [r3, #0]
   2389e:	091b      	lsrs	r3, r3, #4
   238a0:	b2db      	uxtb	r3, r3
   238a2:	001a      	movs	r2, r3
   238a4:	230f      	movs	r3, #15
   238a6:	4013      	ands	r3, r2
   238a8:	2b0f      	cmp	r3, #15
   238aa:	d103      	bne.n	238b4 <spi_cmd_complete+0x4f8>
					break;
   238ac:	e007      	b.n	238be <spi_cmd_complete+0x502>
					retry = 0;
   238ae:	2300      	movs	r3, #0
   238b0:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   238b2:	e004      	b.n	238be <spi_cmd_complete+0x502>
			} while (retry--);
   238b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   238b6:	1e5a      	subs	r2, r3, #1
   238b8:	667a      	str	r2, [r7, #100]	; 0x64
   238ba:	2b00      	cmp	r3, #0
   238bc:	d1d8      	bne.n	23870 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   238be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   238c0:	2b00      	cmp	r3, #0
   238c2:	dc18      	bgt.n	238f6 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   238c4:	2395      	movs	r3, #149	; 0x95
   238c6:	009a      	lsls	r2, r3, #2
   238c8:	499b      	ldr	r1, [pc, #620]	; (23b38 <spi_cmd_complete+0x77c>)
   238ca:	4b9c      	ldr	r3, [pc, #624]	; (23b3c <spi_cmd_complete+0x780>)
   238cc:	0018      	movs	r0, r3
   238ce:	4b9c      	ldr	r3, [pc, #624]	; (23b40 <spi_cmd_complete+0x784>)
   238d0:	4798      	blx	r3
   238d2:	2317      	movs	r3, #23
   238d4:	18fb      	adds	r3, r7, r3
   238d6:	781b      	ldrb	r3, [r3, #0]
   238d8:	001a      	movs	r2, r3
   238da:	4b9e      	ldr	r3, [pc, #632]	; (23b54 <spi_cmd_complete+0x798>)
   238dc:	0011      	movs	r1, r2
   238de:	0018      	movs	r0, r3
   238e0:	4b97      	ldr	r3, [pc, #604]	; (23b40 <spi_cmd_complete+0x784>)
   238e2:	4798      	blx	r3
   238e4:	4b98      	ldr	r3, [pc, #608]	; (23b48 <spi_cmd_complete+0x78c>)
   238e6:	0018      	movs	r0, r3
   238e8:	4b95      	ldr	r3, [pc, #596]	; (23b40 <spi_cmd_complete+0x784>)
   238ea:	4798      	blx	r3
				result = N_RESET;
   238ec:	2301      	movs	r3, #1
   238ee:	425b      	negs	r3, r3
   238f0:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   238f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   238f4:	e1c4      	b.n	23c80 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   238f6:	230f      	movs	r3, #15
   238f8:	18fb      	adds	r3, r7, r3
   238fa:	781b      	ldrb	r3, [r3, #0]
   238fc:	2bc4      	cmp	r3, #196	; 0xc4
   238fe:	d005      	beq.n	2390c <spi_cmd_complete+0x550>
   23900:	230f      	movs	r3, #15
   23902:	18fb      	adds	r3, r7, r3
   23904:	781b      	ldrb	r3, [r3, #0]
   23906:	2bca      	cmp	r3, #202	; 0xca
   23908:	d000      	beq.n	2390c <spi_cmd_complete+0x550>
   2390a:	e08e      	b.n	23a2a <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   2390c:	2376      	movs	r3, #118	; 0x76
   2390e:	18fb      	adds	r3, r7, r3
   23910:	781b      	ldrb	r3, [r3, #0]
   23912:	3303      	adds	r3, #3
   23914:	001a      	movs	r2, r3
   23916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23918:	429a      	cmp	r2, r3
   2391a:	d23c      	bcs.n	23996 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   2391c:	2376      	movs	r3, #118	; 0x76
   2391e:	18fb      	adds	r3, r7, r3
   23920:	781b      	ldrb	r3, [r3, #0]
   23922:	2276      	movs	r2, #118	; 0x76
   23924:	18ba      	adds	r2, r7, r2
   23926:	1c59      	adds	r1, r3, #1
   23928:	7011      	strb	r1, [r2, #0]
   2392a:	001a      	movs	r2, r3
   2392c:	2318      	movs	r3, #24
   2392e:	18fb      	adds	r3, r7, r3
   23930:	5c9a      	ldrb	r2, [r3, r2]
   23932:	687b      	ldr	r3, [r7, #4]
   23934:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23936:	687b      	ldr	r3, [r7, #4]
   23938:	1c5a      	adds	r2, r3, #1
   2393a:	2376      	movs	r3, #118	; 0x76
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	781b      	ldrb	r3, [r3, #0]
   23940:	2176      	movs	r1, #118	; 0x76
   23942:	1879      	adds	r1, r7, r1
   23944:	1c58      	adds	r0, r3, #1
   23946:	7008      	strb	r0, [r1, #0]
   23948:	0019      	movs	r1, r3
   2394a:	2318      	movs	r3, #24
   2394c:	18fb      	adds	r3, r7, r3
   2394e:	5c5b      	ldrb	r3, [r3, r1]
   23950:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23952:	687b      	ldr	r3, [r7, #4]
   23954:	1c9a      	adds	r2, r3, #2
   23956:	2376      	movs	r3, #118	; 0x76
   23958:	18fb      	adds	r3, r7, r3
   2395a:	781b      	ldrb	r3, [r3, #0]
   2395c:	2176      	movs	r1, #118	; 0x76
   2395e:	1879      	adds	r1, r7, r1
   23960:	1c58      	adds	r0, r3, #1
   23962:	7008      	strb	r0, [r1, #0]
   23964:	0019      	movs	r1, r3
   23966:	2318      	movs	r3, #24
   23968:	18fb      	adds	r3, r7, r3
   2396a:	5c5b      	ldrb	r3, [r3, r1]
   2396c:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   2396e:	687b      	ldr	r3, [r7, #4]
   23970:	1cda      	adds	r2, r3, #3
   23972:	2376      	movs	r3, #118	; 0x76
   23974:	18fb      	adds	r3, r7, r3
   23976:	781b      	ldrb	r3, [r3, #0]
   23978:	2176      	movs	r1, #118	; 0x76
   2397a:	1879      	adds	r1, r7, r1
   2397c:	1c58      	adds	r0, r3, #1
   2397e:	7008      	strb	r0, [r1, #0]
   23980:	0019      	movs	r1, r3
   23982:	2318      	movs	r3, #24
   23984:	18fb      	adds	r3, r7, r3
   23986:	5c5b      	ldrb	r3, [r3, r1]
   23988:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2398a:	4b73      	ldr	r3, [pc, #460]	; (23b58 <spi_cmd_complete+0x79c>)
   2398c:	781b      	ldrb	r3, [r3, #0]
   2398e:	2b00      	cmp	r3, #0
   23990:	d000      	beq.n	23994 <spi_cmd_complete+0x5d8>
   23992:	e174      	b.n	23c7e <spi_cmd_complete+0x8c2>
   23994:	e011      	b.n	239ba <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   23996:	4a71      	ldr	r2, [pc, #452]	; (23b5c <spi_cmd_complete+0x7a0>)
   23998:	4967      	ldr	r1, [pc, #412]	; (23b38 <spi_cmd_complete+0x77c>)
   2399a:	4b68      	ldr	r3, [pc, #416]	; (23b3c <spi_cmd_complete+0x780>)
   2399c:	0018      	movs	r0, r3
   2399e:	4b68      	ldr	r3, [pc, #416]	; (23b40 <spi_cmd_complete+0x784>)
   239a0:	4798      	blx	r3
   239a2:	4b6f      	ldr	r3, [pc, #444]	; (23b60 <spi_cmd_complete+0x7a4>)
   239a4:	0018      	movs	r0, r3
   239a6:	4b66      	ldr	r3, [pc, #408]	; (23b40 <spi_cmd_complete+0x784>)
   239a8:	4798      	blx	r3
   239aa:	4b67      	ldr	r3, [pc, #412]	; (23b48 <spi_cmd_complete+0x78c>)
   239ac:	0018      	movs	r0, r3
   239ae:	4b64      	ldr	r3, [pc, #400]	; (23b40 <spi_cmd_complete+0x784>)
   239b0:	4798      	blx	r3
					result = N_FAIL;
   239b2:	2300      	movs	r3, #0
   239b4:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   239b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   239b8:	e162      	b.n	23c80 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   239ba:	2376      	movs	r3, #118	; 0x76
   239bc:	18fb      	adds	r3, r7, r3
   239be:	781b      	ldrb	r3, [r3, #0]
   239c0:	3301      	adds	r3, #1
   239c2:	001a      	movs	r2, r3
   239c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   239c6:	429a      	cmp	r2, r3
   239c8:	d21c      	bcs.n	23a04 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   239ca:	2376      	movs	r3, #118	; 0x76
   239cc:	18fb      	adds	r3, r7, r3
   239ce:	781b      	ldrb	r3, [r3, #0]
   239d0:	2276      	movs	r2, #118	; 0x76
   239d2:	18ba      	adds	r2, r7, r2
   239d4:	1c59      	adds	r1, r3, #1
   239d6:	7011      	strb	r1, [r2, #0]
   239d8:	001a      	movs	r2, r3
   239da:	2318      	movs	r3, #24
   239dc:	18fb      	adds	r3, r7, r3
   239de:	5c9a      	ldrb	r2, [r3, r2]
   239e0:	2314      	movs	r3, #20
   239e2:	18fb      	adds	r3, r7, r3
   239e4:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   239e6:	2376      	movs	r3, #118	; 0x76
   239e8:	18fb      	adds	r3, r7, r3
   239ea:	781b      	ldrb	r3, [r3, #0]
   239ec:	2276      	movs	r2, #118	; 0x76
   239ee:	18ba      	adds	r2, r7, r2
   239f0:	1c59      	adds	r1, r3, #1
   239f2:	7011      	strb	r1, [r2, #0]
   239f4:	001a      	movs	r2, r3
   239f6:	2318      	movs	r3, #24
   239f8:	18fb      	adds	r3, r7, r3
   239fa:	5c9a      	ldrb	r2, [r3, r2]
   239fc:	2314      	movs	r3, #20
   239fe:	18fb      	adds	r3, r7, r3
   23a00:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23a02:	e13c      	b.n	23c7e <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23a04:	239c      	movs	r3, #156	; 0x9c
   23a06:	009a      	lsls	r2, r3, #2
   23a08:	494b      	ldr	r1, [pc, #300]	; (23b38 <spi_cmd_complete+0x77c>)
   23a0a:	4b4c      	ldr	r3, [pc, #304]	; (23b3c <spi_cmd_complete+0x780>)
   23a0c:	0018      	movs	r0, r3
   23a0e:	4b4c      	ldr	r3, [pc, #304]	; (23b40 <spi_cmd_complete+0x784>)
   23a10:	4798      	blx	r3
   23a12:	4b54      	ldr	r3, [pc, #336]	; (23b64 <spi_cmd_complete+0x7a8>)
   23a14:	0018      	movs	r0, r3
   23a16:	4b4a      	ldr	r3, [pc, #296]	; (23b40 <spi_cmd_complete+0x784>)
   23a18:	4798      	blx	r3
   23a1a:	4b4b      	ldr	r3, [pc, #300]	; (23b48 <spi_cmd_complete+0x78c>)
   23a1c:	0018      	movs	r0, r3
   23a1e:	4b48      	ldr	r3, [pc, #288]	; (23b40 <spi_cmd_complete+0x784>)
   23a20:	4798      	blx	r3
						result = N_FAIL;
   23a22:	2300      	movs	r3, #0
   23a24:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23a28:	e12a      	b.n	23c80 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23a2a:	230f      	movs	r3, #15
   23a2c:	18fb      	adds	r3, r7, r3
   23a2e:	781b      	ldrb	r3, [r3, #0]
   23a30:	2bc2      	cmp	r3, #194	; 0xc2
   23a32:	d005      	beq.n	23a40 <spi_cmd_complete+0x684>
   23a34:	230f      	movs	r3, #15
   23a36:	18fb      	adds	r3, r7, r3
   23a38:	781b      	ldrb	r3, [r3, #0]
   23a3a:	2bc8      	cmp	r3, #200	; 0xc8
   23a3c:	d000      	beq.n	23a40 <spi_cmd_complete+0x684>
   23a3e:	e11e      	b.n	23c7e <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23a40:	2300      	movs	r3, #0
   23a42:	663b      	str	r3, [r7, #96]	; 0x60
   23a44:	e011      	b.n	23a6a <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23a48:	1c5a      	adds	r2, r3, #1
   23a4a:	663a      	str	r2, [r7, #96]	; 0x60
   23a4c:	001a      	movs	r2, r3
   23a4e:	687b      	ldr	r3, [r7, #4]
   23a50:	189a      	adds	r2, r3, r2
   23a52:	2376      	movs	r3, #118	; 0x76
   23a54:	18fb      	adds	r3, r7, r3
   23a56:	781b      	ldrb	r3, [r3, #0]
   23a58:	2176      	movs	r1, #118	; 0x76
   23a5a:	1879      	adds	r1, r7, r1
   23a5c:	1c58      	adds	r0, r3, #1
   23a5e:	7008      	strb	r0, [r1, #0]
   23a60:	0019      	movs	r1, r3
   23a62:	2318      	movs	r3, #24
   23a64:	18fb      	adds	r3, r7, r3
   23a66:	5c5b      	ldrb	r3, [r3, r1]
   23a68:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23a6a:	2376      	movs	r3, #118	; 0x76
   23a6c:	18fb      	adds	r3, r7, r3
   23a6e:	781a      	ldrb	r2, [r3, #0]
   23a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23a72:	429a      	cmp	r2, r3
   23a74:	d203      	bcs.n	23a7e <spi_cmd_complete+0x6c2>
   23a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23a78:	683b      	ldr	r3, [r7, #0]
   23a7a:	429a      	cmp	r2, r3
   23a7c:	d3e3      	bcc.n	23a46 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23a80:	683a      	ldr	r2, [r7, #0]
   23a82:	1ad3      	subs	r3, r2, r3
   23a84:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23a86:	683b      	ldr	r3, [r7, #0]
   23a88:	2b00      	cmp	r3, #0
   23a8a:	d100      	bne.n	23a8e <spi_cmd_complete+0x6d2>
   23a8c:	e0f1      	b.n	23c72 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23a90:	2280      	movs	r2, #128	; 0x80
   23a92:	0192      	lsls	r2, r2, #6
   23a94:	1ad3      	subs	r3, r2, r3
   23a96:	001a      	movs	r2, r3
   23a98:	683b      	ldr	r3, [r7, #0]
   23a9a:	429a      	cmp	r2, r3
   23a9c:	d302      	bcc.n	23aa4 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23a9e:	683b      	ldr	r3, [r7, #0]
   23aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   23aa2:	e004      	b.n	23aae <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23aa6:	2280      	movs	r2, #128	; 0x80
   23aa8:	0192      	lsls	r2, r2, #6
   23aaa:	1ad3      	subs	r3, r2, r3
   23aac:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ab0:	687a      	ldr	r2, [r7, #4]
   23ab2:	18d3      	adds	r3, r2, r3
   23ab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23ab6:	b292      	uxth	r2, r2
   23ab8:	0011      	movs	r1, r2
   23aba:	0018      	movs	r0, r3
   23abc:	4b2a      	ldr	r3, [pc, #168]	; (23b68 <spi_cmd_complete+0x7ac>)
   23abe:	4798      	blx	r3
   23ac0:	1e03      	subs	r3, r0, #0
   23ac2:	d010      	beq.n	23ae6 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23ac4:	4a29      	ldr	r2, [pc, #164]	; (23b6c <spi_cmd_complete+0x7b0>)
   23ac6:	491c      	ldr	r1, [pc, #112]	; (23b38 <spi_cmd_complete+0x77c>)
   23ac8:	4b1c      	ldr	r3, [pc, #112]	; (23b3c <spi_cmd_complete+0x780>)
   23aca:	0018      	movs	r0, r3
   23acc:	4b1c      	ldr	r3, [pc, #112]	; (23b40 <spi_cmd_complete+0x784>)
   23ace:	4798      	blx	r3
   23ad0:	4b27      	ldr	r3, [pc, #156]	; (23b70 <spi_cmd_complete+0x7b4>)
   23ad2:	0018      	movs	r0, r3
   23ad4:	4b1a      	ldr	r3, [pc, #104]	; (23b40 <spi_cmd_complete+0x784>)
   23ad6:	4798      	blx	r3
   23ad8:	4b1b      	ldr	r3, [pc, #108]	; (23b48 <spi_cmd_complete+0x78c>)
   23ada:	0018      	movs	r0, r3
   23adc:	4b18      	ldr	r3, [pc, #96]	; (23b40 <spi_cmd_complete+0x784>)
   23ade:	4798      	blx	r3
						result = N_FAIL;
   23ae0:	2300      	movs	r3, #0
   23ae2:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23ae4:	e0cb      	b.n	23c7e <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23ae6:	4b1c      	ldr	r3, [pc, #112]	; (23b58 <spi_cmd_complete+0x79c>)
   23ae8:	781b      	ldrb	r3, [r3, #0]
   23aea:	2b00      	cmp	r3, #0
   23aec:	d119      	bne.n	23b22 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23aee:	2314      	movs	r3, #20
   23af0:	18fb      	adds	r3, r7, r3
   23af2:	2102      	movs	r1, #2
   23af4:	0018      	movs	r0, r3
   23af6:	4b1c      	ldr	r3, [pc, #112]	; (23b68 <spi_cmd_complete+0x7ac>)
   23af8:	4798      	blx	r3
   23afa:	1e03      	subs	r3, r0, #0
   23afc:	d011      	beq.n	23b22 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23afe:	23a6      	movs	r3, #166	; 0xa6
   23b00:	009a      	lsls	r2, r3, #2
   23b02:	490d      	ldr	r1, [pc, #52]	; (23b38 <spi_cmd_complete+0x77c>)
   23b04:	4b0d      	ldr	r3, [pc, #52]	; (23b3c <spi_cmd_complete+0x780>)
   23b06:	0018      	movs	r0, r3
   23b08:	4b0d      	ldr	r3, [pc, #52]	; (23b40 <spi_cmd_complete+0x784>)
   23b0a:	4798      	blx	r3
   23b0c:	4b19      	ldr	r3, [pc, #100]	; (23b74 <spi_cmd_complete+0x7b8>)
   23b0e:	0018      	movs	r0, r3
   23b10:	4b0b      	ldr	r3, [pc, #44]	; (23b40 <spi_cmd_complete+0x784>)
   23b12:	4798      	blx	r3
   23b14:	4b0c      	ldr	r3, [pc, #48]	; (23b48 <spi_cmd_complete+0x78c>)
   23b16:	0018      	movs	r0, r3
   23b18:	4b09      	ldr	r3, [pc, #36]	; (23b40 <spi_cmd_complete+0x784>)
   23b1a:	4798      	blx	r3
							result = N_FAIL;
   23b1c:	2300      	movs	r3, #0
   23b1e:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23b20:	e0ad      	b.n	23c7e <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23b22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b26:	18d3      	adds	r3, r2, r3
   23b28:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b2c:	683a      	ldr	r2, [r7, #0]
   23b2e:	1ad3      	subs	r3, r2, r3
   23b30:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23b32:	e09e      	b.n	23c72 <spi_cmd_complete+0x8b6>
   23b34:	0000022f 	.word	0x0000022f
   23b38:	000387ec 	.word	0x000387ec
   23b3c:	000381d8 	.word	0x000381d8
   23b40:	0001d8a9 	.word	0x0001d8a9
   23b44:	000382d0 	.word	0x000382d0
   23b48:	00038218 	.word	0x00038218
   23b4c:	00000239 	.word	0x00000239
   23b50:	0003830c 	.word	0x0003830c
   23b54:	00038340 	.word	0x00038340
   23b58:	2000410c 	.word	0x2000410c
   23b5c:	00000263 	.word	0x00000263
   23b60:	00038370 	.word	0x00038370
   23b64:	000383a0 	.word	0x000383a0
   23b68:	00022cf5 	.word	0x00022cf5
   23b6c:	0000028e 	.word	0x0000028e
   23b70:	000383d0 	.word	0x000383d0
   23b74:	00038404 	.word	0x00038404
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   23b78:	683a      	ldr	r2, [r7, #0]
   23b7a:	2380      	movs	r3, #128	; 0x80
   23b7c:	019b      	lsls	r3, r3, #6
   23b7e:	429a      	cmp	r2, r3
   23b80:	d802      	bhi.n	23b88 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23b82:	683b      	ldr	r3, [r7, #0]
   23b84:	65bb      	str	r3, [r7, #88]	; 0x58
   23b86:	e002      	b.n	23b8e <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   23b88:	2380      	movs	r3, #128	; 0x80
   23b8a:	019b      	lsls	r3, r3, #6
   23b8c:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23b8e:	230a      	movs	r3, #10
   23b90:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23b92:	2317      	movs	r3, #23
   23b94:	18fb      	adds	r3, r7, r3
   23b96:	2101      	movs	r1, #1
   23b98:	0018      	movs	r0, r3
   23b9a:	4b3b      	ldr	r3, [pc, #236]	; (23c88 <spi_cmd_complete+0x8cc>)
   23b9c:	4798      	blx	r3
   23b9e:	1e03      	subs	r3, r0, #0
   23ba0:	d011      	beq.n	23bc6 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   23ba2:	23ae      	movs	r3, #174	; 0xae
   23ba4:	009a      	lsls	r2, r3, #2
   23ba6:	4939      	ldr	r1, [pc, #228]	; (23c8c <spi_cmd_complete+0x8d0>)
   23ba8:	4b39      	ldr	r3, [pc, #228]	; (23c90 <spi_cmd_complete+0x8d4>)
   23baa:	0018      	movs	r0, r3
   23bac:	4b39      	ldr	r3, [pc, #228]	; (23c94 <spi_cmd_complete+0x8d8>)
   23bae:	4798      	blx	r3
   23bb0:	4b39      	ldr	r3, [pc, #228]	; (23c98 <spi_cmd_complete+0x8dc>)
   23bb2:	0018      	movs	r0, r3
   23bb4:	4b37      	ldr	r3, [pc, #220]	; (23c94 <spi_cmd_complete+0x8d8>)
   23bb6:	4798      	blx	r3
   23bb8:	4b38      	ldr	r3, [pc, #224]	; (23c9c <spi_cmd_complete+0x8e0>)
   23bba:	0018      	movs	r0, r3
   23bbc:	4b35      	ldr	r3, [pc, #212]	; (23c94 <spi_cmd_complete+0x8d8>)
   23bbe:	4798      	blx	r3
							result = N_FAIL;
   23bc0:	2300      	movs	r3, #0
   23bc2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23bc4:	e010      	b.n	23be8 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   23bc6:	2317      	movs	r3, #23
   23bc8:	18fb      	adds	r3, r7, r3
   23bca:	781b      	ldrb	r3, [r3, #0]
   23bcc:	091b      	lsrs	r3, r3, #4
   23bce:	b2db      	uxtb	r3, r3
   23bd0:	001a      	movs	r2, r3
   23bd2:	230f      	movs	r3, #15
   23bd4:	4013      	ands	r3, r2
   23bd6:	2b0f      	cmp	r3, #15
   23bd8:	d005      	beq.n	23be6 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   23bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23bdc:	1e5a      	subs	r2, r3, #1
   23bde:	667a      	str	r2, [r7, #100]	; 0x64
   23be0:	2b00      	cmp	r3, #0
   23be2:	d1d6      	bne.n	23b92 <spi_cmd_complete+0x7d6>
   23be4:	e000      	b.n	23be8 <spi_cmd_complete+0x82c>
							break;
   23be6:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   23be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23bea:	2b00      	cmp	r3, #0
   23bec:	d046      	beq.n	23c7c <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23bf0:	687a      	ldr	r2, [r7, #4]
   23bf2:	18d3      	adds	r3, r2, r3
   23bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23bf6:	b292      	uxth	r2, r2
   23bf8:	0011      	movs	r1, r2
   23bfa:	0018      	movs	r0, r3
   23bfc:	4b22      	ldr	r3, [pc, #136]	; (23c88 <spi_cmd_complete+0x8cc>)
   23bfe:	4798      	blx	r3
   23c00:	1e03      	subs	r3, r0, #0
   23c02:	d011      	beq.n	23c28 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23c04:	23b2      	movs	r3, #178	; 0xb2
   23c06:	009a      	lsls	r2, r3, #2
   23c08:	4920      	ldr	r1, [pc, #128]	; (23c8c <spi_cmd_complete+0x8d0>)
   23c0a:	4b21      	ldr	r3, [pc, #132]	; (23c90 <spi_cmd_complete+0x8d4>)
   23c0c:	0018      	movs	r0, r3
   23c0e:	4b21      	ldr	r3, [pc, #132]	; (23c94 <spi_cmd_complete+0x8d8>)
   23c10:	4798      	blx	r3
   23c12:	4b23      	ldr	r3, [pc, #140]	; (23ca0 <spi_cmd_complete+0x8e4>)
   23c14:	0018      	movs	r0, r3
   23c16:	4b1f      	ldr	r3, [pc, #124]	; (23c94 <spi_cmd_complete+0x8d8>)
   23c18:	4798      	blx	r3
   23c1a:	4b20      	ldr	r3, [pc, #128]	; (23c9c <spi_cmd_complete+0x8e0>)
   23c1c:	0018      	movs	r0, r3
   23c1e:	4b1d      	ldr	r3, [pc, #116]	; (23c94 <spi_cmd_complete+0x8d8>)
   23c20:	4798      	blx	r3
						result = N_FAIL;
   23c22:	2300      	movs	r3, #0
   23c24:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23c26:	e02a      	b.n	23c7e <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23c28:	4b1e      	ldr	r3, [pc, #120]	; (23ca4 <spi_cmd_complete+0x8e8>)
   23c2a:	781b      	ldrb	r3, [r3, #0]
   23c2c:	2b00      	cmp	r3, #0
   23c2e:	d118      	bne.n	23c62 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23c30:	2314      	movs	r3, #20
   23c32:	18fb      	adds	r3, r7, r3
   23c34:	2102      	movs	r1, #2
   23c36:	0018      	movs	r0, r3
   23c38:	4b13      	ldr	r3, [pc, #76]	; (23c88 <spi_cmd_complete+0x8cc>)
   23c3a:	4798      	blx	r3
   23c3c:	1e03      	subs	r3, r0, #0
   23c3e:	d010      	beq.n	23c62 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23c40:	4a19      	ldr	r2, [pc, #100]	; (23ca8 <spi_cmd_complete+0x8ec>)
   23c42:	4912      	ldr	r1, [pc, #72]	; (23c8c <spi_cmd_complete+0x8d0>)
   23c44:	4b12      	ldr	r3, [pc, #72]	; (23c90 <spi_cmd_complete+0x8d4>)
   23c46:	0018      	movs	r0, r3
   23c48:	4b12      	ldr	r3, [pc, #72]	; (23c94 <spi_cmd_complete+0x8d8>)
   23c4a:	4798      	blx	r3
   23c4c:	4b17      	ldr	r3, [pc, #92]	; (23cac <spi_cmd_complete+0x8f0>)
   23c4e:	0018      	movs	r0, r3
   23c50:	4b10      	ldr	r3, [pc, #64]	; (23c94 <spi_cmd_complete+0x8d8>)
   23c52:	4798      	blx	r3
   23c54:	4b11      	ldr	r3, [pc, #68]	; (23c9c <spi_cmd_complete+0x8e0>)
   23c56:	0018      	movs	r0, r3
   23c58:	4b0e      	ldr	r3, [pc, #56]	; (23c94 <spi_cmd_complete+0x8d8>)
   23c5a:	4798      	blx	r3
							result = N_FAIL;
   23c5c:	2300      	movs	r3, #0
   23c5e:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23c60:	e00d      	b.n	23c7e <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23c62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23c66:	18d3      	adds	r3, r2, r3
   23c68:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23c6c:	683a      	ldr	r2, [r7, #0]
   23c6e:	1ad3      	subs	r3, r2, r3
   23c70:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23c72:	683b      	ldr	r3, [r7, #0]
   23c74:	2b00      	cmp	r3, #0
   23c76:	d000      	beq.n	23c7a <spi_cmd_complete+0x8be>
   23c78:	e77e      	b.n	23b78 <spi_cmd_complete+0x7bc>
   23c7a:	e000      	b.n	23c7e <spi_cmd_complete+0x8c2>
						break;
   23c7c:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23c80:	0018      	movs	r0, r3
   23c82:	46bd      	mov	sp, r7
   23c84:	b01f      	add	sp, #124	; 0x7c
   23c86:	bd90      	pop	{r4, r7, pc}
   23c88:	00022cf5 	.word	0x00022cf5
   23c8c:	000387ec 	.word	0x000387ec
   23c90:	000381d8 	.word	0x000381d8
   23c94:	0001d8a9 	.word	0x0001d8a9
   23c98:	0003843c 	.word	0x0003843c
   23c9c:	00038218 	.word	0x00038218
   23ca0:	000383d0 	.word	0x000383d0
   23ca4:	2000410c 	.word	0x2000410c
   23ca8:	000002d2 	.word	0x000002d2
   23cac:	00038404 	.word	0x00038404

00023cb0 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   23cb0:	b580      	push	{r7, lr}
   23cb2:	b086      	sub	sp, #24
   23cb4:	af00      	add	r7, sp, #0
   23cb6:	6078      	str	r0, [r7, #4]
   23cb8:	000a      	movs	r2, r1
   23cba:	1cbb      	adds	r3, r7, #2
   23cbc:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   23cbe:	2313      	movs	r3, #19
   23cc0:	18fb      	adds	r3, r7, r3
   23cc2:	2201      	movs	r2, #1
   23cc4:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   23cc6:	230c      	movs	r3, #12
   23cc8:	18fb      	adds	r3, r7, r3
   23cca:	2200      	movs	r2, #0
   23ccc:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23cce:	2316      	movs	r3, #22
   23cd0:	18fb      	adds	r3, r7, r3
   23cd2:	2200      	movs	r2, #0
   23cd4:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   23cd6:	1cbb      	adds	r3, r7, #2
   23cd8:	881a      	ldrh	r2, [r3, #0]
   23cda:	2380      	movs	r3, #128	; 0x80
   23cdc:	019b      	lsls	r3, r3, #6
   23cde:	429a      	cmp	r2, r3
   23ce0:	d805      	bhi.n	23cee <spi_data_write+0x3e>
			nbytes = sz;
   23ce2:	2314      	movs	r3, #20
   23ce4:	18fb      	adds	r3, r7, r3
   23ce6:	1cba      	adds	r2, r7, #2
   23ce8:	8812      	ldrh	r2, [r2, #0]
   23cea:	801a      	strh	r2, [r3, #0]
   23cec:	e004      	b.n	23cf8 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   23cee:	2314      	movs	r3, #20
   23cf0:	18fb      	adds	r3, r7, r3
   23cf2:	2280      	movs	r2, #128	; 0x80
   23cf4:	0192      	lsls	r2, r2, #6
   23cf6:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   23cf8:	2311      	movs	r3, #17
   23cfa:	18fb      	adds	r3, r7, r3
   23cfc:	22f0      	movs	r2, #240	; 0xf0
   23cfe:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23d00:	2316      	movs	r3, #22
   23d02:	18fb      	adds	r3, r7, r3
   23d04:	2200      	movs	r2, #0
   23d06:	5e9b      	ldrsh	r3, [r3, r2]
   23d08:	2b00      	cmp	r3, #0
   23d0a:	d10f      	bne.n	23d2c <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   23d0c:	1cbb      	adds	r3, r7, #2
   23d0e:	881a      	ldrh	r2, [r3, #0]
   23d10:	2380      	movs	r3, #128	; 0x80
   23d12:	019b      	lsls	r3, r3, #6
   23d14:	429a      	cmp	r2, r3
   23d16:	d804      	bhi.n	23d22 <spi_data_write+0x72>
				order = 0x3;
   23d18:	2312      	movs	r3, #18
   23d1a:	18fb      	adds	r3, r7, r3
   23d1c:	2203      	movs	r2, #3
   23d1e:	701a      	strb	r2, [r3, #0]
   23d20:	e013      	b.n	23d4a <spi_data_write+0x9a>
			else
				order = 0x1;
   23d22:	2312      	movs	r3, #18
   23d24:	18fb      	adds	r3, r7, r3
   23d26:	2201      	movs	r2, #1
   23d28:	701a      	strb	r2, [r3, #0]
   23d2a:	e00e      	b.n	23d4a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23d2c:	1cbb      	adds	r3, r7, #2
   23d2e:	881a      	ldrh	r2, [r3, #0]
   23d30:	2380      	movs	r3, #128	; 0x80
   23d32:	019b      	lsls	r3, r3, #6
   23d34:	429a      	cmp	r2, r3
   23d36:	d804      	bhi.n	23d42 <spi_data_write+0x92>
				order = 0x3;
   23d38:	2312      	movs	r3, #18
   23d3a:	18fb      	adds	r3, r7, r3
   23d3c:	2203      	movs	r2, #3
   23d3e:	701a      	strb	r2, [r3, #0]
   23d40:	e003      	b.n	23d4a <spi_data_write+0x9a>
			else
				order = 0x2;
   23d42:	2312      	movs	r3, #18
   23d44:	18fb      	adds	r3, r7, r3
   23d46:	2202      	movs	r2, #2
   23d48:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   23d4a:	2311      	movs	r3, #17
   23d4c:	18fb      	adds	r3, r7, r3
   23d4e:	781a      	ldrb	r2, [r3, #0]
   23d50:	2312      	movs	r3, #18
   23d52:	18fb      	adds	r3, r7, r3
   23d54:	781b      	ldrb	r3, [r3, #0]
   23d56:	4313      	orrs	r3, r2
   23d58:	b2da      	uxtb	r2, r3
   23d5a:	2311      	movs	r3, #17
   23d5c:	18fb      	adds	r3, r7, r3
   23d5e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23d60:	2311      	movs	r3, #17
   23d62:	18fb      	adds	r3, r7, r3
   23d64:	2101      	movs	r1, #1
   23d66:	0018      	movs	r0, r3
   23d68:	4b3c      	ldr	r3, [pc, #240]	; (23e5c <spi_data_write+0x1ac>)
   23d6a:	4798      	blx	r3
   23d6c:	1e03      	subs	r3, r0, #0
   23d6e:	d012      	beq.n	23d96 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   23d70:	4a3b      	ldr	r2, [pc, #236]	; (23e60 <spi_data_write+0x1b0>)
   23d72:	493c      	ldr	r1, [pc, #240]	; (23e64 <spi_data_write+0x1b4>)
   23d74:	4b3c      	ldr	r3, [pc, #240]	; (23e68 <spi_data_write+0x1b8>)
   23d76:	0018      	movs	r0, r3
   23d78:	4b3c      	ldr	r3, [pc, #240]	; (23e6c <spi_data_write+0x1bc>)
   23d7a:	4798      	blx	r3
   23d7c:	4b3c      	ldr	r3, [pc, #240]	; (23e70 <spi_data_write+0x1c0>)
   23d7e:	0018      	movs	r0, r3
   23d80:	4b3a      	ldr	r3, [pc, #232]	; (23e6c <spi_data_write+0x1bc>)
   23d82:	4798      	blx	r3
   23d84:	4b3b      	ldr	r3, [pc, #236]	; (23e74 <spi_data_write+0x1c4>)
   23d86:	0018      	movs	r0, r3
   23d88:	4b38      	ldr	r3, [pc, #224]	; (23e6c <spi_data_write+0x1bc>)
   23d8a:	4798      	blx	r3
			result = N_FAIL;
   23d8c:	2313      	movs	r3, #19
   23d8e:	18fb      	adds	r3, r7, r3
   23d90:	2200      	movs	r2, #0
   23d92:	701a      	strb	r2, [r3, #0]
			break;
   23d94:	e059      	b.n	23e4a <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   23d96:	2316      	movs	r3, #22
   23d98:	18fb      	adds	r3, r7, r3
   23d9a:	2200      	movs	r2, #0
   23d9c:	5e9b      	ldrsh	r3, [r3, r2]
   23d9e:	687a      	ldr	r2, [r7, #4]
   23da0:	18d2      	adds	r2, r2, r3
   23da2:	2314      	movs	r3, #20
   23da4:	18fb      	adds	r3, r7, r3
   23da6:	881b      	ldrh	r3, [r3, #0]
   23da8:	0019      	movs	r1, r3
   23daa:	0010      	movs	r0, r2
   23dac:	4b2b      	ldr	r3, [pc, #172]	; (23e5c <spi_data_write+0x1ac>)
   23dae:	4798      	blx	r3
   23db0:	1e03      	subs	r3, r0, #0
   23db2:	d012      	beq.n	23dda <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   23db4:	4a30      	ldr	r2, [pc, #192]	; (23e78 <spi_data_write+0x1c8>)
   23db6:	492b      	ldr	r1, [pc, #172]	; (23e64 <spi_data_write+0x1b4>)
   23db8:	4b2b      	ldr	r3, [pc, #172]	; (23e68 <spi_data_write+0x1b8>)
   23dba:	0018      	movs	r0, r3
   23dbc:	4b2b      	ldr	r3, [pc, #172]	; (23e6c <spi_data_write+0x1bc>)
   23dbe:	4798      	blx	r3
   23dc0:	4b2e      	ldr	r3, [pc, #184]	; (23e7c <spi_data_write+0x1cc>)
   23dc2:	0018      	movs	r0, r3
   23dc4:	4b29      	ldr	r3, [pc, #164]	; (23e6c <spi_data_write+0x1bc>)
   23dc6:	4798      	blx	r3
   23dc8:	4b2a      	ldr	r3, [pc, #168]	; (23e74 <spi_data_write+0x1c4>)
   23dca:	0018      	movs	r0, r3
   23dcc:	4b27      	ldr	r3, [pc, #156]	; (23e6c <spi_data_write+0x1bc>)
   23dce:	4798      	blx	r3
			result = N_FAIL;
   23dd0:	2313      	movs	r3, #19
   23dd2:	18fb      	adds	r3, r7, r3
   23dd4:	2200      	movs	r2, #0
   23dd6:	701a      	strb	r2, [r3, #0]
			break;
   23dd8:	e037      	b.n	23e4a <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   23dda:	4b29      	ldr	r3, [pc, #164]	; (23e80 <spi_data_write+0x1d0>)
   23ddc:	781b      	ldrb	r3, [r3, #0]
   23dde:	2b00      	cmp	r3, #0
   23de0:	d11b      	bne.n	23e1a <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   23de2:	230c      	movs	r3, #12
   23de4:	18fb      	adds	r3, r7, r3
   23de6:	2102      	movs	r1, #2
   23de8:	0018      	movs	r0, r3
   23dea:	4b1c      	ldr	r3, [pc, #112]	; (23e5c <spi_data_write+0x1ac>)
   23dec:	4798      	blx	r3
   23dee:	1e03      	subs	r3, r0, #0
   23df0:	d013      	beq.n	23e1a <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   23df2:	23d7      	movs	r3, #215	; 0xd7
   23df4:	009a      	lsls	r2, r3, #2
   23df6:	491b      	ldr	r1, [pc, #108]	; (23e64 <spi_data_write+0x1b4>)
   23df8:	4b1b      	ldr	r3, [pc, #108]	; (23e68 <spi_data_write+0x1b8>)
   23dfa:	0018      	movs	r0, r3
   23dfc:	4b1b      	ldr	r3, [pc, #108]	; (23e6c <spi_data_write+0x1bc>)
   23dfe:	4798      	blx	r3
   23e00:	4b20      	ldr	r3, [pc, #128]	; (23e84 <spi_data_write+0x1d4>)
   23e02:	0018      	movs	r0, r3
   23e04:	4b19      	ldr	r3, [pc, #100]	; (23e6c <spi_data_write+0x1bc>)
   23e06:	4798      	blx	r3
   23e08:	4b1a      	ldr	r3, [pc, #104]	; (23e74 <spi_data_write+0x1c4>)
   23e0a:	0018      	movs	r0, r3
   23e0c:	4b17      	ldr	r3, [pc, #92]	; (23e6c <spi_data_write+0x1bc>)
   23e0e:	4798      	blx	r3
				result = N_FAIL;
   23e10:	2313      	movs	r3, #19
   23e12:	18fb      	adds	r3, r7, r3
   23e14:	2200      	movs	r2, #0
   23e16:	701a      	strb	r2, [r3, #0]
				break;
   23e18:	e017      	b.n	23e4a <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   23e1a:	2316      	movs	r3, #22
   23e1c:	18fb      	adds	r3, r7, r3
   23e1e:	881a      	ldrh	r2, [r3, #0]
   23e20:	2314      	movs	r3, #20
   23e22:	18fb      	adds	r3, r7, r3
   23e24:	881b      	ldrh	r3, [r3, #0]
   23e26:	18d3      	adds	r3, r2, r3
   23e28:	b29a      	uxth	r2, r3
   23e2a:	2316      	movs	r3, #22
   23e2c:	18fb      	adds	r3, r7, r3
   23e2e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   23e30:	1cbb      	adds	r3, r7, #2
   23e32:	1cb9      	adds	r1, r7, #2
   23e34:	2214      	movs	r2, #20
   23e36:	18ba      	adds	r2, r7, r2
   23e38:	8809      	ldrh	r1, [r1, #0]
   23e3a:	8812      	ldrh	r2, [r2, #0]
   23e3c:	1a8a      	subs	r2, r1, r2
   23e3e:	801a      	strh	r2, [r3, #0]
	} while (sz);
   23e40:	1cbb      	adds	r3, r7, #2
   23e42:	881b      	ldrh	r3, [r3, #0]
   23e44:	2b00      	cmp	r3, #0
   23e46:	d000      	beq.n	23e4a <spi_data_write+0x19a>
   23e48:	e745      	b.n	23cd6 <spi_data_write+0x26>


	return result;
   23e4a:	2313      	movs	r3, #19
   23e4c:	18fb      	adds	r3, r7, r3
   23e4e:	781b      	ldrb	r3, [r3, #0]
   23e50:	b25b      	sxtb	r3, r3
}
   23e52:	0018      	movs	r0, r3
   23e54:	46bd      	mov	sp, r7
   23e56:	b006      	add	sp, #24
   23e58:	bd80      	pop	{r7, pc}
   23e5a:	46c0      	nop			; (mov r8, r8)
   23e5c:	00022d39 	.word	0x00022d39
   23e60:	00000349 	.word	0x00000349
   23e64:	00038800 	.word	0x00038800
   23e68:	000381d8 	.word	0x000381d8
   23e6c:	0001d8a9 	.word	0x0001d8a9
   23e70:	000384a0 	.word	0x000384a0
   23e74:	00038218 	.word	0x00038218
   23e78:	00000352 	.word	0x00000352
   23e7c:	000384d8 	.word	0x000384d8
   23e80:	2000410c 	.word	0x2000410c
   23e84:	0003850c 	.word	0x0003850c

00023e88 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   23e88:	b590      	push	{r4, r7, lr}
   23e8a:	b087      	sub	sp, #28
   23e8c:	af02      	add	r7, sp, #8
   23e8e:	6078      	str	r0, [r7, #4]
   23e90:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23e92:	230f      	movs	r3, #15
   23e94:	18fb      	adds	r3, r7, r3
   23e96:	220a      	movs	r2, #10
   23e98:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23e9a:	230c      	movs	r3, #12
   23e9c:	18fb      	adds	r3, r7, r3
   23e9e:	2201      	movs	r2, #1
   23ea0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   23ea2:	230e      	movs	r3, #14
   23ea4:	18fb      	adds	r3, r7, r3
   23ea6:	22c9      	movs	r2, #201	; 0xc9
   23ea8:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   23eaa:	230d      	movs	r3, #13
   23eac:	18fb      	adds	r3, r7, r3
   23eae:	2200      	movs	r2, #0
   23eb0:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   23eb2:	687b      	ldr	r3, [r7, #4]
   23eb4:	2b30      	cmp	r3, #48	; 0x30
   23eb6:	d808      	bhi.n	23eca <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   23eb8:	230e      	movs	r3, #14
   23eba:	18fb      	adds	r3, r7, r3
   23ebc:	22c3      	movs	r2, #195	; 0xc3
   23ebe:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23ec0:	230d      	movs	r3, #13
   23ec2:	18fb      	adds	r3, r7, r3
   23ec4:	2201      	movs	r2, #1
   23ec6:	701a      	strb	r2, [r3, #0]
   23ec8:	e007      	b.n	23eda <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   23eca:	230e      	movs	r3, #14
   23ecc:	18fb      	adds	r3, r7, r3
   23ece:	22c9      	movs	r2, #201	; 0xc9
   23ed0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23ed2:	230d      	movs	r3, #13
   23ed4:	18fb      	adds	r3, r7, r3
   23ed6:	2200      	movs	r2, #0
   23ed8:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   23eda:	003a      	movs	r2, r7
   23edc:	6879      	ldr	r1, [r7, #4]
   23ede:	230e      	movs	r3, #14
   23ee0:	18fb      	adds	r3, r7, r3
   23ee2:	7818      	ldrb	r0, [r3, #0]
   23ee4:	230d      	movs	r3, #13
   23ee6:	18fb      	adds	r3, r7, r3
   23ee8:	781b      	ldrb	r3, [r3, #0]
   23eea:	9300      	str	r3, [sp, #0]
   23eec:	2304      	movs	r3, #4
   23eee:	4c2e      	ldr	r4, [pc, #184]	; (23fa8 <spi_write_reg+0x120>)
   23ef0:	47a0      	blx	r4
   23ef2:	0002      	movs	r2, r0
   23ef4:	230c      	movs	r3, #12
   23ef6:	18fb      	adds	r3, r7, r3
   23ef8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23efa:	230c      	movs	r3, #12
   23efc:	18fb      	adds	r3, r7, r3
   23efe:	781b      	ldrb	r3, [r3, #0]
   23f00:	b25b      	sxtb	r3, r3
   23f02:	2b01      	cmp	r3, #1
   23f04:	d010      	beq.n	23f28 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   23f06:	4a29      	ldr	r2, [pc, #164]	; (23fac <spi_write_reg+0x124>)
   23f08:	4929      	ldr	r1, [pc, #164]	; (23fb0 <spi_write_reg+0x128>)
   23f0a:	4b2a      	ldr	r3, [pc, #168]	; (23fb4 <spi_write_reg+0x12c>)
   23f0c:	0018      	movs	r0, r3
   23f0e:	4b2a      	ldr	r3, [pc, #168]	; (23fb8 <spi_write_reg+0x130>)
   23f10:	4798      	blx	r3
   23f12:	687a      	ldr	r2, [r7, #4]
   23f14:	4b29      	ldr	r3, [pc, #164]	; (23fbc <spi_write_reg+0x134>)
   23f16:	0011      	movs	r1, r2
   23f18:	0018      	movs	r0, r3
   23f1a:	4b27      	ldr	r3, [pc, #156]	; (23fb8 <spi_write_reg+0x130>)
   23f1c:	4798      	blx	r3
   23f1e:	4b28      	ldr	r3, [pc, #160]	; (23fc0 <spi_write_reg+0x138>)
   23f20:	0018      	movs	r0, r3
   23f22:	4b25      	ldr	r3, [pc, #148]	; (23fb8 <spi_write_reg+0x130>)
   23f24:	4798      	blx	r3
		goto _FAIL_;
   23f26:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   23f28:	230c      	movs	r3, #12
   23f2a:	18fb      	adds	r3, r7, r3
   23f2c:	781b      	ldrb	r3, [r3, #0]
   23f2e:	b25b      	sxtb	r3, r3
   23f30:	2b01      	cmp	r3, #1
   23f32:	d030      	beq.n	23f96 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23f34:	2001      	movs	r0, #1
   23f36:	4b23      	ldr	r3, [pc, #140]	; (23fc4 <spi_write_reg+0x13c>)
   23f38:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23f3a:	2300      	movs	r3, #0
   23f3c:	9300      	str	r3, [sp, #0]
   23f3e:	2300      	movs	r3, #0
   23f40:	2200      	movs	r2, #0
   23f42:	2100      	movs	r1, #0
   23f44:	20cf      	movs	r0, #207	; 0xcf
   23f46:	4c20      	ldr	r4, [pc, #128]	; (23fc8 <spi_write_reg+0x140>)
   23f48:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23f4a:	20cf      	movs	r0, #207	; 0xcf
   23f4c:	4b1f      	ldr	r3, [pc, #124]	; (23fcc <spi_write_reg+0x144>)
   23f4e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   23f50:	23ea      	movs	r3, #234	; 0xea
   23f52:	009a      	lsls	r2, r3, #2
   23f54:	4916      	ldr	r1, [pc, #88]	; (23fb0 <spi_write_reg+0x128>)
   23f56:	4b17      	ldr	r3, [pc, #92]	; (23fb4 <spi_write_reg+0x12c>)
   23f58:	0018      	movs	r0, r3
   23f5a:	4b17      	ldr	r3, [pc, #92]	; (23fb8 <spi_write_reg+0x130>)
   23f5c:	4798      	blx	r3
   23f5e:	230f      	movs	r3, #15
   23f60:	18fb      	adds	r3, r7, r3
   23f62:	7819      	ldrb	r1, [r3, #0]
   23f64:	683b      	ldr	r3, [r7, #0]
   23f66:	687a      	ldr	r2, [r7, #4]
   23f68:	4819      	ldr	r0, [pc, #100]	; (23fd0 <spi_write_reg+0x148>)
   23f6a:	4c13      	ldr	r4, [pc, #76]	; (23fb8 <spi_write_reg+0x130>)
   23f6c:	47a0      	blx	r4
   23f6e:	4b14      	ldr	r3, [pc, #80]	; (23fc0 <spi_write_reg+0x138>)
   23f70:	0018      	movs	r0, r3
   23f72:	4b11      	ldr	r3, [pc, #68]	; (23fb8 <spi_write_reg+0x130>)
   23f74:	4798      	blx	r3
		nm_bsp_sleep(1);
   23f76:	2001      	movs	r0, #1
   23f78:	4b12      	ldr	r3, [pc, #72]	; (23fc4 <spi_write_reg+0x13c>)
   23f7a:	4798      	blx	r3
		retry--;
   23f7c:	230f      	movs	r3, #15
   23f7e:	18fb      	adds	r3, r7, r3
   23f80:	781a      	ldrb	r2, [r3, #0]
   23f82:	230f      	movs	r3, #15
   23f84:	18fb      	adds	r3, r7, r3
   23f86:	3a01      	subs	r2, #1
   23f88:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23f8a:	230f      	movs	r3, #15
   23f8c:	18fb      	adds	r3, r7, r3
   23f8e:	781b      	ldrb	r3, [r3, #0]
   23f90:	2b00      	cmp	r3, #0
   23f92:	d000      	beq.n	23f96 <spi_write_reg+0x10e>
   23f94:	e78d      	b.n	23eb2 <spi_write_reg+0x2a>
	}

	return result;
   23f96:	230c      	movs	r3, #12
   23f98:	18fb      	adds	r3, r7, r3
   23f9a:	781b      	ldrb	r3, [r3, #0]
   23f9c:	b25b      	sxtb	r3, r3
}
   23f9e:	0018      	movs	r0, r3
   23fa0:	46bd      	mov	sp, r7
   23fa2:	b005      	add	sp, #20
   23fa4:	bd90      	pop	{r4, r7, pc}
   23fa6:	46c0      	nop			; (mov r8, r8)
   23fa8:	000233bd 	.word	0x000233bd
   23fac:	0000039d 	.word	0x0000039d
   23fb0:	00038810 	.word	0x00038810
   23fb4:	000381d8 	.word	0x000381d8
   23fb8:	0001d8a9 	.word	0x0001d8a9
   23fbc:	00038544 	.word	0x00038544
   23fc0:	00038218 	.word	0x00038218
   23fc4:	0001fcfd 	.word	0x0001fcfd
   23fc8:	00022e41 	.word	0x00022e41
   23fcc:	00023281 	.word	0x00023281
   23fd0:	00038570 	.word	0x00038570

00023fd4 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   23fd4:	b590      	push	{r4, r7, lr}
   23fd6:	b089      	sub	sp, #36	; 0x24
   23fd8:	af02      	add	r7, sp, #8
   23fda:	60f8      	str	r0, [r7, #12]
   23fdc:	60b9      	str	r1, [r7, #8]
   23fde:	1dbb      	adds	r3, r7, #6
   23fe0:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23fe2:	2316      	movs	r3, #22
   23fe4:	18fb      	adds	r3, r7, r3
   23fe6:	220a      	movs	r2, #10
   23fe8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   23fea:	2315      	movs	r3, #21
   23fec:	18fb      	adds	r3, r7, r3
   23fee:	22c7      	movs	r2, #199	; 0xc7
   23ff0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   23ff2:	1dbb      	adds	r3, r7, #6
   23ff4:	881a      	ldrh	r2, [r3, #0]
   23ff6:	68f9      	ldr	r1, [r7, #12]
   23ff8:	2315      	movs	r3, #21
   23ffa:	18fb      	adds	r3, r7, r3
   23ffc:	7818      	ldrb	r0, [r3, #0]
   23ffe:	2300      	movs	r3, #0
   24000:	9300      	str	r3, [sp, #0]
   24002:	0013      	movs	r3, r2
   24004:	2200      	movs	r2, #0
   24006:	4c4d      	ldr	r4, [pc, #308]	; (2413c <nm_spi_write+0x168>)
   24008:	47a0      	blx	r4
   2400a:	0002      	movs	r2, r0
   2400c:	2317      	movs	r3, #23
   2400e:	18fb      	adds	r3, r7, r3
   24010:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24012:	2317      	movs	r3, #23
   24014:	18fb      	adds	r3, r7, r3
   24016:	781b      	ldrb	r3, [r3, #0]
   24018:	b25b      	sxtb	r3, r3
   2401a:	2b01      	cmp	r3, #1
   2401c:	d010      	beq.n	24040 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   2401e:	4a48      	ldr	r2, [pc, #288]	; (24140 <nm_spi_write+0x16c>)
   24020:	4948      	ldr	r1, [pc, #288]	; (24144 <nm_spi_write+0x170>)
   24022:	4b49      	ldr	r3, [pc, #292]	; (24148 <nm_spi_write+0x174>)
   24024:	0018      	movs	r0, r3
   24026:	4b49      	ldr	r3, [pc, #292]	; (2414c <nm_spi_write+0x178>)
   24028:	4798      	blx	r3
   2402a:	68fa      	ldr	r2, [r7, #12]
   2402c:	4b48      	ldr	r3, [pc, #288]	; (24150 <nm_spi_write+0x17c>)
   2402e:	0011      	movs	r1, r2
   24030:	0018      	movs	r0, r3
   24032:	4b46      	ldr	r3, [pc, #280]	; (2414c <nm_spi_write+0x178>)
   24034:	4798      	blx	r3
   24036:	4b47      	ldr	r3, [pc, #284]	; (24154 <nm_spi_write+0x180>)
   24038:	0018      	movs	r0, r3
   2403a:	4b44      	ldr	r3, [pc, #272]	; (2414c <nm_spi_write+0x178>)
   2403c:	4798      	blx	r3
		goto _FAIL_;
   2403e:	e03e      	b.n	240be <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24040:	2317      	movs	r3, #23
   24042:	18fc      	adds	r4, r7, r3
   24044:	1dbb      	adds	r3, r7, #6
   24046:	881a      	ldrh	r2, [r3, #0]
   24048:	68bb      	ldr	r3, [r7, #8]
   2404a:	0011      	movs	r1, r2
   2404c:	0018      	movs	r0, r3
   2404e:	4b42      	ldr	r3, [pc, #264]	; (24158 <nm_spi_write+0x184>)
   24050:	4798      	blx	r3
   24052:	0003      	movs	r3, r0
   24054:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24056:	2317      	movs	r3, #23
   24058:	18fb      	adds	r3, r7, r3
   2405a:	781b      	ldrb	r3, [r3, #0]
   2405c:	b25b      	sxtb	r3, r3
   2405e:	2b01      	cmp	r3, #1
   24060:	d00e      	beq.n	24080 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24062:	4a3e      	ldr	r2, [pc, #248]	; (2415c <nm_spi_write+0x188>)
   24064:	4937      	ldr	r1, [pc, #220]	; (24144 <nm_spi_write+0x170>)
   24066:	4b38      	ldr	r3, [pc, #224]	; (24148 <nm_spi_write+0x174>)
   24068:	0018      	movs	r0, r3
   2406a:	4b38      	ldr	r3, [pc, #224]	; (2414c <nm_spi_write+0x178>)
   2406c:	4798      	blx	r3
   2406e:	4b3c      	ldr	r3, [pc, #240]	; (24160 <nm_spi_write+0x18c>)
   24070:	0018      	movs	r0, r3
   24072:	4b36      	ldr	r3, [pc, #216]	; (2414c <nm_spi_write+0x178>)
   24074:	4798      	blx	r3
   24076:	4b37      	ldr	r3, [pc, #220]	; (24154 <nm_spi_write+0x180>)
   24078:	0018      	movs	r0, r3
   2407a:	4b34      	ldr	r3, [pc, #208]	; (2414c <nm_spi_write+0x178>)
   2407c:	4798      	blx	r3
		goto _FAIL_;
   2407e:	e01e      	b.n	240be <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24080:	2317      	movs	r3, #23
   24082:	18fc      	adds	r4, r7, r3
   24084:	2315      	movs	r3, #21
   24086:	18fb      	adds	r3, r7, r3
   24088:	781b      	ldrb	r3, [r3, #0]
   2408a:	0018      	movs	r0, r3
   2408c:	4b35      	ldr	r3, [pc, #212]	; (24164 <nm_spi_write+0x190>)
   2408e:	4798      	blx	r3
   24090:	0003      	movs	r3, r0
   24092:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24094:	2317      	movs	r3, #23
   24096:	18fb      	adds	r3, r7, r3
   24098:	781b      	ldrb	r3, [r3, #0]
   2409a:	b25b      	sxtb	r3, r3
   2409c:	2b01      	cmp	r3, #1
   2409e:	d00e      	beq.n	240be <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   240a0:	4a31      	ldr	r2, [pc, #196]	; (24168 <nm_spi_write+0x194>)
   240a2:	4928      	ldr	r1, [pc, #160]	; (24144 <nm_spi_write+0x170>)
   240a4:	4b28      	ldr	r3, [pc, #160]	; (24148 <nm_spi_write+0x174>)
   240a6:	0018      	movs	r0, r3
   240a8:	4b28      	ldr	r3, [pc, #160]	; (2414c <nm_spi_write+0x178>)
   240aa:	4798      	blx	r3
   240ac:	4b2c      	ldr	r3, [pc, #176]	; (24160 <nm_spi_write+0x18c>)
   240ae:	0018      	movs	r0, r3
   240b0:	4b26      	ldr	r3, [pc, #152]	; (2414c <nm_spi_write+0x178>)
   240b2:	4798      	blx	r3
   240b4:	4b27      	ldr	r3, [pc, #156]	; (24154 <nm_spi_write+0x180>)
   240b6:	0018      	movs	r0, r3
   240b8:	4b24      	ldr	r3, [pc, #144]	; (2414c <nm_spi_write+0x178>)
   240ba:	4798      	blx	r3
		goto _FAIL_;
   240bc:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   240be:	2317      	movs	r3, #23
   240c0:	18fb      	adds	r3, r7, r3
   240c2:	781b      	ldrb	r3, [r3, #0]
   240c4:	b25b      	sxtb	r3, r3
   240c6:	2b01      	cmp	r3, #1
   240c8:	d030      	beq.n	2412c <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   240ca:	2001      	movs	r0, #1
   240cc:	4b27      	ldr	r3, [pc, #156]	; (2416c <nm_spi_write+0x198>)
   240ce:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   240d0:	2300      	movs	r3, #0
   240d2:	9300      	str	r3, [sp, #0]
   240d4:	2300      	movs	r3, #0
   240d6:	2200      	movs	r2, #0
   240d8:	2100      	movs	r1, #0
   240da:	20cf      	movs	r0, #207	; 0xcf
   240dc:	4c24      	ldr	r4, [pc, #144]	; (24170 <nm_spi_write+0x19c>)
   240de:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   240e0:	20cf      	movs	r0, #207	; 0xcf
   240e2:	4b24      	ldr	r3, [pc, #144]	; (24174 <nm_spi_write+0x1a0>)
   240e4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   240e6:	4a24      	ldr	r2, [pc, #144]	; (24178 <nm_spi_write+0x1a4>)
   240e8:	4916      	ldr	r1, [pc, #88]	; (24144 <nm_spi_write+0x170>)
   240ea:	4b17      	ldr	r3, [pc, #92]	; (24148 <nm_spi_write+0x174>)
   240ec:	0018      	movs	r0, r3
   240ee:	4b17      	ldr	r3, [pc, #92]	; (2414c <nm_spi_write+0x178>)
   240f0:	4798      	blx	r3
   240f2:	2316      	movs	r3, #22
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	7819      	ldrb	r1, [r3, #0]
   240f8:	1dbb      	adds	r3, r7, #6
   240fa:	881b      	ldrh	r3, [r3, #0]
   240fc:	68fa      	ldr	r2, [r7, #12]
   240fe:	481f      	ldr	r0, [pc, #124]	; (2417c <nm_spi_write+0x1a8>)
   24100:	4c12      	ldr	r4, [pc, #72]	; (2414c <nm_spi_write+0x178>)
   24102:	47a0      	blx	r4
   24104:	4b13      	ldr	r3, [pc, #76]	; (24154 <nm_spi_write+0x180>)
   24106:	0018      	movs	r0, r3
   24108:	4b10      	ldr	r3, [pc, #64]	; (2414c <nm_spi_write+0x178>)
   2410a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2410c:	2001      	movs	r0, #1
   2410e:	4b17      	ldr	r3, [pc, #92]	; (2416c <nm_spi_write+0x198>)
   24110:	4798      	blx	r3
		retry--;
   24112:	2316      	movs	r3, #22
   24114:	18fb      	adds	r3, r7, r3
   24116:	781a      	ldrb	r2, [r3, #0]
   24118:	2316      	movs	r3, #22
   2411a:	18fb      	adds	r3, r7, r3
   2411c:	3a01      	subs	r2, #1
   2411e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24120:	2316      	movs	r3, #22
   24122:	18fb      	adds	r3, r7, r3
   24124:	781b      	ldrb	r3, [r3, #0]
   24126:	2b00      	cmp	r3, #0
   24128:	d000      	beq.n	2412c <nm_spi_write+0x158>
   2412a:	e762      	b.n	23ff2 <nm_spi_write+0x1e>
	}


	return result;
   2412c:	2317      	movs	r3, #23
   2412e:	18fb      	adds	r3, r7, r3
   24130:	781b      	ldrb	r3, [r3, #0]
   24132:	b25b      	sxtb	r3, r3
}
   24134:	0018      	movs	r0, r3
   24136:	46bd      	mov	sp, r7
   24138:	b007      	add	sp, #28
   2413a:	bd90      	pop	{r4, r7, pc}
   2413c:	000233bd 	.word	0x000233bd
   24140:	000003cf 	.word	0x000003cf
   24144:	00038820 	.word	0x00038820
   24148:	000381d8 	.word	0x000381d8
   2414c:	0001d8a9 	.word	0x0001d8a9
   24150:	0003858c 	.word	0x0003858c
   24154:	00038218 	.word	0x00038218
   24158:	00023cb1 	.word	0x00023cb1
   2415c:	000003d9 	.word	0x000003d9
   24160:	000385bc 	.word	0x000385bc
   24164:	00023181 	.word	0x00023181
   24168:	000003e1 	.word	0x000003e1
   2416c:	0001fcfd 	.word	0x0001fcfd
   24170:	00022e41 	.word	0x00022e41
   24174:	00023281 	.word	0x00023281
   24178:	000003eb 	.word	0x000003eb
   2417c:	000385e4 	.word	0x000385e4

00024180 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24180:	b590      	push	{r4, r7, lr}
   24182:	b087      	sub	sp, #28
   24184:	af02      	add	r7, sp, #8
   24186:	6078      	str	r0, [r7, #4]
   24188:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2418a:	230f      	movs	r3, #15
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	220a      	movs	r2, #10
   24190:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24192:	230c      	movs	r3, #12
   24194:	18fb      	adds	r3, r7, r3
   24196:	2201      	movs	r2, #1
   24198:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2419a:	230e      	movs	r3, #14
   2419c:	18fb      	adds	r3, r7, r3
   2419e:	22ca      	movs	r2, #202	; 0xca
   241a0:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   241a2:	230d      	movs	r3, #13
   241a4:	18fb      	adds	r3, r7, r3
   241a6:	2200      	movs	r2, #0
   241a8:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   241aa:	687b      	ldr	r3, [r7, #4]
   241ac:	2bff      	cmp	r3, #255	; 0xff
   241ae:	d808      	bhi.n	241c2 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   241b0:	230e      	movs	r3, #14
   241b2:	18fb      	adds	r3, r7, r3
   241b4:	22c4      	movs	r2, #196	; 0xc4
   241b6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   241b8:	230d      	movs	r3, #13
   241ba:	18fb      	adds	r3, r7, r3
   241bc:	2201      	movs	r2, #1
   241be:	701a      	strb	r2, [r3, #0]
   241c0:	e007      	b.n	241d2 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   241c2:	230e      	movs	r3, #14
   241c4:	18fb      	adds	r3, r7, r3
   241c6:	22ca      	movs	r2, #202	; 0xca
   241c8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   241ca:	230d      	movs	r3, #13
   241cc:	18fb      	adds	r3, r7, r3
   241ce:	2200      	movs	r2, #0
   241d0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   241d2:	2308      	movs	r3, #8
   241d4:	18fa      	adds	r2, r7, r3
   241d6:	6879      	ldr	r1, [r7, #4]
   241d8:	230e      	movs	r3, #14
   241da:	18fb      	adds	r3, r7, r3
   241dc:	7818      	ldrb	r0, [r3, #0]
   241de:	230d      	movs	r3, #13
   241e0:	18fb      	adds	r3, r7, r3
   241e2:	781b      	ldrb	r3, [r3, #0]
   241e4:	9300      	str	r3, [sp, #0]
   241e6:	2304      	movs	r3, #4
   241e8:	4c37      	ldr	r4, [pc, #220]	; (242c8 <spi_read_reg+0x148>)
   241ea:	47a0      	blx	r4
   241ec:	0002      	movs	r2, r0
   241ee:	230c      	movs	r3, #12
   241f0:	18fb      	adds	r3, r7, r3
   241f2:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   241f4:	230c      	movs	r3, #12
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	781b      	ldrb	r3, [r3, #0]
   241fa:	b25b      	sxtb	r3, r3
   241fc:	2b01      	cmp	r3, #1
   241fe:	d010      	beq.n	24222 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24200:	4a32      	ldr	r2, [pc, #200]	; (242cc <spi_read_reg+0x14c>)
   24202:	4933      	ldr	r1, [pc, #204]	; (242d0 <spi_read_reg+0x150>)
   24204:	4b33      	ldr	r3, [pc, #204]	; (242d4 <spi_read_reg+0x154>)
   24206:	0018      	movs	r0, r3
   24208:	4b33      	ldr	r3, [pc, #204]	; (242d8 <spi_read_reg+0x158>)
   2420a:	4798      	blx	r3
   2420c:	687a      	ldr	r2, [r7, #4]
   2420e:	4b33      	ldr	r3, [pc, #204]	; (242dc <spi_read_reg+0x15c>)
   24210:	0011      	movs	r1, r2
   24212:	0018      	movs	r0, r3
   24214:	4b30      	ldr	r3, [pc, #192]	; (242d8 <spi_read_reg+0x158>)
   24216:	4798      	blx	r3
   24218:	4b31      	ldr	r3, [pc, #196]	; (242e0 <spi_read_reg+0x160>)
   2421a:	0018      	movs	r0, r3
   2421c:	4b2e      	ldr	r3, [pc, #184]	; (242d8 <spi_read_reg+0x158>)
   2421e:	4798      	blx	r3
		goto _FAIL_;
   24220:	e014      	b.n	2424c <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24222:	2308      	movs	r3, #8
   24224:	18fb      	adds	r3, r7, r3
   24226:	781b      	ldrb	r3, [r3, #0]
   24228:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2422a:	2308      	movs	r3, #8
   2422c:	18fb      	adds	r3, r7, r3
   2422e:	785b      	ldrb	r3, [r3, #1]
   24230:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24232:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24234:	2308      	movs	r3, #8
   24236:	18fb      	adds	r3, r7, r3
   24238:	789b      	ldrb	r3, [r3, #2]
   2423a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   2423c:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   2423e:	2308      	movs	r3, #8
   24240:	18fb      	adds	r3, r7, r3
   24242:	78db      	ldrb	r3, [r3, #3]
   24244:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   24246:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   24248:	683b      	ldr	r3, [r7, #0]
   2424a:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   2424c:	230c      	movs	r3, #12
   2424e:	18fb      	adds	r3, r7, r3
   24250:	781b      	ldrb	r3, [r3, #0]
   24252:	b25b      	sxtb	r3, r3
   24254:	2b01      	cmp	r3, #1
   24256:	d02f      	beq.n	242b8 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24258:	2001      	movs	r0, #1
   2425a:	4b22      	ldr	r3, [pc, #136]	; (242e4 <spi_read_reg+0x164>)
   2425c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2425e:	2300      	movs	r3, #0
   24260:	9300      	str	r3, [sp, #0]
   24262:	2300      	movs	r3, #0
   24264:	2200      	movs	r2, #0
   24266:	2100      	movs	r1, #0
   24268:	20cf      	movs	r0, #207	; 0xcf
   2426a:	4c1f      	ldr	r4, [pc, #124]	; (242e8 <spi_read_reg+0x168>)
   2426c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2426e:	20cf      	movs	r0, #207	; 0xcf
   24270:	4b1e      	ldr	r3, [pc, #120]	; (242ec <spi_read_reg+0x16c>)
   24272:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24274:	4a1e      	ldr	r2, [pc, #120]	; (242f0 <spi_read_reg+0x170>)
   24276:	4916      	ldr	r1, [pc, #88]	; (242d0 <spi_read_reg+0x150>)
   24278:	4b16      	ldr	r3, [pc, #88]	; (242d4 <spi_read_reg+0x154>)
   2427a:	0018      	movs	r0, r3
   2427c:	4b16      	ldr	r3, [pc, #88]	; (242d8 <spi_read_reg+0x158>)
   2427e:	4798      	blx	r3
   24280:	230f      	movs	r3, #15
   24282:	18fb      	adds	r3, r7, r3
   24284:	7819      	ldrb	r1, [r3, #0]
   24286:	687a      	ldr	r2, [r7, #4]
   24288:	4b1a      	ldr	r3, [pc, #104]	; (242f4 <spi_read_reg+0x174>)
   2428a:	0018      	movs	r0, r3
   2428c:	4b12      	ldr	r3, [pc, #72]	; (242d8 <spi_read_reg+0x158>)
   2428e:	4798      	blx	r3
   24290:	4b13      	ldr	r3, [pc, #76]	; (242e0 <spi_read_reg+0x160>)
   24292:	0018      	movs	r0, r3
   24294:	4b10      	ldr	r3, [pc, #64]	; (242d8 <spi_read_reg+0x158>)
   24296:	4798      	blx	r3
		nm_bsp_sleep(1);
   24298:	2001      	movs	r0, #1
   2429a:	4b12      	ldr	r3, [pc, #72]	; (242e4 <spi_read_reg+0x164>)
   2429c:	4798      	blx	r3
		retry--;
   2429e:	230f      	movs	r3, #15
   242a0:	18fb      	adds	r3, r7, r3
   242a2:	781a      	ldrb	r2, [r3, #0]
   242a4:	230f      	movs	r3, #15
   242a6:	18fb      	adds	r3, r7, r3
   242a8:	3a01      	subs	r2, #1
   242aa:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   242ac:	230f      	movs	r3, #15
   242ae:	18fb      	adds	r3, r7, r3
   242b0:	781b      	ldrb	r3, [r3, #0]
   242b2:	2b00      	cmp	r3, #0
   242b4:	d000      	beq.n	242b8 <spi_read_reg+0x138>
   242b6:	e778      	b.n	241aa <spi_read_reg+0x2a>
	}
		
	return result;
   242b8:	230c      	movs	r3, #12
   242ba:	18fb      	adds	r3, r7, r3
   242bc:	781b      	ldrb	r3, [r3, #0]
   242be:	b25b      	sxtb	r3, r3
}
   242c0:	0018      	movs	r0, r3
   242c2:	46bd      	mov	sp, r7
   242c4:	b005      	add	sp, #20
   242c6:	bd90      	pop	{r4, r7, pc}
   242c8:	000233bd 	.word	0x000233bd
   242cc:	00000423 	.word	0x00000423
   242d0:	00038830 	.word	0x00038830
   242d4:	000381d8 	.word	0x000381d8
   242d8:	0001d8a9 	.word	0x0001d8a9
   242dc:	00038600 	.word	0x00038600
   242e0:	00038218 	.word	0x00038218
   242e4:	0001fcfd 	.word	0x0001fcfd
   242e8:	00022e41 	.word	0x00022e41
   242ec:	00023281 	.word	0x00023281
   242f0:	00000435 	.word	0x00000435
   242f4:	0003862c 	.word	0x0003862c

000242f8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   242f8:	b590      	push	{r4, r7, lr}
   242fa:	b089      	sub	sp, #36	; 0x24
   242fc:	af02      	add	r7, sp, #8
   242fe:	60f8      	str	r0, [r7, #12]
   24300:	60b9      	str	r1, [r7, #8]
   24302:	1dbb      	adds	r3, r7, #6
   24304:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24306:	2316      	movs	r3, #22
   24308:	18fb      	adds	r3, r7, r3
   2430a:	22c8      	movs	r2, #200	; 0xc8
   2430c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2430e:	2317      	movs	r3, #23
   24310:	18fb      	adds	r3, r7, r3
   24312:	220a      	movs	r2, #10
   24314:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24316:	1dbb      	adds	r3, r7, #6
   24318:	881c      	ldrh	r4, [r3, #0]
   2431a:	68ba      	ldr	r2, [r7, #8]
   2431c:	68f9      	ldr	r1, [r7, #12]
   2431e:	2316      	movs	r3, #22
   24320:	18fb      	adds	r3, r7, r3
   24322:	7818      	ldrb	r0, [r3, #0]
   24324:	2300      	movs	r3, #0
   24326:	9300      	str	r3, [sp, #0]
   24328:	0023      	movs	r3, r4
   2432a:	4c2e      	ldr	r4, [pc, #184]	; (243e4 <nm_spi_read+0xec>)
   2432c:	47a0      	blx	r4
   2432e:	0002      	movs	r2, r0
   24330:	2315      	movs	r3, #21
   24332:	18fb      	adds	r3, r7, r3
   24334:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24336:	2315      	movs	r3, #21
   24338:	18fb      	adds	r3, r7, r3
   2433a:	781b      	ldrb	r3, [r3, #0]
   2433c:	b25b      	sxtb	r3, r3
   2433e:	2b01      	cmp	r3, #1
   24340:	d010      	beq.n	24364 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24342:	4a29      	ldr	r2, [pc, #164]	; (243e8 <nm_spi_read+0xf0>)
   24344:	4929      	ldr	r1, [pc, #164]	; (243ec <nm_spi_read+0xf4>)
   24346:	4b2a      	ldr	r3, [pc, #168]	; (243f0 <nm_spi_read+0xf8>)
   24348:	0018      	movs	r0, r3
   2434a:	4b2a      	ldr	r3, [pc, #168]	; (243f4 <nm_spi_read+0xfc>)
   2434c:	4798      	blx	r3
   2434e:	68fa      	ldr	r2, [r7, #12]
   24350:	4b29      	ldr	r3, [pc, #164]	; (243f8 <nm_spi_read+0x100>)
   24352:	0011      	movs	r1, r2
   24354:	0018      	movs	r0, r3
   24356:	4b27      	ldr	r3, [pc, #156]	; (243f4 <nm_spi_read+0xfc>)
   24358:	4798      	blx	r3
   2435a:	4b28      	ldr	r3, [pc, #160]	; (243fc <nm_spi_read+0x104>)
   2435c:	0018      	movs	r0, r3
   2435e:	4b25      	ldr	r3, [pc, #148]	; (243f4 <nm_spi_read+0xfc>)
   24360:	4798      	blx	r3
		goto _FAIL_;
   24362:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24364:	2315      	movs	r3, #21
   24366:	18fb      	adds	r3, r7, r3
   24368:	781b      	ldrb	r3, [r3, #0]
   2436a:	b25b      	sxtb	r3, r3
   2436c:	2b01      	cmp	r3, #1
   2436e:	d030      	beq.n	243d2 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24370:	2001      	movs	r0, #1
   24372:	4b23      	ldr	r3, [pc, #140]	; (24400 <nm_spi_read+0x108>)
   24374:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24376:	2300      	movs	r3, #0
   24378:	9300      	str	r3, [sp, #0]
   2437a:	2300      	movs	r3, #0
   2437c:	2200      	movs	r2, #0
   2437e:	2100      	movs	r1, #0
   24380:	20cf      	movs	r0, #207	; 0xcf
   24382:	4c20      	ldr	r4, [pc, #128]	; (24404 <nm_spi_read+0x10c>)
   24384:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24386:	20cf      	movs	r0, #207	; 0xcf
   24388:	4b1f      	ldr	r3, [pc, #124]	; (24408 <nm_spi_read+0x110>)
   2438a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2438c:	4a1f      	ldr	r2, [pc, #124]	; (2440c <nm_spi_read+0x114>)
   2438e:	4917      	ldr	r1, [pc, #92]	; (243ec <nm_spi_read+0xf4>)
   24390:	4b17      	ldr	r3, [pc, #92]	; (243f0 <nm_spi_read+0xf8>)
   24392:	0018      	movs	r0, r3
   24394:	4b17      	ldr	r3, [pc, #92]	; (243f4 <nm_spi_read+0xfc>)
   24396:	4798      	blx	r3
   24398:	2317      	movs	r3, #23
   2439a:	18fb      	adds	r3, r7, r3
   2439c:	7819      	ldrb	r1, [r3, #0]
   2439e:	1dbb      	adds	r3, r7, #6
   243a0:	881b      	ldrh	r3, [r3, #0]
   243a2:	68fa      	ldr	r2, [r7, #12]
   243a4:	481a      	ldr	r0, [pc, #104]	; (24410 <nm_spi_read+0x118>)
   243a6:	4c13      	ldr	r4, [pc, #76]	; (243f4 <nm_spi_read+0xfc>)
   243a8:	47a0      	blx	r4
   243aa:	4b14      	ldr	r3, [pc, #80]	; (243fc <nm_spi_read+0x104>)
   243ac:	0018      	movs	r0, r3
   243ae:	4b11      	ldr	r3, [pc, #68]	; (243f4 <nm_spi_read+0xfc>)
   243b0:	4798      	blx	r3
		nm_bsp_sleep(1);
   243b2:	2001      	movs	r0, #1
   243b4:	4b12      	ldr	r3, [pc, #72]	; (24400 <nm_spi_read+0x108>)
   243b6:	4798      	blx	r3
		retry--;
   243b8:	2317      	movs	r3, #23
   243ba:	18fb      	adds	r3, r7, r3
   243bc:	781a      	ldrb	r2, [r3, #0]
   243be:	2317      	movs	r3, #23
   243c0:	18fb      	adds	r3, r7, r3
   243c2:	3a01      	subs	r2, #1
   243c4:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   243c6:	2317      	movs	r3, #23
   243c8:	18fb      	adds	r3, r7, r3
   243ca:	781b      	ldrb	r3, [r3, #0]
   243cc:	2b00      	cmp	r3, #0
   243ce:	d000      	beq.n	243d2 <nm_spi_read+0xda>
   243d0:	e7a1      	b.n	24316 <nm_spi_read+0x1e>
	}

	return result;
   243d2:	2315      	movs	r3, #21
   243d4:	18fb      	adds	r3, r7, r3
   243d6:	781b      	ldrb	r3, [r3, #0]
   243d8:	b25b      	sxtb	r3, r3
}
   243da:	0018      	movs	r0, r3
   243dc:	46bd      	mov	sp, r7
   243de:	b007      	add	sp, #28
   243e0:	bd90      	pop	{r4, r7, pc}
   243e2:	46c0      	nop			; (mov r8, r8)
   243e4:	000233bd 	.word	0x000233bd
   243e8:	00000472 	.word	0x00000472
   243ec:	00038840 	.word	0x00038840
   243f0:	000381d8 	.word	0x000381d8
   243f4:	0001d8a9 	.word	0x0001d8a9
   243f8:	00038644 	.word	0x00038644
   243fc:	00038218 	.word	0x00038218
   24400:	0001fcfd 	.word	0x0001fcfd
   24404:	00022e41 	.word	0x00022e41
   24408:	00023281 	.word	0x00023281
   2440c:	0000047d 	.word	0x0000047d
   24410:	000385e4 	.word	0x000385e4

00024414 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24414:	b580      	push	{r7, lr}
   24416:	b082      	sub	sp, #8
   24418:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2441a:	4b0c      	ldr	r3, [pc, #48]	; (2444c <spi_init_pkt_sz+0x38>)
   2441c:	0018      	movs	r0, r3
   2441e:	4b0c      	ldr	r3, [pc, #48]	; (24450 <spi_init_pkt_sz+0x3c>)
   24420:	4798      	blx	r3
   24422:	0003      	movs	r3, r0
   24424:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   24426:	687b      	ldr	r3, [r7, #4]
   24428:	2270      	movs	r2, #112	; 0x70
   2442a:	4393      	bics	r3, r2
   2442c:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   2442e:	687b      	ldr	r3, [r7, #4]
   24430:	2250      	movs	r2, #80	; 0x50
   24432:	4313      	orrs	r3, r2
   24434:	607b      	str	r3, [r7, #4]
   24436:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   24438:	687b      	ldr	r3, [r7, #4]
   2443a:	4a04      	ldr	r2, [pc, #16]	; (2444c <spi_init_pkt_sz+0x38>)
   2443c:	0019      	movs	r1, r3
   2443e:	0010      	movs	r0, r2
   24440:	4b04      	ldr	r3, [pc, #16]	; (24454 <spi_init_pkt_sz+0x40>)
   24442:	4798      	blx	r3
}
   24444:	46c0      	nop			; (mov r8, r8)
   24446:	46bd      	mov	sp, r7
   24448:	b002      	add	sp, #8
   2444a:	bd80      	pop	{r7, pc}
   2444c:	0000e824 	.word	0x0000e824
   24450:	000245ed 	.word	0x000245ed
   24454:	00024661 	.word	0x00024661

00024458 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   24458:	b590      	push	{r4, r7, lr}
   2445a:	b083      	sub	sp, #12
   2445c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2445e:	2300      	movs	r3, #0
   24460:	9300      	str	r3, [sp, #0]
   24462:	2300      	movs	r3, #0
   24464:	2200      	movs	r2, #0
   24466:	2100      	movs	r1, #0
   24468:	20cf      	movs	r0, #207	; 0xcf
   2446a:	4c05      	ldr	r4, [pc, #20]	; (24480 <nm_spi_reset+0x28>)
   2446c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   2446e:	20cf      	movs	r0, #207	; 0xcf
   24470:	4b04      	ldr	r3, [pc, #16]	; (24484 <nm_spi_reset+0x2c>)
   24472:	4798      	blx	r3
	return M2M_SUCCESS;
   24474:	2300      	movs	r3, #0
}
   24476:	0018      	movs	r0, r3
   24478:	46bd      	mov	sp, r7
   2447a:	b001      	add	sp, #4
   2447c:	bd90      	pop	{r4, r7, pc}
   2447e:	46c0      	nop			; (mov r8, r8)
   24480:	00022e41 	.word	0x00022e41
   24484:	00023281 	.word	0x00023281

00024488 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   24488:	b580      	push	{r7, lr}
   2448a:	b082      	sub	sp, #8
   2448c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   2448e:	2300      	movs	r3, #0
   24490:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   24492:	4b40      	ldr	r3, [pc, #256]	; (24594 <nm_spi_init+0x10c>)
   24494:	2200      	movs	r2, #0
   24496:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   24498:	003b      	movs	r3, r7
   2449a:	4a3f      	ldr	r2, [pc, #252]	; (24598 <nm_spi_init+0x110>)
   2449c:	0019      	movs	r1, r3
   2449e:	0010      	movs	r0, r2
   244a0:	4b3e      	ldr	r3, [pc, #248]	; (2459c <nm_spi_init+0x114>)
   244a2:	4798      	blx	r3
   244a4:	1e03      	subs	r3, r0, #0
   244a6:	d129      	bne.n	244fc <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   244a8:	4b3a      	ldr	r3, [pc, #232]	; (24594 <nm_spi_init+0x10c>)
   244aa:	2201      	movs	r2, #1
   244ac:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   244ae:	2398      	movs	r3, #152	; 0x98
   244b0:	00da      	lsls	r2, r3, #3
   244b2:	493b      	ldr	r1, [pc, #236]	; (245a0 <nm_spi_init+0x118>)
   244b4:	4b3b      	ldr	r3, [pc, #236]	; (245a4 <nm_spi_init+0x11c>)
   244b6:	0018      	movs	r0, r3
   244b8:	4b3b      	ldr	r3, [pc, #236]	; (245a8 <nm_spi_init+0x120>)
   244ba:	4798      	blx	r3
   244bc:	4b3b      	ldr	r3, [pc, #236]	; (245ac <nm_spi_init+0x124>)
   244be:	0018      	movs	r0, r3
   244c0:	4b39      	ldr	r3, [pc, #228]	; (245a8 <nm_spi_init+0x120>)
   244c2:	4798      	blx	r3
   244c4:	4b3a      	ldr	r3, [pc, #232]	; (245b0 <nm_spi_init+0x128>)
   244c6:	0018      	movs	r0, r3
   244c8:	4b37      	ldr	r3, [pc, #220]	; (245a8 <nm_spi_init+0x120>)
   244ca:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   244cc:	003b      	movs	r3, r7
   244ce:	4a32      	ldr	r2, [pc, #200]	; (24598 <nm_spi_init+0x110>)
   244d0:	0019      	movs	r1, r3
   244d2:	0010      	movs	r0, r2
   244d4:	4b31      	ldr	r3, [pc, #196]	; (2459c <nm_spi_init+0x114>)
   244d6:	4798      	blx	r3
   244d8:	1e03      	subs	r3, r0, #0
   244da:	d10f      	bne.n	244fc <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   244dc:	4a35      	ldr	r2, [pc, #212]	; (245b4 <nm_spi_init+0x12c>)
   244de:	4930      	ldr	r1, [pc, #192]	; (245a0 <nm_spi_init+0x118>)
   244e0:	4b30      	ldr	r3, [pc, #192]	; (245a4 <nm_spi_init+0x11c>)
   244e2:	0018      	movs	r0, r3
   244e4:	4b30      	ldr	r3, [pc, #192]	; (245a8 <nm_spi_init+0x120>)
   244e6:	4798      	blx	r3
   244e8:	4b33      	ldr	r3, [pc, #204]	; (245b8 <nm_spi_init+0x130>)
   244ea:	0018      	movs	r0, r3
   244ec:	4b2e      	ldr	r3, [pc, #184]	; (245a8 <nm_spi_init+0x120>)
   244ee:	4798      	blx	r3
   244f0:	4b2f      	ldr	r3, [pc, #188]	; (245b0 <nm_spi_init+0x128>)
   244f2:	0018      	movs	r0, r3
   244f4:	4b2c      	ldr	r3, [pc, #176]	; (245a8 <nm_spi_init+0x120>)
   244f6:	4798      	blx	r3
			return 0;
   244f8:	2300      	movs	r3, #0
   244fa:	e047      	b.n	2458c <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   244fc:	4b25      	ldr	r3, [pc, #148]	; (24594 <nm_spi_init+0x10c>)
   244fe:	781b      	ldrb	r3, [r3, #0]
   24500:	2b00      	cmp	r3, #0
   24502:	d126      	bne.n	24552 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24504:	683b      	ldr	r3, [r7, #0]
   24506:	220c      	movs	r2, #12
   24508:	4393      	bics	r3, r2
   2450a:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   2450c:	683b      	ldr	r3, [r7, #0]
   2450e:	2270      	movs	r2, #112	; 0x70
   24510:	4393      	bics	r3, r2
   24512:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24514:	683b      	ldr	r3, [r7, #0]
   24516:	2250      	movs	r2, #80	; 0x50
   24518:	4313      	orrs	r3, r2
   2451a:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   2451c:	683b      	ldr	r3, [r7, #0]
   2451e:	4a1e      	ldr	r2, [pc, #120]	; (24598 <nm_spi_init+0x110>)
   24520:	0019      	movs	r1, r3
   24522:	0010      	movs	r0, r2
   24524:	4b25      	ldr	r3, [pc, #148]	; (245bc <nm_spi_init+0x134>)
   24526:	4798      	blx	r3
   24528:	1e03      	subs	r3, r0, #0
   2452a:	d10f      	bne.n	2454c <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   2452c:	4a24      	ldr	r2, [pc, #144]	; (245c0 <nm_spi_init+0x138>)
   2452e:	491c      	ldr	r1, [pc, #112]	; (245a0 <nm_spi_init+0x118>)
   24530:	4b1c      	ldr	r3, [pc, #112]	; (245a4 <nm_spi_init+0x11c>)
   24532:	0018      	movs	r0, r3
   24534:	4b1c      	ldr	r3, [pc, #112]	; (245a8 <nm_spi_init+0x120>)
   24536:	4798      	blx	r3
   24538:	4b22      	ldr	r3, [pc, #136]	; (245c4 <nm_spi_init+0x13c>)
   2453a:	0018      	movs	r0, r3
   2453c:	4b1a      	ldr	r3, [pc, #104]	; (245a8 <nm_spi_init+0x120>)
   2453e:	4798      	blx	r3
   24540:	4b1b      	ldr	r3, [pc, #108]	; (245b0 <nm_spi_init+0x128>)
   24542:	0018      	movs	r0, r3
   24544:	4b18      	ldr	r3, [pc, #96]	; (245a8 <nm_spi_init+0x120>)
   24546:	4798      	blx	r3
			return 0;
   24548:	2300      	movs	r3, #0
   2454a:	e01f      	b.n	2458c <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   2454c:	4b11      	ldr	r3, [pc, #68]	; (24594 <nm_spi_init+0x10c>)
   2454e:	2201      	movs	r2, #1
   24550:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24552:	1d3a      	adds	r2, r7, #4
   24554:	2380      	movs	r3, #128	; 0x80
   24556:	015b      	lsls	r3, r3, #5
   24558:	0011      	movs	r1, r2
   2455a:	0018      	movs	r0, r3
   2455c:	4b0f      	ldr	r3, [pc, #60]	; (2459c <nm_spi_init+0x114>)
   2455e:	4798      	blx	r3
   24560:	1e03      	subs	r3, r0, #0
   24562:	d110      	bne.n	24586 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24564:	4a18      	ldr	r2, [pc, #96]	; (245c8 <nm_spi_init+0x140>)
   24566:	490e      	ldr	r1, [pc, #56]	; (245a0 <nm_spi_init+0x118>)
   24568:	4b0e      	ldr	r3, [pc, #56]	; (245a4 <nm_spi_init+0x11c>)
   2456a:	0018      	movs	r0, r3
   2456c:	4b0e      	ldr	r3, [pc, #56]	; (245a8 <nm_spi_init+0x120>)
   2456e:	4798      	blx	r3
   24570:	4b16      	ldr	r3, [pc, #88]	; (245cc <nm_spi_init+0x144>)
   24572:	0018      	movs	r0, r3
   24574:	4b0c      	ldr	r3, [pc, #48]	; (245a8 <nm_spi_init+0x120>)
   24576:	4798      	blx	r3
   24578:	4b0d      	ldr	r3, [pc, #52]	; (245b0 <nm_spi_init+0x128>)
   2457a:	0018      	movs	r0, r3
   2457c:	4b0a      	ldr	r3, [pc, #40]	; (245a8 <nm_spi_init+0x120>)
   2457e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24580:	2306      	movs	r3, #6
   24582:	425b      	negs	r3, r3
   24584:	e002      	b.n	2458c <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24586:	4b12      	ldr	r3, [pc, #72]	; (245d0 <nm_spi_init+0x148>)
   24588:	4798      	blx	r3


	return M2M_SUCCESS;
   2458a:	2300      	movs	r3, #0
}
   2458c:	0018      	movs	r0, r3
   2458e:	46bd      	mov	sp, r7
   24590:	b002      	add	sp, #8
   24592:	bd80      	pop	{r7, pc}
   24594:	2000410c 	.word	0x2000410c
   24598:	0000e824 	.word	0x0000e824
   2459c:	00024181 	.word	0x00024181
   245a0:	0003884c 	.word	0x0003884c
   245a4:	000381d8 	.word	0x000381d8
   245a8:	0001d8a9 	.word	0x0001d8a9
   245ac:	00038674 	.word	0x00038674
   245b0:	00038218 	.word	0x00038218
   245b4:	000004c3 	.word	0x000004c3
   245b8:	000386c4 	.word	0x000386c4
   245bc:	00023e89 	.word	0x00023e89
   245c0:	000004cd 	.word	0x000004cd
   245c4:	000386f4 	.word	0x000386f4
   245c8:	000004d7 	.word	0x000004d7
   245cc:	00038728 	.word	0x00038728
   245d0:	00024415 	.word	0x00024415

000245d4 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   245d4:	b580      	push	{r7, lr}
   245d6:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   245d8:	4b03      	ldr	r3, [pc, #12]	; (245e8 <nm_spi_deinit+0x14>)
   245da:	2200      	movs	r2, #0
   245dc:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   245de:	2300      	movs	r3, #0
}
   245e0:	0018      	movs	r0, r3
   245e2:	46bd      	mov	sp, r7
   245e4:	bd80      	pop	{r7, pc}
   245e6:	46c0      	nop			; (mov r8, r8)
   245e8:	2000410c 	.word	0x2000410c

000245ec <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   245ec:	b580      	push	{r7, lr}
   245ee:	b084      	sub	sp, #16
   245f0:	af00      	add	r7, sp, #0
   245f2:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   245f4:	230c      	movs	r3, #12
   245f6:	18fa      	adds	r2, r7, r3
   245f8:	687b      	ldr	r3, [r7, #4]
   245fa:	0011      	movs	r1, r2
   245fc:	0018      	movs	r0, r3
   245fe:	4b03      	ldr	r3, [pc, #12]	; (2460c <nm_spi_read_reg+0x20>)
   24600:	4798      	blx	r3

	return u32Val;
   24602:	68fb      	ldr	r3, [r7, #12]
}
   24604:	0018      	movs	r0, r3
   24606:	46bd      	mov	sp, r7
   24608:	b004      	add	sp, #16
   2460a:	bd80      	pop	{r7, pc}
   2460c:	00024181 	.word	0x00024181

00024610 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24610:	b590      	push	{r4, r7, lr}
   24612:	b085      	sub	sp, #20
   24614:	af00      	add	r7, sp, #0
   24616:	6078      	str	r0, [r7, #4]
   24618:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2461a:	230f      	movs	r3, #15
   2461c:	18fc      	adds	r4, r7, r3
   2461e:	683a      	ldr	r2, [r7, #0]
   24620:	687b      	ldr	r3, [r7, #4]
   24622:	0011      	movs	r1, r2
   24624:	0018      	movs	r0, r3
   24626:	4b0d      	ldr	r3, [pc, #52]	; (2465c <nm_spi_read_reg_with_ret+0x4c>)
   24628:	4798      	blx	r3
   2462a:	0003      	movs	r3, r0
   2462c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2462e:	230f      	movs	r3, #15
   24630:	18fb      	adds	r3, r7, r3
   24632:	781b      	ldrb	r3, [r3, #0]
   24634:	b25b      	sxtb	r3, r3
   24636:	2b01      	cmp	r3, #1
   24638:	d104      	bne.n	24644 <nm_spi_read_reg_with_ret+0x34>
   2463a:	230f      	movs	r3, #15
   2463c:	18fb      	adds	r3, r7, r3
   2463e:	2200      	movs	r2, #0
   24640:	701a      	strb	r2, [r3, #0]
   24642:	e003      	b.n	2464c <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24644:	230f      	movs	r3, #15
   24646:	18fb      	adds	r3, r7, r3
   24648:	22fa      	movs	r2, #250	; 0xfa
   2464a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2464c:	230f      	movs	r3, #15
   2464e:	18fb      	adds	r3, r7, r3
   24650:	781b      	ldrb	r3, [r3, #0]
   24652:	b25b      	sxtb	r3, r3
}
   24654:	0018      	movs	r0, r3
   24656:	46bd      	mov	sp, r7
   24658:	b005      	add	sp, #20
   2465a:	bd90      	pop	{r4, r7, pc}
   2465c:	00024181 	.word	0x00024181

00024660 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24660:	b590      	push	{r4, r7, lr}
   24662:	b085      	sub	sp, #20
   24664:	af00      	add	r7, sp, #0
   24666:	6078      	str	r0, [r7, #4]
   24668:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2466a:	230f      	movs	r3, #15
   2466c:	18fc      	adds	r4, r7, r3
   2466e:	683a      	ldr	r2, [r7, #0]
   24670:	687b      	ldr	r3, [r7, #4]
   24672:	0011      	movs	r1, r2
   24674:	0018      	movs	r0, r3
   24676:	4b0d      	ldr	r3, [pc, #52]	; (246ac <nm_spi_write_reg+0x4c>)
   24678:	4798      	blx	r3
   2467a:	0003      	movs	r3, r0
   2467c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2467e:	230f      	movs	r3, #15
   24680:	18fb      	adds	r3, r7, r3
   24682:	781b      	ldrb	r3, [r3, #0]
   24684:	b25b      	sxtb	r3, r3
   24686:	2b01      	cmp	r3, #1
   24688:	d104      	bne.n	24694 <nm_spi_write_reg+0x34>
   2468a:	230f      	movs	r3, #15
   2468c:	18fb      	adds	r3, r7, r3
   2468e:	2200      	movs	r2, #0
   24690:	701a      	strb	r2, [r3, #0]
   24692:	e003      	b.n	2469c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24694:	230f      	movs	r3, #15
   24696:	18fb      	adds	r3, r7, r3
   24698:	22fa      	movs	r2, #250	; 0xfa
   2469a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2469c:	230f      	movs	r3, #15
   2469e:	18fb      	adds	r3, r7, r3
   246a0:	781b      	ldrb	r3, [r3, #0]
   246a2:	b25b      	sxtb	r3, r3
}
   246a4:	0018      	movs	r0, r3
   246a6:	46bd      	mov	sp, r7
   246a8:	b005      	add	sp, #20
   246aa:	bd90      	pop	{r4, r7, pc}
   246ac:	00023e89 	.word	0x00023e89

000246b0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   246b0:	b590      	push	{r4, r7, lr}
   246b2:	b087      	sub	sp, #28
   246b4:	af00      	add	r7, sp, #0
   246b6:	60f8      	str	r0, [r7, #12]
   246b8:	60b9      	str	r1, [r7, #8]
   246ba:	1dbb      	adds	r3, r7, #6
   246bc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   246be:	2317      	movs	r3, #23
   246c0:	18fc      	adds	r4, r7, r3
   246c2:	1dbb      	adds	r3, r7, #6
   246c4:	881a      	ldrh	r2, [r3, #0]
   246c6:	68b9      	ldr	r1, [r7, #8]
   246c8:	68fb      	ldr	r3, [r7, #12]
   246ca:	0018      	movs	r0, r3
   246cc:	4b0d      	ldr	r3, [pc, #52]	; (24704 <nm_spi_read_block+0x54>)
   246ce:	4798      	blx	r3
   246d0:	0003      	movs	r3, r0
   246d2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   246d4:	2317      	movs	r3, #23
   246d6:	18fb      	adds	r3, r7, r3
   246d8:	781b      	ldrb	r3, [r3, #0]
   246da:	b25b      	sxtb	r3, r3
   246dc:	2b01      	cmp	r3, #1
   246de:	d104      	bne.n	246ea <nm_spi_read_block+0x3a>
   246e0:	2317      	movs	r3, #23
   246e2:	18fb      	adds	r3, r7, r3
   246e4:	2200      	movs	r2, #0
   246e6:	701a      	strb	r2, [r3, #0]
   246e8:	e003      	b.n	246f2 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   246ea:	2317      	movs	r3, #23
   246ec:	18fb      	adds	r3, r7, r3
   246ee:	22fa      	movs	r2, #250	; 0xfa
   246f0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   246f2:	2317      	movs	r3, #23
   246f4:	18fb      	adds	r3, r7, r3
   246f6:	781b      	ldrb	r3, [r3, #0]
   246f8:	b25b      	sxtb	r3, r3
}
   246fa:	0018      	movs	r0, r3
   246fc:	46bd      	mov	sp, r7
   246fe:	b007      	add	sp, #28
   24700:	bd90      	pop	{r4, r7, pc}
   24702:	46c0      	nop			; (mov r8, r8)
   24704:	000242f9 	.word	0x000242f9

00024708 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24708:	b590      	push	{r4, r7, lr}
   2470a:	b087      	sub	sp, #28
   2470c:	af00      	add	r7, sp, #0
   2470e:	60f8      	str	r0, [r7, #12]
   24710:	60b9      	str	r1, [r7, #8]
   24712:	1dbb      	adds	r3, r7, #6
   24714:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24716:	2317      	movs	r3, #23
   24718:	18fc      	adds	r4, r7, r3
   2471a:	1dbb      	adds	r3, r7, #6
   2471c:	881a      	ldrh	r2, [r3, #0]
   2471e:	68b9      	ldr	r1, [r7, #8]
   24720:	68fb      	ldr	r3, [r7, #12]
   24722:	0018      	movs	r0, r3
   24724:	4b0d      	ldr	r3, [pc, #52]	; (2475c <nm_spi_write_block+0x54>)
   24726:	4798      	blx	r3
   24728:	0003      	movs	r3, r0
   2472a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2472c:	2317      	movs	r3, #23
   2472e:	18fb      	adds	r3, r7, r3
   24730:	781b      	ldrb	r3, [r3, #0]
   24732:	b25b      	sxtb	r3, r3
   24734:	2b01      	cmp	r3, #1
   24736:	d104      	bne.n	24742 <nm_spi_write_block+0x3a>
   24738:	2317      	movs	r3, #23
   2473a:	18fb      	adds	r3, r7, r3
   2473c:	2200      	movs	r2, #0
   2473e:	701a      	strb	r2, [r3, #0]
   24740:	e003      	b.n	2474a <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24742:	2317      	movs	r3, #23
   24744:	18fb      	adds	r3, r7, r3
   24746:	22fa      	movs	r2, #250	; 0xfa
   24748:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2474a:	2317      	movs	r3, #23
   2474c:	18fb      	adds	r3, r7, r3
   2474e:	781b      	ldrb	r3, [r3, #0]
   24750:	b25b      	sxtb	r3, r3
}
   24752:	0018      	movs	r0, r3
   24754:	46bd      	mov	sp, r7
   24756:	b007      	add	sp, #28
   24758:	bd90      	pop	{r4, r7, pc}
   2475a:	46c0      	nop			; (mov r8, r8)
   2475c:	00023fd5 	.word	0x00023fd5

00024760 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   24760:	b590      	push	{r4, r7, lr}
   24762:	b089      	sub	sp, #36	; 0x24
   24764:	af00      	add	r7, sp, #0
   24766:	60b9      	str	r1, [r7, #8]
   24768:	0011      	movs	r1, r2
   2476a:	607b      	str	r3, [r7, #4]
   2476c:	230f      	movs	r3, #15
   2476e:	18fb      	adds	r3, r7, r3
   24770:	1c02      	adds	r2, r0, #0
   24772:	701a      	strb	r2, [r3, #0]
   24774:	230e      	movs	r3, #14
   24776:	18fb      	adds	r3, r7, r3
   24778:	1c0a      	adds	r2, r1, #0
   2477a:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   2477c:	2330      	movs	r3, #48	; 0x30
   2477e:	18fb      	adds	r3, r7, r3
   24780:	881b      	ldrh	r3, [r3, #0]
   24782:	2b00      	cmp	r3, #0
   24784:	d100      	bne.n	24788 <Socket_ReadSocketData+0x28>
   24786:	e0d7      	b.n	24938 <Socket_ReadSocketData+0x1d8>
   24788:	230f      	movs	r3, #15
   2478a:	18fb      	adds	r3, r7, r3
   2478c:	2200      	movs	r2, #0
   2478e:	569a      	ldrsb	r2, [r3, r2]
   24790:	4b6b      	ldr	r3, [pc, #428]	; (24940 <Socket_ReadSocketData+0x1e0>)
   24792:	0112      	lsls	r2, r2, #4
   24794:	58d3      	ldr	r3, [r2, r3]
   24796:	2b00      	cmp	r3, #0
   24798:	d100      	bne.n	2479c <Socket_ReadSocketData+0x3c>
   2479a:	e0cd      	b.n	24938 <Socket_ReadSocketData+0x1d8>
   2479c:	230f      	movs	r3, #15
   2479e:	18fb      	adds	r3, r7, r3
   247a0:	781b      	ldrb	r3, [r3, #0]
   247a2:	b25b      	sxtb	r3, r3
   247a4:	4a66      	ldr	r2, [pc, #408]	; (24940 <Socket_ReadSocketData+0x1e0>)
   247a6:	011b      	lsls	r3, r3, #4
   247a8:	18d3      	adds	r3, r2, r3
   247aa:	3304      	adds	r3, #4
   247ac:	881b      	ldrh	r3, [r3, #0]
   247ae:	b29b      	uxth	r3, r3
   247b0:	2b00      	cmp	r3, #0
   247b2:	d100      	bne.n	247b6 <Socket_ReadSocketData+0x56>
   247b4:	e0c0      	b.n	24938 <Socket_ReadSocketData+0x1d8>
   247b6:	230f      	movs	r3, #15
   247b8:	18fb      	adds	r3, r7, r3
   247ba:	781b      	ldrb	r3, [r3, #0]
   247bc:	b25b      	sxtb	r3, r3
   247be:	4a60      	ldr	r2, [pc, #384]	; (24940 <Socket_ReadSocketData+0x1e0>)
   247c0:	011b      	lsls	r3, r3, #4
   247c2:	18d3      	adds	r3, r2, r3
   247c4:	330a      	adds	r3, #10
   247c6:	781b      	ldrb	r3, [r3, #0]
   247c8:	b2db      	uxtb	r3, r3
   247ca:	2b01      	cmp	r3, #1
   247cc:	d000      	beq.n	247d0 <Socket_ReadSocketData+0x70>
   247ce:	e0b3      	b.n	24938 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   247d0:	687b      	ldr	r3, [r7, #4]
   247d2:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   247d4:	68bb      	ldr	r3, [r7, #8]
   247d6:	2230      	movs	r2, #48	; 0x30
   247d8:	18ba      	adds	r2, r7, r2
   247da:	8812      	ldrh	r2, [r2, #0]
   247dc:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   247de:	2319      	movs	r3, #25
   247e0:	18fb      	adds	r3, r7, r3
   247e2:	2201      	movs	r2, #1
   247e4:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   247e6:	231a      	movs	r3, #26
   247e8:	18fb      	adds	r3, r7, r3
   247ea:	2230      	movs	r2, #48	; 0x30
   247ec:	18ba      	adds	r2, r7, r2
   247ee:	8812      	ldrh	r2, [r2, #0]
   247f0:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   247f2:	230f      	movs	r3, #15
   247f4:	18fb      	adds	r3, r7, r3
   247f6:	781b      	ldrb	r3, [r3, #0]
   247f8:	b25b      	sxtb	r3, r3
   247fa:	4a51      	ldr	r2, [pc, #324]	; (24940 <Socket_ReadSocketData+0x1e0>)
   247fc:	011b      	lsls	r3, r3, #4
   247fe:	18d3      	adds	r3, r2, r3
   24800:	3304      	adds	r3, #4
   24802:	881b      	ldrh	r3, [r3, #0]
   24804:	b29b      	uxth	r3, r3
   24806:	221a      	movs	r2, #26
   24808:	18ba      	adds	r2, r7, r2
   2480a:	8812      	ldrh	r2, [r2, #0]
   2480c:	1ad3      	subs	r3, r2, r3
   2480e:	b29a      	uxth	r2, r3
   24810:	2316      	movs	r3, #22
   24812:	18fb      	adds	r3, r7, r3
   24814:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24816:	2316      	movs	r3, #22
   24818:	18fb      	adds	r3, r7, r3
   2481a:	2200      	movs	r2, #0
   2481c:	5e9b      	ldrsh	r3, [r3, r2]
   2481e:	2b00      	cmp	r3, #0
   24820:	dd0f      	ble.n	24842 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24822:	2319      	movs	r3, #25
   24824:	18fb      	adds	r3, r7, r3
   24826:	2200      	movs	r2, #0
   24828:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2482a:	230f      	movs	r3, #15
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	2200      	movs	r2, #0
   24830:	569a      	ldrsb	r2, [r3, r2]
   24832:	231a      	movs	r3, #26
   24834:	18fb      	adds	r3, r7, r3
   24836:	4942      	ldr	r1, [pc, #264]	; (24940 <Socket_ReadSocketData+0x1e0>)
   24838:	0112      	lsls	r2, r2, #4
   2483a:	188a      	adds	r2, r1, r2
   2483c:	3204      	adds	r2, #4
   2483e:	8812      	ldrh	r2, [r2, #0]
   24840:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24842:	230f      	movs	r3, #15
   24844:	18fb      	adds	r3, r7, r3
   24846:	2200      	movs	r2, #0
   24848:	569a      	ldrsb	r2, [r3, r2]
   2484a:	4b3d      	ldr	r3, [pc, #244]	; (24940 <Socket_ReadSocketData+0x1e0>)
   2484c:	0112      	lsls	r2, r2, #4
   2484e:	58d1      	ldr	r1, [r2, r3]
   24850:	2319      	movs	r3, #25
   24852:	18fb      	adds	r3, r7, r3
   24854:	781c      	ldrb	r4, [r3, #0]
   24856:	231a      	movs	r3, #26
   24858:	18fb      	adds	r3, r7, r3
   2485a:	881a      	ldrh	r2, [r3, #0]
   2485c:	69f8      	ldr	r0, [r7, #28]
   2485e:	0023      	movs	r3, r4
   24860:	4c38      	ldr	r4, [pc, #224]	; (24944 <Socket_ReadSocketData+0x1e4>)
   24862:	47a0      	blx	r4
   24864:	1e03      	subs	r3, r0, #0
   24866:	d14f      	bne.n	24908 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24868:	230f      	movs	r3, #15
   2486a:	18fb      	adds	r3, r7, r3
   2486c:	2200      	movs	r2, #0
   2486e:	569a      	ldrsb	r2, [r3, r2]
   24870:	4b33      	ldr	r3, [pc, #204]	; (24940 <Socket_ReadSocketData+0x1e0>)
   24872:	0112      	lsls	r2, r2, #4
   24874:	58d2      	ldr	r2, [r2, r3]
   24876:	68bb      	ldr	r3, [r7, #8]
   24878:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   2487a:	231a      	movs	r3, #26
   2487c:	18fb      	adds	r3, r7, r3
   2487e:	2200      	movs	r2, #0
   24880:	5e9a      	ldrsh	r2, [r3, r2]
   24882:	68bb      	ldr	r3, [r7, #8]
   24884:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24886:	68bb      	ldr	r3, [r7, #8]
   24888:	88da      	ldrh	r2, [r3, #6]
   2488a:	231a      	movs	r3, #26
   2488c:	18fb      	adds	r3, r7, r3
   2488e:	881b      	ldrh	r3, [r3, #0]
   24890:	1ad3      	subs	r3, r2, r3
   24892:	b29a      	uxth	r2, r3
   24894:	68bb      	ldr	r3, [r7, #8]
   24896:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24898:	4b2b      	ldr	r3, [pc, #172]	; (24948 <Socket_ReadSocketData+0x1e8>)
   2489a:	681b      	ldr	r3, [r3, #0]
   2489c:	2b00      	cmp	r3, #0
   2489e:	d00b      	beq.n	248b8 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   248a0:	4b29      	ldr	r3, [pc, #164]	; (24948 <Socket_ReadSocketData+0x1e8>)
   248a2:	681b      	ldr	r3, [r3, #0]
   248a4:	68bc      	ldr	r4, [r7, #8]
   248a6:	220e      	movs	r2, #14
   248a8:	18ba      	adds	r2, r7, r2
   248aa:	7811      	ldrb	r1, [r2, #0]
   248ac:	220f      	movs	r2, #15
   248ae:	18ba      	adds	r2, r7, r2
   248b0:	2000      	movs	r0, #0
   248b2:	5610      	ldrsb	r0, [r2, r0]
   248b4:	0022      	movs	r2, r4
   248b6:	4798      	blx	r3

				u16ReadCount -= u16Read;
   248b8:	2330      	movs	r3, #48	; 0x30
   248ba:	18f9      	adds	r1, r7, r3
   248bc:	2330      	movs	r3, #48	; 0x30
   248be:	18fa      	adds	r2, r7, r3
   248c0:	231a      	movs	r3, #26
   248c2:	18fb      	adds	r3, r7, r3
   248c4:	8812      	ldrh	r2, [r2, #0]
   248c6:	881b      	ldrh	r3, [r3, #0]
   248c8:	1ad3      	subs	r3, r2, r3
   248ca:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   248cc:	231a      	movs	r3, #26
   248ce:	18fb      	adds	r3, r7, r3
   248d0:	881b      	ldrh	r3, [r3, #0]
   248d2:	69fa      	ldr	r2, [r7, #28]
   248d4:	18d3      	adds	r3, r2, r3
   248d6:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   248d8:	230f      	movs	r3, #15
   248da:	18fb      	adds	r3, r7, r3
   248dc:	781b      	ldrb	r3, [r3, #0]
   248de:	b25b      	sxtb	r3, r3
   248e0:	4a17      	ldr	r2, [pc, #92]	; (24940 <Socket_ReadSocketData+0x1e0>)
   248e2:	011b      	lsls	r3, r3, #4
   248e4:	18d3      	adds	r3, r2, r3
   248e6:	330a      	adds	r3, #10
   248e8:	781b      	ldrb	r3, [r3, #0]
   248ea:	b2db      	uxtb	r3, r3
   248ec:	2b00      	cmp	r3, #0
   248ee:	d11c      	bne.n	2492a <Socket_ReadSocketData+0x1ca>
   248f0:	2330      	movs	r3, #48	; 0x30
   248f2:	18fb      	adds	r3, r7, r3
   248f4:	881b      	ldrh	r3, [r3, #0]
   248f6:	2b00      	cmp	r3, #0
   248f8:	d017      	beq.n	2492a <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   248fa:	2301      	movs	r3, #1
   248fc:	2200      	movs	r2, #0
   248fe:	2100      	movs	r1, #0
   24900:	2000      	movs	r0, #0
   24902:	4c10      	ldr	r4, [pc, #64]	; (24944 <Socket_ReadSocketData+0x1e4>)
   24904:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24906:	e017      	b.n	24938 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24908:	4b10      	ldr	r3, [pc, #64]	; (2494c <Socket_ReadSocketData+0x1ec>)
   2490a:	0018      	movs	r0, r3
   2490c:	4b10      	ldr	r3, [pc, #64]	; (24950 <Socket_ReadSocketData+0x1f0>)
   2490e:	4798      	blx	r3
   24910:	2330      	movs	r3, #48	; 0x30
   24912:	18fb      	adds	r3, r7, r3
   24914:	881a      	ldrh	r2, [r3, #0]
   24916:	4b0f      	ldr	r3, [pc, #60]	; (24954 <Socket_ReadSocketData+0x1f4>)
   24918:	0011      	movs	r1, r2
   2491a:	0018      	movs	r0, r3
   2491c:	4b0c      	ldr	r3, [pc, #48]	; (24950 <Socket_ReadSocketData+0x1f0>)
   2491e:	4798      	blx	r3
   24920:	4b0d      	ldr	r3, [pc, #52]	; (24958 <Socket_ReadSocketData+0x1f8>)
   24922:	0018      	movs	r0, r3
   24924:	4b0a      	ldr	r3, [pc, #40]	; (24950 <Socket_ReadSocketData+0x1f0>)
   24926:	4798      	blx	r3
				break;
   24928:	e006      	b.n	24938 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2492a:	2330      	movs	r3, #48	; 0x30
   2492c:	18fb      	adds	r3, r7, r3
   2492e:	881b      	ldrh	r3, [r3, #0]
   24930:	2b00      	cmp	r3, #0
   24932:	d000      	beq.n	24936 <Socket_ReadSocketData+0x1d6>
   24934:	e753      	b.n	247de <Socket_ReadSocketData+0x7e>
	}
}
   24936:	e7ff      	b.n	24938 <Socket_ReadSocketData+0x1d8>
   24938:	46c0      	nop			; (mov r8, r8)
   2493a:	46bd      	mov	sp, r7
   2493c:	b009      	add	sp, #36	; 0x24
   2493e:	bd90      	pop	{r4, r7, pc}
   24940:	200059bc 	.word	0x200059bc
   24944:	00021159 	.word	0x00021159
   24948:	20005a6c 	.word	0x20005a6c
   2494c:	00038858 	.word	0x00038858
   24950:	0001d8a9 	.word	0x0001d8a9
   24954:	00038864 	.word	0x00038864
   24958:	00038878 	.word	0x00038878

0002495c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   2495c:	b590      	push	{r4, r7, lr}
   2495e:	b0bb      	sub	sp, #236	; 0xec
   24960:	af02      	add	r7, sp, #8
   24962:	603a      	str	r2, [r7, #0]
   24964:	1dfb      	adds	r3, r7, #7
   24966:	1c02      	adds	r2, r0, #0
   24968:	701a      	strb	r2, [r3, #0]
   2496a:	1d3b      	adds	r3, r7, #4
   2496c:	1c0a      	adds	r2, r1, #0
   2496e:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24970:	1dfb      	adds	r3, r7, #7
   24972:	781b      	ldrb	r3, [r3, #0]
   24974:	2b41      	cmp	r3, #65	; 0x41
   24976:	d003      	beq.n	24980 <m2m_ip_cb+0x24>
   24978:	1dfb      	adds	r3, r7, #7
   2497a:	781b      	ldrb	r3, [r3, #0]
   2497c:	2b54      	cmp	r3, #84	; 0x54
   2497e:	d120      	bne.n	249c2 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24980:	23cc      	movs	r3, #204	; 0xcc
   24982:	18f9      	adds	r1, r7, r3
   24984:	6838      	ldr	r0, [r7, #0]
   24986:	2300      	movs	r3, #0
   24988:	2204      	movs	r2, #4
   2498a:	4c98      	ldr	r4, [pc, #608]	; (24bec <m2m_ip_cb+0x290>)
   2498c:	47a0      	blx	r4
   2498e:	1e03      	subs	r3, r0, #0
   24990:	d000      	beq.n	24994 <m2m_ip_cb+0x38>
   24992:	e275      	b.n	24e80 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24994:	23cc      	movs	r3, #204	; 0xcc
   24996:	18fb      	adds	r3, r7, r3
   24998:	2201      	movs	r2, #1
   2499a:	569a      	ldrsb	r2, [r3, r2]
   2499c:	23c8      	movs	r3, #200	; 0xc8
   2499e:	18fb      	adds	r3, r7, r3
   249a0:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   249a2:	4b93      	ldr	r3, [pc, #588]	; (24bf0 <m2m_ip_cb+0x294>)
   249a4:	681b      	ldr	r3, [r3, #0]
   249a6:	2b00      	cmp	r3, #0
   249a8:	d100      	bne.n	249ac <m2m_ip_cb+0x50>
   249aa:	e269      	b.n	24e80 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   249ac:	4b90      	ldr	r3, [pc, #576]	; (24bf0 <m2m_ip_cb+0x294>)
   249ae:	681b      	ldr	r3, [r3, #0]
   249b0:	22cc      	movs	r2, #204	; 0xcc
   249b2:	18ba      	adds	r2, r7, r2
   249b4:	2000      	movs	r0, #0
   249b6:	5610      	ldrsb	r0, [r2, r0]
   249b8:	22c8      	movs	r2, #200	; 0xc8
   249ba:	18ba      	adds	r2, r7, r2
   249bc:	2101      	movs	r1, #1
   249be:	4798      	blx	r3
	{
   249c0:	e25e      	b.n	24e80 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   249c2:	1dfb      	adds	r3, r7, #7
   249c4:	781b      	ldrb	r3, [r3, #0]
   249c6:	2b42      	cmp	r3, #66	; 0x42
   249c8:	d120      	bne.n	24a0c <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   249ca:	23c4      	movs	r3, #196	; 0xc4
   249cc:	18f9      	adds	r1, r7, r3
   249ce:	6838      	ldr	r0, [r7, #0]
   249d0:	2300      	movs	r3, #0
   249d2:	2204      	movs	r2, #4
   249d4:	4c85      	ldr	r4, [pc, #532]	; (24bec <m2m_ip_cb+0x290>)
   249d6:	47a0      	blx	r4
   249d8:	1e03      	subs	r3, r0, #0
   249da:	d000      	beq.n	249de <m2m_ip_cb+0x82>
   249dc:	e257      	b.n	24e8e <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   249de:	23c4      	movs	r3, #196	; 0xc4
   249e0:	18fb      	adds	r3, r7, r3
   249e2:	2201      	movs	r2, #1
   249e4:	569a      	ldrsb	r2, [r3, r2]
   249e6:	23c0      	movs	r3, #192	; 0xc0
   249e8:	18fb      	adds	r3, r7, r3
   249ea:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   249ec:	4b80      	ldr	r3, [pc, #512]	; (24bf0 <m2m_ip_cb+0x294>)
   249ee:	681b      	ldr	r3, [r3, #0]
   249f0:	2b00      	cmp	r3, #0
   249f2:	d100      	bne.n	249f6 <m2m_ip_cb+0x9a>
   249f4:	e24b      	b.n	24e8e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   249f6:	4b7e      	ldr	r3, [pc, #504]	; (24bf0 <m2m_ip_cb+0x294>)
   249f8:	681b      	ldr	r3, [r3, #0]
   249fa:	22c4      	movs	r2, #196	; 0xc4
   249fc:	18ba      	adds	r2, r7, r2
   249fe:	2000      	movs	r0, #0
   24a00:	5610      	ldrsb	r0, [r2, r0]
   24a02:	22c0      	movs	r2, #192	; 0xc0
   24a04:	18ba      	adds	r2, r7, r2
   24a06:	2102      	movs	r1, #2
   24a08:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   24a0a:	e240      	b.n	24e8e <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24a0c:	1dfb      	adds	r3, r7, #7
   24a0e:	781b      	ldrb	r3, [r3, #0]
   24a10:	2b43      	cmp	r3, #67	; 0x43
   24a12:	d000      	beq.n	24a16 <m2m_ip_cb+0xba>
   24a14:	e086      	b.n	24b24 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24a16:	23b4      	movs	r3, #180	; 0xb4
   24a18:	18f9      	adds	r1, r7, r3
   24a1a:	6838      	ldr	r0, [r7, #0]
   24a1c:	2300      	movs	r3, #0
   24a1e:	220c      	movs	r2, #12
   24a20:	4c72      	ldr	r4, [pc, #456]	; (24bec <m2m_ip_cb+0x290>)
   24a22:	47a0      	blx	r4
   24a24:	1e03      	subs	r3, r0, #0
   24a26:	d000      	beq.n	24a2a <m2m_ip_cb+0xce>
   24a28:	e231      	b.n	24e8e <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24a2a:	23b4      	movs	r3, #180	; 0xb4
   24a2c:	18fb      	adds	r3, r7, r3
   24a2e:	7a5b      	ldrb	r3, [r3, #9]
   24a30:	b25b      	sxtb	r3, r3
   24a32:	2b00      	cmp	r3, #0
   24a34:	db4f      	blt.n	24ad6 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24a36:	23b4      	movs	r3, #180	; 0xb4
   24a38:	18fb      	adds	r3, r7, r3
   24a3a:	7a5b      	ldrb	r3, [r3, #9]
   24a3c:	b25b      	sxtb	r3, r3
   24a3e:	0018      	movs	r0, r3
   24a40:	23b4      	movs	r3, #180	; 0xb4
   24a42:	18fb      	adds	r3, r7, r3
   24a44:	7a1b      	ldrb	r3, [r3, #8]
   24a46:	b25b      	sxtb	r3, r3
   24a48:	4a6a      	ldr	r2, [pc, #424]	; (24bf4 <m2m_ip_cb+0x298>)
   24a4a:	011b      	lsls	r3, r3, #4
   24a4c:	18d3      	adds	r3, r2, r3
   24a4e:	330b      	adds	r3, #11
   24a50:	781b      	ldrb	r3, [r3, #0]
   24a52:	b2d9      	uxtb	r1, r3
   24a54:	4a67      	ldr	r2, [pc, #412]	; (24bf4 <m2m_ip_cb+0x298>)
   24a56:	0103      	lsls	r3, r0, #4
   24a58:	18d3      	adds	r3, r2, r3
   24a5a:	330b      	adds	r3, #11
   24a5c:	1c0a      	adds	r2, r1, #0
   24a5e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24a60:	23b4      	movs	r3, #180	; 0xb4
   24a62:	18fb      	adds	r3, r7, r3
   24a64:	7a5b      	ldrb	r3, [r3, #9]
   24a66:	b25b      	sxtb	r3, r3
   24a68:	4a62      	ldr	r2, [pc, #392]	; (24bf4 <m2m_ip_cb+0x298>)
   24a6a:	011b      	lsls	r3, r3, #4
   24a6c:	18d3      	adds	r3, r2, r3
   24a6e:	330a      	adds	r3, #10
   24a70:	2201      	movs	r2, #1
   24a72:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24a74:	23b4      	movs	r3, #180	; 0xb4
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	7a5b      	ldrb	r3, [r3, #9]
   24a7a:	b25b      	sxtb	r3, r3
   24a7c:	0018      	movs	r0, r3
   24a7e:	23b4      	movs	r3, #180	; 0xb4
   24a80:	18fb      	adds	r3, r7, r3
   24a82:	895b      	ldrh	r3, [r3, #10]
   24a84:	3b08      	subs	r3, #8
   24a86:	b299      	uxth	r1, r3
   24a88:	4a5a      	ldr	r2, [pc, #360]	; (24bf4 <m2m_ip_cb+0x298>)
   24a8a:	0103      	lsls	r3, r0, #4
   24a8c:	18d3      	adds	r3, r2, r3
   24a8e:	3308      	adds	r3, #8
   24a90:	1c0a      	adds	r2, r1, #0
   24a92:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24a94:	4b58      	ldr	r3, [pc, #352]	; (24bf8 <m2m_ip_cb+0x29c>)
   24a96:	881b      	ldrh	r3, [r3, #0]
   24a98:	b29b      	uxth	r3, r3
   24a9a:	3301      	adds	r3, #1
   24a9c:	b29a      	uxth	r2, r3
   24a9e:	4b56      	ldr	r3, [pc, #344]	; (24bf8 <m2m_ip_cb+0x29c>)
   24aa0:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24aa2:	4b55      	ldr	r3, [pc, #340]	; (24bf8 <m2m_ip_cb+0x29c>)
   24aa4:	881b      	ldrh	r3, [r3, #0]
   24aa6:	b29b      	uxth	r3, r3
   24aa8:	2b00      	cmp	r3, #0
   24aaa:	d106      	bne.n	24aba <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24aac:	4b52      	ldr	r3, [pc, #328]	; (24bf8 <m2m_ip_cb+0x29c>)
   24aae:	881b      	ldrh	r3, [r3, #0]
   24ab0:	b29b      	uxth	r3, r3
   24ab2:	3301      	adds	r3, #1
   24ab4:	b29a      	uxth	r2, r3
   24ab6:	4b50      	ldr	r3, [pc, #320]	; (24bf8 <m2m_ip_cb+0x29c>)
   24ab8:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24aba:	23b4      	movs	r3, #180	; 0xb4
   24abc:	18fb      	adds	r3, r7, r3
   24abe:	7a5b      	ldrb	r3, [r3, #9]
   24ac0:	b25b      	sxtb	r3, r3
   24ac2:	0018      	movs	r0, r3
   24ac4:	4b4c      	ldr	r3, [pc, #304]	; (24bf8 <m2m_ip_cb+0x29c>)
   24ac6:	881b      	ldrh	r3, [r3, #0]
   24ac8:	b299      	uxth	r1, r3
   24aca:	4a4a      	ldr	r2, [pc, #296]	; (24bf4 <m2m_ip_cb+0x298>)
   24acc:	0103      	lsls	r3, r0, #4
   24ace:	18d3      	adds	r3, r2, r3
   24ad0:	3306      	adds	r3, #6
   24ad2:	1c0a      	adds	r2, r1, #0
   24ad4:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24ad6:	23b4      	movs	r3, #180	; 0xb4
   24ad8:	18fb      	adds	r3, r7, r3
   24ada:	2209      	movs	r2, #9
   24adc:	569a      	ldrsb	r2, [r3, r2]
   24ade:	23a0      	movs	r3, #160	; 0xa0
   24ae0:	18fb      	adds	r3, r7, r3
   24ae2:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24ae4:	23a0      	movs	r3, #160	; 0xa0
   24ae6:	18fb      	adds	r3, r7, r3
   24ae8:	2202      	movs	r2, #2
   24aea:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24aec:	23b4      	movs	r3, #180	; 0xb4
   24aee:	18fb      	adds	r3, r7, r3
   24af0:	885a      	ldrh	r2, [r3, #2]
   24af2:	23a0      	movs	r3, #160	; 0xa0
   24af4:	18fb      	adds	r3, r7, r3
   24af6:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   24af8:	23b4      	movs	r3, #180	; 0xb4
   24afa:	18fb      	adds	r3, r7, r3
   24afc:	685a      	ldr	r2, [r3, #4]
   24afe:	23a0      	movs	r3, #160	; 0xa0
   24b00:	18fb      	adds	r3, r7, r3
   24b02:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24b04:	4b3a      	ldr	r3, [pc, #232]	; (24bf0 <m2m_ip_cb+0x294>)
   24b06:	681b      	ldr	r3, [r3, #0]
   24b08:	2b00      	cmp	r3, #0
   24b0a:	d100      	bne.n	24b0e <m2m_ip_cb+0x1b2>
   24b0c:	e1bf      	b.n	24e8e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24b0e:	4b38      	ldr	r3, [pc, #224]	; (24bf0 <m2m_ip_cb+0x294>)
   24b10:	681b      	ldr	r3, [r3, #0]
   24b12:	22b4      	movs	r2, #180	; 0xb4
   24b14:	18ba      	adds	r2, r7, r2
   24b16:	2008      	movs	r0, #8
   24b18:	5610      	ldrsb	r0, [r2, r0]
   24b1a:	22a0      	movs	r2, #160	; 0xa0
   24b1c:	18ba      	adds	r2, r7, r2
   24b1e:	2104      	movs	r1, #4
   24b20:	4798      	blx	r3
}
   24b22:	e1b4      	b.n	24e8e <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24b24:	1dfb      	adds	r3, r7, #7
   24b26:	781b      	ldrb	r3, [r3, #0]
   24b28:	2b44      	cmp	r3, #68	; 0x44
   24b2a:	d003      	beq.n	24b34 <m2m_ip_cb+0x1d8>
   24b2c:	1dfb      	adds	r3, r7, #7
   24b2e:	781b      	ldrb	r3, [r3, #0]
   24b30:	2b4b      	cmp	r3, #75	; 0x4b
   24b32:	d13d      	bne.n	24bb0 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24b34:	239c      	movs	r3, #156	; 0x9c
   24b36:	18f9      	adds	r1, r7, r3
   24b38:	6838      	ldr	r0, [r7, #0]
   24b3a:	2300      	movs	r3, #0
   24b3c:	2204      	movs	r2, #4
   24b3e:	4c2b      	ldr	r4, [pc, #172]	; (24bec <m2m_ip_cb+0x290>)
   24b40:	47a0      	blx	r4
   24b42:	1e03      	subs	r3, r0, #0
   24b44:	d000      	beq.n	24b48 <m2m_ip_cb+0x1ec>
   24b46:	e19d      	b.n	24e84 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24b48:	239c      	movs	r3, #156	; 0x9c
   24b4a:	18fb      	adds	r3, r7, r3
   24b4c:	2200      	movs	r2, #0
   24b4e:	569a      	ldrsb	r2, [r3, r2]
   24b50:	2398      	movs	r3, #152	; 0x98
   24b52:	18fb      	adds	r3, r7, r3
   24b54:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24b56:	239c      	movs	r3, #156	; 0x9c
   24b58:	18fb      	adds	r3, r7, r3
   24b5a:	2201      	movs	r2, #1
   24b5c:	569a      	ldrsb	r2, [r3, r2]
   24b5e:	2398      	movs	r3, #152	; 0x98
   24b60:	18fb      	adds	r3, r7, r3
   24b62:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24b64:	239c      	movs	r3, #156	; 0x9c
   24b66:	18fb      	adds	r3, r7, r3
   24b68:	785b      	ldrb	r3, [r3, #1]
   24b6a:	b25b      	sxtb	r3, r3
   24b6c:	2b00      	cmp	r3, #0
   24b6e:	d10f      	bne.n	24b90 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24b70:	239c      	movs	r3, #156	; 0x9c
   24b72:	18fb      	adds	r3, r7, r3
   24b74:	781b      	ldrb	r3, [r3, #0]
   24b76:	b25b      	sxtb	r3, r3
   24b78:	0018      	movs	r0, r3
   24b7a:	239c      	movs	r3, #156	; 0x9c
   24b7c:	18fb      	adds	r3, r7, r3
   24b7e:	885b      	ldrh	r3, [r3, #2]
   24b80:	3b08      	subs	r3, #8
   24b82:	b299      	uxth	r1, r3
   24b84:	4a1b      	ldr	r2, [pc, #108]	; (24bf4 <m2m_ip_cb+0x298>)
   24b86:	0103      	lsls	r3, r0, #4
   24b88:	18d3      	adds	r3, r2, r3
   24b8a:	3308      	adds	r3, #8
   24b8c:	1c0a      	adds	r2, r1, #0
   24b8e:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24b90:	4b17      	ldr	r3, [pc, #92]	; (24bf0 <m2m_ip_cb+0x294>)
   24b92:	681b      	ldr	r3, [r3, #0]
   24b94:	2b00      	cmp	r3, #0
   24b96:	d100      	bne.n	24b9a <m2m_ip_cb+0x23e>
   24b98:	e174      	b.n	24e84 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   24b9a:	4b15      	ldr	r3, [pc, #84]	; (24bf0 <m2m_ip_cb+0x294>)
   24b9c:	681b      	ldr	r3, [r3, #0]
   24b9e:	229c      	movs	r2, #156	; 0x9c
   24ba0:	18ba      	adds	r2, r7, r2
   24ba2:	2000      	movs	r0, #0
   24ba4:	5610      	ldrsb	r0, [r2, r0]
   24ba6:	2298      	movs	r2, #152	; 0x98
   24ba8:	18ba      	adds	r2, r7, r2
   24baa:	2105      	movs	r1, #5
   24bac:	4798      	blx	r3
	{
   24bae:	e169      	b.n	24e84 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   24bb0:	1dfb      	adds	r3, r7, #7
   24bb2:	781b      	ldrb	r3, [r3, #0]
   24bb4:	2b4a      	cmp	r3, #74	; 0x4a
   24bb6:	d123      	bne.n	24c00 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   24bb8:	230c      	movs	r3, #12
   24bba:	18f9      	adds	r1, r7, r3
   24bbc:	6838      	ldr	r0, [r7, #0]
   24bbe:	2300      	movs	r3, #0
   24bc0:	2244      	movs	r2, #68	; 0x44
   24bc2:	4c0a      	ldr	r4, [pc, #40]	; (24bec <m2m_ip_cb+0x290>)
   24bc4:	47a0      	blx	r4
   24bc6:	1e03      	subs	r3, r0, #0
   24bc8:	d000      	beq.n	24bcc <m2m_ip_cb+0x270>
   24bca:	e160      	b.n	24e8e <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24bcc:	4b0b      	ldr	r3, [pc, #44]	; (24bfc <m2m_ip_cb+0x2a0>)
   24bce:	681b      	ldr	r3, [r3, #0]
   24bd0:	2b00      	cmp	r3, #0
   24bd2:	d100      	bne.n	24bd6 <m2m_ip_cb+0x27a>
   24bd4:	e15b      	b.n	24e8e <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   24bd6:	4b09      	ldr	r3, [pc, #36]	; (24bfc <m2m_ip_cb+0x2a0>)
   24bd8:	681a      	ldr	r2, [r3, #0]
   24bda:	230c      	movs	r3, #12
   24bdc:	18fb      	adds	r3, r7, r3
   24bde:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24be0:	230c      	movs	r3, #12
   24be2:	18fb      	adds	r3, r7, r3
   24be4:	0018      	movs	r0, r3
   24be6:	4790      	blx	r2
}
   24be8:	e151      	b.n	24e8e <m2m_ip_cb+0x532>
   24bea:	46c0      	nop			; (mov r8, r8)
   24bec:	00021159 	.word	0x00021159
   24bf0:	20005a6c 	.word	0x20005a6c
   24bf4:	200059bc 	.word	0x200059bc
   24bf8:	2000410e 	.word	0x2000410e
   24bfc:	20005a74 	.word	0x20005a74
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24c00:	1dfb      	adds	r3, r7, #7
   24c02:	781b      	ldrb	r3, [r3, #0]
   24c04:	2b46      	cmp	r3, #70	; 0x46
   24c06:	d008      	beq.n	24c1a <m2m_ip_cb+0x2be>
   24c08:	1dfb      	adds	r3, r7, #7
   24c0a:	781b      	ldrb	r3, [r3, #0]
   24c0c:	2b48      	cmp	r3, #72	; 0x48
   24c0e:	d004      	beq.n	24c1a <m2m_ip_cb+0x2be>
   24c10:	1dfb      	adds	r3, r7, #7
   24c12:	781b      	ldrb	r3, [r3, #0]
   24c14:	2b4d      	cmp	r3, #77	; 0x4d
   24c16:	d000      	beq.n	24c1a <m2m_ip_cb+0x2be>
   24c18:	e0b4      	b.n	24d84 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   24c1a:	23df      	movs	r3, #223	; 0xdf
   24c1c:	18fb      	adds	r3, r7, r3
   24c1e:	2206      	movs	r2, #6
   24c20:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24c22:	1dfb      	adds	r3, r7, #7
   24c24:	781b      	ldrb	r3, [r3, #0]
   24c26:	2b48      	cmp	r3, #72	; 0x48
   24c28:	d103      	bne.n	24c32 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   24c2a:	23df      	movs	r3, #223	; 0xdf
   24c2c:	18fb      	adds	r3, r7, r3
   24c2e:	2209      	movs	r2, #9
   24c30:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24c32:	23d8      	movs	r3, #216	; 0xd8
   24c34:	18fb      	adds	r3, r7, r3
   24c36:	2210      	movs	r2, #16
   24c38:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   24c3a:	23d8      	movs	r3, #216	; 0xd8
   24c3c:	18fb      	adds	r3, r7, r3
   24c3e:	881a      	ldrh	r2, [r3, #0]
   24c40:	2388      	movs	r3, #136	; 0x88
   24c42:	18f9      	adds	r1, r7, r3
   24c44:	6838      	ldr	r0, [r7, #0]
   24c46:	2300      	movs	r3, #0
   24c48:	4c93      	ldr	r4, [pc, #588]	; (24e98 <m2m_ip_cb+0x53c>)
   24c4a:	47a0      	blx	r4
   24c4c:	1e03      	subs	r3, r0, #0
   24c4e:	d000      	beq.n	24c52 <m2m_ip_cb+0x2f6>
   24c50:	e11a      	b.n	24e88 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24c52:	23d6      	movs	r3, #214	; 0xd6
   24c54:	18fb      	adds	r3, r7, r3
   24c56:	2200      	movs	r2, #0
   24c58:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   24c5a:	23d5      	movs	r3, #213	; 0xd5
   24c5c:	18fb      	adds	r3, r7, r3
   24c5e:	2288      	movs	r2, #136	; 0x88
   24c60:	18ba      	adds	r2, r7, r2
   24c62:	7b12      	ldrb	r2, [r2, #12]
   24c64:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   24c66:	23d6      	movs	r3, #214	; 0xd6
   24c68:	18fb      	adds	r3, r7, r3
   24c6a:	2288      	movs	r2, #136	; 0x88
   24c6c:	18ba      	adds	r2, r7, r2
   24c6e:	89d2      	ldrh	r2, [r2, #14]
   24c70:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24c72:	23d5      	movs	r3, #213	; 0xd5
   24c74:	18fb      	adds	r3, r7, r3
   24c76:	781b      	ldrb	r3, [r3, #0]
   24c78:	b25b      	sxtb	r3, r3
   24c7a:	4a88      	ldr	r2, [pc, #544]	; (24e9c <m2m_ip_cb+0x540>)
   24c7c:	011b      	lsls	r3, r3, #4
   24c7e:	18d3      	adds	r3, r2, r3
   24c80:	330c      	adds	r3, #12
   24c82:	2200      	movs	r2, #0
   24c84:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   24c86:	23d2      	movs	r3, #210	; 0xd2
   24c88:	18fb      	adds	r3, r7, r3
   24c8a:	2288      	movs	r2, #136	; 0x88
   24c8c:	18ba      	adds	r2, r7, r2
   24c8e:	8912      	ldrh	r2, [r2, #8]
   24c90:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24c92:	23d0      	movs	r3, #208	; 0xd0
   24c94:	18fb      	adds	r3, r7, r3
   24c96:	2288      	movs	r2, #136	; 0x88
   24c98:	18ba      	adds	r2, r7, r2
   24c9a:	8952      	ldrh	r2, [r2, #10]
   24c9c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   24c9e:	2388      	movs	r3, #136	; 0x88
   24ca0:	18fb      	adds	r3, r7, r3
   24ca2:	885a      	ldrh	r2, [r3, #2]
   24ca4:	2370      	movs	r3, #112	; 0x70
   24ca6:	18fb      	adds	r3, r7, r3
   24ca8:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   24caa:	2388      	movs	r3, #136	; 0x88
   24cac:	18fb      	adds	r3, r7, r3
   24cae:	685a      	ldr	r2, [r3, #4]
   24cb0:	2370      	movs	r3, #112	; 0x70
   24cb2:	18fb      	adds	r3, r7, r3
   24cb4:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24cb6:	23d5      	movs	r3, #213	; 0xd5
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	781b      	ldrb	r3, [r3, #0]
   24cbc:	b25b      	sxtb	r3, r3
   24cbe:	4a77      	ldr	r2, [pc, #476]	; (24e9c <m2m_ip_cb+0x540>)
   24cc0:	011b      	lsls	r3, r3, #4
   24cc2:	18d3      	adds	r3, r2, r3
   24cc4:	3306      	adds	r3, #6
   24cc6:	881b      	ldrh	r3, [r3, #0]
   24cc8:	b29b      	uxth	r3, r3
   24cca:	22d6      	movs	r2, #214	; 0xd6
   24ccc:	18ba      	adds	r2, r7, r2
   24cce:	8812      	ldrh	r2, [r2, #0]
   24cd0:	429a      	cmp	r2, r3
   24cd2:	d148      	bne.n	24d66 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24cd4:	23d2      	movs	r3, #210	; 0xd2
   24cd6:	18fb      	adds	r3, r7, r3
   24cd8:	2200      	movs	r2, #0
   24cda:	5e9b      	ldrsh	r3, [r3, r2]
   24cdc:	2b00      	cmp	r3, #0
   24cde:	dd25      	ble.n	24d2c <m2m_ip_cb+0x3d0>
   24ce0:	23d2      	movs	r3, #210	; 0xd2
   24ce2:	18fb      	adds	r3, r7, r3
   24ce4:	2200      	movs	r2, #0
   24ce6:	5e9a      	ldrsh	r2, [r3, r2]
   24ce8:	1d3b      	adds	r3, r7, #4
   24cea:	881b      	ldrh	r3, [r3, #0]
   24cec:	429a      	cmp	r2, r3
   24cee:	da1d      	bge.n	24d2c <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24cf0:	23d0      	movs	r3, #208	; 0xd0
   24cf2:	18fb      	adds	r3, r7, r3
   24cf4:	881b      	ldrh	r3, [r3, #0]
   24cf6:	683a      	ldr	r2, [r7, #0]
   24cf8:	18d3      	adds	r3, r2, r3
   24cfa:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   24cfc:	23d8      	movs	r3, #216	; 0xd8
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	22d2      	movs	r2, #210	; 0xd2
   24d02:	18ba      	adds	r2, r7, r2
   24d04:	8812      	ldrh	r2, [r2, #0]
   24d06:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   24d08:	683c      	ldr	r4, [r7, #0]
   24d0a:	23df      	movs	r3, #223	; 0xdf
   24d0c:	18fb      	adds	r3, r7, r3
   24d0e:	781a      	ldrb	r2, [r3, #0]
   24d10:	2370      	movs	r3, #112	; 0x70
   24d12:	18f9      	adds	r1, r7, r3
   24d14:	23d5      	movs	r3, #213	; 0xd5
   24d16:	18fb      	adds	r3, r7, r3
   24d18:	2000      	movs	r0, #0
   24d1a:	5618      	ldrsb	r0, [r3, r0]
   24d1c:	23d8      	movs	r3, #216	; 0xd8
   24d1e:	18fb      	adds	r3, r7, r3
   24d20:	881b      	ldrh	r3, [r3, #0]
   24d22:	9300      	str	r3, [sp, #0]
   24d24:	0023      	movs	r3, r4
   24d26:	4c5e      	ldr	r4, [pc, #376]	; (24ea0 <m2m_ip_cb+0x544>)
   24d28:	47a0      	blx	r4
	{
   24d2a:	e0ad      	b.n	24e88 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24d2c:	2370      	movs	r3, #112	; 0x70
   24d2e:	18fb      	adds	r3, r7, r3
   24d30:	22d2      	movs	r2, #210	; 0xd2
   24d32:	18ba      	adds	r2, r7, r2
   24d34:	8812      	ldrh	r2, [r2, #0]
   24d36:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   24d38:	2370      	movs	r3, #112	; 0x70
   24d3a:	18fb      	adds	r3, r7, r3
   24d3c:	2200      	movs	r2, #0
   24d3e:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24d40:	4b58      	ldr	r3, [pc, #352]	; (24ea4 <m2m_ip_cb+0x548>)
   24d42:	681b      	ldr	r3, [r3, #0]
   24d44:	2b00      	cmp	r3, #0
   24d46:	d100      	bne.n	24d4a <m2m_ip_cb+0x3ee>
   24d48:	e09e      	b.n	24e88 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   24d4a:	4b56      	ldr	r3, [pc, #344]	; (24ea4 <m2m_ip_cb+0x548>)
   24d4c:	681b      	ldr	r3, [r3, #0]
   24d4e:	2270      	movs	r2, #112	; 0x70
   24d50:	18bc      	adds	r4, r7, r2
   24d52:	22df      	movs	r2, #223	; 0xdf
   24d54:	18ba      	adds	r2, r7, r2
   24d56:	7811      	ldrb	r1, [r2, #0]
   24d58:	22d5      	movs	r2, #213	; 0xd5
   24d5a:	18ba      	adds	r2, r7, r2
   24d5c:	2000      	movs	r0, #0
   24d5e:	5610      	ldrsb	r0, [r2, r0]
   24d60:	0022      	movs	r2, r4
   24d62:	4798      	blx	r3
	{
   24d64:	e090      	b.n	24e88 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   24d66:	23d8      	movs	r3, #216	; 0xd8
   24d68:	18fa      	adds	r2, r7, r3
   24d6a:	1d3b      	adds	r3, r7, #4
   24d6c:	8812      	ldrh	r2, [r2, #0]
   24d6e:	881b      	ldrh	r3, [r3, #0]
   24d70:	429a      	cmp	r2, r3
   24d72:	d300      	bcc.n	24d76 <m2m_ip_cb+0x41a>
   24d74:	e088      	b.n	24e88 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24d76:	2301      	movs	r3, #1
   24d78:	2200      	movs	r2, #0
   24d7a:	2100      	movs	r1, #0
   24d7c:	2000      	movs	r0, #0
   24d7e:	4c46      	ldr	r4, [pc, #280]	; (24e98 <m2m_ip_cb+0x53c>)
   24d80:	47a0      	blx	r4
	{
   24d82:	e081      	b.n	24e88 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   24d84:	1dfb      	adds	r3, r7, #7
   24d86:	781b      	ldrb	r3, [r3, #0]
   24d88:	2b45      	cmp	r3, #69	; 0x45
   24d8a:	d007      	beq.n	24d9c <m2m_ip_cb+0x440>
   24d8c:	1dfb      	adds	r3, r7, #7
   24d8e:	781b      	ldrb	r3, [r3, #0]
   24d90:	2b47      	cmp	r3, #71	; 0x47
   24d92:	d003      	beq.n	24d9c <m2m_ip_cb+0x440>
   24d94:	1dfb      	adds	r3, r7, #7
   24d96:	781b      	ldrb	r3, [r3, #0]
   24d98:	2b4c      	cmp	r3, #76	; 0x4c
   24d9a:	d14c      	bne.n	24e36 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   24d9c:	23de      	movs	r3, #222	; 0xde
   24d9e:	18fb      	adds	r3, r7, r3
   24da0:	2207      	movs	r2, #7
   24da2:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   24da4:	1dfb      	adds	r3, r7, #7
   24da6:	781b      	ldrb	r3, [r3, #0]
   24da8:	2b47      	cmp	r3, #71	; 0x47
   24daa:	d103      	bne.n	24db4 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   24dac:	23de      	movs	r3, #222	; 0xde
   24dae:	18fb      	adds	r3, r7, r3
   24db0:	2208      	movs	r2, #8
   24db2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   24db4:	2364      	movs	r3, #100	; 0x64
   24db6:	18f9      	adds	r1, r7, r3
   24db8:	6838      	ldr	r0, [r7, #0]
   24dba:	2300      	movs	r3, #0
   24dbc:	2208      	movs	r2, #8
   24dbe:	4c36      	ldr	r4, [pc, #216]	; (24e98 <m2m_ip_cb+0x53c>)
   24dc0:	47a0      	blx	r4
   24dc2:	1e03      	subs	r3, r0, #0
   24dc4:	d162      	bne.n	24e8c <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   24dc6:	23dc      	movs	r3, #220	; 0xdc
   24dc8:	18fb      	adds	r3, r7, r3
   24dca:	2200      	movs	r2, #0
   24dcc:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   24dce:	23db      	movs	r3, #219	; 0xdb
   24dd0:	18fb      	adds	r3, r7, r3
   24dd2:	2264      	movs	r2, #100	; 0x64
   24dd4:	18ba      	adds	r2, r7, r2
   24dd6:	7812      	ldrb	r2, [r2, #0]
   24dd8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   24dda:	23dc      	movs	r3, #220	; 0xdc
   24ddc:	18fb      	adds	r3, r7, r3
   24dde:	2264      	movs	r2, #100	; 0x64
   24de0:	18ba      	adds	r2, r7, r2
   24de2:	8892      	ldrh	r2, [r2, #4]
   24de4:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   24de6:	2364      	movs	r3, #100	; 0x64
   24de8:	18fb      	adds	r3, r7, r3
   24dea:	2202      	movs	r2, #2
   24dec:	5e9a      	ldrsh	r2, [r3, r2]
   24dee:	236e      	movs	r3, #110	; 0x6e
   24df0:	18fb      	adds	r3, r7, r3
   24df2:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24df4:	23db      	movs	r3, #219	; 0xdb
   24df6:	18fb      	adds	r3, r7, r3
   24df8:	781b      	ldrb	r3, [r3, #0]
   24dfa:	b25b      	sxtb	r3, r3
   24dfc:	4a27      	ldr	r2, [pc, #156]	; (24e9c <m2m_ip_cb+0x540>)
   24dfe:	011b      	lsls	r3, r3, #4
   24e00:	18d3      	adds	r3, r2, r3
   24e02:	3306      	adds	r3, #6
   24e04:	881b      	ldrh	r3, [r3, #0]
   24e06:	b29b      	uxth	r3, r3
   24e08:	22dc      	movs	r2, #220	; 0xdc
   24e0a:	18ba      	adds	r2, r7, r2
   24e0c:	8812      	ldrh	r2, [r2, #0]
   24e0e:	429a      	cmp	r2, r3
   24e10:	d13c      	bne.n	24e8c <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   24e12:	4b24      	ldr	r3, [pc, #144]	; (24ea4 <m2m_ip_cb+0x548>)
   24e14:	681b      	ldr	r3, [r3, #0]
   24e16:	2b00      	cmp	r3, #0
   24e18:	d038      	beq.n	24e8c <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   24e1a:	4b22      	ldr	r3, [pc, #136]	; (24ea4 <m2m_ip_cb+0x548>)
   24e1c:	681b      	ldr	r3, [r3, #0]
   24e1e:	226e      	movs	r2, #110	; 0x6e
   24e20:	18bc      	adds	r4, r7, r2
   24e22:	22de      	movs	r2, #222	; 0xde
   24e24:	18ba      	adds	r2, r7, r2
   24e26:	7811      	ldrb	r1, [r2, #0]
   24e28:	22db      	movs	r2, #219	; 0xdb
   24e2a:	18ba      	adds	r2, r7, r2
   24e2c:	2000      	movs	r0, #0
   24e2e:	5610      	ldrsb	r0, [r2, r0]
   24e30:	0022      	movs	r2, r4
   24e32:	4798      	blx	r3
	{
   24e34:	e02a      	b.n	24e8c <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   24e36:	1dfb      	adds	r3, r7, #7
   24e38:	781b      	ldrb	r3, [r3, #0]
   24e3a:	2b52      	cmp	r3, #82	; 0x52
   24e3c:	d127      	bne.n	24e8e <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   24e3e:	2350      	movs	r3, #80	; 0x50
   24e40:	18f9      	adds	r1, r7, r3
   24e42:	6838      	ldr	r0, [r7, #0]
   24e44:	2301      	movs	r3, #1
   24e46:	2214      	movs	r2, #20
   24e48:	4c13      	ldr	r4, [pc, #76]	; (24e98 <m2m_ip_cb+0x53c>)
   24e4a:	47a0      	blx	r4
   24e4c:	1e03      	subs	r3, r0, #0
   24e4e:	d11e      	bne.n	24e8e <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   24e50:	2350      	movs	r3, #80	; 0x50
   24e52:	18fb      	adds	r3, r7, r3
   24e54:	685b      	ldr	r3, [r3, #4]
   24e56:	001a      	movs	r2, r3
   24e58:	4b13      	ldr	r3, [pc, #76]	; (24ea8 <m2m_ip_cb+0x54c>)
   24e5a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24e5c:	4b12      	ldr	r3, [pc, #72]	; (24ea8 <m2m_ip_cb+0x54c>)
   24e5e:	681b      	ldr	r3, [r3, #0]
   24e60:	2b00      	cmp	r3, #0
   24e62:	d014      	beq.n	24e8e <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24e64:	4b10      	ldr	r3, [pc, #64]	; (24ea8 <m2m_ip_cb+0x54c>)
   24e66:	681c      	ldr	r4, [r3, #0]
   24e68:	2350      	movs	r3, #80	; 0x50
   24e6a:	18fb      	adds	r3, r7, r3
   24e6c:	6818      	ldr	r0, [r3, #0]
   24e6e:	2350      	movs	r3, #80	; 0x50
   24e70:	18fb      	adds	r3, r7, r3
   24e72:	6899      	ldr	r1, [r3, #8]
   24e74:	2350      	movs	r3, #80	; 0x50
   24e76:	18fb      	adds	r3, r7, r3
   24e78:	7c1b      	ldrb	r3, [r3, #16]
   24e7a:	001a      	movs	r2, r3
   24e7c:	47a0      	blx	r4
}
   24e7e:	e006      	b.n	24e8e <m2m_ip_cb+0x532>
	{
   24e80:	46c0      	nop			; (mov r8, r8)
   24e82:	e004      	b.n	24e8e <m2m_ip_cb+0x532>
	{
   24e84:	46c0      	nop			; (mov r8, r8)
   24e86:	e002      	b.n	24e8e <m2m_ip_cb+0x532>
	{
   24e88:	46c0      	nop			; (mov r8, r8)
   24e8a:	e000      	b.n	24e8e <m2m_ip_cb+0x532>
	{
   24e8c:	46c0      	nop			; (mov r8, r8)
}
   24e8e:	46c0      	nop			; (mov r8, r8)
   24e90:	46bd      	mov	sp, r7
   24e92:	b039      	add	sp, #228	; 0xe4
   24e94:	bd90      	pop	{r4, r7, pc}
   24e96:	46c0      	nop			; (mov r8, r8)
   24e98:	00021159 	.word	0x00021159
   24e9c:	200059bc 	.word	0x200059bc
   24ea0:	00024761 	.word	0x00024761
   24ea4:	20005a6c 	.word	0x20005a6c
   24ea8:	20005a70 	.word	0x20005a70

00024eac <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   24eac:	b580      	push	{r7, lr}
   24eae:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   24eb0:	4b0c      	ldr	r3, [pc, #48]	; (24ee4 <socketInit+0x38>)
   24eb2:	781b      	ldrb	r3, [r3, #0]
   24eb4:	b2db      	uxtb	r3, r3
   24eb6:	2b00      	cmp	r3, #0
   24eb8:	d110      	bne.n	24edc <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24eba:	4b0b      	ldr	r3, [pc, #44]	; (24ee8 <socketInit+0x3c>)
   24ebc:	22b0      	movs	r2, #176	; 0xb0
   24ebe:	2100      	movs	r1, #0
   24ec0:	0018      	movs	r0, r3
   24ec2:	4b0a      	ldr	r3, [pc, #40]	; (24eec <socketInit+0x40>)
   24ec4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   24ec6:	4b0a      	ldr	r3, [pc, #40]	; (24ef0 <socketInit+0x44>)
   24ec8:	0019      	movs	r1, r3
   24eca:	2002      	movs	r0, #2
   24ecc:	4b09      	ldr	r3, [pc, #36]	; (24ef4 <socketInit+0x48>)
   24ece:	4798      	blx	r3
		gbSocketInit	= 1;
   24ed0:	4b04      	ldr	r3, [pc, #16]	; (24ee4 <socketInit+0x38>)
   24ed2:	2201      	movs	r2, #1
   24ed4:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   24ed6:	4b08      	ldr	r3, [pc, #32]	; (24ef8 <socketInit+0x4c>)
   24ed8:	2200      	movs	r2, #0
   24eda:	801a      	strh	r2, [r3, #0]
	}
}
   24edc:	46c0      	nop			; (mov r8, r8)
   24ede:	46bd      	mov	sp, r7
   24ee0:	bd80      	pop	{r7, pc}
   24ee2:	46c0      	nop			; (mov r8, r8)
   24ee4:	20004110 	.word	0x20004110
   24ee8:	200059bc 	.word	0x200059bc
   24eec:	000205dd 	.word	0x000205dd
   24ef0:	0002495d 	.word	0x0002495d
   24ef4:	000212d9 	.word	0x000212d9
   24ef8:	2000410e 	.word	0x2000410e

00024efc <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   24efc:	b580      	push	{r7, lr}
   24efe:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24f00:	4b0a      	ldr	r3, [pc, #40]	; (24f2c <socketDeinit+0x30>)
   24f02:	22b0      	movs	r2, #176	; 0xb0
   24f04:	2100      	movs	r1, #0
   24f06:	0018      	movs	r0, r3
   24f08:	4b09      	ldr	r3, [pc, #36]	; (24f30 <socketDeinit+0x34>)
   24f0a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   24f0c:	2100      	movs	r1, #0
   24f0e:	2002      	movs	r0, #2
   24f10:	4b08      	ldr	r3, [pc, #32]	; (24f34 <socketDeinit+0x38>)
   24f12:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   24f14:	4b08      	ldr	r3, [pc, #32]	; (24f38 <socketDeinit+0x3c>)
   24f16:	2200      	movs	r2, #0
   24f18:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   24f1a:	4b08      	ldr	r3, [pc, #32]	; (24f3c <socketDeinit+0x40>)
   24f1c:	2200      	movs	r2, #0
   24f1e:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   24f20:	4b07      	ldr	r3, [pc, #28]	; (24f40 <socketDeinit+0x44>)
   24f22:	2200      	movs	r2, #0
   24f24:	701a      	strb	r2, [r3, #0]
}
   24f26:	46c0      	nop			; (mov r8, r8)
   24f28:	46bd      	mov	sp, r7
   24f2a:	bd80      	pop	{r7, pc}
   24f2c:	200059bc 	.word	0x200059bc
   24f30:	000205dd 	.word	0x000205dd
   24f34:	000212d9 	.word	0x000212d9
   24f38:	20005a6c 	.word	0x20005a6c
   24f3c:	20005a74 	.word	0x20005a74
   24f40:	20004110 	.word	0x20004110

00024f44 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24f44:	b580      	push	{r7, lr}
   24f46:	b082      	sub	sp, #8
   24f48:	af00      	add	r7, sp, #0
   24f4a:	6078      	str	r0, [r7, #4]
   24f4c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   24f4e:	4b05      	ldr	r3, [pc, #20]	; (24f64 <registerSocketCallback+0x20>)
   24f50:	687a      	ldr	r2, [r7, #4]
   24f52:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24f54:	4b04      	ldr	r3, [pc, #16]	; (24f68 <registerSocketCallback+0x24>)
   24f56:	683a      	ldr	r2, [r7, #0]
   24f58:	601a      	str	r2, [r3, #0]
}
   24f5a:	46c0      	nop			; (mov r8, r8)
   24f5c:	46bd      	mov	sp, r7
   24f5e:	b002      	add	sp, #8
   24f60:	bd80      	pop	{r7, pc}
   24f62:	46c0      	nop			; (mov r8, r8)
   24f64:	20005a6c 	.word	0x20005a6c
   24f68:	20005a74 	.word	0x20005a74

00024f6c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   24f6c:	b590      	push	{r4, r7, lr}
   24f6e:	b08d      	sub	sp, #52	; 0x34
   24f70:	af04      	add	r7, sp, #16
   24f72:	0004      	movs	r4, r0
   24f74:	0008      	movs	r0, r1
   24f76:	0011      	movs	r1, r2
   24f78:	1dbb      	adds	r3, r7, #6
   24f7a:	1c22      	adds	r2, r4, #0
   24f7c:	801a      	strh	r2, [r3, #0]
   24f7e:	1d7b      	adds	r3, r7, #5
   24f80:	1c02      	adds	r2, r0, #0
   24f82:	701a      	strb	r2, [r3, #0]
   24f84:	1d3b      	adds	r3, r7, #4
   24f86:	1c0a      	adds	r2, r1, #0
   24f88:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   24f8a:	231f      	movs	r3, #31
   24f8c:	18fb      	adds	r3, r7, r3
   24f8e:	22ff      	movs	r2, #255	; 0xff
   24f90:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   24f92:	1dbb      	adds	r3, r7, #6
   24f94:	881b      	ldrh	r3, [r3, #0]
   24f96:	2b02      	cmp	r3, #2
   24f98:	d000      	beq.n	24f9c <socket+0x30>
   24f9a:	e0ce      	b.n	2513a <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   24f9c:	1d7b      	adds	r3, r7, #5
   24f9e:	781b      	ldrb	r3, [r3, #0]
   24fa0:	2b01      	cmp	r3, #1
   24fa2:	d135      	bne.n	25010 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24fa4:	231e      	movs	r3, #30
   24fa6:	18fb      	adds	r3, r7, r3
   24fa8:	2200      	movs	r2, #0
   24faa:	701a      	strb	r2, [r3, #0]
   24fac:	e02a      	b.n	25004 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   24fae:	2317      	movs	r3, #23
   24fb0:	18fb      	adds	r3, r7, r3
   24fb2:	4a66      	ldr	r2, [pc, #408]	; (2514c <socket+0x1e0>)
   24fb4:	7812      	ldrb	r2, [r2, #0]
   24fb6:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   24fb8:	4b64      	ldr	r3, [pc, #400]	; (2514c <socket+0x1e0>)
   24fba:	781b      	ldrb	r3, [r3, #0]
   24fbc:	b2db      	uxtb	r3, r3
   24fbe:	011a      	lsls	r2, r3, #4
   24fc0:	4b63      	ldr	r3, [pc, #396]	; (25150 <socket+0x1e4>)
   24fc2:	18d3      	adds	r3, r2, r3
   24fc4:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   24fc6:	4b61      	ldr	r3, [pc, #388]	; (2514c <socket+0x1e0>)
   24fc8:	781b      	ldrb	r3, [r3, #0]
   24fca:	b2db      	uxtb	r3, r3
   24fcc:	1c5a      	adds	r2, r3, #1
   24fce:	4b61      	ldr	r3, [pc, #388]	; (25154 <socket+0x1e8>)
   24fd0:	2107      	movs	r1, #7
   24fd2:	0010      	movs	r0, r2
   24fd4:	4798      	blx	r3
   24fd6:	000b      	movs	r3, r1
   24fd8:	b2da      	uxtb	r2, r3
   24fda:	4b5c      	ldr	r3, [pc, #368]	; (2514c <socket+0x1e0>)
   24fdc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24fde:	69bb      	ldr	r3, [r7, #24]
   24fe0:	7a9b      	ldrb	r3, [r3, #10]
   24fe2:	b2db      	uxtb	r3, r3
   24fe4:	2b00      	cmp	r3, #0
   24fe6:	d106      	bne.n	24ff6 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   24fe8:	231f      	movs	r3, #31
   24fea:	18fb      	adds	r3, r7, r3
   24fec:	2217      	movs	r2, #23
   24fee:	18ba      	adds	r2, r7, r2
   24ff0:	7812      	ldrb	r2, [r2, #0]
   24ff2:	701a      	strb	r2, [r3, #0]
					break;
   24ff4:	e04c      	b.n	25090 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24ff6:	231e      	movs	r3, #30
   24ff8:	18fb      	adds	r3, r7, r3
   24ffa:	781a      	ldrb	r2, [r3, #0]
   24ffc:	231e      	movs	r3, #30
   24ffe:	18fb      	adds	r3, r7, r3
   25000:	3201      	adds	r2, #1
   25002:	701a      	strb	r2, [r3, #0]
   25004:	231e      	movs	r3, #30
   25006:	18fb      	adds	r3, r7, r3
   25008:	781b      	ldrb	r3, [r3, #0]
   2500a:	2b06      	cmp	r3, #6
   2500c:	d9cf      	bls.n	24fae <socket+0x42>
   2500e:	e03f      	b.n	25090 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25010:	1d7b      	adds	r3, r7, #5
   25012:	781b      	ldrb	r3, [r3, #0]
   25014:	2b02      	cmp	r3, #2
   25016:	d13b      	bne.n	25090 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   25018:	4b4f      	ldr	r3, [pc, #316]	; (25158 <socket+0x1ec>)
   2501a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2501c:	231e      	movs	r3, #30
   2501e:	18fb      	adds	r3, r7, r3
   25020:	2200      	movs	r2, #0
   25022:	701a      	strb	r2, [r3, #0]
   25024:	e02f      	b.n	25086 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   25026:	2317      	movs	r3, #23
   25028:	18fb      	adds	r3, r7, r3
   2502a:	4a4c      	ldr	r2, [pc, #304]	; (2515c <socket+0x1f0>)
   2502c:	7812      	ldrb	r2, [r2, #0]
   2502e:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25030:	4b4a      	ldr	r3, [pc, #296]	; (2515c <socket+0x1f0>)
   25032:	781b      	ldrb	r3, [r3, #0]
   25034:	b2db      	uxtb	r3, r3
   25036:	011b      	lsls	r3, r3, #4
   25038:	693a      	ldr	r2, [r7, #16]
   2503a:	18d3      	adds	r3, r2, r3
   2503c:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   2503e:	4b47      	ldr	r3, [pc, #284]	; (2515c <socket+0x1f0>)
   25040:	781b      	ldrb	r3, [r3, #0]
   25042:	b2db      	uxtb	r3, r3
   25044:	3301      	adds	r3, #1
   25046:	4a46      	ldr	r2, [pc, #280]	; (25160 <socket+0x1f4>)
   25048:	4013      	ands	r3, r2
   2504a:	d504      	bpl.n	25056 <socket+0xea>
   2504c:	3b01      	subs	r3, #1
   2504e:	2204      	movs	r2, #4
   25050:	4252      	negs	r2, r2
   25052:	4313      	orrs	r3, r2
   25054:	3301      	adds	r3, #1
   25056:	b2da      	uxtb	r2, r3
   25058:	4b40      	ldr	r3, [pc, #256]	; (2515c <socket+0x1f0>)
   2505a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   2505c:	69bb      	ldr	r3, [r7, #24]
   2505e:	7a9b      	ldrb	r3, [r3, #10]
   25060:	b2db      	uxtb	r3, r3
   25062:	2b00      	cmp	r3, #0
   25064:	d108      	bne.n	25078 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   25066:	2317      	movs	r3, #23
   25068:	18fb      	adds	r3, r7, r3
   2506a:	781b      	ldrb	r3, [r3, #0]
   2506c:	3307      	adds	r3, #7
   2506e:	b2da      	uxtb	r2, r3
   25070:	231f      	movs	r3, #31
   25072:	18fb      	adds	r3, r7, r3
   25074:	701a      	strb	r2, [r3, #0]
					break;
   25076:	e00b      	b.n	25090 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25078:	231e      	movs	r3, #30
   2507a:	18fb      	adds	r3, r7, r3
   2507c:	781a      	ldrb	r2, [r3, #0]
   2507e:	231e      	movs	r3, #30
   25080:	18fb      	adds	r3, r7, r3
   25082:	3201      	adds	r2, #1
   25084:	701a      	strb	r2, [r3, #0]
   25086:	231e      	movs	r3, #30
   25088:	18fb      	adds	r3, r7, r3
   2508a:	781b      	ldrb	r3, [r3, #0]
   2508c:	2b03      	cmp	r3, #3
   2508e:	d9ca      	bls.n	25026 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25090:	231f      	movs	r3, #31
   25092:	18fb      	adds	r3, r7, r3
   25094:	781b      	ldrb	r3, [r3, #0]
   25096:	2b7f      	cmp	r3, #127	; 0x7f
   25098:	d84f      	bhi.n	2513a <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2509a:	69bb      	ldr	r3, [r7, #24]
   2509c:	2210      	movs	r2, #16
   2509e:	2100      	movs	r1, #0
   250a0:	0018      	movs	r0, r3
   250a2:	4b30      	ldr	r3, [pc, #192]	; (25164 <socket+0x1f8>)
   250a4:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   250a6:	69bb      	ldr	r3, [r7, #24]
   250a8:	2201      	movs	r2, #1
   250aa:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   250ac:	4b2e      	ldr	r3, [pc, #184]	; (25168 <socket+0x1fc>)
   250ae:	881b      	ldrh	r3, [r3, #0]
   250b0:	b29b      	uxth	r3, r3
   250b2:	3301      	adds	r3, #1
   250b4:	b29a      	uxth	r2, r3
   250b6:	4b2c      	ldr	r3, [pc, #176]	; (25168 <socket+0x1fc>)
   250b8:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   250ba:	4b2b      	ldr	r3, [pc, #172]	; (25168 <socket+0x1fc>)
   250bc:	881b      	ldrh	r3, [r3, #0]
   250be:	b29b      	uxth	r3, r3
   250c0:	2b00      	cmp	r3, #0
   250c2:	d106      	bne.n	250d2 <socket+0x166>
				++gu16SessionID;
   250c4:	4b28      	ldr	r3, [pc, #160]	; (25168 <socket+0x1fc>)
   250c6:	881b      	ldrh	r3, [r3, #0]
   250c8:	b29b      	uxth	r3, r3
   250ca:	3301      	adds	r3, #1
   250cc:	b29a      	uxth	r2, r3
   250ce:	4b26      	ldr	r3, [pc, #152]	; (25168 <socket+0x1fc>)
   250d0:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   250d2:	4b25      	ldr	r3, [pc, #148]	; (25168 <socket+0x1fc>)
   250d4:	881b      	ldrh	r3, [r3, #0]
   250d6:	b29a      	uxth	r2, r3
   250d8:	69bb      	ldr	r3, [r7, #24]
   250da:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   250dc:	4b23      	ldr	r3, [pc, #140]	; (2516c <socket+0x200>)
   250de:	0018      	movs	r0, r3
   250e0:	4b23      	ldr	r3, [pc, #140]	; (25170 <socket+0x204>)
   250e2:	4798      	blx	r3
   250e4:	231f      	movs	r3, #31
   250e6:	18fb      	adds	r3, r7, r3
   250e8:	2100      	movs	r1, #0
   250ea:	5659      	ldrsb	r1, [r3, r1]
   250ec:	4b1e      	ldr	r3, [pc, #120]	; (25168 <socket+0x1fc>)
   250ee:	881b      	ldrh	r3, [r3, #0]
   250f0:	b29b      	uxth	r3, r3
   250f2:	001a      	movs	r2, r3
   250f4:	4b1f      	ldr	r3, [pc, #124]	; (25174 <socket+0x208>)
   250f6:	0018      	movs	r0, r3
   250f8:	4b1d      	ldr	r3, [pc, #116]	; (25170 <socket+0x204>)
   250fa:	4798      	blx	r3
   250fc:	4b1e      	ldr	r3, [pc, #120]	; (25178 <socket+0x20c>)
   250fe:	0018      	movs	r0, r3
   25100:	4b1b      	ldr	r3, [pc, #108]	; (25170 <socket+0x204>)
   25102:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25104:	1d3b      	adds	r3, r7, #4
   25106:	781b      	ldrb	r3, [r3, #0]
   25108:	2201      	movs	r2, #1
   2510a:	4013      	ands	r3, r2
   2510c:	d015      	beq.n	2513a <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   2510e:	230c      	movs	r3, #12
   25110:	18fb      	adds	r3, r7, r3
   25112:	221f      	movs	r2, #31
   25114:	18ba      	adds	r2, r7, r2
   25116:	7812      	ldrb	r2, [r2, #0]
   25118:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2511a:	69bb      	ldr	r3, [r7, #24]
   2511c:	2221      	movs	r2, #33	; 0x21
   2511e:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25120:	230c      	movs	r3, #12
   25122:	18fa      	adds	r2, r7, r3
   25124:	2300      	movs	r3, #0
   25126:	9302      	str	r3, [sp, #8]
   25128:	2300      	movs	r3, #0
   2512a:	9301      	str	r3, [sp, #4]
   2512c:	2300      	movs	r3, #0
   2512e:	9300      	str	r3, [sp, #0]
   25130:	2304      	movs	r3, #4
   25132:	2150      	movs	r1, #80	; 0x50
   25134:	2002      	movs	r0, #2
   25136:	4c11      	ldr	r4, [pc, #68]	; (2517c <socket+0x210>)
   25138:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2513a:	231f      	movs	r3, #31
   2513c:	18fb      	adds	r3, r7, r3
   2513e:	781b      	ldrb	r3, [r3, #0]
   25140:	b25b      	sxtb	r3, r3
}
   25142:	0018      	movs	r0, r3
   25144:	46bd      	mov	sp, r7
   25146:	b009      	add	sp, #36	; 0x24
   25148:	bd90      	pop	{r4, r7, pc}
   2514a:	46c0      	nop			; (mov r8, r8)
   2514c:	20004111 	.word	0x20004111
   25150:	200059bc 	.word	0x200059bc
   25154:	00032669 	.word	0x00032669
   25158:	20005a2c 	.word	0x20005a2c
   2515c:	20004112 	.word	0x20004112
   25160:	80000003 	.word	0x80000003
   25164:	000205dd 	.word	0x000205dd
   25168:	2000410e 	.word	0x2000410e
   2516c:	00038858 	.word	0x00038858
   25170:	0001d8a9 	.word	0x0001d8a9
   25174:	0003887c 	.word	0x0003887c
   25178:	00038878 	.word	0x00038878
   2517c:	0002083d 	.word	0x0002083d

00025180 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25180:	b5b0      	push	{r4, r5, r7, lr}
   25182:	b08a      	sub	sp, #40	; 0x28
   25184:	af04      	add	r7, sp, #16
   25186:	6039      	str	r1, [r7, #0]
   25188:	0011      	movs	r1, r2
   2518a:	1dfb      	adds	r3, r7, #7
   2518c:	1c02      	adds	r2, r0, #0
   2518e:	701a      	strb	r2, [r3, #0]
   25190:	1dbb      	adds	r3, r7, #6
   25192:	1c0a      	adds	r2, r1, #0
   25194:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25196:	2317      	movs	r3, #23
   25198:	18fb      	adds	r3, r7, r3
   2519a:	22fa      	movs	r2, #250	; 0xfa
   2519c:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   2519e:	1dfb      	adds	r3, r7, #7
   251a0:	781b      	ldrb	r3, [r3, #0]
   251a2:	2b7f      	cmp	r3, #127	; 0x7f
   251a4:	d867      	bhi.n	25276 <connect+0xf6>
   251a6:	683b      	ldr	r3, [r7, #0]
   251a8:	2b00      	cmp	r3, #0
   251aa:	d064      	beq.n	25276 <connect+0xf6>
   251ac:	1dfb      	adds	r3, r7, #7
   251ae:	781b      	ldrb	r3, [r3, #0]
   251b0:	b25b      	sxtb	r3, r3
   251b2:	4a35      	ldr	r2, [pc, #212]	; (25288 <connect+0x108>)
   251b4:	011b      	lsls	r3, r3, #4
   251b6:	18d3      	adds	r3, r2, r3
   251b8:	330a      	adds	r3, #10
   251ba:	781b      	ldrb	r3, [r3, #0]
   251bc:	b2db      	uxtb	r3, r3
   251be:	2b01      	cmp	r3, #1
   251c0:	d159      	bne.n	25276 <connect+0xf6>
   251c2:	1dbb      	adds	r3, r7, #6
   251c4:	781b      	ldrb	r3, [r3, #0]
   251c6:	2b00      	cmp	r3, #0
   251c8:	d055      	beq.n	25276 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   251ca:	2316      	movs	r3, #22
   251cc:	18fb      	adds	r3, r7, r3
   251ce:	2244      	movs	r2, #68	; 0x44
   251d0:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   251d2:	1dfb      	adds	r3, r7, #7
   251d4:	781b      	ldrb	r3, [r3, #0]
   251d6:	b25b      	sxtb	r3, r3
   251d8:	4a2b      	ldr	r2, [pc, #172]	; (25288 <connect+0x108>)
   251da:	011b      	lsls	r3, r3, #4
   251dc:	18d3      	adds	r3, r2, r3
   251de:	330b      	adds	r3, #11
   251e0:	781b      	ldrb	r3, [r3, #0]
   251e2:	b2db      	uxtb	r3, r3
   251e4:	001a      	movs	r2, r3
   251e6:	2301      	movs	r3, #1
   251e8:	4013      	ands	r3, r2
   251ea:	d00f      	beq.n	2520c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   251ec:	2316      	movs	r3, #22
   251ee:	18fb      	adds	r3, r7, r3
   251f0:	224b      	movs	r2, #75	; 0x4b
   251f2:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   251f4:	1dfb      	adds	r3, r7, #7
   251f6:	781b      	ldrb	r3, [r3, #0]
   251f8:	b25b      	sxtb	r3, r3
   251fa:	4a23      	ldr	r2, [pc, #140]	; (25288 <connect+0x108>)
   251fc:	011b      	lsls	r3, r3, #4
   251fe:	18d3      	adds	r3, r2, r3
   25200:	330b      	adds	r3, #11
   25202:	781b      	ldrb	r3, [r3, #0]
   25204:	b2da      	uxtb	r2, r3
   25206:	2308      	movs	r3, #8
   25208:	18fb      	adds	r3, r7, r3
   2520a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   2520c:	2308      	movs	r3, #8
   2520e:	18fb      	adds	r3, r7, r3
   25210:	1dfa      	adds	r2, r7, #7
   25212:	7812      	ldrb	r2, [r2, #0]
   25214:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25216:	6839      	ldr	r1, [r7, #0]
   25218:	2308      	movs	r3, #8
   2521a:	18fb      	adds	r3, r7, r3
   2521c:	2208      	movs	r2, #8
   2521e:	0018      	movs	r0, r3
   25220:	4b1a      	ldr	r3, [pc, #104]	; (2528c <connect+0x10c>)
   25222:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25224:	1dfb      	adds	r3, r7, #7
   25226:	781b      	ldrb	r3, [r3, #0]
   25228:	b25b      	sxtb	r3, r3
   2522a:	4a17      	ldr	r2, [pc, #92]	; (25288 <connect+0x108>)
   2522c:	011b      	lsls	r3, r3, #4
   2522e:	18d3      	adds	r3, r2, r3
   25230:	3306      	adds	r3, #6
   25232:	881b      	ldrh	r3, [r3, #0]
   25234:	b29a      	uxth	r2, r3
   25236:	2308      	movs	r3, #8
   25238:	18fb      	adds	r3, r7, r3
   2523a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   2523c:	2317      	movs	r3, #23
   2523e:	18fc      	adds	r4, r7, r3
   25240:	2308      	movs	r3, #8
   25242:	18fa      	adds	r2, r7, r3
   25244:	2316      	movs	r3, #22
   25246:	18fb      	adds	r3, r7, r3
   25248:	7819      	ldrb	r1, [r3, #0]
   2524a:	2300      	movs	r3, #0
   2524c:	9302      	str	r3, [sp, #8]
   2524e:	2300      	movs	r3, #0
   25250:	9301      	str	r3, [sp, #4]
   25252:	2300      	movs	r3, #0
   25254:	9300      	str	r3, [sp, #0]
   25256:	230c      	movs	r3, #12
   25258:	2002      	movs	r0, #2
   2525a:	4d0d      	ldr	r5, [pc, #52]	; (25290 <connect+0x110>)
   2525c:	47a8      	blx	r5
   2525e:	0003      	movs	r3, r0
   25260:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25262:	2317      	movs	r3, #23
   25264:	18fb      	adds	r3, r7, r3
   25266:	781b      	ldrb	r3, [r3, #0]
   25268:	b25b      	sxtb	r3, r3
   2526a:	2b00      	cmp	r3, #0
   2526c:	d003      	beq.n	25276 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   2526e:	2317      	movs	r3, #23
   25270:	18fb      	adds	r3, r7, r3
   25272:	22f7      	movs	r2, #247	; 0xf7
   25274:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   25276:	2317      	movs	r3, #23
   25278:	18fb      	adds	r3, r7, r3
   2527a:	781b      	ldrb	r3, [r3, #0]
   2527c:	b25b      	sxtb	r3, r3
}
   2527e:	0018      	movs	r0, r3
   25280:	46bd      	mov	sp, r7
   25282:	b006      	add	sp, #24
   25284:	bdb0      	pop	{r4, r5, r7, pc}
   25286:	46c0      	nop			; (mov r8, r8)
   25288:	200059bc 	.word	0x200059bc
   2528c:	000205a1 	.word	0x000205a1
   25290:	0002083d 	.word	0x0002083d

00025294 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25294:	b590      	push	{r4, r7, lr}
   25296:	b08f      	sub	sp, #60	; 0x3c
   25298:	af04      	add	r7, sp, #16
   2529a:	0004      	movs	r4, r0
   2529c:	60b9      	str	r1, [r7, #8]
   2529e:	0010      	movs	r0, r2
   252a0:	0019      	movs	r1, r3
   252a2:	230f      	movs	r3, #15
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	1c22      	adds	r2, r4, #0
   252a8:	701a      	strb	r2, [r3, #0]
   252aa:	230c      	movs	r3, #12
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	1c02      	adds	r2, r0, #0
   252b0:	801a      	strh	r2, [r3, #0]
   252b2:	1dbb      	adds	r3, r7, #6
   252b4:	1c0a      	adds	r2, r1, #0
   252b6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   252b8:	2326      	movs	r3, #38	; 0x26
   252ba:	18fb      	adds	r3, r7, r3
   252bc:	2206      	movs	r2, #6
   252be:	4252      	negs	r2, r2
   252c0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   252c2:	230f      	movs	r3, #15
   252c4:	18fb      	adds	r3, r7, r3
   252c6:	781b      	ldrb	r3, [r3, #0]
   252c8:	2b7f      	cmp	r3, #127	; 0x7f
   252ca:	d900      	bls.n	252ce <send+0x3a>
   252cc:	e087      	b.n	253de <send+0x14a>
   252ce:	68bb      	ldr	r3, [r7, #8]
   252d0:	2b00      	cmp	r3, #0
   252d2:	d100      	bne.n	252d6 <send+0x42>
   252d4:	e083      	b.n	253de <send+0x14a>
   252d6:	230c      	movs	r3, #12
   252d8:	18fb      	adds	r3, r7, r3
   252da:	881a      	ldrh	r2, [r3, #0]
   252dc:	23af      	movs	r3, #175	; 0xaf
   252de:	00db      	lsls	r3, r3, #3
   252e0:	429a      	cmp	r2, r3
   252e2:	d900      	bls.n	252e6 <send+0x52>
   252e4:	e07b      	b.n	253de <send+0x14a>
   252e6:	230f      	movs	r3, #15
   252e8:	18fb      	adds	r3, r7, r3
   252ea:	781b      	ldrb	r3, [r3, #0]
   252ec:	b25b      	sxtb	r3, r3
   252ee:	4a40      	ldr	r2, [pc, #256]	; (253f0 <send+0x15c>)
   252f0:	011b      	lsls	r3, r3, #4
   252f2:	18d3      	adds	r3, r2, r3
   252f4:	330a      	adds	r3, #10
   252f6:	781b      	ldrb	r3, [r3, #0]
   252f8:	b2db      	uxtb	r3, r3
   252fa:	2b01      	cmp	r3, #1
   252fc:	d16f      	bne.n	253de <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   252fe:	2323      	movs	r3, #35	; 0x23
   25300:	18fb      	adds	r3, r7, r3
   25302:	2245      	movs	r2, #69	; 0x45
   25304:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25306:	2324      	movs	r3, #36	; 0x24
   25308:	18fb      	adds	r3, r7, r3
   2530a:	2250      	movs	r2, #80	; 0x50
   2530c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   2530e:	2310      	movs	r3, #16
   25310:	18fb      	adds	r3, r7, r3
   25312:	220f      	movs	r2, #15
   25314:	18ba      	adds	r2, r7, r2
   25316:	7812      	ldrb	r2, [r2, #0]
   25318:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2531a:	2310      	movs	r3, #16
   2531c:	18fb      	adds	r3, r7, r3
   2531e:	220c      	movs	r2, #12
   25320:	18ba      	adds	r2, r7, r2
   25322:	8812      	ldrh	r2, [r2, #0]
   25324:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   25326:	230f      	movs	r3, #15
   25328:	18fb      	adds	r3, r7, r3
   2532a:	781b      	ldrb	r3, [r3, #0]
   2532c:	b25b      	sxtb	r3, r3
   2532e:	4a30      	ldr	r2, [pc, #192]	; (253f0 <send+0x15c>)
   25330:	011b      	lsls	r3, r3, #4
   25332:	18d3      	adds	r3, r2, r3
   25334:	3306      	adds	r3, #6
   25336:	881b      	ldrh	r3, [r3, #0]
   25338:	b29a      	uxth	r2, r3
   2533a:	2310      	movs	r3, #16
   2533c:	18fb      	adds	r3, r7, r3
   2533e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25340:	230f      	movs	r3, #15
   25342:	18fb      	adds	r3, r7, r3
   25344:	781b      	ldrb	r3, [r3, #0]
   25346:	b25b      	sxtb	r3, r3
   25348:	2b06      	cmp	r3, #6
   2534a:	dd03      	ble.n	25354 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   2534c:	2324      	movs	r3, #36	; 0x24
   2534e:	18fb      	adds	r3, r7, r3
   25350:	2244      	movs	r2, #68	; 0x44
   25352:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25354:	230f      	movs	r3, #15
   25356:	18fb      	adds	r3, r7, r3
   25358:	781b      	ldrb	r3, [r3, #0]
   2535a:	b25b      	sxtb	r3, r3
   2535c:	4a24      	ldr	r2, [pc, #144]	; (253f0 <send+0x15c>)
   2535e:	011b      	lsls	r3, r3, #4
   25360:	18d3      	adds	r3, r2, r3
   25362:	330b      	adds	r3, #11
   25364:	781b      	ldrb	r3, [r3, #0]
   25366:	b2db      	uxtb	r3, r3
   25368:	001a      	movs	r2, r3
   2536a:	2301      	movs	r3, #1
   2536c:	4013      	ands	r3, r2
   2536e:	d00f      	beq.n	25390 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25370:	2323      	movs	r3, #35	; 0x23
   25372:	18fb      	adds	r3, r7, r3
   25374:	224c      	movs	r2, #76	; 0x4c
   25376:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   25378:	230f      	movs	r3, #15
   2537a:	18fb      	adds	r3, r7, r3
   2537c:	2200      	movs	r2, #0
   2537e:	569a      	ldrsb	r2, [r3, r2]
   25380:	2324      	movs	r3, #36	; 0x24
   25382:	18fb      	adds	r3, r7, r3
   25384:	491a      	ldr	r1, [pc, #104]	; (253f0 <send+0x15c>)
   25386:	0112      	lsls	r2, r2, #4
   25388:	188a      	adds	r2, r1, r2
   2538a:	3208      	adds	r2, #8
   2538c:	8812      	ldrh	r2, [r2, #0]
   2538e:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25390:	2323      	movs	r3, #35	; 0x23
   25392:	18fb      	adds	r3, r7, r3
   25394:	781b      	ldrb	r3, [r3, #0]
   25396:	2280      	movs	r2, #128	; 0x80
   25398:	4252      	negs	r2, r2
   2539a:	4313      	orrs	r3, r2
   2539c:	b2d9      	uxtb	r1, r3
   2539e:	2310      	movs	r3, #16
   253a0:	18fa      	adds	r2, r7, r3
   253a2:	2324      	movs	r3, #36	; 0x24
   253a4:	18fb      	adds	r3, r7, r3
   253a6:	881b      	ldrh	r3, [r3, #0]
   253a8:	9302      	str	r3, [sp, #8]
   253aa:	230c      	movs	r3, #12
   253ac:	18fb      	adds	r3, r7, r3
   253ae:	881b      	ldrh	r3, [r3, #0]
   253b0:	9301      	str	r3, [sp, #4]
   253b2:	68bb      	ldr	r3, [r7, #8]
   253b4:	9300      	str	r3, [sp, #0]
   253b6:	2310      	movs	r3, #16
   253b8:	2002      	movs	r0, #2
   253ba:	4c0e      	ldr	r4, [pc, #56]	; (253f4 <send+0x160>)
   253bc:	47a0      	blx	r4
   253be:	0003      	movs	r3, r0
   253c0:	001a      	movs	r2, r3
   253c2:	2326      	movs	r3, #38	; 0x26
   253c4:	18fb      	adds	r3, r7, r3
   253c6:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   253c8:	2326      	movs	r3, #38	; 0x26
   253ca:	18fb      	adds	r3, r7, r3
   253cc:	2200      	movs	r2, #0
   253ce:	5e9b      	ldrsh	r3, [r3, r2]
   253d0:	2b00      	cmp	r3, #0
   253d2:	d004      	beq.n	253de <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   253d4:	2326      	movs	r3, #38	; 0x26
   253d6:	18fb      	adds	r3, r7, r3
   253d8:	220e      	movs	r2, #14
   253da:	4252      	negs	r2, r2
   253dc:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   253de:	2326      	movs	r3, #38	; 0x26
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	2200      	movs	r2, #0
   253e4:	5e9b      	ldrsh	r3, [r3, r2]
}
   253e6:	0018      	movs	r0, r3
   253e8:	46bd      	mov	sp, r7
   253ea:	b00b      	add	sp, #44	; 0x2c
   253ec:	bd90      	pop	{r4, r7, pc}
   253ee:	46c0      	nop			; (mov r8, r8)
   253f0:	200059bc 	.word	0x200059bc
   253f4:	0002083d 	.word	0x0002083d

000253f8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   253f8:	b590      	push	{r4, r7, lr}
   253fa:	b08d      	sub	sp, #52	; 0x34
   253fc:	af04      	add	r7, sp, #16
   253fe:	60b9      	str	r1, [r7, #8]
   25400:	0011      	movs	r1, r2
   25402:	607b      	str	r3, [r7, #4]
   25404:	230f      	movs	r3, #15
   25406:	18fb      	adds	r3, r7, r3
   25408:	1c02      	adds	r2, r0, #0
   2540a:	701a      	strb	r2, [r3, #0]
   2540c:	230c      	movs	r3, #12
   2540e:	18fb      	adds	r3, r7, r3
   25410:	1c0a      	adds	r2, r1, #0
   25412:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25414:	231e      	movs	r3, #30
   25416:	18fb      	adds	r3, r7, r3
   25418:	2206      	movs	r2, #6
   2541a:	4252      	negs	r2, r2
   2541c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   2541e:	230f      	movs	r3, #15
   25420:	18fb      	adds	r3, r7, r3
   25422:	781b      	ldrb	r3, [r3, #0]
   25424:	2b7f      	cmp	r3, #127	; 0x7f
   25426:	d900      	bls.n	2542a <recv+0x32>
   25428:	e099      	b.n	2555e <recv+0x166>
   2542a:	68bb      	ldr	r3, [r7, #8]
   2542c:	2b00      	cmp	r3, #0
   2542e:	d100      	bne.n	25432 <recv+0x3a>
   25430:	e095      	b.n	2555e <recv+0x166>
   25432:	230c      	movs	r3, #12
   25434:	18fb      	adds	r3, r7, r3
   25436:	881b      	ldrh	r3, [r3, #0]
   25438:	2b00      	cmp	r3, #0
   2543a:	d100      	bne.n	2543e <recv+0x46>
   2543c:	e08f      	b.n	2555e <recv+0x166>
   2543e:	230f      	movs	r3, #15
   25440:	18fb      	adds	r3, r7, r3
   25442:	781b      	ldrb	r3, [r3, #0]
   25444:	b25b      	sxtb	r3, r3
   25446:	4a4a      	ldr	r2, [pc, #296]	; (25570 <recv+0x178>)
   25448:	011b      	lsls	r3, r3, #4
   2544a:	18d3      	adds	r3, r2, r3
   2544c:	330a      	adds	r3, #10
   2544e:	781b      	ldrb	r3, [r3, #0]
   25450:	b2db      	uxtb	r3, r3
   25452:	2b01      	cmp	r3, #1
   25454:	d000      	beq.n	25458 <recv+0x60>
   25456:	e082      	b.n	2555e <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   25458:	231e      	movs	r3, #30
   2545a:	18fb      	adds	r3, r7, r3
   2545c:	2200      	movs	r2, #0
   2545e:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25460:	230f      	movs	r3, #15
   25462:	18fb      	adds	r3, r7, r3
   25464:	2200      	movs	r2, #0
   25466:	569a      	ldrsb	r2, [r3, r2]
   25468:	4b41      	ldr	r3, [pc, #260]	; (25570 <recv+0x178>)
   2546a:	0112      	lsls	r2, r2, #4
   2546c:	68b9      	ldr	r1, [r7, #8]
   2546e:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   25470:	230f      	movs	r3, #15
   25472:	18fb      	adds	r3, r7, r3
   25474:	781b      	ldrb	r3, [r3, #0]
   25476:	b25b      	sxtb	r3, r3
   25478:	4a3d      	ldr	r2, [pc, #244]	; (25570 <recv+0x178>)
   2547a:	011b      	lsls	r3, r3, #4
   2547c:	18d3      	adds	r3, r2, r3
   2547e:	3304      	adds	r3, #4
   25480:	220c      	movs	r2, #12
   25482:	18ba      	adds	r2, r7, r2
   25484:	8812      	ldrh	r2, [r2, #0]
   25486:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   25488:	230f      	movs	r3, #15
   2548a:	18fb      	adds	r3, r7, r3
   2548c:	781b      	ldrb	r3, [r3, #0]
   2548e:	b25b      	sxtb	r3, r3
   25490:	4a37      	ldr	r2, [pc, #220]	; (25570 <recv+0x178>)
   25492:	011b      	lsls	r3, r3, #4
   25494:	18d3      	adds	r3, r2, r3
   25496:	330c      	adds	r3, #12
   25498:	781b      	ldrb	r3, [r3, #0]
   2549a:	b2db      	uxtb	r3, r3
   2549c:	2b00      	cmp	r3, #0
   2549e:	d15e      	bne.n	2555e <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   254a0:	231d      	movs	r3, #29
   254a2:	18fb      	adds	r3, r7, r3
   254a4:	2246      	movs	r2, #70	; 0x46
   254a6:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   254a8:	230f      	movs	r3, #15
   254aa:	18fb      	adds	r3, r7, r3
   254ac:	781b      	ldrb	r3, [r3, #0]
   254ae:	b25b      	sxtb	r3, r3
   254b0:	4a2f      	ldr	r2, [pc, #188]	; (25570 <recv+0x178>)
   254b2:	011b      	lsls	r3, r3, #4
   254b4:	18d3      	adds	r3, r2, r3
   254b6:	330c      	adds	r3, #12
   254b8:	2201      	movs	r2, #1
   254ba:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   254bc:	230f      	movs	r3, #15
   254be:	18fb      	adds	r3, r7, r3
   254c0:	781b      	ldrb	r3, [r3, #0]
   254c2:	b25b      	sxtb	r3, r3
   254c4:	4a2a      	ldr	r2, [pc, #168]	; (25570 <recv+0x178>)
   254c6:	011b      	lsls	r3, r3, #4
   254c8:	18d3      	adds	r3, r2, r3
   254ca:	330b      	adds	r3, #11
   254cc:	781b      	ldrb	r3, [r3, #0]
   254ce:	b2db      	uxtb	r3, r3
   254d0:	001a      	movs	r2, r3
   254d2:	2301      	movs	r3, #1
   254d4:	4013      	ands	r3, r2
   254d6:	d003      	beq.n	254e0 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   254d8:	231d      	movs	r3, #29
   254da:	18fb      	adds	r3, r7, r3
   254dc:	224d      	movs	r2, #77	; 0x4d
   254de:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   254e0:	687b      	ldr	r3, [r7, #4]
   254e2:	2b00      	cmp	r3, #0
   254e4:	d105      	bne.n	254f2 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   254e6:	2314      	movs	r3, #20
   254e8:	18fb      	adds	r3, r7, r3
   254ea:	2201      	movs	r2, #1
   254ec:	4252      	negs	r2, r2
   254ee:	601a      	str	r2, [r3, #0]
   254f0:	e003      	b.n	254fa <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   254f2:	2314      	movs	r3, #20
   254f4:	18fb      	adds	r3, r7, r3
   254f6:	687a      	ldr	r2, [r7, #4]
   254f8:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   254fa:	2314      	movs	r3, #20
   254fc:	18fb      	adds	r3, r7, r3
   254fe:	220f      	movs	r2, #15
   25500:	18ba      	adds	r2, r7, r2
   25502:	7812      	ldrb	r2, [r2, #0]
   25504:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25506:	230f      	movs	r3, #15
   25508:	18fb      	adds	r3, r7, r3
   2550a:	781b      	ldrb	r3, [r3, #0]
   2550c:	b25b      	sxtb	r3, r3
   2550e:	4a18      	ldr	r2, [pc, #96]	; (25570 <recv+0x178>)
   25510:	011b      	lsls	r3, r3, #4
   25512:	18d3      	adds	r3, r2, r3
   25514:	3306      	adds	r3, #6
   25516:	881b      	ldrh	r3, [r3, #0]
   25518:	b29a      	uxth	r2, r3
   2551a:	2314      	movs	r3, #20
   2551c:	18fb      	adds	r3, r7, r3
   2551e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25520:	2314      	movs	r3, #20
   25522:	18fa      	adds	r2, r7, r3
   25524:	231d      	movs	r3, #29
   25526:	18fb      	adds	r3, r7, r3
   25528:	7819      	ldrb	r1, [r3, #0]
   2552a:	2300      	movs	r3, #0
   2552c:	9302      	str	r3, [sp, #8]
   2552e:	2300      	movs	r3, #0
   25530:	9301      	str	r3, [sp, #4]
   25532:	2300      	movs	r3, #0
   25534:	9300      	str	r3, [sp, #0]
   25536:	2308      	movs	r3, #8
   25538:	2002      	movs	r0, #2
   2553a:	4c0e      	ldr	r4, [pc, #56]	; (25574 <recv+0x17c>)
   2553c:	47a0      	blx	r4
   2553e:	0003      	movs	r3, r0
   25540:	001a      	movs	r2, r3
   25542:	231e      	movs	r3, #30
   25544:	18fb      	adds	r3, r7, r3
   25546:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   25548:	231e      	movs	r3, #30
   2554a:	18fb      	adds	r3, r7, r3
   2554c:	2200      	movs	r2, #0
   2554e:	5e9b      	ldrsh	r3, [r3, r2]
   25550:	2b00      	cmp	r3, #0
   25552:	d004      	beq.n	2555e <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25554:	231e      	movs	r3, #30
   25556:	18fb      	adds	r3, r7, r3
   25558:	220e      	movs	r2, #14
   2555a:	4252      	negs	r2, r2
   2555c:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   2555e:	231e      	movs	r3, #30
   25560:	18fb      	adds	r3, r7, r3
   25562:	2200      	movs	r2, #0
   25564:	5e9b      	ldrsh	r3, [r3, r2]
}
   25566:	0018      	movs	r0, r3
   25568:	46bd      	mov	sp, r7
   2556a:	b009      	add	sp, #36	; 0x24
   2556c:	bd90      	pop	{r4, r7, pc}
   2556e:	46c0      	nop			; (mov r8, r8)
   25570:	200059bc 	.word	0x200059bc
   25574:	0002083d 	.word	0x0002083d

00025578 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   25578:	b5b0      	push	{r4, r5, r7, lr}
   2557a:	b088      	sub	sp, #32
   2557c:	af04      	add	r7, sp, #16
   2557e:	0002      	movs	r2, r0
   25580:	1dfb      	adds	r3, r7, #7
   25582:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25584:	230f      	movs	r3, #15
   25586:	18fb      	adds	r3, r7, r3
   25588:	22fa      	movs	r2, #250	; 0xfa
   2558a:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   2558c:	4b43      	ldr	r3, [pc, #268]	; (2569c <close+0x124>)
   2558e:	0018      	movs	r0, r3
   25590:	4b43      	ldr	r3, [pc, #268]	; (256a0 <close+0x128>)
   25592:	4798      	blx	r3
   25594:	1dfb      	adds	r3, r7, #7
   25596:	2200      	movs	r2, #0
   25598:	569a      	ldrsb	r2, [r3, r2]
   2559a:	4b42      	ldr	r3, [pc, #264]	; (256a4 <close+0x12c>)
   2559c:	0011      	movs	r1, r2
   2559e:	0018      	movs	r0, r3
   255a0:	4b3f      	ldr	r3, [pc, #252]	; (256a0 <close+0x128>)
   255a2:	4798      	blx	r3
   255a4:	4b40      	ldr	r3, [pc, #256]	; (256a8 <close+0x130>)
   255a6:	0018      	movs	r0, r3
   255a8:	4b3d      	ldr	r3, [pc, #244]	; (256a0 <close+0x128>)
   255aa:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   255ac:	1dfb      	adds	r3, r7, #7
   255ae:	781b      	ldrb	r3, [r3, #0]
   255b0:	2b7f      	cmp	r3, #127	; 0x7f
   255b2:	d86a      	bhi.n	2568a <close+0x112>
   255b4:	1dfb      	adds	r3, r7, #7
   255b6:	781b      	ldrb	r3, [r3, #0]
   255b8:	b25b      	sxtb	r3, r3
   255ba:	4a3c      	ldr	r2, [pc, #240]	; (256ac <close+0x134>)
   255bc:	011b      	lsls	r3, r3, #4
   255be:	18d3      	adds	r3, r2, r3
   255c0:	330a      	adds	r3, #10
   255c2:	781b      	ldrb	r3, [r3, #0]
   255c4:	b2db      	uxtb	r3, r3
   255c6:	2b01      	cmp	r3, #1
   255c8:	d15f      	bne.n	2568a <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   255ca:	230e      	movs	r3, #14
   255cc:	18fb      	adds	r3, r7, r3
   255ce:	2249      	movs	r2, #73	; 0x49
   255d0:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   255d2:	2308      	movs	r3, #8
   255d4:	18fb      	adds	r3, r7, r3
   255d6:	1dfa      	adds	r2, r7, #7
   255d8:	7812      	ldrb	r2, [r2, #0]
   255da:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   255dc:	1dfb      	adds	r3, r7, #7
   255de:	781b      	ldrb	r3, [r3, #0]
   255e0:	b25b      	sxtb	r3, r3
   255e2:	4a32      	ldr	r2, [pc, #200]	; (256ac <close+0x134>)
   255e4:	011b      	lsls	r3, r3, #4
   255e6:	18d3      	adds	r3, r2, r3
   255e8:	3306      	adds	r3, #6
   255ea:	881b      	ldrh	r3, [r3, #0]
   255ec:	b29a      	uxth	r2, r3
   255ee:	2308      	movs	r3, #8
   255f0:	18fb      	adds	r3, r7, r3
   255f2:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   255f4:	1dfb      	adds	r3, r7, #7
   255f6:	781b      	ldrb	r3, [r3, #0]
   255f8:	b25b      	sxtb	r3, r3
   255fa:	4a2c      	ldr	r2, [pc, #176]	; (256ac <close+0x134>)
   255fc:	011b      	lsls	r3, r3, #4
   255fe:	18d3      	adds	r3, r2, r3
   25600:	330a      	adds	r3, #10
   25602:	2200      	movs	r2, #0
   25604:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25606:	1dfb      	adds	r3, r7, #7
   25608:	781b      	ldrb	r3, [r3, #0]
   2560a:	b25b      	sxtb	r3, r3
   2560c:	4a27      	ldr	r2, [pc, #156]	; (256ac <close+0x134>)
   2560e:	011b      	lsls	r3, r3, #4
   25610:	18d3      	adds	r3, r2, r3
   25612:	3306      	adds	r3, #6
   25614:	2200      	movs	r2, #0
   25616:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25618:	1dfb      	adds	r3, r7, #7
   2561a:	781b      	ldrb	r3, [r3, #0]
   2561c:	b25b      	sxtb	r3, r3
   2561e:	4a23      	ldr	r2, [pc, #140]	; (256ac <close+0x134>)
   25620:	011b      	lsls	r3, r3, #4
   25622:	18d3      	adds	r3, r2, r3
   25624:	330b      	adds	r3, #11
   25626:	781b      	ldrb	r3, [r3, #0]
   25628:	b2db      	uxtb	r3, r3
   2562a:	001a      	movs	r2, r3
   2562c:	2301      	movs	r3, #1
   2562e:	4013      	ands	r3, r2
   25630:	d003      	beq.n	2563a <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25632:	230e      	movs	r3, #14
   25634:	18fb      	adds	r3, r7, r3
   25636:	224e      	movs	r2, #78	; 0x4e
   25638:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2563a:	230f      	movs	r3, #15
   2563c:	18fc      	adds	r4, r7, r3
   2563e:	2308      	movs	r3, #8
   25640:	18fa      	adds	r2, r7, r3
   25642:	230e      	movs	r3, #14
   25644:	18fb      	adds	r3, r7, r3
   25646:	7819      	ldrb	r1, [r3, #0]
   25648:	2300      	movs	r3, #0
   2564a:	9302      	str	r3, [sp, #8]
   2564c:	2300      	movs	r3, #0
   2564e:	9301      	str	r3, [sp, #4]
   25650:	2300      	movs	r3, #0
   25652:	9300      	str	r3, [sp, #0]
   25654:	2304      	movs	r3, #4
   25656:	2002      	movs	r0, #2
   25658:	4d15      	ldr	r5, [pc, #84]	; (256b0 <close+0x138>)
   2565a:	47a8      	blx	r5
   2565c:	0003      	movs	r3, r0
   2565e:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25660:	230f      	movs	r3, #15
   25662:	18fb      	adds	r3, r7, r3
   25664:	781b      	ldrb	r3, [r3, #0]
   25666:	b25b      	sxtb	r3, r3
   25668:	2b00      	cmp	r3, #0
   2566a:	d003      	beq.n	25674 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   2566c:	230f      	movs	r3, #15
   2566e:	18fb      	adds	r3, r7, r3
   25670:	22f7      	movs	r2, #247	; 0xf7
   25672:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   25674:	1dfb      	adds	r3, r7, #7
   25676:	781b      	ldrb	r3, [r3, #0]
   25678:	b25b      	sxtb	r3, r3
   2567a:	011a      	lsls	r2, r3, #4
   2567c:	4b0b      	ldr	r3, [pc, #44]	; (256ac <close+0x134>)
   2567e:	18d3      	adds	r3, r2, r3
   25680:	2210      	movs	r2, #16
   25682:	2100      	movs	r1, #0
   25684:	0018      	movs	r0, r3
   25686:	4b0b      	ldr	r3, [pc, #44]	; (256b4 <close+0x13c>)
   25688:	4798      	blx	r3
	}
	return s8Ret;
   2568a:	230f      	movs	r3, #15
   2568c:	18fb      	adds	r3, r7, r3
   2568e:	781b      	ldrb	r3, [r3, #0]
   25690:	b25b      	sxtb	r3, r3
}
   25692:	0018      	movs	r0, r3
   25694:	46bd      	mov	sp, r7
   25696:	b004      	add	sp, #16
   25698:	bdb0      	pop	{r4, r5, r7, pc}
   2569a:	46c0      	nop			; (mov r8, r8)
   2569c:	00038858 	.word	0x00038858
   256a0:	0001d8a9 	.word	0x0001d8a9
   256a4:	00038898 	.word	0x00038898
   256a8:	00038878 	.word	0x00038878
   256ac:	200059bc 	.word	0x200059bc
   256b0:	0002083d 	.word	0x0002083d
   256b4:	000205dd 	.word	0x000205dd

000256b8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   256b8:	b580      	push	{r7, lr}
   256ba:	b086      	sub	sp, #24
   256bc:	af00      	add	r7, sp, #0
   256be:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   256c0:	2300      	movs	r3, #0
   256c2:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   256c4:	2317      	movs	r3, #23
   256c6:	18fb      	adds	r3, r7, r3
   256c8:	2200      	movs	r2, #0
   256ca:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   256cc:	2316      	movs	r3, #22
   256ce:	18fb      	adds	r3, r7, r3
   256d0:	2200      	movs	r2, #0
   256d2:	701a      	strb	r2, [r3, #0]
   256d4:	e060      	b.n	25798 <nmi_inet_addr+0xe0>
	{
		j = 0;
   256d6:	2315      	movs	r3, #21
   256d8:	18fb      	adds	r3, r7, r3
   256da:	2200      	movs	r2, #0
   256dc:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   256de:	2314      	movs	r3, #20
   256e0:	18fb      	adds	r3, r7, r3
   256e2:	687a      	ldr	r2, [r7, #4]
   256e4:	7812      	ldrb	r2, [r2, #0]
   256e6:	701a      	strb	r2, [r3, #0]
			++j;
   256e8:	2315      	movs	r3, #21
   256ea:	18fb      	adds	r3, r7, r3
   256ec:	2215      	movs	r2, #21
   256ee:	18ba      	adds	r2, r7, r2
   256f0:	7812      	ldrb	r2, [r2, #0]
   256f2:	3201      	adds	r2, #1
   256f4:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   256f6:	2315      	movs	r3, #21
   256f8:	18fb      	adds	r3, r7, r3
   256fa:	781b      	ldrb	r3, [r3, #0]
   256fc:	2b04      	cmp	r3, #4
   256fe:	d901      	bls.n	25704 <nmi_inet_addr+0x4c>
			{
				return 0;
   25700:	2300      	movs	r3, #0
   25702:	e057      	b.n	257b4 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25704:	2314      	movs	r3, #20
   25706:	18fb      	adds	r3, r7, r3
   25708:	781b      	ldrb	r3, [r3, #0]
   2570a:	2b2e      	cmp	r3, #46	; 0x2e
   2570c:	d004      	beq.n	25718 <nmi_inet_addr+0x60>
   2570e:	2314      	movs	r3, #20
   25710:	18fb      	adds	r3, r7, r3
   25712:	781b      	ldrb	r3, [r3, #0]
   25714:	2b00      	cmp	r3, #0
   25716:	d10d      	bne.n	25734 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25718:	2316      	movs	r3, #22
   2571a:	18fb      	adds	r3, r7, r3
   2571c:	781b      	ldrb	r3, [r3, #0]
   2571e:	220c      	movs	r2, #12
   25720:	18ba      	adds	r2, r7, r2
   25722:	2117      	movs	r1, #23
   25724:	1879      	adds	r1, r7, r1
   25726:	7809      	ldrb	r1, [r1, #0]
   25728:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2572a:	2317      	movs	r3, #23
   2572c:	18fb      	adds	r3, r7, r3
   2572e:	2200      	movs	r2, #0
   25730:	701a      	strb	r2, [r3, #0]
   25732:	e01d      	b.n	25770 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25734:	2314      	movs	r3, #20
   25736:	18fb      	adds	r3, r7, r3
   25738:	781b      	ldrb	r3, [r3, #0]
   2573a:	2b2f      	cmp	r3, #47	; 0x2f
   2573c:	d916      	bls.n	2576c <nmi_inet_addr+0xb4>
   2573e:	2314      	movs	r3, #20
   25740:	18fb      	adds	r3, r7, r3
   25742:	781b      	ldrb	r3, [r3, #0]
   25744:	2b39      	cmp	r3, #57	; 0x39
   25746:	d811      	bhi.n	2576c <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25748:	2317      	movs	r3, #23
   2574a:	18fb      	adds	r3, r7, r3
   2574c:	781b      	ldrb	r3, [r3, #0]
   2574e:	1c1a      	adds	r2, r3, #0
   25750:	0092      	lsls	r2, r2, #2
   25752:	18d3      	adds	r3, r2, r3
   25754:	18db      	adds	r3, r3, r3
   25756:	b2da      	uxtb	r2, r3
   25758:	2314      	movs	r3, #20
   2575a:	18fb      	adds	r3, r7, r3
   2575c:	781b      	ldrb	r3, [r3, #0]
   2575e:	18d3      	adds	r3, r2, r3
   25760:	b2da      	uxtb	r2, r3
   25762:	2317      	movs	r3, #23
   25764:	18fb      	adds	r3, r7, r3
   25766:	3a30      	subs	r2, #48	; 0x30
   25768:	701a      	strb	r2, [r3, #0]
   2576a:	e001      	b.n	25770 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   2576c:	2300      	movs	r3, #0
   2576e:	e021      	b.n	257b4 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   25770:	687b      	ldr	r3, [r7, #4]
   25772:	3301      	adds	r3, #1
   25774:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   25776:	2314      	movs	r3, #20
   25778:	18fb      	adds	r3, r7, r3
   2577a:	781b      	ldrb	r3, [r3, #0]
   2577c:	2b2e      	cmp	r3, #46	; 0x2e
   2577e:	d004      	beq.n	2578a <nmi_inet_addr+0xd2>
   25780:	2314      	movs	r3, #20
   25782:	18fb      	adds	r3, r7, r3
   25784:	781b      	ldrb	r3, [r3, #0]
   25786:	2b00      	cmp	r3, #0
   25788:	d1a9      	bne.n	256de <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   2578a:	2316      	movs	r3, #22
   2578c:	18fb      	adds	r3, r7, r3
   2578e:	2216      	movs	r2, #22
   25790:	18ba      	adds	r2, r7, r2
   25792:	7812      	ldrb	r2, [r2, #0]
   25794:	3201      	adds	r2, #1
   25796:	701a      	strb	r2, [r3, #0]
   25798:	2316      	movs	r3, #22
   2579a:	18fb      	adds	r3, r7, r3
   2579c:	781b      	ldrb	r3, [r3, #0]
   2579e:	2b03      	cmp	r3, #3
   257a0:	d999      	bls.n	256d6 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   257a2:	230c      	movs	r3, #12
   257a4:	18f9      	adds	r1, r7, r3
   257a6:	2310      	movs	r3, #16
   257a8:	18fb      	adds	r3, r7, r3
   257aa:	2204      	movs	r2, #4
   257ac:	0018      	movs	r0, r3
   257ae:	4b03      	ldr	r3, [pc, #12]	; (257bc <nmi_inet_addr+0x104>)
   257b0:	4798      	blx	r3
	return u32IP;
   257b2:	693b      	ldr	r3, [r7, #16]
}
   257b4:	0018      	movs	r0, r3
   257b6:	46bd      	mov	sp, r7
   257b8:	b006      	add	sp, #24
   257ba:	bd80      	pop	{r7, pc}
   257bc:	000205a1 	.word	0x000205a1

000257c0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   257c0:	b5b0      	push	{r4, r5, r7, lr}
   257c2:	b088      	sub	sp, #32
   257c4:	af04      	add	r7, sp, #16
   257c6:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   257c8:	230f      	movs	r3, #15
   257ca:	18fb      	adds	r3, r7, r3
   257cc:	22fa      	movs	r2, #250	; 0xfa
   257ce:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   257d0:	687b      	ldr	r3, [r7, #4]
   257d2:	0018      	movs	r0, r3
   257d4:	4b14      	ldr	r3, [pc, #80]	; (25828 <gethostbyname+0x68>)
   257d6:	4798      	blx	r3
   257d8:	0003      	movs	r3, r0
   257da:	001a      	movs	r2, r3
   257dc:	230e      	movs	r3, #14
   257de:	18fb      	adds	r3, r7, r3
   257e0:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   257e2:	230e      	movs	r3, #14
   257e4:	18fb      	adds	r3, r7, r3
   257e6:	781b      	ldrb	r3, [r3, #0]
   257e8:	2b40      	cmp	r3, #64	; 0x40
   257ea:	d815      	bhi.n	25818 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   257ec:	230e      	movs	r3, #14
   257ee:	18fb      	adds	r3, r7, r3
   257f0:	781b      	ldrb	r3, [r3, #0]
   257f2:	b29b      	uxth	r3, r3
   257f4:	3301      	adds	r3, #1
   257f6:	b299      	uxth	r1, r3
   257f8:	230f      	movs	r3, #15
   257fa:	18fc      	adds	r4, r7, r3
   257fc:	687a      	ldr	r2, [r7, #4]
   257fe:	2300      	movs	r3, #0
   25800:	9302      	str	r3, [sp, #8]
   25802:	2300      	movs	r3, #0
   25804:	9301      	str	r3, [sp, #4]
   25806:	2300      	movs	r3, #0
   25808:	9300      	str	r3, [sp, #0]
   2580a:	000b      	movs	r3, r1
   2580c:	214a      	movs	r1, #74	; 0x4a
   2580e:	2002      	movs	r0, #2
   25810:	4d06      	ldr	r5, [pc, #24]	; (2582c <gethostbyname+0x6c>)
   25812:	47a8      	blx	r5
   25814:	0003      	movs	r3, r0
   25816:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25818:	230f      	movs	r3, #15
   2581a:	18fb      	adds	r3, r7, r3
   2581c:	781b      	ldrb	r3, [r3, #0]
   2581e:	b25b      	sxtb	r3, r3
}
   25820:	0018      	movs	r0, r3
   25822:	46bd      	mov	sp, r7
   25824:	b004      	add	sp, #16
   25826:	bdb0      	pop	{r4, r5, r7, pc}
   25828:	0002061b 	.word	0x0002061b
   2582c:	0002083d 	.word	0x0002083d

00025830 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25830:	b580      	push	{r7, lr}
   25832:	b082      	sub	sp, #8
   25834:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25836:	003b      	movs	r3, r7
   25838:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   2583a:	687b      	ldr	r3, [r7, #4]
   2583c:	22b9      	movs	r2, #185	; 0xb9
   2583e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25840:	4b13      	ldr	r3, [pc, #76]	; (25890 <spi_flash_enter_low_power_mode+0x60>)
   25842:	2100      	movs	r1, #0
   25844:	0018      	movs	r0, r3
   25846:	4b13      	ldr	r3, [pc, #76]	; (25894 <spi_flash_enter_low_power_mode+0x64>)
   25848:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2584a:	687b      	ldr	r3, [r7, #4]
   2584c:	781b      	ldrb	r3, [r3, #0]
   2584e:	001a      	movs	r2, r3
   25850:	4b11      	ldr	r3, [pc, #68]	; (25898 <spi_flash_enter_low_power_mode+0x68>)
   25852:	0011      	movs	r1, r2
   25854:	0018      	movs	r0, r3
   25856:	4b0f      	ldr	r3, [pc, #60]	; (25894 <spi_flash_enter_low_power_mode+0x64>)
   25858:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2585a:	4b10      	ldr	r3, [pc, #64]	; (2589c <spi_flash_enter_low_power_mode+0x6c>)
   2585c:	2101      	movs	r1, #1
   2585e:	0018      	movs	r0, r3
   25860:	4b0c      	ldr	r3, [pc, #48]	; (25894 <spi_flash_enter_low_power_mode+0x64>)
   25862:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25864:	4b0e      	ldr	r3, [pc, #56]	; (258a0 <spi_flash_enter_low_power_mode+0x70>)
   25866:	2100      	movs	r1, #0
   25868:	0018      	movs	r0, r3
   2586a:	4b0a      	ldr	r3, [pc, #40]	; (25894 <spi_flash_enter_low_power_mode+0x64>)
   2586c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   2586e:	4b0d      	ldr	r3, [pc, #52]	; (258a4 <spi_flash_enter_low_power_mode+0x74>)
   25870:	2181      	movs	r1, #129	; 0x81
   25872:	0018      	movs	r0, r3
   25874:	4b07      	ldr	r3, [pc, #28]	; (25894 <spi_flash_enter_low_power_mode+0x64>)
   25876:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25878:	46c0      	nop			; (mov r8, r8)
   2587a:	4b0b      	ldr	r3, [pc, #44]	; (258a8 <spi_flash_enter_low_power_mode+0x78>)
   2587c:	0018      	movs	r0, r3
   2587e:	4b0b      	ldr	r3, [pc, #44]	; (258ac <spi_flash_enter_low_power_mode+0x7c>)
   25880:	4798      	blx	r3
   25882:	0003      	movs	r3, r0
   25884:	2b01      	cmp	r3, #1
   25886:	d1f8      	bne.n	2587a <spi_flash_enter_low_power_mode+0x4a>
}
   25888:	46c0      	nop			; (mov r8, r8)
   2588a:	46bd      	mov	sp, r7
   2588c:	b002      	add	sp, #8
   2588e:	bd80      	pop	{r7, pc}
   25890:	00010208 	.word	0x00010208
   25894:	00022691 	.word	0x00022691
   25898:	0001020c 	.word	0x0001020c
   2589c:	00010214 	.word	0x00010214
   258a0:	0001021c 	.word	0x0001021c
   258a4:	00010204 	.word	0x00010204
   258a8:	00010218 	.word	0x00010218
   258ac:	0002264d 	.word	0x0002264d

000258b0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   258b0:	b580      	push	{r7, lr}
   258b2:	b082      	sub	sp, #8
   258b4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   258b6:	003b      	movs	r3, r7
   258b8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   258ba:	687b      	ldr	r3, [r7, #4]
   258bc:	22ab      	movs	r2, #171	; 0xab
   258be:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   258c0:	4b13      	ldr	r3, [pc, #76]	; (25910 <spi_flash_leave_low_power_mode+0x60>)
   258c2:	2100      	movs	r1, #0
   258c4:	0018      	movs	r0, r3
   258c6:	4b13      	ldr	r3, [pc, #76]	; (25914 <spi_flash_leave_low_power_mode+0x64>)
   258c8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   258ca:	687b      	ldr	r3, [r7, #4]
   258cc:	781b      	ldrb	r3, [r3, #0]
   258ce:	001a      	movs	r2, r3
   258d0:	4b11      	ldr	r3, [pc, #68]	; (25918 <spi_flash_leave_low_power_mode+0x68>)
   258d2:	0011      	movs	r1, r2
   258d4:	0018      	movs	r0, r3
   258d6:	4b0f      	ldr	r3, [pc, #60]	; (25914 <spi_flash_leave_low_power_mode+0x64>)
   258d8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   258da:	4b10      	ldr	r3, [pc, #64]	; (2591c <spi_flash_leave_low_power_mode+0x6c>)
   258dc:	2101      	movs	r1, #1
   258de:	0018      	movs	r0, r3
   258e0:	4b0c      	ldr	r3, [pc, #48]	; (25914 <spi_flash_leave_low_power_mode+0x64>)
   258e2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   258e4:	4b0e      	ldr	r3, [pc, #56]	; (25920 <spi_flash_leave_low_power_mode+0x70>)
   258e6:	2100      	movs	r1, #0
   258e8:	0018      	movs	r0, r3
   258ea:	4b0a      	ldr	r3, [pc, #40]	; (25914 <spi_flash_leave_low_power_mode+0x64>)
   258ec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   258ee:	4b0d      	ldr	r3, [pc, #52]	; (25924 <spi_flash_leave_low_power_mode+0x74>)
   258f0:	2181      	movs	r1, #129	; 0x81
   258f2:	0018      	movs	r0, r3
   258f4:	4b07      	ldr	r3, [pc, #28]	; (25914 <spi_flash_leave_low_power_mode+0x64>)
   258f6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   258f8:	46c0      	nop			; (mov r8, r8)
   258fa:	4b0b      	ldr	r3, [pc, #44]	; (25928 <spi_flash_leave_low_power_mode+0x78>)
   258fc:	0018      	movs	r0, r3
   258fe:	4b0b      	ldr	r3, [pc, #44]	; (2592c <spi_flash_leave_low_power_mode+0x7c>)
   25900:	4798      	blx	r3
   25902:	0003      	movs	r3, r0
   25904:	2b01      	cmp	r3, #1
   25906:	d1f8      	bne.n	258fa <spi_flash_leave_low_power_mode+0x4a>
}
   25908:	46c0      	nop			; (mov r8, r8)
   2590a:	46bd      	mov	sp, r7
   2590c:	b002      	add	sp, #8
   2590e:	bd80      	pop	{r7, pc}
   25910:	00010208 	.word	0x00010208
   25914:	00022691 	.word	0x00022691
   25918:	0001020c 	.word	0x0001020c
   2591c:	00010214 	.word	0x00010214
   25920:	0001021c 	.word	0x0001021c
   25924:	00010204 	.word	0x00010204
   25928:	00010218 	.word	0x00010218
   2592c:	0002264d 	.word	0x0002264d

00025930 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25930:	b590      	push	{r4, r7, lr}
   25932:	b085      	sub	sp, #20
   25934:	af00      	add	r7, sp, #0
   25936:	0002      	movs	r2, r0
   25938:	1dfb      	adds	r3, r7, #7
   2593a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   2593c:	230f      	movs	r3, #15
   2593e:	18fb      	adds	r3, r7, r3
   25940:	2200      	movs	r2, #0
   25942:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25944:	4b24      	ldr	r3, [pc, #144]	; (259d8 <spi_flash_enable+0xa8>)
   25946:	4798      	blx	r3
   25948:	0003      	movs	r3, r0
   2594a:	051b      	lsls	r3, r3, #20
   2594c:	0d1b      	lsrs	r3, r3, #20
   2594e:	4a23      	ldr	r2, [pc, #140]	; (259dc <spi_flash_enable+0xac>)
   25950:	4293      	cmp	r3, r2
   25952:	d938      	bls.n	259c6 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25954:	230f      	movs	r3, #15
   25956:	18fc      	adds	r4, r7, r3
   25958:	2308      	movs	r3, #8
   2595a:	18fb      	adds	r3, r7, r3
   2595c:	4a20      	ldr	r2, [pc, #128]	; (259e0 <spi_flash_enable+0xb0>)
   2595e:	0019      	movs	r1, r3
   25960:	0010      	movs	r0, r2
   25962:	4b20      	ldr	r3, [pc, #128]	; (259e4 <spi_flash_enable+0xb4>)
   25964:	4798      	blx	r3
   25966:	0003      	movs	r3, r0
   25968:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2596a:	230f      	movs	r3, #15
   2596c:	18fb      	adds	r3, r7, r3
   2596e:	781b      	ldrb	r3, [r3, #0]
   25970:	b25b      	sxtb	r3, r3
   25972:	2b00      	cmp	r3, #0
   25974:	d126      	bne.n	259c4 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   25976:	68bb      	ldr	r3, [r7, #8]
   25978:	4a1b      	ldr	r2, [pc, #108]	; (259e8 <spi_flash_enable+0xb8>)
   2597a:	4013      	ands	r3, r2
   2597c:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   2597e:	68bb      	ldr	r3, [r7, #8]
   25980:	4a1a      	ldr	r2, [pc, #104]	; (259ec <spi_flash_enable+0xbc>)
   25982:	4313      	orrs	r3, r2
   25984:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25986:	68bb      	ldr	r3, [r7, #8]
   25988:	4a15      	ldr	r2, [pc, #84]	; (259e0 <spi_flash_enable+0xb0>)
   2598a:	0019      	movs	r1, r3
   2598c:	0010      	movs	r0, r2
   2598e:	4b18      	ldr	r3, [pc, #96]	; (259f0 <spi_flash_enable+0xc0>)
   25990:	4798      	blx	r3
		if(enable) {
   25992:	1dfb      	adds	r3, r7, #7
   25994:	781b      	ldrb	r3, [r3, #0]
   25996:	2b00      	cmp	r3, #0
   25998:	d002      	beq.n	259a0 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2599a:	4b16      	ldr	r3, [pc, #88]	; (259f4 <spi_flash_enable+0xc4>)
   2599c:	4798      	blx	r3
   2599e:	e001      	b.n	259a4 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   259a0:	4b15      	ldr	r3, [pc, #84]	; (259f8 <spi_flash_enable+0xc8>)
   259a2:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   259a4:	68bb      	ldr	r3, [r7, #8]
   259a6:	4a10      	ldr	r2, [pc, #64]	; (259e8 <spi_flash_enable+0xb8>)
   259a8:	4013      	ands	r3, r2
   259aa:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   259ac:	68bb      	ldr	r3, [r7, #8]
   259ae:	2280      	movs	r2, #128	; 0x80
   259b0:	0252      	lsls	r2, r2, #9
   259b2:	4313      	orrs	r3, r2
   259b4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   259b6:	68bb      	ldr	r3, [r7, #8]
   259b8:	4a09      	ldr	r2, [pc, #36]	; (259e0 <spi_flash_enable+0xb0>)
   259ba:	0019      	movs	r1, r3
   259bc:	0010      	movs	r0, r2
   259be:	4b0c      	ldr	r3, [pc, #48]	; (259f0 <spi_flash_enable+0xc0>)
   259c0:	4798      	blx	r3
   259c2:	e000      	b.n	259c6 <spi_flash_enable+0x96>
			goto ERR1;
   259c4:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   259c6:	230f      	movs	r3, #15
   259c8:	18fb      	adds	r3, r7, r3
   259ca:	781b      	ldrb	r3, [r3, #0]
   259cc:	b25b      	sxtb	r3, r3
}
   259ce:	0018      	movs	r0, r3
   259d0:	46bd      	mov	sp, r7
   259d2:	b005      	add	sp, #20
   259d4:	bd90      	pop	{r4, r7, pc}
   259d6:	46c0      	nop			; (mov r8, r8)
   259d8:	00021f6d 	.word	0x00021f6d
   259dc:	0000039f 	.word	0x0000039f
   259e0:	00001410 	.word	0x00001410
   259e4:	0002266d 	.word	0x0002266d
   259e8:	f8888fff 	.word	0xf8888fff
   259ec:	01111000 	.word	0x01111000
   259f0:	00022691 	.word	0x00022691
   259f4:	000258b1 	.word	0x000258b1
   259f8:	00025831 	.word	0x00025831

000259fc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   259fc:	b580      	push	{r7, lr}
   259fe:	b084      	sub	sp, #16
   25a00:	af00      	add	r7, sp, #0
   25a02:	0002      	movs	r2, r0
   25a04:	1dfb      	adds	r3, r7, #7
   25a06:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25a08:	1dfb      	adds	r3, r7, #7
   25a0a:	781b      	ldrb	r3, [r3, #0]
   25a0c:	2b00      	cmp	r3, #0
   25a0e:	d108      	bne.n	25a22 <mem_test_unit_ready+0x26>
   25a10:	1dfb      	adds	r3, r7, #7
   25a12:	781a      	ldrb	r2, [r3, #0]
   25a14:	4b08      	ldr	r3, [pc, #32]	; (25a38 <mem_test_unit_ready+0x3c>)
   25a16:	0152      	lsls	r2, r2, #5
   25a18:	58d3      	ldr	r3, [r2, r3]
   25a1a:	4798      	blx	r3
   25a1c:	0003      	movs	r3, r0
   25a1e:	001a      	movs	r2, r3
   25a20:	e000      	b.n	25a24 <mem_test_unit_ready+0x28>
   25a22:	2201      	movs	r2, #1
  status =
   25a24:	230f      	movs	r3, #15
   25a26:	18fb      	adds	r3, r7, r3
   25a28:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25a2a:	230f      	movs	r3, #15
   25a2c:	18fb      	adds	r3, r7, r3
   25a2e:	781b      	ldrb	r3, [r3, #0]
}
   25a30:	0018      	movs	r0, r3
   25a32:	46bd      	mov	sp, r7
   25a34:	b004      	add	sp, #16
   25a36:	bd80      	pop	{r7, pc}
   25a38:	00038924 	.word	0x00038924

00025a3c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25a3c:	b580      	push	{r7, lr}
   25a3e:	b084      	sub	sp, #16
   25a40:	af00      	add	r7, sp, #0
   25a42:	0002      	movs	r2, r0
   25a44:	6039      	str	r1, [r7, #0]
   25a46:	1dfb      	adds	r3, r7, #7
   25a48:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25a4a:	1dfb      	adds	r3, r7, #7
   25a4c:	781b      	ldrb	r3, [r3, #0]
   25a4e:	2b00      	cmp	r3, #0
   25a50:	d10c      	bne.n	25a6c <mem_read_capacity+0x30>
   25a52:	1dfb      	adds	r3, r7, #7
   25a54:	781b      	ldrb	r3, [r3, #0]
   25a56:	4a0b      	ldr	r2, [pc, #44]	; (25a84 <mem_read_capacity+0x48>)
   25a58:	015b      	lsls	r3, r3, #5
   25a5a:	18d3      	adds	r3, r2, r3
   25a5c:	3304      	adds	r3, #4
   25a5e:	681b      	ldr	r3, [r3, #0]
   25a60:	683a      	ldr	r2, [r7, #0]
   25a62:	0010      	movs	r0, r2
   25a64:	4798      	blx	r3
   25a66:	0003      	movs	r3, r0
   25a68:	001a      	movs	r2, r3
   25a6a:	e000      	b.n	25a6e <mem_read_capacity+0x32>
   25a6c:	2201      	movs	r2, #1
  status =
   25a6e:	230f      	movs	r3, #15
   25a70:	18fb      	adds	r3, r7, r3
   25a72:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25a74:	230f      	movs	r3, #15
   25a76:	18fb      	adds	r3, r7, r3
   25a78:	781b      	ldrb	r3, [r3, #0]
}
   25a7a:	0018      	movs	r0, r3
   25a7c:	46bd      	mov	sp, r7
   25a7e:	b004      	add	sp, #16
   25a80:	bd80      	pop	{r7, pc}
   25a82:	46c0      	nop			; (mov r8, r8)
   25a84:	00038924 	.word	0x00038924

00025a88 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25a88:	b580      	push	{r7, lr}
   25a8a:	b084      	sub	sp, #16
   25a8c:	af00      	add	r7, sp, #0
   25a8e:	0002      	movs	r2, r0
   25a90:	1dfb      	adds	r3, r7, #7
   25a92:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25a94:	1dfb      	adds	r3, r7, #7
   25a96:	781b      	ldrb	r3, [r3, #0]
   25a98:	425a      	negs	r2, r3
   25a9a:	4153      	adcs	r3, r2
   25a9c:	b2da      	uxtb	r2, r3
  sector_size =
   25a9e:	230f      	movs	r3, #15
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25aa4:	230f      	movs	r3, #15
   25aa6:	18fb      	adds	r3, r7, r3
   25aa8:	781b      	ldrb	r3, [r3, #0]
}
   25aaa:	0018      	movs	r0, r3
   25aac:	46bd      	mov	sp, r7
   25aae:	b004      	add	sp, #16
   25ab0:	bd80      	pop	{r7, pc}
	...

00025ab4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25ab4:	b580      	push	{r7, lr}
   25ab6:	b084      	sub	sp, #16
   25ab8:	af00      	add	r7, sp, #0
   25aba:	0002      	movs	r2, r0
   25abc:	1dfb      	adds	r3, r7, #7
   25abe:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25ac0:	1dfb      	adds	r3, r7, #7
   25ac2:	781b      	ldrb	r3, [r3, #0]
   25ac4:	2b00      	cmp	r3, #0
   25ac6:	d109      	bne.n	25adc <mem_wr_protect+0x28>
   25ac8:	1dfb      	adds	r3, r7, #7
   25aca:	781b      	ldrb	r3, [r3, #0]
   25acc:	4a0a      	ldr	r2, [pc, #40]	; (25af8 <mem_wr_protect+0x44>)
   25ace:	015b      	lsls	r3, r3, #5
   25ad0:	18d3      	adds	r3, r2, r3
   25ad2:	330c      	adds	r3, #12
   25ad4:	681b      	ldr	r3, [r3, #0]
   25ad6:	4798      	blx	r3
   25ad8:	1e03      	subs	r3, r0, #0
   25ada:	d001      	beq.n	25ae0 <mem_wr_protect+0x2c>
   25adc:	2201      	movs	r2, #1
   25ade:	e000      	b.n	25ae2 <mem_wr_protect+0x2e>
   25ae0:	2200      	movs	r2, #0
  wr_protect =
   25ae2:	230f      	movs	r3, #15
   25ae4:	18fb      	adds	r3, r7, r3
   25ae6:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   25ae8:	230f      	movs	r3, #15
   25aea:	18fb      	adds	r3, r7, r3
   25aec:	781b      	ldrb	r3, [r3, #0]
}
   25aee:	0018      	movs	r0, r3
   25af0:	46bd      	mov	sp, r7
   25af2:	b004      	add	sp, #16
   25af4:	bd80      	pop	{r7, pc}
   25af6:	46c0      	nop			; (mov r8, r8)
   25af8:	00038924 	.word	0x00038924

00025afc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25afc:	b580      	push	{r7, lr}
   25afe:	b086      	sub	sp, #24
   25b00:	af00      	add	r7, sp, #0
   25b02:	60b9      	str	r1, [r7, #8]
   25b04:	607a      	str	r2, [r7, #4]
   25b06:	230f      	movs	r3, #15
   25b08:	18fb      	adds	r3, r7, r3
   25b0a:	1c02      	adds	r2, r0, #0
   25b0c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25b0e:	230f      	movs	r3, #15
   25b10:	18fb      	adds	r3, r7, r3
   25b12:	781b      	ldrb	r3, [r3, #0]
   25b14:	2b00      	cmp	r3, #0
   25b16:	d10e      	bne.n	25b36 <memory_2_ram+0x3a>
   25b18:	230f      	movs	r3, #15
   25b1a:	18fb      	adds	r3, r7, r3
   25b1c:	781b      	ldrb	r3, [r3, #0]
   25b1e:	4a0b      	ldr	r2, [pc, #44]	; (25b4c <memory_2_ram+0x50>)
   25b20:	015b      	lsls	r3, r3, #5
   25b22:	18d3      	adds	r3, r2, r3
   25b24:	3314      	adds	r3, #20
   25b26:	681b      	ldr	r3, [r3, #0]
   25b28:	6879      	ldr	r1, [r7, #4]
   25b2a:	68ba      	ldr	r2, [r7, #8]
   25b2c:	0010      	movs	r0, r2
   25b2e:	4798      	blx	r3
   25b30:	0003      	movs	r3, r0
   25b32:	001a      	movs	r2, r3
   25b34:	e000      	b.n	25b38 <memory_2_ram+0x3c>
   25b36:	2201      	movs	r2, #1
  status =
   25b38:	2317      	movs	r3, #23
   25b3a:	18fb      	adds	r3, r7, r3
   25b3c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25b3e:	2317      	movs	r3, #23
   25b40:	18fb      	adds	r3, r7, r3
   25b42:	781b      	ldrb	r3, [r3, #0]
}
   25b44:	0018      	movs	r0, r3
   25b46:	46bd      	mov	sp, r7
   25b48:	b006      	add	sp, #24
   25b4a:	bd80      	pop	{r7, pc}
   25b4c:	00038924 	.word	0x00038924

00025b50 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25b50:	b580      	push	{r7, lr}
   25b52:	b086      	sub	sp, #24
   25b54:	af00      	add	r7, sp, #0
   25b56:	60b9      	str	r1, [r7, #8]
   25b58:	607a      	str	r2, [r7, #4]
   25b5a:	230f      	movs	r3, #15
   25b5c:	18fb      	adds	r3, r7, r3
   25b5e:	1c02      	adds	r2, r0, #0
   25b60:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25b62:	230f      	movs	r3, #15
   25b64:	18fb      	adds	r3, r7, r3
   25b66:	781b      	ldrb	r3, [r3, #0]
   25b68:	2b00      	cmp	r3, #0
   25b6a:	d10e      	bne.n	25b8a <ram_2_memory+0x3a>
   25b6c:	230f      	movs	r3, #15
   25b6e:	18fb      	adds	r3, r7, r3
   25b70:	781b      	ldrb	r3, [r3, #0]
   25b72:	4a0b      	ldr	r2, [pc, #44]	; (25ba0 <ram_2_memory+0x50>)
   25b74:	015b      	lsls	r3, r3, #5
   25b76:	18d3      	adds	r3, r2, r3
   25b78:	3318      	adds	r3, #24
   25b7a:	681b      	ldr	r3, [r3, #0]
   25b7c:	6879      	ldr	r1, [r7, #4]
   25b7e:	68ba      	ldr	r2, [r7, #8]
   25b80:	0010      	movs	r0, r2
   25b82:	4798      	blx	r3
   25b84:	0003      	movs	r3, r0
   25b86:	001a      	movs	r2, r3
   25b88:	e000      	b.n	25b8c <ram_2_memory+0x3c>
   25b8a:	2201      	movs	r2, #1
  status =
   25b8c:	2317      	movs	r3, #23
   25b8e:	18fb      	adds	r3, r7, r3
   25b90:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25b92:	2317      	movs	r3, #23
   25b94:	18fb      	adds	r3, r7, r3
   25b96:	781b      	ldrb	r3, [r3, #0]
}
   25b98:	0018      	movs	r0, r3
   25b9a:	46bd      	mov	sp, r7
   25b9c:	b006      	add	sp, #24
   25b9e:	bd80      	pop	{r7, pc}
   25ba0:	00038924 	.word	0x00038924

00025ba4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25ba4:	b580      	push	{r7, lr}
   25ba6:	b082      	sub	sp, #8
   25ba8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   25baa:	4b10      	ldr	r3, [pc, #64]	; (25bec <cpu_irq_enter_critical+0x48>)
   25bac:	681b      	ldr	r3, [r3, #0]
   25bae:	2b00      	cmp	r3, #0
   25bb0:	d112      	bne.n	25bd8 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25bb2:	f3ef 8310 	mrs	r3, PRIMASK
   25bb6:	607b      	str	r3, [r7, #4]
  return(result);
   25bb8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   25bba:	2b00      	cmp	r3, #0
   25bbc:	d109      	bne.n	25bd2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   25bbe:	b672      	cpsid	i
   25bc0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25bc4:	4b0a      	ldr	r3, [pc, #40]	; (25bf0 <cpu_irq_enter_critical+0x4c>)
   25bc6:	2200      	movs	r2, #0
   25bc8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   25bca:	4b0a      	ldr	r3, [pc, #40]	; (25bf4 <cpu_irq_enter_critical+0x50>)
   25bcc:	2201      	movs	r2, #1
   25bce:	701a      	strb	r2, [r3, #0]
   25bd0:	e002      	b.n	25bd8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25bd2:	4b08      	ldr	r3, [pc, #32]	; (25bf4 <cpu_irq_enter_critical+0x50>)
   25bd4:	2200      	movs	r2, #0
   25bd6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   25bd8:	4b04      	ldr	r3, [pc, #16]	; (25bec <cpu_irq_enter_critical+0x48>)
   25bda:	681b      	ldr	r3, [r3, #0]
   25bdc:	1c5a      	adds	r2, r3, #1
   25bde:	4b03      	ldr	r3, [pc, #12]	; (25bec <cpu_irq_enter_critical+0x48>)
   25be0:	601a      	str	r2, [r3, #0]
}
   25be2:	46c0      	nop			; (mov r8, r8)
   25be4:	46bd      	mov	sp, r7
   25be6:	b002      	add	sp, #8
   25be8:	bd80      	pop	{r7, pc}
   25bea:	46c0      	nop			; (mov r8, r8)
   25bec:	20004114 	.word	0x20004114
   25bf0:	2000010e 	.word	0x2000010e
   25bf4:	20004118 	.word	0x20004118

00025bf8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   25bf8:	b580      	push	{r7, lr}
   25bfa:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25bfc:	4b0b      	ldr	r3, [pc, #44]	; (25c2c <cpu_irq_leave_critical+0x34>)
   25bfe:	681b      	ldr	r3, [r3, #0]
   25c00:	1e5a      	subs	r2, r3, #1
   25c02:	4b0a      	ldr	r3, [pc, #40]	; (25c2c <cpu_irq_leave_critical+0x34>)
   25c04:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   25c06:	4b09      	ldr	r3, [pc, #36]	; (25c2c <cpu_irq_leave_critical+0x34>)
   25c08:	681b      	ldr	r3, [r3, #0]
   25c0a:	2b00      	cmp	r3, #0
   25c0c:	d10a      	bne.n	25c24 <cpu_irq_leave_critical+0x2c>
   25c0e:	4b08      	ldr	r3, [pc, #32]	; (25c30 <cpu_irq_leave_critical+0x38>)
   25c10:	781b      	ldrb	r3, [r3, #0]
   25c12:	b2db      	uxtb	r3, r3
   25c14:	2b00      	cmp	r3, #0
   25c16:	d005      	beq.n	25c24 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   25c18:	4b06      	ldr	r3, [pc, #24]	; (25c34 <cpu_irq_leave_critical+0x3c>)
   25c1a:	2201      	movs	r2, #1
   25c1c:	701a      	strb	r2, [r3, #0]
   25c1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25c22:	b662      	cpsie	i
	}
}
   25c24:	46c0      	nop			; (mov r8, r8)
   25c26:	46bd      	mov	sp, r7
   25c28:	bd80      	pop	{r7, pc}
   25c2a:	46c0      	nop			; (mov r8, r8)
   25c2c:	20004114 	.word	0x20004114
   25c30:	20004118 	.word	0x20004118
   25c34:	2000010e 	.word	0x2000010e

00025c38 <system_pinmux_get_group_from_gpio_pin>:
{
   25c38:	b580      	push	{r7, lr}
   25c3a:	b084      	sub	sp, #16
   25c3c:	af00      	add	r7, sp, #0
   25c3e:	0002      	movs	r2, r0
   25c40:	1dfb      	adds	r3, r7, #7
   25c42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25c44:	230f      	movs	r3, #15
   25c46:	18fb      	adds	r3, r7, r3
   25c48:	1dfa      	adds	r2, r7, #7
   25c4a:	7812      	ldrb	r2, [r2, #0]
   25c4c:	09d2      	lsrs	r2, r2, #7
   25c4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25c50:	230e      	movs	r3, #14
   25c52:	18fb      	adds	r3, r7, r3
   25c54:	1dfa      	adds	r2, r7, #7
   25c56:	7812      	ldrb	r2, [r2, #0]
   25c58:	0952      	lsrs	r2, r2, #5
   25c5a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25c5c:	4b0d      	ldr	r3, [pc, #52]	; (25c94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25c5e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25c60:	230f      	movs	r3, #15
   25c62:	18fb      	adds	r3, r7, r3
   25c64:	781b      	ldrb	r3, [r3, #0]
   25c66:	2b00      	cmp	r3, #0
   25c68:	d10f      	bne.n	25c8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25c6a:	230f      	movs	r3, #15
   25c6c:	18fb      	adds	r3, r7, r3
   25c6e:	781b      	ldrb	r3, [r3, #0]
   25c70:	009b      	lsls	r3, r3, #2
   25c72:	2210      	movs	r2, #16
   25c74:	4694      	mov	ip, r2
   25c76:	44bc      	add	ip, r7
   25c78:	4463      	add	r3, ip
   25c7a:	3b08      	subs	r3, #8
   25c7c:	681a      	ldr	r2, [r3, #0]
   25c7e:	230e      	movs	r3, #14
   25c80:	18fb      	adds	r3, r7, r3
   25c82:	781b      	ldrb	r3, [r3, #0]
   25c84:	01db      	lsls	r3, r3, #7
   25c86:	18d3      	adds	r3, r2, r3
   25c88:	e000      	b.n	25c8c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25c8a:	2300      	movs	r3, #0
}
   25c8c:	0018      	movs	r0, r3
   25c8e:	46bd      	mov	sp, r7
   25c90:	b004      	add	sp, #16
   25c92:	bd80      	pop	{r7, pc}
   25c94:	41004400 	.word	0x41004400

00025c98 <port_get_group_from_gpio_pin>:
{
   25c98:	b580      	push	{r7, lr}
   25c9a:	b082      	sub	sp, #8
   25c9c:	af00      	add	r7, sp, #0
   25c9e:	0002      	movs	r2, r0
   25ca0:	1dfb      	adds	r3, r7, #7
   25ca2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25ca4:	1dfb      	adds	r3, r7, #7
   25ca6:	781b      	ldrb	r3, [r3, #0]
   25ca8:	0018      	movs	r0, r3
   25caa:	4b03      	ldr	r3, [pc, #12]	; (25cb8 <port_get_group_from_gpio_pin+0x20>)
   25cac:	4798      	blx	r3
   25cae:	0003      	movs	r3, r0
}
   25cb0:	0018      	movs	r0, r3
   25cb2:	46bd      	mov	sp, r7
   25cb4:	b002      	add	sp, #8
   25cb6:	bd80      	pop	{r7, pc}
   25cb8:	00025c39 	.word	0x00025c39

00025cbc <port_get_config_defaults>:
{
   25cbc:	b580      	push	{r7, lr}
   25cbe:	b082      	sub	sp, #8
   25cc0:	af00      	add	r7, sp, #0
   25cc2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   25cc4:	687b      	ldr	r3, [r7, #4]
   25cc6:	2200      	movs	r2, #0
   25cc8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   25cca:	687b      	ldr	r3, [r7, #4]
   25ccc:	2201      	movs	r2, #1
   25cce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25cd0:	687b      	ldr	r3, [r7, #4]
   25cd2:	2200      	movs	r2, #0
   25cd4:	709a      	strb	r2, [r3, #2]
}
   25cd6:	46c0      	nop			; (mov r8, r8)
   25cd8:	46bd      	mov	sp, r7
   25cda:	b002      	add	sp, #8
   25cdc:	bd80      	pop	{r7, pc}
	...

00025ce0 <port_pin_set_output_level>:
{
   25ce0:	b580      	push	{r7, lr}
   25ce2:	b084      	sub	sp, #16
   25ce4:	af00      	add	r7, sp, #0
   25ce6:	0002      	movs	r2, r0
   25ce8:	1dfb      	adds	r3, r7, #7
   25cea:	701a      	strb	r2, [r3, #0]
   25cec:	1dbb      	adds	r3, r7, #6
   25cee:	1c0a      	adds	r2, r1, #0
   25cf0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25cf2:	1dfb      	adds	r3, r7, #7
   25cf4:	781b      	ldrb	r3, [r3, #0]
   25cf6:	0018      	movs	r0, r3
   25cf8:	4b0d      	ldr	r3, [pc, #52]	; (25d30 <port_pin_set_output_level+0x50>)
   25cfa:	4798      	blx	r3
   25cfc:	0003      	movs	r3, r0
   25cfe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25d00:	1dfb      	adds	r3, r7, #7
   25d02:	781b      	ldrb	r3, [r3, #0]
   25d04:	221f      	movs	r2, #31
   25d06:	4013      	ands	r3, r2
   25d08:	2201      	movs	r2, #1
   25d0a:	409a      	lsls	r2, r3
   25d0c:	0013      	movs	r3, r2
   25d0e:	60bb      	str	r3, [r7, #8]
	if (level) {
   25d10:	1dbb      	adds	r3, r7, #6
   25d12:	781b      	ldrb	r3, [r3, #0]
   25d14:	2b00      	cmp	r3, #0
   25d16:	d003      	beq.n	25d20 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25d18:	68fb      	ldr	r3, [r7, #12]
   25d1a:	68ba      	ldr	r2, [r7, #8]
   25d1c:	619a      	str	r2, [r3, #24]
}
   25d1e:	e002      	b.n	25d26 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25d20:	68fb      	ldr	r3, [r7, #12]
   25d22:	68ba      	ldr	r2, [r7, #8]
   25d24:	615a      	str	r2, [r3, #20]
}
   25d26:	46c0      	nop			; (mov r8, r8)
   25d28:	46bd      	mov	sp, r7
   25d2a:	b004      	add	sp, #16
   25d2c:	bd80      	pop	{r7, pc}
   25d2e:	46c0      	nop			; (mov r8, r8)
   25d30:	00025c99 	.word	0x00025c99

00025d34 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25d34:	b580      	push	{r7, lr}
   25d36:	b082      	sub	sp, #8
   25d38:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   25d3a:	1d3b      	adds	r3, r7, #4
   25d3c:	0018      	movs	r0, r3
   25d3e:	4b0e      	ldr	r3, [pc, #56]	; (25d78 <system_board_init+0x44>)
   25d40:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25d42:	1d3b      	adds	r3, r7, #4
   25d44:	2201      	movs	r2, #1
   25d46:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   25d48:	1d3b      	adds	r3, r7, #4
   25d4a:	0019      	movs	r1, r3
   25d4c:	2017      	movs	r0, #23
   25d4e:	4b0b      	ldr	r3, [pc, #44]	; (25d7c <system_board_init+0x48>)
   25d50:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25d52:	2101      	movs	r1, #1
   25d54:	2017      	movs	r0, #23
   25d56:	4b0a      	ldr	r3, [pc, #40]	; (25d80 <system_board_init+0x4c>)
   25d58:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   25d5a:	1d3b      	adds	r3, r7, #4
   25d5c:	2200      	movs	r2, #0
   25d5e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25d60:	1d3b      	adds	r3, r7, #4
   25d62:	2201      	movs	r2, #1
   25d64:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   25d66:	1d3b      	adds	r3, r7, #4
   25d68:	0019      	movs	r1, r3
   25d6a:	2037      	movs	r0, #55	; 0x37
   25d6c:	4b03      	ldr	r3, [pc, #12]	; (25d7c <system_board_init+0x48>)
   25d6e:	4798      	blx	r3
}
   25d70:	46c0      	nop			; (mov r8, r8)
   25d72:	46bd      	mov	sp, r7
   25d74:	b002      	add	sp, #8
   25d76:	bd80      	pop	{r7, pc}
   25d78:	00025cbd 	.word	0x00025cbd
   25d7c:	000263a9 	.word	0x000263a9
   25d80:	00025ce1 	.word	0x00025ce1

00025d84 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   25d84:	b580      	push	{r7, lr}
   25d86:	b084      	sub	sp, #16
   25d88:	af00      	add	r7, sp, #0
   25d8a:	0002      	movs	r2, r0
   25d8c:	1dfb      	adds	r3, r7, #7
   25d8e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25d90:	230f      	movs	r3, #15
   25d92:	18fb      	adds	r3, r7, r3
   25d94:	1dfa      	adds	r2, r7, #7
   25d96:	7812      	ldrb	r2, [r2, #0]
   25d98:	0952      	lsrs	r2, r2, #5
   25d9a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   25d9c:	230f      	movs	r3, #15
   25d9e:	18fb      	adds	r3, r7, r3
   25da0:	781b      	ldrb	r3, [r3, #0]
   25da2:	2b00      	cmp	r3, #0
   25da4:	d10c      	bne.n	25dc0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25da6:	4b09      	ldr	r3, [pc, #36]	; (25dcc <_extint_get_eic_from_channel+0x48>)
   25da8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   25daa:	230f      	movs	r3, #15
   25dac:	18fb      	adds	r3, r7, r3
   25dae:	781b      	ldrb	r3, [r3, #0]
   25db0:	009b      	lsls	r3, r3, #2
   25db2:	2210      	movs	r2, #16
   25db4:	4694      	mov	ip, r2
   25db6:	44bc      	add	ip, r7
   25db8:	4463      	add	r3, ip
   25dba:	3b08      	subs	r3, #8
   25dbc:	681b      	ldr	r3, [r3, #0]
   25dbe:	e000      	b.n	25dc2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   25dc0:	2300      	movs	r3, #0
	}
}
   25dc2:	0018      	movs	r0, r3
   25dc4:	46bd      	mov	sp, r7
   25dc6:	b004      	add	sp, #16
   25dc8:	bd80      	pop	{r7, pc}
   25dca:	46c0      	nop			; (mov r8, r8)
   25dcc:	40001800 	.word	0x40001800

00025dd0 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   25dd0:	b580      	push	{r7, lr}
   25dd2:	b084      	sub	sp, #16
   25dd4:	af00      	add	r7, sp, #0
   25dd6:	0002      	movs	r2, r0
   25dd8:	1dfb      	adds	r3, r7, #7
   25dda:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25ddc:	1dfb      	adds	r3, r7, #7
   25dde:	781b      	ldrb	r3, [r3, #0]
   25de0:	0018      	movs	r0, r3
   25de2:	4b0b      	ldr	r3, [pc, #44]	; (25e10 <extint_chan_is_detected+0x40>)
   25de4:	4798      	blx	r3
   25de6:	0003      	movs	r3, r0
   25de8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25dea:	1dfb      	adds	r3, r7, #7
   25dec:	781b      	ldrb	r3, [r3, #0]
   25dee:	221f      	movs	r2, #31
   25df0:	4013      	ands	r3, r2
   25df2:	2201      	movs	r2, #1
   25df4:	409a      	lsls	r2, r3
   25df6:	0013      	movs	r3, r2
   25df8:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   25dfa:	68fb      	ldr	r3, [r7, #12]
   25dfc:	691b      	ldr	r3, [r3, #16]
   25dfe:	68ba      	ldr	r2, [r7, #8]
   25e00:	4013      	ands	r3, r2
   25e02:	1e5a      	subs	r2, r3, #1
   25e04:	4193      	sbcs	r3, r2
   25e06:	b2db      	uxtb	r3, r3
}
   25e08:	0018      	movs	r0, r3
   25e0a:	46bd      	mov	sp, r7
   25e0c:	b004      	add	sp, #16
   25e0e:	bd80      	pop	{r7, pc}
   25e10:	00025d85 	.word	0x00025d85

00025e14 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   25e14:	b580      	push	{r7, lr}
   25e16:	b084      	sub	sp, #16
   25e18:	af00      	add	r7, sp, #0
   25e1a:	0002      	movs	r2, r0
   25e1c:	1dfb      	adds	r3, r7, #7
   25e1e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25e20:	1dfb      	adds	r3, r7, #7
   25e22:	781b      	ldrb	r3, [r3, #0]
   25e24:	0018      	movs	r0, r3
   25e26:	4b09      	ldr	r3, [pc, #36]	; (25e4c <extint_chan_clear_detected+0x38>)
   25e28:	4798      	blx	r3
   25e2a:	0003      	movs	r3, r0
   25e2c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25e2e:	1dfb      	adds	r3, r7, #7
   25e30:	781b      	ldrb	r3, [r3, #0]
   25e32:	221f      	movs	r2, #31
   25e34:	4013      	ands	r3, r2
   25e36:	2201      	movs	r2, #1
   25e38:	409a      	lsls	r2, r3
   25e3a:	0013      	movs	r3, r2
   25e3c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   25e3e:	68fb      	ldr	r3, [r7, #12]
   25e40:	68ba      	ldr	r2, [r7, #8]
   25e42:	611a      	str	r2, [r3, #16]
}
   25e44:	46c0      	nop			; (mov r8, r8)
   25e46:	46bd      	mov	sp, r7
   25e48:	b004      	add	sp, #16
   25e4a:	bd80      	pop	{r7, pc}
   25e4c:	00025d85 	.word	0x00025d85

00025e50 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25e50:	b580      	push	{r7, lr}
   25e52:	b082      	sub	sp, #8
   25e54:	af00      	add	r7, sp, #0
   25e56:	6078      	str	r0, [r7, #4]
   25e58:	0008      	movs	r0, r1
   25e5a:	0011      	movs	r1, r2
   25e5c:	1cfb      	adds	r3, r7, #3
   25e5e:	1c02      	adds	r2, r0, #0
   25e60:	701a      	strb	r2, [r3, #0]
   25e62:	1cbb      	adds	r3, r7, #2
   25e64:	1c0a      	adds	r2, r1, #0
   25e66:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   25e68:	1cbb      	adds	r3, r7, #2
   25e6a:	781b      	ldrb	r3, [r3, #0]
   25e6c:	2b00      	cmp	r3, #0
   25e6e:	d001      	beq.n	25e74 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   25e70:	2317      	movs	r3, #23
   25e72:	e019      	b.n	25ea8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   25e74:	1cfb      	adds	r3, r7, #3
   25e76:	781a      	ldrb	r2, [r3, #0]
   25e78:	4b0d      	ldr	r3, [pc, #52]	; (25eb0 <extint_register_callback+0x60>)
   25e7a:	0092      	lsls	r2, r2, #2
   25e7c:	58d3      	ldr	r3, [r2, r3]
   25e7e:	2b00      	cmp	r3, #0
   25e80:	d107      	bne.n	25e92 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   25e82:	1cfb      	adds	r3, r7, #3
   25e84:	781a      	ldrb	r2, [r3, #0]
   25e86:	4b0a      	ldr	r3, [pc, #40]	; (25eb0 <extint_register_callback+0x60>)
   25e88:	0092      	lsls	r2, r2, #2
   25e8a:	6879      	ldr	r1, [r7, #4]
   25e8c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   25e8e:	2300      	movs	r3, #0
   25e90:	e00a      	b.n	25ea8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   25e92:	1cfb      	adds	r3, r7, #3
   25e94:	781a      	ldrb	r2, [r3, #0]
   25e96:	4b06      	ldr	r3, [pc, #24]	; (25eb0 <extint_register_callback+0x60>)
   25e98:	0092      	lsls	r2, r2, #2
   25e9a:	58d2      	ldr	r2, [r2, r3]
   25e9c:	687b      	ldr	r3, [r7, #4]
   25e9e:	429a      	cmp	r2, r3
   25ea0:	d101      	bne.n	25ea6 <extint_register_callback+0x56>
		return STATUS_OK;
   25ea2:	2300      	movs	r3, #0
   25ea4:	e000      	b.n	25ea8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   25ea6:	231d      	movs	r3, #29
}
   25ea8:	0018      	movs	r0, r3
   25eaa:	46bd      	mov	sp, r7
   25eac:	b002      	add	sp, #8
   25eae:	bd80      	pop	{r7, pc}
   25eb0:	20005a7c 	.word	0x20005a7c

00025eb4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25eb4:	b580      	push	{r7, lr}
   25eb6:	b084      	sub	sp, #16
   25eb8:	af00      	add	r7, sp, #0
   25eba:	0002      	movs	r2, r0
   25ebc:	1dfb      	adds	r3, r7, #7
   25ebe:	701a      	strb	r2, [r3, #0]
   25ec0:	1dbb      	adds	r3, r7, #6
   25ec2:	1c0a      	adds	r2, r1, #0
   25ec4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25ec6:	1dbb      	adds	r3, r7, #6
   25ec8:	781b      	ldrb	r3, [r3, #0]
   25eca:	2b00      	cmp	r3, #0
   25ecc:	d10e      	bne.n	25eec <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25ece:	1dfb      	adds	r3, r7, #7
   25ed0:	781b      	ldrb	r3, [r3, #0]
   25ed2:	0018      	movs	r0, r3
   25ed4:	4b08      	ldr	r3, [pc, #32]	; (25ef8 <extint_chan_enable_callback+0x44>)
   25ed6:	4798      	blx	r3
   25ed8:	0003      	movs	r3, r0
   25eda:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   25edc:	1dfb      	adds	r3, r7, #7
   25ede:	781b      	ldrb	r3, [r3, #0]
   25ee0:	2201      	movs	r2, #1
   25ee2:	409a      	lsls	r2, r3
   25ee4:	68fb      	ldr	r3, [r7, #12]
   25ee6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25ee8:	2300      	movs	r3, #0
   25eea:	e000      	b.n	25eee <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25eec:	2317      	movs	r3, #23
}
   25eee:	0018      	movs	r0, r3
   25ef0:	46bd      	mov	sp, r7
   25ef2:	b004      	add	sp, #16
   25ef4:	bd80      	pop	{r7, pc}
   25ef6:	46c0      	nop			; (mov r8, r8)
   25ef8:	00025d85 	.word	0x00025d85

00025efc <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25efc:	b580      	push	{r7, lr}
   25efe:	b084      	sub	sp, #16
   25f00:	af00      	add	r7, sp, #0
   25f02:	0002      	movs	r2, r0
   25f04:	1dfb      	adds	r3, r7, #7
   25f06:	701a      	strb	r2, [r3, #0]
   25f08:	1dbb      	adds	r3, r7, #6
   25f0a:	1c0a      	adds	r2, r1, #0
   25f0c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25f0e:	1dbb      	adds	r3, r7, #6
   25f10:	781b      	ldrb	r3, [r3, #0]
   25f12:	2b00      	cmp	r3, #0
   25f14:	d10e      	bne.n	25f34 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25f16:	1dfb      	adds	r3, r7, #7
   25f18:	781b      	ldrb	r3, [r3, #0]
   25f1a:	0018      	movs	r0, r3
   25f1c:	4b08      	ldr	r3, [pc, #32]	; (25f40 <extint_chan_disable_callback+0x44>)
   25f1e:	4798      	blx	r3
   25f20:	0003      	movs	r3, r0
   25f22:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25f24:	1dfb      	adds	r3, r7, #7
   25f26:	781b      	ldrb	r3, [r3, #0]
   25f28:	2201      	movs	r2, #1
   25f2a:	409a      	lsls	r2, r3
   25f2c:	68fb      	ldr	r3, [r7, #12]
   25f2e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25f30:	2300      	movs	r3, #0
   25f32:	e000      	b.n	25f36 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25f34:	2317      	movs	r3, #23
}
   25f36:	0018      	movs	r0, r3
   25f38:	46bd      	mov	sp, r7
   25f3a:	b004      	add	sp, #16
   25f3c:	bd80      	pop	{r7, pc}
   25f3e:	46c0      	nop			; (mov r8, r8)
   25f40:	00025d85 	.word	0x00025d85

00025f44 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25f44:	b580      	push	{r7, lr}
   25f46:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25f48:	4b15      	ldr	r3, [pc, #84]	; (25fa0 <EIC_Handler+0x5c>)
   25f4a:	2200      	movs	r2, #0
   25f4c:	701a      	strb	r2, [r3, #0]
   25f4e:	e020      	b.n	25f92 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   25f50:	4b13      	ldr	r3, [pc, #76]	; (25fa0 <EIC_Handler+0x5c>)
   25f52:	781b      	ldrb	r3, [r3, #0]
   25f54:	0018      	movs	r0, r3
   25f56:	4b13      	ldr	r3, [pc, #76]	; (25fa4 <EIC_Handler+0x60>)
   25f58:	4798      	blx	r3
   25f5a:	1e03      	subs	r3, r0, #0
   25f5c:	d013      	beq.n	25f86 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   25f5e:	4b10      	ldr	r3, [pc, #64]	; (25fa0 <EIC_Handler+0x5c>)
   25f60:	781b      	ldrb	r3, [r3, #0]
   25f62:	0018      	movs	r0, r3
   25f64:	4b10      	ldr	r3, [pc, #64]	; (25fa8 <EIC_Handler+0x64>)
   25f66:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   25f68:	4b0d      	ldr	r3, [pc, #52]	; (25fa0 <EIC_Handler+0x5c>)
   25f6a:	781b      	ldrb	r3, [r3, #0]
   25f6c:	001a      	movs	r2, r3
   25f6e:	4b0f      	ldr	r3, [pc, #60]	; (25fac <EIC_Handler+0x68>)
   25f70:	0092      	lsls	r2, r2, #2
   25f72:	58d3      	ldr	r3, [r2, r3]
   25f74:	2b00      	cmp	r3, #0
   25f76:	d006      	beq.n	25f86 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   25f78:	4b09      	ldr	r3, [pc, #36]	; (25fa0 <EIC_Handler+0x5c>)
   25f7a:	781b      	ldrb	r3, [r3, #0]
   25f7c:	001a      	movs	r2, r3
   25f7e:	4b0b      	ldr	r3, [pc, #44]	; (25fac <EIC_Handler+0x68>)
   25f80:	0092      	lsls	r2, r2, #2
   25f82:	58d3      	ldr	r3, [r2, r3]
   25f84:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25f86:	4b06      	ldr	r3, [pc, #24]	; (25fa0 <EIC_Handler+0x5c>)
   25f88:	781b      	ldrb	r3, [r3, #0]
   25f8a:	3301      	adds	r3, #1
   25f8c:	b2da      	uxtb	r2, r3
   25f8e:	4b04      	ldr	r3, [pc, #16]	; (25fa0 <EIC_Handler+0x5c>)
   25f90:	701a      	strb	r2, [r3, #0]
   25f92:	4b03      	ldr	r3, [pc, #12]	; (25fa0 <EIC_Handler+0x5c>)
   25f94:	781b      	ldrb	r3, [r3, #0]
   25f96:	2b0f      	cmp	r3, #15
   25f98:	d9da      	bls.n	25f50 <EIC_Handler+0xc>
			}
		}
	}
}
   25f9a:	46c0      	nop			; (mov r8, r8)
   25f9c:	46bd      	mov	sp, r7
   25f9e:	bd80      	pop	{r7, pc}
   25fa0:	20005a78 	.word	0x20005a78
   25fa4:	00025dd1 	.word	0x00025dd1
   25fa8:	00025e15 	.word	0x00025e15
   25fac:	20005a7c 	.word	0x20005a7c

00025fb0 <system_gclk_chan_get_config_defaults>:
{
   25fb0:	b580      	push	{r7, lr}
   25fb2:	b082      	sub	sp, #8
   25fb4:	af00      	add	r7, sp, #0
   25fb6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25fb8:	687b      	ldr	r3, [r7, #4]
   25fba:	2200      	movs	r2, #0
   25fbc:	701a      	strb	r2, [r3, #0]
}
   25fbe:	46c0      	nop			; (mov r8, r8)
   25fc0:	46bd      	mov	sp, r7
   25fc2:	b002      	add	sp, #8
   25fc4:	bd80      	pop	{r7, pc}
	...

00025fc8 <system_apb_clock_set_mask>:
{
   25fc8:	b580      	push	{r7, lr}
   25fca:	b082      	sub	sp, #8
   25fcc:	af00      	add	r7, sp, #0
   25fce:	0002      	movs	r2, r0
   25fd0:	6039      	str	r1, [r7, #0]
   25fd2:	1dfb      	adds	r3, r7, #7
   25fd4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25fd6:	1dfb      	adds	r3, r7, #7
   25fd8:	781b      	ldrb	r3, [r3, #0]
   25fda:	2b01      	cmp	r3, #1
   25fdc:	d00a      	beq.n	25ff4 <system_apb_clock_set_mask+0x2c>
   25fde:	2b02      	cmp	r3, #2
   25fe0:	d00f      	beq.n	26002 <system_apb_clock_set_mask+0x3a>
   25fe2:	2b00      	cmp	r3, #0
   25fe4:	d114      	bne.n	26010 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25fe6:	4b0e      	ldr	r3, [pc, #56]	; (26020 <system_apb_clock_set_mask+0x58>)
   25fe8:	4a0d      	ldr	r2, [pc, #52]	; (26020 <system_apb_clock_set_mask+0x58>)
   25fea:	6991      	ldr	r1, [r2, #24]
   25fec:	683a      	ldr	r2, [r7, #0]
   25fee:	430a      	orrs	r2, r1
   25ff0:	619a      	str	r2, [r3, #24]
			break;
   25ff2:	e00f      	b.n	26014 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25ff4:	4b0a      	ldr	r3, [pc, #40]	; (26020 <system_apb_clock_set_mask+0x58>)
   25ff6:	4a0a      	ldr	r2, [pc, #40]	; (26020 <system_apb_clock_set_mask+0x58>)
   25ff8:	69d1      	ldr	r1, [r2, #28]
   25ffa:	683a      	ldr	r2, [r7, #0]
   25ffc:	430a      	orrs	r2, r1
   25ffe:	61da      	str	r2, [r3, #28]
			break;
   26000:	e008      	b.n	26014 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26002:	4b07      	ldr	r3, [pc, #28]	; (26020 <system_apb_clock_set_mask+0x58>)
   26004:	4a06      	ldr	r2, [pc, #24]	; (26020 <system_apb_clock_set_mask+0x58>)
   26006:	6a11      	ldr	r1, [r2, #32]
   26008:	683a      	ldr	r2, [r7, #0]
   2600a:	430a      	orrs	r2, r1
   2600c:	621a      	str	r2, [r3, #32]
			break;
   2600e:	e001      	b.n	26014 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26010:	2317      	movs	r3, #23
   26012:	e000      	b.n	26016 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26014:	2300      	movs	r3, #0
}
   26016:	0018      	movs	r0, r3
   26018:	46bd      	mov	sp, r7
   2601a:	b002      	add	sp, #8
   2601c:	bd80      	pop	{r7, pc}
   2601e:	46c0      	nop			; (mov r8, r8)
   26020:	40000400 	.word	0x40000400

00026024 <system_pinmux_get_config_defaults>:
{
   26024:	b580      	push	{r7, lr}
   26026:	b082      	sub	sp, #8
   26028:	af00      	add	r7, sp, #0
   2602a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2602c:	687b      	ldr	r3, [r7, #4]
   2602e:	2280      	movs	r2, #128	; 0x80
   26030:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26032:	687b      	ldr	r3, [r7, #4]
   26034:	2200      	movs	r2, #0
   26036:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26038:	687b      	ldr	r3, [r7, #4]
   2603a:	2201      	movs	r2, #1
   2603c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2603e:	687b      	ldr	r3, [r7, #4]
   26040:	2200      	movs	r2, #0
   26042:	70da      	strb	r2, [r3, #3]
}
   26044:	46c0      	nop			; (mov r8, r8)
   26046:	46bd      	mov	sp, r7
   26048:	b002      	add	sp, #8
   2604a:	bd80      	pop	{r7, pc}

0002604c <system_interrupt_enable>:
{
   2604c:	b580      	push	{r7, lr}
   2604e:	b082      	sub	sp, #8
   26050:	af00      	add	r7, sp, #0
   26052:	0002      	movs	r2, r0
   26054:	1dfb      	adds	r3, r7, #7
   26056:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26058:	4b06      	ldr	r3, [pc, #24]	; (26074 <system_interrupt_enable+0x28>)
   2605a:	1dfa      	adds	r2, r7, #7
   2605c:	7812      	ldrb	r2, [r2, #0]
   2605e:	0011      	movs	r1, r2
   26060:	221f      	movs	r2, #31
   26062:	400a      	ands	r2, r1
   26064:	2101      	movs	r1, #1
   26066:	4091      	lsls	r1, r2
   26068:	000a      	movs	r2, r1
   2606a:	601a      	str	r2, [r3, #0]
}
   2606c:	46c0      	nop			; (mov r8, r8)
   2606e:	46bd      	mov	sp, r7
   26070:	b002      	add	sp, #8
   26072:	bd80      	pop	{r7, pc}
   26074:	e000e100 	.word	0xe000e100

00026078 <_extint_get_eic_from_channel>:
{
   26078:	b580      	push	{r7, lr}
   2607a:	b084      	sub	sp, #16
   2607c:	af00      	add	r7, sp, #0
   2607e:	0002      	movs	r2, r0
   26080:	1dfb      	adds	r3, r7, #7
   26082:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26084:	230f      	movs	r3, #15
   26086:	18fb      	adds	r3, r7, r3
   26088:	1dfa      	adds	r2, r7, #7
   2608a:	7812      	ldrb	r2, [r2, #0]
   2608c:	0952      	lsrs	r2, r2, #5
   2608e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26090:	230f      	movs	r3, #15
   26092:	18fb      	adds	r3, r7, r3
   26094:	781b      	ldrb	r3, [r3, #0]
   26096:	2b00      	cmp	r3, #0
   26098:	d10c      	bne.n	260b4 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2609a:	4b09      	ldr	r3, [pc, #36]	; (260c0 <_extint_get_eic_from_channel+0x48>)
   2609c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   2609e:	230f      	movs	r3, #15
   260a0:	18fb      	adds	r3, r7, r3
   260a2:	781b      	ldrb	r3, [r3, #0]
   260a4:	009b      	lsls	r3, r3, #2
   260a6:	2210      	movs	r2, #16
   260a8:	4694      	mov	ip, r2
   260aa:	44bc      	add	ip, r7
   260ac:	4463      	add	r3, ip
   260ae:	3b08      	subs	r3, #8
   260b0:	681b      	ldr	r3, [r3, #0]
   260b2:	e000      	b.n	260b6 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   260b4:	2300      	movs	r3, #0
}
   260b6:	0018      	movs	r0, r3
   260b8:	46bd      	mov	sp, r7
   260ba:	b004      	add	sp, #16
   260bc:	bd80      	pop	{r7, pc}
   260be:	46c0      	nop			; (mov r8, r8)
   260c0:	40001800 	.word	0x40001800

000260c4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   260c4:	b580      	push	{r7, lr}
   260c6:	b082      	sub	sp, #8
   260c8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   260ca:	4b0f      	ldr	r3, [pc, #60]	; (26108 <extint_is_syncing+0x44>)
   260cc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   260ce:	2300      	movs	r3, #0
   260d0:	607b      	str	r3, [r7, #4]
   260d2:	e011      	b.n	260f8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   260d4:	687b      	ldr	r3, [r7, #4]
   260d6:	009b      	lsls	r3, r3, #2
   260d8:	2208      	movs	r2, #8
   260da:	4694      	mov	ip, r2
   260dc:	44bc      	add	ip, r7
   260de:	4463      	add	r3, ip
   260e0:	3b08      	subs	r3, #8
   260e2:	681b      	ldr	r3, [r3, #0]
   260e4:	785b      	ldrb	r3, [r3, #1]
   260e6:	b2db      	uxtb	r3, r3
   260e8:	b25b      	sxtb	r3, r3
   260ea:	2b00      	cmp	r3, #0
   260ec:	da01      	bge.n	260f2 <extint_is_syncing+0x2e>
			return true;
   260ee:	2301      	movs	r3, #1
   260f0:	e006      	b.n	26100 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   260f2:	687b      	ldr	r3, [r7, #4]
   260f4:	3301      	adds	r3, #1
   260f6:	607b      	str	r3, [r7, #4]
   260f8:	687b      	ldr	r3, [r7, #4]
   260fa:	2b00      	cmp	r3, #0
   260fc:	d0ea      	beq.n	260d4 <extint_is_syncing+0x10>
		}
	}
	return false;
   260fe:	2300      	movs	r3, #0
}
   26100:	0018      	movs	r0, r3
   26102:	46bd      	mov	sp, r7
   26104:	b002      	add	sp, #8
   26106:	bd80      	pop	{r7, pc}
   26108:	40001800 	.word	0x40001800

0002610c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   2610c:	b580      	push	{r7, lr}
   2610e:	b084      	sub	sp, #16
   26110:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26112:	4b2d      	ldr	r3, [pc, #180]	; (261c8 <_system_extint_init+0xbc>)
   26114:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   26116:	2140      	movs	r1, #64	; 0x40
   26118:	2000      	movs	r0, #0
   2611a:	4b2c      	ldr	r3, [pc, #176]	; (261cc <_system_extint_init+0xc0>)
   2611c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2611e:	003b      	movs	r3, r7
   26120:	0018      	movs	r0, r3
   26122:	4b2b      	ldr	r3, [pc, #172]	; (261d0 <_system_extint_init+0xc4>)
   26124:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   26126:	003b      	movs	r3, r7
   26128:	2200      	movs	r2, #0
   2612a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   2612c:	003b      	movs	r3, r7
   2612e:	0019      	movs	r1, r3
   26130:	2005      	movs	r0, #5
   26132:	4b28      	ldr	r3, [pc, #160]	; (261d4 <_system_extint_init+0xc8>)
   26134:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   26136:	2005      	movs	r0, #5
   26138:	4b27      	ldr	r3, [pc, #156]	; (261d8 <_system_extint_init+0xcc>)
   2613a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2613c:	2300      	movs	r3, #0
   2613e:	60fb      	str	r3, [r7, #12]
   26140:	e018      	b.n	26174 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26142:	68fb      	ldr	r3, [r7, #12]
   26144:	009b      	lsls	r3, r3, #2
   26146:	2210      	movs	r2, #16
   26148:	4694      	mov	ip, r2
   2614a:	44bc      	add	ip, r7
   2614c:	4463      	add	r3, ip
   2614e:	3b0c      	subs	r3, #12
   26150:	681a      	ldr	r2, [r3, #0]
   26152:	68fb      	ldr	r3, [r7, #12]
   26154:	009b      	lsls	r3, r3, #2
   26156:	2110      	movs	r1, #16
   26158:	468c      	mov	ip, r1
   2615a:	44bc      	add	ip, r7
   2615c:	4463      	add	r3, ip
   2615e:	3b0c      	subs	r3, #12
   26160:	681b      	ldr	r3, [r3, #0]
   26162:	781b      	ldrb	r3, [r3, #0]
   26164:	b2db      	uxtb	r3, r3
   26166:	2101      	movs	r1, #1
   26168:	430b      	orrs	r3, r1
   2616a:	b2db      	uxtb	r3, r3
   2616c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2616e:	68fb      	ldr	r3, [r7, #12]
   26170:	3301      	adds	r3, #1
   26172:	60fb      	str	r3, [r7, #12]
   26174:	68fb      	ldr	r3, [r7, #12]
   26176:	2b00      	cmp	r3, #0
   26178:	d0e3      	beq.n	26142 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2617a:	46c0      	nop			; (mov r8, r8)
   2617c:	4b17      	ldr	r3, [pc, #92]	; (261dc <_system_extint_init+0xd0>)
   2617e:	4798      	blx	r3
   26180:	1e03      	subs	r3, r0, #0
   26182:	d1fb      	bne.n	2617c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26184:	230b      	movs	r3, #11
   26186:	18fb      	adds	r3, r7, r3
   26188:	2200      	movs	r2, #0
   2618a:	701a      	strb	r2, [r3, #0]
   2618c:	e00d      	b.n	261aa <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   2618e:	230b      	movs	r3, #11
   26190:	18fb      	adds	r3, r7, r3
   26192:	781a      	ldrb	r2, [r3, #0]
   26194:	4b12      	ldr	r3, [pc, #72]	; (261e0 <_system_extint_init+0xd4>)
   26196:	0092      	lsls	r2, r2, #2
   26198:	2100      	movs	r1, #0
   2619a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2619c:	230b      	movs	r3, #11
   2619e:	18fb      	adds	r3, r7, r3
   261a0:	781a      	ldrb	r2, [r3, #0]
   261a2:	230b      	movs	r3, #11
   261a4:	18fb      	adds	r3, r7, r3
   261a6:	3201      	adds	r2, #1
   261a8:	701a      	strb	r2, [r3, #0]
   261aa:	230b      	movs	r3, #11
   261ac:	18fb      	adds	r3, r7, r3
   261ae:	781b      	ldrb	r3, [r3, #0]
   261b0:	2b0f      	cmp	r3, #15
   261b2:	d9ec      	bls.n	2618e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   261b4:	2004      	movs	r0, #4
   261b6:	4b0b      	ldr	r3, [pc, #44]	; (261e4 <_system_extint_init+0xd8>)
   261b8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   261ba:	4b0b      	ldr	r3, [pc, #44]	; (261e8 <_system_extint_init+0xdc>)
   261bc:	4798      	blx	r3
}
   261be:	46c0      	nop			; (mov r8, r8)
   261c0:	46bd      	mov	sp, r7
   261c2:	b004      	add	sp, #16
   261c4:	bd80      	pop	{r7, pc}
   261c6:	46c0      	nop			; (mov r8, r8)
   261c8:	40001800 	.word	0x40001800
   261cc:	00025fc9 	.word	0x00025fc9
   261d0:	00025fb1 	.word	0x00025fb1
   261d4:	00029839 	.word	0x00029839
   261d8:	0002987d 	.word	0x0002987d
   261dc:	000260c5 	.word	0x000260c5
   261e0:	20005a7c 	.word	0x20005a7c
   261e4:	0002604d 	.word	0x0002604d
   261e8:	000261ed 	.word	0x000261ed

000261ec <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   261ec:	b580      	push	{r7, lr}
   261ee:	b082      	sub	sp, #8
   261f0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   261f2:	4b15      	ldr	r3, [pc, #84]	; (26248 <_extint_enable+0x5c>)
   261f4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   261f6:	2300      	movs	r3, #0
   261f8:	607b      	str	r3, [r7, #4]
   261fa:	e018      	b.n	2622e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   261fc:	687b      	ldr	r3, [r7, #4]
   261fe:	009b      	lsls	r3, r3, #2
   26200:	2208      	movs	r2, #8
   26202:	4694      	mov	ip, r2
   26204:	44bc      	add	ip, r7
   26206:	4463      	add	r3, ip
   26208:	3b08      	subs	r3, #8
   2620a:	681a      	ldr	r2, [r3, #0]
   2620c:	687b      	ldr	r3, [r7, #4]
   2620e:	009b      	lsls	r3, r3, #2
   26210:	2108      	movs	r1, #8
   26212:	468c      	mov	ip, r1
   26214:	44bc      	add	ip, r7
   26216:	4463      	add	r3, ip
   26218:	3b08      	subs	r3, #8
   2621a:	681b      	ldr	r3, [r3, #0]
   2621c:	781b      	ldrb	r3, [r3, #0]
   2621e:	b2db      	uxtb	r3, r3
   26220:	2102      	movs	r1, #2
   26222:	430b      	orrs	r3, r1
   26224:	b2db      	uxtb	r3, r3
   26226:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26228:	687b      	ldr	r3, [r7, #4]
   2622a:	3301      	adds	r3, #1
   2622c:	607b      	str	r3, [r7, #4]
   2622e:	687b      	ldr	r3, [r7, #4]
   26230:	2b00      	cmp	r3, #0
   26232:	d0e3      	beq.n	261fc <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26234:	46c0      	nop			; (mov r8, r8)
   26236:	4b05      	ldr	r3, [pc, #20]	; (2624c <_extint_enable+0x60>)
   26238:	4798      	blx	r3
   2623a:	1e03      	subs	r3, r0, #0
   2623c:	d1fb      	bne.n	26236 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   2623e:	46c0      	nop			; (mov r8, r8)
   26240:	46bd      	mov	sp, r7
   26242:	b002      	add	sp, #8
   26244:	bd80      	pop	{r7, pc}
   26246:	46c0      	nop			; (mov r8, r8)
   26248:	40001800 	.word	0x40001800
   2624c:	000260c5 	.word	0x000260c5

00026250 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26250:	b580      	push	{r7, lr}
   26252:	b082      	sub	sp, #8
   26254:	af00      	add	r7, sp, #0
   26256:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26258:	687b      	ldr	r3, [r7, #4]
   2625a:	2200      	movs	r2, #0
   2625c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   2625e:	687b      	ldr	r3, [r7, #4]
   26260:	2200      	movs	r2, #0
   26262:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26264:	687b      	ldr	r3, [r7, #4]
   26266:	2201      	movs	r2, #1
   26268:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2626a:	687b      	ldr	r3, [r7, #4]
   2626c:	2201      	movs	r2, #1
   2626e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26270:	687b      	ldr	r3, [r7, #4]
   26272:	2200      	movs	r2, #0
   26274:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   26276:	687b      	ldr	r3, [r7, #4]
   26278:	2202      	movs	r2, #2
   2627a:	72da      	strb	r2, [r3, #11]
}
   2627c:	46c0      	nop			; (mov r8, r8)
   2627e:	46bd      	mov	sp, r7
   26280:	b002      	add	sp, #8
   26282:	bd80      	pop	{r7, pc}

00026284 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26284:	b580      	push	{r7, lr}
   26286:	b086      	sub	sp, #24
   26288:	af00      	add	r7, sp, #0
   2628a:	0002      	movs	r2, r0
   2628c:	6039      	str	r1, [r7, #0]
   2628e:	1dfb      	adds	r3, r7, #7
   26290:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26292:	2308      	movs	r3, #8
   26294:	18fb      	adds	r3, r7, r3
   26296:	0018      	movs	r0, r3
   26298:	4b36      	ldr	r3, [pc, #216]	; (26374 <extint_chan_set_config+0xf0>)
   2629a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   2629c:	683b      	ldr	r3, [r7, #0]
   2629e:	685b      	ldr	r3, [r3, #4]
   262a0:	b2da      	uxtb	r2, r3
   262a2:	2308      	movs	r3, #8
   262a4:	18fb      	adds	r3, r7, r3
   262a6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   262a8:	2308      	movs	r3, #8
   262aa:	18fb      	adds	r3, r7, r3
   262ac:	2200      	movs	r2, #0
   262ae:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   262b0:	683b      	ldr	r3, [r7, #0]
   262b2:	7a1a      	ldrb	r2, [r3, #8]
   262b4:	2308      	movs	r3, #8
   262b6:	18fb      	adds	r3, r7, r3
   262b8:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   262ba:	683b      	ldr	r3, [r7, #0]
   262bc:	681b      	ldr	r3, [r3, #0]
   262be:	b2db      	uxtb	r3, r3
   262c0:	2208      	movs	r2, #8
   262c2:	18ba      	adds	r2, r7, r2
   262c4:	0011      	movs	r1, r2
   262c6:	0018      	movs	r0, r3
   262c8:	4b2b      	ldr	r3, [pc, #172]	; (26378 <extint_chan_set_config+0xf4>)
   262ca:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   262cc:	1dfb      	adds	r3, r7, #7
   262ce:	781b      	ldrb	r3, [r3, #0]
   262d0:	0018      	movs	r0, r3
   262d2:	4b2a      	ldr	r3, [pc, #168]	; (2637c <extint_chan_set_config+0xf8>)
   262d4:	4798      	blx	r3
   262d6:	0003      	movs	r3, r0
   262d8:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   262da:	1dfb      	adds	r3, r7, #7
   262dc:	781b      	ldrb	r3, [r3, #0]
   262de:	2207      	movs	r2, #7
   262e0:	4013      	ands	r3, r2
   262e2:	009b      	lsls	r3, r3, #2
   262e4:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   262e6:	683b      	ldr	r3, [r7, #0]
   262e8:	7adb      	ldrb	r3, [r3, #11]
   262ea:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   262ec:	683b      	ldr	r3, [r7, #0]
   262ee:	7a9b      	ldrb	r3, [r3, #10]
   262f0:	2b00      	cmp	r3, #0
   262f2:	d003      	beq.n	262fc <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   262f4:	697b      	ldr	r3, [r7, #20]
   262f6:	2208      	movs	r2, #8
   262f8:	4313      	orrs	r3, r2
   262fa:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   262fc:	1dfb      	adds	r3, r7, #7
   262fe:	781b      	ldrb	r3, [r3, #0]
   26300:	08db      	lsrs	r3, r3, #3
   26302:	b2db      	uxtb	r3, r3
   26304:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26306:	1dfb      	adds	r3, r7, #7
   26308:	781b      	ldrb	r3, [r3, #0]
   2630a:	08db      	lsrs	r3, r3, #3
   2630c:	b2db      	uxtb	r3, r3
   2630e:	001a      	movs	r2, r3
   26310:	693b      	ldr	r3, [r7, #16]
   26312:	3206      	adds	r2, #6
   26314:	0092      	lsls	r2, r2, #2
   26316:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26318:	210f      	movs	r1, #15
   2631a:	68fa      	ldr	r2, [r7, #12]
   2631c:	4091      	lsls	r1, r2
   2631e:	000a      	movs	r2, r1
   26320:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26322:	401a      	ands	r2, r3
			(new_config << config_pos);
   26324:	6979      	ldr	r1, [r7, #20]
   26326:	68fb      	ldr	r3, [r7, #12]
   26328:	4099      	lsls	r1, r3
   2632a:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2632c:	431a      	orrs	r2, r3
   2632e:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26330:	693b      	ldr	r3, [r7, #16]
   26332:	1d82      	adds	r2, r0, #6
   26334:	0092      	lsls	r2, r2, #2
   26336:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   26338:	683b      	ldr	r3, [r7, #0]
   2633a:	7a5b      	ldrb	r3, [r3, #9]
   2633c:	2b00      	cmp	r3, #0
   2633e:	d00a      	beq.n	26356 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26340:	693b      	ldr	r3, [r7, #16]
   26342:	695a      	ldr	r2, [r3, #20]
   26344:	1dfb      	adds	r3, r7, #7
   26346:	781b      	ldrb	r3, [r3, #0]
   26348:	2101      	movs	r1, #1
   2634a:	4099      	lsls	r1, r3
   2634c:	000b      	movs	r3, r1
   2634e:	431a      	orrs	r2, r3
   26350:	693b      	ldr	r3, [r7, #16]
   26352:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26354:	e00a      	b.n	2636c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   26356:	693b      	ldr	r3, [r7, #16]
   26358:	695b      	ldr	r3, [r3, #20]
   2635a:	1dfa      	adds	r2, r7, #7
   2635c:	7812      	ldrb	r2, [r2, #0]
   2635e:	2101      	movs	r1, #1
   26360:	4091      	lsls	r1, r2
   26362:	000a      	movs	r2, r1
   26364:	43d2      	mvns	r2, r2
   26366:	401a      	ands	r2, r3
   26368:	693b      	ldr	r3, [r7, #16]
   2636a:	615a      	str	r2, [r3, #20]
}
   2636c:	46c0      	nop			; (mov r8, r8)
   2636e:	46bd      	mov	sp, r7
   26370:	b006      	add	sp, #24
   26372:	bd80      	pop	{r7, pc}
   26374:	00026025 	.word	0x00026025
   26378:	00029b99 	.word	0x00029b99
   2637c:	00026079 	.word	0x00026079

00026380 <system_pinmux_get_config_defaults>:
{
   26380:	b580      	push	{r7, lr}
   26382:	b082      	sub	sp, #8
   26384:	af00      	add	r7, sp, #0
   26386:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26388:	687b      	ldr	r3, [r7, #4]
   2638a:	2280      	movs	r2, #128	; 0x80
   2638c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2638e:	687b      	ldr	r3, [r7, #4]
   26390:	2200      	movs	r2, #0
   26392:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26394:	687b      	ldr	r3, [r7, #4]
   26396:	2201      	movs	r2, #1
   26398:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2639a:	687b      	ldr	r3, [r7, #4]
   2639c:	2200      	movs	r2, #0
   2639e:	70da      	strb	r2, [r3, #3]
}
   263a0:	46c0      	nop			; (mov r8, r8)
   263a2:	46bd      	mov	sp, r7
   263a4:	b002      	add	sp, #8
   263a6:	bd80      	pop	{r7, pc}

000263a8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   263a8:	b580      	push	{r7, lr}
   263aa:	b084      	sub	sp, #16
   263ac:	af00      	add	r7, sp, #0
   263ae:	0002      	movs	r2, r0
   263b0:	6039      	str	r1, [r7, #0]
   263b2:	1dfb      	adds	r3, r7, #7
   263b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   263b6:	230c      	movs	r3, #12
   263b8:	18fb      	adds	r3, r7, r3
   263ba:	0018      	movs	r0, r3
   263bc:	4b10      	ldr	r3, [pc, #64]	; (26400 <port_pin_set_config+0x58>)
   263be:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   263c0:	230c      	movs	r3, #12
   263c2:	18fb      	adds	r3, r7, r3
   263c4:	2280      	movs	r2, #128	; 0x80
   263c6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   263c8:	683b      	ldr	r3, [r7, #0]
   263ca:	781a      	ldrb	r2, [r3, #0]
   263cc:	230c      	movs	r3, #12
   263ce:	18fb      	adds	r3, r7, r3
   263d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   263d2:	683b      	ldr	r3, [r7, #0]
   263d4:	785a      	ldrb	r2, [r3, #1]
   263d6:	230c      	movs	r3, #12
   263d8:	18fb      	adds	r3, r7, r3
   263da:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   263dc:	683b      	ldr	r3, [r7, #0]
   263de:	789a      	ldrb	r2, [r3, #2]
   263e0:	230c      	movs	r3, #12
   263e2:	18fb      	adds	r3, r7, r3
   263e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   263e6:	230c      	movs	r3, #12
   263e8:	18fa      	adds	r2, r7, r3
   263ea:	1dfb      	adds	r3, r7, #7
   263ec:	781b      	ldrb	r3, [r3, #0]
   263ee:	0011      	movs	r1, r2
   263f0:	0018      	movs	r0, r3
   263f2:	4b04      	ldr	r3, [pc, #16]	; (26404 <port_pin_set_config+0x5c>)
   263f4:	4798      	blx	r3
}
   263f6:	46c0      	nop			; (mov r8, r8)
   263f8:	46bd      	mov	sp, r7
   263fa:	b004      	add	sp, #16
   263fc:	bd80      	pop	{r7, pc}
   263fe:	46c0      	nop			; (mov r8, r8)
   26400:	00026381 	.word	0x00026381
   26404:	00029b99 	.word	0x00029b99

00026408 <system_gclk_chan_get_config_defaults>:
{
   26408:	b580      	push	{r7, lr}
   2640a:	b082      	sub	sp, #8
   2640c:	af00      	add	r7, sp, #0
   2640e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26410:	687b      	ldr	r3, [r7, #4]
   26412:	2200      	movs	r2, #0
   26414:	701a      	strb	r2, [r3, #0]
}
   26416:	46c0      	nop			; (mov r8, r8)
   26418:	46bd      	mov	sp, r7
   2641a:	b002      	add	sp, #8
   2641c:	bd80      	pop	{r7, pc}
	...

00026420 <system_apb_clock_set_mask>:
{
   26420:	b580      	push	{r7, lr}
   26422:	b082      	sub	sp, #8
   26424:	af00      	add	r7, sp, #0
   26426:	0002      	movs	r2, r0
   26428:	6039      	str	r1, [r7, #0]
   2642a:	1dfb      	adds	r3, r7, #7
   2642c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2642e:	1dfb      	adds	r3, r7, #7
   26430:	781b      	ldrb	r3, [r3, #0]
   26432:	2b01      	cmp	r3, #1
   26434:	d00a      	beq.n	2644c <system_apb_clock_set_mask+0x2c>
   26436:	2b02      	cmp	r3, #2
   26438:	d00f      	beq.n	2645a <system_apb_clock_set_mask+0x3a>
   2643a:	2b00      	cmp	r3, #0
   2643c:	d114      	bne.n	26468 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2643e:	4b0e      	ldr	r3, [pc, #56]	; (26478 <system_apb_clock_set_mask+0x58>)
   26440:	4a0d      	ldr	r2, [pc, #52]	; (26478 <system_apb_clock_set_mask+0x58>)
   26442:	6991      	ldr	r1, [r2, #24]
   26444:	683a      	ldr	r2, [r7, #0]
   26446:	430a      	orrs	r2, r1
   26448:	619a      	str	r2, [r3, #24]
			break;
   2644a:	e00f      	b.n	2646c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2644c:	4b0a      	ldr	r3, [pc, #40]	; (26478 <system_apb_clock_set_mask+0x58>)
   2644e:	4a0a      	ldr	r2, [pc, #40]	; (26478 <system_apb_clock_set_mask+0x58>)
   26450:	69d1      	ldr	r1, [r2, #28]
   26452:	683a      	ldr	r2, [r7, #0]
   26454:	430a      	orrs	r2, r1
   26456:	61da      	str	r2, [r3, #28]
			break;
   26458:	e008      	b.n	2646c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2645a:	4b07      	ldr	r3, [pc, #28]	; (26478 <system_apb_clock_set_mask+0x58>)
   2645c:	4a06      	ldr	r2, [pc, #24]	; (26478 <system_apb_clock_set_mask+0x58>)
   2645e:	6a11      	ldr	r1, [r2, #32]
   26460:	683a      	ldr	r2, [r7, #0]
   26462:	430a      	orrs	r2, r1
   26464:	621a      	str	r2, [r3, #32]
			break;
   26466:	e001      	b.n	2646c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26468:	2317      	movs	r3, #23
   2646a:	e000      	b.n	2646e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2646c:	2300      	movs	r3, #0
}
   2646e:	0018      	movs	r0, r3
   26470:	46bd      	mov	sp, r7
   26472:	b002      	add	sp, #8
   26474:	bd80      	pop	{r7, pc}
   26476:	46c0      	nop			; (mov r8, r8)
   26478:	40000400 	.word	0x40000400

0002647c <system_interrupt_enable>:
{
   2647c:	b580      	push	{r7, lr}
   2647e:	b082      	sub	sp, #8
   26480:	af00      	add	r7, sp, #0
   26482:	0002      	movs	r2, r0
   26484:	1dfb      	adds	r3, r7, #7
   26486:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26488:	4b06      	ldr	r3, [pc, #24]	; (264a4 <system_interrupt_enable+0x28>)
   2648a:	1dfa      	adds	r2, r7, #7
   2648c:	7812      	ldrb	r2, [r2, #0]
   2648e:	0011      	movs	r1, r2
   26490:	221f      	movs	r2, #31
   26492:	400a      	ands	r2, r1
   26494:	2101      	movs	r1, #1
   26496:	4091      	lsls	r1, r2
   26498:	000a      	movs	r2, r1
   2649a:	601a      	str	r2, [r3, #0]
}
   2649c:	46c0      	nop			; (mov r8, r8)
   2649e:	46bd      	mov	sp, r7
   264a0:	b002      	add	sp, #8
   264a2:	bd80      	pop	{r7, pc}
   264a4:	e000e100 	.word	0xe000e100

000264a8 <system_interrupt_disable>:
{
   264a8:	b580      	push	{r7, lr}
   264aa:	b082      	sub	sp, #8
   264ac:	af00      	add	r7, sp, #0
   264ae:	0002      	movs	r2, r0
   264b0:	1dfb      	adds	r3, r7, #7
   264b2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   264b4:	4a07      	ldr	r2, [pc, #28]	; (264d4 <system_interrupt_disable+0x2c>)
   264b6:	1dfb      	adds	r3, r7, #7
   264b8:	781b      	ldrb	r3, [r3, #0]
   264ba:	0019      	movs	r1, r3
   264bc:	231f      	movs	r3, #31
   264be:	400b      	ands	r3, r1
   264c0:	2101      	movs	r1, #1
   264c2:	4099      	lsls	r1, r3
   264c4:	000b      	movs	r3, r1
   264c6:	0019      	movs	r1, r3
   264c8:	2380      	movs	r3, #128	; 0x80
   264ca:	50d1      	str	r1, [r2, r3]
}
   264cc:	46c0      	nop			; (mov r8, r8)
   264ce:	46bd      	mov	sp, r7
   264d0:	b002      	add	sp, #8
   264d2:	bd80      	pop	{r7, pc}
   264d4:	e000e100 	.word	0xe000e100

000264d8 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   264d8:	b580      	push	{r7, lr}
   264da:	b084      	sub	sp, #16
   264dc:	af00      	add	r7, sp, #0
   264de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   264e0:	687b      	ldr	r3, [r7, #4]
   264e2:	681b      	ldr	r3, [r3, #0]
   264e4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   264e6:	68fb      	ldr	r3, [r7, #12]
   264e8:	7a9b      	ldrb	r3, [r3, #10]
   264ea:	b2db      	uxtb	r3, r3
   264ec:	b25b      	sxtb	r3, r3
   264ee:	2b00      	cmp	r3, #0
   264f0:	da01      	bge.n	264f6 <rtc_calendar_is_syncing+0x1e>
                return true;
   264f2:	2301      	movs	r3, #1
   264f4:	e000      	b.n	264f8 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   264f6:	2300      	movs	r3, #0
}
   264f8:	0018      	movs	r0, r3
   264fa:	46bd      	mov	sp, r7
   264fc:	b004      	add	sp, #16
   264fe:	bd80      	pop	{r7, pc}

00026500 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26500:	b580      	push	{r7, lr}
   26502:	b084      	sub	sp, #16
   26504:	af00      	add	r7, sp, #0
   26506:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26508:	687b      	ldr	r3, [r7, #4]
   2650a:	681b      	ldr	r3, [r3, #0]
   2650c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   2650e:	2003      	movs	r0, #3
   26510:	4b0a      	ldr	r3, [pc, #40]	; (2653c <rtc_calendar_enable+0x3c>)
   26512:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26514:	46c0      	nop			; (mov r8, r8)
   26516:	687b      	ldr	r3, [r7, #4]
   26518:	0018      	movs	r0, r3
   2651a:	4b09      	ldr	r3, [pc, #36]	; (26540 <rtc_calendar_enable+0x40>)
   2651c:	4798      	blx	r3
   2651e:	1e03      	subs	r3, r0, #0
   26520:	d1f9      	bne.n	26516 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26522:	68fb      	ldr	r3, [r7, #12]
   26524:	881b      	ldrh	r3, [r3, #0]
   26526:	b29b      	uxth	r3, r3
   26528:	2202      	movs	r2, #2
   2652a:	4313      	orrs	r3, r2
   2652c:	b29a      	uxth	r2, r3
   2652e:	68fb      	ldr	r3, [r7, #12]
   26530:	801a      	strh	r2, [r3, #0]
}
   26532:	46c0      	nop			; (mov r8, r8)
   26534:	46bd      	mov	sp, r7
   26536:	b004      	add	sp, #16
   26538:	bd80      	pop	{r7, pc}
   2653a:	46c0      	nop			; (mov r8, r8)
   2653c:	0002647d 	.word	0x0002647d
   26540:	000264d9 	.word	0x000264d9

00026544 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26544:	b580      	push	{r7, lr}
   26546:	b084      	sub	sp, #16
   26548:	af00      	add	r7, sp, #0
   2654a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2654c:	687b      	ldr	r3, [r7, #4]
   2654e:	681b      	ldr	r3, [r3, #0]
   26550:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26552:	2003      	movs	r0, #3
   26554:	4b0d      	ldr	r3, [pc, #52]	; (2658c <rtc_calendar_disable+0x48>)
   26556:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26558:	46c0      	nop			; (mov r8, r8)
   2655a:	687b      	ldr	r3, [r7, #4]
   2655c:	0018      	movs	r0, r3
   2655e:	4b0c      	ldr	r3, [pc, #48]	; (26590 <rtc_calendar_disable+0x4c>)
   26560:	4798      	blx	r3
   26562:	1e03      	subs	r3, r0, #0
   26564:	d1f9      	bne.n	2655a <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26566:	68fb      	ldr	r3, [r7, #12]
   26568:	22c1      	movs	r2, #193	; 0xc1
   2656a:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   2656c:	68fb      	ldr	r3, [r7, #12]
   2656e:	22c1      	movs	r2, #193	; 0xc1
   26570:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   26572:	68fb      	ldr	r3, [r7, #12]
   26574:	881b      	ldrh	r3, [r3, #0]
   26576:	b29b      	uxth	r3, r3
   26578:	2202      	movs	r2, #2
   2657a:	4393      	bics	r3, r2
   2657c:	b29a      	uxth	r2, r3
   2657e:	68fb      	ldr	r3, [r7, #12]
   26580:	801a      	strh	r2, [r3, #0]
}
   26582:	46c0      	nop			; (mov r8, r8)
   26584:	46bd      	mov	sp, r7
   26586:	b004      	add	sp, #16
   26588:	bd80      	pop	{r7, pc}
   2658a:	46c0      	nop			; (mov r8, r8)
   2658c:	000264a9 	.word	0x000264a9
   26590:	000264d9 	.word	0x000264d9

00026594 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26594:	b580      	push	{r7, lr}
   26596:	b084      	sub	sp, #16
   26598:	af00      	add	r7, sp, #0
   2659a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2659c:	687b      	ldr	r3, [r7, #4]
   2659e:	681b      	ldr	r3, [r3, #0]
   265a0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   265a2:	687b      	ldr	r3, [r7, #4]
   265a4:	0018      	movs	r0, r3
   265a6:	4b0d      	ldr	r3, [pc, #52]	; (265dc <rtc_calendar_reset+0x48>)
   265a8:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   265aa:	687b      	ldr	r3, [r7, #4]
   265ac:	2200      	movs	r2, #0
   265ae:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   265b0:	687b      	ldr	r3, [r7, #4]
   265b2:	2200      	movs	r2, #0
   265b4:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   265b6:	46c0      	nop			; (mov r8, r8)
   265b8:	687b      	ldr	r3, [r7, #4]
   265ba:	0018      	movs	r0, r3
   265bc:	4b08      	ldr	r3, [pc, #32]	; (265e0 <rtc_calendar_reset+0x4c>)
   265be:	4798      	blx	r3
   265c0:	1e03      	subs	r3, r0, #0
   265c2:	d1f9      	bne.n	265b8 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   265c4:	68fb      	ldr	r3, [r7, #12]
   265c6:	881b      	ldrh	r3, [r3, #0]
   265c8:	b29b      	uxth	r3, r3
   265ca:	2201      	movs	r2, #1
   265cc:	4313      	orrs	r3, r2
   265ce:	b29a      	uxth	r2, r3
   265d0:	68fb      	ldr	r3, [r7, #12]
   265d2:	801a      	strh	r2, [r3, #0]
}
   265d4:	46c0      	nop			; (mov r8, r8)
   265d6:	46bd      	mov	sp, r7
   265d8:	b004      	add	sp, #16
   265da:	bd80      	pop	{r7, pc}
   265dc:	00026545 	.word	0x00026545
   265e0:	000264d9 	.word	0x000264d9

000265e4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   265e4:	b580      	push	{r7, lr}
   265e6:	b084      	sub	sp, #16
   265e8:	af00      	add	r7, sp, #0
   265ea:	6078      	str	r0, [r7, #4]
   265ec:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   265ee:	683b      	ldr	r3, [r7, #0]
   265f0:	88db      	ldrh	r3, [r3, #6]
   265f2:	001a      	movs	r2, r3
   265f4:	687b      	ldr	r3, [r7, #4]
   265f6:	88db      	ldrh	r3, [r3, #6]
   265f8:	1ad3      	subs	r3, r2, r3
   265fa:	069b      	lsls	r3, r3, #26
   265fc:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   265fe:	683b      	ldr	r3, [r7, #0]
   26600:	795b      	ldrb	r3, [r3, #5]
   26602:	059b      	lsls	r3, r3, #22
   26604:	001a      	movs	r2, r3
   26606:	68fb      	ldr	r3, [r7, #12]
   26608:	4313      	orrs	r3, r2
   2660a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   2660c:	683b      	ldr	r3, [r7, #0]
   2660e:	791b      	ldrb	r3, [r3, #4]
   26610:	045b      	lsls	r3, r3, #17
   26612:	001a      	movs	r2, r3
   26614:	68fb      	ldr	r3, [r7, #12]
   26616:	4313      	orrs	r3, r2
   26618:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2661a:	683b      	ldr	r3, [r7, #0]
   2661c:	789b      	ldrb	r3, [r3, #2]
   2661e:	031b      	lsls	r3, r3, #12
   26620:	001a      	movs	r2, r3
   26622:	68fb      	ldr	r3, [r7, #12]
   26624:	4313      	orrs	r3, r2
   26626:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26628:	687b      	ldr	r3, [r7, #4]
   2662a:	791b      	ldrb	r3, [r3, #4]
   2662c:	2201      	movs	r2, #1
   2662e:	4053      	eors	r3, r2
   26630:	b2db      	uxtb	r3, r3
   26632:	2b00      	cmp	r3, #0
   26634:	d008      	beq.n	26648 <rtc_calendar_time_to_register_value+0x64>
   26636:	683b      	ldr	r3, [r7, #0]
   26638:	78db      	ldrb	r3, [r3, #3]
   2663a:	2b00      	cmp	r3, #0
   2663c:	d004      	beq.n	26648 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   2663e:	68fb      	ldr	r3, [r7, #12]
   26640:	2280      	movs	r2, #128	; 0x80
   26642:	0252      	lsls	r2, r2, #9
   26644:	4313      	orrs	r3, r2
   26646:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26648:	683b      	ldr	r3, [r7, #0]
   2664a:	785b      	ldrb	r3, [r3, #1]
   2664c:	019b      	lsls	r3, r3, #6
   2664e:	001a      	movs	r2, r3
   26650:	68fb      	ldr	r3, [r7, #12]
   26652:	4313      	orrs	r3, r2
   26654:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26656:	683b      	ldr	r3, [r7, #0]
   26658:	781b      	ldrb	r3, [r3, #0]
   2665a:	001a      	movs	r2, r3
   2665c:	68fb      	ldr	r3, [r7, #12]
   2665e:	4313      	orrs	r3, r2
   26660:	60fb      	str	r3, [r7, #12]

	return register_value;
   26662:	68fb      	ldr	r3, [r7, #12]
}
   26664:	0018      	movs	r0, r3
   26666:	46bd      	mov	sp, r7
   26668:	b004      	add	sp, #16
   2666a:	bd80      	pop	{r7, pc}

0002666c <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   2666c:	b580      	push	{r7, lr}
   2666e:	b084      	sub	sp, #16
   26670:	af00      	add	r7, sp, #0
   26672:	60f8      	str	r0, [r7, #12]
   26674:	60b9      	str	r1, [r7, #8]
   26676:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26678:	68bb      	ldr	r3, [r7, #8]
   2667a:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   2667c:	b29a      	uxth	r2, r3
   2667e:	68fb      	ldr	r3, [r7, #12]
   26680:	88db      	ldrh	r3, [r3, #6]
   26682:	18d3      	adds	r3, r2, r3
   26684:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26686:	687b      	ldr	r3, [r7, #4]
   26688:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   2668a:	68bb      	ldr	r3, [r7, #8]
   2668c:	0d9b      	lsrs	r3, r3, #22
   2668e:	b2db      	uxtb	r3, r3
   26690:	220f      	movs	r2, #15
   26692:	4013      	ands	r3, r2
   26694:	b2da      	uxtb	r2, r3
   26696:	687b      	ldr	r3, [r7, #4]
   26698:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2669a:	68bb      	ldr	r3, [r7, #8]
   2669c:	0c5b      	lsrs	r3, r3, #17
   2669e:	b2db      	uxtb	r3, r3
   266a0:	221f      	movs	r2, #31
   266a2:	4013      	ands	r3, r2
   266a4:	b2da      	uxtb	r2, r3
   266a6:	687b      	ldr	r3, [r7, #4]
   266a8:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   266aa:	68fb      	ldr	r3, [r7, #12]
   266ac:	791b      	ldrb	r3, [r3, #4]
   266ae:	2b00      	cmp	r3, #0
   266b0:	d008      	beq.n	266c4 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   266b2:	68bb      	ldr	r3, [r7, #8]
   266b4:	0b1b      	lsrs	r3, r3, #12
   266b6:	b2db      	uxtb	r3, r3
   266b8:	221f      	movs	r2, #31
   266ba:	4013      	ands	r3, r2
   266bc:	b2da      	uxtb	r2, r3
   266be:	687b      	ldr	r3, [r7, #4]
   266c0:	709a      	strb	r2, [r3, #2]
   266c2:	e010      	b.n	266e6 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   266c4:	68bb      	ldr	r3, [r7, #8]
   266c6:	0b1b      	lsrs	r3, r3, #12
   266c8:	b2db      	uxtb	r3, r3
   266ca:	220f      	movs	r2, #15
   266cc:	4013      	ands	r3, r2
   266ce:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   266d0:	687b      	ldr	r3, [r7, #4]
   266d2:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   266d4:	68ba      	ldr	r2, [r7, #8]
   266d6:	2380      	movs	r3, #128	; 0x80
   266d8:	025b      	lsls	r3, r3, #9
   266da:	4013      	ands	r3, r2
   266dc:	1e5a      	subs	r2, r3, #1
   266de:	4193      	sbcs	r3, r2
   266e0:	b2da      	uxtb	r2, r3
   266e2:	687b      	ldr	r3, [r7, #4]
   266e4:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   266e6:	68bb      	ldr	r3, [r7, #8]
   266e8:	099b      	lsrs	r3, r3, #6
   266ea:	b2db      	uxtb	r3, r3
   266ec:	223f      	movs	r2, #63	; 0x3f
   266ee:	4013      	ands	r3, r2
   266f0:	b2da      	uxtb	r2, r3
   266f2:	687b      	ldr	r3, [r7, #4]
   266f4:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   266f6:	68bb      	ldr	r3, [r7, #8]
   266f8:	b2db      	uxtb	r3, r3
   266fa:	223f      	movs	r2, #63	; 0x3f
   266fc:	4013      	ands	r3, r2
   266fe:	b2da      	uxtb	r2, r3
   26700:	687b      	ldr	r3, [r7, #4]
   26702:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26704:	46c0      	nop			; (mov r8, r8)
   26706:	46bd      	mov	sp, r7
   26708:	b004      	add	sp, #16
   2670a:	bd80      	pop	{r7, pc}

0002670c <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   2670c:	b580      	push	{r7, lr}
   2670e:	b084      	sub	sp, #16
   26710:	af00      	add	r7, sp, #0
   26712:	6078      	str	r0, [r7, #4]
   26714:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26716:	687b      	ldr	r3, [r7, #4]
   26718:	681b      	ldr	r3, [r3, #0]
   2671a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   2671c:	683b      	ldr	r3, [r7, #0]
   2671e:	881a      	ldrh	r2, [r3, #0]
   26720:	230e      	movs	r3, #14
   26722:	18fb      	adds	r3, r7, r3
   26724:	2108      	movs	r1, #8
   26726:	430a      	orrs	r2, r1
   26728:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2672a:	683b      	ldr	r3, [r7, #0]
   2672c:	791b      	ldrb	r3, [r3, #4]
   2672e:	2201      	movs	r2, #1
   26730:	4053      	eors	r3, r2
   26732:	b2db      	uxtb	r3, r3
   26734:	2b00      	cmp	r3, #0
   26736:	d007      	beq.n	26748 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26738:	230e      	movs	r3, #14
   2673a:	18fb      	adds	r3, r7, r3
   2673c:	220e      	movs	r2, #14
   2673e:	18ba      	adds	r2, r7, r2
   26740:	8812      	ldrh	r2, [r2, #0]
   26742:	2140      	movs	r1, #64	; 0x40
   26744:	430a      	orrs	r2, r1
   26746:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26748:	683b      	ldr	r3, [r7, #0]
   2674a:	789b      	ldrb	r3, [r3, #2]
   2674c:	2b00      	cmp	r3, #0
   2674e:	d007      	beq.n	26760 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26750:	230e      	movs	r3, #14
   26752:	18fb      	adds	r3, r7, r3
   26754:	220e      	movs	r2, #14
   26756:	18ba      	adds	r2, r7, r2
   26758:	8812      	ldrh	r2, [r2, #0]
   2675a:	2180      	movs	r1, #128	; 0x80
   2675c:	430a      	orrs	r2, r1
   2675e:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   26760:	68bb      	ldr	r3, [r7, #8]
   26762:	220e      	movs	r2, #14
   26764:	18ba      	adds	r2, r7, r2
   26766:	8812      	ldrh	r2, [r2, #0]
   26768:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2676a:	683b      	ldr	r3, [r7, #0]
   2676c:	78db      	ldrb	r3, [r3, #3]
   2676e:	2b00      	cmp	r3, #0
   26770:	d008      	beq.n	26784 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   26772:	68bb      	ldr	r3, [r7, #8]
   26774:	885b      	ldrh	r3, [r3, #2]
   26776:	b29b      	uxth	r3, r3
   26778:	2280      	movs	r2, #128	; 0x80
   2677a:	01d2      	lsls	r2, r2, #7
   2677c:	4313      	orrs	r3, r2
   2677e:	b29a      	uxth	r2, r3
   26780:	68bb      	ldr	r3, [r7, #8]
   26782:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26784:	230d      	movs	r3, #13
   26786:	18fb      	adds	r3, r7, r3
   26788:	2200      	movs	r2, #0
   2678a:	701a      	strb	r2, [r3, #0]
   2678c:	e017      	b.n	267be <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   2678e:	230d      	movs	r3, #13
   26790:	18fb      	adds	r3, r7, r3
   26792:	781a      	ldrb	r2, [r3, #0]
   26794:	0013      	movs	r3, r2
   26796:	009b      	lsls	r3, r3, #2
   26798:	189b      	adds	r3, r3, r2
   2679a:	005b      	lsls	r3, r3, #1
   2679c:	3308      	adds	r3, #8
   2679e:	683a      	ldr	r2, [r7, #0]
   267a0:	18d1      	adds	r1, r2, r3
   267a2:	230d      	movs	r3, #13
   267a4:	18fb      	adds	r3, r7, r3
   267a6:	781a      	ldrb	r2, [r3, #0]
   267a8:	687b      	ldr	r3, [r7, #4]
   267aa:	0018      	movs	r0, r3
   267ac:	4b08      	ldr	r3, [pc, #32]	; (267d0 <_rtc_calendar_set_config+0xc4>)
   267ae:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   267b0:	230d      	movs	r3, #13
   267b2:	18fb      	adds	r3, r7, r3
   267b4:	781a      	ldrb	r2, [r3, #0]
   267b6:	230d      	movs	r3, #13
   267b8:	18fb      	adds	r3, r7, r3
   267ba:	3201      	adds	r2, #1
   267bc:	701a      	strb	r2, [r3, #0]
   267be:	230d      	movs	r3, #13
   267c0:	18fb      	adds	r3, r7, r3
   267c2:	781b      	ldrb	r3, [r3, #0]
   267c4:	2b00      	cmp	r3, #0
   267c6:	d0e2      	beq.n	2678e <_rtc_calendar_set_config+0x82>
	}
}
   267c8:	46c0      	nop			; (mov r8, r8)
   267ca:	46bd      	mov	sp, r7
   267cc:	b004      	add	sp, #16
   267ce:	bd80      	pop	{r7, pc}
   267d0:	000268f5 	.word	0x000268f5

000267d4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   267d4:	b580      	push	{r7, lr}
   267d6:	b086      	sub	sp, #24
   267d8:	af00      	add	r7, sp, #0
   267da:	60f8      	str	r0, [r7, #12]
   267dc:	60b9      	str	r1, [r7, #8]
   267de:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   267e0:	68fb      	ldr	r3, [r7, #12]
   267e2:	68ba      	ldr	r2, [r7, #8]
   267e4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   267e6:	2120      	movs	r1, #32
   267e8:	2000      	movs	r0, #0
   267ea:	4b18      	ldr	r3, [pc, #96]	; (2684c <rtc_calendar_init+0x78>)
   267ec:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   267ee:	2314      	movs	r3, #20
   267f0:	18fb      	adds	r3, r7, r3
   267f2:	0018      	movs	r0, r3
   267f4:	4b16      	ldr	r3, [pc, #88]	; (26850 <rtc_calendar_init+0x7c>)
   267f6:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   267f8:	2314      	movs	r3, #20
   267fa:	18fb      	adds	r3, r7, r3
   267fc:	2202      	movs	r2, #2
   267fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26800:	2314      	movs	r3, #20
   26802:	18fb      	adds	r3, r7, r3
   26804:	0019      	movs	r1, r3
   26806:	2004      	movs	r0, #4
   26808:	4b12      	ldr	r3, [pc, #72]	; (26854 <rtc_calendar_init+0x80>)
   2680a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   2680c:	2004      	movs	r0, #4
   2680e:	4b12      	ldr	r3, [pc, #72]	; (26858 <rtc_calendar_init+0x84>)
   26810:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26812:	68fb      	ldr	r3, [r7, #12]
   26814:	0018      	movs	r0, r3
   26816:	4b11      	ldr	r3, [pc, #68]	; (2685c <rtc_calendar_init+0x88>)
   26818:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2681a:	687b      	ldr	r3, [r7, #4]
   2681c:	791a      	ldrb	r2, [r3, #4]
   2681e:	68fb      	ldr	r3, [r7, #12]
   26820:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26822:	687b      	ldr	r3, [r7, #4]
   26824:	78da      	ldrb	r2, [r3, #3]
   26826:	68fb      	ldr	r3, [r7, #12]
   26828:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2682a:	687b      	ldr	r3, [r7, #4]
   2682c:	88da      	ldrh	r2, [r3, #6]
   2682e:	68fb      	ldr	r3, [r7, #12]
   26830:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26832:	4b0b      	ldr	r3, [pc, #44]	; (26860 <rtc_calendar_init+0x8c>)
   26834:	68fa      	ldr	r2, [r7, #12]
   26836:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26838:	687a      	ldr	r2, [r7, #4]
   2683a:	68fb      	ldr	r3, [r7, #12]
   2683c:	0011      	movs	r1, r2
   2683e:	0018      	movs	r0, r3
   26840:	4b08      	ldr	r3, [pc, #32]	; (26864 <rtc_calendar_init+0x90>)
   26842:	4798      	blx	r3
}
   26844:	46c0      	nop			; (mov r8, r8)
   26846:	46bd      	mov	sp, r7
   26848:	b006      	add	sp, #24
   2684a:	bd80      	pop	{r7, pc}
   2684c:	00026421 	.word	0x00026421
   26850:	00026409 	.word	0x00026409
   26854:	00029839 	.word	0x00029839
   26858:	0002987d 	.word	0x0002987d
   2685c:	00026595 	.word	0x00026595
   26860:	20005abc 	.word	0x20005abc
   26864:	0002670d 	.word	0x0002670d

00026868 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26868:	b580      	push	{r7, lr}
   2686a:	b084      	sub	sp, #16
   2686c:	af00      	add	r7, sp, #0
   2686e:	6078      	str	r0, [r7, #4]
   26870:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26872:	687b      	ldr	r3, [r7, #4]
   26874:	681b      	ldr	r3, [r3, #0]
   26876:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26878:	687b      	ldr	r3, [r7, #4]
   2687a:	795b      	ldrb	r3, [r3, #5]
   2687c:	2201      	movs	r2, #1
   2687e:	4053      	eors	r3, r2
   26880:	b2db      	uxtb	r3, r3
   26882:	2b00      	cmp	r3, #0
   26884:	d00a      	beq.n	2689c <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26886:	68fb      	ldr	r3, [r7, #12]
   26888:	4a16      	ldr	r2, [pc, #88]	; (268e4 <rtc_calendar_get_time+0x7c>)
   2688a:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   2688c:	46c0      	nop			; (mov r8, r8)
   2688e:	687b      	ldr	r3, [r7, #4]
   26890:	0018      	movs	r0, r3
   26892:	4b15      	ldr	r3, [pc, #84]	; (268e8 <rtc_calendar_get_time+0x80>)
   26894:	4798      	blx	r3
   26896:	1e03      	subs	r3, r0, #0
   26898:	d1f9      	bne.n	2688e <rtc_calendar_get_time+0x26>
   2689a:	e016      	b.n	268ca <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   2689c:	68fb      	ldr	r3, [r7, #12]
   2689e:	885b      	ldrh	r3, [r3, #2]
   268a0:	b29b      	uxth	r3, r3
   268a2:	001a      	movs	r2, r3
   268a4:	2380      	movs	r3, #128	; 0x80
   268a6:	01db      	lsls	r3, r3, #7
   268a8:	4013      	ands	r3, r2
   268aa:	d10e      	bne.n	268ca <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   268ac:	68fb      	ldr	r3, [r7, #12]
   268ae:	885b      	ldrh	r3, [r3, #2]
   268b0:	b29b      	uxth	r3, r3
   268b2:	4a0e      	ldr	r2, [pc, #56]	; (268ec <rtc_calendar_get_time+0x84>)
   268b4:	4313      	orrs	r3, r2
   268b6:	b29a      	uxth	r2, r3
   268b8:	68fb      	ldr	r3, [r7, #12]
   268ba:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   268bc:	46c0      	nop			; (mov r8, r8)
   268be:	687b      	ldr	r3, [r7, #4]
   268c0:	0018      	movs	r0, r3
   268c2:	4b09      	ldr	r3, [pc, #36]	; (268e8 <rtc_calendar_get_time+0x80>)
   268c4:	4798      	blx	r3
   268c6:	1e03      	subs	r3, r0, #0
   268c8:	d1f9      	bne.n	268be <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   268ca:	68fb      	ldr	r3, [r7, #12]
   268cc:	691b      	ldr	r3, [r3, #16]
   268ce:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   268d0:	683a      	ldr	r2, [r7, #0]
   268d2:	68b9      	ldr	r1, [r7, #8]
   268d4:	687b      	ldr	r3, [r7, #4]
   268d6:	0018      	movs	r0, r3
   268d8:	4b05      	ldr	r3, [pc, #20]	; (268f0 <rtc_calendar_get_time+0x88>)
   268da:	4798      	blx	r3
}
   268dc:	46c0      	nop			; (mov r8, r8)
   268de:	46bd      	mov	sp, r7
   268e0:	b004      	add	sp, #16
   268e2:	bd80      	pop	{r7, pc}
   268e4:	ffff8000 	.word	0xffff8000
   268e8:	000264d9 	.word	0x000264d9
   268ec:	ffffc000 	.word	0xffffc000
   268f0:	0002666d 	.word	0x0002666d

000268f4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   268f4:	b580      	push	{r7, lr}
   268f6:	b086      	sub	sp, #24
   268f8:	af00      	add	r7, sp, #0
   268fa:	60f8      	str	r0, [r7, #12]
   268fc:	60b9      	str	r1, [r7, #8]
   268fe:	1dfb      	adds	r3, r7, #7
   26900:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26902:	68fb      	ldr	r3, [r7, #12]
   26904:	681b      	ldr	r3, [r3, #0]
   26906:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26908:	1dfb      	adds	r3, r7, #7
   2690a:	781b      	ldrb	r3, [r3, #0]
   2690c:	2b01      	cmp	r3, #1
   2690e:	d901      	bls.n	26914 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26910:	2317      	movs	r3, #23
   26912:	e021      	b.n	26958 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26914:	68ba      	ldr	r2, [r7, #8]
   26916:	68fb      	ldr	r3, [r7, #12]
   26918:	0011      	movs	r1, r2
   2691a:	0018      	movs	r0, r3
   2691c:	4b10      	ldr	r3, [pc, #64]	; (26960 <rtc_calendar_set_alarm+0x6c>)
   2691e:	4798      	blx	r3
   26920:	0003      	movs	r3, r0
   26922:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26924:	46c0      	nop			; (mov r8, r8)
   26926:	68fb      	ldr	r3, [r7, #12]
   26928:	0018      	movs	r0, r3
   2692a:	4b0e      	ldr	r3, [pc, #56]	; (26964 <rtc_calendar_set_alarm+0x70>)
   2692c:	4798      	blx	r3
   2692e:	1e03      	subs	r3, r0, #0
   26930:	d1f9      	bne.n	26926 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26932:	1dfb      	adds	r3, r7, #7
   26934:	781a      	ldrb	r2, [r3, #0]
   26936:	697b      	ldr	r3, [r7, #20]
   26938:	3203      	adds	r2, #3
   2693a:	00d2      	lsls	r2, r2, #3
   2693c:	6939      	ldr	r1, [r7, #16]
   2693e:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26940:	1dfb      	adds	r3, r7, #7
   26942:	781b      	ldrb	r3, [r3, #0]
   26944:	68ba      	ldr	r2, [r7, #8]
   26946:	7a11      	ldrb	r1, [r2, #8]
   26948:	697a      	ldr	r2, [r7, #20]
   2694a:	3303      	adds	r3, #3
   2694c:	00db      	lsls	r3, r3, #3
   2694e:	18d3      	adds	r3, r2, r3
   26950:	3304      	adds	r3, #4
   26952:	1c0a      	adds	r2, r1, #0
   26954:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26956:	2300      	movs	r3, #0
}
   26958:	0018      	movs	r0, r3
   2695a:	46bd      	mov	sp, r7
   2695c:	b006      	add	sp, #24
   2695e:	bd80      	pop	{r7, pc}
   26960:	000265e5 	.word	0x000265e5
   26964:	000264d9 	.word	0x000264d9

00026968 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   26968:	b580      	push	{r7, lr}
   2696a:	b086      	sub	sp, #24
   2696c:	af00      	add	r7, sp, #0
   2696e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26970:	4b28      	ldr	r3, [pc, #160]	; (26a14 <_rtc_interrupt_handler+0xac>)
   26972:	687a      	ldr	r2, [r7, #4]
   26974:	0092      	lsls	r2, r2, #2
   26976:	58d3      	ldr	r3, [r2, r3]
   26978:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2697a:	697b      	ldr	r3, [r7, #20]
   2697c:	681b      	ldr	r3, [r3, #0]
   2697e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26980:	230e      	movs	r3, #14
   26982:	18fb      	adds	r3, r7, r3
   26984:	697a      	ldr	r2, [r7, #20]
   26986:	8a52      	ldrh	r2, [r2, #18]
   26988:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2698a:	697b      	ldr	r3, [r7, #20]
   2698c:	8a1b      	ldrh	r3, [r3, #16]
   2698e:	b29a      	uxth	r2, r3
   26990:	230e      	movs	r3, #14
   26992:	18fb      	adds	r3, r7, r3
   26994:	210e      	movs	r1, #14
   26996:	1879      	adds	r1, r7, r1
   26998:	8809      	ldrh	r1, [r1, #0]
   2699a:	400a      	ands	r2, r1
   2699c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   2699e:	693b      	ldr	r3, [r7, #16]
   269a0:	7a1b      	ldrb	r3, [r3, #8]
   269a2:	b2da      	uxtb	r2, r3
   269a4:	230c      	movs	r3, #12
   269a6:	18fb      	adds	r3, r7, r3
   269a8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   269aa:	693b      	ldr	r3, [r7, #16]
   269ac:	79db      	ldrb	r3, [r3, #7]
   269ae:	b2db      	uxtb	r3, r3
   269b0:	b29a      	uxth	r2, r3
   269b2:	230c      	movs	r3, #12
   269b4:	18fb      	adds	r3, r7, r3
   269b6:	210c      	movs	r1, #12
   269b8:	1879      	adds	r1, r7, r1
   269ba:	8809      	ldrh	r1, [r1, #0]
   269bc:	400a      	ands	r2, r1
   269be:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   269c0:	230c      	movs	r3, #12
   269c2:	18fb      	adds	r3, r7, r3
   269c4:	881b      	ldrh	r3, [r3, #0]
   269c6:	2280      	movs	r2, #128	; 0x80
   269c8:	4013      	ands	r3, r2
   269ca:	d00c      	beq.n	269e6 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   269cc:	230e      	movs	r3, #14
   269ce:	18fb      	adds	r3, r7, r3
   269d0:	881b      	ldrh	r3, [r3, #0]
   269d2:	2202      	movs	r2, #2
   269d4:	4013      	ands	r3, r2
   269d6:	d002      	beq.n	269de <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   269d8:	697b      	ldr	r3, [r7, #20]
   269da:	68db      	ldr	r3, [r3, #12]
   269dc:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   269de:	693b      	ldr	r3, [r7, #16]
   269e0:	2280      	movs	r2, #128	; 0x80
   269e2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   269e4:	e011      	b.n	26a0a <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   269e6:	230c      	movs	r3, #12
   269e8:	18fb      	adds	r3, r7, r3
   269ea:	881b      	ldrh	r3, [r3, #0]
   269ec:	2201      	movs	r2, #1
   269ee:	4013      	ands	r3, r2
   269f0:	d00b      	beq.n	26a0a <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   269f2:	230e      	movs	r3, #14
   269f4:	18fb      	adds	r3, r7, r3
   269f6:	881b      	ldrh	r3, [r3, #0]
   269f8:	2201      	movs	r2, #1
   269fa:	4013      	ands	r3, r2
   269fc:	d002      	beq.n	26a04 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   269fe:	697b      	ldr	r3, [r7, #20]
   26a00:	689b      	ldr	r3, [r3, #8]
   26a02:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26a04:	693b      	ldr	r3, [r7, #16]
   26a06:	2201      	movs	r2, #1
   26a08:	721a      	strb	r2, [r3, #8]
}
   26a0a:	46c0      	nop			; (mov r8, r8)
   26a0c:	46bd      	mov	sp, r7
   26a0e:	b006      	add	sp, #24
   26a10:	bd80      	pop	{r7, pc}
   26a12:	46c0      	nop			; (mov r8, r8)
   26a14:	20005abc 	.word	0x20005abc

00026a18 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26a18:	b580      	push	{r7, lr}
   26a1a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26a1c:	2000      	movs	r0, #0
   26a1e:	4b02      	ldr	r3, [pc, #8]	; (26a28 <RTC_Handler+0x10>)
   26a20:	4798      	blx	r3
}
   26a22:	46c0      	nop			; (mov r8, r8)
   26a24:	46bd      	mov	sp, r7
   26a26:	bd80      	pop	{r7, pc}
   26a28:	00026969 	.word	0x00026969

00026a2c <system_gclk_chan_get_config_defaults>:
{
   26a2c:	b580      	push	{r7, lr}
   26a2e:	b082      	sub	sp, #8
   26a30:	af00      	add	r7, sp, #0
   26a32:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26a34:	687b      	ldr	r3, [r7, #4]
   26a36:	2200      	movs	r2, #0
   26a38:	701a      	strb	r2, [r3, #0]
}
   26a3a:	46c0      	nop			; (mov r8, r8)
   26a3c:	46bd      	mov	sp, r7
   26a3e:	b002      	add	sp, #8
   26a40:	bd80      	pop	{r7, pc}

00026a42 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26a42:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a44:	b08d      	sub	sp, #52	; 0x34
   26a46:	af00      	add	r7, sp, #0
   26a48:	60b8      	str	r0, [r7, #8]
   26a4a:	60f9      	str	r1, [r7, #12]
   26a4c:	603a      	str	r2, [r7, #0]
   26a4e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26a50:	2300      	movs	r3, #0
   26a52:	2400      	movs	r4, #0
   26a54:	623b      	str	r3, [r7, #32]
   26a56:	627c      	str	r4, [r7, #36]	; 0x24
   26a58:	2300      	movs	r3, #0
   26a5a:	2400      	movs	r4, #0
   26a5c:	61bb      	str	r3, [r7, #24]
   26a5e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26a60:	233f      	movs	r3, #63	; 0x3f
   26a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   26a64:	e053      	b.n	26b0e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26a68:	3b20      	subs	r3, #32
   26a6a:	2b00      	cmp	r3, #0
   26a6c:	db04      	blt.n	26a78 <long_division+0x36>
   26a6e:	2201      	movs	r2, #1
   26a70:	409a      	lsls	r2, r3
   26a72:	0013      	movs	r3, r2
   26a74:	617b      	str	r3, [r7, #20]
   26a76:	e00b      	b.n	26a90 <long_division+0x4e>
   26a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26a7a:	2220      	movs	r2, #32
   26a7c:	1ad3      	subs	r3, r2, r3
   26a7e:	2201      	movs	r2, #1
   26a80:	40da      	lsrs	r2, r3
   26a82:	0013      	movs	r3, r2
   26a84:	2100      	movs	r1, #0
   26a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26a88:	4091      	lsls	r1, r2
   26a8a:	000a      	movs	r2, r1
   26a8c:	4313      	orrs	r3, r2
   26a8e:	617b      	str	r3, [r7, #20]
   26a90:	2201      	movs	r2, #1
   26a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26a94:	409a      	lsls	r2, r3
   26a96:	0013      	movs	r3, r2
   26a98:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26a9a:	69bb      	ldr	r3, [r7, #24]
   26a9c:	69fc      	ldr	r4, [r7, #28]
   26a9e:	18db      	adds	r3, r3, r3
   26aa0:	4164      	adcs	r4, r4
   26aa2:	61bb      	str	r3, [r7, #24]
   26aa4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26aa6:	68bb      	ldr	r3, [r7, #8]
   26aa8:	693a      	ldr	r2, [r7, #16]
   26aaa:	401a      	ands	r2, r3
   26aac:	0015      	movs	r5, r2
   26aae:	68fb      	ldr	r3, [r7, #12]
   26ab0:	697a      	ldr	r2, [r7, #20]
   26ab2:	401a      	ands	r2, r3
   26ab4:	0016      	movs	r6, r2
   26ab6:	002b      	movs	r3, r5
   26ab8:	4333      	orrs	r3, r6
   26aba:	d007      	beq.n	26acc <long_division+0x8a>
			r |= 0x01;
   26abc:	69bb      	ldr	r3, [r7, #24]
   26abe:	2201      	movs	r2, #1
   26ac0:	4313      	orrs	r3, r2
   26ac2:	61bb      	str	r3, [r7, #24]
   26ac4:	69fb      	ldr	r3, [r7, #28]
   26ac6:	2200      	movs	r2, #0
   26ac8:	4313      	orrs	r3, r2
   26aca:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26acc:	687a      	ldr	r2, [r7, #4]
   26ace:	69fb      	ldr	r3, [r7, #28]
   26ad0:	429a      	cmp	r2, r3
   26ad2:	d819      	bhi.n	26b08 <long_division+0xc6>
   26ad4:	687a      	ldr	r2, [r7, #4]
   26ad6:	69fb      	ldr	r3, [r7, #28]
   26ad8:	429a      	cmp	r2, r3
   26ada:	d103      	bne.n	26ae4 <long_division+0xa2>
   26adc:	683a      	ldr	r2, [r7, #0]
   26ade:	69bb      	ldr	r3, [r7, #24]
   26ae0:	429a      	cmp	r2, r3
   26ae2:	d811      	bhi.n	26b08 <long_division+0xc6>
			r = r - d;
   26ae4:	69b9      	ldr	r1, [r7, #24]
   26ae6:	69fa      	ldr	r2, [r7, #28]
   26ae8:	683b      	ldr	r3, [r7, #0]
   26aea:	687c      	ldr	r4, [r7, #4]
   26aec:	1ac9      	subs	r1, r1, r3
   26aee:	41a2      	sbcs	r2, r4
   26af0:	000b      	movs	r3, r1
   26af2:	0014      	movs	r4, r2
   26af4:	61bb      	str	r3, [r7, #24]
   26af6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   26af8:	6a3a      	ldr	r2, [r7, #32]
   26afa:	693b      	ldr	r3, [r7, #16]
   26afc:	4313      	orrs	r3, r2
   26afe:	623b      	str	r3, [r7, #32]
   26b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26b02:	697b      	ldr	r3, [r7, #20]
   26b04:	4313      	orrs	r3, r2
   26b06:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26b0a:	3b01      	subs	r3, #1
   26b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   26b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26b10:	2b00      	cmp	r3, #0
   26b12:	daa8      	bge.n	26a66 <long_division+0x24>
		}
	}

	return q;
   26b14:	6a3b      	ldr	r3, [r7, #32]
   26b16:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26b18:	0018      	movs	r0, r3
   26b1a:	0021      	movs	r1, r4
   26b1c:	46bd      	mov	sp, r7
   26b1e:	b00d      	add	sp, #52	; 0x34
   26b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026b22 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26b22:	b580      	push	{r7, lr}
   26b24:	b086      	sub	sp, #24
   26b26:	af00      	add	r7, sp, #0
   26b28:	60f8      	str	r0, [r7, #12]
   26b2a:	60b9      	str	r1, [r7, #8]
   26b2c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26b2e:	2316      	movs	r3, #22
   26b30:	18fb      	adds	r3, r7, r3
   26b32:	2200      	movs	r2, #0
   26b34:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26b36:	68bb      	ldr	r3, [r7, #8]
   26b38:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26b3a:	68bb      	ldr	r3, [r7, #8]
   26b3c:	085a      	lsrs	r2, r3, #1
   26b3e:	68fb      	ldr	r3, [r7, #12]
   26b40:	429a      	cmp	r2, r3
   26b42:	d201      	bcs.n	26b48 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26b44:	2340      	movs	r3, #64	; 0x40
   26b46:	e026      	b.n	26b96 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26b48:	68bb      	ldr	r3, [r7, #8]
   26b4a:	085b      	lsrs	r3, r3, #1
   26b4c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26b4e:	e00a      	b.n	26b66 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26b50:	693a      	ldr	r2, [r7, #16]
   26b52:	68fb      	ldr	r3, [r7, #12]
   26b54:	1ad3      	subs	r3, r2, r3
   26b56:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26b58:	2316      	movs	r3, #22
   26b5a:	18fb      	adds	r3, r7, r3
   26b5c:	881a      	ldrh	r2, [r3, #0]
   26b5e:	2316      	movs	r3, #22
   26b60:	18fb      	adds	r3, r7, r3
   26b62:	3201      	adds	r2, #1
   26b64:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   26b66:	693a      	ldr	r2, [r7, #16]
   26b68:	68fb      	ldr	r3, [r7, #12]
   26b6a:	429a      	cmp	r2, r3
   26b6c:	d2f0      	bcs.n	26b50 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26b6e:	2316      	movs	r3, #22
   26b70:	18fb      	adds	r3, r7, r3
   26b72:	2216      	movs	r2, #22
   26b74:	18ba      	adds	r2, r7, r2
   26b76:	8812      	ldrh	r2, [r2, #0]
   26b78:	3a01      	subs	r2, #1
   26b7a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26b7c:	2316      	movs	r3, #22
   26b7e:	18fb      	adds	r3, r7, r3
   26b80:	881b      	ldrh	r3, [r3, #0]
   26b82:	2bff      	cmp	r3, #255	; 0xff
   26b84:	d901      	bls.n	26b8a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26b86:	2340      	movs	r3, #64	; 0x40
   26b88:	e005      	b.n	26b96 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   26b8a:	687b      	ldr	r3, [r7, #4]
   26b8c:	2216      	movs	r2, #22
   26b8e:	18ba      	adds	r2, r7, r2
   26b90:	8812      	ldrh	r2, [r2, #0]
   26b92:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26b94:	2300      	movs	r3, #0
	}
}
   26b96:	0018      	movs	r0, r3
   26b98:	46bd      	mov	sp, r7
   26b9a:	b006      	add	sp, #24
   26b9c:	bd80      	pop	{r7, pc}
	...

00026ba0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   26ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   26ba2:	b0a1      	sub	sp, #132	; 0x84
   26ba4:	af00      	add	r7, sp, #0
   26ba6:	64f8      	str	r0, [r7, #76]	; 0x4c
   26ba8:	64b9      	str	r1, [r7, #72]	; 0x48
   26baa:	647a      	str	r2, [r7, #68]	; 0x44
   26bac:	2243      	movs	r2, #67	; 0x43
   26bae:	18ba      	adds	r2, r7, r2
   26bb0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   26bb2:	2300      	movs	r3, #0
   26bb4:	2400      	movs	r4, #0
   26bb6:	673b      	str	r3, [r7, #112]	; 0x70
   26bb8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   26bba:	2300      	movs	r3, #0
   26bbc:	2400      	movs	r4, #0
   26bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   26bc0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26bc2:	2300      	movs	r3, #0
   26bc4:	2400      	movs	r4, #0
   26bc6:	67bb      	str	r3, [r7, #120]	; 0x78
   26bc8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   26bca:	2300      	movs	r3, #0
   26bcc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26bce:	2358      	movs	r3, #88	; 0x58
   26bd0:	2240      	movs	r2, #64	; 0x40
   26bd2:	4694      	mov	ip, r2
   26bd4:	44bc      	add	ip, r7
   26bd6:	4463      	add	r3, ip
   26bd8:	781a      	ldrb	r2, [r3, #0]
   26bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26bdc:	435a      	muls	r2, r3
   26bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26be0:	429a      	cmp	r2, r3
   26be2:	d901      	bls.n	26be8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26be4:	2340      	movs	r3, #64	; 0x40
   26be6:	e0b3      	b.n	26d50 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   26be8:	2343      	movs	r3, #67	; 0x43
   26bea:	18fb      	adds	r3, r7, r3
   26bec:	781b      	ldrb	r3, [r3, #0]
   26bee:	2b00      	cmp	r3, #0
   26bf0:	d13d      	bne.n	26c6e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26bf2:	2358      	movs	r3, #88	; 0x58
   26bf4:	2240      	movs	r2, #64	; 0x40
   26bf6:	4694      	mov	ip, r2
   26bf8:	44bc      	add	ip, r7
   26bfa:	4463      	add	r3, ip
   26bfc:	781b      	ldrb	r3, [r3, #0]
   26bfe:	b2db      	uxtb	r3, r3
   26c00:	613b      	str	r3, [r7, #16]
   26c02:	2300      	movs	r3, #0
   26c04:	617b      	str	r3, [r7, #20]
   26c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26c08:	60bb      	str	r3, [r7, #8]
   26c0a:	2300      	movs	r3, #0
   26c0c:	60fb      	str	r3, [r7, #12]
   26c0e:	4c52      	ldr	r4, [pc, #328]	; (26d58 <_sercom_get_async_baud_val+0x1b8>)
   26c10:	68ba      	ldr	r2, [r7, #8]
   26c12:	68fb      	ldr	r3, [r7, #12]
   26c14:	6938      	ldr	r0, [r7, #16]
   26c16:	6979      	ldr	r1, [r7, #20]
   26c18:	47a0      	blx	r4
   26c1a:	0003      	movs	r3, r0
   26c1c:	000c      	movs	r4, r1
   26c1e:	001b      	movs	r3, r3
   26c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   26c22:	2300      	movs	r3, #0
   26c24:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26c28:	603b      	str	r3, [r7, #0]
   26c2a:	2300      	movs	r3, #0
   26c2c:	607b      	str	r3, [r7, #4]
   26c2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26c30:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26c32:	683a      	ldr	r2, [r7, #0]
   26c34:	687b      	ldr	r3, [r7, #4]
   26c36:	4c49      	ldr	r4, [pc, #292]	; (26d5c <_sercom_get_async_baud_val+0x1bc>)
   26c38:	47a0      	blx	r4
   26c3a:	0003      	movs	r3, r0
   26c3c:	000c      	movs	r4, r1
   26c3e:	673b      	str	r3, [r7, #112]	; 0x70
   26c40:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26c42:	2100      	movs	r1, #0
   26c44:	2201      	movs	r2, #1
   26c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26c48:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   26c4a:	1ac9      	subs	r1, r1, r3
   26c4c:	41a2      	sbcs	r2, r4
   26c4e:	000b      	movs	r3, r1
   26c50:	0014      	movs	r4, r2
   26c52:	66bb      	str	r3, [r7, #104]	; 0x68
   26c54:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26c58:	0c1b      	lsrs	r3, r3, #16
   26c5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26c5c:	0416      	lsls	r6, r2, #16
   26c5e:	431e      	orrs	r6, r3
   26c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26c62:	041d      	lsls	r5, r3, #16
   26c64:	0033      	movs	r3, r6
   26c66:	67bb      	str	r3, [r7, #120]	; 0x78
   26c68:	2300      	movs	r3, #0
   26c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   26c6c:	e06a      	b.n	26d44 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26c6e:	2343      	movs	r3, #67	; 0x43
   26c70:	18fb      	adds	r3, r7, r3
   26c72:	781b      	ldrb	r3, [r3, #0]
   26c74:	2b01      	cmp	r3, #1
   26c76:	d165      	bne.n	26d44 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   26c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26c7a:	633b      	str	r3, [r7, #48]	; 0x30
   26c7c:	2300      	movs	r3, #0
   26c7e:	637b      	str	r3, [r7, #52]	; 0x34
   26c80:	2358      	movs	r3, #88	; 0x58
   26c82:	2240      	movs	r2, #64	; 0x40
   26c84:	4694      	mov	ip, r2
   26c86:	44bc      	add	ip, r7
   26c88:	4463      	add	r3, ip
   26c8a:	781b      	ldrb	r3, [r3, #0]
   26c8c:	b2db      	uxtb	r3, r3
   26c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   26c90:	2300      	movs	r3, #0
   26c92:	62fb      	str	r3, [r7, #44]	; 0x2c
   26c94:	4c30      	ldr	r4, [pc, #192]	; (26d58 <_sercom_get_async_baud_val+0x1b8>)
   26c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
   26c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26c9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   26c9e:	47a0      	blx	r4
   26ca0:	0003      	movs	r3, r0
   26ca2:	000c      	movs	r4, r1
   26ca4:	65bb      	str	r3, [r7, #88]	; 0x58
   26ca6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   26ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26caa:	623b      	str	r3, [r7, #32]
   26cac:	2300      	movs	r3, #0
   26cae:	627b      	str	r3, [r7, #36]	; 0x24
   26cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26cb2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26cb4:	001a      	movs	r2, r3
   26cb6:	0023      	movs	r3, r4
   26cb8:	6a38      	ldr	r0, [r7, #32]
   26cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26cbc:	4c27      	ldr	r4, [pc, #156]	; (26d5c <_sercom_get_async_baud_val+0x1bc>)
   26cbe:	47a0      	blx	r4
   26cc0:	0003      	movs	r3, r0
   26cc2:	000c      	movs	r4, r1
   26cc4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   26cc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   26cc8:	2380      	movs	r3, #128	; 0x80
   26cca:	019b      	lsls	r3, r3, #6
   26ccc:	429a      	cmp	r2, r3
   26cce:	d901      	bls.n	26cd4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26cd0:	2340      	movs	r3, #64	; 0x40
   26cd2:	e03d      	b.n	26d50 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26cd6:	61bb      	str	r3, [r7, #24]
   26cd8:	2300      	movs	r3, #0
   26cda:	61fb      	str	r3, [r7, #28]
   26cdc:	69b9      	ldr	r1, [r7, #24]
   26cde:	69fa      	ldr	r2, [r7, #28]
   26ce0:	000b      	movs	r3, r1
   26ce2:	0f5b      	lsrs	r3, r3, #29
   26ce4:	0010      	movs	r0, r2
   26ce6:	00c0      	lsls	r0, r0, #3
   26ce8:	63f8      	str	r0, [r7, #60]	; 0x3c
   26cea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   26cec:	4318      	orrs	r0, r3
   26cee:	63f8      	str	r0, [r7, #60]	; 0x3c
   26cf0:	000b      	movs	r3, r1
   26cf2:	00db      	lsls	r3, r3, #3
   26cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   26cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26cf8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26cfa:	001a      	movs	r2, r3
   26cfc:	0023      	movs	r3, r4
   26cfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26d02:	4c16      	ldr	r4, [pc, #88]	; (26d5c <_sercom_get_async_baud_val+0x1bc>)
   26d04:	47a0      	blx	r4
   26d06:	0003      	movs	r3, r0
   26d08:	000c      	movs	r4, r1
   26d0a:	65bb      	str	r3, [r7, #88]	; 0x58
   26d0c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   26d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26d10:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26d12:	b2d9      	uxtb	r1, r3
   26d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26d16:	b2db      	uxtb	r3, r3
   26d18:	00db      	lsls	r3, r3, #3
   26d1a:	b2da      	uxtb	r2, r3
   26d1c:	2317      	movs	r3, #23
   26d1e:	2040      	movs	r0, #64	; 0x40
   26d20:	4684      	mov	ip, r0
   26d22:	44bc      	add	ip, r7
   26d24:	4463      	add	r3, ip
   26d26:	1a8a      	subs	r2, r1, r2
   26d28:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   26d2a:	2317      	movs	r3, #23
   26d2c:	2240      	movs	r2, #64	; 0x40
   26d2e:	4694      	mov	ip, r2
   26d30:	44bc      	add	ip, r7
   26d32:	4463      	add	r3, ip
   26d34:	781b      	ldrb	r3, [r3, #0]
   26d36:	035b      	lsls	r3, r3, #13
   26d38:	001a      	movs	r2, r3
   26d3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26d3c:	4313      	orrs	r3, r2
   26d3e:	67bb      	str	r3, [r7, #120]	; 0x78
   26d40:	2300      	movs	r3, #0
   26d42:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   26d46:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   26d48:	b29a      	uxth	r2, r3
   26d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26d4c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   26d4e:	2300      	movs	r3, #0
}
   26d50:	0018      	movs	r0, r3
   26d52:	46bd      	mov	sp, r7
   26d54:	b021      	add	sp, #132	; 0x84
   26d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d58:	00032675 	.word	0x00032675
   26d5c:	00026a43 	.word	0x00026a43

00026d60 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26d60:	b580      	push	{r7, lr}
   26d62:	b084      	sub	sp, #16
   26d64:	af00      	add	r7, sp, #0
   26d66:	0002      	movs	r2, r0
   26d68:	1dfb      	adds	r3, r7, #7
   26d6a:	701a      	strb	r2, [r3, #0]
   26d6c:	1dbb      	adds	r3, r7, #6
   26d6e:	1c0a      	adds	r2, r1, #0
   26d70:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   26d72:	4b1a      	ldr	r3, [pc, #104]	; (26ddc <sercom_set_gclk_generator+0x7c>)
   26d74:	781b      	ldrb	r3, [r3, #0]
   26d76:	2201      	movs	r2, #1
   26d78:	4053      	eors	r3, r2
   26d7a:	b2db      	uxtb	r3, r3
   26d7c:	2b00      	cmp	r3, #0
   26d7e:	d103      	bne.n	26d88 <sercom_set_gclk_generator+0x28>
   26d80:	1dbb      	adds	r3, r7, #6
   26d82:	781b      	ldrb	r3, [r3, #0]
   26d84:	2b00      	cmp	r3, #0
   26d86:	d01b      	beq.n	26dc0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26d88:	230c      	movs	r3, #12
   26d8a:	18fb      	adds	r3, r7, r3
   26d8c:	0018      	movs	r0, r3
   26d8e:	4b14      	ldr	r3, [pc, #80]	; (26de0 <sercom_set_gclk_generator+0x80>)
   26d90:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   26d92:	230c      	movs	r3, #12
   26d94:	18fb      	adds	r3, r7, r3
   26d96:	1dfa      	adds	r2, r7, #7
   26d98:	7812      	ldrb	r2, [r2, #0]
   26d9a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   26d9c:	230c      	movs	r3, #12
   26d9e:	18fb      	adds	r3, r7, r3
   26da0:	0019      	movs	r1, r3
   26da2:	2013      	movs	r0, #19
   26da4:	4b0f      	ldr	r3, [pc, #60]	; (26de4 <sercom_set_gclk_generator+0x84>)
   26da6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   26da8:	2013      	movs	r0, #19
   26daa:	4b0f      	ldr	r3, [pc, #60]	; (26de8 <sercom_set_gclk_generator+0x88>)
   26dac:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   26dae:	4b0b      	ldr	r3, [pc, #44]	; (26ddc <sercom_set_gclk_generator+0x7c>)
   26db0:	1dfa      	adds	r2, r7, #7
   26db2:	7812      	ldrb	r2, [r2, #0]
   26db4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   26db6:	4b09      	ldr	r3, [pc, #36]	; (26ddc <sercom_set_gclk_generator+0x7c>)
   26db8:	2201      	movs	r2, #1
   26dba:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   26dbc:	2300      	movs	r3, #0
   26dbe:	e008      	b.n	26dd2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   26dc0:	4b06      	ldr	r3, [pc, #24]	; (26ddc <sercom_set_gclk_generator+0x7c>)
   26dc2:	785b      	ldrb	r3, [r3, #1]
   26dc4:	1dfa      	adds	r2, r7, #7
   26dc6:	7812      	ldrb	r2, [r2, #0]
   26dc8:	429a      	cmp	r2, r3
   26dca:	d101      	bne.n	26dd0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   26dcc:	2300      	movs	r3, #0
   26dce:	e000      	b.n	26dd2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   26dd0:	231d      	movs	r3, #29
}
   26dd2:	0018      	movs	r0, r3
   26dd4:	46bd      	mov	sp, r7
   26dd6:	b004      	add	sp, #16
   26dd8:	bd80      	pop	{r7, pc}
   26dda:	46c0      	nop			; (mov r8, r8)
   26ddc:	2000411c 	.word	0x2000411c
   26de0:	00026a2d 	.word	0x00026a2d
   26de4:	00029839 	.word	0x00029839
   26de8:	0002987d 	.word	0x0002987d

00026dec <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   26dec:	b580      	push	{r7, lr}
   26dee:	b082      	sub	sp, #8
   26df0:	af00      	add	r7, sp, #0
   26df2:	6078      	str	r0, [r7, #4]
   26df4:	000a      	movs	r2, r1
   26df6:	1cfb      	adds	r3, r7, #3
   26df8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   26dfa:	687b      	ldr	r3, [r7, #4]
   26dfc:	4a4d      	ldr	r2, [pc, #308]	; (26f34 <_sercom_get_default_pad+0x148>)
   26dfe:	4293      	cmp	r3, r2
   26e00:	d03f      	beq.n	26e82 <_sercom_get_default_pad+0x96>
   26e02:	4a4c      	ldr	r2, [pc, #304]	; (26f34 <_sercom_get_default_pad+0x148>)
   26e04:	4293      	cmp	r3, r2
   26e06:	d806      	bhi.n	26e16 <_sercom_get_default_pad+0x2a>
   26e08:	4a4b      	ldr	r2, [pc, #300]	; (26f38 <_sercom_get_default_pad+0x14c>)
   26e0a:	4293      	cmp	r3, r2
   26e0c:	d00f      	beq.n	26e2e <_sercom_get_default_pad+0x42>
   26e0e:	4a4b      	ldr	r2, [pc, #300]	; (26f3c <_sercom_get_default_pad+0x150>)
   26e10:	4293      	cmp	r3, r2
   26e12:	d021      	beq.n	26e58 <_sercom_get_default_pad+0x6c>
   26e14:	e089      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26e16:	4a4a      	ldr	r2, [pc, #296]	; (26f40 <_sercom_get_default_pad+0x154>)
   26e18:	4293      	cmp	r3, r2
   26e1a:	d100      	bne.n	26e1e <_sercom_get_default_pad+0x32>
   26e1c:	e05b      	b.n	26ed6 <_sercom_get_default_pad+0xea>
   26e1e:	4a49      	ldr	r2, [pc, #292]	; (26f44 <_sercom_get_default_pad+0x158>)
   26e20:	4293      	cmp	r3, r2
   26e22:	d100      	bne.n	26e26 <_sercom_get_default_pad+0x3a>
   26e24:	e06c      	b.n	26f00 <_sercom_get_default_pad+0x114>
   26e26:	4a48      	ldr	r2, [pc, #288]	; (26f48 <_sercom_get_default_pad+0x15c>)
   26e28:	4293      	cmp	r3, r2
   26e2a:	d03f      	beq.n	26eac <_sercom_get_default_pad+0xc0>
   26e2c:	e07d      	b.n	26f2a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   26e2e:	1cfb      	adds	r3, r7, #3
   26e30:	781b      	ldrb	r3, [r3, #0]
   26e32:	2b01      	cmp	r3, #1
   26e34:	d00a      	beq.n	26e4c <_sercom_get_default_pad+0x60>
   26e36:	dc02      	bgt.n	26e3e <_sercom_get_default_pad+0x52>
   26e38:	2b00      	cmp	r3, #0
   26e3a:	d005      	beq.n	26e48 <_sercom_get_default_pad+0x5c>
   26e3c:	e075      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26e3e:	2b02      	cmp	r3, #2
   26e40:	d006      	beq.n	26e50 <_sercom_get_default_pad+0x64>
   26e42:	2b03      	cmp	r3, #3
   26e44:	d006      	beq.n	26e54 <_sercom_get_default_pad+0x68>
   26e46:	e070      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26e48:	4b40      	ldr	r3, [pc, #256]	; (26f4c <_sercom_get_default_pad+0x160>)
   26e4a:	e06f      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e4c:	4b40      	ldr	r3, [pc, #256]	; (26f50 <_sercom_get_default_pad+0x164>)
   26e4e:	e06d      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e50:	4b40      	ldr	r3, [pc, #256]	; (26f54 <_sercom_get_default_pad+0x168>)
   26e52:	e06b      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e54:	4b40      	ldr	r3, [pc, #256]	; (26f58 <_sercom_get_default_pad+0x16c>)
   26e56:	e069      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e58:	1cfb      	adds	r3, r7, #3
   26e5a:	781b      	ldrb	r3, [r3, #0]
   26e5c:	2b01      	cmp	r3, #1
   26e5e:	d00a      	beq.n	26e76 <_sercom_get_default_pad+0x8a>
   26e60:	dc02      	bgt.n	26e68 <_sercom_get_default_pad+0x7c>
   26e62:	2b00      	cmp	r3, #0
   26e64:	d005      	beq.n	26e72 <_sercom_get_default_pad+0x86>
   26e66:	e060      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26e68:	2b02      	cmp	r3, #2
   26e6a:	d006      	beq.n	26e7a <_sercom_get_default_pad+0x8e>
   26e6c:	2b03      	cmp	r3, #3
   26e6e:	d006      	beq.n	26e7e <_sercom_get_default_pad+0x92>
   26e70:	e05b      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26e72:	2303      	movs	r3, #3
   26e74:	e05a      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e76:	4b39      	ldr	r3, [pc, #228]	; (26f5c <_sercom_get_default_pad+0x170>)
   26e78:	e058      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e7a:	4b39      	ldr	r3, [pc, #228]	; (26f60 <_sercom_get_default_pad+0x174>)
   26e7c:	e056      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e7e:	4b39      	ldr	r3, [pc, #228]	; (26f64 <_sercom_get_default_pad+0x178>)
   26e80:	e054      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26e82:	1cfb      	adds	r3, r7, #3
   26e84:	781b      	ldrb	r3, [r3, #0]
   26e86:	2b01      	cmp	r3, #1
   26e88:	d00a      	beq.n	26ea0 <_sercom_get_default_pad+0xb4>
   26e8a:	dc02      	bgt.n	26e92 <_sercom_get_default_pad+0xa6>
   26e8c:	2b00      	cmp	r3, #0
   26e8e:	d005      	beq.n	26e9c <_sercom_get_default_pad+0xb0>
   26e90:	e04b      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26e92:	2b02      	cmp	r3, #2
   26e94:	d006      	beq.n	26ea4 <_sercom_get_default_pad+0xb8>
   26e96:	2b03      	cmp	r3, #3
   26e98:	d006      	beq.n	26ea8 <_sercom_get_default_pad+0xbc>
   26e9a:	e046      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26e9c:	4b32      	ldr	r3, [pc, #200]	; (26f68 <_sercom_get_default_pad+0x17c>)
   26e9e:	e045      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ea0:	4b32      	ldr	r3, [pc, #200]	; (26f6c <_sercom_get_default_pad+0x180>)
   26ea2:	e043      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ea4:	4b32      	ldr	r3, [pc, #200]	; (26f70 <_sercom_get_default_pad+0x184>)
   26ea6:	e041      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ea8:	4b32      	ldr	r3, [pc, #200]	; (26f74 <_sercom_get_default_pad+0x188>)
   26eaa:	e03f      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26eac:	1cfb      	adds	r3, r7, #3
   26eae:	781b      	ldrb	r3, [r3, #0]
   26eb0:	2b01      	cmp	r3, #1
   26eb2:	d00a      	beq.n	26eca <_sercom_get_default_pad+0xde>
   26eb4:	dc02      	bgt.n	26ebc <_sercom_get_default_pad+0xd0>
   26eb6:	2b00      	cmp	r3, #0
   26eb8:	d005      	beq.n	26ec6 <_sercom_get_default_pad+0xda>
   26eba:	e036      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26ebc:	2b02      	cmp	r3, #2
   26ebe:	d006      	beq.n	26ece <_sercom_get_default_pad+0xe2>
   26ec0:	2b03      	cmp	r3, #3
   26ec2:	d006      	beq.n	26ed2 <_sercom_get_default_pad+0xe6>
   26ec4:	e031      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26ec6:	4b2c      	ldr	r3, [pc, #176]	; (26f78 <_sercom_get_default_pad+0x18c>)
   26ec8:	e030      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26eca:	4b2c      	ldr	r3, [pc, #176]	; (26f7c <_sercom_get_default_pad+0x190>)
   26ecc:	e02e      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ece:	4b2c      	ldr	r3, [pc, #176]	; (26f80 <_sercom_get_default_pad+0x194>)
   26ed0:	e02c      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ed2:	4b2c      	ldr	r3, [pc, #176]	; (26f84 <_sercom_get_default_pad+0x198>)
   26ed4:	e02a      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ed6:	1cfb      	adds	r3, r7, #3
   26ed8:	781b      	ldrb	r3, [r3, #0]
   26eda:	2b01      	cmp	r3, #1
   26edc:	d00a      	beq.n	26ef4 <_sercom_get_default_pad+0x108>
   26ede:	dc02      	bgt.n	26ee6 <_sercom_get_default_pad+0xfa>
   26ee0:	2b00      	cmp	r3, #0
   26ee2:	d005      	beq.n	26ef0 <_sercom_get_default_pad+0x104>
   26ee4:	e021      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26ee6:	2b02      	cmp	r3, #2
   26ee8:	d006      	beq.n	26ef8 <_sercom_get_default_pad+0x10c>
   26eea:	2b03      	cmp	r3, #3
   26eec:	d006      	beq.n	26efc <_sercom_get_default_pad+0x110>
   26eee:	e01c      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26ef0:	4b25      	ldr	r3, [pc, #148]	; (26f88 <_sercom_get_default_pad+0x19c>)
   26ef2:	e01b      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ef4:	4b25      	ldr	r3, [pc, #148]	; (26f8c <_sercom_get_default_pad+0x1a0>)
   26ef6:	e019      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26ef8:	4b25      	ldr	r3, [pc, #148]	; (26f90 <_sercom_get_default_pad+0x1a4>)
   26efa:	e017      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26efc:	4b25      	ldr	r3, [pc, #148]	; (26f94 <_sercom_get_default_pad+0x1a8>)
   26efe:	e015      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26f00:	1cfb      	adds	r3, r7, #3
   26f02:	781b      	ldrb	r3, [r3, #0]
   26f04:	2b01      	cmp	r3, #1
   26f06:	d00a      	beq.n	26f1e <_sercom_get_default_pad+0x132>
   26f08:	dc02      	bgt.n	26f10 <_sercom_get_default_pad+0x124>
   26f0a:	2b00      	cmp	r3, #0
   26f0c:	d005      	beq.n	26f1a <_sercom_get_default_pad+0x12e>
   26f0e:	e00c      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26f10:	2b02      	cmp	r3, #2
   26f12:	d006      	beq.n	26f22 <_sercom_get_default_pad+0x136>
   26f14:	2b03      	cmp	r3, #3
   26f16:	d006      	beq.n	26f26 <_sercom_get_default_pad+0x13a>
   26f18:	e007      	b.n	26f2a <_sercom_get_default_pad+0x13e>
   26f1a:	4b1f      	ldr	r3, [pc, #124]	; (26f98 <_sercom_get_default_pad+0x1ac>)
   26f1c:	e006      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26f1e:	4b1f      	ldr	r3, [pc, #124]	; (26f9c <_sercom_get_default_pad+0x1b0>)
   26f20:	e004      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26f22:	4b1f      	ldr	r3, [pc, #124]	; (26fa0 <_sercom_get_default_pad+0x1b4>)
   26f24:	e002      	b.n	26f2c <_sercom_get_default_pad+0x140>
   26f26:	4b1f      	ldr	r3, [pc, #124]	; (26fa4 <_sercom_get_default_pad+0x1b8>)
   26f28:	e000      	b.n	26f2c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   26f2a:	2300      	movs	r3, #0
}
   26f2c:	0018      	movs	r0, r3
   26f2e:	46bd      	mov	sp, r7
   26f30:	b002      	add	sp, #8
   26f32:	bd80      	pop	{r7, pc}
   26f34:	42001000 	.word	0x42001000
   26f38:	42000800 	.word	0x42000800
   26f3c:	42000c00 	.word	0x42000c00
   26f40:	42001800 	.word	0x42001800
   26f44:	42001c00 	.word	0x42001c00
   26f48:	42001400 	.word	0x42001400
   26f4c:	00040003 	.word	0x00040003
   26f50:	00050003 	.word	0x00050003
   26f54:	00060003 	.word	0x00060003
   26f58:	00070003 	.word	0x00070003
   26f5c:	00010003 	.word	0x00010003
   26f60:	001e0003 	.word	0x001e0003
   26f64:	001f0003 	.word	0x001f0003
   26f68:	00080003 	.word	0x00080003
   26f6c:	00090003 	.word	0x00090003
   26f70:	000a0003 	.word	0x000a0003
   26f74:	000b0003 	.word	0x000b0003
   26f78:	00100003 	.word	0x00100003
   26f7c:	00110003 	.word	0x00110003
   26f80:	00120003 	.word	0x00120003
   26f84:	00130003 	.word	0x00130003
   26f88:	000c0003 	.word	0x000c0003
   26f8c:	000d0003 	.word	0x000d0003
   26f90:	000e0003 	.word	0x000e0003
   26f94:	000f0003 	.word	0x000f0003
   26f98:	00160003 	.word	0x00160003
   26f9c:	00170003 	.word	0x00170003
   26fa0:	00180003 	.word	0x00180003
   26fa4:	00190003 	.word	0x00190003

00026fa8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   26fa8:	b590      	push	{r4, r7, lr}
   26faa:	b08b      	sub	sp, #44	; 0x2c
   26fac:	af00      	add	r7, sp, #0
   26fae:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   26fb0:	230c      	movs	r3, #12
   26fb2:	18fb      	adds	r3, r7, r3
   26fb4:	4a0f      	ldr	r2, [pc, #60]	; (26ff4 <_sercom_get_sercom_inst_index+0x4c>)
   26fb6:	ca13      	ldmia	r2!, {r0, r1, r4}
   26fb8:	c313      	stmia	r3!, {r0, r1, r4}
   26fba:	ca13      	ldmia	r2!, {r0, r1, r4}
   26fbc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26fbe:	2300      	movs	r3, #0
   26fc0:	627b      	str	r3, [r7, #36]	; 0x24
   26fc2:	e00e      	b.n	26fe2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   26fc4:	230c      	movs	r3, #12
   26fc6:	18fb      	adds	r3, r7, r3
   26fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26fca:	0092      	lsls	r2, r2, #2
   26fcc:	58d3      	ldr	r3, [r2, r3]
   26fce:	001a      	movs	r2, r3
   26fd0:	687b      	ldr	r3, [r7, #4]
   26fd2:	429a      	cmp	r2, r3
   26fd4:	d102      	bne.n	26fdc <_sercom_get_sercom_inst_index+0x34>
			return i;
   26fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26fd8:	b2db      	uxtb	r3, r3
   26fda:	e006      	b.n	26fea <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26fde:	3301      	adds	r3, #1
   26fe0:	627b      	str	r3, [r7, #36]	; 0x24
   26fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26fe4:	2b05      	cmp	r3, #5
   26fe6:	d9ed      	bls.n	26fc4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   26fe8:	2300      	movs	r3, #0
}
   26fea:	0018      	movs	r0, r3
   26fec:	46bd      	mov	sp, r7
   26fee:	b00b      	add	sp, #44	; 0x2c
   26ff0:	bd90      	pop	{r4, r7, pc}
   26ff2:	46c0      	nop			; (mov r8, r8)
   26ff4:	00038944 	.word	0x00038944

00026ff8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   26ff8:	b580      	push	{r7, lr}
   26ffa:	b082      	sub	sp, #8
   26ffc:	af00      	add	r7, sp, #0
   26ffe:	0002      	movs	r2, r0
   27000:	1dfb      	adds	r3, r7, #7
   27002:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27004:	46c0      	nop			; (mov r8, r8)
   27006:	46bd      	mov	sp, r7
   27008:	b002      	add	sp, #8
   2700a:	bd80      	pop	{r7, pc}

0002700c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   2700c:	b580      	push	{r7, lr}
   2700e:	b084      	sub	sp, #16
   27010:	af00      	add	r7, sp, #0
   27012:	0002      	movs	r2, r0
   27014:	6039      	str	r1, [r7, #0]
   27016:	1dfb      	adds	r3, r7, #7
   27018:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2701a:	4b13      	ldr	r3, [pc, #76]	; (27068 <_sercom_set_handler+0x5c>)
   2701c:	781b      	ldrb	r3, [r3, #0]
   2701e:	2201      	movs	r2, #1
   27020:	4053      	eors	r3, r2
   27022:	b2db      	uxtb	r3, r3
   27024:	2b00      	cmp	r3, #0
   27026:	d015      	beq.n	27054 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27028:	2300      	movs	r3, #0
   2702a:	60fb      	str	r3, [r7, #12]
   2702c:	e00c      	b.n	27048 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   2702e:	4b0f      	ldr	r3, [pc, #60]	; (2706c <_sercom_set_handler+0x60>)
   27030:	68fa      	ldr	r2, [r7, #12]
   27032:	0092      	lsls	r2, r2, #2
   27034:	490e      	ldr	r1, [pc, #56]	; (27070 <_sercom_set_handler+0x64>)
   27036:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   27038:	4b0e      	ldr	r3, [pc, #56]	; (27074 <_sercom_set_handler+0x68>)
   2703a:	68fa      	ldr	r2, [r7, #12]
   2703c:	0092      	lsls	r2, r2, #2
   2703e:	2100      	movs	r1, #0
   27040:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27042:	68fb      	ldr	r3, [r7, #12]
   27044:	3301      	adds	r3, #1
   27046:	60fb      	str	r3, [r7, #12]
   27048:	68fb      	ldr	r3, [r7, #12]
   2704a:	2b05      	cmp	r3, #5
   2704c:	d9ef      	bls.n	2702e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   2704e:	4b06      	ldr	r3, [pc, #24]	; (27068 <_sercom_set_handler+0x5c>)
   27050:	2201      	movs	r2, #1
   27052:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27054:	1dfb      	adds	r3, r7, #7
   27056:	781a      	ldrb	r2, [r3, #0]
   27058:	4b04      	ldr	r3, [pc, #16]	; (2706c <_sercom_set_handler+0x60>)
   2705a:	0092      	lsls	r2, r2, #2
   2705c:	6839      	ldr	r1, [r7, #0]
   2705e:	50d1      	str	r1, [r2, r3]
}
   27060:	46c0      	nop			; (mov r8, r8)
   27062:	46bd      	mov	sp, r7
   27064:	b004      	add	sp, #16
   27066:	bd80      	pop	{r7, pc}
   27068:	2000411e 	.word	0x2000411e
   2706c:	20004120 	.word	0x20004120
   27070:	00026ff9 	.word	0x00026ff9
   27074:	20005ac0 	.word	0x20005ac0

00027078 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   27078:	b590      	push	{r4, r7, lr}
   2707a:	b085      	sub	sp, #20
   2707c:	af00      	add	r7, sp, #0
   2707e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27080:	2308      	movs	r3, #8
   27082:	18fb      	adds	r3, r7, r3
   27084:	4a0b      	ldr	r2, [pc, #44]	; (270b4 <_sercom_get_interrupt_vector+0x3c>)
   27086:	6811      	ldr	r1, [r2, #0]
   27088:	6019      	str	r1, [r3, #0]
   2708a:	8892      	ldrh	r2, [r2, #4]
   2708c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   2708e:	230f      	movs	r3, #15
   27090:	18fc      	adds	r4, r7, r3
   27092:	687b      	ldr	r3, [r7, #4]
   27094:	0018      	movs	r0, r3
   27096:	4b08      	ldr	r3, [pc, #32]	; (270b8 <_sercom_get_interrupt_vector+0x40>)
   27098:	4798      	blx	r3
   2709a:	0003      	movs	r3, r0
   2709c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   2709e:	230f      	movs	r3, #15
   270a0:	18fb      	adds	r3, r7, r3
   270a2:	781b      	ldrb	r3, [r3, #0]
   270a4:	2208      	movs	r2, #8
   270a6:	18ba      	adds	r2, r7, r2
   270a8:	5cd3      	ldrb	r3, [r2, r3]
   270aa:	b25b      	sxtb	r3, r3
}
   270ac:	0018      	movs	r0, r3
   270ae:	46bd      	mov	sp, r7
   270b0:	b005      	add	sp, #20
   270b2:	bd90      	pop	{r4, r7, pc}
   270b4:	0003895c 	.word	0x0003895c
   270b8:	00026fa9 	.word	0x00026fa9

000270bc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   270bc:	b580      	push	{r7, lr}
   270be:	af00      	add	r7, sp, #0
   270c0:	4b03      	ldr	r3, [pc, #12]	; (270d0 <SERCOM0_Handler+0x14>)
   270c2:	681b      	ldr	r3, [r3, #0]
   270c4:	2000      	movs	r0, #0
   270c6:	4798      	blx	r3
   270c8:	46c0      	nop			; (mov r8, r8)
   270ca:	46bd      	mov	sp, r7
   270cc:	bd80      	pop	{r7, pc}
   270ce:	46c0      	nop			; (mov r8, r8)
   270d0:	20004120 	.word	0x20004120

000270d4 <SERCOM1_Handler>:
   270d4:	b580      	push	{r7, lr}
   270d6:	af00      	add	r7, sp, #0
   270d8:	4b03      	ldr	r3, [pc, #12]	; (270e8 <SERCOM1_Handler+0x14>)
   270da:	685b      	ldr	r3, [r3, #4]
   270dc:	2001      	movs	r0, #1
   270de:	4798      	blx	r3
   270e0:	46c0      	nop			; (mov r8, r8)
   270e2:	46bd      	mov	sp, r7
   270e4:	bd80      	pop	{r7, pc}
   270e6:	46c0      	nop			; (mov r8, r8)
   270e8:	20004120 	.word	0x20004120

000270ec <SERCOM2_Handler>:
   270ec:	b580      	push	{r7, lr}
   270ee:	af00      	add	r7, sp, #0
   270f0:	4b03      	ldr	r3, [pc, #12]	; (27100 <SERCOM2_Handler+0x14>)
   270f2:	689b      	ldr	r3, [r3, #8]
   270f4:	2002      	movs	r0, #2
   270f6:	4798      	blx	r3
   270f8:	46c0      	nop			; (mov r8, r8)
   270fa:	46bd      	mov	sp, r7
   270fc:	bd80      	pop	{r7, pc}
   270fe:	46c0      	nop			; (mov r8, r8)
   27100:	20004120 	.word	0x20004120

00027104 <SERCOM3_Handler>:
   27104:	b580      	push	{r7, lr}
   27106:	af00      	add	r7, sp, #0
   27108:	4b03      	ldr	r3, [pc, #12]	; (27118 <SERCOM3_Handler+0x14>)
   2710a:	68db      	ldr	r3, [r3, #12]
   2710c:	2003      	movs	r0, #3
   2710e:	4798      	blx	r3
   27110:	46c0      	nop			; (mov r8, r8)
   27112:	46bd      	mov	sp, r7
   27114:	bd80      	pop	{r7, pc}
   27116:	46c0      	nop			; (mov r8, r8)
   27118:	20004120 	.word	0x20004120

0002711c <SERCOM4_Handler>:
   2711c:	b580      	push	{r7, lr}
   2711e:	af00      	add	r7, sp, #0
   27120:	4b03      	ldr	r3, [pc, #12]	; (27130 <SERCOM4_Handler+0x14>)
   27122:	691b      	ldr	r3, [r3, #16]
   27124:	2004      	movs	r0, #4
   27126:	4798      	blx	r3
   27128:	46c0      	nop			; (mov r8, r8)
   2712a:	46bd      	mov	sp, r7
   2712c:	bd80      	pop	{r7, pc}
   2712e:	46c0      	nop			; (mov r8, r8)
   27130:	20004120 	.word	0x20004120

00027134 <SERCOM5_Handler>:
   27134:	b580      	push	{r7, lr}
   27136:	af00      	add	r7, sp, #0
   27138:	4b03      	ldr	r3, [pc, #12]	; (27148 <SERCOM5_Handler+0x14>)
   2713a:	695b      	ldr	r3, [r3, #20]
   2713c:	2005      	movs	r0, #5
   2713e:	4798      	blx	r3
   27140:	46c0      	nop			; (mov r8, r8)
   27142:	46bd      	mov	sp, r7
   27144:	bd80      	pop	{r7, pc}
   27146:	46c0      	nop			; (mov r8, r8)
   27148:	20004120 	.word	0x20004120

0002714c <system_pinmux_get_config_defaults>:
{
   2714c:	b580      	push	{r7, lr}
   2714e:	b082      	sub	sp, #8
   27150:	af00      	add	r7, sp, #0
   27152:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27154:	687b      	ldr	r3, [r7, #4]
   27156:	2280      	movs	r2, #128	; 0x80
   27158:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2715a:	687b      	ldr	r3, [r7, #4]
   2715c:	2200      	movs	r2, #0
   2715e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27160:	687b      	ldr	r3, [r7, #4]
   27162:	2201      	movs	r2, #1
   27164:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27166:	687b      	ldr	r3, [r7, #4]
   27168:	2200      	movs	r2, #0
   2716a:	70da      	strb	r2, [r3, #3]
}
   2716c:	46c0      	nop			; (mov r8, r8)
   2716e:	46bd      	mov	sp, r7
   27170:	b002      	add	sp, #8
   27172:	bd80      	pop	{r7, pc}

00027174 <system_pinmux_get_group_from_gpio_pin>:
{
   27174:	b580      	push	{r7, lr}
   27176:	b084      	sub	sp, #16
   27178:	af00      	add	r7, sp, #0
   2717a:	0002      	movs	r2, r0
   2717c:	1dfb      	adds	r3, r7, #7
   2717e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27180:	230f      	movs	r3, #15
   27182:	18fb      	adds	r3, r7, r3
   27184:	1dfa      	adds	r2, r7, #7
   27186:	7812      	ldrb	r2, [r2, #0]
   27188:	09d2      	lsrs	r2, r2, #7
   2718a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2718c:	230e      	movs	r3, #14
   2718e:	18fb      	adds	r3, r7, r3
   27190:	1dfa      	adds	r2, r7, #7
   27192:	7812      	ldrb	r2, [r2, #0]
   27194:	0952      	lsrs	r2, r2, #5
   27196:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27198:	4b0d      	ldr	r3, [pc, #52]	; (271d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2719a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2719c:	230f      	movs	r3, #15
   2719e:	18fb      	adds	r3, r7, r3
   271a0:	781b      	ldrb	r3, [r3, #0]
   271a2:	2b00      	cmp	r3, #0
   271a4:	d10f      	bne.n	271c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   271a6:	230f      	movs	r3, #15
   271a8:	18fb      	adds	r3, r7, r3
   271aa:	781b      	ldrb	r3, [r3, #0]
   271ac:	009b      	lsls	r3, r3, #2
   271ae:	2210      	movs	r2, #16
   271b0:	4694      	mov	ip, r2
   271b2:	44bc      	add	ip, r7
   271b4:	4463      	add	r3, ip
   271b6:	3b08      	subs	r3, #8
   271b8:	681a      	ldr	r2, [r3, #0]
   271ba:	230e      	movs	r3, #14
   271bc:	18fb      	adds	r3, r7, r3
   271be:	781b      	ldrb	r3, [r3, #0]
   271c0:	01db      	lsls	r3, r3, #7
   271c2:	18d3      	adds	r3, r2, r3
   271c4:	e000      	b.n	271c8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   271c6:	2300      	movs	r3, #0
}
   271c8:	0018      	movs	r0, r3
   271ca:	46bd      	mov	sp, r7
   271cc:	b004      	add	sp, #16
   271ce:	bd80      	pop	{r7, pc}
   271d0:	41004400 	.word	0x41004400

000271d4 <port_get_group_from_gpio_pin>:
{
   271d4:	b580      	push	{r7, lr}
   271d6:	b082      	sub	sp, #8
   271d8:	af00      	add	r7, sp, #0
   271da:	0002      	movs	r2, r0
   271dc:	1dfb      	adds	r3, r7, #7
   271de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   271e0:	1dfb      	adds	r3, r7, #7
   271e2:	781b      	ldrb	r3, [r3, #0]
   271e4:	0018      	movs	r0, r3
   271e6:	4b03      	ldr	r3, [pc, #12]	; (271f4 <port_get_group_from_gpio_pin+0x20>)
   271e8:	4798      	blx	r3
   271ea:	0003      	movs	r3, r0
}
   271ec:	0018      	movs	r0, r3
   271ee:	46bd      	mov	sp, r7
   271f0:	b002      	add	sp, #8
   271f2:	bd80      	pop	{r7, pc}
   271f4:	00027175 	.word	0x00027175

000271f8 <port_pin_set_output_level>:
{
   271f8:	b580      	push	{r7, lr}
   271fa:	b084      	sub	sp, #16
   271fc:	af00      	add	r7, sp, #0
   271fe:	0002      	movs	r2, r0
   27200:	1dfb      	adds	r3, r7, #7
   27202:	701a      	strb	r2, [r3, #0]
   27204:	1dbb      	adds	r3, r7, #6
   27206:	1c0a      	adds	r2, r1, #0
   27208:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2720a:	1dfb      	adds	r3, r7, #7
   2720c:	781b      	ldrb	r3, [r3, #0]
   2720e:	0018      	movs	r0, r3
   27210:	4b0d      	ldr	r3, [pc, #52]	; (27248 <port_pin_set_output_level+0x50>)
   27212:	4798      	blx	r3
   27214:	0003      	movs	r3, r0
   27216:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27218:	1dfb      	adds	r3, r7, #7
   2721a:	781b      	ldrb	r3, [r3, #0]
   2721c:	221f      	movs	r2, #31
   2721e:	4013      	ands	r3, r2
   27220:	2201      	movs	r2, #1
   27222:	409a      	lsls	r2, r3
   27224:	0013      	movs	r3, r2
   27226:	60bb      	str	r3, [r7, #8]
	if (level) {
   27228:	1dbb      	adds	r3, r7, #6
   2722a:	781b      	ldrb	r3, [r3, #0]
   2722c:	2b00      	cmp	r3, #0
   2722e:	d003      	beq.n	27238 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27230:	68fb      	ldr	r3, [r7, #12]
   27232:	68ba      	ldr	r2, [r7, #8]
   27234:	619a      	str	r2, [r3, #24]
}
   27236:	e002      	b.n	2723e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   27238:	68fb      	ldr	r3, [r7, #12]
   2723a:	68ba      	ldr	r2, [r7, #8]
   2723c:	615a      	str	r2, [r3, #20]
}
   2723e:	46c0      	nop			; (mov r8, r8)
   27240:	46bd      	mov	sp, r7
   27242:	b004      	add	sp, #16
   27244:	bd80      	pop	{r7, pc}
   27246:	46c0      	nop			; (mov r8, r8)
   27248:	000271d5 	.word	0x000271d5

0002724c <system_gclk_chan_get_config_defaults>:
{
   2724c:	b580      	push	{r7, lr}
   2724e:	b082      	sub	sp, #8
   27250:	af00      	add	r7, sp, #0
   27252:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27254:	687b      	ldr	r3, [r7, #4]
   27256:	2200      	movs	r2, #0
   27258:	701a      	strb	r2, [r3, #0]
}
   2725a:	46c0      	nop			; (mov r8, r8)
   2725c:	46bd      	mov	sp, r7
   2725e:	b002      	add	sp, #8
   27260:	bd80      	pop	{r7, pc}
	...

00027264 <system_apb_clock_set_mask>:
{
   27264:	b580      	push	{r7, lr}
   27266:	b082      	sub	sp, #8
   27268:	af00      	add	r7, sp, #0
   2726a:	0002      	movs	r2, r0
   2726c:	6039      	str	r1, [r7, #0]
   2726e:	1dfb      	adds	r3, r7, #7
   27270:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27272:	1dfb      	adds	r3, r7, #7
   27274:	781b      	ldrb	r3, [r3, #0]
   27276:	2b01      	cmp	r3, #1
   27278:	d00a      	beq.n	27290 <system_apb_clock_set_mask+0x2c>
   2727a:	2b02      	cmp	r3, #2
   2727c:	d00f      	beq.n	2729e <system_apb_clock_set_mask+0x3a>
   2727e:	2b00      	cmp	r3, #0
   27280:	d114      	bne.n	272ac <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27282:	4b0e      	ldr	r3, [pc, #56]	; (272bc <system_apb_clock_set_mask+0x58>)
   27284:	4a0d      	ldr	r2, [pc, #52]	; (272bc <system_apb_clock_set_mask+0x58>)
   27286:	6991      	ldr	r1, [r2, #24]
   27288:	683a      	ldr	r2, [r7, #0]
   2728a:	430a      	orrs	r2, r1
   2728c:	619a      	str	r2, [r3, #24]
			break;
   2728e:	e00f      	b.n	272b0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27290:	4b0a      	ldr	r3, [pc, #40]	; (272bc <system_apb_clock_set_mask+0x58>)
   27292:	4a0a      	ldr	r2, [pc, #40]	; (272bc <system_apb_clock_set_mask+0x58>)
   27294:	69d1      	ldr	r1, [r2, #28]
   27296:	683a      	ldr	r2, [r7, #0]
   27298:	430a      	orrs	r2, r1
   2729a:	61da      	str	r2, [r3, #28]
			break;
   2729c:	e008      	b.n	272b0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2729e:	4b07      	ldr	r3, [pc, #28]	; (272bc <system_apb_clock_set_mask+0x58>)
   272a0:	4a06      	ldr	r2, [pc, #24]	; (272bc <system_apb_clock_set_mask+0x58>)
   272a2:	6a11      	ldr	r1, [r2, #32]
   272a4:	683a      	ldr	r2, [r7, #0]
   272a6:	430a      	orrs	r2, r1
   272a8:	621a      	str	r2, [r3, #32]
			break;
   272aa:	e001      	b.n	272b0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   272ac:	2317      	movs	r3, #23
   272ae:	e000      	b.n	272b2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   272b0:	2300      	movs	r3, #0
}
   272b2:	0018      	movs	r0, r3
   272b4:	46bd      	mov	sp, r7
   272b6:	b002      	add	sp, #8
   272b8:	bd80      	pop	{r7, pc}
   272ba:	46c0      	nop			; (mov r8, r8)
   272bc:	40000400 	.word	0x40000400

000272c0 <system_is_debugger_present>:
{
   272c0:	b580      	push	{r7, lr}
   272c2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   272c4:	4b05      	ldr	r3, [pc, #20]	; (272dc <system_is_debugger_present+0x1c>)
   272c6:	789b      	ldrb	r3, [r3, #2]
   272c8:	b2db      	uxtb	r3, r3
   272ca:	001a      	movs	r2, r3
   272cc:	2302      	movs	r3, #2
   272ce:	4013      	ands	r3, r2
   272d0:	1e5a      	subs	r2, r3, #1
   272d2:	4193      	sbcs	r3, r2
   272d4:	b2db      	uxtb	r3, r3
}
   272d6:	0018      	movs	r0, r3
   272d8:	46bd      	mov	sp, r7
   272da:	bd80      	pop	{r7, pc}
   272dc:	41002000 	.word	0x41002000

000272e0 <system_interrupt_enable>:
{
   272e0:	b580      	push	{r7, lr}
   272e2:	b082      	sub	sp, #8
   272e4:	af00      	add	r7, sp, #0
   272e6:	0002      	movs	r2, r0
   272e8:	1dfb      	adds	r3, r7, #7
   272ea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   272ec:	4b06      	ldr	r3, [pc, #24]	; (27308 <system_interrupt_enable+0x28>)
   272ee:	1dfa      	adds	r2, r7, #7
   272f0:	7812      	ldrb	r2, [r2, #0]
   272f2:	0011      	movs	r1, r2
   272f4:	221f      	movs	r2, #31
   272f6:	400a      	ands	r2, r1
   272f8:	2101      	movs	r1, #1
   272fa:	4091      	lsls	r1, r2
   272fc:	000a      	movs	r2, r1
   272fe:	601a      	str	r2, [r3, #0]
}
   27300:	46c0      	nop			; (mov r8, r8)
   27302:	46bd      	mov	sp, r7
   27304:	b002      	add	sp, #8
   27306:	bd80      	pop	{r7, pc}
   27308:	e000e100 	.word	0xe000e100

0002730c <system_interrupt_disable>:
{
   2730c:	b580      	push	{r7, lr}
   2730e:	b082      	sub	sp, #8
   27310:	af00      	add	r7, sp, #0
   27312:	0002      	movs	r2, r0
   27314:	1dfb      	adds	r3, r7, #7
   27316:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27318:	4a07      	ldr	r2, [pc, #28]	; (27338 <system_interrupt_disable+0x2c>)
   2731a:	1dfb      	adds	r3, r7, #7
   2731c:	781b      	ldrb	r3, [r3, #0]
   2731e:	0019      	movs	r1, r3
   27320:	231f      	movs	r3, #31
   27322:	400b      	ands	r3, r1
   27324:	2101      	movs	r1, #1
   27326:	4099      	lsls	r1, r3
   27328:	000b      	movs	r3, r1
   2732a:	0019      	movs	r1, r3
   2732c:	2380      	movs	r3, #128	; 0x80
   2732e:	50d1      	str	r1, [r2, r3]
}
   27330:	46c0      	nop			; (mov r8, r8)
   27332:	46bd      	mov	sp, r7
   27334:	b002      	add	sp, #8
   27336:	bd80      	pop	{r7, pc}
   27338:	e000e100 	.word	0xe000e100

0002733c <spi_is_syncing>:
{
   2733c:	b580      	push	{r7, lr}
   2733e:	b084      	sub	sp, #16
   27340:	af00      	add	r7, sp, #0
   27342:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27344:	687b      	ldr	r3, [r7, #4]
   27346:	681b      	ldr	r3, [r3, #0]
   27348:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2734a:	68fb      	ldr	r3, [r7, #12]
   2734c:	69db      	ldr	r3, [r3, #28]
   2734e:	1e5a      	subs	r2, r3, #1
   27350:	4193      	sbcs	r3, r2
   27352:	b2db      	uxtb	r3, r3
}
   27354:	0018      	movs	r0, r3
   27356:	46bd      	mov	sp, r7
   27358:	b004      	add	sp, #16
   2735a:	bd80      	pop	{r7, pc}

0002735c <spi_enable>:
{
   2735c:	b580      	push	{r7, lr}
   2735e:	b084      	sub	sp, #16
   27360:	af00      	add	r7, sp, #0
   27362:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27364:	687b      	ldr	r3, [r7, #4]
   27366:	681b      	ldr	r3, [r3, #0]
   27368:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2736a:	687b      	ldr	r3, [r7, #4]
   2736c:	681b      	ldr	r3, [r3, #0]
   2736e:	0018      	movs	r0, r3
   27370:	4b0b      	ldr	r3, [pc, #44]	; (273a0 <spi_enable+0x44>)
   27372:	4798      	blx	r3
   27374:	0003      	movs	r3, r0
   27376:	0018      	movs	r0, r3
   27378:	4b0a      	ldr	r3, [pc, #40]	; (273a4 <spi_enable+0x48>)
   2737a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2737c:	46c0      	nop			; (mov r8, r8)
   2737e:	687b      	ldr	r3, [r7, #4]
   27380:	0018      	movs	r0, r3
   27382:	4b09      	ldr	r3, [pc, #36]	; (273a8 <spi_enable+0x4c>)
   27384:	4798      	blx	r3
   27386:	1e03      	subs	r3, r0, #0
   27388:	d1f9      	bne.n	2737e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2738a:	68fb      	ldr	r3, [r7, #12]
   2738c:	681b      	ldr	r3, [r3, #0]
   2738e:	2202      	movs	r2, #2
   27390:	431a      	orrs	r2, r3
   27392:	68fb      	ldr	r3, [r7, #12]
   27394:	601a      	str	r2, [r3, #0]
}
   27396:	46c0      	nop			; (mov r8, r8)
   27398:	46bd      	mov	sp, r7
   2739a:	b004      	add	sp, #16
   2739c:	bd80      	pop	{r7, pc}
   2739e:	46c0      	nop			; (mov r8, r8)
   273a0:	00027079 	.word	0x00027079
   273a4:	000272e1 	.word	0x000272e1
   273a8:	0002733d 	.word	0x0002733d

000273ac <spi_disable>:
{
   273ac:	b580      	push	{r7, lr}
   273ae:	b084      	sub	sp, #16
   273b0:	af00      	add	r7, sp, #0
   273b2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   273b4:	687b      	ldr	r3, [r7, #4]
   273b6:	681b      	ldr	r3, [r3, #0]
   273b8:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   273ba:	687b      	ldr	r3, [r7, #4]
   273bc:	681b      	ldr	r3, [r3, #0]
   273be:	0018      	movs	r0, r3
   273c0:	4b0e      	ldr	r3, [pc, #56]	; (273fc <spi_disable+0x50>)
   273c2:	4798      	blx	r3
   273c4:	0003      	movs	r3, r0
   273c6:	0018      	movs	r0, r3
   273c8:	4b0d      	ldr	r3, [pc, #52]	; (27400 <spi_disable+0x54>)
   273ca:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   273cc:	46c0      	nop			; (mov r8, r8)
   273ce:	687b      	ldr	r3, [r7, #4]
   273d0:	0018      	movs	r0, r3
   273d2:	4b0c      	ldr	r3, [pc, #48]	; (27404 <spi_disable+0x58>)
   273d4:	4798      	blx	r3
   273d6:	1e03      	subs	r3, r0, #0
   273d8:	d1f9      	bne.n	273ce <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   273da:	68fb      	ldr	r3, [r7, #12]
   273dc:	228f      	movs	r2, #143	; 0x8f
   273de:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   273e0:	68fb      	ldr	r3, [r7, #12]
   273e2:	228f      	movs	r2, #143	; 0x8f
   273e4:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   273e6:	68fb      	ldr	r3, [r7, #12]
   273e8:	681b      	ldr	r3, [r3, #0]
   273ea:	2202      	movs	r2, #2
   273ec:	4393      	bics	r3, r2
   273ee:	001a      	movs	r2, r3
   273f0:	68fb      	ldr	r3, [r7, #12]
   273f2:	601a      	str	r2, [r3, #0]
}
   273f4:	46c0      	nop			; (mov r8, r8)
   273f6:	46bd      	mov	sp, r7
   273f8:	b004      	add	sp, #16
   273fa:	bd80      	pop	{r7, pc}
   273fc:	00027079 	.word	0x00027079
   27400:	0002730d 	.word	0x0002730d
   27404:	0002733d 	.word	0x0002733d

00027408 <spi_is_write_complete>:
{
   27408:	b580      	push	{r7, lr}
   2740a:	b084      	sub	sp, #16
   2740c:	af00      	add	r7, sp, #0
   2740e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27410:	687b      	ldr	r3, [r7, #4]
   27412:	681b      	ldr	r3, [r3, #0]
   27414:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27416:	68fb      	ldr	r3, [r7, #12]
   27418:	7e1b      	ldrb	r3, [r3, #24]
   2741a:	b2db      	uxtb	r3, r3
   2741c:	001a      	movs	r2, r3
   2741e:	2302      	movs	r3, #2
   27420:	4013      	ands	r3, r2
   27422:	1e5a      	subs	r2, r3, #1
   27424:	4193      	sbcs	r3, r2
   27426:	b2db      	uxtb	r3, r3
}
   27428:	0018      	movs	r0, r3
   2742a:	46bd      	mov	sp, r7
   2742c:	b004      	add	sp, #16
   2742e:	bd80      	pop	{r7, pc}

00027430 <spi_is_ready_to_write>:
{
   27430:	b580      	push	{r7, lr}
   27432:	b084      	sub	sp, #16
   27434:	af00      	add	r7, sp, #0
   27436:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27438:	687b      	ldr	r3, [r7, #4]
   2743a:	681b      	ldr	r3, [r3, #0]
   2743c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2743e:	68fb      	ldr	r3, [r7, #12]
   27440:	7e1b      	ldrb	r3, [r3, #24]
   27442:	b2db      	uxtb	r3, r3
   27444:	001a      	movs	r2, r3
   27446:	2301      	movs	r3, #1
   27448:	4013      	ands	r3, r2
   2744a:	1e5a      	subs	r2, r3, #1
   2744c:	4193      	sbcs	r3, r2
   2744e:	b2db      	uxtb	r3, r3
}
   27450:	0018      	movs	r0, r3
   27452:	46bd      	mov	sp, r7
   27454:	b004      	add	sp, #16
   27456:	bd80      	pop	{r7, pc}

00027458 <spi_is_ready_to_read>:
{
   27458:	b580      	push	{r7, lr}
   2745a:	b084      	sub	sp, #16
   2745c:	af00      	add	r7, sp, #0
   2745e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27460:	687b      	ldr	r3, [r7, #4]
   27462:	681b      	ldr	r3, [r3, #0]
   27464:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   27466:	68fb      	ldr	r3, [r7, #12]
   27468:	7e1b      	ldrb	r3, [r3, #24]
   2746a:	b2db      	uxtb	r3, r3
   2746c:	001a      	movs	r2, r3
   2746e:	2304      	movs	r3, #4
   27470:	4013      	ands	r3, r2
   27472:	1e5a      	subs	r2, r3, #1
   27474:	4193      	sbcs	r3, r2
   27476:	b2db      	uxtb	r3, r3
}
   27478:	0018      	movs	r0, r3
   2747a:	46bd      	mov	sp, r7
   2747c:	b004      	add	sp, #16
   2747e:	bd80      	pop	{r7, pc}

00027480 <spi_write>:
{
   27480:	b580      	push	{r7, lr}
   27482:	b084      	sub	sp, #16
   27484:	af00      	add	r7, sp, #0
   27486:	6078      	str	r0, [r7, #4]
   27488:	000a      	movs	r2, r1
   2748a:	1cbb      	adds	r3, r7, #2
   2748c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2748e:	687b      	ldr	r3, [r7, #4]
   27490:	681b      	ldr	r3, [r3, #0]
   27492:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   27494:	687b      	ldr	r3, [r7, #4]
   27496:	0018      	movs	r0, r3
   27498:	4b0a      	ldr	r3, [pc, #40]	; (274c4 <spi_write+0x44>)
   2749a:	4798      	blx	r3
   2749c:	0003      	movs	r3, r0
   2749e:	001a      	movs	r2, r3
   274a0:	2301      	movs	r3, #1
   274a2:	4053      	eors	r3, r2
   274a4:	b2db      	uxtb	r3, r3
   274a6:	2b00      	cmp	r3, #0
   274a8:	d001      	beq.n	274ae <spi_write+0x2e>
		return STATUS_BUSY;
   274aa:	2305      	movs	r3, #5
   274ac:	e006      	b.n	274bc <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   274ae:	1cbb      	adds	r3, r7, #2
   274b0:	881b      	ldrh	r3, [r3, #0]
   274b2:	05db      	lsls	r3, r3, #23
   274b4:	0dda      	lsrs	r2, r3, #23
   274b6:	68fb      	ldr	r3, [r7, #12]
   274b8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   274ba:	2300      	movs	r3, #0
}
   274bc:	0018      	movs	r0, r3
   274be:	46bd      	mov	sp, r7
   274c0:	b004      	add	sp, #16
   274c2:	bd80      	pop	{r7, pc}
   274c4:	00027431 	.word	0x00027431

000274c8 <spi_read>:
{
   274c8:	b580      	push	{r7, lr}
   274ca:	b084      	sub	sp, #16
   274cc:	af00      	add	r7, sp, #0
   274ce:	6078      	str	r0, [r7, #4]
   274d0:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   274d2:	687b      	ldr	r3, [r7, #4]
   274d4:	681b      	ldr	r3, [r3, #0]
   274d6:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   274d8:	687b      	ldr	r3, [r7, #4]
   274da:	0018      	movs	r0, r3
   274dc:	4b1b      	ldr	r3, [pc, #108]	; (2754c <spi_read+0x84>)
   274de:	4798      	blx	r3
   274e0:	0003      	movs	r3, r0
   274e2:	001a      	movs	r2, r3
   274e4:	2301      	movs	r3, #1
   274e6:	4053      	eors	r3, r2
   274e8:	b2db      	uxtb	r3, r3
   274ea:	2b00      	cmp	r3, #0
   274ec:	d001      	beq.n	274f2 <spi_read+0x2a>
		return STATUS_ERR_IO;
   274ee:	2310      	movs	r3, #16
   274f0:	e027      	b.n	27542 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   274f2:	230f      	movs	r3, #15
   274f4:	18fb      	adds	r3, r7, r3
   274f6:	2200      	movs	r2, #0
   274f8:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   274fa:	68bb      	ldr	r3, [r7, #8]
   274fc:	8b5b      	ldrh	r3, [r3, #26]
   274fe:	b29b      	uxth	r3, r3
   27500:	001a      	movs	r2, r3
   27502:	2304      	movs	r3, #4
   27504:	4013      	ands	r3, r2
   27506:	d006      	beq.n	27516 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27508:	230f      	movs	r3, #15
   2750a:	18fb      	adds	r3, r7, r3
   2750c:	221e      	movs	r2, #30
   2750e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27510:	68bb      	ldr	r3, [r7, #8]
   27512:	2204      	movs	r2, #4
   27514:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27516:	687b      	ldr	r3, [r7, #4]
   27518:	799b      	ldrb	r3, [r3, #6]
   2751a:	2b01      	cmp	r3, #1
   2751c:	d108      	bne.n	27530 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2751e:	68bb      	ldr	r3, [r7, #8]
   27520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27522:	b29b      	uxth	r3, r3
   27524:	05db      	lsls	r3, r3, #23
   27526:	0ddb      	lsrs	r3, r3, #23
   27528:	b29a      	uxth	r2, r3
   2752a:	683b      	ldr	r3, [r7, #0]
   2752c:	801a      	strh	r2, [r3, #0]
   2752e:	e005      	b.n	2753c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27530:	68bb      	ldr	r3, [r7, #8]
   27532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27534:	b2db      	uxtb	r3, r3
   27536:	b29a      	uxth	r2, r3
   27538:	683b      	ldr	r3, [r7, #0]
   2753a:	801a      	strh	r2, [r3, #0]
	return retval;
   2753c:	230f      	movs	r3, #15
   2753e:	18fb      	adds	r3, r7, r3
   27540:	781b      	ldrb	r3, [r3, #0]
}
   27542:	0018      	movs	r0, r3
   27544:	46bd      	mov	sp, r7
   27546:	b004      	add	sp, #16
   27548:	bd80      	pop	{r7, pc}
   2754a:	46c0      	nop			; (mov r8, r8)
   2754c:	00027459 	.word	0x00027459

00027550 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27550:	b590      	push	{r4, r7, lr}
   27552:	b089      	sub	sp, #36	; 0x24
   27554:	af00      	add	r7, sp, #0
   27556:	6078      	str	r0, [r7, #4]
   27558:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2755a:	230c      	movs	r3, #12
   2755c:	18fb      	adds	r3, r7, r3
   2755e:	2200      	movs	r2, #0
   27560:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27562:	687b      	ldr	r3, [r7, #4]
   27564:	681b      	ldr	r3, [r3, #0]
   27566:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27568:	687b      	ldr	r3, [r7, #4]
   2756a:	0018      	movs	r0, r3
   2756c:	4b24      	ldr	r3, [pc, #144]	; (27600 <spi_set_baudrate+0xb0>)
   2756e:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27570:	46c0      	nop			; (mov r8, r8)
   27572:	687b      	ldr	r3, [r7, #4]
   27574:	0018      	movs	r0, r3
   27576:	4b23      	ldr	r3, [pc, #140]	; (27604 <spi_set_baudrate+0xb4>)
   27578:	4798      	blx	r3
   2757a:	1e03      	subs	r3, r0, #0
   2757c:	d1f9      	bne.n	27572 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2757e:	687b      	ldr	r3, [r7, #4]
   27580:	681b      	ldr	r3, [r3, #0]
   27582:	0018      	movs	r0, r3
   27584:	4b20      	ldr	r3, [pc, #128]	; (27608 <spi_set_baudrate+0xb8>)
   27586:	4798      	blx	r3
   27588:	0003      	movs	r3, r0
   2758a:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2758c:	69bb      	ldr	r3, [r7, #24]
   2758e:	3314      	adds	r3, #20
   27590:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27592:	697b      	ldr	r3, [r7, #20]
   27594:	b2db      	uxtb	r3, r3
   27596:	0018      	movs	r0, r3
   27598:	4b1c      	ldr	r3, [pc, #112]	; (2760c <spi_set_baudrate+0xbc>)
   2759a:	4798      	blx	r3
   2759c:	0003      	movs	r3, r0
   2759e:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   275a0:	230f      	movs	r3, #15
   275a2:	18fc      	adds	r4, r7, r3
   275a4:	230c      	movs	r3, #12
   275a6:	18fa      	adds	r2, r7, r3
   275a8:	6939      	ldr	r1, [r7, #16]
   275aa:	683b      	ldr	r3, [r7, #0]
   275ac:	0018      	movs	r0, r3
   275ae:	4b18      	ldr	r3, [pc, #96]	; (27610 <spi_set_baudrate+0xc0>)
   275b0:	4798      	blx	r3
   275b2:	0003      	movs	r3, r0
   275b4:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   275b6:	230f      	movs	r3, #15
   275b8:	18fb      	adds	r3, r7, r3
   275ba:	781b      	ldrb	r3, [r3, #0]
   275bc:	2b00      	cmp	r3, #0
   275be:	d001      	beq.n	275c4 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   275c0:	2317      	movs	r3, #23
   275c2:	e018      	b.n	275f6 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   275c4:	230c      	movs	r3, #12
   275c6:	18fb      	adds	r3, r7, r3
   275c8:	881b      	ldrh	r3, [r3, #0]
   275ca:	b2da      	uxtb	r2, r3
   275cc:	69fb      	ldr	r3, [r7, #28]
   275ce:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   275d0:	46c0      	nop			; (mov r8, r8)
   275d2:	687b      	ldr	r3, [r7, #4]
   275d4:	0018      	movs	r0, r3
   275d6:	4b0b      	ldr	r3, [pc, #44]	; (27604 <spi_set_baudrate+0xb4>)
   275d8:	4798      	blx	r3
   275da:	1e03      	subs	r3, r0, #0
   275dc:	d1f9      	bne.n	275d2 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   275de:	687b      	ldr	r3, [r7, #4]
   275e0:	0018      	movs	r0, r3
   275e2:	4b0c      	ldr	r3, [pc, #48]	; (27614 <spi_set_baudrate+0xc4>)
   275e4:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   275e6:	46c0      	nop			; (mov r8, r8)
   275e8:	687b      	ldr	r3, [r7, #4]
   275ea:	0018      	movs	r0, r3
   275ec:	4b05      	ldr	r3, [pc, #20]	; (27604 <spi_set_baudrate+0xb4>)
   275ee:	4798      	blx	r3
   275f0:	1e03      	subs	r3, r0, #0
   275f2:	d1f9      	bne.n	275e8 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   275f4:	2300      	movs	r3, #0
}
   275f6:	0018      	movs	r0, r3
   275f8:	46bd      	mov	sp, r7
   275fa:	b009      	add	sp, #36	; 0x24
   275fc:	bd90      	pop	{r4, r7, pc}
   275fe:	46c0      	nop			; (mov r8, r8)
   27600:	000273ad 	.word	0x000273ad
   27604:	0002733d 	.word	0x0002733d
   27608:	00026fa9 	.word	0x00026fa9
   2760c:	0002995d 	.word	0x0002995d
   27610:	00026b23 	.word	0x00026b23
   27614:	0002735d 	.word	0x0002735d

00027618 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27618:	b590      	push	{r4, r7, lr}
   2761a:	b093      	sub	sp, #76	; 0x4c
   2761c:	af00      	add	r7, sp, #0
   2761e:	6078      	str	r0, [r7, #4]
   27620:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27622:	687b      	ldr	r3, [r7, #4]
   27624:	681b      	ldr	r3, [r3, #0]
   27626:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27628:	687b      	ldr	r3, [r7, #4]
   2762a:	681b      	ldr	r3, [r3, #0]
   2762c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2762e:	231c      	movs	r3, #28
   27630:	18fb      	adds	r3, r7, r3
   27632:	0018      	movs	r0, r3
   27634:	4b75      	ldr	r3, [pc, #468]	; (2780c <_spi_set_config+0x1f4>)
   27636:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27638:	231c      	movs	r3, #28
   2763a:	18fb      	adds	r3, r7, r3
   2763c:	2200      	movs	r2, #0
   2763e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27640:	683b      	ldr	r3, [r7, #0]
   27642:	781b      	ldrb	r3, [r3, #0]
   27644:	2b00      	cmp	r3, #0
   27646:	d103      	bne.n	27650 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27648:	231c      	movs	r3, #28
   2764a:	18fb      	adds	r3, r7, r3
   2764c:	2200      	movs	r2, #0
   2764e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27650:	683b      	ldr	r3, [r7, #0]
   27652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27654:	230c      	movs	r3, #12
   27656:	18fb      	adds	r3, r7, r3
   27658:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2765a:	683b      	ldr	r3, [r7, #0]
   2765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2765e:	230c      	movs	r3, #12
   27660:	18fb      	adds	r3, r7, r3
   27662:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27664:	683b      	ldr	r3, [r7, #0]
   27666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27668:	230c      	movs	r3, #12
   2766a:	18fb      	adds	r3, r7, r3
   2766c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2766e:	683b      	ldr	r3, [r7, #0]
   27670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27672:	230c      	movs	r3, #12
   27674:	18fb      	adds	r3, r7, r3
   27676:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27678:	2347      	movs	r3, #71	; 0x47
   2767a:	18fb      	adds	r3, r7, r3
   2767c:	2200      	movs	r2, #0
   2767e:	701a      	strb	r2, [r3, #0]
   27680:	e02c      	b.n	276dc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27682:	2347      	movs	r3, #71	; 0x47
   27684:	18fb      	adds	r3, r7, r3
   27686:	781a      	ldrb	r2, [r3, #0]
   27688:	230c      	movs	r3, #12
   2768a:	18fb      	adds	r3, r7, r3
   2768c:	0092      	lsls	r2, r2, #2
   2768e:	58d3      	ldr	r3, [r2, r3]
   27690:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27694:	2b00      	cmp	r3, #0
   27696:	d109      	bne.n	276ac <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27698:	2347      	movs	r3, #71	; 0x47
   2769a:	18fb      	adds	r3, r7, r3
   2769c:	781a      	ldrb	r2, [r3, #0]
   2769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   276a0:	0011      	movs	r1, r2
   276a2:	0018      	movs	r0, r3
   276a4:	4b5a      	ldr	r3, [pc, #360]	; (27810 <_spi_set_config+0x1f8>)
   276a6:	4798      	blx	r3
   276a8:	0003      	movs	r3, r0
   276aa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   276ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276ae:	3301      	adds	r3, #1
   276b0:	d00d      	beq.n	276ce <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   276b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276b4:	b2da      	uxtb	r2, r3
   276b6:	231c      	movs	r3, #28
   276b8:	18fb      	adds	r3, r7, r3
   276ba:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   276bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276be:	0c1b      	lsrs	r3, r3, #16
   276c0:	b2db      	uxtb	r3, r3
   276c2:	221c      	movs	r2, #28
   276c4:	18ba      	adds	r2, r7, r2
   276c6:	0011      	movs	r1, r2
   276c8:	0018      	movs	r0, r3
   276ca:	4b52      	ldr	r3, [pc, #328]	; (27814 <_spi_set_config+0x1fc>)
   276cc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   276ce:	2347      	movs	r3, #71	; 0x47
   276d0:	18fb      	adds	r3, r7, r3
   276d2:	781a      	ldrb	r2, [r3, #0]
   276d4:	2347      	movs	r3, #71	; 0x47
   276d6:	18fb      	adds	r3, r7, r3
   276d8:	3201      	adds	r2, #1
   276da:	701a      	strb	r2, [r3, #0]
   276dc:	2347      	movs	r3, #71	; 0x47
   276de:	18fb      	adds	r3, r7, r3
   276e0:	781b      	ldrb	r3, [r3, #0]
   276e2:	2b03      	cmp	r3, #3
   276e4:	d9cd      	bls.n	27682 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   276e6:	683b      	ldr	r3, [r7, #0]
   276e8:	781a      	ldrb	r2, [r3, #0]
   276ea:	687b      	ldr	r3, [r7, #4]
   276ec:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   276ee:	683b      	ldr	r3, [r7, #0]
   276f0:	7c1a      	ldrb	r2, [r3, #16]
   276f2:	687b      	ldr	r3, [r7, #4]
   276f4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   276f6:	683b      	ldr	r3, [r7, #0]
   276f8:	7c9a      	ldrb	r2, [r3, #18]
   276fa:	687b      	ldr	r3, [r7, #4]
   276fc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   276fe:	683b      	ldr	r3, [r7, #0]
   27700:	7d1a      	ldrb	r2, [r3, #20]
   27702:	687b      	ldr	r3, [r7, #4]
   27704:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27706:	230a      	movs	r3, #10
   27708:	18fb      	adds	r3, r7, r3
   2770a:	2200      	movs	r2, #0
   2770c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2770e:	2300      	movs	r3, #0
   27710:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27712:	2300      	movs	r3, #0
   27714:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27716:	683b      	ldr	r3, [r7, #0]
   27718:	781b      	ldrb	r3, [r3, #0]
   2771a:	2b01      	cmp	r3, #1
   2771c:	d129      	bne.n	27772 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2771e:	687b      	ldr	r3, [r7, #4]
   27720:	681b      	ldr	r3, [r3, #0]
   27722:	0018      	movs	r0, r3
   27724:	4b3c      	ldr	r3, [pc, #240]	; (27818 <_spi_set_config+0x200>)
   27726:	4798      	blx	r3
   27728:	0003      	movs	r3, r0
   2772a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2772e:	3314      	adds	r3, #20
   27730:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27732:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27734:	b2db      	uxtb	r3, r3
   27736:	0018      	movs	r0, r3
   27738:	4b38      	ldr	r3, [pc, #224]	; (2781c <_spi_set_config+0x204>)
   2773a:	4798      	blx	r3
   2773c:	0003      	movs	r3, r0
   2773e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27740:	683b      	ldr	r3, [r7, #0]
   27742:	699b      	ldr	r3, [r3, #24]
   27744:	2223      	movs	r2, #35	; 0x23
   27746:	18bc      	adds	r4, r7, r2
   27748:	220a      	movs	r2, #10
   2774a:	18ba      	adds	r2, r7, r2
   2774c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2774e:	0018      	movs	r0, r3
   27750:	4b33      	ldr	r3, [pc, #204]	; (27820 <_spi_set_config+0x208>)
   27752:	4798      	blx	r3
   27754:	0003      	movs	r3, r0
   27756:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27758:	2323      	movs	r3, #35	; 0x23
   2775a:	18fb      	adds	r3, r7, r3
   2775c:	781b      	ldrb	r3, [r3, #0]
   2775e:	2b00      	cmp	r3, #0
   27760:	d001      	beq.n	27766 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   27762:	2317      	movs	r3, #23
   27764:	e04e      	b.n	27804 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   27766:	230a      	movs	r3, #10
   27768:	18fb      	adds	r3, r7, r3
   2776a:	881b      	ldrh	r3, [r3, #0]
   2776c:	b2da      	uxtb	r2, r3
   2776e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27770:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   27772:	683b      	ldr	r3, [r7, #0]
   27774:	685b      	ldr	r3, [r3, #4]
   27776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27778:	4313      	orrs	r3, r2
   2777a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2777c:	683b      	ldr	r3, [r7, #0]
   2777e:	689b      	ldr	r3, [r3, #8]
   27780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27782:	4313      	orrs	r3, r2
   27784:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27786:	683b      	ldr	r3, [r7, #0]
   27788:	68db      	ldr	r3, [r3, #12]
   2778a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2778c:	4313      	orrs	r3, r2
   2778e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   27790:	683b      	ldr	r3, [r7, #0]
   27792:	7c1b      	ldrb	r3, [r3, #16]
   27794:	001a      	movs	r2, r3
   27796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27798:	4313      	orrs	r3, r2
   2779a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2779c:	683b      	ldr	r3, [r7, #0]
   2779e:	7c5b      	ldrb	r3, [r3, #17]
   277a0:	2b00      	cmp	r3, #0
   277a2:	d103      	bne.n	277ac <_spi_set_config+0x194>
   277a4:	4b1f      	ldr	r3, [pc, #124]	; (27824 <_spi_set_config+0x20c>)
   277a6:	4798      	blx	r3
   277a8:	1e03      	subs	r3, r0, #0
   277aa:	d003      	beq.n	277b4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   277ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   277ae:	2280      	movs	r2, #128	; 0x80
   277b0:	4313      	orrs	r3, r2
   277b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   277b4:	683b      	ldr	r3, [r7, #0]
   277b6:	7c9b      	ldrb	r3, [r3, #18]
   277b8:	2b00      	cmp	r3, #0
   277ba:	d004      	beq.n	277c6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   277bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277be:	2280      	movs	r2, #128	; 0x80
   277c0:	0292      	lsls	r2, r2, #10
   277c2:	4313      	orrs	r3, r2
   277c4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   277c6:	683b      	ldr	r3, [r7, #0]
   277c8:	7cdb      	ldrb	r3, [r3, #19]
   277ca:	2b00      	cmp	r3, #0
   277cc:	d004      	beq.n	277d8 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   277ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277d0:	2280      	movs	r2, #128	; 0x80
   277d2:	0092      	lsls	r2, r2, #2
   277d4:	4313      	orrs	r3, r2
   277d6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   277d8:	683b      	ldr	r3, [r7, #0]
   277da:	7d1b      	ldrb	r3, [r3, #20]
   277dc:	2b00      	cmp	r3, #0
   277de:	d004      	beq.n	277ea <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   277e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277e2:	2280      	movs	r2, #128	; 0x80
   277e4:	0192      	lsls	r2, r2, #6
   277e6:	4313      	orrs	r3, r2
   277e8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   277ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   277ec:	681a      	ldr	r2, [r3, #0]
   277ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   277f0:	431a      	orrs	r2, r3
   277f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   277f4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   277f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   277f8:	685a      	ldr	r2, [r3, #4]
   277fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277fc:	431a      	orrs	r2, r3
   277fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27800:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27802:	2300      	movs	r3, #0
}
   27804:	0018      	movs	r0, r3
   27806:	46bd      	mov	sp, r7
   27808:	b013      	add	sp, #76	; 0x4c
   2780a:	bd90      	pop	{r4, r7, pc}
   2780c:	0002714d 	.word	0x0002714d
   27810:	00026ded 	.word	0x00026ded
   27814:	00029b99 	.word	0x00029b99
   27818:	00026fa9 	.word	0x00026fa9
   2781c:	0002995d 	.word	0x0002995d
   27820:	00026b23 	.word	0x00026b23
   27824:	000272c1 	.word	0x000272c1

00027828 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27828:	b590      	push	{r4, r7, lr}
   2782a:	b08b      	sub	sp, #44	; 0x2c
   2782c:	af00      	add	r7, sp, #0
   2782e:	60f8      	str	r0, [r7, #12]
   27830:	60b9      	str	r1, [r7, #8]
   27832:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27834:	68fb      	ldr	r3, [r7, #12]
   27836:	68ba      	ldr	r2, [r7, #8]
   27838:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2783a:	68fb      	ldr	r3, [r7, #12]
   2783c:	681b      	ldr	r3, [r3, #0]
   2783e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27840:	6a3b      	ldr	r3, [r7, #32]
   27842:	681b      	ldr	r3, [r3, #0]
   27844:	2202      	movs	r2, #2
   27846:	4013      	ands	r3, r2
   27848:	d001      	beq.n	2784e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2784a:	231c      	movs	r3, #28
   2784c:	e09c      	b.n	27988 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2784e:	6a3b      	ldr	r3, [r7, #32]
   27850:	681b      	ldr	r3, [r3, #0]
   27852:	2201      	movs	r2, #1
   27854:	4013      	ands	r3, r2
   27856:	d001      	beq.n	2785c <spi_init+0x34>
		return STATUS_BUSY;
   27858:	2305      	movs	r3, #5
   2785a:	e095      	b.n	27988 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2785c:	68fb      	ldr	r3, [r7, #12]
   2785e:	681b      	ldr	r3, [r3, #0]
   27860:	0018      	movs	r0, r3
   27862:	4b4b      	ldr	r3, [pc, #300]	; (27990 <spi_init+0x168>)
   27864:	4798      	blx	r3
   27866:	0003      	movs	r3, r0
   27868:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2786a:	69fb      	ldr	r3, [r7, #28]
   2786c:	3302      	adds	r3, #2
   2786e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27870:	69fb      	ldr	r3, [r7, #28]
   27872:	3314      	adds	r3, #20
   27874:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27876:	2201      	movs	r2, #1
   27878:	69bb      	ldr	r3, [r7, #24]
   2787a:	409a      	lsls	r2, r3
   2787c:	0013      	movs	r3, r2
   2787e:	0019      	movs	r1, r3
   27880:	2002      	movs	r0, #2
   27882:	4b44      	ldr	r3, [pc, #272]	; (27994 <spi_init+0x16c>)
   27884:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27886:	2310      	movs	r3, #16
   27888:	18fb      	adds	r3, r7, r3
   2788a:	0018      	movs	r0, r3
   2788c:	4b42      	ldr	r3, [pc, #264]	; (27998 <spi_init+0x170>)
   2788e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27890:	687b      	ldr	r3, [r7, #4]
   27892:	2224      	movs	r2, #36	; 0x24
   27894:	5c9a      	ldrb	r2, [r3, r2]
   27896:	2310      	movs	r3, #16
   27898:	18fb      	adds	r3, r7, r3
   2789a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2789c:	697b      	ldr	r3, [r7, #20]
   2789e:	b2db      	uxtb	r3, r3
   278a0:	2210      	movs	r2, #16
   278a2:	18ba      	adds	r2, r7, r2
   278a4:	0011      	movs	r1, r2
   278a6:	0018      	movs	r0, r3
   278a8:	4b3c      	ldr	r3, [pc, #240]	; (2799c <spi_init+0x174>)
   278aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   278ac:	697b      	ldr	r3, [r7, #20]
   278ae:	b2db      	uxtb	r3, r3
   278b0:	0018      	movs	r0, r3
   278b2:	4b3b      	ldr	r3, [pc, #236]	; (279a0 <spi_init+0x178>)
   278b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   278b6:	687b      	ldr	r3, [r7, #4]
   278b8:	2224      	movs	r2, #36	; 0x24
   278ba:	5c9b      	ldrb	r3, [r3, r2]
   278bc:	2100      	movs	r1, #0
   278be:	0018      	movs	r0, r3
   278c0:	4b38      	ldr	r3, [pc, #224]	; (279a4 <spi_init+0x17c>)
   278c2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   278c4:	687b      	ldr	r3, [r7, #4]
   278c6:	781b      	ldrb	r3, [r3, #0]
   278c8:	2b01      	cmp	r3, #1
   278ca:	d105      	bne.n	278d8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   278cc:	6a3b      	ldr	r3, [r7, #32]
   278ce:	681b      	ldr	r3, [r3, #0]
   278d0:	220c      	movs	r2, #12
   278d2:	431a      	orrs	r2, r3
   278d4:	6a3b      	ldr	r3, [r7, #32]
   278d6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   278d8:	2327      	movs	r3, #39	; 0x27
   278da:	18fb      	adds	r3, r7, r3
   278dc:	2200      	movs	r2, #0
   278de:	701a      	strb	r2, [r3, #0]
   278e0:	e010      	b.n	27904 <spi_init+0xdc>
		module->callback[i]        = NULL;
   278e2:	2327      	movs	r3, #39	; 0x27
   278e4:	18fb      	adds	r3, r7, r3
   278e6:	781b      	ldrb	r3, [r3, #0]
   278e8:	68fa      	ldr	r2, [r7, #12]
   278ea:	3302      	adds	r3, #2
   278ec:	009b      	lsls	r3, r3, #2
   278ee:	18d3      	adds	r3, r2, r3
   278f0:	3304      	adds	r3, #4
   278f2:	2200      	movs	r2, #0
   278f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   278f6:	2327      	movs	r3, #39	; 0x27
   278f8:	18fb      	adds	r3, r7, r3
   278fa:	781a      	ldrb	r2, [r3, #0]
   278fc:	2327      	movs	r3, #39	; 0x27
   278fe:	18fb      	adds	r3, r7, r3
   27900:	3201      	adds	r2, #1
   27902:	701a      	strb	r2, [r3, #0]
   27904:	2327      	movs	r3, #39	; 0x27
   27906:	18fb      	adds	r3, r7, r3
   27908:	781b      	ldrb	r3, [r3, #0]
   2790a:	2b06      	cmp	r3, #6
   2790c:	d9e9      	bls.n	278e2 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   2790e:	68fb      	ldr	r3, [r7, #12]
   27910:	2200      	movs	r2, #0
   27912:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27914:	68fb      	ldr	r3, [r7, #12]
   27916:	2200      	movs	r2, #0
   27918:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2791a:	68fb      	ldr	r3, [r7, #12]
   2791c:	2200      	movs	r2, #0
   2791e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27920:	68fb      	ldr	r3, [r7, #12]
   27922:	2200      	movs	r2, #0
   27924:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27926:	68fb      	ldr	r3, [r7, #12]
   27928:	2236      	movs	r2, #54	; 0x36
   2792a:	2100      	movs	r1, #0
   2792c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   2792e:	68fb      	ldr	r3, [r7, #12]
   27930:	2237      	movs	r2, #55	; 0x37
   27932:	2100      	movs	r1, #0
   27934:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27936:	68fb      	ldr	r3, [r7, #12]
   27938:	2238      	movs	r2, #56	; 0x38
   2793a:	2100      	movs	r1, #0
   2793c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   2793e:	68fb      	ldr	r3, [r7, #12]
   27940:	2203      	movs	r2, #3
   27942:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27944:	68fb      	ldr	r3, [r7, #12]
   27946:	2200      	movs	r2, #0
   27948:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2794a:	68fb      	ldr	r3, [r7, #12]
   2794c:	681b      	ldr	r3, [r3, #0]
   2794e:	2213      	movs	r2, #19
   27950:	18bc      	adds	r4, r7, r2
   27952:	0018      	movs	r0, r3
   27954:	4b0e      	ldr	r3, [pc, #56]	; (27990 <spi_init+0x168>)
   27956:	4798      	blx	r3
   27958:	0003      	movs	r3, r0
   2795a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   2795c:	4a12      	ldr	r2, [pc, #72]	; (279a8 <spi_init+0x180>)
   2795e:	2313      	movs	r3, #19
   27960:	18fb      	adds	r3, r7, r3
   27962:	781b      	ldrb	r3, [r3, #0]
   27964:	0011      	movs	r1, r2
   27966:	0018      	movs	r0, r3
   27968:	4b10      	ldr	r3, [pc, #64]	; (279ac <spi_init+0x184>)
   2796a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2796c:	2313      	movs	r3, #19
   2796e:	18fb      	adds	r3, r7, r3
   27970:	781a      	ldrb	r2, [r3, #0]
   27972:	4b0f      	ldr	r3, [pc, #60]	; (279b0 <spi_init+0x188>)
   27974:	0092      	lsls	r2, r2, #2
   27976:	68f9      	ldr	r1, [r7, #12]
   27978:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2797a:	687a      	ldr	r2, [r7, #4]
   2797c:	68fb      	ldr	r3, [r7, #12]
   2797e:	0011      	movs	r1, r2
   27980:	0018      	movs	r0, r3
   27982:	4b0c      	ldr	r3, [pc, #48]	; (279b4 <spi_init+0x18c>)
   27984:	4798      	blx	r3
   27986:	0003      	movs	r3, r0
}
   27988:	0018      	movs	r0, r3
   2798a:	46bd      	mov	sp, r7
   2798c:	b00b      	add	sp, #44	; 0x2c
   2798e:	bd90      	pop	{r4, r7, pc}
   27990:	00026fa9 	.word	0x00026fa9
   27994:	00027265 	.word	0x00027265
   27998:	0002724d 	.word	0x0002724d
   2799c:	00029839 	.word	0x00029839
   279a0:	0002987d 	.word	0x0002987d
   279a4:	00026d61 	.word	0x00026d61
   279a8:	00027e81 	.word	0x00027e81
   279ac:	0002700d 	.word	0x0002700d
   279b0:	20005ac0 	.word	0x20005ac0
   279b4:	00027619 	.word	0x00027619

000279b8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   279b8:	b590      	push	{r4, r7, lr}
   279ba:	b087      	sub	sp, #28
   279bc:	af00      	add	r7, sp, #0
   279be:	60f8      	str	r0, [r7, #12]
   279c0:	60b9      	str	r1, [r7, #8]
   279c2:	0019      	movs	r1, r3
   279c4:	1dbb      	adds	r3, r7, #6
   279c6:	801a      	strh	r2, [r3, #0]
   279c8:	1d3b      	adds	r3, r7, #4
   279ca:	1c0a      	adds	r2, r1, #0
   279cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   279ce:	68fb      	ldr	r3, [r7, #12]
   279d0:	2238      	movs	r2, #56	; 0x38
   279d2:	5c9b      	ldrb	r3, [r3, r2]
   279d4:	b2db      	uxtb	r3, r3
   279d6:	2b05      	cmp	r3, #5
   279d8:	d101      	bne.n	279de <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   279da:	2305      	movs	r3, #5
   279dc:	e07a      	b.n	27ad4 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   279de:	1dbb      	adds	r3, r7, #6
   279e0:	881b      	ldrh	r3, [r3, #0]
   279e2:	2b00      	cmp	r3, #0
   279e4:	d101      	bne.n	279ea <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   279e6:	2317      	movs	r3, #23
   279e8:	e074      	b.n	27ad4 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   279ea:	68fb      	ldr	r3, [r7, #12]
   279ec:	79db      	ldrb	r3, [r3, #7]
   279ee:	2201      	movs	r2, #1
   279f0:	4053      	eors	r3, r2
   279f2:	b2db      	uxtb	r3, r3
   279f4:	2b00      	cmp	r3, #0
   279f6:	d001      	beq.n	279fc <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   279f8:	231c      	movs	r3, #28
   279fa:	e06b      	b.n	27ad4 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   279fc:	2316      	movs	r3, #22
   279fe:	18fb      	adds	r3, r7, r3
   27a00:	2200      	movs	r2, #0
   27a02:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27a04:	e05e      	b.n	27ac4 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27a06:	68fb      	ldr	r3, [r7, #12]
   27a08:	795b      	ldrb	r3, [r3, #5]
   27a0a:	2b01      	cmp	r3, #1
   27a0c:	d112      	bne.n	27a34 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27a0e:	46c0      	nop			; (mov r8, r8)
   27a10:	68fb      	ldr	r3, [r7, #12]
   27a12:	0018      	movs	r0, r3
   27a14:	4b31      	ldr	r3, [pc, #196]	; (27adc <spi_read_buffer_wait+0x124>)
   27a16:	4798      	blx	r3
   27a18:	0003      	movs	r3, r0
   27a1a:	001a      	movs	r2, r3
   27a1c:	2301      	movs	r3, #1
   27a1e:	4053      	eors	r3, r2
   27a20:	b2db      	uxtb	r3, r3
   27a22:	2b00      	cmp	r3, #0
   27a24:	d1f4      	bne.n	27a10 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27a26:	1d3b      	adds	r3, r7, #4
   27a28:	881a      	ldrh	r2, [r3, #0]
   27a2a:	68fb      	ldr	r3, [r7, #12]
   27a2c:	0011      	movs	r1, r2
   27a2e:	0018      	movs	r0, r3
   27a30:	4b2b      	ldr	r3, [pc, #172]	; (27ae0 <spi_read_buffer_wait+0x128>)
   27a32:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27a34:	46c0      	nop			; (mov r8, r8)
   27a36:	68fb      	ldr	r3, [r7, #12]
   27a38:	0018      	movs	r0, r3
   27a3a:	4b2a      	ldr	r3, [pc, #168]	; (27ae4 <spi_read_buffer_wait+0x12c>)
   27a3c:	4798      	blx	r3
   27a3e:	0003      	movs	r3, r0
   27a40:	001a      	movs	r2, r3
   27a42:	2301      	movs	r3, #1
   27a44:	4053      	eors	r3, r2
   27a46:	b2db      	uxtb	r3, r3
   27a48:	2b00      	cmp	r3, #0
   27a4a:	d1f4      	bne.n	27a36 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27a4c:	2312      	movs	r3, #18
   27a4e:	18fb      	adds	r3, r7, r3
   27a50:	2200      	movs	r2, #0
   27a52:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27a54:	2315      	movs	r3, #21
   27a56:	18fc      	adds	r4, r7, r3
   27a58:	2312      	movs	r3, #18
   27a5a:	18fa      	adds	r2, r7, r3
   27a5c:	68fb      	ldr	r3, [r7, #12]
   27a5e:	0011      	movs	r1, r2
   27a60:	0018      	movs	r0, r3
   27a62:	4b21      	ldr	r3, [pc, #132]	; (27ae8 <spi_read_buffer_wait+0x130>)
   27a64:	4798      	blx	r3
   27a66:	0003      	movs	r3, r0
   27a68:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27a6a:	2315      	movs	r3, #21
   27a6c:	18fb      	adds	r3, r7, r3
   27a6e:	781b      	ldrb	r3, [r3, #0]
   27a70:	2b00      	cmp	r3, #0
   27a72:	d003      	beq.n	27a7c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27a74:	2315      	movs	r3, #21
   27a76:	18fb      	adds	r3, r7, r3
   27a78:	781b      	ldrb	r3, [r3, #0]
   27a7a:	e02b      	b.n	27ad4 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27a7c:	2316      	movs	r3, #22
   27a7e:	18fb      	adds	r3, r7, r3
   27a80:	881b      	ldrh	r3, [r3, #0]
   27a82:	2216      	movs	r2, #22
   27a84:	18ba      	adds	r2, r7, r2
   27a86:	1c59      	adds	r1, r3, #1
   27a88:	8011      	strh	r1, [r2, #0]
   27a8a:	001a      	movs	r2, r3
   27a8c:	68bb      	ldr	r3, [r7, #8]
   27a8e:	189b      	adds	r3, r3, r2
   27a90:	2212      	movs	r2, #18
   27a92:	18ba      	adds	r2, r7, r2
   27a94:	8812      	ldrh	r2, [r2, #0]
   27a96:	b2d2      	uxtb	r2, r2
   27a98:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27a9a:	68fb      	ldr	r3, [r7, #12]
   27a9c:	799b      	ldrb	r3, [r3, #6]
   27a9e:	2b01      	cmp	r3, #1
   27aa0:	d110      	bne.n	27ac4 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27aa2:	2316      	movs	r3, #22
   27aa4:	18fb      	adds	r3, r7, r3
   27aa6:	881b      	ldrh	r3, [r3, #0]
   27aa8:	2216      	movs	r2, #22
   27aaa:	18ba      	adds	r2, r7, r2
   27aac:	1c59      	adds	r1, r3, #1
   27aae:	8011      	strh	r1, [r2, #0]
   27ab0:	001a      	movs	r2, r3
   27ab2:	68bb      	ldr	r3, [r7, #8]
   27ab4:	189b      	adds	r3, r3, r2
   27ab6:	2212      	movs	r2, #18
   27ab8:	18ba      	adds	r2, r7, r2
   27aba:	8812      	ldrh	r2, [r2, #0]
   27abc:	0a12      	lsrs	r2, r2, #8
   27abe:	b292      	uxth	r2, r2
   27ac0:	b2d2      	uxtb	r2, r2
   27ac2:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27ac4:	1dbb      	adds	r3, r7, #6
   27ac6:	881b      	ldrh	r3, [r3, #0]
   27ac8:	1dba      	adds	r2, r7, #6
   27aca:	1e59      	subs	r1, r3, #1
   27acc:	8011      	strh	r1, [r2, #0]
   27ace:	2b00      	cmp	r3, #0
   27ad0:	d199      	bne.n	27a06 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27ad2:	2300      	movs	r3, #0
}
   27ad4:	0018      	movs	r0, r3
   27ad6:	46bd      	mov	sp, r7
   27ad8:	b007      	add	sp, #28
   27ada:	bd90      	pop	{r4, r7, pc}
   27adc:	00027431 	.word	0x00027431
   27ae0:	00027481 	.word	0x00027481
   27ae4:	00027459 	.word	0x00027459
   27ae8:	000274c9 	.word	0x000274c9

00027aec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27aec:	b580      	push	{r7, lr}
   27aee:	b086      	sub	sp, #24
   27af0:	af00      	add	r7, sp, #0
   27af2:	60f8      	str	r0, [r7, #12]
   27af4:	60b9      	str	r1, [r7, #8]
   27af6:	1dfb      	adds	r3, r7, #7
   27af8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   27afa:	68fb      	ldr	r3, [r7, #12]
   27afc:	795b      	ldrb	r3, [r3, #5]
   27afe:	2b01      	cmp	r3, #1
   27b00:	d001      	beq.n	27b06 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27b02:	2315      	movs	r3, #21
   27b04:	e05c      	b.n	27bc0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27b06:	68fb      	ldr	r3, [r7, #12]
   27b08:	7a1b      	ldrb	r3, [r3, #8]
   27b0a:	2201      	movs	r2, #1
   27b0c:	4053      	eors	r3, r2
   27b0e:	b2db      	uxtb	r3, r3
   27b10:	2b00      	cmp	r3, #0
   27b12:	d054      	beq.n	27bbe <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27b14:	1dfb      	adds	r3, r7, #7
   27b16:	781b      	ldrb	r3, [r3, #0]
   27b18:	2b00      	cmp	r3, #0
   27b1a:	d04a      	beq.n	27bb2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27b1c:	68bb      	ldr	r3, [r7, #8]
   27b1e:	785b      	ldrb	r3, [r3, #1]
   27b20:	2b00      	cmp	r3, #0
   27b22:	d03f      	beq.n	27ba4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27b24:	68fb      	ldr	r3, [r7, #12]
   27b26:	0018      	movs	r0, r3
   27b28:	4b27      	ldr	r3, [pc, #156]	; (27bc8 <spi_select_slave+0xdc>)
   27b2a:	4798      	blx	r3
   27b2c:	0003      	movs	r3, r0
   27b2e:	001a      	movs	r2, r3
   27b30:	2301      	movs	r3, #1
   27b32:	4053      	eors	r3, r2
   27b34:	b2db      	uxtb	r3, r3
   27b36:	2b00      	cmp	r3, #0
   27b38:	d007      	beq.n	27b4a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27b3a:	68bb      	ldr	r3, [r7, #8]
   27b3c:	781b      	ldrb	r3, [r3, #0]
   27b3e:	2101      	movs	r1, #1
   27b40:	0018      	movs	r0, r3
   27b42:	4b22      	ldr	r3, [pc, #136]	; (27bcc <spi_select_slave+0xe0>)
   27b44:	4798      	blx	r3
					return STATUS_BUSY;
   27b46:	2305      	movs	r3, #5
   27b48:	e03a      	b.n	27bc0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27b4a:	68bb      	ldr	r3, [r7, #8]
   27b4c:	781b      	ldrb	r3, [r3, #0]
   27b4e:	2100      	movs	r1, #0
   27b50:	0018      	movs	r0, r3
   27b52:	4b1e      	ldr	r3, [pc, #120]	; (27bcc <spi_select_slave+0xe0>)
   27b54:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27b56:	68bb      	ldr	r3, [r7, #8]
   27b58:	789b      	ldrb	r3, [r3, #2]
   27b5a:	b29a      	uxth	r2, r3
   27b5c:	68fb      	ldr	r3, [r7, #12]
   27b5e:	0011      	movs	r1, r2
   27b60:	0018      	movs	r0, r3
   27b62:	4b1b      	ldr	r3, [pc, #108]	; (27bd0 <spi_select_slave+0xe4>)
   27b64:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   27b66:	68fb      	ldr	r3, [r7, #12]
   27b68:	79db      	ldrb	r3, [r3, #7]
   27b6a:	2201      	movs	r2, #1
   27b6c:	4053      	eors	r3, r2
   27b6e:	b2db      	uxtb	r3, r3
   27b70:	2b00      	cmp	r3, #0
   27b72:	d024      	beq.n	27bbe <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27b74:	46c0      	nop			; (mov r8, r8)
   27b76:	68fb      	ldr	r3, [r7, #12]
   27b78:	0018      	movs	r0, r3
   27b7a:	4b16      	ldr	r3, [pc, #88]	; (27bd4 <spi_select_slave+0xe8>)
   27b7c:	4798      	blx	r3
   27b7e:	0003      	movs	r3, r0
   27b80:	001a      	movs	r2, r3
   27b82:	2301      	movs	r3, #1
   27b84:	4053      	eors	r3, r2
   27b86:	b2db      	uxtb	r3, r3
   27b88:	2b00      	cmp	r3, #0
   27b8a:	d1f4      	bne.n	27b76 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27b8c:	2316      	movs	r3, #22
   27b8e:	18fb      	adds	r3, r7, r3
   27b90:	2200      	movs	r2, #0
   27b92:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27b94:	2316      	movs	r3, #22
   27b96:	18fa      	adds	r2, r7, r3
   27b98:	68fb      	ldr	r3, [r7, #12]
   27b9a:	0011      	movs	r1, r2
   27b9c:	0018      	movs	r0, r3
   27b9e:	4b0e      	ldr	r3, [pc, #56]	; (27bd8 <spi_select_slave+0xec>)
   27ba0:	4798      	blx	r3
   27ba2:	e00c      	b.n	27bbe <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27ba4:	68bb      	ldr	r3, [r7, #8]
   27ba6:	781b      	ldrb	r3, [r3, #0]
   27ba8:	2100      	movs	r1, #0
   27baa:	0018      	movs	r0, r3
   27bac:	4b07      	ldr	r3, [pc, #28]	; (27bcc <spi_select_slave+0xe0>)
   27bae:	4798      	blx	r3
   27bb0:	e005      	b.n	27bbe <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   27bb2:	68bb      	ldr	r3, [r7, #8]
   27bb4:	781b      	ldrb	r3, [r3, #0]
   27bb6:	2101      	movs	r1, #1
   27bb8:	0018      	movs	r0, r3
   27bba:	4b04      	ldr	r3, [pc, #16]	; (27bcc <spi_select_slave+0xe0>)
   27bbc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   27bbe:	2300      	movs	r3, #0
}
   27bc0:	0018      	movs	r0, r3
   27bc2:	46bd      	mov	sp, r7
   27bc4:	b006      	add	sp, #24
   27bc6:	bd80      	pop	{r7, pc}
   27bc8:	00027431 	.word	0x00027431
   27bcc:	000271f9 	.word	0x000271f9
   27bd0:	00027481 	.word	0x00027481
   27bd4:	00027459 	.word	0x00027459
   27bd8:	000274c9 	.word	0x000274c9

00027bdc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27bdc:	b580      	push	{r7, lr}
   27bde:	b086      	sub	sp, #24
   27be0:	af00      	add	r7, sp, #0
   27be2:	60f8      	str	r0, [r7, #12]
   27be4:	60b9      	str	r1, [r7, #8]
   27be6:	1dbb      	adds	r3, r7, #6
   27be8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27bea:	68fb      	ldr	r3, [r7, #12]
   27bec:	2238      	movs	r2, #56	; 0x38
   27bee:	5c9b      	ldrb	r3, [r3, r2]
   27bf0:	b2db      	uxtb	r3, r3
   27bf2:	2b05      	cmp	r3, #5
   27bf4:	d101      	bne.n	27bfa <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27bf6:	2305      	movs	r3, #5
   27bf8:	e087      	b.n	27d0a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   27bfa:	1dbb      	adds	r3, r7, #6
   27bfc:	881b      	ldrh	r3, [r3, #0]
   27bfe:	2b00      	cmp	r3, #0
   27c00:	d101      	bne.n	27c06 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27c02:	2317      	movs	r3, #23
   27c04:	e081      	b.n	27d0a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   27c06:	2316      	movs	r3, #22
   27c08:	18fb      	adds	r3, r7, r3
   27c0a:	2200      	movs	r2, #0
   27c0c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27c0e:	2314      	movs	r3, #20
   27c10:	18fb      	adds	r3, r7, r3
   27c12:	1dba      	adds	r2, r7, #6
   27c14:	8812      	ldrh	r2, [r2, #0]
   27c16:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   27c18:	e05f      	b.n	27cda <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   27c1a:	46c0      	nop			; (mov r8, r8)
   27c1c:	68fb      	ldr	r3, [r7, #12]
   27c1e:	0018      	movs	r0, r3
   27c20:	4b3c      	ldr	r3, [pc, #240]	; (27d14 <spi_write_buffer_wait+0x138>)
   27c22:	4798      	blx	r3
   27c24:	0003      	movs	r3, r0
   27c26:	001a      	movs	r2, r3
   27c28:	2301      	movs	r3, #1
   27c2a:	4053      	eors	r3, r2
   27c2c:	b2db      	uxtb	r3, r3
   27c2e:	2b00      	cmp	r3, #0
   27c30:	d1f4      	bne.n	27c1c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27c32:	2316      	movs	r3, #22
   27c34:	18fb      	adds	r3, r7, r3
   27c36:	881b      	ldrh	r3, [r3, #0]
   27c38:	2216      	movs	r2, #22
   27c3a:	18ba      	adds	r2, r7, r2
   27c3c:	1c59      	adds	r1, r3, #1
   27c3e:	8011      	strh	r1, [r2, #0]
   27c40:	001a      	movs	r2, r3
   27c42:	68bb      	ldr	r3, [r7, #8]
   27c44:	189b      	adds	r3, r3, r2
   27c46:	781a      	ldrb	r2, [r3, #0]
   27c48:	2312      	movs	r3, #18
   27c4a:	18fb      	adds	r3, r7, r3
   27c4c:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27c4e:	68fb      	ldr	r3, [r7, #12]
   27c50:	799b      	ldrb	r3, [r3, #6]
   27c52:	2b01      	cmp	r3, #1
   27c54:	d115      	bne.n	27c82 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27c56:	2316      	movs	r3, #22
   27c58:	18fb      	adds	r3, r7, r3
   27c5a:	881b      	ldrh	r3, [r3, #0]
   27c5c:	2216      	movs	r2, #22
   27c5e:	18ba      	adds	r2, r7, r2
   27c60:	1c59      	adds	r1, r3, #1
   27c62:	8011      	strh	r1, [r2, #0]
   27c64:	001a      	movs	r2, r3
   27c66:	68bb      	ldr	r3, [r7, #8]
   27c68:	189b      	adds	r3, r3, r2
   27c6a:	781b      	ldrb	r3, [r3, #0]
   27c6c:	021b      	lsls	r3, r3, #8
   27c6e:	b21a      	sxth	r2, r3
   27c70:	2312      	movs	r3, #18
   27c72:	18fb      	adds	r3, r7, r3
   27c74:	2100      	movs	r1, #0
   27c76:	5e5b      	ldrsh	r3, [r3, r1]
   27c78:	4313      	orrs	r3, r2
   27c7a:	b21a      	sxth	r2, r3
   27c7c:	2312      	movs	r3, #18
   27c7e:	18fb      	adds	r3, r7, r3
   27c80:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27c82:	2312      	movs	r3, #18
   27c84:	18fb      	adds	r3, r7, r3
   27c86:	881a      	ldrh	r2, [r3, #0]
   27c88:	68fb      	ldr	r3, [r7, #12]
   27c8a:	0011      	movs	r1, r2
   27c8c:	0018      	movs	r0, r3
   27c8e:	4b22      	ldr	r3, [pc, #136]	; (27d18 <spi_write_buffer_wait+0x13c>)
   27c90:	4798      	blx	r3

		if (module->receiver_enabled) {
   27c92:	68fb      	ldr	r3, [r7, #12]
   27c94:	79db      	ldrb	r3, [r3, #7]
   27c96:	2214      	movs	r2, #20
   27c98:	18ba      	adds	r2, r7, r2
   27c9a:	2114      	movs	r1, #20
   27c9c:	1879      	adds	r1, r7, r1
   27c9e:	8809      	ldrh	r1, [r1, #0]
   27ca0:	8011      	strh	r1, [r2, #0]
   27ca2:	2b00      	cmp	r3, #0
   27ca4:	d019      	beq.n	27cda <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   27ca6:	46c0      	nop			; (mov r8, r8)
   27ca8:	68fb      	ldr	r3, [r7, #12]
   27caa:	0018      	movs	r0, r3
   27cac:	4b1b      	ldr	r3, [pc, #108]	; (27d1c <spi_write_buffer_wait+0x140>)
   27cae:	4798      	blx	r3
   27cb0:	0003      	movs	r3, r0
   27cb2:	001a      	movs	r2, r3
   27cb4:	2301      	movs	r3, #1
   27cb6:	4053      	eors	r3, r2
   27cb8:	b2db      	uxtb	r3, r3
   27cba:	2b00      	cmp	r3, #0
   27cbc:	d1f4      	bne.n	27ca8 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   27cbe:	2310      	movs	r3, #16
   27cc0:	18fa      	adds	r2, r7, r3
   27cc2:	68fb      	ldr	r3, [r7, #12]
   27cc4:	0011      	movs	r1, r2
   27cc6:	0018      	movs	r0, r3
   27cc8:	4b15      	ldr	r3, [pc, #84]	; (27d20 <spi_write_buffer_wait+0x144>)
   27cca:	4798      	blx	r3
			flush_length--;
   27ccc:	2314      	movs	r3, #20
   27cce:	18fb      	adds	r3, r7, r3
   27cd0:	881a      	ldrh	r2, [r3, #0]
   27cd2:	2314      	movs	r3, #20
   27cd4:	18fb      	adds	r3, r7, r3
   27cd6:	3a01      	subs	r2, #1
   27cd8:	801a      	strh	r2, [r3, #0]
	while (length--) {
   27cda:	1dbb      	adds	r3, r7, #6
   27cdc:	881b      	ldrh	r3, [r3, #0]
   27cde:	1dba      	adds	r2, r7, #6
   27ce0:	1e59      	subs	r1, r3, #1
   27ce2:	8011      	strh	r1, [r2, #0]
   27ce4:	2b00      	cmp	r3, #0
   27ce6:	d198      	bne.n	27c1a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   27ce8:	68fb      	ldr	r3, [r7, #12]
   27cea:	795b      	ldrb	r3, [r3, #5]
   27cec:	2b01      	cmp	r3, #1
   27cee:	d10b      	bne.n	27d08 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27cf0:	46c0      	nop			; (mov r8, r8)
   27cf2:	68fb      	ldr	r3, [r7, #12]
   27cf4:	0018      	movs	r0, r3
   27cf6:	4b0b      	ldr	r3, [pc, #44]	; (27d24 <spi_write_buffer_wait+0x148>)
   27cf8:	4798      	blx	r3
   27cfa:	0003      	movs	r3, r0
   27cfc:	001a      	movs	r2, r3
   27cfe:	2301      	movs	r3, #1
   27d00:	4053      	eors	r3, r2
   27d02:	b2db      	uxtb	r3, r3
   27d04:	2b00      	cmp	r3, #0
   27d06:	d1f4      	bne.n	27cf2 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   27d08:	2300      	movs	r3, #0
}
   27d0a:	0018      	movs	r0, r3
   27d0c:	46bd      	mov	sp, r7
   27d0e:	b006      	add	sp, #24
   27d10:	bd80      	pop	{r7, pc}
   27d12:	46c0      	nop			; (mov r8, r8)
   27d14:	00027431 	.word	0x00027431
   27d18:	00027481 	.word	0x00027481
   27d1c:	00027459 	.word	0x00027459
   27d20:	000274c9 	.word	0x000274c9
   27d24:	00027409 	.word	0x00027409

00027d28 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   27d28:	b580      	push	{r7, lr}
   27d2a:	b084      	sub	sp, #16
   27d2c:	af00      	add	r7, sp, #0
   27d2e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27d30:	687b      	ldr	r3, [r7, #4]
   27d32:	681b      	ldr	r3, [r3, #0]
   27d34:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   27d36:	687b      	ldr	r3, [r7, #4]
   27d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d3a:	781b      	ldrb	r3, [r3, #0]
   27d3c:	b2da      	uxtb	r2, r3
   27d3e:	230e      	movs	r3, #14
   27d40:	18fb      	adds	r3, r7, r3
   27d42:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27d44:	687b      	ldr	r3, [r7, #4]
   27d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d48:	1c5a      	adds	r2, r3, #1
   27d4a:	687b      	ldr	r3, [r7, #4]
   27d4c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27d4e:	687b      	ldr	r3, [r7, #4]
   27d50:	799b      	ldrb	r3, [r3, #6]
   27d52:	2b01      	cmp	r3, #1
   27d54:	d113      	bne.n	27d7e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   27d56:	687b      	ldr	r3, [r7, #4]
   27d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d5a:	781b      	ldrb	r3, [r3, #0]
   27d5c:	b2db      	uxtb	r3, r3
   27d5e:	021b      	lsls	r3, r3, #8
   27d60:	b21a      	sxth	r2, r3
   27d62:	230e      	movs	r3, #14
   27d64:	18fb      	adds	r3, r7, r3
   27d66:	2100      	movs	r1, #0
   27d68:	5e5b      	ldrsh	r3, [r3, r1]
   27d6a:	4313      	orrs	r3, r2
   27d6c:	b21a      	sxth	r2, r3
   27d6e:	230e      	movs	r3, #14
   27d70:	18fb      	adds	r3, r7, r3
   27d72:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27d74:	687b      	ldr	r3, [r7, #4]
   27d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d78:	1c5a      	adds	r2, r3, #1
   27d7a:	687b      	ldr	r3, [r7, #4]
   27d7c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   27d7e:	230e      	movs	r3, #14
   27d80:	18fb      	adds	r3, r7, r3
   27d82:	881b      	ldrh	r3, [r3, #0]
   27d84:	05db      	lsls	r3, r3, #23
   27d86:	0dda      	lsrs	r2, r3, #23
   27d88:	68bb      	ldr	r3, [r7, #8]
   27d8a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   27d8c:	687b      	ldr	r3, [r7, #4]
   27d8e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27d90:	b29b      	uxth	r3, r3
   27d92:	3b01      	subs	r3, #1
   27d94:	b29a      	uxth	r2, r3
   27d96:	687b      	ldr	r3, [r7, #4]
   27d98:	869a      	strh	r2, [r3, #52]	; 0x34
}
   27d9a:	46c0      	nop			; (mov r8, r8)
   27d9c:	46bd      	mov	sp, r7
   27d9e:	b004      	add	sp, #16
   27da0:	bd80      	pop	{r7, pc}
	...

00027da4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   27da4:	b580      	push	{r7, lr}
   27da6:	b084      	sub	sp, #16
   27da8:	af00      	add	r7, sp, #0
   27daa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27dac:	687b      	ldr	r3, [r7, #4]
   27dae:	681b      	ldr	r3, [r3, #0]
   27db0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   27db2:	4b08      	ldr	r3, [pc, #32]	; (27dd4 <_spi_write_dummy+0x30>)
   27db4:	881b      	ldrh	r3, [r3, #0]
   27db6:	001a      	movs	r2, r3
   27db8:	68fb      	ldr	r3, [r7, #12]
   27dba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27dbc:	687b      	ldr	r3, [r7, #4]
   27dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27dc0:	b29b      	uxth	r3, r3
   27dc2:	3b01      	subs	r3, #1
   27dc4:	b29a      	uxth	r2, r3
   27dc6:	687b      	ldr	r3, [r7, #4]
   27dc8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27dca:	46c0      	nop			; (mov r8, r8)
   27dcc:	46bd      	mov	sp, r7
   27dce:	b004      	add	sp, #16
   27dd0:	bd80      	pop	{r7, pc}
   27dd2:	46c0      	nop			; (mov r8, r8)
   27dd4:	20005ad8 	.word	0x20005ad8

00027dd8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   27dd8:	b580      	push	{r7, lr}
   27dda:	b084      	sub	sp, #16
   27ddc:	af00      	add	r7, sp, #0
   27dde:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27de0:	687b      	ldr	r3, [r7, #4]
   27de2:	681b      	ldr	r3, [r3, #0]
   27de4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   27de6:	230a      	movs	r3, #10
   27de8:	18fb      	adds	r3, r7, r3
   27dea:	2200      	movs	r2, #0
   27dec:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   27dee:	68fb      	ldr	r3, [r7, #12]
   27df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27df2:	230a      	movs	r3, #10
   27df4:	18fb      	adds	r3, r7, r3
   27df6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27df8:	687b      	ldr	r3, [r7, #4]
   27dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27dfc:	b29b      	uxth	r3, r3
   27dfe:	3b01      	subs	r3, #1
   27e00:	b29a      	uxth	r2, r3
   27e02:	687b      	ldr	r3, [r7, #4]
   27e04:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27e06:	46c0      	nop			; (mov r8, r8)
   27e08:	46bd      	mov	sp, r7
   27e0a:	b004      	add	sp, #16
   27e0c:	bd80      	pop	{r7, pc}

00027e0e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   27e0e:	b580      	push	{r7, lr}
   27e10:	b084      	sub	sp, #16
   27e12:	af00      	add	r7, sp, #0
   27e14:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27e16:	687b      	ldr	r3, [r7, #4]
   27e18:	681b      	ldr	r3, [r3, #0]
   27e1a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   27e1c:	68fb      	ldr	r3, [r7, #12]
   27e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e20:	b29a      	uxth	r2, r3
   27e22:	230a      	movs	r3, #10
   27e24:	18fb      	adds	r3, r7, r3
   27e26:	05d2      	lsls	r2, r2, #23
   27e28:	0dd2      	lsrs	r2, r2, #23
   27e2a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   27e2c:	687b      	ldr	r3, [r7, #4]
   27e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e30:	220a      	movs	r2, #10
   27e32:	18ba      	adds	r2, r7, r2
   27e34:	8812      	ldrh	r2, [r2, #0]
   27e36:	b2d2      	uxtb	r2, r2
   27e38:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   27e3a:	687b      	ldr	r3, [r7, #4]
   27e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e3e:	1c5a      	adds	r2, r3, #1
   27e40:	687b      	ldr	r3, [r7, #4]
   27e42:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27e44:	687b      	ldr	r3, [r7, #4]
   27e46:	799b      	ldrb	r3, [r3, #6]
   27e48:	2b01      	cmp	r3, #1
   27e4a:	d10d      	bne.n	27e68 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   27e4c:	687b      	ldr	r3, [r7, #4]
   27e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e50:	220a      	movs	r2, #10
   27e52:	18ba      	adds	r2, r7, r2
   27e54:	8812      	ldrh	r2, [r2, #0]
   27e56:	0a12      	lsrs	r2, r2, #8
   27e58:	b292      	uxth	r2, r2
   27e5a:	b2d2      	uxtb	r2, r2
   27e5c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   27e5e:	687b      	ldr	r3, [r7, #4]
   27e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e62:	1c5a      	adds	r2, r3, #1
   27e64:	687b      	ldr	r3, [r7, #4]
   27e66:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   27e68:	687b      	ldr	r3, [r7, #4]
   27e6a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27e6c:	b29b      	uxth	r3, r3
   27e6e:	3b01      	subs	r3, #1
   27e70:	b29a      	uxth	r2, r3
   27e72:	687b      	ldr	r3, [r7, #4]
   27e74:	861a      	strh	r2, [r3, #48]	; 0x30
}
   27e76:	46c0      	nop			; (mov r8, r8)
   27e78:	46bd      	mov	sp, r7
   27e7a:	b004      	add	sp, #16
   27e7c:	bd80      	pop	{r7, pc}
	...

00027e80 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   27e80:	b580      	push	{r7, lr}
   27e82:	b086      	sub	sp, #24
   27e84:	af00      	add	r7, sp, #0
   27e86:	0002      	movs	r2, r0
   27e88:	1dfb      	adds	r3, r7, #7
   27e8a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   27e8c:	1dfb      	adds	r3, r7, #7
   27e8e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   27e90:	4b96      	ldr	r3, [pc, #600]	; (280ec <_spi_interrupt_handler+0x26c>)
   27e92:	0092      	lsls	r2, r2, #2
   27e94:	58d3      	ldr	r3, [r2, r3]
   27e96:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27e98:	697b      	ldr	r3, [r7, #20]
   27e9a:	681b      	ldr	r3, [r3, #0]
   27e9c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   27e9e:	697b      	ldr	r3, [r7, #20]
   27ea0:	2237      	movs	r2, #55	; 0x37
   27ea2:	5c9a      	ldrb	r2, [r3, r2]
   27ea4:	697b      	ldr	r3, [r7, #20]
   27ea6:	2136      	movs	r1, #54	; 0x36
   27ea8:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   27eaa:	230f      	movs	r3, #15
   27eac:	18fb      	adds	r3, r7, r3
   27eae:	400a      	ands	r2, r1
   27eb0:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   27eb2:	693b      	ldr	r3, [r7, #16]
   27eb4:	7e1b      	ldrb	r3, [r3, #24]
   27eb6:	b2da      	uxtb	r2, r3
   27eb8:	230c      	movs	r3, #12
   27eba:	18fb      	adds	r3, r7, r3
   27ebc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   27ebe:	693b      	ldr	r3, [r7, #16]
   27ec0:	7d9b      	ldrb	r3, [r3, #22]
   27ec2:	b2db      	uxtb	r3, r3
   27ec4:	b29a      	uxth	r2, r3
   27ec6:	230c      	movs	r3, #12
   27ec8:	18fb      	adds	r3, r7, r3
   27eca:	210c      	movs	r1, #12
   27ecc:	1879      	adds	r1, r7, r1
   27ece:	8809      	ldrh	r1, [r1, #0]
   27ed0:	400a      	ands	r2, r1
   27ed2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   27ed4:	230c      	movs	r3, #12
   27ed6:	18fb      	adds	r3, r7, r3
   27ed8:	881b      	ldrh	r3, [r3, #0]
   27eda:	2201      	movs	r2, #1
   27edc:	4013      	ands	r3, r2
   27ede:	d038      	beq.n	27f52 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27ee0:	697b      	ldr	r3, [r7, #20]
   27ee2:	795b      	ldrb	r3, [r3, #5]
   27ee4:	2b01      	cmp	r3, #1
   27ee6:	d110      	bne.n	27f0a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   27ee8:	697b      	ldr	r3, [r7, #20]
   27eea:	7a5b      	ldrb	r3, [r3, #9]
   27eec:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27eee:	2b00      	cmp	r3, #0
   27ef0:	d10b      	bne.n	27f0a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   27ef2:	697b      	ldr	r3, [r7, #20]
   27ef4:	0018      	movs	r0, r3
   27ef6:	4b7e      	ldr	r3, [pc, #504]	; (280f0 <_spi_interrupt_handler+0x270>)
   27ef8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   27efa:	697b      	ldr	r3, [r7, #20]
   27efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27efe:	b29b      	uxth	r3, r3
   27f00:	2b00      	cmp	r3, #0
   27f02:	d102      	bne.n	27f0a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27f04:	693b      	ldr	r3, [r7, #16]
   27f06:	2201      	movs	r2, #1
   27f08:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   27f0a:	697b      	ldr	r3, [r7, #20]
   27f0c:	795b      	ldrb	r3, [r3, #5]
		if (0
   27f0e:	2b01      	cmp	r3, #1
   27f10:	d11f      	bne.n	27f52 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   27f12:	697b      	ldr	r3, [r7, #20]
   27f14:	7a5b      	ldrb	r3, [r3, #9]
   27f16:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   27f18:	2b00      	cmp	r3, #0
   27f1a:	d01a      	beq.n	27f52 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   27f1c:	697b      	ldr	r3, [r7, #20]
   27f1e:	0018      	movs	r0, r3
   27f20:	4b74      	ldr	r3, [pc, #464]	; (280f4 <_spi_interrupt_handler+0x274>)
   27f22:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27f24:	697b      	ldr	r3, [r7, #20]
   27f26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27f28:	b29b      	uxth	r3, r3
   27f2a:	2b00      	cmp	r3, #0
   27f2c:	d111      	bne.n	27f52 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27f2e:	693b      	ldr	r3, [r7, #16]
   27f30:	2201      	movs	r2, #1
   27f32:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27f34:	697b      	ldr	r3, [r7, #20]
   27f36:	7a5b      	ldrb	r3, [r3, #9]
   27f38:	b2db      	uxtb	r3, r3
   27f3a:	2b01      	cmp	r3, #1
   27f3c:	d109      	bne.n	27f52 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   27f3e:	697b      	ldr	r3, [r7, #20]
   27f40:	79db      	ldrb	r3, [r3, #7]
   27f42:	2201      	movs	r2, #1
   27f44:	4053      	eors	r3, r2
   27f46:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   27f48:	2b00      	cmp	r3, #0
   27f4a:	d002      	beq.n	27f52 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27f4c:	693b      	ldr	r3, [r7, #16]
   27f4e:	2202      	movs	r2, #2
   27f50:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   27f52:	230c      	movs	r3, #12
   27f54:	18fb      	adds	r3, r7, r3
   27f56:	881b      	ldrh	r3, [r3, #0]
   27f58:	2204      	movs	r2, #4
   27f5a:	4013      	ands	r3, r2
   27f5c:	d100      	bne.n	27f60 <_spi_interrupt_handler+0xe0>
   27f5e:	e07e      	b.n	2805e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27f60:	693b      	ldr	r3, [r7, #16]
   27f62:	8b5b      	ldrh	r3, [r3, #26]
   27f64:	b29b      	uxth	r3, r3
   27f66:	001a      	movs	r2, r3
   27f68:	2304      	movs	r3, #4
   27f6a:	4013      	ands	r3, r2
   27f6c:	d022      	beq.n	27fb4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   27f6e:	697b      	ldr	r3, [r7, #20]
   27f70:	7a5b      	ldrb	r3, [r3, #9]
   27f72:	b2db      	uxtb	r3, r3
   27f74:	2b01      	cmp	r3, #1
   27f76:	d014      	beq.n	27fa2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   27f78:	697b      	ldr	r3, [r7, #20]
   27f7a:	2238      	movs	r2, #56	; 0x38
   27f7c:	211e      	movs	r1, #30
   27f7e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   27f80:	697b      	ldr	r3, [r7, #20]
   27f82:	2203      	movs	r2, #3
   27f84:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   27f86:	693b      	ldr	r3, [r7, #16]
   27f88:	2205      	movs	r2, #5
   27f8a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   27f8c:	230f      	movs	r3, #15
   27f8e:	18fb      	adds	r3, r7, r3
   27f90:	781b      	ldrb	r3, [r3, #0]
   27f92:	2208      	movs	r2, #8
   27f94:	4013      	ands	r3, r2
   27f96:	d004      	beq.n	27fa2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   27f98:	697b      	ldr	r3, [r7, #20]
   27f9a:	699b      	ldr	r3, [r3, #24]
   27f9c:	697a      	ldr	r2, [r7, #20]
   27f9e:	0010      	movs	r0, r2
   27fa0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   27fa2:	693b      	ldr	r3, [r7, #16]
   27fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27fa6:	230a      	movs	r3, #10
   27fa8:	18fb      	adds	r3, r7, r3
   27faa:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27fac:	693b      	ldr	r3, [r7, #16]
   27fae:	2204      	movs	r2, #4
   27fb0:	835a      	strh	r2, [r3, #26]
   27fb2:	e054      	b.n	2805e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   27fb4:	697b      	ldr	r3, [r7, #20]
   27fb6:	7a5b      	ldrb	r3, [r3, #9]
   27fb8:	b2db      	uxtb	r3, r3
   27fba:	2b01      	cmp	r3, #1
   27fbc:	d11e      	bne.n	27ffc <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   27fbe:	697b      	ldr	r3, [r7, #20]
   27fc0:	0018      	movs	r0, r3
   27fc2:	4b4d      	ldr	r3, [pc, #308]	; (280f8 <_spi_interrupt_handler+0x278>)
   27fc4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   27fc6:	697b      	ldr	r3, [r7, #20]
   27fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27fca:	b29b      	uxth	r3, r3
   27fcc:	2b00      	cmp	r3, #0
   27fce:	d146      	bne.n	2805e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   27fd0:	693b      	ldr	r3, [r7, #16]
   27fd2:	2204      	movs	r2, #4
   27fd4:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   27fd6:	697b      	ldr	r3, [r7, #20]
   27fd8:	2238      	movs	r2, #56	; 0x38
   27fda:	2100      	movs	r1, #0
   27fdc:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   27fde:	697b      	ldr	r3, [r7, #20]
   27fe0:	2203      	movs	r2, #3
   27fe2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   27fe4:	230f      	movs	r3, #15
   27fe6:	18fb      	adds	r3, r7, r3
   27fe8:	781b      	ldrb	r3, [r3, #0]
   27fea:	2201      	movs	r2, #1
   27fec:	4013      	ands	r3, r2
   27fee:	d036      	beq.n	2805e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   27ff0:	697b      	ldr	r3, [r7, #20]
   27ff2:	68db      	ldr	r3, [r3, #12]
   27ff4:	697a      	ldr	r2, [r7, #20]
   27ff6:	0010      	movs	r0, r2
   27ff8:	4798      	blx	r3
   27ffa:	e030      	b.n	2805e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   27ffc:	697b      	ldr	r3, [r7, #20]
   27ffe:	0018      	movs	r0, r3
   28000:	4b3e      	ldr	r3, [pc, #248]	; (280fc <_spi_interrupt_handler+0x27c>)
   28002:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28004:	697b      	ldr	r3, [r7, #20]
   28006:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28008:	b29b      	uxth	r3, r3
   2800a:	2b00      	cmp	r3, #0
   2800c:	d127      	bne.n	2805e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   2800e:	697b      	ldr	r3, [r7, #20]
   28010:	2238      	movs	r2, #56	; 0x38
   28012:	2100      	movs	r1, #0
   28014:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28016:	693b      	ldr	r3, [r7, #16]
   28018:	2204      	movs	r2, #4
   2801a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   2801c:	697b      	ldr	r3, [r7, #20]
   2801e:	7a5b      	ldrb	r3, [r3, #9]
   28020:	b2db      	uxtb	r3, r3
   28022:	2b02      	cmp	r3, #2
   28024:	d10b      	bne.n	2803e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   28026:	230f      	movs	r3, #15
   28028:	18fb      	adds	r3, r7, r3
   2802a:	781b      	ldrb	r3, [r3, #0]
   2802c:	2204      	movs	r2, #4
   2802e:	4013      	ands	r3, r2
   28030:	d015      	beq.n	2805e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28032:	697b      	ldr	r3, [r7, #20]
   28034:	695b      	ldr	r3, [r3, #20]
   28036:	697a      	ldr	r2, [r7, #20]
   28038:	0010      	movs	r0, r2
   2803a:	4798      	blx	r3
   2803c:	e00f      	b.n	2805e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   2803e:	697b      	ldr	r3, [r7, #20]
   28040:	7a5b      	ldrb	r3, [r3, #9]
   28042:	b2db      	uxtb	r3, r3
   28044:	2b00      	cmp	r3, #0
   28046:	d10a      	bne.n	2805e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   28048:	230f      	movs	r3, #15
   2804a:	18fb      	adds	r3, r7, r3
   2804c:	781b      	ldrb	r3, [r3, #0]
   2804e:	2202      	movs	r2, #2
   28050:	4013      	ands	r3, r2
   28052:	d004      	beq.n	2805e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28054:	697b      	ldr	r3, [r7, #20]
   28056:	691b      	ldr	r3, [r3, #16]
   28058:	697a      	ldr	r2, [r7, #20]
   2805a:	0010      	movs	r0, r2
   2805c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   2805e:	230c      	movs	r3, #12
   28060:	18fb      	adds	r3, r7, r3
   28062:	881b      	ldrh	r3, [r3, #0]
   28064:	2202      	movs	r2, #2
   28066:	4013      	ands	r3, r2
   28068:	d024      	beq.n	280b4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2806a:	697b      	ldr	r3, [r7, #20]
   2806c:	795b      	ldrb	r3, [r3, #5]
   2806e:	2b01      	cmp	r3, #1
   28070:	d120      	bne.n	280b4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28072:	697b      	ldr	r3, [r7, #20]
   28074:	7a5b      	ldrb	r3, [r3, #9]
   28076:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28078:	2b01      	cmp	r3, #1
   2807a:	d11b      	bne.n	280b4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2807c:	697b      	ldr	r3, [r7, #20]
   2807e:	79db      	ldrb	r3, [r3, #7]
   28080:	2201      	movs	r2, #1
   28082:	4053      	eors	r3, r2
   28084:	b2db      	uxtb	r3, r3
   28086:	2b00      	cmp	r3, #0
   28088:	d014      	beq.n	280b4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2808a:	693b      	ldr	r3, [r7, #16]
   2808c:	2202      	movs	r2, #2
   2808e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28090:	697b      	ldr	r3, [r7, #20]
   28092:	2203      	movs	r2, #3
   28094:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   28096:	697b      	ldr	r3, [r7, #20]
   28098:	2238      	movs	r2, #56	; 0x38
   2809a:	2100      	movs	r1, #0
   2809c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   2809e:	230f      	movs	r3, #15
   280a0:	18fb      	adds	r3, r7, r3
   280a2:	781b      	ldrb	r3, [r3, #0]
   280a4:	2201      	movs	r2, #1
   280a6:	4013      	ands	r3, r2
   280a8:	d004      	beq.n	280b4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   280aa:	697b      	ldr	r3, [r7, #20]
   280ac:	68db      	ldr	r3, [r3, #12]
   280ae:	697a      	ldr	r2, [r7, #20]
   280b0:	0010      	movs	r0, r2
   280b2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   280b4:	230c      	movs	r3, #12
   280b6:	18fb      	adds	r3, r7, r3
   280b8:	881b      	ldrh	r3, [r3, #0]
   280ba:	2280      	movs	r2, #128	; 0x80
   280bc:	4013      	ands	r3, r2
   280be:	d010      	beq.n	280e2 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   280c0:	693b      	ldr	r3, [r7, #16]
   280c2:	2280      	movs	r2, #128	; 0x80
   280c4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   280c6:	693b      	ldr	r3, [r7, #16]
   280c8:	2280      	movs	r2, #128	; 0x80
   280ca:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   280cc:	230f      	movs	r3, #15
   280ce:	18fb      	adds	r3, r7, r3
   280d0:	781b      	ldrb	r3, [r3, #0]
   280d2:	2240      	movs	r2, #64	; 0x40
   280d4:	4013      	ands	r3, r2
   280d6:	d004      	beq.n	280e2 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   280d8:	697b      	ldr	r3, [r7, #20]
   280da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   280dc:	697a      	ldr	r2, [r7, #20]
   280de:	0010      	movs	r0, r2
   280e0:	4798      	blx	r3
		}
	}
#  endif
}
   280e2:	46c0      	nop			; (mov r8, r8)
   280e4:	46bd      	mov	sp, r7
   280e6:	b006      	add	sp, #24
   280e8:	bd80      	pop	{r7, pc}
   280ea:	46c0      	nop			; (mov r8, r8)
   280ec:	20005ac0 	.word	0x20005ac0
   280f0:	00027da5 	.word	0x00027da5
   280f4:	00027d29 	.word	0x00027d29
   280f8:	00027dd9 	.word	0x00027dd9
   280fc:	00027e0f 	.word	0x00027e0f

00028100 <system_gclk_chan_get_config_defaults>:
{
   28100:	b580      	push	{r7, lr}
   28102:	b082      	sub	sp, #8
   28104:	af00      	add	r7, sp, #0
   28106:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28108:	687b      	ldr	r3, [r7, #4]
   2810a:	2200      	movs	r2, #0
   2810c:	701a      	strb	r2, [r3, #0]
}
   2810e:	46c0      	nop			; (mov r8, r8)
   28110:	46bd      	mov	sp, r7
   28112:	b002      	add	sp, #8
   28114:	bd80      	pop	{r7, pc}
	...

00028118 <system_apb_clock_set_mask>:
{
   28118:	b580      	push	{r7, lr}
   2811a:	b082      	sub	sp, #8
   2811c:	af00      	add	r7, sp, #0
   2811e:	0002      	movs	r2, r0
   28120:	6039      	str	r1, [r7, #0]
   28122:	1dfb      	adds	r3, r7, #7
   28124:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28126:	1dfb      	adds	r3, r7, #7
   28128:	781b      	ldrb	r3, [r3, #0]
   2812a:	2b01      	cmp	r3, #1
   2812c:	d00a      	beq.n	28144 <system_apb_clock_set_mask+0x2c>
   2812e:	2b02      	cmp	r3, #2
   28130:	d00f      	beq.n	28152 <system_apb_clock_set_mask+0x3a>
   28132:	2b00      	cmp	r3, #0
   28134:	d114      	bne.n	28160 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28136:	4b0e      	ldr	r3, [pc, #56]	; (28170 <system_apb_clock_set_mask+0x58>)
   28138:	4a0d      	ldr	r2, [pc, #52]	; (28170 <system_apb_clock_set_mask+0x58>)
   2813a:	6991      	ldr	r1, [r2, #24]
   2813c:	683a      	ldr	r2, [r7, #0]
   2813e:	430a      	orrs	r2, r1
   28140:	619a      	str	r2, [r3, #24]
			break;
   28142:	e00f      	b.n	28164 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28144:	4b0a      	ldr	r3, [pc, #40]	; (28170 <system_apb_clock_set_mask+0x58>)
   28146:	4a0a      	ldr	r2, [pc, #40]	; (28170 <system_apb_clock_set_mask+0x58>)
   28148:	69d1      	ldr	r1, [r2, #28]
   2814a:	683a      	ldr	r2, [r7, #0]
   2814c:	430a      	orrs	r2, r1
   2814e:	61da      	str	r2, [r3, #28]
			break;
   28150:	e008      	b.n	28164 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28152:	4b07      	ldr	r3, [pc, #28]	; (28170 <system_apb_clock_set_mask+0x58>)
   28154:	4a06      	ldr	r2, [pc, #24]	; (28170 <system_apb_clock_set_mask+0x58>)
   28156:	6a11      	ldr	r1, [r2, #32]
   28158:	683a      	ldr	r2, [r7, #0]
   2815a:	430a      	orrs	r2, r1
   2815c:	621a      	str	r2, [r3, #32]
			break;
   2815e:	e001      	b.n	28164 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28160:	2317      	movs	r3, #23
   28162:	e000      	b.n	28166 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28164:	2300      	movs	r3, #0
}
   28166:	0018      	movs	r0, r3
   28168:	46bd      	mov	sp, r7
   2816a:	b002      	add	sp, #8
   2816c:	bd80      	pop	{r7, pc}
   2816e:	46c0      	nop			; (mov r8, r8)
   28170:	40000400 	.word	0x40000400

00028174 <system_pinmux_get_config_defaults>:
{
   28174:	b580      	push	{r7, lr}
   28176:	b082      	sub	sp, #8
   28178:	af00      	add	r7, sp, #0
   2817a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2817c:	687b      	ldr	r3, [r7, #4]
   2817e:	2280      	movs	r2, #128	; 0x80
   28180:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28182:	687b      	ldr	r3, [r7, #4]
   28184:	2200      	movs	r2, #0
   28186:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28188:	687b      	ldr	r3, [r7, #4]
   2818a:	2201      	movs	r2, #1
   2818c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2818e:	687b      	ldr	r3, [r7, #4]
   28190:	2200      	movs	r2, #0
   28192:	70da      	strb	r2, [r3, #3]
}
   28194:	46c0      	nop			; (mov r8, r8)
   28196:	46bd      	mov	sp, r7
   28198:	b002      	add	sp, #8
   2819a:	bd80      	pop	{r7, pc}

0002819c <system_is_debugger_present>:
{
   2819c:	b580      	push	{r7, lr}
   2819e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   281a0:	4b05      	ldr	r3, [pc, #20]	; (281b8 <system_is_debugger_present+0x1c>)
   281a2:	789b      	ldrb	r3, [r3, #2]
   281a4:	b2db      	uxtb	r3, r3
   281a6:	001a      	movs	r2, r3
   281a8:	2302      	movs	r3, #2
   281aa:	4013      	ands	r3, r2
   281ac:	1e5a      	subs	r2, r3, #1
   281ae:	4193      	sbcs	r3, r2
   281b0:	b2db      	uxtb	r3, r3
}
   281b2:	0018      	movs	r0, r3
   281b4:	46bd      	mov	sp, r7
   281b6:	bd80      	pop	{r7, pc}
   281b8:	41002000 	.word	0x41002000

000281bc <usart_is_syncing>:
{
   281bc:	b580      	push	{r7, lr}
   281be:	b084      	sub	sp, #16
   281c0:	af00      	add	r7, sp, #0
   281c2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   281c4:	687b      	ldr	r3, [r7, #4]
   281c6:	681b      	ldr	r3, [r3, #0]
   281c8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   281ca:	68fb      	ldr	r3, [r7, #12]
   281cc:	69db      	ldr	r3, [r3, #28]
   281ce:	1e5a      	subs	r2, r3, #1
   281d0:	4193      	sbcs	r3, r2
   281d2:	b2db      	uxtb	r3, r3
}
   281d4:	0018      	movs	r0, r3
   281d6:	46bd      	mov	sp, r7
   281d8:	b004      	add	sp, #16
   281da:	bd80      	pop	{r7, pc}

000281dc <_usart_wait_for_sync>:
{
   281dc:	b580      	push	{r7, lr}
   281de:	b082      	sub	sp, #8
   281e0:	af00      	add	r7, sp, #0
   281e2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   281e4:	46c0      	nop			; (mov r8, r8)
   281e6:	687b      	ldr	r3, [r7, #4]
   281e8:	0018      	movs	r0, r3
   281ea:	4b04      	ldr	r3, [pc, #16]	; (281fc <_usart_wait_for_sync+0x20>)
   281ec:	4798      	blx	r3
   281ee:	1e03      	subs	r3, r0, #0
   281f0:	d1f9      	bne.n	281e6 <_usart_wait_for_sync+0xa>
}
   281f2:	46c0      	nop			; (mov r8, r8)
   281f4:	46bd      	mov	sp, r7
   281f6:	b002      	add	sp, #8
   281f8:	bd80      	pop	{r7, pc}
   281fa:	46c0      	nop			; (mov r8, r8)
   281fc:	000281bd 	.word	0x000281bd

00028200 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28200:	b5b0      	push	{r4, r5, r7, lr}
   28202:	b08c      	sub	sp, #48	; 0x30
   28204:	af02      	add	r7, sp, #8
   28206:	6078      	str	r0, [r7, #4]
   28208:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2820a:	687b      	ldr	r3, [r7, #4]
   2820c:	681b      	ldr	r3, [r3, #0]
   2820e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28210:	687b      	ldr	r3, [r7, #4]
   28212:	681b      	ldr	r3, [r3, #0]
   28214:	0018      	movs	r0, r3
   28216:	4bab      	ldr	r3, [pc, #684]	; (284c4 <_usart_set_config+0x2c4>)
   28218:	4798      	blx	r3
   2821a:	0003      	movs	r3, r0
   2821c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2821e:	697b      	ldr	r3, [r7, #20]
   28220:	3314      	adds	r3, #20
   28222:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28224:	2300      	movs	r3, #0
   28226:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   28228:	2300      	movs	r3, #0
   2822a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2822c:	230a      	movs	r3, #10
   2822e:	18fb      	adds	r3, r7, r3
   28230:	2200      	movs	r2, #0
   28232:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28234:	231f      	movs	r3, #31
   28236:	18fb      	adds	r3, r7, r3
   28238:	2200      	movs	r2, #0
   2823a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2823c:	231e      	movs	r3, #30
   2823e:	18fb      	adds	r3, r7, r3
   28240:	2210      	movs	r2, #16
   28242:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28244:	683b      	ldr	r3, [r7, #0]
   28246:	8a1b      	ldrh	r3, [r3, #16]
   28248:	2280      	movs	r2, #128	; 0x80
   2824a:	01d2      	lsls	r2, r2, #7
   2824c:	4293      	cmp	r3, r2
   2824e:	d01c      	beq.n	2828a <_usart_set_config+0x8a>
   28250:	2280      	movs	r2, #128	; 0x80
   28252:	01d2      	lsls	r2, r2, #7
   28254:	4293      	cmp	r3, r2
   28256:	dc06      	bgt.n	28266 <_usart_set_config+0x66>
   28258:	2b00      	cmp	r3, #0
   2825a:	d00d      	beq.n	28278 <_usart_set_config+0x78>
   2825c:	2280      	movs	r2, #128	; 0x80
   2825e:	0192      	lsls	r2, r2, #6
   28260:	4293      	cmp	r3, r2
   28262:	d024      	beq.n	282ae <_usart_set_config+0xae>
   28264:	e035      	b.n	282d2 <_usart_set_config+0xd2>
   28266:	22c0      	movs	r2, #192	; 0xc0
   28268:	01d2      	lsls	r2, r2, #7
   2826a:	4293      	cmp	r3, r2
   2826c:	d028      	beq.n	282c0 <_usart_set_config+0xc0>
   2826e:	2280      	movs	r2, #128	; 0x80
   28270:	0212      	lsls	r2, r2, #8
   28272:	4293      	cmp	r3, r2
   28274:	d012      	beq.n	2829c <_usart_set_config+0x9c>
   28276:	e02c      	b.n	282d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28278:	231f      	movs	r3, #31
   2827a:	18fb      	adds	r3, r7, r3
   2827c:	2200      	movs	r2, #0
   2827e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28280:	231e      	movs	r3, #30
   28282:	18fb      	adds	r3, r7, r3
   28284:	2210      	movs	r2, #16
   28286:	701a      	strb	r2, [r3, #0]
			break;
   28288:	e023      	b.n	282d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2828a:	231f      	movs	r3, #31
   2828c:	18fb      	adds	r3, r7, r3
   2828e:	2200      	movs	r2, #0
   28290:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28292:	231e      	movs	r3, #30
   28294:	18fb      	adds	r3, r7, r3
   28296:	2208      	movs	r2, #8
   28298:	701a      	strb	r2, [r3, #0]
			break;
   2829a:	e01a      	b.n	282d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2829c:	231f      	movs	r3, #31
   2829e:	18fb      	adds	r3, r7, r3
   282a0:	2200      	movs	r2, #0
   282a2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   282a4:	231e      	movs	r3, #30
   282a6:	18fb      	adds	r3, r7, r3
   282a8:	2203      	movs	r2, #3
   282aa:	701a      	strb	r2, [r3, #0]
			break;
   282ac:	e011      	b.n	282d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   282ae:	231f      	movs	r3, #31
   282b0:	18fb      	adds	r3, r7, r3
   282b2:	2201      	movs	r2, #1
   282b4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   282b6:	231e      	movs	r3, #30
   282b8:	18fb      	adds	r3, r7, r3
   282ba:	2210      	movs	r2, #16
   282bc:	701a      	strb	r2, [r3, #0]
			break;
   282be:	e008      	b.n	282d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   282c0:	231f      	movs	r3, #31
   282c2:	18fb      	adds	r3, r7, r3
   282c4:	2201      	movs	r2, #1
   282c6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   282c8:	231e      	movs	r3, #30
   282ca:	18fb      	adds	r3, r7, r3
   282cc:	2208      	movs	r2, #8
   282ce:	701a      	strb	r2, [r3, #0]
			break;
   282d0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   282d2:	683b      	ldr	r3, [r7, #0]
   282d4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   282d6:	683b      	ldr	r3, [r7, #0]
   282d8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   282da:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   282dc:	683b      	ldr	r3, [r7, #0]
   282de:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   282e0:	4313      	orrs	r3, r2
		config->sample_rate |
   282e2:	683a      	ldr	r2, [r7, #0]
   282e4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   282e6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   282e8:	683a      	ldr	r2, [r7, #0]
   282ea:	7e12      	ldrb	r2, [r2, #24]
   282ec:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   282ee:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   282f0:	683a      	ldr	r2, [r7, #0]
   282f2:	2126      	movs	r1, #38	; 0x26
   282f4:	5c52      	ldrb	r2, [r2, r1]
   282f6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   282f8:	4313      	orrs	r3, r2
   282fa:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   282fc:	231d      	movs	r3, #29
   282fe:	18fb      	adds	r3, r7, r3
   28300:	2200      	movs	r2, #0
   28302:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28304:	683b      	ldr	r3, [r7, #0]
   28306:	685b      	ldr	r3, [r3, #4]
   28308:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2830a:	68fb      	ldr	r3, [r7, #12]
   2830c:	2b00      	cmp	r3, #0
   2830e:	d01e      	beq.n	2834e <_usart_set_config+0x14e>
   28310:	2280      	movs	r2, #128	; 0x80
   28312:	0552      	lsls	r2, r2, #21
   28314:	4293      	cmp	r3, r2
   28316:	d14f      	bne.n	283b8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28318:	683b      	ldr	r3, [r7, #0]
   2831a:	2227      	movs	r2, #39	; 0x27
   2831c:	5c9b      	ldrb	r3, [r3, r2]
   2831e:	2201      	movs	r2, #1
   28320:	4053      	eors	r3, r2
   28322:	b2db      	uxtb	r3, r3
   28324:	2b00      	cmp	r3, #0
   28326:	d046      	beq.n	283b6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   28328:	683b      	ldr	r3, [r7, #0]
   2832a:	6a1d      	ldr	r5, [r3, #32]
   2832c:	693b      	ldr	r3, [r7, #16]
   2832e:	b2db      	uxtb	r3, r3
   28330:	0018      	movs	r0, r3
   28332:	4b65      	ldr	r3, [pc, #404]	; (284c8 <_usart_set_config+0x2c8>)
   28334:	4798      	blx	r3
   28336:	0001      	movs	r1, r0
   28338:	231d      	movs	r3, #29
   2833a:	18fc      	adds	r4, r7, r3
   2833c:	230a      	movs	r3, #10
   2833e:	18fb      	adds	r3, r7, r3
   28340:	001a      	movs	r2, r3
   28342:	0028      	movs	r0, r5
   28344:	4b61      	ldr	r3, [pc, #388]	; (284cc <_usart_set_config+0x2cc>)
   28346:	4798      	blx	r3
   28348:	0003      	movs	r3, r0
   2834a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2834c:	e033      	b.n	283b6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2834e:	683b      	ldr	r3, [r7, #0]
   28350:	2227      	movs	r2, #39	; 0x27
   28352:	5c9b      	ldrb	r3, [r3, r2]
   28354:	2b00      	cmp	r3, #0
   28356:	d014      	beq.n	28382 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28358:	683b      	ldr	r3, [r7, #0]
   2835a:	6a18      	ldr	r0, [r3, #32]
   2835c:	683b      	ldr	r3, [r7, #0]
   2835e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28360:	231d      	movs	r3, #29
   28362:	18fc      	adds	r4, r7, r3
   28364:	231f      	movs	r3, #31
   28366:	18fb      	adds	r3, r7, r3
   28368:	781d      	ldrb	r5, [r3, #0]
   2836a:	230a      	movs	r3, #10
   2836c:	18fa      	adds	r2, r7, r3
   2836e:	231e      	movs	r3, #30
   28370:	18fb      	adds	r3, r7, r3
   28372:	781b      	ldrb	r3, [r3, #0]
   28374:	9300      	str	r3, [sp, #0]
   28376:	002b      	movs	r3, r5
   28378:	4d55      	ldr	r5, [pc, #340]	; (284d0 <_usart_set_config+0x2d0>)
   2837a:	47a8      	blx	r5
   2837c:	0003      	movs	r3, r0
   2837e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28380:	e01a      	b.n	283b8 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   28382:	683b      	ldr	r3, [r7, #0]
   28384:	6a1d      	ldr	r5, [r3, #32]
   28386:	693b      	ldr	r3, [r7, #16]
   28388:	b2db      	uxtb	r3, r3
   2838a:	0018      	movs	r0, r3
   2838c:	4b4e      	ldr	r3, [pc, #312]	; (284c8 <_usart_set_config+0x2c8>)
   2838e:	4798      	blx	r3
				status_code =
   28390:	231d      	movs	r3, #29
   28392:	18fc      	adds	r4, r7, r3
   28394:	231f      	movs	r3, #31
   28396:	18fb      	adds	r3, r7, r3
   28398:	7819      	ldrb	r1, [r3, #0]
   2839a:	230a      	movs	r3, #10
   2839c:	18fa      	adds	r2, r7, r3
   2839e:	231e      	movs	r3, #30
   283a0:	18fb      	adds	r3, r7, r3
   283a2:	781b      	ldrb	r3, [r3, #0]
   283a4:	9300      	str	r3, [sp, #0]
   283a6:	000b      	movs	r3, r1
   283a8:	0001      	movs	r1, r0
   283aa:	0028      	movs	r0, r5
   283ac:	4d48      	ldr	r5, [pc, #288]	; (284d0 <_usart_set_config+0x2d0>)
   283ae:	47a8      	blx	r5
   283b0:	0003      	movs	r3, r0
   283b2:	7023      	strb	r3, [r4, #0]
			break;
   283b4:	e000      	b.n	283b8 <_usart_set_config+0x1b8>
			break;
   283b6:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   283b8:	231d      	movs	r3, #29
   283ba:	18fb      	adds	r3, r7, r3
   283bc:	781b      	ldrb	r3, [r3, #0]
   283be:	2b00      	cmp	r3, #0
   283c0:	d003      	beq.n	283ca <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   283c2:	231d      	movs	r3, #29
   283c4:	18fb      	adds	r3, r7, r3
   283c6:	781b      	ldrb	r3, [r3, #0]
   283c8:	e077      	b.n	284ba <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   283ca:	683b      	ldr	r3, [r7, #0]
   283cc:	7e5b      	ldrb	r3, [r3, #25]
   283ce:	2b00      	cmp	r3, #0
   283d0:	d003      	beq.n	283da <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   283d2:	683b      	ldr	r3, [r7, #0]
   283d4:	7e9a      	ldrb	r2, [r3, #26]
   283d6:	69bb      	ldr	r3, [r7, #24]
   283d8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   283da:	687b      	ldr	r3, [r7, #4]
   283dc:	0018      	movs	r0, r3
   283de:	4b3d      	ldr	r3, [pc, #244]	; (284d4 <_usart_set_config+0x2d4>)
   283e0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   283e2:	230a      	movs	r3, #10
   283e4:	18fb      	adds	r3, r7, r3
   283e6:	881a      	ldrh	r2, [r3, #0]
   283e8:	69bb      	ldr	r3, [r7, #24]
   283ea:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   283ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   283ee:	68fb      	ldr	r3, [r7, #12]
   283f0:	4313      	orrs	r3, r2
   283f2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   283f4:	683b      	ldr	r3, [r7, #0]
   283f6:	2227      	movs	r2, #39	; 0x27
   283f8:	5c9b      	ldrb	r3, [r3, r2]
   283fa:	2201      	movs	r2, #1
   283fc:	4053      	eors	r3, r2
   283fe:	b2db      	uxtb	r3, r3
   28400:	2b00      	cmp	r3, #0
   28402:	d003      	beq.n	2840c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28406:	2204      	movs	r2, #4
   28408:	4313      	orrs	r3, r2
   2840a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2840c:	683b      	ldr	r3, [r7, #0]
   2840e:	7e5b      	ldrb	r3, [r3, #25]
   28410:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28412:	683b      	ldr	r3, [r7, #0]
   28414:	7f1b      	ldrb	r3, [r3, #28]
   28416:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28418:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2841a:	683b      	ldr	r3, [r7, #0]
   2841c:	7f5b      	ldrb	r3, [r3, #29]
   2841e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28420:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28422:	683b      	ldr	r3, [r7, #0]
   28424:	2124      	movs	r1, #36	; 0x24
   28426:	5c5b      	ldrb	r3, [r3, r1]
   28428:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2842a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2842c:	683b      	ldr	r3, [r7, #0]
   2842e:	2125      	movs	r1, #37	; 0x25
   28430:	5c5b      	ldrb	r3, [r3, r1]
   28432:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28434:	4313      	orrs	r3, r2
	ctrlb =  
   28436:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   28438:	683b      	ldr	r3, [r7, #0]
   2843a:	7a9b      	ldrb	r3, [r3, #10]
   2843c:	001a      	movs	r2, r3
   2843e:	6a3b      	ldr	r3, [r7, #32]
   28440:	4313      	orrs	r3, r2
   28442:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28444:	683b      	ldr	r3, [r7, #0]
   28446:	7adb      	ldrb	r3, [r3, #11]
   28448:	001a      	movs	r2, r3
   2844a:	6a3b      	ldr	r3, [r7, #32]
   2844c:	4313      	orrs	r3, r2
   2844e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28450:	683b      	ldr	r3, [r7, #0]
   28452:	891b      	ldrh	r3, [r3, #8]
   28454:	2bff      	cmp	r3, #255	; 0xff
   28456:	d00b      	beq.n	28470 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   28458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2845a:	2280      	movs	r2, #128	; 0x80
   2845c:	0452      	lsls	r2, r2, #17
   2845e:	4313      	orrs	r3, r2
   28460:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28462:	683b      	ldr	r3, [r7, #0]
   28464:	891b      	ldrh	r3, [r3, #8]
   28466:	001a      	movs	r2, r3
   28468:	6a3b      	ldr	r3, [r7, #32]
   2846a:	4313      	orrs	r3, r2
   2846c:	623b      	str	r3, [r7, #32]
   2846e:	e008      	b.n	28482 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   28470:	683b      	ldr	r3, [r7, #0]
   28472:	7edb      	ldrb	r3, [r3, #27]
   28474:	2b00      	cmp	r3, #0
   28476:	d004      	beq.n	28482 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   28478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2847a:	2280      	movs	r2, #128	; 0x80
   2847c:	04d2      	lsls	r2, r2, #19
   2847e:	4313      	orrs	r3, r2
   28480:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28482:	683b      	ldr	r3, [r7, #0]
   28484:	222c      	movs	r2, #44	; 0x2c
   28486:	5c9b      	ldrb	r3, [r3, r2]
   28488:	2b00      	cmp	r3, #0
   2848a:	d103      	bne.n	28494 <_usart_set_config+0x294>
   2848c:	4b12      	ldr	r3, [pc, #72]	; (284d8 <_usart_set_config+0x2d8>)
   2848e:	4798      	blx	r3
   28490:	1e03      	subs	r3, r0, #0
   28492:	d003      	beq.n	2849c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   28494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28496:	2280      	movs	r2, #128	; 0x80
   28498:	4313      	orrs	r3, r2
   2849a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2849c:	687b      	ldr	r3, [r7, #4]
   2849e:	0018      	movs	r0, r3
   284a0:	4b0c      	ldr	r3, [pc, #48]	; (284d4 <_usart_set_config+0x2d4>)
   284a2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   284a4:	69bb      	ldr	r3, [r7, #24]
   284a6:	6a3a      	ldr	r2, [r7, #32]
   284a8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   284aa:	687b      	ldr	r3, [r7, #4]
   284ac:	0018      	movs	r0, r3
   284ae:	4b09      	ldr	r3, [pc, #36]	; (284d4 <_usart_set_config+0x2d4>)
   284b0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   284b2:	69bb      	ldr	r3, [r7, #24]
   284b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   284b6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   284b8:	2300      	movs	r3, #0
}
   284ba:	0018      	movs	r0, r3
   284bc:	46bd      	mov	sp, r7
   284be:	b00a      	add	sp, #40	; 0x28
   284c0:	bdb0      	pop	{r4, r5, r7, pc}
   284c2:	46c0      	nop			; (mov r8, r8)
   284c4:	00026fa9 	.word	0x00026fa9
   284c8:	0002995d 	.word	0x0002995d
   284cc:	00026b23 	.word	0x00026b23
   284d0:	00026ba1 	.word	0x00026ba1
   284d4:	000281dd 	.word	0x000281dd
   284d8:	0002819d 	.word	0x0002819d

000284dc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   284dc:	b590      	push	{r4, r7, lr}
   284de:	b093      	sub	sp, #76	; 0x4c
   284e0:	af00      	add	r7, sp, #0
   284e2:	60f8      	str	r0, [r7, #12]
   284e4:	60b9      	str	r1, [r7, #8]
   284e6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   284e8:	233b      	movs	r3, #59	; 0x3b
   284ea:	18fb      	adds	r3, r7, r3
   284ec:	2200      	movs	r2, #0
   284ee:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   284f0:	68fb      	ldr	r3, [r7, #12]
   284f2:	68ba      	ldr	r2, [r7, #8]
   284f4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   284f6:	68fb      	ldr	r3, [r7, #12]
   284f8:	681b      	ldr	r3, [r3, #0]
   284fa:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   284fc:	68fb      	ldr	r3, [r7, #12]
   284fe:	681b      	ldr	r3, [r3, #0]
   28500:	0018      	movs	r0, r3
   28502:	4b86      	ldr	r3, [pc, #536]	; (2871c <usart_init+0x240>)
   28504:	4798      	blx	r3
   28506:	0003      	movs	r3, r0
   28508:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2850c:	3302      	adds	r3, #2
   2850e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28512:	3314      	adds	r3, #20
   28514:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28518:	681b      	ldr	r3, [r3, #0]
   2851a:	2201      	movs	r2, #1
   2851c:	4013      	ands	r3, r2
   2851e:	d001      	beq.n	28524 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28520:	2305      	movs	r3, #5
   28522:	e0f6      	b.n	28712 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28526:	681b      	ldr	r3, [r3, #0]
   28528:	2202      	movs	r2, #2
   2852a:	4013      	ands	r3, r2
   2852c:	d001      	beq.n	28532 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2852e:	231c      	movs	r3, #28
   28530:	e0ef      	b.n	28712 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28532:	2201      	movs	r2, #1
   28534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28536:	409a      	lsls	r2, r3
   28538:	0013      	movs	r3, r2
   2853a:	0019      	movs	r1, r3
   2853c:	2002      	movs	r0, #2
   2853e:	4b78      	ldr	r3, [pc, #480]	; (28720 <usart_init+0x244>)
   28540:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28542:	2324      	movs	r3, #36	; 0x24
   28544:	18fb      	adds	r3, r7, r3
   28546:	0018      	movs	r0, r3
   28548:	4b76      	ldr	r3, [pc, #472]	; (28724 <usart_init+0x248>)
   2854a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2854c:	687b      	ldr	r3, [r7, #4]
   2854e:	222d      	movs	r2, #45	; 0x2d
   28550:	5c9a      	ldrb	r2, [r3, r2]
   28552:	2324      	movs	r3, #36	; 0x24
   28554:	18fb      	adds	r3, r7, r3
   28556:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28558:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2855a:	b2db      	uxtb	r3, r3
   2855c:	2224      	movs	r2, #36	; 0x24
   2855e:	18ba      	adds	r2, r7, r2
   28560:	0011      	movs	r1, r2
   28562:	0018      	movs	r0, r3
   28564:	4b70      	ldr	r3, [pc, #448]	; (28728 <usart_init+0x24c>)
   28566:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28568:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2856a:	b2db      	uxtb	r3, r3
   2856c:	0018      	movs	r0, r3
   2856e:	4b6f      	ldr	r3, [pc, #444]	; (2872c <usart_init+0x250>)
   28570:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28572:	687b      	ldr	r3, [r7, #4]
   28574:	222d      	movs	r2, #45	; 0x2d
   28576:	5c9b      	ldrb	r3, [r3, r2]
   28578:	2100      	movs	r1, #0
   2857a:	0018      	movs	r0, r3
   2857c:	4b6c      	ldr	r3, [pc, #432]	; (28730 <usart_init+0x254>)
   2857e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28580:	687b      	ldr	r3, [r7, #4]
   28582:	7ada      	ldrb	r2, [r3, #11]
   28584:	68fb      	ldr	r3, [r7, #12]
   28586:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28588:	687b      	ldr	r3, [r7, #4]
   2858a:	2224      	movs	r2, #36	; 0x24
   2858c:	5c9a      	ldrb	r2, [r3, r2]
   2858e:	68fb      	ldr	r3, [r7, #12]
   28590:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28592:	687b      	ldr	r3, [r7, #4]
   28594:	2225      	movs	r2, #37	; 0x25
   28596:	5c9a      	ldrb	r2, [r3, r2]
   28598:	68fb      	ldr	r3, [r7, #12]
   2859a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2859c:	687b      	ldr	r3, [r7, #4]
   2859e:	7eda      	ldrb	r2, [r3, #27]
   285a0:	68fb      	ldr	r3, [r7, #12]
   285a2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   285a4:	687b      	ldr	r3, [r7, #4]
   285a6:	7f1a      	ldrb	r2, [r3, #28]
   285a8:	68fb      	ldr	r3, [r7, #12]
   285aa:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   285ac:	233b      	movs	r3, #59	; 0x3b
   285ae:	18fc      	adds	r4, r7, r3
   285b0:	687a      	ldr	r2, [r7, #4]
   285b2:	68fb      	ldr	r3, [r7, #12]
   285b4:	0011      	movs	r1, r2
   285b6:	0018      	movs	r0, r3
   285b8:	4b5e      	ldr	r3, [pc, #376]	; (28734 <usart_init+0x258>)
   285ba:	4798      	blx	r3
   285bc:	0003      	movs	r3, r0
   285be:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   285c0:	233b      	movs	r3, #59	; 0x3b
   285c2:	18fb      	adds	r3, r7, r3
   285c4:	781b      	ldrb	r3, [r3, #0]
   285c6:	2b00      	cmp	r3, #0
   285c8:	d003      	beq.n	285d2 <usart_init+0xf6>
		return status_code;
   285ca:	233b      	movs	r3, #59	; 0x3b
   285cc:	18fb      	adds	r3, r7, r3
   285ce:	781b      	ldrb	r3, [r3, #0]
   285d0:	e09f      	b.n	28712 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   285d2:	2320      	movs	r3, #32
   285d4:	18fb      	adds	r3, r7, r3
   285d6:	0018      	movs	r0, r3
   285d8:	4b57      	ldr	r3, [pc, #348]	; (28738 <usart_init+0x25c>)
   285da:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   285dc:	2320      	movs	r3, #32
   285de:	18fb      	adds	r3, r7, r3
   285e0:	2200      	movs	r2, #0
   285e2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   285e4:	2320      	movs	r3, #32
   285e6:	18fb      	adds	r3, r7, r3
   285e8:	2200      	movs	r2, #0
   285ea:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   285ec:	687b      	ldr	r3, [r7, #4]
   285ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   285f0:	2310      	movs	r3, #16
   285f2:	18fb      	adds	r3, r7, r3
   285f4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   285f6:	687b      	ldr	r3, [r7, #4]
   285f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   285fa:	2310      	movs	r3, #16
   285fc:	18fb      	adds	r3, r7, r3
   285fe:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28600:	687b      	ldr	r3, [r7, #4]
   28602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28604:	2310      	movs	r3, #16
   28606:	18fb      	adds	r3, r7, r3
   28608:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2860a:	687b      	ldr	r3, [r7, #4]
   2860c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2860e:	2310      	movs	r3, #16
   28610:	18fb      	adds	r3, r7, r3
   28612:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28614:	2347      	movs	r3, #71	; 0x47
   28616:	18fb      	adds	r3, r7, r3
   28618:	2200      	movs	r2, #0
   2861a:	701a      	strb	r2, [r3, #0]
   2861c:	e02c      	b.n	28678 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2861e:	2347      	movs	r3, #71	; 0x47
   28620:	18fb      	adds	r3, r7, r3
   28622:	781a      	ldrb	r2, [r3, #0]
   28624:	2310      	movs	r3, #16
   28626:	18fb      	adds	r3, r7, r3
   28628:	0092      	lsls	r2, r2, #2
   2862a:	58d3      	ldr	r3, [r2, r3]
   2862c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2862e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28630:	2b00      	cmp	r3, #0
   28632:	d109      	bne.n	28648 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28634:	2347      	movs	r3, #71	; 0x47
   28636:	18fb      	adds	r3, r7, r3
   28638:	781a      	ldrb	r2, [r3, #0]
   2863a:	68bb      	ldr	r3, [r7, #8]
   2863c:	0011      	movs	r1, r2
   2863e:	0018      	movs	r0, r3
   28640:	4b3e      	ldr	r3, [pc, #248]	; (2873c <usart_init+0x260>)
   28642:	4798      	blx	r3
   28644:	0003      	movs	r3, r0
   28646:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2864a:	3301      	adds	r3, #1
   2864c:	d00d      	beq.n	2866a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2864e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28650:	b2da      	uxtb	r2, r3
   28652:	2320      	movs	r3, #32
   28654:	18fb      	adds	r3, r7, r3
   28656:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2865a:	0c1b      	lsrs	r3, r3, #16
   2865c:	b2db      	uxtb	r3, r3
   2865e:	2220      	movs	r2, #32
   28660:	18ba      	adds	r2, r7, r2
   28662:	0011      	movs	r1, r2
   28664:	0018      	movs	r0, r3
   28666:	4b36      	ldr	r3, [pc, #216]	; (28740 <usart_init+0x264>)
   28668:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2866a:	2347      	movs	r3, #71	; 0x47
   2866c:	18fb      	adds	r3, r7, r3
   2866e:	781a      	ldrb	r2, [r3, #0]
   28670:	2347      	movs	r3, #71	; 0x47
   28672:	18fb      	adds	r3, r7, r3
   28674:	3201      	adds	r2, #1
   28676:	701a      	strb	r2, [r3, #0]
   28678:	2347      	movs	r3, #71	; 0x47
   2867a:	18fb      	adds	r3, r7, r3
   2867c:	781b      	ldrb	r3, [r3, #0]
   2867e:	2b03      	cmp	r3, #3
   28680:	d9cd      	bls.n	2861e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28682:	2300      	movs	r3, #0
   28684:	63fb      	str	r3, [r7, #60]	; 0x3c
   28686:	e00a      	b.n	2869e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28688:	68fa      	ldr	r2, [r7, #12]
   2868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2868c:	3302      	adds	r3, #2
   2868e:	009b      	lsls	r3, r3, #2
   28690:	18d3      	adds	r3, r2, r3
   28692:	3304      	adds	r3, #4
   28694:	2200      	movs	r2, #0
   28696:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2869a:	3301      	adds	r3, #1
   2869c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   286a0:	2b05      	cmp	r3, #5
   286a2:	d9f1      	bls.n	28688 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   286a4:	68fb      	ldr	r3, [r7, #12]
   286a6:	2200      	movs	r2, #0
   286a8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   286aa:	68fb      	ldr	r3, [r7, #12]
   286ac:	2200      	movs	r2, #0
   286ae:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   286b0:	68fb      	ldr	r3, [r7, #12]
   286b2:	2200      	movs	r2, #0
   286b4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   286b6:	68fb      	ldr	r3, [r7, #12]
   286b8:	2200      	movs	r2, #0
   286ba:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   286bc:	68fb      	ldr	r3, [r7, #12]
   286be:	2230      	movs	r2, #48	; 0x30
   286c0:	2100      	movs	r1, #0
   286c2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   286c4:	68fb      	ldr	r3, [r7, #12]
   286c6:	2231      	movs	r2, #49	; 0x31
   286c8:	2100      	movs	r1, #0
   286ca:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   286cc:	68fb      	ldr	r3, [r7, #12]
   286ce:	2232      	movs	r2, #50	; 0x32
   286d0:	2100      	movs	r1, #0
   286d2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   286d4:	68fb      	ldr	r3, [r7, #12]
   286d6:	2233      	movs	r2, #51	; 0x33
   286d8:	2100      	movs	r1, #0
   286da:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   286dc:	68fb      	ldr	r3, [r7, #12]
   286de:	681b      	ldr	r3, [r3, #0]
   286e0:	2227      	movs	r2, #39	; 0x27
   286e2:	18bc      	adds	r4, r7, r2
   286e4:	0018      	movs	r0, r3
   286e6:	4b0d      	ldr	r3, [pc, #52]	; (2871c <usart_init+0x240>)
   286e8:	4798      	blx	r3
   286ea:	0003      	movs	r3, r0
   286ec:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   286ee:	4a15      	ldr	r2, [pc, #84]	; (28744 <usart_init+0x268>)
   286f0:	2327      	movs	r3, #39	; 0x27
   286f2:	18fb      	adds	r3, r7, r3
   286f4:	781b      	ldrb	r3, [r3, #0]
   286f6:	0011      	movs	r1, r2
   286f8:	0018      	movs	r0, r3
   286fa:	4b13      	ldr	r3, [pc, #76]	; (28748 <usart_init+0x26c>)
   286fc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   286fe:	2327      	movs	r3, #39	; 0x27
   28700:	18fb      	adds	r3, r7, r3
   28702:	781a      	ldrb	r2, [r3, #0]
   28704:	4b11      	ldr	r3, [pc, #68]	; (2874c <usart_init+0x270>)
   28706:	0092      	lsls	r2, r2, #2
   28708:	68f9      	ldr	r1, [r7, #12]
   2870a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2870c:	233b      	movs	r3, #59	; 0x3b
   2870e:	18fb      	adds	r3, r7, r3
   28710:	781b      	ldrb	r3, [r3, #0]
}
   28712:	0018      	movs	r0, r3
   28714:	46bd      	mov	sp, r7
   28716:	b013      	add	sp, #76	; 0x4c
   28718:	bd90      	pop	{r4, r7, pc}
   2871a:	46c0      	nop			; (mov r8, r8)
   2871c:	00026fa9 	.word	0x00026fa9
   28720:	00028119 	.word	0x00028119
   28724:	00028101 	.word	0x00028101
   28728:	00029839 	.word	0x00029839
   2872c:	0002987d 	.word	0x0002987d
   28730:	00026d61 	.word	0x00026d61
   28734:	00028201 	.word	0x00028201
   28738:	00028175 	.word	0x00028175
   2873c:	00026ded 	.word	0x00026ded
   28740:	00029b99 	.word	0x00029b99
   28744:	000289b9 	.word	0x000289b9
   28748:	0002700d 	.word	0x0002700d
   2874c:	20005ac0 	.word	0x20005ac0

00028750 <system_interrupt_enter_critical_section>:
{
   28750:	b580      	push	{r7, lr}
   28752:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28754:	4b02      	ldr	r3, [pc, #8]	; (28760 <system_interrupt_enter_critical_section+0x10>)
   28756:	4798      	blx	r3
}
   28758:	46c0      	nop			; (mov r8, r8)
   2875a:	46bd      	mov	sp, r7
   2875c:	bd80      	pop	{r7, pc}
   2875e:	46c0      	nop			; (mov r8, r8)
   28760:	00025ba5 	.word	0x00025ba5

00028764 <system_interrupt_leave_critical_section>:
{
   28764:	b580      	push	{r7, lr}
   28766:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28768:	4b02      	ldr	r3, [pc, #8]	; (28774 <system_interrupt_leave_critical_section+0x10>)
   2876a:	4798      	blx	r3
}
   2876c:	46c0      	nop			; (mov r8, r8)
   2876e:	46bd      	mov	sp, r7
   28770:	bd80      	pop	{r7, pc}
   28772:	46c0      	nop			; (mov r8, r8)
   28774:	00025bf9 	.word	0x00025bf9

00028778 <usart_is_syncing>:
{
   28778:	b580      	push	{r7, lr}
   2877a:	b084      	sub	sp, #16
   2877c:	af00      	add	r7, sp, #0
   2877e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28780:	687b      	ldr	r3, [r7, #4]
   28782:	681b      	ldr	r3, [r3, #0]
   28784:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28786:	68fb      	ldr	r3, [r7, #12]
   28788:	69db      	ldr	r3, [r3, #28]
   2878a:	1e5a      	subs	r2, r3, #1
   2878c:	4193      	sbcs	r3, r2
   2878e:	b2db      	uxtb	r3, r3
}
   28790:	0018      	movs	r0, r3
   28792:	46bd      	mov	sp, r7
   28794:	b004      	add	sp, #16
   28796:	bd80      	pop	{r7, pc}

00028798 <_usart_wait_for_sync>:
{
   28798:	b580      	push	{r7, lr}
   2879a:	b082      	sub	sp, #8
   2879c:	af00      	add	r7, sp, #0
   2879e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   287a0:	46c0      	nop			; (mov r8, r8)
   287a2:	687b      	ldr	r3, [r7, #4]
   287a4:	0018      	movs	r0, r3
   287a6:	4b04      	ldr	r3, [pc, #16]	; (287b8 <_usart_wait_for_sync+0x20>)
   287a8:	4798      	blx	r3
   287aa:	1e03      	subs	r3, r0, #0
   287ac:	d1f9      	bne.n	287a2 <_usart_wait_for_sync+0xa>
}
   287ae:	46c0      	nop			; (mov r8, r8)
   287b0:	46bd      	mov	sp, r7
   287b2:	b002      	add	sp, #8
   287b4:	bd80      	pop	{r7, pc}
   287b6:	46c0      	nop			; (mov r8, r8)
   287b8:	00028779 	.word	0x00028779

000287bc <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   287bc:	b580      	push	{r7, lr}
   287be:	b086      	sub	sp, #24
   287c0:	af00      	add	r7, sp, #0
   287c2:	60f8      	str	r0, [r7, #12]
   287c4:	60b9      	str	r1, [r7, #8]
   287c6:	1dbb      	adds	r3, r7, #6
   287c8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   287ca:	68fb      	ldr	r3, [r7, #12]
   287cc:	681b      	ldr	r3, [r3, #0]
   287ce:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   287d0:	4b0f      	ldr	r3, [pc, #60]	; (28810 <_usart_write_buffer+0x54>)
   287d2:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   287d4:	68fb      	ldr	r3, [r7, #12]
   287d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   287d8:	b29b      	uxth	r3, r3
   287da:	2b00      	cmp	r3, #0
   287dc:	d003      	beq.n	287e6 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   287de:	4b0d      	ldr	r3, [pc, #52]	; (28814 <_usart_write_buffer+0x58>)
   287e0:	4798      	blx	r3
		return STATUS_BUSY;
   287e2:	2305      	movs	r3, #5
   287e4:	e010      	b.n	28808 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   287e6:	68fb      	ldr	r3, [r7, #12]
   287e8:	1dba      	adds	r2, r7, #6
   287ea:	8812      	ldrh	r2, [r2, #0]
   287ec:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   287ee:	4b09      	ldr	r3, [pc, #36]	; (28814 <_usart_write_buffer+0x58>)
   287f0:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   287f2:	68fb      	ldr	r3, [r7, #12]
   287f4:	68ba      	ldr	r2, [r7, #8]
   287f6:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   287f8:	68fb      	ldr	r3, [r7, #12]
   287fa:	2233      	movs	r2, #51	; 0x33
   287fc:	2105      	movs	r1, #5
   287fe:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28800:	697b      	ldr	r3, [r7, #20]
   28802:	2201      	movs	r2, #1
   28804:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28806:	2300      	movs	r3, #0
}
   28808:	0018      	movs	r0, r3
   2880a:	46bd      	mov	sp, r7
   2880c:	b006      	add	sp, #24
   2880e:	bd80      	pop	{r7, pc}
   28810:	00028751 	.word	0x00028751
   28814:	00028765 	.word	0x00028765

00028818 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28818:	b580      	push	{r7, lr}
   2881a:	b086      	sub	sp, #24
   2881c:	af00      	add	r7, sp, #0
   2881e:	60f8      	str	r0, [r7, #12]
   28820:	60b9      	str	r1, [r7, #8]
   28822:	1dbb      	adds	r3, r7, #6
   28824:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28826:	68fb      	ldr	r3, [r7, #12]
   28828:	681b      	ldr	r3, [r3, #0]
   2882a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2882c:	4b16      	ldr	r3, [pc, #88]	; (28888 <_usart_read_buffer+0x70>)
   2882e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28830:	68fb      	ldr	r3, [r7, #12]
   28832:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28834:	b29b      	uxth	r3, r3
   28836:	2b00      	cmp	r3, #0
   28838:	d003      	beq.n	28842 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2883a:	4b14      	ldr	r3, [pc, #80]	; (2888c <_usart_read_buffer+0x74>)
   2883c:	4798      	blx	r3
		return STATUS_BUSY;
   2883e:	2305      	movs	r3, #5
   28840:	e01e      	b.n	28880 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28842:	68fb      	ldr	r3, [r7, #12]
   28844:	1dba      	adds	r2, r7, #6
   28846:	8812      	ldrh	r2, [r2, #0]
   28848:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2884a:	4b10      	ldr	r3, [pc, #64]	; (2888c <_usart_read_buffer+0x74>)
   2884c:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2884e:	68fb      	ldr	r3, [r7, #12]
   28850:	68ba      	ldr	r2, [r7, #8]
   28852:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28854:	68fb      	ldr	r3, [r7, #12]
   28856:	2232      	movs	r2, #50	; 0x32
   28858:	2105      	movs	r1, #5
   2885a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2885c:	697b      	ldr	r3, [r7, #20]
   2885e:	2204      	movs	r2, #4
   28860:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28862:	68fb      	ldr	r3, [r7, #12]
   28864:	7a1b      	ldrb	r3, [r3, #8]
   28866:	2b00      	cmp	r3, #0
   28868:	d002      	beq.n	28870 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2886a:	697b      	ldr	r3, [r7, #20]
   2886c:	2220      	movs	r2, #32
   2886e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   28870:	68fb      	ldr	r3, [r7, #12]
   28872:	7a5b      	ldrb	r3, [r3, #9]
   28874:	2b00      	cmp	r3, #0
   28876:	d002      	beq.n	2887e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28878:	697b      	ldr	r3, [r7, #20]
   2887a:	2208      	movs	r2, #8
   2887c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2887e:	2300      	movs	r3, #0
}
   28880:	0018      	movs	r0, r3
   28882:	46bd      	mov	sp, r7
   28884:	b006      	add	sp, #24
   28886:	bd80      	pop	{r7, pc}
   28888:	00028751 	.word	0x00028751
   2888c:	00028765 	.word	0x00028765

00028890 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   28890:	b580      	push	{r7, lr}
   28892:	b084      	sub	sp, #16
   28894:	af00      	add	r7, sp, #0
   28896:	60f8      	str	r0, [r7, #12]
   28898:	60b9      	str	r1, [r7, #8]
   2889a:	1dfb      	adds	r3, r7, #7
   2889c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2889e:	1dfb      	adds	r3, r7, #7
   288a0:	781b      	ldrb	r3, [r3, #0]
   288a2:	68fa      	ldr	r2, [r7, #12]
   288a4:	3302      	adds	r3, #2
   288a6:	009b      	lsls	r3, r3, #2
   288a8:	18d3      	adds	r3, r2, r3
   288aa:	3304      	adds	r3, #4
   288ac:	68ba      	ldr	r2, [r7, #8]
   288ae:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   288b0:	68fb      	ldr	r3, [r7, #12]
   288b2:	2230      	movs	r2, #48	; 0x30
   288b4:	5c9b      	ldrb	r3, [r3, r2]
   288b6:	b25a      	sxtb	r2, r3
   288b8:	1dfb      	adds	r3, r7, #7
   288ba:	781b      	ldrb	r3, [r3, #0]
   288bc:	2101      	movs	r1, #1
   288be:	4099      	lsls	r1, r3
   288c0:	000b      	movs	r3, r1
   288c2:	b25b      	sxtb	r3, r3
   288c4:	4313      	orrs	r3, r2
   288c6:	b25b      	sxtb	r3, r3
   288c8:	b2d9      	uxtb	r1, r3
   288ca:	68fb      	ldr	r3, [r7, #12]
   288cc:	2230      	movs	r2, #48	; 0x30
   288ce:	5499      	strb	r1, [r3, r2]
}
   288d0:	46c0      	nop			; (mov r8, r8)
   288d2:	46bd      	mov	sp, r7
   288d4:	b004      	add	sp, #16
   288d6:	bd80      	pop	{r7, pc}

000288d8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   288d8:	b580      	push	{r7, lr}
   288da:	b084      	sub	sp, #16
   288dc:	af00      	add	r7, sp, #0
   288de:	60f8      	str	r0, [r7, #12]
   288e0:	60b9      	str	r1, [r7, #8]
   288e2:	1dbb      	adds	r3, r7, #6
   288e4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   288e6:	1dbb      	adds	r3, r7, #6
   288e8:	881b      	ldrh	r3, [r3, #0]
   288ea:	2b00      	cmp	r3, #0
   288ec:	d101      	bne.n	288f2 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   288ee:	2317      	movs	r3, #23
   288f0:	e010      	b.n	28914 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   288f2:	68fb      	ldr	r3, [r7, #12]
   288f4:	79db      	ldrb	r3, [r3, #7]
   288f6:	2201      	movs	r2, #1
   288f8:	4053      	eors	r3, r2
   288fa:	b2db      	uxtb	r3, r3
   288fc:	2b00      	cmp	r3, #0
   288fe:	d001      	beq.n	28904 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28900:	231c      	movs	r3, #28
   28902:	e007      	b.n	28914 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28904:	1dbb      	adds	r3, r7, #6
   28906:	881a      	ldrh	r2, [r3, #0]
   28908:	68b9      	ldr	r1, [r7, #8]
   2890a:	68fb      	ldr	r3, [r7, #12]
   2890c:	0018      	movs	r0, r3
   2890e:	4b03      	ldr	r3, [pc, #12]	; (2891c <usart_write_buffer_job+0x44>)
   28910:	4798      	blx	r3
   28912:	0003      	movs	r3, r0
}
   28914:	0018      	movs	r0, r3
   28916:	46bd      	mov	sp, r7
   28918:	b004      	add	sp, #16
   2891a:	bd80      	pop	{r7, pc}
   2891c:	000287bd 	.word	0x000287bd

00028920 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28920:	b580      	push	{r7, lr}
   28922:	b084      	sub	sp, #16
   28924:	af00      	add	r7, sp, #0
   28926:	60f8      	str	r0, [r7, #12]
   28928:	60b9      	str	r1, [r7, #8]
   2892a:	1dbb      	adds	r3, r7, #6
   2892c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2892e:	1dbb      	adds	r3, r7, #6
   28930:	881b      	ldrh	r3, [r3, #0]
   28932:	2b00      	cmp	r3, #0
   28934:	d101      	bne.n	2893a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28936:	2317      	movs	r3, #23
   28938:	e010      	b.n	2895c <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2893a:	68fb      	ldr	r3, [r7, #12]
   2893c:	799b      	ldrb	r3, [r3, #6]
   2893e:	2201      	movs	r2, #1
   28940:	4053      	eors	r3, r2
   28942:	b2db      	uxtb	r3, r3
   28944:	2b00      	cmp	r3, #0
   28946:	d001      	beq.n	2894c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28948:	231c      	movs	r3, #28
   2894a:	e007      	b.n	2895c <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2894c:	1dbb      	adds	r3, r7, #6
   2894e:	881a      	ldrh	r2, [r3, #0]
   28950:	68b9      	ldr	r1, [r7, #8]
   28952:	68fb      	ldr	r3, [r7, #12]
   28954:	0018      	movs	r0, r3
   28956:	4b03      	ldr	r3, [pc, #12]	; (28964 <usart_read_buffer_job+0x44>)
   28958:	4798      	blx	r3
   2895a:	0003      	movs	r3, r0
}
   2895c:	0018      	movs	r0, r3
   2895e:	46bd      	mov	sp, r7
   28960:	b004      	add	sp, #16
   28962:	bd80      	pop	{r7, pc}
   28964:	00028819 	.word	0x00028819

00028968 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   28968:	b580      	push	{r7, lr}
   2896a:	b084      	sub	sp, #16
   2896c:	af00      	add	r7, sp, #0
   2896e:	6078      	str	r0, [r7, #4]
   28970:	000a      	movs	r2, r1
   28972:	1cfb      	adds	r3, r7, #3
   28974:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   28976:	1cfb      	adds	r3, r7, #3
   28978:	781b      	ldrb	r3, [r3, #0]
   2897a:	2b00      	cmp	r3, #0
   2897c:	d002      	beq.n	28984 <usart_get_job_status+0x1c>
   2897e:	2b01      	cmp	r3, #1
   28980:	d007      	beq.n	28992 <usart_get_job_status+0x2a>
   28982:	e00d      	b.n	289a0 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28984:	230f      	movs	r3, #15
   28986:	18fb      	adds	r3, r7, r3
   28988:	687a      	ldr	r2, [r7, #4]
   2898a:	2132      	movs	r1, #50	; 0x32
   2898c:	5c52      	ldrb	r2, [r2, r1]
   2898e:	701a      	strb	r2, [r3, #0]
			break;
   28990:	e00b      	b.n	289aa <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28992:	230f      	movs	r3, #15
   28994:	18fb      	adds	r3, r7, r3
   28996:	687a      	ldr	r2, [r7, #4]
   28998:	2133      	movs	r1, #51	; 0x33
   2899a:	5c52      	ldrb	r2, [r2, r1]
   2899c:	701a      	strb	r2, [r3, #0]
			break;
   2899e:	e004      	b.n	289aa <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   289a0:	230f      	movs	r3, #15
   289a2:	18fb      	adds	r3, r7, r3
   289a4:	2217      	movs	r2, #23
   289a6:	701a      	strb	r2, [r3, #0]
			break;
   289a8:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   289aa:	230f      	movs	r3, #15
   289ac:	18fb      	adds	r3, r7, r3
   289ae:	781b      	ldrb	r3, [r3, #0]
}
   289b0:	0018      	movs	r0, r3
   289b2:	46bd      	mov	sp, r7
   289b4:	b004      	add	sp, #16
   289b6:	bd80      	pop	{r7, pc}

000289b8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   289b8:	b580      	push	{r7, lr}
   289ba:	b088      	sub	sp, #32
   289bc:	af00      	add	r7, sp, #0
   289be:	0002      	movs	r2, r0
   289c0:	1dfb      	adds	r3, r7, #7
   289c2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   289c4:	1dfb      	adds	r3, r7, #7
   289c6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   289c8:	4ba3      	ldr	r3, [pc, #652]	; (28c58 <_usart_interrupt_handler+0x2a0>)
   289ca:	0092      	lsls	r2, r2, #2
   289cc:	58d3      	ldr	r3, [r2, r3]
   289ce:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   289d0:	69bb      	ldr	r3, [r7, #24]
   289d2:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   289d4:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   289d6:	69bb      	ldr	r3, [r7, #24]
   289d8:	0018      	movs	r0, r3
   289da:	4ba0      	ldr	r3, [pc, #640]	; (28c5c <_usart_interrupt_handler+0x2a4>)
   289dc:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   289de:	697b      	ldr	r3, [r7, #20]
   289e0:	7e1b      	ldrb	r3, [r3, #24]
   289e2:	b2da      	uxtb	r2, r3
   289e4:	2312      	movs	r3, #18
   289e6:	18fb      	adds	r3, r7, r3
   289e8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   289ea:	697b      	ldr	r3, [r7, #20]
   289ec:	7d9b      	ldrb	r3, [r3, #22]
   289ee:	b2db      	uxtb	r3, r3
   289f0:	b29a      	uxth	r2, r3
   289f2:	2312      	movs	r3, #18
   289f4:	18fb      	adds	r3, r7, r3
   289f6:	2112      	movs	r1, #18
   289f8:	1879      	adds	r1, r7, r1
   289fa:	8809      	ldrh	r1, [r1, #0]
   289fc:	400a      	ands	r2, r1
   289fe:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28a00:	69bb      	ldr	r3, [r7, #24]
   28a02:	2230      	movs	r2, #48	; 0x30
   28a04:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28a06:	69ba      	ldr	r2, [r7, #24]
   28a08:	2131      	movs	r1, #49	; 0x31
   28a0a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28a0c:	4013      	ands	r3, r2
   28a0e:	b2da      	uxtb	r2, r3
   28a10:	2310      	movs	r3, #16
   28a12:	18fb      	adds	r3, r7, r3
   28a14:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28a16:	2312      	movs	r3, #18
   28a18:	18fb      	adds	r3, r7, r3
   28a1a:	881b      	ldrh	r3, [r3, #0]
   28a1c:	2201      	movs	r2, #1
   28a1e:	4013      	ands	r3, r2
   28a20:	d044      	beq.n	28aac <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28a22:	69bb      	ldr	r3, [r7, #24]
   28a24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28a26:	b29b      	uxth	r3, r3
   28a28:	2b00      	cmp	r3, #0
   28a2a:	d03c      	beq.n	28aa6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28a2c:	69bb      	ldr	r3, [r7, #24]
   28a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a30:	781b      	ldrb	r3, [r3, #0]
   28a32:	b2da      	uxtb	r2, r3
   28a34:	231c      	movs	r3, #28
   28a36:	18fb      	adds	r3, r7, r3
   28a38:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28a3a:	69bb      	ldr	r3, [r7, #24]
   28a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a3e:	1c5a      	adds	r2, r3, #1
   28a40:	69bb      	ldr	r3, [r7, #24]
   28a42:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28a44:	69bb      	ldr	r3, [r7, #24]
   28a46:	795b      	ldrb	r3, [r3, #5]
   28a48:	2b01      	cmp	r3, #1
   28a4a:	d113      	bne.n	28a74 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28a4c:	69bb      	ldr	r3, [r7, #24]
   28a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a50:	781b      	ldrb	r3, [r3, #0]
   28a52:	b2db      	uxtb	r3, r3
   28a54:	021b      	lsls	r3, r3, #8
   28a56:	b21a      	sxth	r2, r3
   28a58:	231c      	movs	r3, #28
   28a5a:	18fb      	adds	r3, r7, r3
   28a5c:	2100      	movs	r1, #0
   28a5e:	5e5b      	ldrsh	r3, [r3, r1]
   28a60:	4313      	orrs	r3, r2
   28a62:	b21a      	sxth	r2, r3
   28a64:	231c      	movs	r3, #28
   28a66:	18fb      	adds	r3, r7, r3
   28a68:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28a6a:	69bb      	ldr	r3, [r7, #24]
   28a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a6e:	1c5a      	adds	r2, r3, #1
   28a70:	69bb      	ldr	r3, [r7, #24]
   28a72:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28a74:	231c      	movs	r3, #28
   28a76:	18fb      	adds	r3, r7, r3
   28a78:	881b      	ldrh	r3, [r3, #0]
   28a7a:	05db      	lsls	r3, r3, #23
   28a7c:	0ddb      	lsrs	r3, r3, #23
   28a7e:	b29a      	uxth	r2, r3
   28a80:	697b      	ldr	r3, [r7, #20]
   28a82:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28a84:	69bb      	ldr	r3, [r7, #24]
   28a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28a88:	b29b      	uxth	r3, r3
   28a8a:	3b01      	subs	r3, #1
   28a8c:	b29b      	uxth	r3, r3
   28a8e:	69ba      	ldr	r2, [r7, #24]
   28a90:	1c19      	adds	r1, r3, #0
   28a92:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28a94:	2b00      	cmp	r3, #0
   28a96:	d109      	bne.n	28aac <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28a98:	697b      	ldr	r3, [r7, #20]
   28a9a:	2201      	movs	r2, #1
   28a9c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28a9e:	697b      	ldr	r3, [r7, #20]
   28aa0:	2202      	movs	r2, #2
   28aa2:	759a      	strb	r2, [r3, #22]
   28aa4:	e002      	b.n	28aac <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28aa6:	697b      	ldr	r3, [r7, #20]
   28aa8:	2201      	movs	r2, #1
   28aaa:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28aac:	2312      	movs	r3, #18
   28aae:	18fb      	adds	r3, r7, r3
   28ab0:	881b      	ldrh	r3, [r3, #0]
   28ab2:	2202      	movs	r2, #2
   28ab4:	4013      	ands	r3, r2
   28ab6:	d011      	beq.n	28adc <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28ab8:	697b      	ldr	r3, [r7, #20]
   28aba:	2202      	movs	r2, #2
   28abc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28abe:	69bb      	ldr	r3, [r7, #24]
   28ac0:	2233      	movs	r2, #51	; 0x33
   28ac2:	2100      	movs	r1, #0
   28ac4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28ac6:	2310      	movs	r3, #16
   28ac8:	18fb      	adds	r3, r7, r3
   28aca:	881b      	ldrh	r3, [r3, #0]
   28acc:	2201      	movs	r2, #1
   28ace:	4013      	ands	r3, r2
   28ad0:	d004      	beq.n	28adc <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28ad2:	69bb      	ldr	r3, [r7, #24]
   28ad4:	68db      	ldr	r3, [r3, #12]
   28ad6:	69ba      	ldr	r2, [r7, #24]
   28ad8:	0010      	movs	r0, r2
   28ada:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28adc:	2312      	movs	r3, #18
   28ade:	18fb      	adds	r3, r7, r3
   28ae0:	881b      	ldrh	r3, [r3, #0]
   28ae2:	2204      	movs	r2, #4
   28ae4:	4013      	ands	r3, r2
   28ae6:	d100      	bne.n	28aea <_usart_interrupt_handler+0x132>
   28ae8:	e0bd      	b.n	28c66 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   28aea:	69bb      	ldr	r3, [r7, #24]
   28aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28aee:	b29b      	uxth	r3, r3
   28af0:	2b00      	cmp	r3, #0
   28af2:	d100      	bne.n	28af6 <_usart_interrupt_handler+0x13e>
   28af4:	e0b4      	b.n	28c60 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   28af6:	697b      	ldr	r3, [r7, #20]
   28af8:	8b5b      	ldrh	r3, [r3, #26]
   28afa:	b29b      	uxth	r3, r3
   28afc:	b2da      	uxtb	r2, r3
   28afe:	231f      	movs	r3, #31
   28b00:	18fb      	adds	r3, r7, r3
   28b02:	213f      	movs	r1, #63	; 0x3f
   28b04:	400a      	ands	r2, r1
   28b06:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28b08:	231f      	movs	r3, #31
   28b0a:	18fb      	adds	r3, r7, r3
   28b0c:	781b      	ldrb	r3, [r3, #0]
   28b0e:	2208      	movs	r2, #8
   28b10:	4013      	ands	r3, r2
   28b12:	d007      	beq.n	28b24 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28b14:	231f      	movs	r3, #31
   28b16:	18fb      	adds	r3, r7, r3
   28b18:	221f      	movs	r2, #31
   28b1a:	18ba      	adds	r2, r7, r2
   28b1c:	7812      	ldrb	r2, [r2, #0]
   28b1e:	2108      	movs	r1, #8
   28b20:	438a      	bics	r2, r1
   28b22:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28b24:	231f      	movs	r3, #31
   28b26:	18fb      	adds	r3, r7, r3
   28b28:	781b      	ldrb	r3, [r3, #0]
   28b2a:	2b00      	cmp	r3, #0
   28b2c:	d050      	beq.n	28bd0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28b2e:	231f      	movs	r3, #31
   28b30:	18fb      	adds	r3, r7, r3
   28b32:	781b      	ldrb	r3, [r3, #0]
   28b34:	2202      	movs	r2, #2
   28b36:	4013      	ands	r3, r2
   28b38:	d007      	beq.n	28b4a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28b3a:	69bb      	ldr	r3, [r7, #24]
   28b3c:	2232      	movs	r2, #50	; 0x32
   28b3e:	211a      	movs	r1, #26
   28b40:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28b42:	697b      	ldr	r3, [r7, #20]
   28b44:	2202      	movs	r2, #2
   28b46:	835a      	strh	r2, [r3, #26]
   28b48:	e036      	b.n	28bb8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28b4a:	231f      	movs	r3, #31
   28b4c:	18fb      	adds	r3, r7, r3
   28b4e:	781b      	ldrb	r3, [r3, #0]
   28b50:	2204      	movs	r2, #4
   28b52:	4013      	ands	r3, r2
   28b54:	d007      	beq.n	28b66 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28b56:	69bb      	ldr	r3, [r7, #24]
   28b58:	2232      	movs	r2, #50	; 0x32
   28b5a:	211e      	movs	r1, #30
   28b5c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28b5e:	697b      	ldr	r3, [r7, #20]
   28b60:	2204      	movs	r2, #4
   28b62:	835a      	strh	r2, [r3, #26]
   28b64:	e028      	b.n	28bb8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   28b66:	231f      	movs	r3, #31
   28b68:	18fb      	adds	r3, r7, r3
   28b6a:	781b      	ldrb	r3, [r3, #0]
   28b6c:	2201      	movs	r2, #1
   28b6e:	4013      	ands	r3, r2
   28b70:	d007      	beq.n	28b82 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28b72:	69bb      	ldr	r3, [r7, #24]
   28b74:	2232      	movs	r2, #50	; 0x32
   28b76:	2113      	movs	r1, #19
   28b78:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   28b7a:	697b      	ldr	r3, [r7, #20]
   28b7c:	2201      	movs	r2, #1
   28b7e:	835a      	strh	r2, [r3, #26]
   28b80:	e01a      	b.n	28bb8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28b82:	231f      	movs	r3, #31
   28b84:	18fb      	adds	r3, r7, r3
   28b86:	781b      	ldrb	r3, [r3, #0]
   28b88:	2210      	movs	r2, #16
   28b8a:	4013      	ands	r3, r2
   28b8c:	d007      	beq.n	28b9e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28b8e:	69bb      	ldr	r3, [r7, #24]
   28b90:	2232      	movs	r2, #50	; 0x32
   28b92:	2142      	movs	r1, #66	; 0x42
   28b94:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   28b96:	697b      	ldr	r3, [r7, #20]
   28b98:	2210      	movs	r2, #16
   28b9a:	835a      	strh	r2, [r3, #26]
   28b9c:	e00c      	b.n	28bb8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   28b9e:	231f      	movs	r3, #31
   28ba0:	18fb      	adds	r3, r7, r3
   28ba2:	781b      	ldrb	r3, [r3, #0]
   28ba4:	2220      	movs	r2, #32
   28ba6:	4013      	ands	r3, r2
   28ba8:	d006      	beq.n	28bb8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   28baa:	69bb      	ldr	r3, [r7, #24]
   28bac:	2232      	movs	r2, #50	; 0x32
   28bae:	2141      	movs	r1, #65	; 0x41
   28bb0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   28bb2:	697b      	ldr	r3, [r7, #20]
   28bb4:	2220      	movs	r2, #32
   28bb6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   28bb8:	2310      	movs	r3, #16
   28bba:	18fb      	adds	r3, r7, r3
   28bbc:	881b      	ldrh	r3, [r3, #0]
   28bbe:	2204      	movs	r2, #4
   28bc0:	4013      	ands	r3, r2
				if (callback_status
   28bc2:	d050      	beq.n	28c66 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28bc4:	69bb      	ldr	r3, [r7, #24]
   28bc6:	695b      	ldr	r3, [r3, #20]
   28bc8:	69ba      	ldr	r2, [r7, #24]
   28bca:	0010      	movs	r0, r2
   28bcc:	4798      	blx	r3
   28bce:	e04a      	b.n	28c66 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28bd0:	697b      	ldr	r3, [r7, #20]
   28bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28bd4:	b29a      	uxth	r2, r3
   28bd6:	230e      	movs	r3, #14
   28bd8:	18fb      	adds	r3, r7, r3
   28bda:	05d2      	lsls	r2, r2, #23
   28bdc:	0dd2      	lsrs	r2, r2, #23
   28bde:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28be0:	69bb      	ldr	r3, [r7, #24]
   28be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28be4:	220e      	movs	r2, #14
   28be6:	18ba      	adds	r2, r7, r2
   28be8:	8812      	ldrh	r2, [r2, #0]
   28bea:	b2d2      	uxtb	r2, r2
   28bec:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28bee:	69bb      	ldr	r3, [r7, #24]
   28bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28bf2:	1c5a      	adds	r2, r3, #1
   28bf4:	69bb      	ldr	r3, [r7, #24]
   28bf6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28bf8:	69bb      	ldr	r3, [r7, #24]
   28bfa:	795b      	ldrb	r3, [r3, #5]
   28bfc:	2b01      	cmp	r3, #1
   28bfe:	d10d      	bne.n	28c1c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28c00:	69bb      	ldr	r3, [r7, #24]
   28c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c04:	220e      	movs	r2, #14
   28c06:	18ba      	adds	r2, r7, r2
   28c08:	8812      	ldrh	r2, [r2, #0]
   28c0a:	0a12      	lsrs	r2, r2, #8
   28c0c:	b292      	uxth	r2, r2
   28c0e:	b2d2      	uxtb	r2, r2
   28c10:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28c12:	69bb      	ldr	r3, [r7, #24]
   28c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c16:	1c5a      	adds	r2, r3, #1
   28c18:	69bb      	ldr	r3, [r7, #24]
   28c1a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28c1c:	69bb      	ldr	r3, [r7, #24]
   28c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28c20:	b29b      	uxth	r3, r3
   28c22:	3b01      	subs	r3, #1
   28c24:	b29b      	uxth	r3, r3
   28c26:	69ba      	ldr	r2, [r7, #24]
   28c28:	1c19      	adds	r1, r3, #0
   28c2a:	8591      	strh	r1, [r2, #44]	; 0x2c
   28c2c:	2b00      	cmp	r3, #0
   28c2e:	d11a      	bne.n	28c66 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28c30:	697b      	ldr	r3, [r7, #20]
   28c32:	2204      	movs	r2, #4
   28c34:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28c36:	69bb      	ldr	r3, [r7, #24]
   28c38:	2232      	movs	r2, #50	; 0x32
   28c3a:	2100      	movs	r1, #0
   28c3c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28c3e:	2310      	movs	r3, #16
   28c40:	18fb      	adds	r3, r7, r3
   28c42:	881b      	ldrh	r3, [r3, #0]
   28c44:	2202      	movs	r2, #2
   28c46:	4013      	ands	r3, r2
					if (callback_status
   28c48:	d00d      	beq.n	28c66 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   28c4a:	69bb      	ldr	r3, [r7, #24]
   28c4c:	691b      	ldr	r3, [r3, #16]
   28c4e:	69ba      	ldr	r2, [r7, #24]
   28c50:	0010      	movs	r0, r2
   28c52:	4798      	blx	r3
   28c54:	e007      	b.n	28c66 <_usart_interrupt_handler+0x2ae>
   28c56:	46c0      	nop			; (mov r8, r8)
   28c58:	20005ac0 	.word	0x20005ac0
   28c5c:	00028799 	.word	0x00028799
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28c60:	697b      	ldr	r3, [r7, #20]
   28c62:	2204      	movs	r2, #4
   28c64:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   28c66:	2312      	movs	r3, #18
   28c68:	18fb      	adds	r3, r7, r3
   28c6a:	881b      	ldrh	r3, [r3, #0]
   28c6c:	2210      	movs	r2, #16
   28c6e:	4013      	ands	r3, r2
   28c70:	d010      	beq.n	28c94 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28c72:	697b      	ldr	r3, [r7, #20]
   28c74:	2210      	movs	r2, #16
   28c76:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   28c78:	697b      	ldr	r3, [r7, #20]
   28c7a:	2210      	movs	r2, #16
   28c7c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28c7e:	2310      	movs	r3, #16
   28c80:	18fb      	adds	r3, r7, r3
   28c82:	881b      	ldrh	r3, [r3, #0]
   28c84:	2210      	movs	r2, #16
   28c86:	4013      	ands	r3, r2
   28c88:	d004      	beq.n	28c94 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   28c8a:	69bb      	ldr	r3, [r7, #24]
   28c8c:	69db      	ldr	r3, [r3, #28]
   28c8e:	69ba      	ldr	r2, [r7, #24]
   28c90:	0010      	movs	r0, r2
   28c92:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28c94:	2312      	movs	r3, #18
   28c96:	18fb      	adds	r3, r7, r3
   28c98:	881b      	ldrh	r3, [r3, #0]
   28c9a:	2220      	movs	r2, #32
   28c9c:	4013      	ands	r3, r2
   28c9e:	d010      	beq.n	28cc2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   28ca0:	697b      	ldr	r3, [r7, #20]
   28ca2:	2220      	movs	r2, #32
   28ca4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   28ca6:	697b      	ldr	r3, [r7, #20]
   28ca8:	2220      	movs	r2, #32
   28caa:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28cac:	2310      	movs	r3, #16
   28cae:	18fb      	adds	r3, r7, r3
   28cb0:	881b      	ldrh	r3, [r3, #0]
   28cb2:	2208      	movs	r2, #8
   28cb4:	4013      	ands	r3, r2
   28cb6:	d004      	beq.n	28cc2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   28cb8:	69bb      	ldr	r3, [r7, #24]
   28cba:	699b      	ldr	r3, [r3, #24]
   28cbc:	69ba      	ldr	r2, [r7, #24]
   28cbe:	0010      	movs	r0, r2
   28cc0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28cc2:	2312      	movs	r3, #18
   28cc4:	18fb      	adds	r3, r7, r3
   28cc6:	881b      	ldrh	r3, [r3, #0]
   28cc8:	2208      	movs	r2, #8
   28cca:	4013      	ands	r3, r2
   28ccc:	d010      	beq.n	28cf0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28cce:	697b      	ldr	r3, [r7, #20]
   28cd0:	2208      	movs	r2, #8
   28cd2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28cd4:	697b      	ldr	r3, [r7, #20]
   28cd6:	2208      	movs	r2, #8
   28cd8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   28cda:	2310      	movs	r3, #16
   28cdc:	18fb      	adds	r3, r7, r3
   28cde:	881b      	ldrh	r3, [r3, #0]
   28ce0:	2220      	movs	r2, #32
   28ce2:	4013      	ands	r3, r2
   28ce4:	d004      	beq.n	28cf0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   28ce6:	69bb      	ldr	r3, [r7, #24]
   28ce8:	6a1b      	ldr	r3, [r3, #32]
   28cea:	69ba      	ldr	r2, [r7, #24]
   28cec:	0010      	movs	r0, r2
   28cee:	4798      	blx	r3
		}
	}
#endif
}
   28cf0:	46c0      	nop			; (mov r8, r8)
   28cf2:	46bd      	mov	sp, r7
   28cf4:	b008      	add	sp, #32
   28cf6:	bd80      	pop	{r7, pc}

00028cf8 <system_gclk_gen_get_config_defaults>:
{
   28cf8:	b580      	push	{r7, lr}
   28cfa:	b082      	sub	sp, #8
   28cfc:	af00      	add	r7, sp, #0
   28cfe:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28d00:	687b      	ldr	r3, [r7, #4]
   28d02:	2201      	movs	r2, #1
   28d04:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   28d06:	687b      	ldr	r3, [r7, #4]
   28d08:	2200      	movs	r2, #0
   28d0a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   28d0c:	687b      	ldr	r3, [r7, #4]
   28d0e:	2206      	movs	r2, #6
   28d10:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28d12:	687b      	ldr	r3, [r7, #4]
   28d14:	2200      	movs	r2, #0
   28d16:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   28d18:	687b      	ldr	r3, [r7, #4]
   28d1a:	2200      	movs	r2, #0
   28d1c:	725a      	strb	r2, [r3, #9]
}
   28d1e:	46c0      	nop			; (mov r8, r8)
   28d20:	46bd      	mov	sp, r7
   28d22:	b002      	add	sp, #8
   28d24:	bd80      	pop	{r7, pc}

00028d26 <system_gclk_chan_get_config_defaults>:
{
   28d26:	b580      	push	{r7, lr}
   28d28:	b082      	sub	sp, #8
   28d2a:	af00      	add	r7, sp, #0
   28d2c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28d2e:	687b      	ldr	r3, [r7, #4]
   28d30:	2200      	movs	r2, #0
   28d32:	701a      	strb	r2, [r3, #0]
}
   28d34:	46c0      	nop			; (mov r8, r8)
   28d36:	46bd      	mov	sp, r7
   28d38:	b002      	add	sp, #8
   28d3a:	bd80      	pop	{r7, pc}

00028d3c <system_clock_source_osc8m_get_config_defaults>:
{
   28d3c:	b580      	push	{r7, lr}
   28d3e:	b082      	sub	sp, #8
   28d40:	af00      	add	r7, sp, #0
   28d42:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28d44:	687b      	ldr	r3, [r7, #4]
   28d46:	2203      	movs	r2, #3
   28d48:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   28d4a:	687b      	ldr	r3, [r7, #4]
   28d4c:	2200      	movs	r2, #0
   28d4e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28d50:	687b      	ldr	r3, [r7, #4]
   28d52:	2201      	movs	r2, #1
   28d54:	709a      	strb	r2, [r3, #2]
}
   28d56:	46c0      	nop			; (mov r8, r8)
   28d58:	46bd      	mov	sp, r7
   28d5a:	b002      	add	sp, #8
   28d5c:	bd80      	pop	{r7, pc}
	...

00028d60 <system_cpu_clock_set_divider>:
{
   28d60:	b580      	push	{r7, lr}
   28d62:	b082      	sub	sp, #8
   28d64:	af00      	add	r7, sp, #0
   28d66:	0002      	movs	r2, r0
   28d68:	1dfb      	adds	r3, r7, #7
   28d6a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28d6c:	4a03      	ldr	r2, [pc, #12]	; (28d7c <system_cpu_clock_set_divider+0x1c>)
   28d6e:	1dfb      	adds	r3, r7, #7
   28d70:	781b      	ldrb	r3, [r3, #0]
   28d72:	7213      	strb	r3, [r2, #8]
}
   28d74:	46c0      	nop			; (mov r8, r8)
   28d76:	46bd      	mov	sp, r7
   28d78:	b002      	add	sp, #8
   28d7a:	bd80      	pop	{r7, pc}
   28d7c:	40000400 	.word	0x40000400

00028d80 <system_apb_clock_set_divider>:
{
   28d80:	b580      	push	{r7, lr}
   28d82:	b082      	sub	sp, #8
   28d84:	af00      	add	r7, sp, #0
   28d86:	0002      	movs	r2, r0
   28d88:	1dfb      	adds	r3, r7, #7
   28d8a:	701a      	strb	r2, [r3, #0]
   28d8c:	1dbb      	adds	r3, r7, #6
   28d8e:	1c0a      	adds	r2, r1, #0
   28d90:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28d92:	1dfb      	adds	r3, r7, #7
   28d94:	781b      	ldrb	r3, [r3, #0]
   28d96:	2b01      	cmp	r3, #1
   28d98:	d008      	beq.n	28dac <system_apb_clock_set_divider+0x2c>
   28d9a:	2b02      	cmp	r3, #2
   28d9c:	d00b      	beq.n	28db6 <system_apb_clock_set_divider+0x36>
   28d9e:	2b00      	cmp	r3, #0
   28da0:	d10e      	bne.n	28dc0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   28da2:	4a0b      	ldr	r2, [pc, #44]	; (28dd0 <system_apb_clock_set_divider+0x50>)
   28da4:	1dbb      	adds	r3, r7, #6
   28da6:	781b      	ldrb	r3, [r3, #0]
   28da8:	7253      	strb	r3, [r2, #9]
			break;
   28daa:	e00b      	b.n	28dc4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   28dac:	4a08      	ldr	r2, [pc, #32]	; (28dd0 <system_apb_clock_set_divider+0x50>)
   28dae:	1dbb      	adds	r3, r7, #6
   28db0:	781b      	ldrb	r3, [r3, #0]
   28db2:	7293      	strb	r3, [r2, #10]
			break;
   28db4:	e006      	b.n	28dc4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   28db6:	4a06      	ldr	r2, [pc, #24]	; (28dd0 <system_apb_clock_set_divider+0x50>)
   28db8:	1dbb      	adds	r3, r7, #6
   28dba:	781b      	ldrb	r3, [r3, #0]
   28dbc:	72d3      	strb	r3, [r2, #11]
			break;
   28dbe:	e001      	b.n	28dc4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   28dc0:	2317      	movs	r3, #23
   28dc2:	e000      	b.n	28dc6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   28dc4:	2300      	movs	r3, #0
}
   28dc6:	0018      	movs	r0, r3
   28dc8:	46bd      	mov	sp, r7
   28dca:	b002      	add	sp, #8
   28dcc:	bd80      	pop	{r7, pc}
   28dce:	46c0      	nop			; (mov r8, r8)
   28dd0:	40000400 	.word	0x40000400

00028dd4 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   28dd4:	b580      	push	{r7, lr}
   28dd6:	b082      	sub	sp, #8
   28dd8:	af00      	add	r7, sp, #0
   28dda:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   28ddc:	687b      	ldr	r3, [r7, #4]
   28dde:	2201      	movs	r2, #1
   28de0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   28de2:	687b      	ldr	r3, [r7, #4]
   28de4:	2200      	movs	r2, #0
   28de6:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   28de8:	687b      	ldr	r3, [r7, #4]
   28dea:	2200      	movs	r2, #0
   28dec:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   28dee:	687b      	ldr	r3, [r7, #4]
   28df0:	2200      	movs	r2, #0
   28df2:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   28df4:	687b      	ldr	r3, [r7, #4]
   28df6:	2200      	movs	r2, #0
   28df8:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   28dfa:	687b      	ldr	r3, [r7, #4]
   28dfc:	4a0a      	ldr	r2, [pc, #40]	; (28e28 <system_clock_source_dpll_get_config_defaults+0x54>)
   28dfe:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   28e00:	687b      	ldr	r3, [r7, #4]
   28e02:	2280      	movs	r2, #128	; 0x80
   28e04:	0212      	lsls	r2, r2, #8
   28e06:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   28e08:	687b      	ldr	r3, [r7, #4]
   28e0a:	2201      	movs	r2, #1
   28e0c:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   28e0e:	687b      	ldr	r3, [r7, #4]
   28e10:	2200      	movs	r2, #0
   28e12:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   28e14:	687b      	ldr	r3, [r7, #4]
   28e16:	2200      	movs	r2, #0
   28e18:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   28e1a:	687b      	ldr	r3, [r7, #4]
   28e1c:	2200      	movs	r2, #0
   28e1e:	749a      	strb	r2, [r3, #18]
};
   28e20:	46c0      	nop			; (mov r8, r8)
   28e22:	46bd      	mov	sp, r7
   28e24:	b002      	add	sp, #8
   28e26:	bd80      	pop	{r7, pc}
   28e28:	02dc6c00 	.word	0x02dc6c00

00028e2c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   28e2c:	b580      	push	{r7, lr}
   28e2e:	b082      	sub	sp, #8
   28e30:	af00      	add	r7, sp, #0
   28e32:	0002      	movs	r2, r0
   28e34:	1dfb      	adds	r3, r7, #7
   28e36:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   28e38:	4a08      	ldr	r2, [pc, #32]	; (28e5c <system_flash_set_waitstates+0x30>)
   28e3a:	1dfb      	adds	r3, r7, #7
   28e3c:	781b      	ldrb	r3, [r3, #0]
   28e3e:	210f      	movs	r1, #15
   28e40:	400b      	ands	r3, r1
   28e42:	b2d9      	uxtb	r1, r3
   28e44:	6853      	ldr	r3, [r2, #4]
   28e46:	200f      	movs	r0, #15
   28e48:	4001      	ands	r1, r0
   28e4a:	0049      	lsls	r1, r1, #1
   28e4c:	201e      	movs	r0, #30
   28e4e:	4383      	bics	r3, r0
   28e50:	430b      	orrs	r3, r1
   28e52:	6053      	str	r3, [r2, #4]
}
   28e54:	46c0      	nop			; (mov r8, r8)
   28e56:	46bd      	mov	sp, r7
   28e58:	b002      	add	sp, #8
   28e5a:	bd80      	pop	{r7, pc}
   28e5c:	41004000 	.word	0x41004000

00028e60 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   28e60:	b580      	push	{r7, lr}
   28e62:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28e64:	46c0      	nop			; (mov r8, r8)
   28e66:	4b04      	ldr	r3, [pc, #16]	; (28e78 <_system_dfll_wait_for_sync+0x18>)
   28e68:	68db      	ldr	r3, [r3, #12]
   28e6a:	2210      	movs	r2, #16
   28e6c:	4013      	ands	r3, r2
   28e6e:	d0fa      	beq.n	28e66 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   28e70:	46c0      	nop			; (mov r8, r8)
   28e72:	46bd      	mov	sp, r7
   28e74:	bd80      	pop	{r7, pc}
   28e76:	46c0      	nop			; (mov r8, r8)
   28e78:	40000800 	.word	0x40000800

00028e7c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   28e7c:	b580      	push	{r7, lr}
   28e7e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   28e80:	4b0c      	ldr	r3, [pc, #48]	; (28eb4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28e82:	2202      	movs	r2, #2
   28e84:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28e86:	4b0c      	ldr	r3, [pc, #48]	; (28eb8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28e88:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   28e8a:	4a0a      	ldr	r2, [pc, #40]	; (28eb4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28e8c:	4b0b      	ldr	r3, [pc, #44]	; (28ebc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28e8e:	689b      	ldr	r3, [r3, #8]
   28e90:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   28e92:	4a08      	ldr	r2, [pc, #32]	; (28eb4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28e94:	4b09      	ldr	r3, [pc, #36]	; (28ebc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28e96:	685b      	ldr	r3, [r3, #4]
   28e98:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   28e9a:	4b06      	ldr	r3, [pc, #24]	; (28eb4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28e9c:	2200      	movs	r2, #0
   28e9e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28ea0:	4b05      	ldr	r3, [pc, #20]	; (28eb8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28ea2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   28ea4:	4a03      	ldr	r2, [pc, #12]	; (28eb4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ea6:	4b05      	ldr	r3, [pc, #20]	; (28ebc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28ea8:	681b      	ldr	r3, [r3, #0]
   28eaa:	b29b      	uxth	r3, r3
   28eac:	8493      	strh	r3, [r2, #36]	; 0x24
}
   28eae:	46c0      	nop			; (mov r8, r8)
   28eb0:	46bd      	mov	sp, r7
   28eb2:	bd80      	pop	{r7, pc}
   28eb4:	40000800 	.word	0x40000800
   28eb8:	00028e61 	.word	0x00028e61
   28ebc:	20004138 	.word	0x20004138

00028ec0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   28ec0:	b580      	push	{r7, lr}
   28ec2:	b082      	sub	sp, #8
   28ec4:	af00      	add	r7, sp, #0
   28ec6:	0002      	movs	r2, r0
   28ec8:	1dfb      	adds	r3, r7, #7
   28eca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28ecc:	1dfb      	adds	r3, r7, #7
   28ece:	781b      	ldrb	r3, [r3, #0]
   28ed0:	2b08      	cmp	r3, #8
   28ed2:	d841      	bhi.n	28f58 <system_clock_source_get_hz+0x98>
   28ed4:	009a      	lsls	r2, r3, #2
   28ed6:	4b23      	ldr	r3, [pc, #140]	; (28f64 <system_clock_source_get_hz+0xa4>)
   28ed8:	18d3      	adds	r3, r2, r3
   28eda:	681b      	ldr	r3, [r3, #0]
   28edc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   28ede:	4b22      	ldr	r3, [pc, #136]	; (28f68 <system_clock_source_get_hz+0xa8>)
   28ee0:	691b      	ldr	r3, [r3, #16]
   28ee2:	e03a      	b.n	28f5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   28ee4:	4b21      	ldr	r3, [pc, #132]	; (28f6c <system_clock_source_get_hz+0xac>)
   28ee6:	6a1b      	ldr	r3, [r3, #32]
   28ee8:	059b      	lsls	r3, r3, #22
   28eea:	0f9b      	lsrs	r3, r3, #30
   28eec:	b2db      	uxtb	r3, r3
   28eee:	001a      	movs	r2, r3
   28ef0:	4b1f      	ldr	r3, [pc, #124]	; (28f70 <system_clock_source_get_hz+0xb0>)
   28ef2:	40d3      	lsrs	r3, r2
   28ef4:	e031      	b.n	28f5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   28ef6:	2380      	movs	r3, #128	; 0x80
   28ef8:	021b      	lsls	r3, r3, #8
   28efa:	e02e      	b.n	28f5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   28efc:	2380      	movs	r3, #128	; 0x80
   28efe:	021b      	lsls	r3, r3, #8
   28f00:	e02b      	b.n	28f5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   28f02:	4b19      	ldr	r3, [pc, #100]	; (28f68 <system_clock_source_get_hz+0xa8>)
   28f04:	695b      	ldr	r3, [r3, #20]
   28f06:	e028      	b.n	28f5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   28f08:	4b17      	ldr	r3, [pc, #92]	; (28f68 <system_clock_source_get_hz+0xa8>)
   28f0a:	681b      	ldr	r3, [r3, #0]
   28f0c:	2202      	movs	r2, #2
   28f0e:	4013      	ands	r3, r2
   28f10:	d101      	bne.n	28f16 <system_clock_source_get_hz+0x56>
			return 0;
   28f12:	2300      	movs	r3, #0
   28f14:	e021      	b.n	28f5a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   28f16:	4b17      	ldr	r3, [pc, #92]	; (28f74 <system_clock_source_get_hz+0xb4>)
   28f18:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   28f1a:	4b13      	ldr	r3, [pc, #76]	; (28f68 <system_clock_source_get_hz+0xa8>)
   28f1c:	681b      	ldr	r3, [r3, #0]
   28f1e:	2224      	movs	r2, #36	; 0x24
   28f20:	4013      	ands	r3, r2
   28f22:	2b04      	cmp	r3, #4
   28f24:	d109      	bne.n	28f3a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28f26:	2000      	movs	r0, #0
   28f28:	4b13      	ldr	r3, [pc, #76]	; (28f78 <system_clock_source_get_hz+0xb8>)
   28f2a:	4798      	blx	r3
   28f2c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   28f2e:	4b0e      	ldr	r3, [pc, #56]	; (28f68 <system_clock_source_get_hz+0xa8>)
   28f30:	689b      	ldr	r3, [r3, #8]
   28f32:	041b      	lsls	r3, r3, #16
   28f34:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28f36:	4353      	muls	r3, r2
   28f38:	e00f      	b.n	28f5a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   28f3a:	4b10      	ldr	r3, [pc, #64]	; (28f7c <system_clock_source_get_hz+0xbc>)
   28f3c:	e00d      	b.n	28f5a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   28f3e:	4a0b      	ldr	r2, [pc, #44]	; (28f6c <system_clock_source_get_hz+0xac>)
   28f40:	2350      	movs	r3, #80	; 0x50
   28f42:	5cd3      	ldrb	r3, [r2, r3]
   28f44:	b2db      	uxtb	r3, r3
   28f46:	001a      	movs	r2, r3
   28f48:	2304      	movs	r3, #4
   28f4a:	4013      	ands	r3, r2
   28f4c:	d101      	bne.n	28f52 <system_clock_source_get_hz+0x92>
			return 0;
   28f4e:	2300      	movs	r3, #0
   28f50:	e003      	b.n	28f5a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   28f52:	4b05      	ldr	r3, [pc, #20]	; (28f68 <system_clock_source_get_hz+0xa8>)
   28f54:	68db      	ldr	r3, [r3, #12]
   28f56:	e000      	b.n	28f5a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   28f58:	2300      	movs	r3, #0
	}
}
   28f5a:	0018      	movs	r0, r3
   28f5c:	46bd      	mov	sp, r7
   28f5e:	b002      	add	sp, #8
   28f60:	bd80      	pop	{r7, pc}
   28f62:	46c0      	nop			; (mov r8, r8)
   28f64:	00038964 	.word	0x00038964
   28f68:	20004138 	.word	0x20004138
   28f6c:	40000800 	.word	0x40000800
   28f70:	007a1200 	.word	0x007a1200
   28f74:	00028e61 	.word	0x00028e61
   28f78:	0002995d 	.word	0x0002995d
   28f7c:	02dc6c00 	.word	0x02dc6c00

00028f80 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   28f80:	b580      	push	{r7, lr}
   28f82:	b084      	sub	sp, #16
   28f84:	af00      	add	r7, sp, #0
   28f86:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   28f88:	4b1a      	ldr	r3, [pc, #104]	; (28ff4 <system_clock_source_osc8m_set_config+0x74>)
   28f8a:	6a1b      	ldr	r3, [r3, #32]
   28f8c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   28f8e:	687b      	ldr	r3, [r7, #4]
   28f90:	781b      	ldrb	r3, [r3, #0]
   28f92:	1c1a      	adds	r2, r3, #0
   28f94:	2303      	movs	r3, #3
   28f96:	4013      	ands	r3, r2
   28f98:	b2da      	uxtb	r2, r3
   28f9a:	230d      	movs	r3, #13
   28f9c:	18fb      	adds	r3, r7, r3
   28f9e:	2103      	movs	r1, #3
   28fa0:	400a      	ands	r2, r1
   28fa2:	0010      	movs	r0, r2
   28fa4:	781a      	ldrb	r2, [r3, #0]
   28fa6:	2103      	movs	r1, #3
   28fa8:	438a      	bics	r2, r1
   28faa:	1c11      	adds	r1, r2, #0
   28fac:	1c02      	adds	r2, r0, #0
   28fae:	430a      	orrs	r2, r1
   28fb0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   28fb2:	687b      	ldr	r3, [r7, #4]
   28fb4:	789a      	ldrb	r2, [r3, #2]
   28fb6:	230c      	movs	r3, #12
   28fb8:	18fb      	adds	r3, r7, r3
   28fba:	01d0      	lsls	r0, r2, #7
   28fbc:	781a      	ldrb	r2, [r3, #0]
   28fbe:	217f      	movs	r1, #127	; 0x7f
   28fc0:	400a      	ands	r2, r1
   28fc2:	1c11      	adds	r1, r2, #0
   28fc4:	1c02      	adds	r2, r0, #0
   28fc6:	430a      	orrs	r2, r1
   28fc8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   28fca:	687b      	ldr	r3, [r7, #4]
   28fcc:	785a      	ldrb	r2, [r3, #1]
   28fce:	230c      	movs	r3, #12
   28fd0:	18fb      	adds	r3, r7, r3
   28fd2:	2101      	movs	r1, #1
   28fd4:	400a      	ands	r2, r1
   28fd6:	0190      	lsls	r0, r2, #6
   28fd8:	781a      	ldrb	r2, [r3, #0]
   28fda:	2140      	movs	r1, #64	; 0x40
   28fdc:	438a      	bics	r2, r1
   28fde:	1c11      	adds	r1, r2, #0
   28fe0:	1c02      	adds	r2, r0, #0
   28fe2:	430a      	orrs	r2, r1
   28fe4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   28fe6:	4b03      	ldr	r3, [pc, #12]	; (28ff4 <system_clock_source_osc8m_set_config+0x74>)
   28fe8:	68fa      	ldr	r2, [r7, #12]
   28fea:	621a      	str	r2, [r3, #32]
}
   28fec:	46c0      	nop			; (mov r8, r8)
   28fee:	46bd      	mov	sp, r7
   28ff0:	b004      	add	sp, #16
   28ff2:	bd80      	pop	{r7, pc}
   28ff4:	40000800 	.word	0x40000800

00028ff8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   28ff8:	b580      	push	{r7, lr}
   28ffa:	b086      	sub	sp, #24
   28ffc:	af00      	add	r7, sp, #0
   28ffe:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29000:	687b      	ldr	r3, [r7, #4]
   29002:	68db      	ldr	r3, [r3, #12]
   29004:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   29006:	687b      	ldr	r3, [r7, #4]
   29008:	7d1b      	ldrb	r3, [r3, #20]
   2900a:	2b01      	cmp	r3, #1
   2900c:	d10a      	bne.n	29024 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2900e:	687b      	ldr	r3, [r7, #4]
   29010:	8a1b      	ldrh	r3, [r3, #16]
   29012:	3301      	adds	r3, #1
   29014:	005b      	lsls	r3, r3, #1
   29016:	001a      	movs	r2, r3
   29018:	4b36      	ldr	r3, [pc, #216]	; (290f4 <system_clock_source_dpll_set_config+0xfc>)
   2901a:	0011      	movs	r1, r2
   2901c:	6978      	ldr	r0, [r7, #20]
   2901e:	4798      	blx	r3
   29020:	0003      	movs	r3, r0
   29022:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29024:	687b      	ldr	r3, [r7, #4]
   29026:	689b      	ldr	r3, [r3, #8]
   29028:	011a      	lsls	r2, r3, #4
   2902a:	4b32      	ldr	r3, [pc, #200]	; (290f4 <system_clock_source_dpll_set_config+0xfc>)
   2902c:	6979      	ldr	r1, [r7, #20]
   2902e:	0010      	movs	r0, r2
   29030:	4798      	blx	r3
   29032:	0003      	movs	r3, r0
   29034:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   29036:	693b      	ldr	r3, [r7, #16]
   29038:	b2da      	uxtb	r2, r3
   2903a:	230f      	movs	r3, #15
   2903c:	18fb      	adds	r3, r7, r3
   2903e:	210f      	movs	r1, #15
   29040:	400a      	ands	r2, r1
   29042:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29044:	693b      	ldr	r3, [r7, #16]
   29046:	091b      	lsrs	r3, r3, #4
   29048:	3b01      	subs	r3, #1
   2904a:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2904c:	492a      	ldr	r1, [pc, #168]	; (290f8 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2904e:	687b      	ldr	r3, [r7, #4]
   29050:	781b      	ldrb	r3, [r3, #0]
   29052:	01db      	lsls	r3, r3, #7
   29054:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   29056:	687b      	ldr	r3, [r7, #4]
   29058:	785b      	ldrb	r3, [r3, #1]
   2905a:	019b      	lsls	r3, r3, #6
   2905c:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2905e:	4313      	orrs	r3, r2
   29060:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29062:	2344      	movs	r3, #68	; 0x44
   29064:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   29066:	4b24      	ldr	r3, [pc, #144]	; (290f8 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29068:	220f      	movs	r2, #15
   2906a:	18ba      	adds	r2, r7, r2
   2906c:	7812      	ldrb	r2, [r2, #0]
   2906e:	0412      	lsls	r2, r2, #16
   29070:	0011      	movs	r1, r2
   29072:	22f0      	movs	r2, #240	; 0xf0
   29074:	0312      	lsls	r2, r2, #12
   29076:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   29078:	693a      	ldr	r2, [r7, #16]
   2907a:	0512      	lsls	r2, r2, #20
   2907c:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2907e:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29080:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   29082:	4b1d      	ldr	r3, [pc, #116]	; (290f8 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29084:	687a      	ldr	r2, [r7, #4]
   29086:	8a12      	ldrh	r2, [r2, #16]
   29088:	0412      	lsls	r2, r2, #16
   2908a:	0011      	movs	r1, r2
   2908c:	4a1b      	ldr	r2, [pc, #108]	; (290fc <system_clock_source_dpll_set_config+0x104>)
   2908e:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29090:	687a      	ldr	r2, [r7, #4]
   29092:	7892      	ldrb	r2, [r2, #2]
   29094:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29096:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29098:	687a      	ldr	r2, [r7, #4]
   2909a:	7cd2      	ldrb	r2, [r2, #19]
   2909c:	0212      	lsls	r2, r2, #8
   2909e:	0010      	movs	r0, r2
   290a0:	22e0      	movs	r2, #224	; 0xe0
   290a2:	00d2      	lsls	r2, r2, #3
   290a4:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   290a6:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   290a8:	687a      	ldr	r2, [r7, #4]
   290aa:	7d12      	ldrb	r2, [r2, #20]
   290ac:	0112      	lsls	r2, r2, #4
   290ae:	0010      	movs	r0, r2
   290b0:	2230      	movs	r2, #48	; 0x30
   290b2:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   290b4:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   290b6:	687a      	ldr	r2, [r7, #4]
   290b8:	78d2      	ldrb	r2, [r2, #3]
   290ba:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   290bc:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   290be:	687a      	ldr	r2, [r7, #4]
   290c0:	7912      	ldrb	r2, [r2, #4]
   290c2:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   290c4:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   290c6:	687a      	ldr	r2, [r7, #4]
   290c8:	7c92      	ldrb	r2, [r2, #18]
   290ca:	0010      	movs	r0, r2
   290cc:	2203      	movs	r2, #3
   290ce:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   290d0:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   290d2:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   290d4:	693b      	ldr	r3, [r7, #16]
   290d6:	3301      	adds	r3, #1
   290d8:	011a      	lsls	r2, r3, #4
   290da:	230f      	movs	r3, #15
   290dc:	18fb      	adds	r3, r7, r3
   290de:	781b      	ldrb	r3, [r3, #0]
   290e0:	18d3      	adds	r3, r2, r3
   290e2:	697a      	ldr	r2, [r7, #20]
   290e4:	4353      	muls	r3, r2
   290e6:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   290e8:	4b05      	ldr	r3, [pc, #20]	; (29100 <system_clock_source_dpll_set_config+0x108>)
   290ea:	60da      	str	r2, [r3, #12]
}
   290ec:	46c0      	nop			; (mov r8, r8)
   290ee:	46bd      	mov	sp, r7
   290f0:	b006      	add	sp, #24
   290f2:	bd80      	pop	{r7, pc}
   290f4:	00032389 	.word	0x00032389
   290f8:	40000800 	.word	0x40000800
   290fc:	07ff0000 	.word	0x07ff0000
   29100:	20004138 	.word	0x20004138

00029104 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29104:	b580      	push	{r7, lr}
   29106:	b082      	sub	sp, #8
   29108:	af00      	add	r7, sp, #0
   2910a:	0002      	movs	r2, r0
   2910c:	1dfb      	adds	r3, r7, #7
   2910e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29110:	1dfb      	adds	r3, r7, #7
   29112:	781b      	ldrb	r3, [r3, #0]
   29114:	2b08      	cmp	r3, #8
   29116:	d83b      	bhi.n	29190 <system_clock_source_enable+0x8c>
   29118:	009a      	lsls	r2, r3, #2
   2911a:	4b21      	ldr	r3, [pc, #132]	; (291a0 <system_clock_source_enable+0x9c>)
   2911c:	18d3      	adds	r3, r2, r3
   2911e:	681b      	ldr	r3, [r3, #0]
   29120:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29122:	4b20      	ldr	r3, [pc, #128]	; (291a4 <system_clock_source_enable+0xa0>)
   29124:	4a1f      	ldr	r2, [pc, #124]	; (291a4 <system_clock_source_enable+0xa0>)
   29126:	6a12      	ldr	r2, [r2, #32]
   29128:	2102      	movs	r1, #2
   2912a:	430a      	orrs	r2, r1
   2912c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2912e:	2300      	movs	r3, #0
   29130:	e031      	b.n	29196 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29132:	4b1c      	ldr	r3, [pc, #112]	; (291a4 <system_clock_source_enable+0xa0>)
   29134:	4a1b      	ldr	r2, [pc, #108]	; (291a4 <system_clock_source_enable+0xa0>)
   29136:	6992      	ldr	r2, [r2, #24]
   29138:	2102      	movs	r1, #2
   2913a:	430a      	orrs	r2, r1
   2913c:	619a      	str	r2, [r3, #24]
		break;
   2913e:	e029      	b.n	29194 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29140:	4a18      	ldr	r2, [pc, #96]	; (291a4 <system_clock_source_enable+0xa0>)
   29142:	4b18      	ldr	r3, [pc, #96]	; (291a4 <system_clock_source_enable+0xa0>)
   29144:	8a1b      	ldrh	r3, [r3, #16]
   29146:	b29b      	uxth	r3, r3
   29148:	2102      	movs	r1, #2
   2914a:	430b      	orrs	r3, r1
   2914c:	b29b      	uxth	r3, r3
   2914e:	8213      	strh	r3, [r2, #16]
		break;
   29150:	e020      	b.n	29194 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29152:	4a14      	ldr	r2, [pc, #80]	; (291a4 <system_clock_source_enable+0xa0>)
   29154:	4b13      	ldr	r3, [pc, #76]	; (291a4 <system_clock_source_enable+0xa0>)
   29156:	8a9b      	ldrh	r3, [r3, #20]
   29158:	b29b      	uxth	r3, r3
   2915a:	2102      	movs	r1, #2
   2915c:	430b      	orrs	r3, r1
   2915e:	b29b      	uxth	r3, r3
   29160:	8293      	strh	r3, [r2, #20]
		break;
   29162:	e017      	b.n	29194 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29164:	4b10      	ldr	r3, [pc, #64]	; (291a8 <system_clock_source_enable+0xa4>)
   29166:	681b      	ldr	r3, [r3, #0]
   29168:	2202      	movs	r2, #2
   2916a:	431a      	orrs	r2, r3
   2916c:	4b0e      	ldr	r3, [pc, #56]	; (291a8 <system_clock_source_enable+0xa4>)
   2916e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29170:	4b0e      	ldr	r3, [pc, #56]	; (291ac <system_clock_source_enable+0xa8>)
   29172:	4798      	blx	r3
		break;
   29174:	e00e      	b.n	29194 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   29176:	4a0b      	ldr	r2, [pc, #44]	; (291a4 <system_clock_source_enable+0xa0>)
   29178:	490a      	ldr	r1, [pc, #40]	; (291a4 <system_clock_source_enable+0xa0>)
   2917a:	2344      	movs	r3, #68	; 0x44
   2917c:	5ccb      	ldrb	r3, [r1, r3]
   2917e:	b2db      	uxtb	r3, r3
   29180:	2102      	movs	r1, #2
   29182:	430b      	orrs	r3, r1
   29184:	b2d9      	uxtb	r1, r3
   29186:	2344      	movs	r3, #68	; 0x44
   29188:	54d1      	strb	r1, [r2, r3]
		break;
   2918a:	e003      	b.n	29194 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2918c:	2300      	movs	r3, #0
   2918e:	e002      	b.n	29196 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29190:	2317      	movs	r3, #23
   29192:	e000      	b.n	29196 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29194:	2300      	movs	r3, #0
}
   29196:	0018      	movs	r0, r3
   29198:	46bd      	mov	sp, r7
   2919a:	b002      	add	sp, #8
   2919c:	bd80      	pop	{r7, pc}
   2919e:	46c0      	nop			; (mov r8, r8)
   291a0:	00038988 	.word	0x00038988
   291a4:	40000800 	.word	0x40000800
   291a8:	20004138 	.word	0x20004138
   291ac:	00028e7d 	.word	0x00028e7d

000291b0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   291b0:	b580      	push	{r7, lr}
   291b2:	b084      	sub	sp, #16
   291b4:	af00      	add	r7, sp, #0
   291b6:	0002      	movs	r2, r0
   291b8:	1dfb      	adds	r3, r7, #7
   291ba:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   291bc:	2300      	movs	r3, #0
   291be:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   291c0:	1dfb      	adds	r3, r7, #7
   291c2:	781b      	ldrb	r3, [r3, #0]
   291c4:	2b08      	cmp	r3, #8
   291c6:	d821      	bhi.n	2920c <system_clock_source_is_ready+0x5c>
   291c8:	009a      	lsls	r2, r3, #2
   291ca:	4b18      	ldr	r3, [pc, #96]	; (2922c <system_clock_source_is_ready+0x7c>)
   291cc:	18d3      	adds	r3, r2, r3
   291ce:	681b      	ldr	r3, [r3, #0]
   291d0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   291d2:	2308      	movs	r3, #8
   291d4:	60fb      	str	r3, [r7, #12]
		break;
   291d6:	e01b      	b.n	29210 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   291d8:	2304      	movs	r3, #4
   291da:	60fb      	str	r3, [r7, #12]
		break;
   291dc:	e018      	b.n	29210 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   291de:	2301      	movs	r3, #1
   291e0:	60fb      	str	r3, [r7, #12]
		break;
   291e2:	e015      	b.n	29210 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   291e4:	2302      	movs	r3, #2
   291e6:	60fb      	str	r3, [r7, #12]
		break;
   291e8:	e012      	b.n	29210 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   291ea:	2310      	movs	r3, #16
   291ec:	60fb      	str	r3, [r7, #12]
		}
		break;
   291ee:	e00f      	b.n	29210 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   291f0:	4a0f      	ldr	r2, [pc, #60]	; (29230 <system_clock_source_is_ready+0x80>)
   291f2:	2350      	movs	r3, #80	; 0x50
   291f4:	5cd3      	ldrb	r3, [r2, r3]
   291f6:	b2db      	uxtb	r3, r3
   291f8:	001a      	movs	r2, r3
   291fa:	2303      	movs	r3, #3
   291fc:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   291fe:	3b03      	subs	r3, #3
   29200:	425a      	negs	r2, r3
   29202:	4153      	adcs	r3, r2
   29204:	b2db      	uxtb	r3, r3
   29206:	e00c      	b.n	29222 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29208:	2301      	movs	r3, #1
   2920a:	e00a      	b.n	29222 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2920c:	2300      	movs	r3, #0
   2920e:	e008      	b.n	29222 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29210:	4b07      	ldr	r3, [pc, #28]	; (29230 <system_clock_source_is_ready+0x80>)
   29212:	68db      	ldr	r3, [r3, #12]
   29214:	68fa      	ldr	r2, [r7, #12]
   29216:	401a      	ands	r2, r3
   29218:	68fb      	ldr	r3, [r7, #12]
   2921a:	1ad3      	subs	r3, r2, r3
   2921c:	425a      	negs	r2, r3
   2921e:	4153      	adcs	r3, r2
   29220:	b2db      	uxtb	r3, r3
}
   29222:	0018      	movs	r0, r3
   29224:	46bd      	mov	sp, r7
   29226:	b004      	add	sp, #16
   29228:	bd80      	pop	{r7, pc}
   2922a:	46c0      	nop			; (mov r8, r8)
   2922c:	000389ac 	.word	0x000389ac
   29230:	40000800 	.word	0x40000800

00029234 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29234:	b580      	push	{r7, lr}
   29236:	b082      	sub	sp, #8
   29238:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2923a:	003b      	movs	r3, r7
   2923c:	2203      	movs	r2, #3
   2923e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29240:	2300      	movs	r3, #0
   29242:	607b      	str	r3, [r7, #4]
   29244:	e009      	b.n	2925a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   29246:	687b      	ldr	r3, [r7, #4]
   29248:	b2db      	uxtb	r3, r3
   2924a:	003a      	movs	r2, r7
   2924c:	0011      	movs	r1, r2
   2924e:	0018      	movs	r0, r3
   29250:	4b05      	ldr	r3, [pc, #20]	; (29268 <_switch_peripheral_gclk+0x34>)
   29252:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29254:	687b      	ldr	r3, [r7, #4]
   29256:	3301      	adds	r3, #1
   29258:	607b      	str	r3, [r7, #4]
   2925a:	687b      	ldr	r3, [r7, #4]
   2925c:	2b24      	cmp	r3, #36	; 0x24
   2925e:	d9f2      	bls.n	29246 <_switch_peripheral_gclk+0x12>
	}
}
   29260:	46c0      	nop			; (mov r8, r8)
   29262:	46bd      	mov	sp, r7
   29264:	b002      	add	sp, #8
   29266:	bd80      	pop	{r7, pc}
   29268:	00029839 	.word	0x00029839

0002926c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2926c:	b580      	push	{r7, lr}
   2926e:	b0a6      	sub	sp, #152	; 0x98
   29270:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29272:	4b92      	ldr	r3, [pc, #584]	; (294bc <system_clock_init+0x250>)
   29274:	22c2      	movs	r2, #194	; 0xc2
   29276:	00d2      	lsls	r2, r2, #3
   29278:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2927a:	2003      	movs	r0, #3
   2927c:	4b90      	ldr	r3, [pc, #576]	; (294c0 <system_clock_init+0x254>)
   2927e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29280:	4b90      	ldr	r3, [pc, #576]	; (294c4 <system_clock_init+0x258>)
   29282:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29284:	2394      	movs	r3, #148	; 0x94
   29286:	18fb      	adds	r3, r7, r3
   29288:	0018      	movs	r0, r3
   2928a:	4b8f      	ldr	r3, [pc, #572]	; (294c8 <system_clock_init+0x25c>)
   2928c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2928e:	2394      	movs	r3, #148	; 0x94
   29290:	18fb      	adds	r3, r7, r3
   29292:	2200      	movs	r2, #0
   29294:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29296:	2394      	movs	r3, #148	; 0x94
   29298:	18fb      	adds	r3, r7, r3
   2929a:	2201      	movs	r2, #1
   2929c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2929e:	2394      	movs	r3, #148	; 0x94
   292a0:	18fb      	adds	r3, r7, r3
   292a2:	2200      	movs	r2, #0
   292a4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   292a6:	2394      	movs	r3, #148	; 0x94
   292a8:	18fb      	adds	r3, r7, r3
   292aa:	0018      	movs	r0, r3
   292ac:	4b87      	ldr	r3, [pc, #540]	; (294cc <system_clock_init+0x260>)
   292ae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   292b0:	2006      	movs	r0, #6
   292b2:	4b87      	ldr	r3, [pc, #540]	; (294d0 <system_clock_init+0x264>)
   292b4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   292b6:	4b87      	ldr	r3, [pc, #540]	; (294d4 <system_clock_init+0x268>)
   292b8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   292ba:	2360      	movs	r3, #96	; 0x60
   292bc:	18fb      	adds	r3, r7, r3
   292be:	0018      	movs	r0, r3
   292c0:	4b85      	ldr	r3, [pc, #532]	; (294d8 <system_clock_init+0x26c>)
   292c2:	4798      	blx	r3
   292c4:	2360      	movs	r3, #96	; 0x60
   292c6:	18fb      	adds	r3, r7, r3
   292c8:	2206      	movs	r2, #6
   292ca:	701a      	strb	r2, [r3, #0]
   292cc:	2360      	movs	r3, #96	; 0x60
   292ce:	18fb      	adds	r3, r7, r3
   292d0:	2208      	movs	r2, #8
   292d2:	605a      	str	r2, [r3, #4]
   292d4:	2360      	movs	r3, #96	; 0x60
   292d6:	18fb      	adds	r3, r7, r3
   292d8:	2200      	movs	r2, #0
   292da:	721a      	strb	r2, [r3, #8]
   292dc:	2360      	movs	r3, #96	; 0x60
   292de:	18fb      	adds	r3, r7, r3
   292e0:	2200      	movs	r2, #0
   292e2:	725a      	strb	r2, [r3, #9]
   292e4:	2360      	movs	r3, #96	; 0x60
   292e6:	18fb      	adds	r3, r7, r3
   292e8:	0019      	movs	r1, r3
   292ea:	2001      	movs	r0, #1
   292ec:	4b7b      	ldr	r3, [pc, #492]	; (294dc <system_clock_init+0x270>)
   292ee:	4798      	blx	r3
   292f0:	2001      	movs	r0, #1
   292f2:	4b7b      	ldr	r3, [pc, #492]	; (294e0 <system_clock_init+0x274>)
   292f4:	4798      	blx	r3
   292f6:	2354      	movs	r3, #84	; 0x54
   292f8:	18fb      	adds	r3, r7, r3
   292fa:	0018      	movs	r0, r3
   292fc:	4b76      	ldr	r3, [pc, #472]	; (294d8 <system_clock_init+0x26c>)
   292fe:	4798      	blx	r3
   29300:	2354      	movs	r3, #84	; 0x54
   29302:	18fb      	adds	r3, r7, r3
   29304:	2203      	movs	r2, #3
   29306:	701a      	strb	r2, [r3, #0]
   29308:	2354      	movs	r3, #84	; 0x54
   2930a:	18fb      	adds	r3, r7, r3
   2930c:	2201      	movs	r2, #1
   2930e:	605a      	str	r2, [r3, #4]
   29310:	2354      	movs	r3, #84	; 0x54
   29312:	18fb      	adds	r3, r7, r3
   29314:	2201      	movs	r2, #1
   29316:	721a      	strb	r2, [r3, #8]
   29318:	2354      	movs	r3, #84	; 0x54
   2931a:	18fb      	adds	r3, r7, r3
   2931c:	2200      	movs	r2, #0
   2931e:	725a      	strb	r2, [r3, #9]
   29320:	2354      	movs	r3, #84	; 0x54
   29322:	18fb      	adds	r3, r7, r3
   29324:	0019      	movs	r1, r3
   29326:	2002      	movs	r0, #2
   29328:	4b6c      	ldr	r3, [pc, #432]	; (294dc <system_clock_init+0x270>)
   2932a:	4798      	blx	r3
   2932c:	2002      	movs	r0, #2
   2932e:	4b6c      	ldr	r3, [pc, #432]	; (294e0 <system_clock_init+0x274>)
   29330:	4798      	blx	r3
   29332:	233c      	movs	r3, #60	; 0x3c
   29334:	18fb      	adds	r3, r7, r3
   29336:	0018      	movs	r0, r3
   29338:	4b67      	ldr	r3, [pc, #412]	; (294d8 <system_clock_init+0x26c>)
   2933a:	4798      	blx	r3
   2933c:	233c      	movs	r3, #60	; 0x3c
   2933e:	18fb      	adds	r3, r7, r3
   29340:	2203      	movs	r2, #3
   29342:	701a      	strb	r2, [r3, #0]
   29344:	233c      	movs	r3, #60	; 0x3c
   29346:	18fb      	adds	r3, r7, r3
   29348:	2220      	movs	r2, #32
   2934a:	605a      	str	r2, [r3, #4]
   2934c:	233c      	movs	r3, #60	; 0x3c
   2934e:	18fb      	adds	r3, r7, r3
   29350:	2200      	movs	r2, #0
   29352:	721a      	strb	r2, [r3, #8]
   29354:	233c      	movs	r3, #60	; 0x3c
   29356:	18fb      	adds	r3, r7, r3
   29358:	2200      	movs	r2, #0
   2935a:	725a      	strb	r2, [r3, #9]
   2935c:	233c      	movs	r3, #60	; 0x3c
   2935e:	18fb      	adds	r3, r7, r3
   29360:	0019      	movs	r1, r3
   29362:	2004      	movs	r0, #4
   29364:	4b5d      	ldr	r3, [pc, #372]	; (294dc <system_clock_init+0x270>)
   29366:	4798      	blx	r3
   29368:	2004      	movs	r0, #4
   2936a:	4b5d      	ldr	r3, [pc, #372]	; (294e0 <system_clock_init+0x274>)
   2936c:	4798      	blx	r3
   2936e:	2330      	movs	r3, #48	; 0x30
   29370:	18fb      	adds	r3, r7, r3
   29372:	0018      	movs	r0, r3
   29374:	4b58      	ldr	r3, [pc, #352]	; (294d8 <system_clock_init+0x26c>)
   29376:	4798      	blx	r3
   29378:	2330      	movs	r3, #48	; 0x30
   2937a:	18fb      	adds	r3, r7, r3
   2937c:	2206      	movs	r2, #6
   2937e:	701a      	strb	r2, [r3, #0]
   29380:	2330      	movs	r3, #48	; 0x30
   29382:	18fb      	adds	r3, r7, r3
   29384:	2201      	movs	r2, #1
   29386:	605a      	str	r2, [r3, #4]
   29388:	2330      	movs	r3, #48	; 0x30
   2938a:	18fb      	adds	r3, r7, r3
   2938c:	2200      	movs	r2, #0
   2938e:	721a      	strb	r2, [r3, #8]
   29390:	2330      	movs	r3, #48	; 0x30
   29392:	18fb      	adds	r3, r7, r3
   29394:	2200      	movs	r2, #0
   29396:	725a      	strb	r2, [r3, #9]
   29398:	2330      	movs	r3, #48	; 0x30
   2939a:	18fb      	adds	r3, r7, r3
   2939c:	0019      	movs	r1, r3
   2939e:	2005      	movs	r0, #5
   293a0:	4b4e      	ldr	r3, [pc, #312]	; (294dc <system_clock_init+0x270>)
   293a2:	4798      	blx	r3
   293a4:	2005      	movs	r0, #5
   293a6:	4b4e      	ldr	r3, [pc, #312]	; (294e0 <system_clock_init+0x274>)
   293a8:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   293aa:	2390      	movs	r3, #144	; 0x90
   293ac:	18fb      	adds	r3, r7, r3
   293ae:	0018      	movs	r0, r3
   293b0:	4b4c      	ldr	r3, [pc, #304]	; (294e4 <system_clock_init+0x278>)
   293b2:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   293b4:	2390      	movs	r3, #144	; 0x90
   293b6:	18fb      	adds	r3, r7, r3
   293b8:	2201      	movs	r2, #1
   293ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   293bc:	2390      	movs	r3, #144	; 0x90
   293be:	18fb      	adds	r3, r7, r3
   293c0:	0019      	movs	r1, r3
   293c2:	2001      	movs	r0, #1
   293c4:	4b48      	ldr	r3, [pc, #288]	; (294e8 <system_clock_init+0x27c>)
   293c6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   293c8:	2001      	movs	r0, #1
   293ca:	4b48      	ldr	r3, [pc, #288]	; (294ec <system_clock_init+0x280>)
   293cc:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   293ce:	2378      	movs	r3, #120	; 0x78
   293d0:	18fb      	adds	r3, r7, r3
   293d2:	0018      	movs	r0, r3
   293d4:	4b46      	ldr	r3, [pc, #280]	; (294f0 <system_clock_init+0x284>)
   293d6:	4798      	blx	r3

	dpll_config.on_demand        = false;
   293d8:	2378      	movs	r3, #120	; 0x78
   293da:	18fb      	adds	r3, r7, r3
   293dc:	2200      	movs	r2, #0
   293de:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   293e0:	2378      	movs	r3, #120	; 0x78
   293e2:	18fb      	adds	r3, r7, r3
   293e4:	2200      	movs	r2, #0
   293e6:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   293e8:	2378      	movs	r3, #120	; 0x78
   293ea:	18fb      	adds	r3, r7, r3
   293ec:	2200      	movs	r2, #0
   293ee:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   293f0:	2378      	movs	r3, #120	; 0x78
   293f2:	18fb      	adds	r3, r7, r3
   293f4:	2200      	movs	r2, #0
   293f6:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   293f8:	2378      	movs	r3, #120	; 0x78
   293fa:	18fb      	adds	r3, r7, r3
   293fc:	2200      	movs	r2, #0
   293fe:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29400:	2378      	movs	r3, #120	; 0x78
   29402:	18fb      	adds	r3, r7, r3
   29404:	2200      	movs	r2, #0
   29406:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29408:	2378      	movs	r3, #120	; 0x78
   2940a:	18fb      	adds	r3, r7, r3
   2940c:	2200      	movs	r2, #0
   2940e:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29410:	2378      	movs	r3, #120	; 0x78
   29412:	18fb      	adds	r3, r7, r3
   29414:	2202      	movs	r2, #2
   29416:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29418:	2378      	movs	r3, #120	; 0x78
   2941a:	18fb      	adds	r3, r7, r3
   2941c:	4a35      	ldr	r2, [pc, #212]	; (294f4 <system_clock_init+0x288>)
   2941e:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29420:	2378      	movs	r3, #120	; 0x78
   29422:	18fb      	adds	r3, r7, r3
   29424:	2201      	movs	r2, #1
   29426:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   29428:	2378      	movs	r3, #120	; 0x78
   2942a:	18fb      	adds	r3, r7, r3
   2942c:	4a32      	ldr	r2, [pc, #200]	; (294f8 <system_clock_init+0x28c>)
   2942e:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29430:	2378      	movs	r3, #120	; 0x78
   29432:	18fb      	adds	r3, r7, r3
   29434:	0018      	movs	r0, r3
   29436:	4b31      	ldr	r3, [pc, #196]	; (294fc <system_clock_init+0x290>)
   29438:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2943a:	2008      	movs	r0, #8
   2943c:	4b24      	ldr	r3, [pc, #144]	; (294d0 <system_clock_init+0x264>)
   2943e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29440:	46c0      	nop			; (mov r8, r8)
   29442:	2008      	movs	r0, #8
   29444:	4b2e      	ldr	r3, [pc, #184]	; (29500 <system_clock_init+0x294>)
   29446:	4798      	blx	r3
   29448:	0003      	movs	r3, r0
   2944a:	001a      	movs	r2, r3
   2944c:	2301      	movs	r3, #1
   2944e:	4053      	eors	r3, r2
   29450:	b2db      	uxtb	r3, r3
   29452:	2b00      	cmp	r3, #0
   29454:	d1f5      	bne.n	29442 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   29456:	4919      	ldr	r1, [pc, #100]	; (294bc <system_clock_init+0x250>)
   29458:	2244      	movs	r2, #68	; 0x44
   2945a:	5c8b      	ldrb	r3, [r1, r2]
   2945c:	2080      	movs	r0, #128	; 0x80
   2945e:	4240      	negs	r0, r0
   29460:	4303      	orrs	r3, r0
   29462:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29464:	2000      	movs	r0, #0
   29466:	4b27      	ldr	r3, [pc, #156]	; (29504 <system_clock_init+0x298>)
   29468:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2946a:	2100      	movs	r1, #0
   2946c:	2000      	movs	r0, #0
   2946e:	4b26      	ldr	r3, [pc, #152]	; (29508 <system_clock_init+0x29c>)
   29470:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   29472:	2100      	movs	r1, #0
   29474:	2001      	movs	r0, #1
   29476:	4b24      	ldr	r3, [pc, #144]	; (29508 <system_clock_init+0x29c>)
   29478:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2947a:	2100      	movs	r1, #0
   2947c:	2002      	movs	r0, #2
   2947e:	4b22      	ldr	r3, [pc, #136]	; (29508 <system_clock_init+0x29c>)
   29480:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   29482:	003b      	movs	r3, r7
   29484:	0018      	movs	r0, r3
   29486:	4b14      	ldr	r3, [pc, #80]	; (294d8 <system_clock_init+0x26c>)
   29488:	4798      	blx	r3
   2948a:	003b      	movs	r3, r7
   2948c:	2208      	movs	r2, #8
   2948e:	701a      	strb	r2, [r3, #0]
   29490:	003b      	movs	r3, r7
   29492:	2201      	movs	r2, #1
   29494:	605a      	str	r2, [r3, #4]
   29496:	003b      	movs	r3, r7
   29498:	2200      	movs	r2, #0
   2949a:	721a      	strb	r2, [r3, #8]
   2949c:	003b      	movs	r3, r7
   2949e:	2201      	movs	r2, #1
   294a0:	725a      	strb	r2, [r3, #9]
   294a2:	003b      	movs	r3, r7
   294a4:	0019      	movs	r1, r3
   294a6:	2000      	movs	r0, #0
   294a8:	4b0c      	ldr	r3, [pc, #48]	; (294dc <system_clock_init+0x270>)
   294aa:	4798      	blx	r3
   294ac:	2000      	movs	r0, #0
   294ae:	4b0c      	ldr	r3, [pc, #48]	; (294e0 <system_clock_init+0x274>)
   294b0:	4798      	blx	r3
#endif
}
   294b2:	46c0      	nop			; (mov r8, r8)
   294b4:	46bd      	mov	sp, r7
   294b6:	b026      	add	sp, #152	; 0x98
   294b8:	bd80      	pop	{r7, pc}
   294ba:	46c0      	nop			; (mov r8, r8)
   294bc:	40000800 	.word	0x40000800
   294c0:	00028e2d 	.word	0x00028e2d
   294c4:	00029235 	.word	0x00029235
   294c8:	00028d3d 	.word	0x00028d3d
   294cc:	00028f81 	.word	0x00028f81
   294d0:	00029105 	.word	0x00029105
   294d4:	000295b1 	.word	0x000295b1
   294d8:	00028cf9 	.word	0x00028cf9
   294dc:	000295e1 	.word	0x000295e1
   294e0:	00029705 	.word	0x00029705
   294e4:	00028d27 	.word	0x00028d27
   294e8:	00029839 	.word	0x00029839
   294ec:	0002987d 	.word	0x0002987d
   294f0:	00028dd5 	.word	0x00028dd5
   294f4:	000f4240 	.word	0x000f4240
   294f8:	02dc6c00 	.word	0x02dc6c00
   294fc:	00028ff9 	.word	0x00028ff9
   29500:	000291b1 	.word	0x000291b1
   29504:	00028d61 	.word	0x00028d61
   29508:	00028d81 	.word	0x00028d81

0002950c <system_apb_clock_set_mask>:
{
   2950c:	b580      	push	{r7, lr}
   2950e:	b082      	sub	sp, #8
   29510:	af00      	add	r7, sp, #0
   29512:	0002      	movs	r2, r0
   29514:	6039      	str	r1, [r7, #0]
   29516:	1dfb      	adds	r3, r7, #7
   29518:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2951a:	1dfb      	adds	r3, r7, #7
   2951c:	781b      	ldrb	r3, [r3, #0]
   2951e:	2b01      	cmp	r3, #1
   29520:	d00a      	beq.n	29538 <system_apb_clock_set_mask+0x2c>
   29522:	2b02      	cmp	r3, #2
   29524:	d00f      	beq.n	29546 <system_apb_clock_set_mask+0x3a>
   29526:	2b00      	cmp	r3, #0
   29528:	d114      	bne.n	29554 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2952a:	4b0e      	ldr	r3, [pc, #56]	; (29564 <system_apb_clock_set_mask+0x58>)
   2952c:	4a0d      	ldr	r2, [pc, #52]	; (29564 <system_apb_clock_set_mask+0x58>)
   2952e:	6991      	ldr	r1, [r2, #24]
   29530:	683a      	ldr	r2, [r7, #0]
   29532:	430a      	orrs	r2, r1
   29534:	619a      	str	r2, [r3, #24]
			break;
   29536:	e00f      	b.n	29558 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29538:	4b0a      	ldr	r3, [pc, #40]	; (29564 <system_apb_clock_set_mask+0x58>)
   2953a:	4a0a      	ldr	r2, [pc, #40]	; (29564 <system_apb_clock_set_mask+0x58>)
   2953c:	69d1      	ldr	r1, [r2, #28]
   2953e:	683a      	ldr	r2, [r7, #0]
   29540:	430a      	orrs	r2, r1
   29542:	61da      	str	r2, [r3, #28]
			break;
   29544:	e008      	b.n	29558 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29546:	4b07      	ldr	r3, [pc, #28]	; (29564 <system_apb_clock_set_mask+0x58>)
   29548:	4a06      	ldr	r2, [pc, #24]	; (29564 <system_apb_clock_set_mask+0x58>)
   2954a:	6a11      	ldr	r1, [r2, #32]
   2954c:	683a      	ldr	r2, [r7, #0]
   2954e:	430a      	orrs	r2, r1
   29550:	621a      	str	r2, [r3, #32]
			break;
   29552:	e001      	b.n	29558 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29554:	2317      	movs	r3, #23
   29556:	e000      	b.n	2955a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29558:	2300      	movs	r3, #0
}
   2955a:	0018      	movs	r0, r3
   2955c:	46bd      	mov	sp, r7
   2955e:	b002      	add	sp, #8
   29560:	bd80      	pop	{r7, pc}
   29562:	46c0      	nop			; (mov r8, r8)
   29564:	40000400 	.word	0x40000400

00029568 <system_interrupt_enter_critical_section>:
{
   29568:	b580      	push	{r7, lr}
   2956a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2956c:	4b02      	ldr	r3, [pc, #8]	; (29578 <system_interrupt_enter_critical_section+0x10>)
   2956e:	4798      	blx	r3
}
   29570:	46c0      	nop			; (mov r8, r8)
   29572:	46bd      	mov	sp, r7
   29574:	bd80      	pop	{r7, pc}
   29576:	46c0      	nop			; (mov r8, r8)
   29578:	00025ba5 	.word	0x00025ba5

0002957c <system_interrupt_leave_critical_section>:
{
   2957c:	b580      	push	{r7, lr}
   2957e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29580:	4b02      	ldr	r3, [pc, #8]	; (2958c <system_interrupt_leave_critical_section+0x10>)
   29582:	4798      	blx	r3
}
   29584:	46c0      	nop			; (mov r8, r8)
   29586:	46bd      	mov	sp, r7
   29588:	bd80      	pop	{r7, pc}
   2958a:	46c0      	nop			; (mov r8, r8)
   2958c:	00025bf9 	.word	0x00025bf9

00029590 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29590:	b580      	push	{r7, lr}
   29592:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29594:	4b05      	ldr	r3, [pc, #20]	; (295ac <system_gclk_is_syncing+0x1c>)
   29596:	785b      	ldrb	r3, [r3, #1]
   29598:	b2db      	uxtb	r3, r3
   2959a:	b25b      	sxtb	r3, r3
   2959c:	2b00      	cmp	r3, #0
   2959e:	da01      	bge.n	295a4 <system_gclk_is_syncing+0x14>
		return true;
   295a0:	2301      	movs	r3, #1
   295a2:	e000      	b.n	295a6 <system_gclk_is_syncing+0x16>
	}

	return false;
   295a4:	2300      	movs	r3, #0
}
   295a6:	0018      	movs	r0, r3
   295a8:	46bd      	mov	sp, r7
   295aa:	bd80      	pop	{r7, pc}
   295ac:	40000c00 	.word	0x40000c00

000295b0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   295b0:	b580      	push	{r7, lr}
   295b2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   295b4:	2108      	movs	r1, #8
   295b6:	2000      	movs	r0, #0
   295b8:	4b07      	ldr	r3, [pc, #28]	; (295d8 <system_gclk_init+0x28>)
   295ba:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   295bc:	4b07      	ldr	r3, [pc, #28]	; (295dc <system_gclk_init+0x2c>)
   295be:	2201      	movs	r2, #1
   295c0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   295c2:	46c0      	nop			; (mov r8, r8)
   295c4:	4b05      	ldr	r3, [pc, #20]	; (295dc <system_gclk_init+0x2c>)
   295c6:	781b      	ldrb	r3, [r3, #0]
   295c8:	b2db      	uxtb	r3, r3
   295ca:	001a      	movs	r2, r3
   295cc:	2301      	movs	r3, #1
   295ce:	4013      	ands	r3, r2
   295d0:	d1f8      	bne.n	295c4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   295d2:	46c0      	nop			; (mov r8, r8)
   295d4:	46bd      	mov	sp, r7
   295d6:	bd80      	pop	{r7, pc}
   295d8:	0002950d 	.word	0x0002950d
   295dc:	40000c00 	.word	0x40000c00

000295e0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   295e0:	b580      	push	{r7, lr}
   295e2:	b086      	sub	sp, #24
   295e4:	af00      	add	r7, sp, #0
   295e6:	0002      	movs	r2, r0
   295e8:	6039      	str	r1, [r7, #0]
   295ea:	1dfb      	adds	r3, r7, #7
   295ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   295ee:	1dfb      	adds	r3, r7, #7
   295f0:	781b      	ldrb	r3, [r3, #0]
   295f2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   295f4:	1dfb      	adds	r3, r7, #7
   295f6:	781b      	ldrb	r3, [r3, #0]
   295f8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   295fa:	683b      	ldr	r3, [r7, #0]
   295fc:	781b      	ldrb	r3, [r3, #0]
   295fe:	021b      	lsls	r3, r3, #8
   29600:	001a      	movs	r2, r3
   29602:	697b      	ldr	r3, [r7, #20]
   29604:	4313      	orrs	r3, r2
   29606:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29608:	683b      	ldr	r3, [r7, #0]
   2960a:	785b      	ldrb	r3, [r3, #1]
   2960c:	2b00      	cmp	r3, #0
   2960e:	d004      	beq.n	2961a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29610:	697b      	ldr	r3, [r7, #20]
   29612:	2280      	movs	r2, #128	; 0x80
   29614:	02d2      	lsls	r2, r2, #11
   29616:	4313      	orrs	r3, r2
   29618:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2961a:	683b      	ldr	r3, [r7, #0]
   2961c:	7a5b      	ldrb	r3, [r3, #9]
   2961e:	2b00      	cmp	r3, #0
   29620:	d004      	beq.n	2962c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29622:	697b      	ldr	r3, [r7, #20]
   29624:	2280      	movs	r2, #128	; 0x80
   29626:	0312      	lsls	r2, r2, #12
   29628:	4313      	orrs	r3, r2
   2962a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2962c:	683b      	ldr	r3, [r7, #0]
   2962e:	685b      	ldr	r3, [r3, #4]
   29630:	2b01      	cmp	r3, #1
   29632:	d92c      	bls.n	2968e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29634:	683b      	ldr	r3, [r7, #0]
   29636:	685a      	ldr	r2, [r3, #4]
   29638:	683b      	ldr	r3, [r7, #0]
   2963a:	685b      	ldr	r3, [r3, #4]
   2963c:	3b01      	subs	r3, #1
   2963e:	4013      	ands	r3, r2
   29640:	d11a      	bne.n	29678 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29642:	2300      	movs	r3, #0
   29644:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29646:	2302      	movs	r3, #2
   29648:	60bb      	str	r3, [r7, #8]
   2964a:	e005      	b.n	29658 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2964c:	68fb      	ldr	r3, [r7, #12]
   2964e:	3301      	adds	r3, #1
   29650:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29652:	68bb      	ldr	r3, [r7, #8]
   29654:	005b      	lsls	r3, r3, #1
   29656:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29658:	683b      	ldr	r3, [r7, #0]
   2965a:	685a      	ldr	r2, [r3, #4]
   2965c:	68bb      	ldr	r3, [r7, #8]
   2965e:	429a      	cmp	r2, r3
   29660:	d8f4      	bhi.n	2964c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29662:	68fb      	ldr	r3, [r7, #12]
   29664:	021b      	lsls	r3, r3, #8
   29666:	693a      	ldr	r2, [r7, #16]
   29668:	4313      	orrs	r3, r2
   2966a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2966c:	697b      	ldr	r3, [r7, #20]
   2966e:	2280      	movs	r2, #128	; 0x80
   29670:	0352      	lsls	r2, r2, #13
   29672:	4313      	orrs	r3, r2
   29674:	617b      	str	r3, [r7, #20]
   29676:	e00a      	b.n	2968e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   29678:	683b      	ldr	r3, [r7, #0]
   2967a:	685b      	ldr	r3, [r3, #4]
   2967c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2967e:	693a      	ldr	r2, [r7, #16]
   29680:	4313      	orrs	r3, r2
   29682:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29684:	697b      	ldr	r3, [r7, #20]
   29686:	2280      	movs	r2, #128	; 0x80
   29688:	0292      	lsls	r2, r2, #10
   2968a:	4313      	orrs	r3, r2
   2968c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2968e:	683b      	ldr	r3, [r7, #0]
   29690:	7a1b      	ldrb	r3, [r3, #8]
   29692:	2b00      	cmp	r3, #0
   29694:	d004      	beq.n	296a0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29696:	697b      	ldr	r3, [r7, #20]
   29698:	2280      	movs	r2, #128	; 0x80
   2969a:	0392      	lsls	r2, r2, #14
   2969c:	4313      	orrs	r3, r2
   2969e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   296a0:	46c0      	nop			; (mov r8, r8)
   296a2:	4b13      	ldr	r3, [pc, #76]	; (296f0 <system_gclk_gen_set_config+0x110>)
   296a4:	4798      	blx	r3
   296a6:	1e03      	subs	r3, r0, #0
   296a8:	d1fb      	bne.n	296a2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   296aa:	4b12      	ldr	r3, [pc, #72]	; (296f4 <system_gclk_gen_set_config+0x114>)
   296ac:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   296ae:	4a12      	ldr	r2, [pc, #72]	; (296f8 <system_gclk_gen_set_config+0x118>)
   296b0:	1dfb      	adds	r3, r7, #7
   296b2:	781b      	ldrb	r3, [r3, #0]
   296b4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   296b6:	46c0      	nop			; (mov r8, r8)
   296b8:	4b0d      	ldr	r3, [pc, #52]	; (296f0 <system_gclk_gen_set_config+0x110>)
   296ba:	4798      	blx	r3
   296bc:	1e03      	subs	r3, r0, #0
   296be:	d1fb      	bne.n	296b8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   296c0:	4b0e      	ldr	r3, [pc, #56]	; (296fc <system_gclk_gen_set_config+0x11c>)
   296c2:	693a      	ldr	r2, [r7, #16]
   296c4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   296c6:	46c0      	nop			; (mov r8, r8)
   296c8:	4b09      	ldr	r3, [pc, #36]	; (296f0 <system_gclk_gen_set_config+0x110>)
   296ca:	4798      	blx	r3
   296cc:	1e03      	subs	r3, r0, #0
   296ce:	d1fb      	bne.n	296c8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   296d0:	4b0a      	ldr	r3, [pc, #40]	; (296fc <system_gclk_gen_set_config+0x11c>)
   296d2:	4a0a      	ldr	r2, [pc, #40]	; (296fc <system_gclk_gen_set_config+0x11c>)
   296d4:	6851      	ldr	r1, [r2, #4]
   296d6:	2280      	movs	r2, #128	; 0x80
   296d8:	0252      	lsls	r2, r2, #9
   296da:	4011      	ands	r1, r2
   296dc:	697a      	ldr	r2, [r7, #20]
   296de:	430a      	orrs	r2, r1
   296e0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   296e2:	4b07      	ldr	r3, [pc, #28]	; (29700 <system_gclk_gen_set_config+0x120>)
   296e4:	4798      	blx	r3
}
   296e6:	46c0      	nop			; (mov r8, r8)
   296e8:	46bd      	mov	sp, r7
   296ea:	b006      	add	sp, #24
   296ec:	bd80      	pop	{r7, pc}
   296ee:	46c0      	nop			; (mov r8, r8)
   296f0:	00029591 	.word	0x00029591
   296f4:	00029569 	.word	0x00029569
   296f8:	40000c08 	.word	0x40000c08
   296fc:	40000c00 	.word	0x40000c00
   29700:	0002957d 	.word	0x0002957d

00029704 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29704:	b580      	push	{r7, lr}
   29706:	b082      	sub	sp, #8
   29708:	af00      	add	r7, sp, #0
   2970a:	0002      	movs	r2, r0
   2970c:	1dfb      	adds	r3, r7, #7
   2970e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29710:	46c0      	nop			; (mov r8, r8)
   29712:	4b0e      	ldr	r3, [pc, #56]	; (2974c <system_gclk_gen_enable+0x48>)
   29714:	4798      	blx	r3
   29716:	1e03      	subs	r3, r0, #0
   29718:	d1fb      	bne.n	29712 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2971a:	4b0d      	ldr	r3, [pc, #52]	; (29750 <system_gclk_gen_enable+0x4c>)
   2971c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2971e:	4a0d      	ldr	r2, [pc, #52]	; (29754 <system_gclk_gen_enable+0x50>)
   29720:	1dfb      	adds	r3, r7, #7
   29722:	781b      	ldrb	r3, [r3, #0]
   29724:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29726:	46c0      	nop			; (mov r8, r8)
   29728:	4b08      	ldr	r3, [pc, #32]	; (2974c <system_gclk_gen_enable+0x48>)
   2972a:	4798      	blx	r3
   2972c:	1e03      	subs	r3, r0, #0
   2972e:	d1fb      	bne.n	29728 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29730:	4b09      	ldr	r3, [pc, #36]	; (29758 <system_gclk_gen_enable+0x54>)
   29732:	4a09      	ldr	r2, [pc, #36]	; (29758 <system_gclk_gen_enable+0x54>)
   29734:	6852      	ldr	r2, [r2, #4]
   29736:	2180      	movs	r1, #128	; 0x80
   29738:	0249      	lsls	r1, r1, #9
   2973a:	430a      	orrs	r2, r1
   2973c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2973e:	4b07      	ldr	r3, [pc, #28]	; (2975c <system_gclk_gen_enable+0x58>)
   29740:	4798      	blx	r3
}
   29742:	46c0      	nop			; (mov r8, r8)
   29744:	46bd      	mov	sp, r7
   29746:	b002      	add	sp, #8
   29748:	bd80      	pop	{r7, pc}
   2974a:	46c0      	nop			; (mov r8, r8)
   2974c:	00029591 	.word	0x00029591
   29750:	00029569 	.word	0x00029569
   29754:	40000c04 	.word	0x40000c04
   29758:	40000c00 	.word	0x40000c00
   2975c:	0002957d 	.word	0x0002957d

00029760 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   29760:	b580      	push	{r7, lr}
   29762:	b086      	sub	sp, #24
   29764:	af00      	add	r7, sp, #0
   29766:	0002      	movs	r2, r0
   29768:	1dfb      	adds	r3, r7, #7
   2976a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2976c:	46c0      	nop			; (mov r8, r8)
   2976e:	4b2a      	ldr	r3, [pc, #168]	; (29818 <system_gclk_gen_get_hz+0xb8>)
   29770:	4798      	blx	r3
   29772:	1e03      	subs	r3, r0, #0
   29774:	d1fb      	bne.n	2976e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29776:	4b29      	ldr	r3, [pc, #164]	; (2981c <system_gclk_gen_get_hz+0xbc>)
   29778:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2977a:	4a29      	ldr	r2, [pc, #164]	; (29820 <system_gclk_gen_get_hz+0xc0>)
   2977c:	1dfb      	adds	r3, r7, #7
   2977e:	781b      	ldrb	r3, [r3, #0]
   29780:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29782:	46c0      	nop			; (mov r8, r8)
   29784:	4b24      	ldr	r3, [pc, #144]	; (29818 <system_gclk_gen_get_hz+0xb8>)
   29786:	4798      	blx	r3
   29788:	1e03      	subs	r3, r0, #0
   2978a:	d1fb      	bne.n	29784 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2978c:	4b25      	ldr	r3, [pc, #148]	; (29824 <system_gclk_gen_get_hz+0xc4>)
   2978e:	685b      	ldr	r3, [r3, #4]
   29790:	04db      	lsls	r3, r3, #19
   29792:	0edb      	lsrs	r3, r3, #27
   29794:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29796:	0018      	movs	r0, r3
   29798:	4b23      	ldr	r3, [pc, #140]	; (29828 <system_gclk_gen_get_hz+0xc8>)
   2979a:	4798      	blx	r3
   2979c:	0003      	movs	r3, r0
   2979e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   297a0:	4a1f      	ldr	r2, [pc, #124]	; (29820 <system_gclk_gen_get_hz+0xc0>)
   297a2:	1dfb      	adds	r3, r7, #7
   297a4:	781b      	ldrb	r3, [r3, #0]
   297a6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   297a8:	4b1e      	ldr	r3, [pc, #120]	; (29824 <system_gclk_gen_get_hz+0xc4>)
   297aa:	685b      	ldr	r3, [r3, #4]
   297ac:	02db      	lsls	r3, r3, #11
   297ae:	0fdb      	lsrs	r3, r3, #31
   297b0:	b2da      	uxtb	r2, r3
   297b2:	2313      	movs	r3, #19
   297b4:	18fb      	adds	r3, r7, r3
   297b6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   297b8:	4a1c      	ldr	r2, [pc, #112]	; (2982c <system_gclk_gen_get_hz+0xcc>)
   297ba:	1dfb      	adds	r3, r7, #7
   297bc:	781b      	ldrb	r3, [r3, #0]
   297be:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   297c0:	46c0      	nop			; (mov r8, r8)
   297c2:	4b15      	ldr	r3, [pc, #84]	; (29818 <system_gclk_gen_get_hz+0xb8>)
   297c4:	4798      	blx	r3
   297c6:	1e03      	subs	r3, r0, #0
   297c8:	d1fb      	bne.n	297c2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   297ca:	4b16      	ldr	r3, [pc, #88]	; (29824 <system_gclk_gen_get_hz+0xc4>)
   297cc:	689b      	ldr	r3, [r3, #8]
   297ce:	021b      	lsls	r3, r3, #8
   297d0:	0c1b      	lsrs	r3, r3, #16
   297d2:	b29b      	uxth	r3, r3
   297d4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   297d6:	4b16      	ldr	r3, [pc, #88]	; (29830 <system_gclk_gen_get_hz+0xd0>)
   297d8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   297da:	2313      	movs	r3, #19
   297dc:	18fb      	adds	r3, r7, r3
   297de:	781b      	ldrb	r3, [r3, #0]
   297e0:	2b00      	cmp	r3, #0
   297e2:	d109      	bne.n	297f8 <system_gclk_gen_get_hz+0x98>
   297e4:	68fb      	ldr	r3, [r7, #12]
   297e6:	2b01      	cmp	r3, #1
   297e8:	d906      	bls.n	297f8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   297ea:	4b12      	ldr	r3, [pc, #72]	; (29834 <system_gclk_gen_get_hz+0xd4>)
   297ec:	68f9      	ldr	r1, [r7, #12]
   297ee:	6978      	ldr	r0, [r7, #20]
   297f0:	4798      	blx	r3
   297f2:	0003      	movs	r3, r0
   297f4:	617b      	str	r3, [r7, #20]
   297f6:	e00a      	b.n	2980e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   297f8:	2313      	movs	r3, #19
   297fa:	18fb      	adds	r3, r7, r3
   297fc:	781b      	ldrb	r3, [r3, #0]
   297fe:	2b00      	cmp	r3, #0
   29800:	d005      	beq.n	2980e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29802:	68fb      	ldr	r3, [r7, #12]
   29804:	3301      	adds	r3, #1
   29806:	697a      	ldr	r2, [r7, #20]
   29808:	40da      	lsrs	r2, r3
   2980a:	0013      	movs	r3, r2
   2980c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2980e:	697b      	ldr	r3, [r7, #20]
}
   29810:	0018      	movs	r0, r3
   29812:	46bd      	mov	sp, r7
   29814:	b006      	add	sp, #24
   29816:	bd80      	pop	{r7, pc}
   29818:	00029591 	.word	0x00029591
   2981c:	00029569 	.word	0x00029569
   29820:	40000c04 	.word	0x40000c04
   29824:	40000c00 	.word	0x40000c00
   29828:	00028ec1 	.word	0x00028ec1
   2982c:	40000c08 	.word	0x40000c08
   29830:	0002957d 	.word	0x0002957d
   29834:	00032389 	.word	0x00032389

00029838 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29838:	b580      	push	{r7, lr}
   2983a:	b084      	sub	sp, #16
   2983c:	af00      	add	r7, sp, #0
   2983e:	0002      	movs	r2, r0
   29840:	6039      	str	r1, [r7, #0]
   29842:	1dfb      	adds	r3, r7, #7
   29844:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29846:	1dfb      	adds	r3, r7, #7
   29848:	781b      	ldrb	r3, [r3, #0]
   2984a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2984c:	683b      	ldr	r3, [r7, #0]
   2984e:	781b      	ldrb	r3, [r3, #0]
   29850:	021b      	lsls	r3, r3, #8
   29852:	001a      	movs	r2, r3
   29854:	68fb      	ldr	r3, [r7, #12]
   29856:	4313      	orrs	r3, r2
   29858:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2985a:	1dfb      	adds	r3, r7, #7
   2985c:	781b      	ldrb	r3, [r3, #0]
   2985e:	0018      	movs	r0, r3
   29860:	4b04      	ldr	r3, [pc, #16]	; (29874 <system_gclk_chan_set_config+0x3c>)
   29862:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29864:	4b04      	ldr	r3, [pc, #16]	; (29878 <system_gclk_chan_set_config+0x40>)
   29866:	68fa      	ldr	r2, [r7, #12]
   29868:	b292      	uxth	r2, r2
   2986a:	805a      	strh	r2, [r3, #2]
}
   2986c:	46c0      	nop			; (mov r8, r8)
   2986e:	46bd      	mov	sp, r7
   29870:	b004      	add	sp, #16
   29872:	bd80      	pop	{r7, pc}
   29874:	000298c5 	.word	0x000298c5
   29878:	40000c00 	.word	0x40000c00

0002987c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2987c:	b580      	push	{r7, lr}
   2987e:	b082      	sub	sp, #8
   29880:	af00      	add	r7, sp, #0
   29882:	0002      	movs	r2, r0
   29884:	1dfb      	adds	r3, r7, #7
   29886:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29888:	4b0a      	ldr	r3, [pc, #40]	; (298b4 <system_gclk_chan_enable+0x38>)
   2988a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2988c:	4a0a      	ldr	r2, [pc, #40]	; (298b8 <system_gclk_chan_enable+0x3c>)
   2988e:	1dfb      	adds	r3, r7, #7
   29890:	781b      	ldrb	r3, [r3, #0]
   29892:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29894:	4909      	ldr	r1, [pc, #36]	; (298bc <system_gclk_chan_enable+0x40>)
   29896:	4b09      	ldr	r3, [pc, #36]	; (298bc <system_gclk_chan_enable+0x40>)
   29898:	885b      	ldrh	r3, [r3, #2]
   2989a:	b29b      	uxth	r3, r3
   2989c:	2280      	movs	r2, #128	; 0x80
   2989e:	01d2      	lsls	r2, r2, #7
   298a0:	4313      	orrs	r3, r2
   298a2:	b29b      	uxth	r3, r3
   298a4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   298a6:	4b06      	ldr	r3, [pc, #24]	; (298c0 <system_gclk_chan_enable+0x44>)
   298a8:	4798      	blx	r3
}
   298aa:	46c0      	nop			; (mov r8, r8)
   298ac:	46bd      	mov	sp, r7
   298ae:	b002      	add	sp, #8
   298b0:	bd80      	pop	{r7, pc}
   298b2:	46c0      	nop			; (mov r8, r8)
   298b4:	00029569 	.word	0x00029569
   298b8:	40000c02 	.word	0x40000c02
   298bc:	40000c00 	.word	0x40000c00
   298c0:	0002957d 	.word	0x0002957d

000298c4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   298c4:	b580      	push	{r7, lr}
   298c6:	b084      	sub	sp, #16
   298c8:	af00      	add	r7, sp, #0
   298ca:	0002      	movs	r2, r0
   298cc:	1dfb      	adds	r3, r7, #7
   298ce:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   298d0:	4b1c      	ldr	r3, [pc, #112]	; (29944 <system_gclk_chan_disable+0x80>)
   298d2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   298d4:	4a1c      	ldr	r2, [pc, #112]	; (29948 <system_gclk_chan_disable+0x84>)
   298d6:	1dfb      	adds	r3, r7, #7
   298d8:	781b      	ldrb	r3, [r3, #0]
   298da:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   298dc:	4b1b      	ldr	r3, [pc, #108]	; (2994c <system_gclk_chan_disable+0x88>)
   298de:	885b      	ldrh	r3, [r3, #2]
   298e0:	051b      	lsls	r3, r3, #20
   298e2:	0f1b      	lsrs	r3, r3, #28
   298e4:	b2db      	uxtb	r3, r3
   298e6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   298e8:	4a18      	ldr	r2, [pc, #96]	; (2994c <system_gclk_chan_disable+0x88>)
   298ea:	8853      	ldrh	r3, [r2, #2]
   298ec:	4918      	ldr	r1, [pc, #96]	; (29950 <system_gclk_chan_disable+0x8c>)
   298ee:	400b      	ands	r3, r1
   298f0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   298f2:	4a16      	ldr	r2, [pc, #88]	; (2994c <system_gclk_chan_disable+0x88>)
   298f4:	4b15      	ldr	r3, [pc, #84]	; (2994c <system_gclk_chan_disable+0x88>)
   298f6:	885b      	ldrh	r3, [r3, #2]
   298f8:	b29b      	uxth	r3, r3
   298fa:	4916      	ldr	r1, [pc, #88]	; (29954 <system_gclk_chan_disable+0x90>)
   298fc:	400b      	ands	r3, r1
   298fe:	b29b      	uxth	r3, r3
   29900:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29902:	46c0      	nop			; (mov r8, r8)
   29904:	4b11      	ldr	r3, [pc, #68]	; (2994c <system_gclk_chan_disable+0x88>)
   29906:	885b      	ldrh	r3, [r3, #2]
   29908:	b29b      	uxth	r3, r3
   2990a:	001a      	movs	r2, r3
   2990c:	2380      	movs	r3, #128	; 0x80
   2990e:	01db      	lsls	r3, r3, #7
   29910:	4013      	ands	r3, r2
   29912:	d1f7      	bne.n	29904 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29914:	4a0d      	ldr	r2, [pc, #52]	; (2994c <system_gclk_chan_disable+0x88>)
   29916:	68fb      	ldr	r3, [r7, #12]
   29918:	b2db      	uxtb	r3, r3
   2991a:	1c19      	adds	r1, r3, #0
   2991c:	230f      	movs	r3, #15
   2991e:	400b      	ands	r3, r1
   29920:	b2d9      	uxtb	r1, r3
   29922:	8853      	ldrh	r3, [r2, #2]
   29924:	1c08      	adds	r0, r1, #0
   29926:	210f      	movs	r1, #15
   29928:	4001      	ands	r1, r0
   2992a:	0208      	lsls	r0, r1, #8
   2992c:	4908      	ldr	r1, [pc, #32]	; (29950 <system_gclk_chan_disable+0x8c>)
   2992e:	400b      	ands	r3, r1
   29930:	1c19      	adds	r1, r3, #0
   29932:	1c03      	adds	r3, r0, #0
   29934:	430b      	orrs	r3, r1
   29936:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29938:	4b07      	ldr	r3, [pc, #28]	; (29958 <system_gclk_chan_disable+0x94>)
   2993a:	4798      	blx	r3
}
   2993c:	46c0      	nop			; (mov r8, r8)
   2993e:	46bd      	mov	sp, r7
   29940:	b004      	add	sp, #16
   29942:	bd80      	pop	{r7, pc}
   29944:	00029569 	.word	0x00029569
   29948:	40000c02 	.word	0x40000c02
   2994c:	40000c00 	.word	0x40000c00
   29950:	fffff0ff 	.word	0xfffff0ff
   29954:	ffffbfff 	.word	0xffffbfff
   29958:	0002957d 	.word	0x0002957d

0002995c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2995c:	b580      	push	{r7, lr}
   2995e:	b084      	sub	sp, #16
   29960:	af00      	add	r7, sp, #0
   29962:	0002      	movs	r2, r0
   29964:	1dfb      	adds	r3, r7, #7
   29966:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   29968:	4b0d      	ldr	r3, [pc, #52]	; (299a0 <system_gclk_chan_get_hz+0x44>)
   2996a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2996c:	4a0d      	ldr	r2, [pc, #52]	; (299a4 <system_gclk_chan_get_hz+0x48>)
   2996e:	1dfb      	adds	r3, r7, #7
   29970:	781b      	ldrb	r3, [r3, #0]
   29972:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29974:	4b0c      	ldr	r3, [pc, #48]	; (299a8 <system_gclk_chan_get_hz+0x4c>)
   29976:	885b      	ldrh	r3, [r3, #2]
   29978:	051b      	lsls	r3, r3, #20
   2997a:	0f1b      	lsrs	r3, r3, #28
   2997c:	b2da      	uxtb	r2, r3
   2997e:	230f      	movs	r3, #15
   29980:	18fb      	adds	r3, r7, r3
   29982:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29984:	4b09      	ldr	r3, [pc, #36]	; (299ac <system_gclk_chan_get_hz+0x50>)
   29986:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   29988:	230f      	movs	r3, #15
   2998a:	18fb      	adds	r3, r7, r3
   2998c:	781b      	ldrb	r3, [r3, #0]
   2998e:	0018      	movs	r0, r3
   29990:	4b07      	ldr	r3, [pc, #28]	; (299b0 <system_gclk_chan_get_hz+0x54>)
   29992:	4798      	blx	r3
   29994:	0003      	movs	r3, r0
}
   29996:	0018      	movs	r0, r3
   29998:	46bd      	mov	sp, r7
   2999a:	b004      	add	sp, #16
   2999c:	bd80      	pop	{r7, pc}
   2999e:	46c0      	nop			; (mov r8, r8)
   299a0:	00029569 	.word	0x00029569
   299a4:	40000c02 	.word	0x40000c02
   299a8:	40000c00 	.word	0x40000c00
   299ac:	0002957d 	.word	0x0002957d
   299b0:	00029761 	.word	0x00029761

000299b4 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   299b4:	b580      	push	{r7, lr}
   299b6:	b084      	sub	sp, #16
   299b8:	af00      	add	r7, sp, #0
   299ba:	0002      	movs	r2, r0
   299bc:	1dfb      	adds	r3, r7, #7
   299be:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   299c0:	230f      	movs	r3, #15
   299c2:	18fb      	adds	r3, r7, r3
   299c4:	2200      	movs	r2, #0
   299c6:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   299c8:	1dfb      	adds	r3, r7, #7
   299ca:	781b      	ldrb	r3, [r3, #0]
   299cc:	2b7f      	cmp	r3, #127	; 0x7f
   299ce:	d80b      	bhi.n	299e8 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   299d0:	4a13      	ldr	r2, [pc, #76]	; (29a20 <system_interrupt_clear_pending+0x6c>)
   299d2:	1dfb      	adds	r3, r7, #7
   299d4:	781b      	ldrb	r3, [r3, #0]
   299d6:	b25b      	sxtb	r3, r3
   299d8:	2101      	movs	r1, #1
   299da:	4099      	lsls	r1, r3
   299dc:	000b      	movs	r3, r1
   299de:	0019      	movs	r1, r3
   299e0:	23c0      	movs	r3, #192	; 0xc0
   299e2:	005b      	lsls	r3, r3, #1
   299e4:	50d1      	str	r1, [r2, r3]
   299e6:	e014      	b.n	29a12 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   299e8:	1dfb      	adds	r3, r7, #7
   299ea:	781b      	ldrb	r3, [r3, #0]
   299ec:	b25b      	sxtb	r3, r3
   299ee:	330e      	adds	r3, #14
   299f0:	d101      	bne.n	299f6 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   299f2:	2317      	movs	r3, #23
   299f4:	e010      	b.n	29a18 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   299f6:	1dfb      	adds	r3, r7, #7
   299f8:	781b      	ldrb	r3, [r3, #0]
   299fa:	b25b      	sxtb	r3, r3
   299fc:	3301      	adds	r3, #1
   299fe:	d104      	bne.n	29a0a <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29a00:	4b08      	ldr	r3, [pc, #32]	; (29a24 <system_interrupt_clear_pending+0x70>)
   29a02:	2280      	movs	r2, #128	; 0x80
   29a04:	0492      	lsls	r2, r2, #18
   29a06:	605a      	str	r2, [r3, #4]
   29a08:	e003      	b.n	29a12 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   29a0a:	230f      	movs	r3, #15
   29a0c:	18fb      	adds	r3, r7, r3
   29a0e:	2217      	movs	r2, #23
   29a10:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29a12:	230f      	movs	r3, #15
   29a14:	18fb      	adds	r3, r7, r3
   29a16:	781b      	ldrb	r3, [r3, #0]
}
   29a18:	0018      	movs	r0, r3
   29a1a:	46bd      	mov	sp, r7
   29a1c:	b004      	add	sp, #16
   29a1e:	bd80      	pop	{r7, pc}
   29a20:	e000e100 	.word	0xe000e100
   29a24:	e000ed00 	.word	0xe000ed00

00029a28 <system_pinmux_get_group_from_gpio_pin>:
{
   29a28:	b580      	push	{r7, lr}
   29a2a:	b084      	sub	sp, #16
   29a2c:	af00      	add	r7, sp, #0
   29a2e:	0002      	movs	r2, r0
   29a30:	1dfb      	adds	r3, r7, #7
   29a32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29a34:	230f      	movs	r3, #15
   29a36:	18fb      	adds	r3, r7, r3
   29a38:	1dfa      	adds	r2, r7, #7
   29a3a:	7812      	ldrb	r2, [r2, #0]
   29a3c:	09d2      	lsrs	r2, r2, #7
   29a3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29a40:	230e      	movs	r3, #14
   29a42:	18fb      	adds	r3, r7, r3
   29a44:	1dfa      	adds	r2, r7, #7
   29a46:	7812      	ldrb	r2, [r2, #0]
   29a48:	0952      	lsrs	r2, r2, #5
   29a4a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29a4c:	4b0d      	ldr	r3, [pc, #52]	; (29a84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29a4e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29a50:	230f      	movs	r3, #15
   29a52:	18fb      	adds	r3, r7, r3
   29a54:	781b      	ldrb	r3, [r3, #0]
   29a56:	2b00      	cmp	r3, #0
   29a58:	d10f      	bne.n	29a7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29a5a:	230f      	movs	r3, #15
   29a5c:	18fb      	adds	r3, r7, r3
   29a5e:	781b      	ldrb	r3, [r3, #0]
   29a60:	009b      	lsls	r3, r3, #2
   29a62:	2210      	movs	r2, #16
   29a64:	4694      	mov	ip, r2
   29a66:	44bc      	add	ip, r7
   29a68:	4463      	add	r3, ip
   29a6a:	3b08      	subs	r3, #8
   29a6c:	681a      	ldr	r2, [r3, #0]
   29a6e:	230e      	movs	r3, #14
   29a70:	18fb      	adds	r3, r7, r3
   29a72:	781b      	ldrb	r3, [r3, #0]
   29a74:	01db      	lsls	r3, r3, #7
   29a76:	18d3      	adds	r3, r2, r3
   29a78:	e000      	b.n	29a7c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29a7a:	2300      	movs	r3, #0
}
   29a7c:	0018      	movs	r0, r3
   29a7e:	46bd      	mov	sp, r7
   29a80:	b004      	add	sp, #16
   29a82:	bd80      	pop	{r7, pc}
   29a84:	41004400 	.word	0x41004400

00029a88 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29a88:	b580      	push	{r7, lr}
   29a8a:	b088      	sub	sp, #32
   29a8c:	af00      	add	r7, sp, #0
   29a8e:	60f8      	str	r0, [r7, #12]
   29a90:	60b9      	str	r1, [r7, #8]
   29a92:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29a94:	2300      	movs	r3, #0
   29a96:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29a98:	687b      	ldr	r3, [r7, #4]
   29a9a:	78db      	ldrb	r3, [r3, #3]
   29a9c:	2201      	movs	r2, #1
   29a9e:	4053      	eors	r3, r2
   29aa0:	b2db      	uxtb	r3, r3
   29aa2:	2b00      	cmp	r3, #0
   29aa4:	d035      	beq.n	29b12 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29aa6:	687b      	ldr	r3, [r7, #4]
   29aa8:	781b      	ldrb	r3, [r3, #0]
   29aaa:	2b80      	cmp	r3, #128	; 0x80
   29aac:	d00b      	beq.n	29ac6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29aae:	69fb      	ldr	r3, [r7, #28]
   29ab0:	2280      	movs	r2, #128	; 0x80
   29ab2:	0252      	lsls	r2, r2, #9
   29ab4:	4313      	orrs	r3, r2
   29ab6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29ab8:	687b      	ldr	r3, [r7, #4]
   29aba:	781b      	ldrb	r3, [r3, #0]
   29abc:	061b      	lsls	r3, r3, #24
   29abe:	001a      	movs	r2, r3
   29ac0:	69fb      	ldr	r3, [r7, #28]
   29ac2:	4313      	orrs	r3, r2
   29ac4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29ac6:	687b      	ldr	r3, [r7, #4]
   29ac8:	785b      	ldrb	r3, [r3, #1]
   29aca:	2b00      	cmp	r3, #0
   29acc:	d003      	beq.n	29ad6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29ace:	687b      	ldr	r3, [r7, #4]
   29ad0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29ad2:	2b02      	cmp	r3, #2
   29ad4:	d110      	bne.n	29af8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29ad6:	69fb      	ldr	r3, [r7, #28]
   29ad8:	2280      	movs	r2, #128	; 0x80
   29ada:	0292      	lsls	r2, r2, #10
   29adc:	4313      	orrs	r3, r2
   29ade:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29ae0:	687b      	ldr	r3, [r7, #4]
   29ae2:	789b      	ldrb	r3, [r3, #2]
   29ae4:	2b00      	cmp	r3, #0
   29ae6:	d004      	beq.n	29af2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   29ae8:	69fb      	ldr	r3, [r7, #28]
   29aea:	2280      	movs	r2, #128	; 0x80
   29aec:	02d2      	lsls	r2, r2, #11
   29aee:	4313      	orrs	r3, r2
   29af0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29af2:	68fb      	ldr	r3, [r7, #12]
   29af4:	68ba      	ldr	r2, [r7, #8]
   29af6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29af8:	687b      	ldr	r3, [r7, #4]
   29afa:	785b      	ldrb	r3, [r3, #1]
   29afc:	2b01      	cmp	r3, #1
   29afe:	d003      	beq.n	29b08 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29b00:	687b      	ldr	r3, [r7, #4]
   29b02:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29b04:	2b02      	cmp	r3, #2
   29b06:	d107      	bne.n	29b18 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29b08:	69fb      	ldr	r3, [r7, #28]
   29b0a:	4a22      	ldr	r2, [pc, #136]	; (29b94 <_system_pinmux_config+0x10c>)
   29b0c:	4013      	ands	r3, r2
   29b0e:	61fb      	str	r3, [r7, #28]
   29b10:	e002      	b.n	29b18 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29b12:	68fb      	ldr	r3, [r7, #12]
   29b14:	68ba      	ldr	r2, [r7, #8]
   29b16:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29b18:	68bb      	ldr	r3, [r7, #8]
   29b1a:	041b      	lsls	r3, r3, #16
   29b1c:	0c1b      	lsrs	r3, r3, #16
   29b1e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29b20:	68bb      	ldr	r3, [r7, #8]
   29b22:	0c1b      	lsrs	r3, r3, #16
   29b24:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b26:	69ba      	ldr	r2, [r7, #24]
   29b28:	69fb      	ldr	r3, [r7, #28]
   29b2a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29b2c:	22a0      	movs	r2, #160	; 0xa0
   29b2e:	05d2      	lsls	r2, r2, #23
   29b30:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b32:	68fb      	ldr	r3, [r7, #12]
   29b34:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b36:	697a      	ldr	r2, [r7, #20]
   29b38:	69fb      	ldr	r3, [r7, #28]
   29b3a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29b3c:	22d0      	movs	r2, #208	; 0xd0
   29b3e:	0612      	lsls	r2, r2, #24
   29b40:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b42:	68fb      	ldr	r3, [r7, #12]
   29b44:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29b46:	687b      	ldr	r3, [r7, #4]
   29b48:	78db      	ldrb	r3, [r3, #3]
   29b4a:	2201      	movs	r2, #1
   29b4c:	4053      	eors	r3, r2
   29b4e:	b2db      	uxtb	r3, r3
   29b50:	2b00      	cmp	r3, #0
   29b52:	d01a      	beq.n	29b8a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29b54:	69fa      	ldr	r2, [r7, #28]
   29b56:	2380      	movs	r3, #128	; 0x80
   29b58:	02db      	lsls	r3, r3, #11
   29b5a:	4013      	ands	r3, r2
   29b5c:	d00a      	beq.n	29b74 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29b5e:	687b      	ldr	r3, [r7, #4]
   29b60:	789b      	ldrb	r3, [r3, #2]
   29b62:	2b01      	cmp	r3, #1
   29b64:	d103      	bne.n	29b6e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   29b66:	68fb      	ldr	r3, [r7, #12]
   29b68:	68ba      	ldr	r2, [r7, #8]
   29b6a:	619a      	str	r2, [r3, #24]
   29b6c:	e002      	b.n	29b74 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29b6e:	68fb      	ldr	r3, [r7, #12]
   29b70:	68ba      	ldr	r2, [r7, #8]
   29b72:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29b74:	687b      	ldr	r3, [r7, #4]
   29b76:	785b      	ldrb	r3, [r3, #1]
   29b78:	2b01      	cmp	r3, #1
   29b7a:	d003      	beq.n	29b84 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29b7c:	687b      	ldr	r3, [r7, #4]
   29b7e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29b80:	2b02      	cmp	r3, #2
   29b82:	d102      	bne.n	29b8a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29b84:	68fb      	ldr	r3, [r7, #12]
   29b86:	68ba      	ldr	r2, [r7, #8]
   29b88:	609a      	str	r2, [r3, #8]
		}
	}
}
   29b8a:	46c0      	nop			; (mov r8, r8)
   29b8c:	46bd      	mov	sp, r7
   29b8e:	b008      	add	sp, #32
   29b90:	bd80      	pop	{r7, pc}
   29b92:	46c0      	nop			; (mov r8, r8)
   29b94:	fffbffff 	.word	0xfffbffff

00029b98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   29b98:	b580      	push	{r7, lr}
   29b9a:	b084      	sub	sp, #16
   29b9c:	af00      	add	r7, sp, #0
   29b9e:	0002      	movs	r2, r0
   29ba0:	6039      	str	r1, [r7, #0]
   29ba2:	1dfb      	adds	r3, r7, #7
   29ba4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29ba6:	1dfb      	adds	r3, r7, #7
   29ba8:	781b      	ldrb	r3, [r3, #0]
   29baa:	0018      	movs	r0, r3
   29bac:	4b0a      	ldr	r3, [pc, #40]	; (29bd8 <system_pinmux_pin_set_config+0x40>)
   29bae:	4798      	blx	r3
   29bb0:	0003      	movs	r3, r0
   29bb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29bb4:	1dfb      	adds	r3, r7, #7
   29bb6:	781b      	ldrb	r3, [r3, #0]
   29bb8:	221f      	movs	r2, #31
   29bba:	4013      	ands	r3, r2
   29bbc:	2201      	movs	r2, #1
   29bbe:	409a      	lsls	r2, r3
   29bc0:	0013      	movs	r3, r2
   29bc2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29bc4:	683a      	ldr	r2, [r7, #0]
   29bc6:	68b9      	ldr	r1, [r7, #8]
   29bc8:	68fb      	ldr	r3, [r7, #12]
   29bca:	0018      	movs	r0, r3
   29bcc:	4b03      	ldr	r3, [pc, #12]	; (29bdc <system_pinmux_pin_set_config+0x44>)
   29bce:	4798      	blx	r3
}
   29bd0:	46c0      	nop			; (mov r8, r8)
   29bd2:	46bd      	mov	sp, r7
   29bd4:	b004      	add	sp, #16
   29bd6:	bd80      	pop	{r7, pc}
   29bd8:	00029a29 	.word	0x00029a29
   29bdc:	00029a89 	.word	0x00029a89

00029be0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29be0:	b580      	push	{r7, lr}
   29be2:	af00      	add	r7, sp, #0
	return;
   29be4:	46c0      	nop			; (mov r8, r8)
}
   29be6:	46bd      	mov	sp, r7
   29be8:	bd80      	pop	{r7, pc}
	...

00029bec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29bec:	b580      	push	{r7, lr}
   29bee:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29bf0:	4b06      	ldr	r3, [pc, #24]	; (29c0c <system_init+0x20>)
   29bf2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29bf4:	4b06      	ldr	r3, [pc, #24]	; (29c10 <system_init+0x24>)
   29bf6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   29bf8:	4b06      	ldr	r3, [pc, #24]	; (29c14 <system_init+0x28>)
   29bfa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29bfc:	4b06      	ldr	r3, [pc, #24]	; (29c18 <system_init+0x2c>)
   29bfe:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29c00:	4b06      	ldr	r3, [pc, #24]	; (29c1c <system_init+0x30>)
   29c02:	4798      	blx	r3
}
   29c04:	46c0      	nop			; (mov r8, r8)
   29c06:	46bd      	mov	sp, r7
   29c08:	bd80      	pop	{r7, pc}
   29c0a:	46c0      	nop			; (mov r8, r8)
   29c0c:	0002926d 	.word	0x0002926d
   29c10:	00025d35 	.word	0x00025d35
   29c14:	00012eb1 	.word	0x00012eb1
   29c18:	0002610d 	.word	0x0002610d
   29c1c:	00029be1 	.word	0x00029be1

00029c20 <system_gclk_chan_get_config_defaults>:
{
   29c20:	b580      	push	{r7, lr}
   29c22:	b082      	sub	sp, #8
   29c24:	af00      	add	r7, sp, #0
   29c26:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29c28:	687b      	ldr	r3, [r7, #4]
   29c2a:	2200      	movs	r2, #0
   29c2c:	701a      	strb	r2, [r3, #0]
}
   29c2e:	46c0      	nop			; (mov r8, r8)
   29c30:	46bd      	mov	sp, r7
   29c32:	b002      	add	sp, #8
   29c34:	bd80      	pop	{r7, pc}
	...

00029c38 <system_apb_clock_set_mask>:
{
   29c38:	b580      	push	{r7, lr}
   29c3a:	b082      	sub	sp, #8
   29c3c:	af00      	add	r7, sp, #0
   29c3e:	0002      	movs	r2, r0
   29c40:	6039      	str	r1, [r7, #0]
   29c42:	1dfb      	adds	r3, r7, #7
   29c44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29c46:	1dfb      	adds	r3, r7, #7
   29c48:	781b      	ldrb	r3, [r3, #0]
   29c4a:	2b01      	cmp	r3, #1
   29c4c:	d00a      	beq.n	29c64 <system_apb_clock_set_mask+0x2c>
   29c4e:	2b02      	cmp	r3, #2
   29c50:	d00f      	beq.n	29c72 <system_apb_clock_set_mask+0x3a>
   29c52:	2b00      	cmp	r3, #0
   29c54:	d114      	bne.n	29c80 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29c56:	4b0e      	ldr	r3, [pc, #56]	; (29c90 <system_apb_clock_set_mask+0x58>)
   29c58:	4a0d      	ldr	r2, [pc, #52]	; (29c90 <system_apb_clock_set_mask+0x58>)
   29c5a:	6991      	ldr	r1, [r2, #24]
   29c5c:	683a      	ldr	r2, [r7, #0]
   29c5e:	430a      	orrs	r2, r1
   29c60:	619a      	str	r2, [r3, #24]
			break;
   29c62:	e00f      	b.n	29c84 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29c64:	4b0a      	ldr	r3, [pc, #40]	; (29c90 <system_apb_clock_set_mask+0x58>)
   29c66:	4a0a      	ldr	r2, [pc, #40]	; (29c90 <system_apb_clock_set_mask+0x58>)
   29c68:	69d1      	ldr	r1, [r2, #28]
   29c6a:	683a      	ldr	r2, [r7, #0]
   29c6c:	430a      	orrs	r2, r1
   29c6e:	61da      	str	r2, [r3, #28]
			break;
   29c70:	e008      	b.n	29c84 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29c72:	4b07      	ldr	r3, [pc, #28]	; (29c90 <system_apb_clock_set_mask+0x58>)
   29c74:	4a06      	ldr	r2, [pc, #24]	; (29c90 <system_apb_clock_set_mask+0x58>)
   29c76:	6a11      	ldr	r1, [r2, #32]
   29c78:	683a      	ldr	r2, [r7, #0]
   29c7a:	430a      	orrs	r2, r1
   29c7c:	621a      	str	r2, [r3, #32]
			break;
   29c7e:	e001      	b.n	29c84 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29c80:	2317      	movs	r3, #23
   29c82:	e000      	b.n	29c86 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29c84:	2300      	movs	r3, #0
}
   29c86:	0018      	movs	r0, r3
   29c88:	46bd      	mov	sp, r7
   29c8a:	b002      	add	sp, #8
   29c8c:	bd80      	pop	{r7, pc}
   29c8e:	46c0      	nop			; (mov r8, r8)
   29c90:	40000400 	.word	0x40000400

00029c94 <system_pinmux_get_config_defaults>:
{
   29c94:	b580      	push	{r7, lr}
   29c96:	b082      	sub	sp, #8
   29c98:	af00      	add	r7, sp, #0
   29c9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29c9c:	687b      	ldr	r3, [r7, #4]
   29c9e:	2280      	movs	r2, #128	; 0x80
   29ca0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29ca2:	687b      	ldr	r3, [r7, #4]
   29ca4:	2200      	movs	r2, #0
   29ca6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29ca8:	687b      	ldr	r3, [r7, #4]
   29caa:	2201      	movs	r2, #1
   29cac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29cae:	687b      	ldr	r3, [r7, #4]
   29cb0:	2200      	movs	r2, #0
   29cb2:	70da      	strb	r2, [r3, #3]
}
   29cb4:	46c0      	nop			; (mov r8, r8)
   29cb6:	46bd      	mov	sp, r7
   29cb8:	b002      	add	sp, #8
   29cba:	bd80      	pop	{r7, pc}

00029cbc <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29cbc:	b580      	push	{r7, lr}
   29cbe:	b084      	sub	sp, #16
   29cc0:	af00      	add	r7, sp, #0
   29cc2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29cc4:	2300      	movs	r3, #0
   29cc6:	60fb      	str	r3, [r7, #12]
   29cc8:	e00c      	b.n	29ce4 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   29cca:	4b0a      	ldr	r3, [pc, #40]	; (29cf4 <_tcc_get_inst_index+0x38>)
   29ccc:	68fa      	ldr	r2, [r7, #12]
   29cce:	0092      	lsls	r2, r2, #2
   29cd0:	58d2      	ldr	r2, [r2, r3]
   29cd2:	687b      	ldr	r3, [r7, #4]
   29cd4:	429a      	cmp	r2, r3
   29cd6:	d102      	bne.n	29cde <_tcc_get_inst_index+0x22>
			return i;
   29cd8:	68fb      	ldr	r3, [r7, #12]
   29cda:	b2db      	uxtb	r3, r3
   29cdc:	e006      	b.n	29cec <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29cde:	68fb      	ldr	r3, [r7, #12]
   29ce0:	3301      	adds	r3, #1
   29ce2:	60fb      	str	r3, [r7, #12]
   29ce4:	68fb      	ldr	r3, [r7, #12]
   29ce6:	2b02      	cmp	r3, #2
   29ce8:	d9ef      	bls.n	29cca <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   29cea:	2300      	movs	r3, #0
}
   29cec:	0018      	movs	r0, r3
   29cee:	46bd      	mov	sp, r7
   29cf0:	b004      	add	sp, #16
   29cf2:	bd80      	pop	{r7, pc}
   29cf4:	000389d0 	.word	0x000389d0

00029cf8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   29cf8:	b590      	push	{r4, r7, lr}
   29cfa:	b085      	sub	sp, #20
   29cfc:	af00      	add	r7, sp, #0
   29cfe:	6078      	str	r0, [r7, #4]
   29d00:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29d02:	230f      	movs	r3, #15
   29d04:	18fc      	adds	r4, r7, r3
   29d06:	683b      	ldr	r3, [r7, #0]
   29d08:	0018      	movs	r0, r3
   29d0a:	4bad      	ldr	r3, [pc, #692]	; (29fc0 <tcc_get_config_defaults+0x2c8>)
   29d0c:	4798      	blx	r3
   29d0e:	0003      	movs	r3, r0
   29d10:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29d12:	687b      	ldr	r3, [r7, #4]
   29d14:	2200      	movs	r2, #0
   29d16:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   29d18:	230f      	movs	r3, #15
   29d1a:	18fb      	adds	r3, r7, r3
   29d1c:	781a      	ldrb	r2, [r3, #0]
   29d1e:	4ba9      	ldr	r3, [pc, #676]	; (29fc4 <tcc_get_config_defaults+0x2cc>)
   29d20:	0092      	lsls	r2, r2, #2
   29d22:	58d2      	ldr	r2, [r2, r3]
   29d24:	687b      	ldr	r3, [r7, #4]
   29d26:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   29d28:	687b      	ldr	r3, [r7, #4]
   29d2a:	2200      	movs	r2, #0
   29d2c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   29d2e:	687b      	ldr	r3, [r7, #4]
   29d30:	2200      	movs	r2, #0
   29d32:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29d34:	687b      	ldr	r3, [r7, #4]
   29d36:	2200      	movs	r2, #0
   29d38:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   29d3a:	687b      	ldr	r3, [r7, #4]
   29d3c:	2200      	movs	r2, #0
   29d3e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29d40:	687b      	ldr	r3, [r7, #4]
   29d42:	2200      	movs	r2, #0
   29d44:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29d46:	687b      	ldr	r3, [r7, #4]
   29d48:	2200      	movs	r2, #0
   29d4a:	61da      	str	r2, [r3, #28]
   29d4c:	687b      	ldr	r3, [r7, #4]
   29d4e:	2200      	movs	r2, #0
   29d50:	621a      	str	r2, [r3, #32]
   29d52:	687b      	ldr	r3, [r7, #4]
   29d54:	2200      	movs	r2, #0
   29d56:	625a      	str	r2, [r3, #36]	; 0x24
   29d58:	687b      	ldr	r3, [r7, #4]
   29d5a:	2200      	movs	r2, #0
   29d5c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29d5e:	687b      	ldr	r3, [r7, #4]
   29d60:	2200      	movs	r2, #0
   29d62:	751a      	strb	r2, [r3, #20]
   29d64:	687b      	ldr	r3, [r7, #4]
   29d66:	2200      	movs	r2, #0
   29d68:	755a      	strb	r2, [r3, #21]
   29d6a:	687b      	ldr	r3, [r7, #4]
   29d6c:	2200      	movs	r2, #0
   29d6e:	759a      	strb	r2, [r3, #22]
   29d70:	687b      	ldr	r3, [r7, #4]
   29d72:	2200      	movs	r2, #0
   29d74:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   29d76:	687b      	ldr	r3, [r7, #4]
   29d78:	2200      	movs	r2, #0
   29d7a:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29d7c:	687b      	ldr	r3, [r7, #4]
   29d7e:	2200      	movs	r2, #0
   29d80:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29d82:	687b      	ldr	r3, [r7, #4]
   29d84:	2200      	movs	r2, #0
   29d86:	741a      	strb	r2, [r3, #16]
   29d88:	687b      	ldr	r3, [r7, #4]
   29d8a:	2200      	movs	r2, #0
   29d8c:	745a      	strb	r2, [r3, #17]
   29d8e:	687b      	ldr	r3, [r7, #4]
   29d90:	2200      	movs	r2, #0
   29d92:	749a      	strb	r2, [r3, #18]
   29d94:	687b      	ldr	r3, [r7, #4]
   29d96:	2200      	movs	r2, #0
   29d98:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   29d9a:	687b      	ldr	r3, [r7, #4]
   29d9c:	222c      	movs	r2, #44	; 0x2c
   29d9e:	2100      	movs	r1, #0
   29da0:	5499      	strb	r1, [r3, r2]
   29da2:	687b      	ldr	r3, [r7, #4]
   29da4:	222d      	movs	r2, #45	; 0x2d
   29da6:	2100      	movs	r1, #0
   29da8:	5499      	strb	r1, [r3, r2]
   29daa:	687b      	ldr	r3, [r7, #4]
   29dac:	222e      	movs	r2, #46	; 0x2e
   29dae:	2100      	movs	r1, #0
   29db0:	5499      	strb	r1, [r3, r2]
   29db2:	687b      	ldr	r3, [r7, #4]
   29db4:	222f      	movs	r2, #47	; 0x2f
   29db6:	2100      	movs	r1, #0
   29db8:	5499      	strb	r1, [r3, r2]
   29dba:	687b      	ldr	r3, [r7, #4]
   29dbc:	2230      	movs	r2, #48	; 0x30
   29dbe:	2100      	movs	r1, #0
   29dc0:	5499      	strb	r1, [r3, r2]
   29dc2:	687b      	ldr	r3, [r7, #4]
   29dc4:	2231      	movs	r2, #49	; 0x31
   29dc6:	2100      	movs	r1, #0
   29dc8:	5499      	strb	r1, [r3, r2]
   29dca:	687b      	ldr	r3, [r7, #4]
   29dcc:	2232      	movs	r2, #50	; 0x32
   29dce:	2100      	movs	r1, #0
   29dd0:	5499      	strb	r1, [r3, r2]
   29dd2:	687b      	ldr	r3, [r7, #4]
   29dd4:	2233      	movs	r2, #51	; 0x33
   29dd6:	2100      	movs	r1, #0
   29dd8:	5499      	strb	r1, [r3, r2]
   29dda:	687b      	ldr	r3, [r7, #4]
   29ddc:	2234      	movs	r2, #52	; 0x34
   29dde:	2100      	movs	r1, #0
   29de0:	5499      	strb	r1, [r3, r2]
   29de2:	687b      	ldr	r3, [r7, #4]
   29de4:	2235      	movs	r2, #53	; 0x35
   29de6:	2100      	movs	r1, #0
   29de8:	5499      	strb	r1, [r3, r2]
   29dea:	687b      	ldr	r3, [r7, #4]
   29dec:	2236      	movs	r2, #54	; 0x36
   29dee:	2100      	movs	r1, #0
   29df0:	5499      	strb	r1, [r3, r2]
   29df2:	687b      	ldr	r3, [r7, #4]
   29df4:	2237      	movs	r2, #55	; 0x37
   29df6:	2100      	movs	r1, #0
   29df8:	5499      	strb	r1, [r3, r2]
   29dfa:	687b      	ldr	r3, [r7, #4]
   29dfc:	2238      	movs	r2, #56	; 0x38
   29dfe:	2100      	movs	r1, #0
   29e00:	5499      	strb	r1, [r3, r2]
   29e02:	687b      	ldr	r3, [r7, #4]
   29e04:	2239      	movs	r2, #57	; 0x39
   29e06:	2100      	movs	r1, #0
   29e08:	5499      	strb	r1, [r3, r2]
   29e0a:	687b      	ldr	r3, [r7, #4]
   29e0c:	223a      	movs	r2, #58	; 0x3a
   29e0e:	2100      	movs	r1, #0
   29e10:	5499      	strb	r1, [r3, r2]
   29e12:	687b      	ldr	r3, [r7, #4]
   29e14:	223b      	movs	r2, #59	; 0x3b
   29e16:	2100      	movs	r1, #0
   29e18:	5499      	strb	r1, [r3, r2]
   29e1a:	687b      	ldr	r3, [r7, #4]
   29e1c:	223c      	movs	r2, #60	; 0x3c
   29e1e:	2100      	movs	r1, #0
   29e20:	5499      	strb	r1, [r3, r2]
   29e22:	687b      	ldr	r3, [r7, #4]
   29e24:	223d      	movs	r2, #61	; 0x3d
   29e26:	2100      	movs	r1, #0
   29e28:	5499      	strb	r1, [r3, r2]
   29e2a:	687b      	ldr	r3, [r7, #4]
   29e2c:	223e      	movs	r2, #62	; 0x3e
   29e2e:	2100      	movs	r1, #0
   29e30:	5499      	strb	r1, [r3, r2]
   29e32:	687b      	ldr	r3, [r7, #4]
   29e34:	223f      	movs	r2, #63	; 0x3f
   29e36:	2100      	movs	r1, #0
   29e38:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   29e3a:	687b      	ldr	r3, [r7, #4]
   29e3c:	2240      	movs	r2, #64	; 0x40
   29e3e:	2100      	movs	r1, #0
   29e40:	5499      	strb	r1, [r3, r2]
   29e42:	687b      	ldr	r3, [r7, #4]
   29e44:	2241      	movs	r2, #65	; 0x41
   29e46:	2100      	movs	r1, #0
   29e48:	5499      	strb	r1, [r3, r2]
   29e4a:	687b      	ldr	r3, [r7, #4]
   29e4c:	2242      	movs	r2, #66	; 0x42
   29e4e:	2100      	movs	r1, #0
   29e50:	5499      	strb	r1, [r3, r2]
   29e52:	687b      	ldr	r3, [r7, #4]
   29e54:	2243      	movs	r2, #67	; 0x43
   29e56:	2100      	movs	r1, #0
   29e58:	5499      	strb	r1, [r3, r2]
   29e5a:	687b      	ldr	r3, [r7, #4]
   29e5c:	2244      	movs	r2, #68	; 0x44
   29e5e:	2100      	movs	r1, #0
   29e60:	5499      	strb	r1, [r3, r2]
   29e62:	687b      	ldr	r3, [r7, #4]
   29e64:	2245      	movs	r2, #69	; 0x45
   29e66:	2100      	movs	r1, #0
   29e68:	5499      	strb	r1, [r3, r2]
   29e6a:	687b      	ldr	r3, [r7, #4]
   29e6c:	2246      	movs	r2, #70	; 0x46
   29e6e:	2100      	movs	r1, #0
   29e70:	5499      	strb	r1, [r3, r2]
   29e72:	687b      	ldr	r3, [r7, #4]
   29e74:	2247      	movs	r2, #71	; 0x47
   29e76:	2100      	movs	r1, #0
   29e78:	5499      	strb	r1, [r3, r2]
   29e7a:	687b      	ldr	r3, [r7, #4]
   29e7c:	2248      	movs	r2, #72	; 0x48
   29e7e:	2100      	movs	r1, #0
   29e80:	5499      	strb	r1, [r3, r2]
   29e82:	687b      	ldr	r3, [r7, #4]
   29e84:	2249      	movs	r2, #73	; 0x49
   29e86:	2100      	movs	r1, #0
   29e88:	5499      	strb	r1, [r3, r2]
   29e8a:	687b      	ldr	r3, [r7, #4]
   29e8c:	224a      	movs	r2, #74	; 0x4a
   29e8e:	2100      	movs	r1, #0
   29e90:	5499      	strb	r1, [r3, r2]
   29e92:	687b      	ldr	r3, [r7, #4]
   29e94:	224b      	movs	r2, #75	; 0x4b
   29e96:	2100      	movs	r1, #0
   29e98:	5499      	strb	r1, [r3, r2]
   29e9a:	687b      	ldr	r3, [r7, #4]
   29e9c:	224c      	movs	r2, #76	; 0x4c
   29e9e:	2100      	movs	r1, #0
   29ea0:	5499      	strb	r1, [r3, r2]
   29ea2:	687b      	ldr	r3, [r7, #4]
   29ea4:	224d      	movs	r2, #77	; 0x4d
   29ea6:	2100      	movs	r1, #0
   29ea8:	5499      	strb	r1, [r3, r2]
   29eaa:	687b      	ldr	r3, [r7, #4]
   29eac:	224e      	movs	r2, #78	; 0x4e
   29eae:	2100      	movs	r1, #0
   29eb0:	5499      	strb	r1, [r3, r2]
   29eb2:	687b      	ldr	r3, [r7, #4]
   29eb4:	224f      	movs	r2, #79	; 0x4f
   29eb6:	2100      	movs	r1, #0
   29eb8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   29eba:	687b      	ldr	r3, [r7, #4]
   29ebc:	2250      	movs	r2, #80	; 0x50
   29ebe:	2100      	movs	r1, #0
   29ec0:	5499      	strb	r1, [r3, r2]
   29ec2:	687b      	ldr	r3, [r7, #4]
   29ec4:	2251      	movs	r2, #81	; 0x51
   29ec6:	2100      	movs	r1, #0
   29ec8:	5499      	strb	r1, [r3, r2]
   29eca:	687b      	ldr	r3, [r7, #4]
   29ecc:	2252      	movs	r2, #82	; 0x52
   29ece:	2100      	movs	r1, #0
   29ed0:	5499      	strb	r1, [r3, r2]
   29ed2:	687b      	ldr	r3, [r7, #4]
   29ed4:	2253      	movs	r2, #83	; 0x53
   29ed6:	2100      	movs	r1, #0
   29ed8:	5499      	strb	r1, [r3, r2]
   29eda:	687b      	ldr	r3, [r7, #4]
   29edc:	2254      	movs	r2, #84	; 0x54
   29ede:	2100      	movs	r1, #0
   29ee0:	5499      	strb	r1, [r3, r2]
   29ee2:	687b      	ldr	r3, [r7, #4]
   29ee4:	2255      	movs	r2, #85	; 0x55
   29ee6:	2100      	movs	r1, #0
   29ee8:	5499      	strb	r1, [r3, r2]
   29eea:	687b      	ldr	r3, [r7, #4]
   29eec:	2256      	movs	r2, #86	; 0x56
   29eee:	2100      	movs	r1, #0
   29ef0:	5499      	strb	r1, [r3, r2]
   29ef2:	687b      	ldr	r3, [r7, #4]
   29ef4:	2257      	movs	r2, #87	; 0x57
   29ef6:	2100      	movs	r1, #0
   29ef8:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   29efa:	687b      	ldr	r3, [r7, #4]
   29efc:	2298      	movs	r2, #152	; 0x98
   29efe:	2100      	movs	r1, #0
   29f00:	5499      	strb	r1, [r3, r2]
   29f02:	687b      	ldr	r3, [r7, #4]
   29f04:	2200      	movs	r2, #0
   29f06:	659a      	str	r2, [r3, #88]	; 0x58
   29f08:	687b      	ldr	r3, [r7, #4]
   29f0a:	2200      	movs	r2, #0
   29f0c:	679a      	str	r2, [r3, #120]	; 0x78
   29f0e:	687b      	ldr	r3, [r7, #4]
   29f10:	2299      	movs	r2, #153	; 0x99
   29f12:	2100      	movs	r1, #0
   29f14:	5499      	strb	r1, [r3, r2]
   29f16:	687b      	ldr	r3, [r7, #4]
   29f18:	2200      	movs	r2, #0
   29f1a:	65da      	str	r2, [r3, #92]	; 0x5c
   29f1c:	687b      	ldr	r3, [r7, #4]
   29f1e:	2200      	movs	r2, #0
   29f20:	67da      	str	r2, [r3, #124]	; 0x7c
   29f22:	687b      	ldr	r3, [r7, #4]
   29f24:	229a      	movs	r2, #154	; 0x9a
   29f26:	2100      	movs	r1, #0
   29f28:	5499      	strb	r1, [r3, r2]
   29f2a:	687b      	ldr	r3, [r7, #4]
   29f2c:	2200      	movs	r2, #0
   29f2e:	661a      	str	r2, [r3, #96]	; 0x60
   29f30:	687b      	ldr	r3, [r7, #4]
   29f32:	2280      	movs	r2, #128	; 0x80
   29f34:	2100      	movs	r1, #0
   29f36:	5099      	str	r1, [r3, r2]
   29f38:	687b      	ldr	r3, [r7, #4]
   29f3a:	229b      	movs	r2, #155	; 0x9b
   29f3c:	2100      	movs	r1, #0
   29f3e:	5499      	strb	r1, [r3, r2]
   29f40:	687b      	ldr	r3, [r7, #4]
   29f42:	2200      	movs	r2, #0
   29f44:	665a      	str	r2, [r3, #100]	; 0x64
   29f46:	687b      	ldr	r3, [r7, #4]
   29f48:	2284      	movs	r2, #132	; 0x84
   29f4a:	2100      	movs	r1, #0
   29f4c:	5099      	str	r1, [r3, r2]
   29f4e:	687b      	ldr	r3, [r7, #4]
   29f50:	229c      	movs	r2, #156	; 0x9c
   29f52:	2100      	movs	r1, #0
   29f54:	5499      	strb	r1, [r3, r2]
   29f56:	687b      	ldr	r3, [r7, #4]
   29f58:	2200      	movs	r2, #0
   29f5a:	669a      	str	r2, [r3, #104]	; 0x68
   29f5c:	687b      	ldr	r3, [r7, #4]
   29f5e:	2288      	movs	r2, #136	; 0x88
   29f60:	2100      	movs	r1, #0
   29f62:	5099      	str	r1, [r3, r2]
   29f64:	687b      	ldr	r3, [r7, #4]
   29f66:	229d      	movs	r2, #157	; 0x9d
   29f68:	2100      	movs	r1, #0
   29f6a:	5499      	strb	r1, [r3, r2]
   29f6c:	687b      	ldr	r3, [r7, #4]
   29f6e:	2200      	movs	r2, #0
   29f70:	66da      	str	r2, [r3, #108]	; 0x6c
   29f72:	687b      	ldr	r3, [r7, #4]
   29f74:	228c      	movs	r2, #140	; 0x8c
   29f76:	2100      	movs	r1, #0
   29f78:	5099      	str	r1, [r3, r2]
   29f7a:	687b      	ldr	r3, [r7, #4]
   29f7c:	229e      	movs	r2, #158	; 0x9e
   29f7e:	2100      	movs	r1, #0
   29f80:	5499      	strb	r1, [r3, r2]
   29f82:	687b      	ldr	r3, [r7, #4]
   29f84:	2200      	movs	r2, #0
   29f86:	671a      	str	r2, [r3, #112]	; 0x70
   29f88:	687b      	ldr	r3, [r7, #4]
   29f8a:	2290      	movs	r2, #144	; 0x90
   29f8c:	2100      	movs	r1, #0
   29f8e:	5099      	str	r1, [r3, r2]
   29f90:	687b      	ldr	r3, [r7, #4]
   29f92:	229f      	movs	r2, #159	; 0x9f
   29f94:	2100      	movs	r1, #0
   29f96:	5499      	strb	r1, [r3, r2]
   29f98:	687b      	ldr	r3, [r7, #4]
   29f9a:	2200      	movs	r2, #0
   29f9c:	675a      	str	r2, [r3, #116]	; 0x74
   29f9e:	687b      	ldr	r3, [r7, #4]
   29fa0:	2294      	movs	r2, #148	; 0x94
   29fa2:	2100      	movs	r1, #0
   29fa4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   29fa6:	687b      	ldr	r3, [r7, #4]
   29fa8:	22a0      	movs	r2, #160	; 0xa0
   29faa:	2101      	movs	r1, #1
   29fac:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   29fae:	687b      	ldr	r3, [r7, #4]
   29fb0:	22a1      	movs	r2, #161	; 0xa1
   29fb2:	2100      	movs	r1, #0
   29fb4:	5499      	strb	r1, [r3, r2]
}
   29fb6:	46c0      	nop			; (mov r8, r8)
   29fb8:	46bd      	mov	sp, r7
   29fba:	b005      	add	sp, #20
   29fbc:	bd90      	pop	{r4, r7, pc}
   29fbe:	46c0      	nop			; (mov r8, r8)
   29fc0:	00029cbd 	.word	0x00029cbd
   29fc4:	000389ec 	.word	0x000389ec

00029fc8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29fc8:	b580      	push	{r7, lr}
   29fca:	b086      	sub	sp, #24
   29fcc:	af00      	add	r7, sp, #0
   29fce:	60b9      	str	r1, [r7, #8]
   29fd0:	607a      	str	r2, [r7, #4]
   29fd2:	230f      	movs	r3, #15
   29fd4:	18fb      	adds	r3, r7, r3
   29fd6:	1c02      	adds	r2, r0, #0
   29fd8:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   29fda:	2300      	movs	r3, #0
   29fdc:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29fde:	2300      	movs	r3, #0
   29fe0:	613b      	str	r3, [r7, #16]
   29fe2:	e01d      	b.n	2a020 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   29fe4:	68ba      	ldr	r2, [r7, #8]
   29fe6:	693b      	ldr	r3, [r7, #16]
   29fe8:	18d3      	adds	r3, r2, r3
   29fea:	3310      	adds	r3, #16
   29fec:	781b      	ldrb	r3, [r3, #0]
   29fee:	2b01      	cmp	r3, #1
   29ff0:	d113      	bne.n	2a01a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   29ff2:	230f      	movs	r3, #15
   29ff4:	18fb      	adds	r3, r7, r3
   29ff6:	781b      	ldrb	r3, [r3, #0]
   29ff8:	4a1b      	ldr	r2, [pc, #108]	; (2a068 <_tcc_build_ctrla+0xa0>)
   29ffa:	5cd3      	ldrb	r3, [r2, r3]
   29ffc:	001a      	movs	r2, r3
   29ffe:	693b      	ldr	r3, [r7, #16]
   2a000:	429a      	cmp	r2, r3
   2a002:	da01      	bge.n	2a008 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a004:	2317      	movs	r3, #23
   2a006:	e02a      	b.n	2a05e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a008:	2380      	movs	r3, #128	; 0x80
   2a00a:	045a      	lsls	r2, r3, #17
   2a00c:	693b      	ldr	r3, [r7, #16]
   2a00e:	409a      	lsls	r2, r3
   2a010:	0013      	movs	r3, r2
   2a012:	001a      	movs	r2, r3
   2a014:	697b      	ldr	r3, [r7, #20]
   2a016:	4313      	orrs	r3, r2
   2a018:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a01a:	693b      	ldr	r3, [r7, #16]
   2a01c:	3301      	adds	r3, #1
   2a01e:	613b      	str	r3, [r7, #16]
   2a020:	693b      	ldr	r3, [r7, #16]
   2a022:	2b03      	cmp	r3, #3
   2a024:	ddde      	ble.n	29fe4 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a026:	68bb      	ldr	r3, [r7, #8]
   2a028:	22a1      	movs	r2, #161	; 0xa1
   2a02a:	5c9b      	ldrb	r3, [r3, r2]
   2a02c:	2b00      	cmp	r3, #0
   2a02e:	d004      	beq.n	2a03a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a030:	697b      	ldr	r3, [r7, #20]
   2a032:	2280      	movs	r2, #128	; 0x80
   2a034:	0112      	lsls	r2, r2, #4
   2a036:	4313      	orrs	r3, r2
   2a038:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a03a:	68bb      	ldr	r3, [r7, #8]
   2a03c:	7b1b      	ldrb	r3, [r3, #12]
   2a03e:	031b      	lsls	r3, r3, #12
   2a040:	001a      	movs	r2, r3
   2a042:	697b      	ldr	r3, [r7, #20]
   2a044:	4313      	orrs	r3, r2
   2a046:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a048:	68bb      	ldr	r3, [r7, #8]
   2a04a:	7adb      	ldrb	r3, [r3, #11]
   2a04c:	021b      	lsls	r3, r3, #8
   2a04e:	001a      	movs	r2, r3
   2a050:	697b      	ldr	r3, [r7, #20]
   2a052:	4313      	orrs	r3, r2
   2a054:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a056:	687b      	ldr	r3, [r7, #4]
   2a058:	697a      	ldr	r2, [r7, #20]
   2a05a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a05c:	2300      	movs	r3, #0
}
   2a05e:	0018      	movs	r0, r3
   2a060:	46bd      	mov	sp, r7
   2a062:	b006      	add	sp, #24
   2a064:	bd80      	pop	{r7, pc}
   2a066:	46c0      	nop			; (mov r8, r8)
   2a068:	000389f8 	.word	0x000389f8

0002a06c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a06c:	b580      	push	{r7, lr}
   2a06e:	b086      	sub	sp, #24
   2a070:	af00      	add	r7, sp, #0
   2a072:	60b9      	str	r1, [r7, #8]
   2a074:	607a      	str	r2, [r7, #4]
   2a076:	230f      	movs	r3, #15
   2a078:	18fb      	adds	r3, r7, r3
   2a07a:	1c02      	adds	r2, r0, #0
   2a07c:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a07e:	2317      	movs	r3, #23
   2a080:	18fb      	adds	r3, r7, r3
   2a082:	2200      	movs	r2, #0
   2a084:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a086:	68bb      	ldr	r3, [r7, #8]
   2a088:	7a1b      	ldrb	r3, [r3, #8]
   2a08a:	2b00      	cmp	r3, #0
   2a08c:	d007      	beq.n	2a09e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a08e:	2317      	movs	r3, #23
   2a090:	18fb      	adds	r3, r7, r3
   2a092:	2217      	movs	r2, #23
   2a094:	18ba      	adds	r2, r7, r2
   2a096:	7812      	ldrb	r2, [r2, #0]
   2a098:	2104      	movs	r1, #4
   2a09a:	430a      	orrs	r2, r1
   2a09c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a09e:	68bb      	ldr	r3, [r7, #8]
   2a0a0:	7a5b      	ldrb	r3, [r3, #9]
   2a0a2:	2b01      	cmp	r3, #1
   2a0a4:	d107      	bne.n	2a0b6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a0a6:	2317      	movs	r3, #23
   2a0a8:	18fb      	adds	r3, r7, r3
   2a0aa:	2217      	movs	r2, #23
   2a0ac:	18ba      	adds	r2, r7, r2
   2a0ae:	7812      	ldrb	r2, [r2, #0]
   2a0b0:	2101      	movs	r1, #1
   2a0b2:	430a      	orrs	r2, r1
   2a0b4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a0b6:	687b      	ldr	r3, [r7, #4]
   2a0b8:	2217      	movs	r2, #23
   2a0ba:	18ba      	adds	r2, r7, r2
   2a0bc:	7812      	ldrb	r2, [r2, #0]
   2a0be:	701a      	strb	r2, [r3, #0]
}
   2a0c0:	46c0      	nop			; (mov r8, r8)
   2a0c2:	46bd      	mov	sp, r7
   2a0c4:	b006      	add	sp, #24
   2a0c6:	bd80      	pop	{r7, pc}

0002a0c8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a0c8:	b580      	push	{r7, lr}
   2a0ca:	b088      	sub	sp, #32
   2a0cc:	af00      	add	r7, sp, #0
   2a0ce:	60b9      	str	r1, [r7, #8]
   2a0d0:	607a      	str	r2, [r7, #4]
   2a0d2:	230f      	movs	r3, #15
   2a0d4:	18fb      	adds	r3, r7, r3
   2a0d6:	1c02      	adds	r2, r0, #0
   2a0d8:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a0da:	230f      	movs	r3, #15
   2a0dc:	18fb      	adds	r3, r7, r3
   2a0de:	781a      	ldrb	r2, [r3, #0]
   2a0e0:	231b      	movs	r3, #27
   2a0e2:	18fb      	adds	r3, r7, r3
   2a0e4:	493e      	ldr	r1, [pc, #248]	; (2a1e0 <_tcc_build_faults+0x118>)
   2a0e6:	5c8a      	ldrb	r2, [r1, r2]
   2a0e8:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a0ea:	2300      	movs	r3, #0
   2a0ec:	61fb      	str	r3, [r7, #28]
   2a0ee:	e06e      	b.n	2a1ce <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a0f0:	69fa      	ldr	r2, [r7, #28]
   2a0f2:	0013      	movs	r3, r2
   2a0f4:	009b      	lsls	r3, r3, #2
   2a0f6:	189b      	adds	r3, r3, r2
   2a0f8:	005b      	lsls	r3, r3, #1
   2a0fa:	3328      	adds	r3, #40	; 0x28
   2a0fc:	68ba      	ldr	r2, [r7, #8]
   2a0fe:	18d3      	adds	r3, r2, r3
   2a100:	3304      	adds	r3, #4
   2a102:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a104:	697b      	ldr	r3, [r7, #20]
   2a106:	7a5b      	ldrb	r3, [r3, #9]
   2a108:	221b      	movs	r2, #27
   2a10a:	18ba      	adds	r2, r7, r2
   2a10c:	7812      	ldrb	r2, [r2, #0]
   2a10e:	429a      	cmp	r2, r3
   2a110:	d801      	bhi.n	2a116 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a112:	2317      	movs	r3, #23
   2a114:	e05f      	b.n	2a1d6 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a116:	697b      	ldr	r3, [r7, #20]
   2a118:	781b      	ldrb	r3, [r3, #0]
   2a11a:	2b0f      	cmp	r3, #15
   2a11c:	d901      	bls.n	2a122 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a11e:	2317      	movs	r3, #23
   2a120:	e059      	b.n	2a1d6 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a122:	697b      	ldr	r3, [r7, #20]
   2a124:	781b      	ldrb	r3, [r3, #0]
   2a126:	061b      	lsls	r3, r3, #24
   2a128:	001a      	movs	r2, r3
   2a12a:	23f0      	movs	r3, #240	; 0xf0
   2a12c:	051b      	lsls	r3, r3, #20
   2a12e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a130:	697b      	ldr	r3, [r7, #20]
   2a132:	785b      	ldrb	r3, [r3, #1]
   2a134:	041b      	lsls	r3, r3, #16
   2a136:	0019      	movs	r1, r3
   2a138:	23ff      	movs	r3, #255	; 0xff
   2a13a:	041b      	lsls	r3, r3, #16
   2a13c:	400b      	ands	r3, r1
   2a13e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a140:	697b      	ldr	r3, [r7, #20]
   2a142:	789b      	ldrb	r3, [r3, #2]
   2a144:	2b00      	cmp	r3, #0
   2a146:	d001      	beq.n	2a14c <_tcc_build_faults+0x84>
   2a148:	2380      	movs	r3, #128	; 0x80
   2a14a:	e000      	b.n	2a14e <_tcc_build_faults+0x86>
   2a14c:	2300      	movs	r3, #0
   2a14e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a150:	697b      	ldr	r3, [r7, #20]
   2a152:	78db      	ldrb	r3, [r3, #3]
   2a154:	2b00      	cmp	r3, #0
   2a156:	d001      	beq.n	2a15c <_tcc_build_faults+0x94>
   2a158:	2308      	movs	r3, #8
   2a15a:	e000      	b.n	2a15e <_tcc_build_faults+0x96>
   2a15c:	2300      	movs	r3, #0
   2a15e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a160:	697b      	ldr	r3, [r7, #20]
   2a162:	791b      	ldrb	r3, [r3, #4]
   2a164:	2b00      	cmp	r3, #0
   2a166:	d001      	beq.n	2a16c <_tcc_build_faults+0xa4>
   2a168:	2310      	movs	r3, #16
   2a16a:	e000      	b.n	2a16e <_tcc_build_faults+0xa6>
   2a16c:	2300      	movs	r3, #0
   2a16e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a170:	697b      	ldr	r3, [r7, #20]
   2a172:	795b      	ldrb	r3, [r3, #5]
   2a174:	0019      	movs	r1, r3
   2a176:	2303      	movs	r3, #3
   2a178:	400b      	ands	r3, r1
   2a17a:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a17c:	697b      	ldr	r3, [r7, #20]
   2a17e:	799b      	ldrb	r3, [r3, #6]
   2a180:	015b      	lsls	r3, r3, #5
   2a182:	0019      	movs	r1, r3
   2a184:	2360      	movs	r3, #96	; 0x60
   2a186:	400b      	ands	r3, r1
   2a188:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a18a:	697b      	ldr	r3, [r7, #20]
   2a18c:	79db      	ldrb	r3, [r3, #7]
   2a18e:	021b      	lsls	r3, r3, #8
   2a190:	0019      	movs	r1, r3
   2a192:	23c0      	movs	r3, #192	; 0xc0
   2a194:	009b      	lsls	r3, r3, #2
   2a196:	400b      	ands	r3, r1
   2a198:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a19a:	697b      	ldr	r3, [r7, #20]
   2a19c:	7a1b      	ldrb	r3, [r3, #8]
   2a19e:	031b      	lsls	r3, r3, #12
   2a1a0:	0019      	movs	r1, r3
   2a1a2:	23e0      	movs	r3, #224	; 0xe0
   2a1a4:	01db      	lsls	r3, r3, #7
   2a1a6:	400b      	ands	r3, r1
   2a1a8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a1aa:	697b      	ldr	r3, [r7, #20]
   2a1ac:	7a5b      	ldrb	r3, [r3, #9]
   2a1ae:	029b      	lsls	r3, r3, #10
   2a1b0:	0019      	movs	r1, r3
   2a1b2:	23c0      	movs	r3, #192	; 0xc0
   2a1b4:	011b      	lsls	r3, r3, #4
   2a1b6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a1b8:	4313      	orrs	r3, r2
   2a1ba:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a1bc:	69fb      	ldr	r3, [r7, #28]
   2a1be:	009b      	lsls	r3, r3, #2
   2a1c0:	687a      	ldr	r2, [r7, #4]
   2a1c2:	18d3      	adds	r3, r2, r3
   2a1c4:	693a      	ldr	r2, [r7, #16]
   2a1c6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a1c8:	69fb      	ldr	r3, [r7, #28]
   2a1ca:	3301      	adds	r3, #1
   2a1cc:	61fb      	str	r3, [r7, #28]
   2a1ce:	69fb      	ldr	r3, [r7, #28]
   2a1d0:	2b01      	cmp	r3, #1
   2a1d2:	dd8d      	ble.n	2a0f0 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a1d4:	2300      	movs	r3, #0
}
   2a1d6:	0018      	movs	r0, r3
   2a1d8:	46bd      	mov	sp, r7
   2a1da:	b008      	add	sp, #32
   2a1dc:	bd80      	pop	{r7, pc}
   2a1de:	46c0      	nop			; (mov r8, r8)
   2a1e0:	000389f8 	.word	0x000389f8

0002a1e4 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a1e4:	b580      	push	{r7, lr}
   2a1e6:	b088      	sub	sp, #32
   2a1e8:	af00      	add	r7, sp, #0
   2a1ea:	60b9      	str	r1, [r7, #8]
   2a1ec:	607a      	str	r2, [r7, #4]
   2a1ee:	230f      	movs	r3, #15
   2a1f0:	18fb      	adds	r3, r7, r3
   2a1f2:	1c02      	adds	r2, r0, #0
   2a1f4:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a1f6:	230f      	movs	r3, #15
   2a1f8:	18fb      	adds	r3, r7, r3
   2a1fa:	781a      	ldrb	r2, [r3, #0]
   2a1fc:	2317      	movs	r3, #23
   2a1fe:	18fb      	adds	r3, r7, r3
   2a200:	492d      	ldr	r1, [pc, #180]	; (2a2b8 <_tcc_build_drvctrl+0xd4>)
   2a202:	5c8a      	ldrb	r2, [r1, r2]
   2a204:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a206:	2300      	movs	r3, #0
   2a208:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a20a:	2300      	movs	r3, #0
   2a20c:	61fb      	str	r3, [r7, #28]
   2a20e:	e048      	b.n	2a2a2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a210:	68ba      	ldr	r2, [r7, #8]
   2a212:	2150      	movs	r1, #80	; 0x50
   2a214:	69fb      	ldr	r3, [r7, #28]
   2a216:	18d3      	adds	r3, r2, r3
   2a218:	185b      	adds	r3, r3, r1
   2a21a:	781b      	ldrb	r3, [r3, #0]
   2a21c:	2b00      	cmp	r3, #0
   2a21e:	d010      	beq.n	2a242 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a220:	2317      	movs	r3, #23
   2a222:	18fb      	adds	r3, r7, r3
   2a224:	781a      	ldrb	r2, [r3, #0]
   2a226:	69fb      	ldr	r3, [r7, #28]
   2a228:	429a      	cmp	r2, r3
   2a22a:	d801      	bhi.n	2a230 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a22c:	2317      	movs	r3, #23
   2a22e:	e03f      	b.n	2a2b0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a230:	2380      	movs	r3, #128	; 0x80
   2a232:	025a      	lsls	r2, r3, #9
   2a234:	69fb      	ldr	r3, [r7, #28]
   2a236:	409a      	lsls	r2, r3
   2a238:	0013      	movs	r3, r2
   2a23a:	001a      	movs	r2, r3
   2a23c:	69bb      	ldr	r3, [r7, #24]
   2a23e:	4313      	orrs	r3, r2
   2a240:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a242:	68ba      	ldr	r2, [r7, #8]
   2a244:	69fb      	ldr	r3, [r7, #28]
   2a246:	331c      	adds	r3, #28
   2a248:	005b      	lsls	r3, r3, #1
   2a24a:	18d3      	adds	r3, r2, r3
   2a24c:	3309      	adds	r3, #9
   2a24e:	781b      	ldrb	r3, [r3, #0]
   2a250:	2b00      	cmp	r3, #0
   2a252:	d023      	beq.n	2a29c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a254:	2317      	movs	r3, #23
   2a256:	18fb      	adds	r3, r7, r3
   2a258:	781a      	ldrb	r2, [r3, #0]
   2a25a:	69fb      	ldr	r3, [r7, #28]
   2a25c:	429a      	cmp	r2, r3
   2a25e:	d801      	bhi.n	2a264 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a260:	2317      	movs	r3, #23
   2a262:	e025      	b.n	2a2b0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a264:	68ba      	ldr	r2, [r7, #8]
   2a266:	69fb      	ldr	r3, [r7, #28]
   2a268:	331c      	adds	r3, #28
   2a26a:	005b      	lsls	r3, r3, #1
   2a26c:	18d3      	adds	r3, r2, r3
   2a26e:	3309      	adds	r3, #9
   2a270:	781b      	ldrb	r3, [r3, #0]
   2a272:	2b02      	cmp	r3, #2
   2a274:	d10a      	bne.n	2a28c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a276:	2302      	movs	r3, #2
   2a278:	33ff      	adds	r3, #255	; 0xff
   2a27a:	001a      	movs	r2, r3
   2a27c:	69fb      	ldr	r3, [r7, #28]
   2a27e:	409a      	lsls	r2, r3
   2a280:	0013      	movs	r3, r2
   2a282:	001a      	movs	r2, r3
   2a284:	69bb      	ldr	r3, [r7, #24]
   2a286:	4313      	orrs	r3, r2
   2a288:	61bb      	str	r3, [r7, #24]
   2a28a:	e007      	b.n	2a29c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a28c:	2201      	movs	r2, #1
   2a28e:	69fb      	ldr	r3, [r7, #28]
   2a290:	409a      	lsls	r2, r3
   2a292:	0013      	movs	r3, r2
   2a294:	001a      	movs	r2, r3
   2a296:	69bb      	ldr	r3, [r7, #24]
   2a298:	4313      	orrs	r3, r2
   2a29a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a29c:	69fb      	ldr	r3, [r7, #28]
   2a29e:	3301      	adds	r3, #1
   2a2a0:	61fb      	str	r3, [r7, #28]
   2a2a2:	69fb      	ldr	r3, [r7, #28]
   2a2a4:	2b07      	cmp	r3, #7
   2a2a6:	d9b3      	bls.n	2a210 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a2a8:	687b      	ldr	r3, [r7, #4]
   2a2aa:	69ba      	ldr	r2, [r7, #24]
   2a2ac:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a2ae:	2300      	movs	r3, #0
}
   2a2b0:	0018      	movs	r0, r3
   2a2b2:	46bd      	mov	sp, r7
   2a2b4:	b008      	add	sp, #32
   2a2b6:	bd80      	pop	{r7, pc}
   2a2b8:	000389fc 	.word	0x000389fc

0002a2bc <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a2bc:	b580      	push	{r7, lr}
   2a2be:	b088      	sub	sp, #32
   2a2c0:	af00      	add	r7, sp, #0
   2a2c2:	60b9      	str	r1, [r7, #8]
   2a2c4:	607a      	str	r2, [r7, #4]
   2a2c6:	230f      	movs	r3, #15
   2a2c8:	18fb      	adds	r3, r7, r3
   2a2ca:	1c02      	adds	r2, r0, #0
   2a2cc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a2ce:	230f      	movs	r3, #15
   2a2d0:	18fb      	adds	r3, r7, r3
   2a2d2:	781a      	ldrb	r2, [r3, #0]
   2a2d4:	2317      	movs	r3, #23
   2a2d6:	18fb      	adds	r3, r7, r3
   2a2d8:	491d      	ldr	r1, [pc, #116]	; (2a350 <_tcc_build_waves+0x94>)
   2a2da:	5c8a      	ldrb	r2, [r1, r2]
   2a2dc:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a2de:	68bb      	ldr	r3, [r7, #8]
   2a2e0:	3310      	adds	r3, #16
   2a2e2:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a2e4:	693b      	ldr	r3, [r7, #16]
   2a2e6:	7a5b      	ldrb	r3, [r3, #9]
   2a2e8:	011b      	lsls	r3, r3, #4
   2a2ea:	001a      	movs	r2, r3
   2a2ec:	2330      	movs	r3, #48	; 0x30
   2a2ee:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a2f0:	693b      	ldr	r3, [r7, #16]
   2a2f2:	7a1b      	ldrb	r3, [r3, #8]
   2a2f4:	0019      	movs	r1, r3
   2a2f6:	2307      	movs	r3, #7
   2a2f8:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a2fa:	4313      	orrs	r3, r2
   2a2fc:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a2fe:	2300      	movs	r3, #0
   2a300:	61fb      	str	r3, [r7, #28]
   2a302:	e01a      	b.n	2a33a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a304:	693a      	ldr	r2, [r7, #16]
   2a306:	69fb      	ldr	r3, [r7, #28]
   2a308:	18d3      	adds	r3, r2, r3
   2a30a:	3304      	adds	r3, #4
   2a30c:	781b      	ldrb	r3, [r3, #0]
   2a30e:	2b00      	cmp	r3, #0
   2a310:	d010      	beq.n	2a334 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a312:	2317      	movs	r3, #23
   2a314:	18fb      	adds	r3, r7, r3
   2a316:	781a      	ldrb	r2, [r3, #0]
   2a318:	69fb      	ldr	r3, [r7, #28]
   2a31a:	429a      	cmp	r2, r3
   2a31c:	dc01      	bgt.n	2a322 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a31e:	2317      	movs	r3, #23
   2a320:	e012      	b.n	2a348 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a322:	2380      	movs	r3, #128	; 0x80
   2a324:	025a      	lsls	r2, r3, #9
   2a326:	69fb      	ldr	r3, [r7, #28]
   2a328:	409a      	lsls	r2, r3
   2a32a:	0013      	movs	r3, r2
   2a32c:	001a      	movs	r2, r3
   2a32e:	69bb      	ldr	r3, [r7, #24]
   2a330:	4313      	orrs	r3, r2
   2a332:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a334:	69fb      	ldr	r3, [r7, #28]
   2a336:	3301      	adds	r3, #1
   2a338:	61fb      	str	r3, [r7, #28]
   2a33a:	69fb      	ldr	r3, [r7, #28]
   2a33c:	2b03      	cmp	r3, #3
   2a33e:	dde1      	ble.n	2a304 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a340:	687b      	ldr	r3, [r7, #4]
   2a342:	69ba      	ldr	r2, [r7, #24]
   2a344:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a346:	2300      	movs	r3, #0
}
   2a348:	0018      	movs	r0, r3
   2a34a:	46bd      	mov	sp, r7
   2a34c:	b008      	add	sp, #32
   2a34e:	bd80      	pop	{r7, pc}
   2a350:	000389f8 	.word	0x000389f8

0002a354 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a354:	b590      	push	{r4, r7, lr}
   2a356:	b091      	sub	sp, #68	; 0x44
   2a358:	af00      	add	r7, sp, #0
   2a35a:	60f8      	str	r0, [r7, #12]
   2a35c:	60b9      	str	r1, [r7, #8]
   2a35e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a360:	233b      	movs	r3, #59	; 0x3b
   2a362:	18fc      	adds	r4, r7, r3
   2a364:	68bb      	ldr	r3, [r7, #8]
   2a366:	0018      	movs	r0, r3
   2a368:	4bc4      	ldr	r3, [pc, #784]	; (2a67c <tcc_init+0x328>)
   2a36a:	4798      	blx	r3
   2a36c:	0003      	movs	r3, r0
   2a36e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a370:	233b      	movs	r3, #59	; 0x3b
   2a372:	18fb      	adds	r3, r7, r3
   2a374:	781a      	ldrb	r2, [r3, #0]
   2a376:	4bc2      	ldr	r3, [pc, #776]	; (2a680 <tcc_init+0x32c>)
   2a378:	0092      	lsls	r2, r2, #2
   2a37a:	58d3      	ldr	r3, [r2, r3]
   2a37c:	0019      	movs	r1, r3
   2a37e:	2002      	movs	r0, #2
   2a380:	4bc0      	ldr	r3, [pc, #768]	; (2a684 <tcc_init+0x330>)
   2a382:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a384:	68bb      	ldr	r3, [r7, #8]
   2a386:	681b      	ldr	r3, [r3, #0]
   2a388:	2202      	movs	r2, #2
   2a38a:	4013      	ands	r3, r2
   2a38c:	d001      	beq.n	2a392 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a38e:	231c      	movs	r3, #28
   2a390:	e1be      	b.n	2a710 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a392:	68bb      	ldr	r3, [r7, #8]
   2a394:	681b      	ldr	r3, [r3, #0]
   2a396:	2201      	movs	r2, #1
   2a398:	4013      	ands	r3, r2
   2a39a:	d001      	beq.n	2a3a0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a39c:	231c      	movs	r3, #28
   2a39e:	e1b7      	b.n	2a710 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a3a0:	233b      	movs	r3, #59	; 0x3b
   2a3a2:	18fb      	adds	r3, r7, r3
   2a3a4:	781a      	ldrb	r2, [r3, #0]
   2a3a6:	4bb8      	ldr	r3, [pc, #736]	; (2a688 <tcc_init+0x334>)
   2a3a8:	0092      	lsls	r2, r2, #2
   2a3aa:	58d3      	ldr	r3, [r2, r3]
   2a3ac:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a3ae:	687b      	ldr	r3, [r7, #4]
   2a3b0:	681a      	ldr	r2, [r3, #0]
   2a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3b4:	429a      	cmp	r2, r3
   2a3b6:	d804      	bhi.n	2a3c2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a3b8:	687b      	ldr	r3, [r7, #4]
   2a3ba:	685a      	ldr	r2, [r3, #4]
   2a3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3be:	429a      	cmp	r2, r3
   2a3c0:	d901      	bls.n	2a3c6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a3c2:	2317      	movs	r3, #23
   2a3c4:	e1a4      	b.n	2a710 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a3c6:	2300      	movs	r3, #0
   2a3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a3ca:	e00e      	b.n	2a3ea <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a3cc:	687a      	ldr	r2, [r7, #4]
   2a3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a3d0:	3306      	adds	r3, #6
   2a3d2:	009b      	lsls	r3, r3, #2
   2a3d4:	18d3      	adds	r3, r2, r3
   2a3d6:	3304      	adds	r3, #4
   2a3d8:	681a      	ldr	r2, [r3, #0]
   2a3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3dc:	429a      	cmp	r2, r3
   2a3de:	d901      	bls.n	2a3e4 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a3e0:	2317      	movs	r3, #23
   2a3e2:	e195      	b.n	2a710 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a3e6:	3301      	adds	r3, #1
   2a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a3ec:	2b03      	cmp	r3, #3
   2a3ee:	dded      	ble.n	2a3cc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a3f0:	2300      	movs	r3, #0
   2a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a3f4:	e019      	b.n	2a42a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a3f6:	687a      	ldr	r2, [r7, #4]
   2a3f8:	2198      	movs	r1, #152	; 0x98
   2a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a3fc:	18d3      	adds	r3, r2, r3
   2a3fe:	185b      	adds	r3, r3, r1
   2a400:	781b      	ldrb	r3, [r3, #0]
   2a402:	2201      	movs	r2, #1
   2a404:	4053      	eors	r3, r2
   2a406:	b2db      	uxtb	r3, r3
   2a408:	2b00      	cmp	r3, #0
   2a40a:	d10a      	bne.n	2a422 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a40c:	233b      	movs	r3, #59	; 0x3b
   2a40e:	18fb      	adds	r3, r7, r3
   2a410:	781b      	ldrb	r3, [r3, #0]
   2a412:	4a9e      	ldr	r2, [pc, #632]	; (2a68c <tcc_init+0x338>)
   2a414:	5cd3      	ldrb	r3, [r2, r3]
   2a416:	001a      	movs	r2, r3
   2a418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a41a:	429a      	cmp	r2, r3
   2a41c:	dc02      	bgt.n	2a424 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a41e:	2317      	movs	r3, #23
   2a420:	e176      	b.n	2a710 <tcc_init+0x3bc>
			continue;
   2a422:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a426:	3301      	adds	r3, #1
   2a428:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a42c:	2b07      	cmp	r3, #7
   2a42e:	dde2      	ble.n	2a3f6 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a430:	2300      	movs	r3, #0
   2a432:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a434:	2333      	movs	r3, #51	; 0x33
   2a436:	18fc      	adds	r4, r7, r3
   2a438:	232c      	movs	r3, #44	; 0x2c
   2a43a:	18fa      	adds	r2, r7, r3
   2a43c:	6879      	ldr	r1, [r7, #4]
   2a43e:	233b      	movs	r3, #59	; 0x3b
   2a440:	18fb      	adds	r3, r7, r3
   2a442:	781b      	ldrb	r3, [r3, #0]
   2a444:	0018      	movs	r0, r3
   2a446:	4b92      	ldr	r3, [pc, #584]	; (2a690 <tcc_init+0x33c>)
   2a448:	4798      	blx	r3
   2a44a:	0003      	movs	r3, r0
   2a44c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a44e:	2333      	movs	r3, #51	; 0x33
   2a450:	18fb      	adds	r3, r7, r3
   2a452:	781b      	ldrb	r3, [r3, #0]
   2a454:	2b00      	cmp	r3, #0
   2a456:	d003      	beq.n	2a460 <tcc_init+0x10c>
		return status;
   2a458:	2333      	movs	r3, #51	; 0x33
   2a45a:	18fb      	adds	r3, r7, r3
   2a45c:	781b      	ldrb	r3, [r3, #0]
   2a45e:	e157      	b.n	2a710 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a460:	232b      	movs	r3, #43	; 0x2b
   2a462:	18fa      	adds	r2, r7, r3
   2a464:	6879      	ldr	r1, [r7, #4]
   2a466:	233b      	movs	r3, #59	; 0x3b
   2a468:	18fb      	adds	r3, r7, r3
   2a46a:	781b      	ldrb	r3, [r3, #0]
   2a46c:	0018      	movs	r0, r3
   2a46e:	4b89      	ldr	r3, [pc, #548]	; (2a694 <tcc_init+0x340>)
   2a470:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a472:	2333      	movs	r3, #51	; 0x33
   2a474:	18fc      	adds	r4, r7, r3
   2a476:	2320      	movs	r3, #32
   2a478:	18fa      	adds	r2, r7, r3
   2a47a:	6879      	ldr	r1, [r7, #4]
   2a47c:	233b      	movs	r3, #59	; 0x3b
   2a47e:	18fb      	adds	r3, r7, r3
   2a480:	781b      	ldrb	r3, [r3, #0]
   2a482:	0018      	movs	r0, r3
   2a484:	4b84      	ldr	r3, [pc, #528]	; (2a698 <tcc_init+0x344>)
   2a486:	4798      	blx	r3
   2a488:	0003      	movs	r3, r0
   2a48a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a48c:	2333      	movs	r3, #51	; 0x33
   2a48e:	18fb      	adds	r3, r7, r3
   2a490:	781b      	ldrb	r3, [r3, #0]
   2a492:	2b00      	cmp	r3, #0
   2a494:	d003      	beq.n	2a49e <tcc_init+0x14a>
		return status;
   2a496:	2333      	movs	r3, #51	; 0x33
   2a498:	18fb      	adds	r3, r7, r3
   2a49a:	781b      	ldrb	r3, [r3, #0]
   2a49c:	e138      	b.n	2a710 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a49e:	2300      	movs	r3, #0
   2a4a0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a4a2:	2333      	movs	r3, #51	; 0x33
   2a4a4:	18fc      	adds	r4, r7, r3
   2a4a6:	231c      	movs	r3, #28
   2a4a8:	18fa      	adds	r2, r7, r3
   2a4aa:	6879      	ldr	r1, [r7, #4]
   2a4ac:	233b      	movs	r3, #59	; 0x3b
   2a4ae:	18fb      	adds	r3, r7, r3
   2a4b0:	781b      	ldrb	r3, [r3, #0]
   2a4b2:	0018      	movs	r0, r3
   2a4b4:	4b79      	ldr	r3, [pc, #484]	; (2a69c <tcc_init+0x348>)
   2a4b6:	4798      	blx	r3
   2a4b8:	0003      	movs	r3, r0
   2a4ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a4bc:	2333      	movs	r3, #51	; 0x33
   2a4be:	18fb      	adds	r3, r7, r3
   2a4c0:	781b      	ldrb	r3, [r3, #0]
   2a4c2:	2b00      	cmp	r3, #0
   2a4c4:	d003      	beq.n	2a4ce <tcc_init+0x17a>
		return status;
   2a4c6:	2333      	movs	r3, #51	; 0x33
   2a4c8:	18fb      	adds	r3, r7, r3
   2a4ca:	781b      	ldrb	r3, [r3, #0]
   2a4cc:	e120      	b.n	2a710 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a4ce:	2333      	movs	r3, #51	; 0x33
   2a4d0:	18fc      	adds	r4, r7, r3
   2a4d2:	2318      	movs	r3, #24
   2a4d4:	18fa      	adds	r2, r7, r3
   2a4d6:	6879      	ldr	r1, [r7, #4]
   2a4d8:	233b      	movs	r3, #59	; 0x3b
   2a4da:	18fb      	adds	r3, r7, r3
   2a4dc:	781b      	ldrb	r3, [r3, #0]
   2a4de:	0018      	movs	r0, r3
   2a4e0:	4b6f      	ldr	r3, [pc, #444]	; (2a6a0 <tcc_init+0x34c>)
   2a4e2:	4798      	blx	r3
   2a4e4:	0003      	movs	r3, r0
   2a4e6:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a4e8:	2333      	movs	r3, #51	; 0x33
   2a4ea:	18fb      	adds	r3, r7, r3
   2a4ec:	781b      	ldrb	r3, [r3, #0]
   2a4ee:	2b00      	cmp	r3, #0
   2a4f0:	d003      	beq.n	2a4fa <tcc_init+0x1a6>
		return status;
   2a4f2:	2333      	movs	r3, #51	; 0x33
   2a4f4:	18fb      	adds	r3, r7, r3
   2a4f6:	781b      	ldrb	r3, [r3, #0]
   2a4f8:	e10a      	b.n	2a710 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a4fa:	2300      	movs	r3, #0
   2a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a4fe:	e009      	b.n	2a514 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2a500:	68fa      	ldr	r2, [r7, #12]
   2a502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a504:	009b      	lsls	r3, r3, #2
   2a506:	18d3      	adds	r3, r2, r3
   2a508:	3304      	adds	r3, #4
   2a50a:	2200      	movs	r2, #0
   2a50c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a510:	3301      	adds	r3, #1
   2a512:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a516:	2b0b      	cmp	r3, #11
   2a518:	ddf2      	ble.n	2a500 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2a51a:	68fb      	ldr	r3, [r7, #12]
   2a51c:	2200      	movs	r2, #0
   2a51e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2a520:	68fb      	ldr	r3, [r7, #12]
   2a522:	2200      	movs	r2, #0
   2a524:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2a526:	233b      	movs	r3, #59	; 0x3b
   2a528:	18fb      	adds	r3, r7, r3
   2a52a:	781a      	ldrb	r2, [r3, #0]
   2a52c:	4b5d      	ldr	r3, [pc, #372]	; (2a6a4 <tcc_init+0x350>)
   2a52e:	0092      	lsls	r2, r2, #2
   2a530:	68f9      	ldr	r1, [r7, #12]
   2a532:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2a534:	68fb      	ldr	r3, [r7, #12]
   2a536:	68ba      	ldr	r2, [r7, #8]
   2a538:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2a53a:	687b      	ldr	r3, [r7, #4]
   2a53c:	22a0      	movs	r2, #160	; 0xa0
   2a53e:	5c99      	ldrb	r1, [r3, r2]
   2a540:	68fb      	ldr	r3, [r7, #12]
   2a542:	223c      	movs	r2, #60	; 0x3c
   2a544:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2a546:	2314      	movs	r3, #20
   2a548:	18fb      	adds	r3, r7, r3
   2a54a:	0018      	movs	r0, r3
   2a54c:	4b56      	ldr	r3, [pc, #344]	; (2a6a8 <tcc_init+0x354>)
   2a54e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2a550:	687b      	ldr	r3, [r7, #4]
   2a552:	7a9a      	ldrb	r2, [r3, #10]
   2a554:	2314      	movs	r3, #20
   2a556:	18fb      	adds	r3, r7, r3
   2a558:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2a55a:	233b      	movs	r3, #59	; 0x3b
   2a55c:	18fb      	adds	r3, r7, r3
   2a55e:	781b      	ldrb	r3, [r3, #0]
   2a560:	4a52      	ldr	r2, [pc, #328]	; (2a6ac <tcc_init+0x358>)
   2a562:	5cd3      	ldrb	r3, [r2, r3]
   2a564:	2214      	movs	r2, #20
   2a566:	18ba      	adds	r2, r7, r2
   2a568:	0011      	movs	r1, r2
   2a56a:	0018      	movs	r0, r3
   2a56c:	4b50      	ldr	r3, [pc, #320]	; (2a6b0 <tcc_init+0x35c>)
   2a56e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2a570:	233b      	movs	r3, #59	; 0x3b
   2a572:	18fb      	adds	r3, r7, r3
   2a574:	781b      	ldrb	r3, [r3, #0]
   2a576:	4a4d      	ldr	r2, [pc, #308]	; (2a6ac <tcc_init+0x358>)
   2a578:	5cd3      	ldrb	r3, [r2, r3]
   2a57a:	0018      	movs	r0, r3
   2a57c:	4b4d      	ldr	r3, [pc, #308]	; (2a6b4 <tcc_init+0x360>)
   2a57e:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a580:	2300      	movs	r3, #0
   2a582:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a584:	e02d      	b.n	2a5e2 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a586:	687a      	ldr	r2, [r7, #4]
   2a588:	2198      	movs	r1, #152	; 0x98
   2a58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a58c:	18d3      	adds	r3, r2, r3
   2a58e:	185b      	adds	r3, r3, r1
   2a590:	781b      	ldrb	r3, [r3, #0]
   2a592:	2201      	movs	r2, #1
   2a594:	4053      	eors	r3, r2
   2a596:	b2db      	uxtb	r3, r3
   2a598:	2b00      	cmp	r3, #0
   2a59a:	d11e      	bne.n	2a5da <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2a59c:	2310      	movs	r3, #16
   2a59e:	18fb      	adds	r3, r7, r3
   2a5a0:	0018      	movs	r0, r3
   2a5a2:	4b45      	ldr	r3, [pc, #276]	; (2a6b8 <tcc_init+0x364>)
   2a5a4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2a5a6:	687b      	ldr	r3, [r7, #4]
   2a5a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a5aa:	321e      	adds	r2, #30
   2a5ac:	0092      	lsls	r2, r2, #2
   2a5ae:	58d3      	ldr	r3, [r2, r3]
   2a5b0:	b2da      	uxtb	r2, r3
   2a5b2:	2310      	movs	r3, #16
   2a5b4:	18fb      	adds	r3, r7, r3
   2a5b6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2a5b8:	2310      	movs	r3, #16
   2a5ba:	18fb      	adds	r3, r7, r3
   2a5bc:	2201      	movs	r2, #1
   2a5be:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2a5c0:	687b      	ldr	r3, [r7, #4]
   2a5c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a5c4:	3216      	adds	r2, #22
   2a5c6:	0092      	lsls	r2, r2, #2
   2a5c8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2a5ca:	b2db      	uxtb	r3, r3
   2a5cc:	2210      	movs	r2, #16
   2a5ce:	18ba      	adds	r2, r7, r2
   2a5d0:	0011      	movs	r1, r2
   2a5d2:	0018      	movs	r0, r3
   2a5d4:	4b39      	ldr	r3, [pc, #228]	; (2a6bc <tcc_init+0x368>)
   2a5d6:	4798      	blx	r3
   2a5d8:	e000      	b.n	2a5dc <tcc_init+0x288>
			continue;
   2a5da:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5de:	3301      	adds	r3, #1
   2a5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a5e2:	233b      	movs	r3, #59	; 0x3b
   2a5e4:	18fb      	adds	r3, r7, r3
   2a5e6:	781b      	ldrb	r3, [r3, #0]
   2a5e8:	4a28      	ldr	r2, [pc, #160]	; (2a68c <tcc_init+0x338>)
   2a5ea:	5cd3      	ldrb	r3, [r2, r3]
   2a5ec:	001a      	movs	r2, r3
   2a5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5f0:	429a      	cmp	r2, r3
   2a5f2:	dcc8      	bgt.n	2a586 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2a5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a5f6:	68bb      	ldr	r3, [r7, #8]
   2a5f8:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a5fa:	46c0      	nop			; (mov r8, r8)
   2a5fc:	68bb      	ldr	r3, [r7, #8]
   2a5fe:	689b      	ldr	r3, [r3, #8]
   2a600:	2204      	movs	r2, #4
   2a602:	4013      	ands	r3, r2
   2a604:	d1fa      	bne.n	2a5fc <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2a606:	68bb      	ldr	r3, [r7, #8]
   2a608:	22ff      	movs	r2, #255	; 0xff
   2a60a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a60c:	46c0      	nop			; (mov r8, r8)
   2a60e:	68bb      	ldr	r3, [r7, #8]
   2a610:	689b      	ldr	r3, [r3, #8]
   2a612:	2204      	movs	r2, #4
   2a614:	4013      	ands	r3, r2
   2a616:	d1fa      	bne.n	2a60e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2a618:	232b      	movs	r3, #43	; 0x2b
   2a61a:	18fb      	adds	r3, r7, r3
   2a61c:	781a      	ldrb	r2, [r3, #0]
   2a61e:	68bb      	ldr	r3, [r7, #8]
   2a620:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2a622:	2320      	movs	r3, #32
   2a624:	18fb      	adds	r3, r7, r3
   2a626:	681a      	ldr	r2, [r3, #0]
   2a628:	68bb      	ldr	r3, [r7, #8]
   2a62a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a62c:	2320      	movs	r3, #32
   2a62e:	18fb      	adds	r3, r7, r3
   2a630:	685a      	ldr	r2, [r3, #4]
   2a632:	68bb      	ldr	r3, [r7, #8]
   2a634:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a636:	69fa      	ldr	r2, [r7, #28]
   2a638:	68bb      	ldr	r3, [r7, #8]
   2a63a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a63c:	46c0      	nop			; (mov r8, r8)
   2a63e:	68bb      	ldr	r3, [r7, #8]
   2a640:	689b      	ldr	r3, [r3, #8]
   2a642:	4a1f      	ldr	r2, [pc, #124]	; (2a6c0 <tcc_init+0x36c>)
   2a644:	4013      	ands	r3, r2
   2a646:	d1fa      	bne.n	2a63e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a648:	69ba      	ldr	r2, [r7, #24]
   2a64a:	68bb      	ldr	r3, [r7, #8]
   2a64c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a64e:	46c0      	nop			; (mov r8, r8)
   2a650:	68bb      	ldr	r3, [r7, #8]
   2a652:	689b      	ldr	r3, [r3, #8]
   2a654:	2210      	movs	r2, #16
   2a656:	4013      	ands	r3, r2
   2a658:	d1fa      	bne.n	2a650 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a65a:	687b      	ldr	r3, [r7, #4]
   2a65c:	681a      	ldr	r2, [r3, #0]
   2a65e:	68bb      	ldr	r3, [r7, #8]
   2a660:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a662:	46c0      	nop			; (mov r8, r8)
   2a664:	68bb      	ldr	r3, [r7, #8]
   2a666:	689b      	ldr	r3, [r3, #8]
   2a668:	4a16      	ldr	r2, [pc, #88]	; (2a6c4 <tcc_init+0x370>)
   2a66a:	4013      	ands	r3, r2
   2a66c:	d1fa      	bne.n	2a664 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a66e:	687b      	ldr	r3, [r7, #4]
   2a670:	685a      	ldr	r2, [r3, #4]
   2a672:	68bb      	ldr	r3, [r7, #8]
   2a674:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a676:	2300      	movs	r3, #0
   2a678:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a67a:	e03f      	b.n	2a6fc <tcc_init+0x3a8>
   2a67c:	00029cbd 	.word	0x00029cbd
   2a680:	000389e0 	.word	0x000389e0
   2a684:	00029c39 	.word	0x00029c39
   2a688:	000389ec 	.word	0x000389ec
   2a68c:	000389fc 	.word	0x000389fc
   2a690:	00029fc9 	.word	0x00029fc9
   2a694:	0002a06d 	.word	0x0002a06d
   2a698:	0002a0c9 	.word	0x0002a0c9
   2a69c:	0002a1e5 	.word	0x0002a1e5
   2a6a0:	0002a2bd 	.word	0x0002a2bd
   2a6a4:	20005adc 	.word	0x20005adc
   2a6a8:	00029c21 	.word	0x00029c21
   2a6ac:	000389dc 	.word	0x000389dc
   2a6b0:	00029839 	.word	0x00029839
   2a6b4:	0002987d 	.word	0x0002987d
   2a6b8:	00029c95 	.word	0x00029c95
   2a6bc:	00029b99 	.word	0x00029b99
   2a6c0:	00020040 	.word	0x00020040
   2a6c4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a6c8:	46c0      	nop			; (mov r8, r8)
   2a6ca:	68bb      	ldr	r3, [r7, #8]
   2a6cc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a6ce:	4912      	ldr	r1, [pc, #72]	; (2a718 <tcc_init+0x3c4>)
   2a6d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a6d2:	4091      	lsls	r1, r2
   2a6d4:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2a6d6:	4013      	ands	r3, r2
   2a6d8:	d1f7      	bne.n	2a6ca <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2a6da:	687a      	ldr	r2, [r7, #4]
   2a6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a6de:	3306      	adds	r3, #6
   2a6e0:	009b      	lsls	r3, r3, #2
   2a6e2:	18d3      	adds	r3, r2, r3
   2a6e4:	3304      	adds	r3, #4
   2a6e6:	681a      	ldr	r2, [r3, #0]
   2a6e8:	68b9      	ldr	r1, [r7, #8]
   2a6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a6ec:	3310      	adds	r3, #16
   2a6ee:	009b      	lsls	r3, r3, #2
   2a6f0:	18cb      	adds	r3, r1, r3
   2a6f2:	3304      	adds	r3, #4
   2a6f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a6f8:	3301      	adds	r3, #1
   2a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a6fc:	233b      	movs	r3, #59	; 0x3b
   2a6fe:	18fb      	adds	r3, r7, r3
   2a700:	781b      	ldrb	r3, [r3, #0]
   2a702:	4a06      	ldr	r2, [pc, #24]	; (2a71c <tcc_init+0x3c8>)
   2a704:	5cd3      	ldrb	r3, [r2, r3]
   2a706:	001a      	movs	r2, r3
   2a708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a70a:	429a      	cmp	r2, r3
   2a70c:	dcdc      	bgt.n	2a6c8 <tcc_init+0x374>
	}

	return STATUS_OK;
   2a70e:	2300      	movs	r3, #0
}
   2a710:	0018      	movs	r0, r3
   2a712:	46bd      	mov	sp, r7
   2a714:	b011      	add	sp, #68	; 0x44
   2a716:	bd90      	pop	{r4, r7, pc}
   2a718:	00080100 	.word	0x00080100
   2a71c:	000389f8 	.word	0x000389f8

0002a720 <system_interrupt_enable>:
{
   2a720:	b580      	push	{r7, lr}
   2a722:	b082      	sub	sp, #8
   2a724:	af00      	add	r7, sp, #0
   2a726:	0002      	movs	r2, r0
   2a728:	1dfb      	adds	r3, r7, #7
   2a72a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a72c:	4b06      	ldr	r3, [pc, #24]	; (2a748 <system_interrupt_enable+0x28>)
   2a72e:	1dfa      	adds	r2, r7, #7
   2a730:	7812      	ldrb	r2, [r2, #0]
   2a732:	0011      	movs	r1, r2
   2a734:	221f      	movs	r2, #31
   2a736:	400a      	ands	r2, r1
   2a738:	2101      	movs	r1, #1
   2a73a:	4091      	lsls	r1, r2
   2a73c:	000a      	movs	r2, r1
   2a73e:	601a      	str	r2, [r3, #0]
}
   2a740:	46c0      	nop			; (mov r8, r8)
   2a742:	46bd      	mov	sp, r7
   2a744:	b002      	add	sp, #8
   2a746:	bd80      	pop	{r7, pc}
   2a748:	e000e100 	.word	0xe000e100

0002a74c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2a74c:	b580      	push	{r7, lr}
   2a74e:	b082      	sub	sp, #8
   2a750:	af00      	add	r7, sp, #0
   2a752:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2a754:	4a04      	ldr	r2, [pc, #16]	; (2a768 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2a756:	687b      	ldr	r3, [r7, #4]
   2a758:	18d3      	adds	r3, r2, r3
   2a75a:	781b      	ldrb	r3, [r3, #0]
   2a75c:	b25b      	sxtb	r3, r3
}
   2a75e:	0018      	movs	r0, r3
   2a760:	46bd      	mov	sp, r7
   2a762:	b002      	add	sp, #8
   2a764:	bd80      	pop	{r7, pc}
   2a766:	46c0      	nop			; (mov r8, r8)
   2a768:	20000110 	.word	0x20000110

0002a76c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2a76c:	b580      	push	{r7, lr}
   2a76e:	b084      	sub	sp, #16
   2a770:	af00      	add	r7, sp, #0
   2a772:	60f8      	str	r0, [r7, #12]
   2a774:	60b9      	str	r1, [r7, #8]
   2a776:	1dfb      	adds	r3, r7, #7
   2a778:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2a77a:	1dfb      	adds	r3, r7, #7
   2a77c:	781b      	ldrb	r3, [r3, #0]
   2a77e:	68fa      	ldr	r2, [r7, #12]
   2a780:	009b      	lsls	r3, r3, #2
   2a782:	18d3      	adds	r3, r2, r3
   2a784:	3304      	adds	r3, #4
   2a786:	68ba      	ldr	r2, [r7, #8]
   2a788:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2a78a:	68fb      	ldr	r3, [r7, #12]
   2a78c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2a78e:	1dfb      	adds	r3, r7, #7
   2a790:	7819      	ldrb	r1, [r3, #0]
   2a792:	4b05      	ldr	r3, [pc, #20]	; (2a7a8 <tcc_register_callback+0x3c>)
   2a794:	0089      	lsls	r1, r1, #2
   2a796:	58cb      	ldr	r3, [r1, r3]
   2a798:	431a      	orrs	r2, r3
   2a79a:	68fb      	ldr	r3, [r7, #12]
   2a79c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2a79e:	2300      	movs	r3, #0
}
   2a7a0:	0018      	movs	r0, r3
   2a7a2:	46bd      	mov	sp, r7
   2a7a4:	b004      	add	sp, #16
   2a7a6:	bd80      	pop	{r7, pc}
   2a7a8:	00038a00 	.word	0x00038a00

0002a7ac <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2a7ac:	b580      	push	{r7, lr}
   2a7ae:	b082      	sub	sp, #8
   2a7b0:	af00      	add	r7, sp, #0
   2a7b2:	6078      	str	r0, [r7, #4]
   2a7b4:	000a      	movs	r2, r1
   2a7b6:	1cfb      	adds	r3, r7, #3
   2a7b8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2a7ba:	687b      	ldr	r3, [r7, #4]
   2a7bc:	681b      	ldr	r3, [r3, #0]
   2a7be:	0018      	movs	r0, r3
   2a7c0:	4b0f      	ldr	r3, [pc, #60]	; (2a800 <tcc_enable_callback+0x54>)
   2a7c2:	4798      	blx	r3
   2a7c4:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2a7c6:	0018      	movs	r0, r3
   2a7c8:	4b0e      	ldr	r3, [pc, #56]	; (2a804 <tcc_enable_callback+0x58>)
   2a7ca:	4798      	blx	r3
   2a7cc:	0003      	movs	r3, r0
   2a7ce:	0018      	movs	r0, r3
   2a7d0:	4b0d      	ldr	r3, [pc, #52]	; (2a808 <tcc_enable_callback+0x5c>)
   2a7d2:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a7d4:	687b      	ldr	r3, [r7, #4]
   2a7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a7d8:	1cfb      	adds	r3, r7, #3
   2a7da:	7819      	ldrb	r1, [r3, #0]
   2a7dc:	4b0b      	ldr	r3, [pc, #44]	; (2a80c <tcc_enable_callback+0x60>)
   2a7de:	0089      	lsls	r1, r1, #2
   2a7e0:	58cb      	ldr	r3, [r1, r3]
   2a7e2:	431a      	orrs	r2, r3
   2a7e4:	687b      	ldr	r3, [r7, #4]
   2a7e6:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a7e8:	687b      	ldr	r3, [r7, #4]
   2a7ea:	681b      	ldr	r3, [r3, #0]
   2a7ec:	1cfa      	adds	r2, r7, #3
   2a7ee:	7811      	ldrb	r1, [r2, #0]
   2a7f0:	4a06      	ldr	r2, [pc, #24]	; (2a80c <tcc_enable_callback+0x60>)
   2a7f2:	0089      	lsls	r1, r1, #2
   2a7f4:	588a      	ldr	r2, [r1, r2]
   2a7f6:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a7f8:	46c0      	nop			; (mov r8, r8)
   2a7fa:	46bd      	mov	sp, r7
   2a7fc:	b002      	add	sp, #8
   2a7fe:	bd80      	pop	{r7, pc}
   2a800:	00029cbd 	.word	0x00029cbd
   2a804:	0002a74d 	.word	0x0002a74d
   2a808:	0002a721 	.word	0x0002a721
   2a80c:	00038a00 	.word	0x00038a00

0002a810 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a810:	b580      	push	{r7, lr}
   2a812:	af00      	add	r7, sp, #0
   2a814:	2000      	movs	r0, #0
   2a816:	4b02      	ldr	r3, [pc, #8]	; (2a820 <TCC0_Handler+0x10>)
   2a818:	4798      	blx	r3
   2a81a:	46c0      	nop			; (mov r8, r8)
   2a81c:	46bd      	mov	sp, r7
   2a81e:	bd80      	pop	{r7, pc}
   2a820:	0002a84d 	.word	0x0002a84d

0002a824 <TCC1_Handler>:
   2a824:	b580      	push	{r7, lr}
   2a826:	af00      	add	r7, sp, #0
   2a828:	2001      	movs	r0, #1
   2a82a:	4b02      	ldr	r3, [pc, #8]	; (2a834 <TCC1_Handler+0x10>)
   2a82c:	4798      	blx	r3
   2a82e:	46c0      	nop			; (mov r8, r8)
   2a830:	46bd      	mov	sp, r7
   2a832:	bd80      	pop	{r7, pc}
   2a834:	0002a84d 	.word	0x0002a84d

0002a838 <TCC2_Handler>:
   2a838:	b580      	push	{r7, lr}
   2a83a:	af00      	add	r7, sp, #0
   2a83c:	2002      	movs	r0, #2
   2a83e:	4b02      	ldr	r3, [pc, #8]	; (2a848 <TCC2_Handler+0x10>)
   2a840:	4798      	blx	r3
   2a842:	46c0      	nop			; (mov r8, r8)
   2a844:	46bd      	mov	sp, r7
   2a846:	bd80      	pop	{r7, pc}
   2a848:	0002a84d 	.word	0x0002a84d

0002a84c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a84c:	b580      	push	{r7, lr}
   2a84e:	b086      	sub	sp, #24
   2a850:	af00      	add	r7, sp, #0
   2a852:	0002      	movs	r2, r0
   2a854:	1dfb      	adds	r3, r7, #7
   2a856:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a858:	1dfb      	adds	r3, r7, #7
   2a85a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a85c:	4b18      	ldr	r3, [pc, #96]	; (2a8c0 <_tcc_interrupt_handler+0x74>)
   2a85e:	0092      	lsls	r2, r2, #2
   2a860:	58d3      	ldr	r3, [r2, r3]
   2a862:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a864:	693b      	ldr	r3, [r7, #16]
   2a866:	681b      	ldr	r3, [r3, #0]
   2a868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a86a:	693b      	ldr	r3, [r7, #16]
   2a86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a86e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a870:	693b      	ldr	r3, [r7, #16]
   2a872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a874:	4013      	ands	r3, r2
   2a876:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a878:	2300      	movs	r3, #0
   2a87a:	617b      	str	r3, [r7, #20]
   2a87c:	e019      	b.n	2a8b2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a87e:	4b11      	ldr	r3, [pc, #68]	; (2a8c4 <_tcc_interrupt_handler+0x78>)
   2a880:	697a      	ldr	r2, [r7, #20]
   2a882:	0092      	lsls	r2, r2, #2
   2a884:	58d3      	ldr	r3, [r2, r3]
   2a886:	68fa      	ldr	r2, [r7, #12]
   2a888:	4013      	ands	r3, r2
   2a88a:	d00f      	beq.n	2a8ac <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a88c:	693a      	ldr	r2, [r7, #16]
   2a88e:	697b      	ldr	r3, [r7, #20]
   2a890:	009b      	lsls	r3, r3, #2
   2a892:	18d3      	adds	r3, r2, r3
   2a894:	3304      	adds	r3, #4
   2a896:	681b      	ldr	r3, [r3, #0]
   2a898:	693a      	ldr	r2, [r7, #16]
   2a89a:	0010      	movs	r0, r2
   2a89c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a89e:	693b      	ldr	r3, [r7, #16]
   2a8a0:	681b      	ldr	r3, [r3, #0]
   2a8a2:	4a08      	ldr	r2, [pc, #32]	; (2a8c4 <_tcc_interrupt_handler+0x78>)
   2a8a4:	6979      	ldr	r1, [r7, #20]
   2a8a6:	0089      	lsls	r1, r1, #2
   2a8a8:	588a      	ldr	r2, [r1, r2]
   2a8aa:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a8ac:	697b      	ldr	r3, [r7, #20]
   2a8ae:	3301      	adds	r3, #1
   2a8b0:	617b      	str	r3, [r7, #20]
   2a8b2:	697b      	ldr	r3, [r7, #20]
   2a8b4:	2b0b      	cmp	r3, #11
   2a8b6:	dde2      	ble.n	2a87e <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a8b8:	46c0      	nop			; (mov r8, r8)
   2a8ba:	46bd      	mov	sp, r7
   2a8bc:	b006      	add	sp, #24
   2a8be:	bd80      	pop	{r7, pc}
   2a8c0:	20005adc 	.word	0x20005adc
   2a8c4:	00038a00 	.word	0x00038a00

0002a8c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a8c8:	b580      	push	{r7, lr}
   2a8ca:	b082      	sub	sp, #8
   2a8cc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a8ce:	4b2f      	ldr	r3, [pc, #188]	; (2a98c <Reset_Handler+0xc4>)
   2a8d0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a8d2:	4b2f      	ldr	r3, [pc, #188]	; (2a990 <Reset_Handler+0xc8>)
   2a8d4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a8d6:	687a      	ldr	r2, [r7, #4]
   2a8d8:	683b      	ldr	r3, [r7, #0]
   2a8da:	429a      	cmp	r2, r3
   2a8dc:	d00c      	beq.n	2a8f8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a8de:	e007      	b.n	2a8f0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a8e0:	683b      	ldr	r3, [r7, #0]
   2a8e2:	1d1a      	adds	r2, r3, #4
   2a8e4:	603a      	str	r2, [r7, #0]
   2a8e6:	687a      	ldr	r2, [r7, #4]
   2a8e8:	1d11      	adds	r1, r2, #4
   2a8ea:	6079      	str	r1, [r7, #4]
   2a8ec:	6812      	ldr	r2, [r2, #0]
   2a8ee:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a8f0:	683a      	ldr	r2, [r7, #0]
   2a8f2:	4b28      	ldr	r3, [pc, #160]	; (2a994 <Reset_Handler+0xcc>)
   2a8f4:	429a      	cmp	r2, r3
   2a8f6:	d3f3      	bcc.n	2a8e0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a8f8:	4b27      	ldr	r3, [pc, #156]	; (2a998 <Reset_Handler+0xd0>)
   2a8fa:	603b      	str	r3, [r7, #0]
   2a8fc:	e004      	b.n	2a908 <Reset_Handler+0x40>
                *pDest++ = 0;
   2a8fe:	683b      	ldr	r3, [r7, #0]
   2a900:	1d1a      	adds	r2, r3, #4
   2a902:	603a      	str	r2, [r7, #0]
   2a904:	2200      	movs	r2, #0
   2a906:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a908:	683a      	ldr	r2, [r7, #0]
   2a90a:	4b24      	ldr	r3, [pc, #144]	; (2a99c <Reset_Handler+0xd4>)
   2a90c:	429a      	cmp	r2, r3
   2a90e:	d3f6      	bcc.n	2a8fe <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a910:	4b23      	ldr	r3, [pc, #140]	; (2a9a0 <Reset_Handler+0xd8>)
   2a912:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a914:	4b23      	ldr	r3, [pc, #140]	; (2a9a4 <Reset_Handler+0xdc>)
   2a916:	687a      	ldr	r2, [r7, #4]
   2a918:	21ff      	movs	r1, #255	; 0xff
   2a91a:	438a      	bics	r2, r1
   2a91c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a91e:	4a22      	ldr	r2, [pc, #136]	; (2a9a8 <Reset_Handler+0xe0>)
   2a920:	2390      	movs	r3, #144	; 0x90
   2a922:	005b      	lsls	r3, r3, #1
   2a924:	2102      	movs	r1, #2
   2a926:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a928:	4a20      	ldr	r2, [pc, #128]	; (2a9ac <Reset_Handler+0xe4>)
   2a92a:	78d3      	ldrb	r3, [r2, #3]
   2a92c:	2103      	movs	r1, #3
   2a92e:	438b      	bics	r3, r1
   2a930:	1c19      	adds	r1, r3, #0
   2a932:	2302      	movs	r3, #2
   2a934:	430b      	orrs	r3, r1
   2a936:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a938:	4a1c      	ldr	r2, [pc, #112]	; (2a9ac <Reset_Handler+0xe4>)
   2a93a:	78d3      	ldrb	r3, [r2, #3]
   2a93c:	210c      	movs	r1, #12
   2a93e:	438b      	bics	r3, r1
   2a940:	1c19      	adds	r1, r3, #0
   2a942:	2308      	movs	r3, #8
   2a944:	430b      	orrs	r3, r1
   2a946:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a948:	4a19      	ldr	r2, [pc, #100]	; (2a9b0 <Reset_Handler+0xe8>)
   2a94a:	7b93      	ldrb	r3, [r2, #14]
   2a94c:	2130      	movs	r1, #48	; 0x30
   2a94e:	438b      	bics	r3, r1
   2a950:	1c19      	adds	r1, r3, #0
   2a952:	2320      	movs	r3, #32
   2a954:	430b      	orrs	r3, r1
   2a956:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a958:	4a15      	ldr	r2, [pc, #84]	; (2a9b0 <Reset_Handler+0xe8>)
   2a95a:	7b93      	ldrb	r3, [r2, #14]
   2a95c:	210c      	movs	r1, #12
   2a95e:	438b      	bics	r3, r1
   2a960:	1c19      	adds	r1, r3, #0
   2a962:	2308      	movs	r3, #8
   2a964:	430b      	orrs	r3, r1
   2a966:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a968:	4a11      	ldr	r2, [pc, #68]	; (2a9b0 <Reset_Handler+0xe8>)
   2a96a:	7b93      	ldrb	r3, [r2, #14]
   2a96c:	2103      	movs	r1, #3
   2a96e:	438b      	bics	r3, r1
   2a970:	1c19      	adds	r1, r3, #0
   2a972:	2302      	movs	r3, #2
   2a974:	430b      	orrs	r3, r1
   2a976:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a978:	4a0e      	ldr	r2, [pc, #56]	; (2a9b4 <Reset_Handler+0xec>)
   2a97a:	6853      	ldr	r3, [r2, #4]
   2a97c:	2180      	movs	r1, #128	; 0x80
   2a97e:	430b      	orrs	r3, r1
   2a980:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a982:	4b0d      	ldr	r3, [pc, #52]	; (2a9b8 <Reset_Handler+0xf0>)
   2a984:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a986:	4b0d      	ldr	r3, [pc, #52]	; (2a9bc <Reset_Handler+0xf4>)
   2a988:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a98a:	e7fe      	b.n	2a98a <Reset_Handler+0xc2>
   2a98c:	000396fc 	.word	0x000396fc
   2a990:	20000000 	.word	0x20000000
   2a994:	200002e8 	.word	0x200002e8
   2a998:	200002f0 	.word	0x200002f0
   2a99c:	20005b4c 	.word	0x20005b4c
   2a9a0:	00012000 	.word	0x00012000
   2a9a4:	e000ed00 	.word	0xe000ed00
   2a9a8:	41007000 	.word	0x41007000
   2a9ac:	41005000 	.word	0x41005000
   2a9b0:	41004800 	.word	0x41004800
   2a9b4:	41004000 	.word	0x41004000
   2a9b8:	00033f9d 	.word	0x00033f9d
   2a9bc:	00032121 	.word	0x00032121

0002a9c0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a9c0:	b580      	push	{r7, lr}
   2a9c2:	af00      	add	r7, sp, #0
  __asm volatile (
   2a9c4:	2004      	movs	r0, #4
   2a9c6:	4671      	mov	r1, lr
   2a9c8:	4208      	tst	r0, r1
   2a9ca:	d002      	beq.n	2a9d2 <_MSP>
   2a9cc:	f3ef 8009 	mrs	r0, PSP
   2a9d0:	e001      	b.n	2a9d6 <_HALT>

0002a9d2 <_MSP>:
   2a9d2:	f3ef 8008 	mrs	r0, MSP

0002a9d6 <_HALT>:
   2a9d6:	6941      	ldr	r1, [r0, #20]
   2a9d8:	e004      	b.n	2a9e4 <HardFault_HandlerC>
   2a9da:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2a9dc:	46c0      	nop			; (mov r8, r8)
   2a9de:	46bd      	mov	sp, r7
   2a9e0:	bd80      	pop	{r7, pc}
	...

0002a9e4 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2a9e4:	b580      	push	{r7, lr}
   2a9e6:	b090      	sub	sp, #64	; 0x40
   2a9e8:	af00      	add	r7, sp, #0
   2a9ea:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2a9ec:	687b      	ldr	r3, [r7, #4]
   2a9ee:	681b      	ldr	r3, [r3, #0]
   2a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2a9f2:	687b      	ldr	r3, [r7, #4]
   2a9f4:	685b      	ldr	r3, [r3, #4]
   2a9f6:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2a9f8:	687b      	ldr	r3, [r7, #4]
   2a9fa:	689b      	ldr	r3, [r3, #8]
   2a9fc:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2a9fe:	687b      	ldr	r3, [r7, #4]
   2aa00:	68db      	ldr	r3, [r3, #12]
   2aa02:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2aa04:	687b      	ldr	r3, [r7, #4]
   2aa06:	691b      	ldr	r3, [r3, #16]
   2aa08:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2aa0a:	687b      	ldr	r3, [r7, #4]
   2aa0c:	695b      	ldr	r3, [r3, #20]
   2aa0e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2aa10:	687b      	ldr	r3, [r7, #4]
   2aa12:	699b      	ldr	r3, [r3, #24]
   2aa14:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2aa16:	687b      	ldr	r3, [r7, #4]
   2aa18:	69db      	ldr	r3, [r3, #28]
   2aa1a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2aa1c:	4b0b      	ldr	r3, [pc, #44]	; (2aa4c <HardFault_HandlerC+0x68>)
   2aa1e:	681b      	ldr	r3, [r3, #0]
   2aa20:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2aa22:	4b0b      	ldr	r3, [pc, #44]	; (2aa50 <HardFault_HandlerC+0x6c>)
   2aa24:	681b      	ldr	r3, [r3, #0]
   2aa26:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2aa28:	4b0a      	ldr	r3, [pc, #40]	; (2aa54 <HardFault_HandlerC+0x70>)
   2aa2a:	681b      	ldr	r3, [r3, #0]
   2aa2c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2aa2e:	4b0a      	ldr	r3, [pc, #40]	; (2aa58 <HardFault_HandlerC+0x74>)
   2aa30:	681b      	ldr	r3, [r3, #0]
   2aa32:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2aa34:	4b09      	ldr	r3, [pc, #36]	; (2aa5c <HardFault_HandlerC+0x78>)
   2aa36:	681b      	ldr	r3, [r3, #0]
   2aa38:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2aa3a:	4b09      	ldr	r3, [pc, #36]	; (2aa60 <HardFault_HandlerC+0x7c>)
   2aa3c:	681b      	ldr	r3, [r3, #0]
   2aa3e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2aa40:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2aa42:	46c0      	nop			; (mov r8, r8)
   2aa44:	46bd      	mov	sp, r7
   2aa46:	b010      	add	sp, #64	; 0x40
   2aa48:	bd80      	pop	{r7, pc}
   2aa4a:	46c0      	nop			; (mov r8, r8)
   2aa4c:	e000ed28 	.word	0xe000ed28
   2aa50:	e000ed2c 	.word	0xe000ed2c
   2aa54:	e000ed30 	.word	0xe000ed30
   2aa58:	e000ed3c 	.word	0xe000ed3c
   2aa5c:	e000ed34 	.word	0xe000ed34
   2aa60:	e000ed38 	.word	0xe000ed38

0002aa64 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2aa64:	b580      	push	{r7, lr}
   2aa66:	b086      	sub	sp, #24
   2aa68:	af00      	add	r7, sp, #0
   2aa6a:	60f8      	str	r0, [r7, #12]
   2aa6c:	60b9      	str	r1, [r7, #8]
   2aa6e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2aa70:	2300      	movs	r3, #0
   2aa72:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2aa74:	68fb      	ldr	r3, [r7, #12]
   2aa76:	2b00      	cmp	r3, #0
   2aa78:	d012      	beq.n	2aaa0 <_read+0x3c>
		return -1;
   2aa7a:	2301      	movs	r3, #1
   2aa7c:	425b      	negs	r3, r3
   2aa7e:	e013      	b.n	2aaa8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2aa80:	4b0b      	ldr	r3, [pc, #44]	; (2aab0 <_read+0x4c>)
   2aa82:	681a      	ldr	r2, [r3, #0]
   2aa84:	4b0b      	ldr	r3, [pc, #44]	; (2aab4 <_read+0x50>)
   2aa86:	681b      	ldr	r3, [r3, #0]
   2aa88:	68b9      	ldr	r1, [r7, #8]
   2aa8a:	0018      	movs	r0, r3
   2aa8c:	4790      	blx	r2
		ptr++;
   2aa8e:	68bb      	ldr	r3, [r7, #8]
   2aa90:	3301      	adds	r3, #1
   2aa92:	60bb      	str	r3, [r7, #8]
		nChars++;
   2aa94:	697b      	ldr	r3, [r7, #20]
   2aa96:	3301      	adds	r3, #1
   2aa98:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2aa9a:	687b      	ldr	r3, [r7, #4]
   2aa9c:	3b01      	subs	r3, #1
   2aa9e:	607b      	str	r3, [r7, #4]
   2aaa0:	687b      	ldr	r3, [r7, #4]
   2aaa2:	2b00      	cmp	r3, #0
   2aaa4:	dcec      	bgt.n	2aa80 <_read+0x1c>
	}
	return nChars;
   2aaa6:	697b      	ldr	r3, [r7, #20]
}
   2aaa8:	0018      	movs	r0, r3
   2aaaa:	46bd      	mov	sp, r7
   2aaac:	b006      	add	sp, #24
   2aaae:	bd80      	pop	{r7, pc}
   2aab0:	20005ae8 	.word	0x20005ae8
   2aab4:	20005af0 	.word	0x20005af0

0002aab8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2aab8:	b580      	push	{r7, lr}
   2aaba:	b086      	sub	sp, #24
   2aabc:	af00      	add	r7, sp, #0
   2aabe:	60f8      	str	r0, [r7, #12]
   2aac0:	60b9      	str	r1, [r7, #8]
   2aac2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2aac4:	2300      	movs	r3, #0
   2aac6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2aac8:	68fb      	ldr	r3, [r7, #12]
   2aaca:	2b01      	cmp	r3, #1
   2aacc:	d01d      	beq.n	2ab0a <_write+0x52>
   2aace:	68fb      	ldr	r3, [r7, #12]
   2aad0:	2b02      	cmp	r3, #2
   2aad2:	d01a      	beq.n	2ab0a <_write+0x52>
   2aad4:	68fb      	ldr	r3, [r7, #12]
   2aad6:	2b03      	cmp	r3, #3
   2aad8:	d017      	beq.n	2ab0a <_write+0x52>
		return -1;
   2aada:	2301      	movs	r3, #1
   2aadc:	425b      	negs	r3, r3
   2aade:	e018      	b.n	2ab12 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2aae0:	4b0e      	ldr	r3, [pc, #56]	; (2ab1c <_write+0x64>)
   2aae2:	681a      	ldr	r2, [r3, #0]
   2aae4:	4b0e      	ldr	r3, [pc, #56]	; (2ab20 <_write+0x68>)
   2aae6:	6818      	ldr	r0, [r3, #0]
   2aae8:	68bb      	ldr	r3, [r7, #8]
   2aaea:	1c59      	adds	r1, r3, #1
   2aaec:	60b9      	str	r1, [r7, #8]
   2aaee:	781b      	ldrb	r3, [r3, #0]
   2aaf0:	0019      	movs	r1, r3
   2aaf2:	4790      	blx	r2
   2aaf4:	1e03      	subs	r3, r0, #0
   2aaf6:	da02      	bge.n	2aafe <_write+0x46>
			return -1;
   2aaf8:	2301      	movs	r3, #1
   2aafa:	425b      	negs	r3, r3
   2aafc:	e009      	b.n	2ab12 <_write+0x5a>
		}
		++nChars;
   2aafe:	697b      	ldr	r3, [r7, #20]
   2ab00:	3301      	adds	r3, #1
   2ab02:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2ab04:	687b      	ldr	r3, [r7, #4]
   2ab06:	3b01      	subs	r3, #1
   2ab08:	607b      	str	r3, [r7, #4]
   2ab0a:	687b      	ldr	r3, [r7, #4]
   2ab0c:	2b00      	cmp	r3, #0
   2ab0e:	d1e7      	bne.n	2aae0 <_write+0x28>
	}
	return nChars;
   2ab10:	697b      	ldr	r3, [r7, #20]
}
   2ab12:	0018      	movs	r0, r3
   2ab14:	46bd      	mov	sp, r7
   2ab16:	b006      	add	sp, #24
   2ab18:	bd80      	pop	{r7, pc}
   2ab1a:	46c0      	nop			; (mov r8, r8)
   2ab1c:	20005aec 	.word	0x20005aec
   2ab20:	20005af0 	.word	0x20005af0

0002ab24 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2ab24:	b580      	push	{r7, lr}
   2ab26:	b084      	sub	sp, #16
   2ab28:	af00      	add	r7, sp, #0
   2ab2a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2ab2c:	4b0a      	ldr	r3, [pc, #40]	; (2ab58 <_sbrk+0x34>)
   2ab2e:	681b      	ldr	r3, [r3, #0]
   2ab30:	2b00      	cmp	r3, #0
   2ab32:	d102      	bne.n	2ab3a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2ab34:	4b08      	ldr	r3, [pc, #32]	; (2ab58 <_sbrk+0x34>)
   2ab36:	4a09      	ldr	r2, [pc, #36]	; (2ab5c <_sbrk+0x38>)
   2ab38:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2ab3a:	4b07      	ldr	r3, [pc, #28]	; (2ab58 <_sbrk+0x34>)
   2ab3c:	681b      	ldr	r3, [r3, #0]
   2ab3e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2ab40:	4b05      	ldr	r3, [pc, #20]	; (2ab58 <_sbrk+0x34>)
   2ab42:	681a      	ldr	r2, [r3, #0]
   2ab44:	687b      	ldr	r3, [r7, #4]
   2ab46:	18d2      	adds	r2, r2, r3
   2ab48:	4b03      	ldr	r3, [pc, #12]	; (2ab58 <_sbrk+0x34>)
   2ab4a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2ab4c:	68fb      	ldr	r3, [r7, #12]
}
   2ab4e:	0018      	movs	r0, r3
   2ab50:	46bd      	mov	sp, r7
   2ab52:	b004      	add	sp, #16
   2ab54:	bd80      	pop	{r7, pc}
   2ab56:	46c0      	nop			; (mov r8, r8)
   2ab58:	20004150 	.word	0x20004150
   2ab5c:	20007b50 	.word	0x20007b50

0002ab60 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2ab60:	b580      	push	{r7, lr}
   2ab62:	b082      	sub	sp, #8
   2ab64:	af00      	add	r7, sp, #0
   2ab66:	6078      	str	r0, [r7, #4]
	return -1;
   2ab68:	2301      	movs	r3, #1
   2ab6a:	425b      	negs	r3, r3
}
   2ab6c:	0018      	movs	r0, r3
   2ab6e:	46bd      	mov	sp, r7
   2ab70:	b002      	add	sp, #8
   2ab72:	bd80      	pop	{r7, pc}

0002ab74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2ab74:	b580      	push	{r7, lr}
   2ab76:	b082      	sub	sp, #8
   2ab78:	af00      	add	r7, sp, #0
   2ab7a:	6078      	str	r0, [r7, #4]
   2ab7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2ab7e:	683b      	ldr	r3, [r7, #0]
   2ab80:	2280      	movs	r2, #128	; 0x80
   2ab82:	0192      	lsls	r2, r2, #6
   2ab84:	605a      	str	r2, [r3, #4]

	return 0;
   2ab86:	2300      	movs	r3, #0
}
   2ab88:	0018      	movs	r0, r3
   2ab8a:	46bd      	mov	sp, r7
   2ab8c:	b002      	add	sp, #8
   2ab8e:	bd80      	pop	{r7, pc}

0002ab90 <_isatty>:

extern int _isatty(int file)
{
   2ab90:	b580      	push	{r7, lr}
   2ab92:	b082      	sub	sp, #8
   2ab94:	af00      	add	r7, sp, #0
   2ab96:	6078      	str	r0, [r7, #4]
	return 1;
   2ab98:	2301      	movs	r3, #1
}
   2ab9a:	0018      	movs	r0, r3
   2ab9c:	46bd      	mov	sp, r7
   2ab9e:	b002      	add	sp, #8
   2aba0:	bd80      	pop	{r7, pc}

0002aba2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2aba2:	b580      	push	{r7, lr}
   2aba4:	b084      	sub	sp, #16
   2aba6:	af00      	add	r7, sp, #0
   2aba8:	60f8      	str	r0, [r7, #12]
   2abaa:	60b9      	str	r1, [r7, #8]
   2abac:	607a      	str	r2, [r7, #4]
	return 0;
   2abae:	2300      	movs	r3, #0
}
   2abb0:	0018      	movs	r0, r3
   2abb2:	46bd      	mov	sp, r7
   2abb4:	b004      	add	sp, #16
   2abb6:	bd80      	pop	{r7, pc}

0002abb8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2abb8:	b580      	push	{r7, lr}
   2abba:	b082      	sub	sp, #8
   2abbc:	af00      	add	r7, sp, #0
   2abbe:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2abc0:	687b      	ldr	r3, [r7, #4]
   2abc2:	2200      	movs	r2, #0
   2abc4:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2abc6:	687b      	ldr	r3, [r7, #4]
   2abc8:	2200      	movs	r2, #0
   2abca:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2abcc:	687b      	ldr	r3, [r7, #4]
   2abce:	2200      	movs	r2, #0
   2abd0:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2abd2:	687b      	ldr	r3, [r7, #4]
   2abd4:	2200      	movs	r2, #0
   2abd6:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2abd8:	687b      	ldr	r3, [r7, #4]
   2abda:	2201      	movs	r2, #1
   2abdc:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2abde:	687b      	ldr	r3, [r7, #4]
   2abe0:	2201      	movs	r2, #1
   2abe2:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2abe4:	687b      	ldr	r3, [r7, #4]
   2abe6:	22fa      	movs	r2, #250	; 0xfa
   2abe8:	00d2      	lsls	r2, r2, #3
   2abea:	80da      	strh	r2, [r3, #6]
}
   2abec:	46c0      	nop			; (mov r8, r8)
   2abee:	46bd      	mov	sp, r7
   2abf0:	b002      	add	sp, #8
   2abf2:	bd80      	pop	{r7, pc}

0002abf4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2abf4:	b580      	push	{r7, lr}
   2abf6:	b086      	sub	sp, #24
   2abf8:	af00      	add	r7, sp, #0
   2abfa:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2abfc:	230c      	movs	r3, #12
   2abfe:	18fb      	adds	r3, r7, r3
   2ac00:	0018      	movs	r0, r3
   2ac02:	4b23      	ldr	r3, [pc, #140]	; (2ac90 <rtc_calendar_get_config_defaults+0x9c>)
   2ac04:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2ac06:	687b      	ldr	r3, [r7, #4]
   2ac08:	22a0      	movs	r2, #160	; 0xa0
   2ac0a:	0112      	lsls	r2, r2, #4
   2ac0c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2ac0e:	687b      	ldr	r3, [r7, #4]
   2ac10:	2200      	movs	r2, #0
   2ac12:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2ac14:	687b      	ldr	r3, [r7, #4]
   2ac16:	2200      	movs	r2, #0
   2ac18:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2ac1a:	687b      	ldr	r3, [r7, #4]
   2ac1c:	2200      	movs	r2, #0
   2ac1e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2ac20:	687b      	ldr	r3, [r7, #4]
   2ac22:	22fa      	movs	r2, #250	; 0xfa
   2ac24:	00d2      	lsls	r2, r2, #3
   2ac26:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2ac28:	2317      	movs	r3, #23
   2ac2a:	18fb      	adds	r3, r7, r3
   2ac2c:	2200      	movs	r2, #0
   2ac2e:	701a      	strb	r2, [r3, #0]
   2ac30:	e025      	b.n	2ac7e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2ac32:	2317      	movs	r3, #23
   2ac34:	18fb      	adds	r3, r7, r3
   2ac36:	781a      	ldrb	r2, [r3, #0]
   2ac38:	6879      	ldr	r1, [r7, #4]
   2ac3a:	2008      	movs	r0, #8
   2ac3c:	0013      	movs	r3, r2
   2ac3e:	009b      	lsls	r3, r3, #2
   2ac40:	189b      	adds	r3, r3, r2
   2ac42:	005b      	lsls	r3, r3, #1
   2ac44:	18cb      	adds	r3, r1, r3
   2ac46:	181a      	adds	r2, r3, r0
   2ac48:	230c      	movs	r3, #12
   2ac4a:	18fb      	adds	r3, r7, r3
   2ac4c:	0010      	movs	r0, r2
   2ac4e:	0019      	movs	r1, r3
   2ac50:	2308      	movs	r3, #8
   2ac52:	001a      	movs	r2, r3
   2ac54:	4b0f      	ldr	r3, [pc, #60]	; (2ac94 <rtc_calendar_get_config_defaults+0xa0>)
   2ac56:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2ac58:	2317      	movs	r3, #23
   2ac5a:	18fb      	adds	r3, r7, r3
   2ac5c:	781a      	ldrb	r2, [r3, #0]
   2ac5e:	6879      	ldr	r1, [r7, #4]
   2ac60:	0013      	movs	r3, r2
   2ac62:	009b      	lsls	r3, r3, #2
   2ac64:	189b      	adds	r3, r3, r2
   2ac66:	005b      	lsls	r3, r3, #1
   2ac68:	18cb      	adds	r3, r1, r3
   2ac6a:	3310      	adds	r3, #16
   2ac6c:	2206      	movs	r2, #6
   2ac6e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2ac70:	2317      	movs	r3, #23
   2ac72:	18fb      	adds	r3, r7, r3
   2ac74:	781a      	ldrb	r2, [r3, #0]
   2ac76:	2317      	movs	r3, #23
   2ac78:	18fb      	adds	r3, r7, r3
   2ac7a:	3201      	adds	r2, #1
   2ac7c:	701a      	strb	r2, [r3, #0]
   2ac7e:	2317      	movs	r3, #23
   2ac80:	18fb      	adds	r3, r7, r3
   2ac82:	781b      	ldrb	r3, [r3, #0]
   2ac84:	2b00      	cmp	r3, #0
   2ac86:	d0d4      	beq.n	2ac32 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2ac88:	46c0      	nop			; (mov r8, r8)
   2ac8a:	46bd      	mov	sp, r7
   2ac8c:	b006      	add	sp, #24
   2ac8e:	bd80      	pop	{r7, pc}
   2ac90:	0002abb9 	.word	0x0002abb9
   2ac94:	0003400d 	.word	0x0003400d

0002ac98 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2ac98:	b580      	push	{r7, lr}
   2ac9a:	b088      	sub	sp, #32
   2ac9c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2ac9e:	230c      	movs	r3, #12
   2aca0:	18fb      	adds	r3, r7, r3
   2aca2:	0018      	movs	r0, r3
   2aca4:	4b1a      	ldr	r3, [pc, #104]	; (2ad10 <configure_rtc_calendar+0x78>)
   2aca6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2aca8:	1d3b      	adds	r3, r7, #4
   2acaa:	0018      	movs	r0, r3
   2acac:	4b19      	ldr	r3, [pc, #100]	; (2ad14 <configure_rtc_calendar+0x7c>)
   2acae:	4798      	blx	r3
	init_time.year   = 2014;
   2acb0:	1d3b      	adds	r3, r7, #4
   2acb2:	4a19      	ldr	r2, [pc, #100]	; (2ad18 <configure_rtc_calendar+0x80>)
   2acb4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2acb6:	1d3b      	adds	r3, r7, #4
   2acb8:	2201      	movs	r2, #1
   2acba:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2acbc:	1d3b      	adds	r3, r7, #4
   2acbe:	2201      	movs	r2, #1
   2acc0:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2acc2:	1d3b      	adds	r3, r7, #4
   2acc4:	2200      	movs	r2, #0
   2acc6:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2acc8:	1d3b      	adds	r3, r7, #4
   2acca:	2200      	movs	r2, #0
   2accc:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2acce:	1d3b      	adds	r3, r7, #4
   2acd0:	2204      	movs	r2, #4
   2acd2:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2acd4:	230c      	movs	r3, #12
   2acd6:	18fb      	adds	r3, r7, r3
   2acd8:	2201      	movs	r2, #1
   2acda:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2acdc:	230c      	movs	r3, #12
   2acde:	18fb      	adds	r3, r7, r3
   2ace0:	1d3a      	adds	r2, r7, #4
   2ace2:	3308      	adds	r3, #8
   2ace4:	ca03      	ldmia	r2!, {r0, r1}
   2ace6:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2ace8:	230c      	movs	r3, #12
   2acea:	18fb      	adds	r3, r7, r3
   2acec:	2206      	movs	r2, #6
   2acee:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2acf0:	230c      	movs	r3, #12
   2acf2:	18fa      	adds	r2, r7, r3
   2acf4:	4909      	ldr	r1, [pc, #36]	; (2ad1c <configure_rtc_calendar+0x84>)
   2acf6:	4b0a      	ldr	r3, [pc, #40]	; (2ad20 <configure_rtc_calendar+0x88>)
   2acf8:	0018      	movs	r0, r3
   2acfa:	4b0a      	ldr	r3, [pc, #40]	; (2ad24 <configure_rtc_calendar+0x8c>)
   2acfc:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2acfe:	4b08      	ldr	r3, [pc, #32]	; (2ad20 <configure_rtc_calendar+0x88>)
   2ad00:	0018      	movs	r0, r3
   2ad02:	4b09      	ldr	r3, [pc, #36]	; (2ad28 <configure_rtc_calendar+0x90>)
   2ad04:	4798      	blx	r3
}
   2ad06:	46c0      	nop			; (mov r8, r8)
   2ad08:	46bd      	mov	sp, r7
   2ad0a:	b008      	add	sp, #32
   2ad0c:	bd80      	pop	{r7, pc}
   2ad0e:	46c0      	nop			; (mov r8, r8)
   2ad10:	0002abf5 	.word	0x0002abf5
   2ad14:	0002abb9 	.word	0x0002abb9
   2ad18:	000007de 	.word	0x000007de
   2ad1c:	40001400 	.word	0x40001400
   2ad20:	20005af4 	.word	0x20005af4
   2ad24:	000267d5 	.word	0x000267d5
   2ad28:	00026501 	.word	0x00026501

0002ad2c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2ad2c:	b590      	push	{r4, r7, lr}
   2ad2e:	b085      	sub	sp, #20
   2ad30:	af00      	add	r7, sp, #0
   2ad32:	0002      	movs	r2, r0
   2ad34:	1dfb      	adds	r3, r7, #7
   2ad36:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2ad38:	4b1a      	ldr	r3, [pc, #104]	; (2ada4 <disk_initialize+0x78>)
   2ad3a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2ad3c:	1dfb      	adds	r3, r7, #7
   2ad3e:	781b      	ldrb	r3, [r3, #0]
   2ad40:	2b01      	cmp	r3, #1
   2ad42:	d901      	bls.n	2ad48 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2ad44:	2301      	movs	r3, #1
   2ad46:	e029      	b.n	2ad9c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2ad48:	2300      	movs	r3, #0
   2ad4a:	60fb      	str	r3, [r7, #12]
   2ad4c:	e010      	b.n	2ad70 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2ad4e:	230b      	movs	r3, #11
   2ad50:	18fc      	adds	r4, r7, r3
   2ad52:	1dfb      	adds	r3, r7, #7
   2ad54:	781b      	ldrb	r3, [r3, #0]
   2ad56:	0018      	movs	r0, r3
   2ad58:	4b13      	ldr	r3, [pc, #76]	; (2ada8 <disk_initialize+0x7c>)
   2ad5a:	4798      	blx	r3
   2ad5c:	0003      	movs	r3, r0
   2ad5e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2ad60:	230b      	movs	r3, #11
   2ad62:	18fb      	adds	r3, r7, r3
   2ad64:	781b      	ldrb	r3, [r3, #0]
   2ad66:	2b03      	cmp	r3, #3
   2ad68:	d106      	bne.n	2ad78 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2ad6a:	68fb      	ldr	r3, [r7, #12]
   2ad6c:	3301      	adds	r3, #1
   2ad6e:	60fb      	str	r3, [r7, #12]
   2ad70:	68fb      	ldr	r3, [r7, #12]
   2ad72:	2b01      	cmp	r3, #1
   2ad74:	ddeb      	ble.n	2ad4e <disk_initialize+0x22>
   2ad76:	e000      	b.n	2ad7a <disk_initialize+0x4e>
			break;
   2ad78:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2ad7a:	230b      	movs	r3, #11
   2ad7c:	18fb      	adds	r3, r7, r3
   2ad7e:	781b      	ldrb	r3, [r3, #0]
   2ad80:	2b00      	cmp	r3, #0
   2ad82:	d001      	beq.n	2ad88 <disk_initialize+0x5c>
		return STA_NOINIT;
   2ad84:	2301      	movs	r3, #1
   2ad86:	e009      	b.n	2ad9c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2ad88:	1dfb      	adds	r3, r7, #7
   2ad8a:	781b      	ldrb	r3, [r3, #0]
   2ad8c:	0018      	movs	r0, r3
   2ad8e:	4b07      	ldr	r3, [pc, #28]	; (2adac <disk_initialize+0x80>)
   2ad90:	4798      	blx	r3
   2ad92:	1e03      	subs	r3, r0, #0
   2ad94:	d001      	beq.n	2ad9a <disk_initialize+0x6e>
		return STA_PROTECT;
   2ad96:	2304      	movs	r3, #4
   2ad98:	e000      	b.n	2ad9c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2ad9a:	2300      	movs	r3, #0
}
   2ad9c:	0018      	movs	r0, r3
   2ad9e:	46bd      	mov	sp, r7
   2ada0:	b005      	add	sp, #20
   2ada2:	bd90      	pop	{r4, r7, pc}
   2ada4:	0002ac99 	.word	0x0002ac99
   2ada8:	000259fd 	.word	0x000259fd
   2adac:	00025ab5 	.word	0x00025ab5

0002adb0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2adb0:	b580      	push	{r7, lr}
   2adb2:	b082      	sub	sp, #8
   2adb4:	af00      	add	r7, sp, #0
   2adb6:	0002      	movs	r2, r0
   2adb8:	1dfb      	adds	r3, r7, #7
   2adba:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2adbc:	1dfb      	adds	r3, r7, #7
   2adbe:	781b      	ldrb	r3, [r3, #0]
   2adc0:	0018      	movs	r0, r3
   2adc2:	4b08      	ldr	r3, [pc, #32]	; (2ade4 <disk_status+0x34>)
   2adc4:	4798      	blx	r3
   2adc6:	1e03      	subs	r3, r0, #0
   2adc8:	d002      	beq.n	2add0 <disk_status+0x20>
   2adca:	2b02      	cmp	r3, #2
   2adcc:	d002      	beq.n	2add4 <disk_status+0x24>
   2adce:	e003      	b.n	2add8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2add0:	2300      	movs	r3, #0
   2add2:	e002      	b.n	2adda <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2add4:	2303      	movs	r3, #3
   2add6:	e000      	b.n	2adda <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2add8:	2301      	movs	r3, #1
	}
}
   2adda:	0018      	movs	r0, r3
   2addc:	46bd      	mov	sp, r7
   2adde:	b002      	add	sp, #8
   2ade0:	bd80      	pop	{r7, pc}
   2ade2:	46c0      	nop			; (mov r8, r8)
   2ade4:	000259fd 	.word	0x000259fd

0002ade8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2ade8:	b590      	push	{r4, r7, lr}
   2adea:	b089      	sub	sp, #36	; 0x24
   2adec:	af00      	add	r7, sp, #0
   2adee:	60b9      	str	r1, [r7, #8]
   2adf0:	607a      	str	r2, [r7, #4]
   2adf2:	0019      	movs	r1, r3
   2adf4:	230f      	movs	r3, #15
   2adf6:	18fb      	adds	r3, r7, r3
   2adf8:	1c02      	adds	r2, r0, #0
   2adfa:	701a      	strb	r2, [r3, #0]
   2adfc:	230e      	movs	r3, #14
   2adfe:	18fb      	adds	r3, r7, r3
   2ae00:	1c0a      	adds	r2, r1, #0
   2ae02:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2ae04:	231b      	movs	r3, #27
   2ae06:	18fc      	adds	r4, r7, r3
   2ae08:	230f      	movs	r3, #15
   2ae0a:	18fb      	adds	r3, r7, r3
   2ae0c:	781b      	ldrb	r3, [r3, #0]
   2ae0e:	0018      	movs	r0, r3
   2ae10:	4b28      	ldr	r3, [pc, #160]	; (2aeb4 <disk_read+0xcc>)
   2ae12:	4798      	blx	r3
   2ae14:	0003      	movs	r3, r0
   2ae16:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2ae18:	231b      	movs	r3, #27
   2ae1a:	18fb      	adds	r3, r7, r3
   2ae1c:	781b      	ldrb	r3, [r3, #0]
   2ae1e:	2b00      	cmp	r3, #0
   2ae20:	d101      	bne.n	2ae26 <disk_read+0x3e>
		return RES_ERROR;
   2ae22:	2301      	movs	r3, #1
   2ae24:	e042      	b.n	2aeac <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2ae26:	2314      	movs	r3, #20
   2ae28:	18fa      	adds	r2, r7, r3
   2ae2a:	230f      	movs	r3, #15
   2ae2c:	18fb      	adds	r3, r7, r3
   2ae2e:	781b      	ldrb	r3, [r3, #0]
   2ae30:	0011      	movs	r1, r2
   2ae32:	0018      	movs	r0, r3
   2ae34:	4b20      	ldr	r3, [pc, #128]	; (2aeb8 <disk_read+0xd0>)
   2ae36:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2ae38:	230e      	movs	r3, #14
   2ae3a:	18fb      	adds	r3, r7, r3
   2ae3c:	781b      	ldrb	r3, [r3, #0]
   2ae3e:	221b      	movs	r2, #27
   2ae40:	18ba      	adds	r2, r7, r2
   2ae42:	7812      	ldrb	r2, [r2, #0]
   2ae44:	4353      	muls	r3, r2
   2ae46:	001a      	movs	r2, r3
   2ae48:	687b      	ldr	r3, [r7, #4]
   2ae4a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2ae4c:	697b      	ldr	r3, [r7, #20]
   2ae4e:	3301      	adds	r3, #1
   2ae50:	211b      	movs	r1, #27
   2ae52:	1879      	adds	r1, r7, r1
   2ae54:	7809      	ldrb	r1, [r1, #0]
   2ae56:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2ae58:	429a      	cmp	r2, r3
   2ae5a:	d901      	bls.n	2ae60 <disk_read+0x78>
		return RES_PARERR;
   2ae5c:	2304      	movs	r3, #4
   2ae5e:	e025      	b.n	2aeac <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2ae60:	2300      	movs	r3, #0
   2ae62:	61fb      	str	r3, [r7, #28]
   2ae64:	e01b      	b.n	2ae9e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2ae66:	231b      	movs	r3, #27
   2ae68:	18fb      	adds	r3, r7, r3
   2ae6a:	781b      	ldrb	r3, [r3, #0]
   2ae6c:	69fa      	ldr	r2, [r7, #28]
   2ae6e:	435a      	muls	r2, r3
   2ae70:	687b      	ldr	r3, [r7, #4]
   2ae72:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2ae74:	231b      	movs	r3, #27
   2ae76:	18fb      	adds	r3, r7, r3
   2ae78:	781b      	ldrb	r3, [r3, #0]
   2ae7a:	69fa      	ldr	r2, [r7, #28]
   2ae7c:	4353      	muls	r3, r2
   2ae7e:	025b      	lsls	r3, r3, #9
   2ae80:	68ba      	ldr	r2, [r7, #8]
   2ae82:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2ae84:	230f      	movs	r3, #15
   2ae86:	18fb      	adds	r3, r7, r3
   2ae88:	781b      	ldrb	r3, [r3, #0]
   2ae8a:	0018      	movs	r0, r3
   2ae8c:	4b0b      	ldr	r3, [pc, #44]	; (2aebc <disk_read+0xd4>)
   2ae8e:	4798      	blx	r3
   2ae90:	1e03      	subs	r3, r0, #0
   2ae92:	d001      	beq.n	2ae98 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2ae94:	2301      	movs	r3, #1
   2ae96:	e009      	b.n	2aeac <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2ae98:	69fb      	ldr	r3, [r7, #28]
   2ae9a:	3301      	adds	r3, #1
   2ae9c:	61fb      	str	r3, [r7, #28]
   2ae9e:	230e      	movs	r3, #14
   2aea0:	18fb      	adds	r3, r7, r3
   2aea2:	781a      	ldrb	r2, [r3, #0]
   2aea4:	69fb      	ldr	r3, [r7, #28]
   2aea6:	429a      	cmp	r2, r3
   2aea8:	d8dd      	bhi.n	2ae66 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2aeaa:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2aeac:	0018      	movs	r0, r3
   2aeae:	46bd      	mov	sp, r7
   2aeb0:	b009      	add	sp, #36	; 0x24
   2aeb2:	bd90      	pop	{r4, r7, pc}
   2aeb4:	00025a89 	.word	0x00025a89
   2aeb8:	00025a3d 	.word	0x00025a3d
   2aebc:	00025afd 	.word	0x00025afd

0002aec0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2aec0:	b590      	push	{r4, r7, lr}
   2aec2:	b089      	sub	sp, #36	; 0x24
   2aec4:	af00      	add	r7, sp, #0
   2aec6:	60b9      	str	r1, [r7, #8]
   2aec8:	607a      	str	r2, [r7, #4]
   2aeca:	0019      	movs	r1, r3
   2aecc:	230f      	movs	r3, #15
   2aece:	18fb      	adds	r3, r7, r3
   2aed0:	1c02      	adds	r2, r0, #0
   2aed2:	701a      	strb	r2, [r3, #0]
   2aed4:	230e      	movs	r3, #14
   2aed6:	18fb      	adds	r3, r7, r3
   2aed8:	1c0a      	adds	r2, r1, #0
   2aeda:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2aedc:	231b      	movs	r3, #27
   2aede:	18fc      	adds	r4, r7, r3
   2aee0:	230f      	movs	r3, #15
   2aee2:	18fb      	adds	r3, r7, r3
   2aee4:	781b      	ldrb	r3, [r3, #0]
   2aee6:	0018      	movs	r0, r3
   2aee8:	4b28      	ldr	r3, [pc, #160]	; (2af8c <disk_write+0xcc>)
   2aeea:	4798      	blx	r3
   2aeec:	0003      	movs	r3, r0
   2aeee:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2aef0:	231b      	movs	r3, #27
   2aef2:	18fb      	adds	r3, r7, r3
   2aef4:	781b      	ldrb	r3, [r3, #0]
   2aef6:	2b00      	cmp	r3, #0
   2aef8:	d101      	bne.n	2aefe <disk_write+0x3e>
		return RES_ERROR;
   2aefa:	2301      	movs	r3, #1
   2aefc:	e042      	b.n	2af84 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2aefe:	2314      	movs	r3, #20
   2af00:	18fa      	adds	r2, r7, r3
   2af02:	230f      	movs	r3, #15
   2af04:	18fb      	adds	r3, r7, r3
   2af06:	781b      	ldrb	r3, [r3, #0]
   2af08:	0011      	movs	r1, r2
   2af0a:	0018      	movs	r0, r3
   2af0c:	4b20      	ldr	r3, [pc, #128]	; (2af90 <disk_write+0xd0>)
   2af0e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2af10:	230e      	movs	r3, #14
   2af12:	18fb      	adds	r3, r7, r3
   2af14:	781b      	ldrb	r3, [r3, #0]
   2af16:	221b      	movs	r2, #27
   2af18:	18ba      	adds	r2, r7, r2
   2af1a:	7812      	ldrb	r2, [r2, #0]
   2af1c:	4353      	muls	r3, r2
   2af1e:	001a      	movs	r2, r3
   2af20:	687b      	ldr	r3, [r7, #4]
   2af22:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2af24:	697b      	ldr	r3, [r7, #20]
   2af26:	3301      	adds	r3, #1
   2af28:	211b      	movs	r1, #27
   2af2a:	1879      	adds	r1, r7, r1
   2af2c:	7809      	ldrb	r1, [r1, #0]
   2af2e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2af30:	429a      	cmp	r2, r3
   2af32:	d901      	bls.n	2af38 <disk_write+0x78>
		return RES_PARERR;
   2af34:	2304      	movs	r3, #4
   2af36:	e025      	b.n	2af84 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2af38:	2300      	movs	r3, #0
   2af3a:	61fb      	str	r3, [r7, #28]
   2af3c:	e01b      	b.n	2af76 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2af3e:	231b      	movs	r3, #27
   2af40:	18fb      	adds	r3, r7, r3
   2af42:	781b      	ldrb	r3, [r3, #0]
   2af44:	69fa      	ldr	r2, [r7, #28]
   2af46:	435a      	muls	r2, r3
   2af48:	687b      	ldr	r3, [r7, #4]
   2af4a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2af4c:	231b      	movs	r3, #27
   2af4e:	18fb      	adds	r3, r7, r3
   2af50:	781b      	ldrb	r3, [r3, #0]
   2af52:	69fa      	ldr	r2, [r7, #28]
   2af54:	4353      	muls	r3, r2
   2af56:	025b      	lsls	r3, r3, #9
   2af58:	68ba      	ldr	r2, [r7, #8]
   2af5a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2af5c:	230f      	movs	r3, #15
   2af5e:	18fb      	adds	r3, r7, r3
   2af60:	781b      	ldrb	r3, [r3, #0]
   2af62:	0018      	movs	r0, r3
   2af64:	4b0b      	ldr	r3, [pc, #44]	; (2af94 <disk_write+0xd4>)
   2af66:	4798      	blx	r3
   2af68:	1e03      	subs	r3, r0, #0
   2af6a:	d001      	beq.n	2af70 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2af6c:	2301      	movs	r3, #1
   2af6e:	e009      	b.n	2af84 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2af70:	69fb      	ldr	r3, [r7, #28]
   2af72:	3301      	adds	r3, #1
   2af74:	61fb      	str	r3, [r7, #28]
   2af76:	230e      	movs	r3, #14
   2af78:	18fb      	adds	r3, r7, r3
   2af7a:	781a      	ldrb	r2, [r3, #0]
   2af7c:	69fb      	ldr	r3, [r7, #28]
   2af7e:	429a      	cmp	r2, r3
   2af80:	d8dd      	bhi.n	2af3e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2af82:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2af84:	0018      	movs	r0, r3
   2af86:	46bd      	mov	sp, r7
   2af88:	b009      	add	sp, #36	; 0x24
   2af8a:	bd90      	pop	{r4, r7, pc}
   2af8c:	00025a89 	.word	0x00025a89
   2af90:	00025a3d 	.word	0x00025a3d
   2af94:	00025b51 	.word	0x00025b51

0002af98 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2af98:	b590      	push	{r4, r7, lr}
   2af9a:	b085      	sub	sp, #20
   2af9c:	af00      	add	r7, sp, #0
   2af9e:	603a      	str	r2, [r7, #0]
   2afa0:	1dfb      	adds	r3, r7, #7
   2afa2:	1c02      	adds	r2, r0, #0
   2afa4:	701a      	strb	r2, [r3, #0]
   2afa6:	1dbb      	adds	r3, r7, #6
   2afa8:	1c0a      	adds	r2, r1, #0
   2afaa:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2afac:	230f      	movs	r3, #15
   2afae:	18fb      	adds	r3, r7, r3
   2afb0:	2204      	movs	r2, #4
   2afb2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2afb4:	1dbb      	adds	r3, r7, #6
   2afb6:	781b      	ldrb	r3, [r3, #0]
   2afb8:	2b01      	cmp	r3, #1
   2afba:	d00f      	beq.n	2afdc <disk_ioctl+0x44>
   2afbc:	dc02      	bgt.n	2afc4 <disk_ioctl+0x2c>
   2afbe:	2b00      	cmp	r3, #0
   2afc0:	d044      	beq.n	2b04c <disk_ioctl+0xb4>
   2afc2:	e054      	b.n	2b06e <disk_ioctl+0xd6>
   2afc4:	2b02      	cmp	r3, #2
   2afc6:	d01a      	beq.n	2affe <disk_ioctl+0x66>
   2afc8:	2b03      	cmp	r3, #3
   2afca:	d150      	bne.n	2b06e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2afcc:	683b      	ldr	r3, [r7, #0]
   2afce:	2201      	movs	r2, #1
   2afd0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2afd2:	230f      	movs	r3, #15
   2afd4:	18fb      	adds	r3, r7, r3
   2afd6:	2200      	movs	r2, #0
   2afd8:	701a      	strb	r2, [r3, #0]
		break;
   2afda:	e04c      	b.n	2b076 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2afdc:	2308      	movs	r3, #8
   2afde:	18fa      	adds	r2, r7, r3
   2afe0:	1dfb      	adds	r3, r7, #7
   2afe2:	781b      	ldrb	r3, [r3, #0]
   2afe4:	0011      	movs	r1, r2
   2afe6:	0018      	movs	r0, r3
   2afe8:	4b26      	ldr	r3, [pc, #152]	; (2b084 <disk_ioctl+0xec>)
   2afea:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2afec:	68bb      	ldr	r3, [r7, #8]
   2afee:	1c5a      	adds	r2, r3, #1
   2aff0:	683b      	ldr	r3, [r7, #0]
   2aff2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2aff4:	230f      	movs	r3, #15
   2aff6:	18fb      	adds	r3, r7, r3
   2aff8:	2200      	movs	r2, #0
   2affa:	701a      	strb	r2, [r3, #0]
	}
	break;
   2affc:	e03b      	b.n	2b076 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2affe:	230e      	movs	r3, #14
   2b000:	18fc      	adds	r4, r7, r3
   2b002:	1dfb      	adds	r3, r7, #7
   2b004:	781b      	ldrb	r3, [r3, #0]
   2b006:	0018      	movs	r0, r3
   2b008:	4b1f      	ldr	r3, [pc, #124]	; (2b088 <disk_ioctl+0xf0>)
   2b00a:	4798      	blx	r3
   2b00c:	0003      	movs	r3, r0
   2b00e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b010:	230e      	movs	r3, #14
   2b012:	18fb      	adds	r3, r7, r3
   2b014:	781b      	ldrb	r3, [r3, #0]
   2b016:	2b01      	cmp	r3, #1
   2b018:	d010      	beq.n	2b03c <disk_ioctl+0xa4>
   2b01a:	230e      	movs	r3, #14
   2b01c:	18fb      	adds	r3, r7, r3
   2b01e:	781b      	ldrb	r3, [r3, #0]
   2b020:	2b02      	cmp	r3, #2
   2b022:	d00b      	beq.n	2b03c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b024:	230e      	movs	r3, #14
   2b026:	18fb      	adds	r3, r7, r3
   2b028:	781b      	ldrb	r3, [r3, #0]
   2b02a:	2b04      	cmp	r3, #4
   2b02c:	d006      	beq.n	2b03c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b02e:	230e      	movs	r3, #14
   2b030:	18fb      	adds	r3, r7, r3
   2b032:	781b      	ldrb	r3, [r3, #0]
   2b034:	2b08      	cmp	r3, #8
   2b036:	d001      	beq.n	2b03c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b038:	2301      	movs	r3, #1
   2b03a:	e01f      	b.n	2b07c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b03c:	683b      	ldr	r3, [r7, #0]
   2b03e:	2200      	movs	r2, #0
   2b040:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b042:	230f      	movs	r3, #15
   2b044:	18fb      	adds	r3, r7, r3
   2b046:	2200      	movs	r2, #0
   2b048:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b04a:	e014      	b.n	2b076 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b04c:	1dfb      	adds	r3, r7, #7
   2b04e:	781b      	ldrb	r3, [r3, #0]
   2b050:	0018      	movs	r0, r3
   2b052:	4b0e      	ldr	r3, [pc, #56]	; (2b08c <disk_ioctl+0xf4>)
   2b054:	4798      	blx	r3
   2b056:	1e03      	subs	r3, r0, #0
   2b058:	d104      	bne.n	2b064 <disk_ioctl+0xcc>
			res = RES_OK;
   2b05a:	230f      	movs	r3, #15
   2b05c:	18fb      	adds	r3, r7, r3
   2b05e:	2200      	movs	r2, #0
   2b060:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b062:	e008      	b.n	2b076 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b064:	230f      	movs	r3, #15
   2b066:	18fb      	adds	r3, r7, r3
   2b068:	2203      	movs	r2, #3
   2b06a:	701a      	strb	r2, [r3, #0]
		break;
   2b06c:	e003      	b.n	2b076 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b06e:	230f      	movs	r3, #15
   2b070:	18fb      	adds	r3, r7, r3
   2b072:	2204      	movs	r2, #4
   2b074:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b076:	230f      	movs	r3, #15
   2b078:	18fb      	adds	r3, r7, r3
   2b07a:	781b      	ldrb	r3, [r3, #0]
}
   2b07c:	0018      	movs	r0, r3
   2b07e:	46bd      	mov	sp, r7
   2b080:	b005      	add	sp, #20
   2b082:	bd90      	pop	{r4, r7, pc}
   2b084:	00025a3d 	.word	0x00025a3d
   2b088:	00025a89 	.word	0x00025a89
   2b08c:	000259fd 	.word	0x000259fd

0002b090 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b090:	b580      	push	{r7, lr}
   2b092:	b084      	sub	sp, #16
   2b094:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b096:	1d3a      	adds	r2, r7, #4
   2b098:	4b12      	ldr	r3, [pc, #72]	; (2b0e4 <get_fattime+0x54>)
   2b09a:	0011      	movs	r1, r2
   2b09c:	0018      	movs	r0, r3
   2b09e:	4b12      	ldr	r3, [pc, #72]	; (2b0e8 <get_fattime+0x58>)
   2b0a0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b0a2:	1d3b      	adds	r3, r7, #4
   2b0a4:	88db      	ldrh	r3, [r3, #6]
   2b0a6:	4a11      	ldr	r2, [pc, #68]	; (2b0ec <get_fattime+0x5c>)
   2b0a8:	4694      	mov	ip, r2
   2b0aa:	4463      	add	r3, ip
   2b0ac:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b0ae:	1d3b      	adds	r3, r7, #4
   2b0b0:	795b      	ldrb	r3, [r3, #5]
   2b0b2:	055b      	lsls	r3, r3, #21
   2b0b4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b0b6:	1d3b      	adds	r3, r7, #4
   2b0b8:	791b      	ldrb	r3, [r3, #4]
   2b0ba:	041b      	lsls	r3, r3, #16
   2b0bc:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b0be:	1d3b      	adds	r3, r7, #4
   2b0c0:	789b      	ldrb	r3, [r3, #2]
   2b0c2:	02db      	lsls	r3, r3, #11
   2b0c4:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b0c6:	1d3b      	adds	r3, r7, #4
   2b0c8:	785b      	ldrb	r3, [r3, #1]
   2b0ca:	015b      	lsls	r3, r3, #5
   2b0cc:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b0ce:	1d3a      	adds	r2, r7, #4
   2b0d0:	7812      	ldrb	r2, [r2, #0]
   2b0d2:	0852      	lsrs	r2, r2, #1
   2b0d4:	b2d2      	uxtb	r2, r2
   2b0d6:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b0d8:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b0da:	68fb      	ldr	r3, [r7, #12]
}
   2b0dc:	0018      	movs	r0, r3
   2b0de:	46bd      	mov	sp, r7
   2b0e0:	b004      	add	sp, #16
   2b0e2:	bd80      	pop	{r7, pc}
   2b0e4:	20005af4 	.word	0x20005af4
   2b0e8:	00026869 	.word	0x00026869
   2b0ec:	fffff844 	.word	0xfffff844

0002b0f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b0f0:	b580      	push	{r7, lr}
   2b0f2:	b086      	sub	sp, #24
   2b0f4:	af00      	add	r7, sp, #0
   2b0f6:	60f8      	str	r0, [r7, #12]
   2b0f8:	60b9      	str	r1, [r7, #8]
   2b0fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b0fc:	68fb      	ldr	r3, [r7, #12]
   2b0fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b100:	68bb      	ldr	r3, [r7, #8]
   2b102:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b104:	e007      	b.n	2b116 <mem_cpy+0x26>
		*d++ = *s++;
   2b106:	697b      	ldr	r3, [r7, #20]
   2b108:	1c5a      	adds	r2, r3, #1
   2b10a:	617a      	str	r2, [r7, #20]
   2b10c:	693a      	ldr	r2, [r7, #16]
   2b10e:	1c51      	adds	r1, r2, #1
   2b110:	6139      	str	r1, [r7, #16]
   2b112:	7812      	ldrb	r2, [r2, #0]
   2b114:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b116:	687b      	ldr	r3, [r7, #4]
   2b118:	1e5a      	subs	r2, r3, #1
   2b11a:	607a      	str	r2, [r7, #4]
   2b11c:	2b00      	cmp	r3, #0
   2b11e:	d1f2      	bne.n	2b106 <mem_cpy+0x16>
}
   2b120:	46c0      	nop			; (mov r8, r8)
   2b122:	46bd      	mov	sp, r7
   2b124:	b006      	add	sp, #24
   2b126:	bd80      	pop	{r7, pc}

0002b128 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b128:	b580      	push	{r7, lr}
   2b12a:	b086      	sub	sp, #24
   2b12c:	af00      	add	r7, sp, #0
   2b12e:	60f8      	str	r0, [r7, #12]
   2b130:	60b9      	str	r1, [r7, #8]
   2b132:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b134:	68fb      	ldr	r3, [r7, #12]
   2b136:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b138:	e005      	b.n	2b146 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b13a:	697b      	ldr	r3, [r7, #20]
   2b13c:	1c5a      	adds	r2, r3, #1
   2b13e:	617a      	str	r2, [r7, #20]
   2b140:	68ba      	ldr	r2, [r7, #8]
   2b142:	b2d2      	uxtb	r2, r2
   2b144:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b146:	687b      	ldr	r3, [r7, #4]
   2b148:	1e5a      	subs	r2, r3, #1
   2b14a:	607a      	str	r2, [r7, #4]
   2b14c:	2b00      	cmp	r3, #0
   2b14e:	d1f4      	bne.n	2b13a <mem_set+0x12>
}
   2b150:	46c0      	nop			; (mov r8, r8)
   2b152:	46bd      	mov	sp, r7
   2b154:	b006      	add	sp, #24
   2b156:	bd80      	pop	{r7, pc}

0002b158 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b158:	b580      	push	{r7, lr}
   2b15a:	b088      	sub	sp, #32
   2b15c:	af00      	add	r7, sp, #0
   2b15e:	60f8      	str	r0, [r7, #12]
   2b160:	60b9      	str	r1, [r7, #8]
   2b162:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b164:	68fb      	ldr	r3, [r7, #12]
   2b166:	61fb      	str	r3, [r7, #28]
   2b168:	68bb      	ldr	r3, [r7, #8]
   2b16a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b16c:	2300      	movs	r3, #0
   2b16e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b170:	46c0      	nop			; (mov r8, r8)
   2b172:	687b      	ldr	r3, [r7, #4]
   2b174:	1e5a      	subs	r2, r3, #1
   2b176:	607a      	str	r2, [r7, #4]
   2b178:	2b00      	cmp	r3, #0
   2b17a:	d00d      	beq.n	2b198 <mem_cmp+0x40>
   2b17c:	69fb      	ldr	r3, [r7, #28]
   2b17e:	1c5a      	adds	r2, r3, #1
   2b180:	61fa      	str	r2, [r7, #28]
   2b182:	781b      	ldrb	r3, [r3, #0]
   2b184:	0019      	movs	r1, r3
   2b186:	69bb      	ldr	r3, [r7, #24]
   2b188:	1c5a      	adds	r2, r3, #1
   2b18a:	61ba      	str	r2, [r7, #24]
   2b18c:	781b      	ldrb	r3, [r3, #0]
   2b18e:	1acb      	subs	r3, r1, r3
   2b190:	617b      	str	r3, [r7, #20]
   2b192:	697b      	ldr	r3, [r7, #20]
   2b194:	2b00      	cmp	r3, #0
   2b196:	d0ec      	beq.n	2b172 <mem_cmp+0x1a>
	return r;
   2b198:	697b      	ldr	r3, [r7, #20]
}
   2b19a:	0018      	movs	r0, r3
   2b19c:	46bd      	mov	sp, r7
   2b19e:	b008      	add	sp, #32
   2b1a0:	bd80      	pop	{r7, pc}

0002b1a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b1a2:	b580      	push	{r7, lr}
   2b1a4:	b082      	sub	sp, #8
   2b1a6:	af00      	add	r7, sp, #0
   2b1a8:	6078      	str	r0, [r7, #4]
   2b1aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b1ac:	e002      	b.n	2b1b4 <chk_chr+0x12>
   2b1ae:	687b      	ldr	r3, [r7, #4]
   2b1b0:	3301      	adds	r3, #1
   2b1b2:	607b      	str	r3, [r7, #4]
   2b1b4:	687b      	ldr	r3, [r7, #4]
   2b1b6:	781b      	ldrb	r3, [r3, #0]
   2b1b8:	2b00      	cmp	r3, #0
   2b1ba:	d005      	beq.n	2b1c8 <chk_chr+0x26>
   2b1bc:	687b      	ldr	r3, [r7, #4]
   2b1be:	781b      	ldrb	r3, [r3, #0]
   2b1c0:	001a      	movs	r2, r3
   2b1c2:	683b      	ldr	r3, [r7, #0]
   2b1c4:	429a      	cmp	r2, r3
   2b1c6:	d1f2      	bne.n	2b1ae <chk_chr+0xc>
	return *str;
   2b1c8:	687b      	ldr	r3, [r7, #4]
   2b1ca:	781b      	ldrb	r3, [r3, #0]
}
   2b1cc:	0018      	movs	r0, r3
   2b1ce:	46bd      	mov	sp, r7
   2b1d0:	b002      	add	sp, #8
   2b1d2:	bd80      	pop	{r7, pc}

0002b1d4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b1d4:	b590      	push	{r4, r7, lr}
   2b1d6:	b085      	sub	sp, #20
   2b1d8:	af00      	add	r7, sp, #0
   2b1da:	6078      	str	r0, [r7, #4]
   2b1dc:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b1de:	687b      	ldr	r3, [r7, #4]
   2b1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b1e2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b1e4:	68fa      	ldr	r2, [r7, #12]
   2b1e6:	683b      	ldr	r3, [r7, #0]
   2b1e8:	429a      	cmp	r2, r3
   2b1ea:	d04e      	beq.n	2b28a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b1ec:	687b      	ldr	r3, [r7, #4]
   2b1ee:	791b      	ldrb	r3, [r3, #4]
   2b1f0:	2b00      	cmp	r3, #0
   2b1f2:	d037      	beq.n	2b264 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b1f4:	687b      	ldr	r3, [r7, #4]
   2b1f6:	7858      	ldrb	r0, [r3, #1]
   2b1f8:	687b      	ldr	r3, [r7, #4]
   2b1fa:	3330      	adds	r3, #48	; 0x30
   2b1fc:	0019      	movs	r1, r3
   2b1fe:	68fa      	ldr	r2, [r7, #12]
   2b200:	2301      	movs	r3, #1
   2b202:	4c24      	ldr	r4, [pc, #144]	; (2b294 <move_window+0xc0>)
   2b204:	47a0      	blx	r4
   2b206:	1e03      	subs	r3, r0, #0
   2b208:	d001      	beq.n	2b20e <move_window+0x3a>
				return FR_DISK_ERR;
   2b20a:	2301      	movs	r3, #1
   2b20c:	e03e      	b.n	2b28c <move_window+0xb8>
			fs->wflag = 0;
   2b20e:	687b      	ldr	r3, [r7, #4]
   2b210:	2200      	movs	r2, #0
   2b212:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b214:	687b      	ldr	r3, [r7, #4]
   2b216:	6a1a      	ldr	r2, [r3, #32]
   2b218:	687b      	ldr	r3, [r7, #4]
   2b21a:	69db      	ldr	r3, [r3, #28]
   2b21c:	18d2      	adds	r2, r2, r3
   2b21e:	68fb      	ldr	r3, [r7, #12]
   2b220:	429a      	cmp	r2, r3
   2b222:	d91f      	bls.n	2b264 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b224:	230b      	movs	r3, #11
   2b226:	18fb      	adds	r3, r7, r3
   2b228:	687a      	ldr	r2, [r7, #4]
   2b22a:	78d2      	ldrb	r2, [r2, #3]
   2b22c:	701a      	strb	r2, [r3, #0]
   2b22e:	e014      	b.n	2b25a <move_window+0x86>
					wsect += fs->fsize;
   2b230:	687b      	ldr	r3, [r7, #4]
   2b232:	69db      	ldr	r3, [r3, #28]
   2b234:	68fa      	ldr	r2, [r7, #12]
   2b236:	18d3      	adds	r3, r2, r3
   2b238:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b23a:	687b      	ldr	r3, [r7, #4]
   2b23c:	7858      	ldrb	r0, [r3, #1]
   2b23e:	687b      	ldr	r3, [r7, #4]
   2b240:	3330      	adds	r3, #48	; 0x30
   2b242:	0019      	movs	r1, r3
   2b244:	68fa      	ldr	r2, [r7, #12]
   2b246:	2301      	movs	r3, #1
   2b248:	4c12      	ldr	r4, [pc, #72]	; (2b294 <move_window+0xc0>)
   2b24a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b24c:	230b      	movs	r3, #11
   2b24e:	18fb      	adds	r3, r7, r3
   2b250:	781a      	ldrb	r2, [r3, #0]
   2b252:	230b      	movs	r3, #11
   2b254:	18fb      	adds	r3, r7, r3
   2b256:	3a01      	subs	r2, #1
   2b258:	701a      	strb	r2, [r3, #0]
   2b25a:	230b      	movs	r3, #11
   2b25c:	18fb      	adds	r3, r7, r3
   2b25e:	781b      	ldrb	r3, [r3, #0]
   2b260:	2b01      	cmp	r3, #1
   2b262:	d8e5      	bhi.n	2b230 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b264:	683b      	ldr	r3, [r7, #0]
   2b266:	2b00      	cmp	r3, #0
   2b268:	d00f      	beq.n	2b28a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b26a:	687b      	ldr	r3, [r7, #4]
   2b26c:	7858      	ldrb	r0, [r3, #1]
   2b26e:	687b      	ldr	r3, [r7, #4]
   2b270:	3330      	adds	r3, #48	; 0x30
   2b272:	0019      	movs	r1, r3
   2b274:	683a      	ldr	r2, [r7, #0]
   2b276:	2301      	movs	r3, #1
   2b278:	4c07      	ldr	r4, [pc, #28]	; (2b298 <move_window+0xc4>)
   2b27a:	47a0      	blx	r4
   2b27c:	1e03      	subs	r3, r0, #0
   2b27e:	d001      	beq.n	2b284 <move_window+0xb0>
				return FR_DISK_ERR;
   2b280:	2301      	movs	r3, #1
   2b282:	e003      	b.n	2b28c <move_window+0xb8>
			fs->winsect = sector;
   2b284:	687b      	ldr	r3, [r7, #4]
   2b286:	683a      	ldr	r2, [r7, #0]
   2b288:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b28a:	2300      	movs	r3, #0
}
   2b28c:	0018      	movs	r0, r3
   2b28e:	46bd      	mov	sp, r7
   2b290:	b005      	add	sp, #20
   2b292:	bd90      	pop	{r4, r7, pc}
   2b294:	0002aec1 	.word	0x0002aec1
   2b298:	0002ade9 	.word	0x0002ade9

0002b29c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b29c:	b590      	push	{r4, r7, lr}
   2b29e:	b085      	sub	sp, #20
   2b2a0:	af00      	add	r7, sp, #0
   2b2a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b2a4:	230f      	movs	r3, #15
   2b2a6:	18fc      	adds	r4, r7, r3
   2b2a8:	687b      	ldr	r3, [r7, #4]
   2b2aa:	2100      	movs	r1, #0
   2b2ac:	0018      	movs	r0, r3
   2b2ae:	4b52      	ldr	r3, [pc, #328]	; (2b3f8 <sync+0x15c>)
   2b2b0:	4798      	blx	r3
   2b2b2:	0003      	movs	r3, r0
   2b2b4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b2b6:	230f      	movs	r3, #15
   2b2b8:	18fb      	adds	r3, r7, r3
   2b2ba:	781b      	ldrb	r3, [r3, #0]
   2b2bc:	2b00      	cmp	r3, #0
   2b2be:	d000      	beq.n	2b2c2 <sync+0x26>
   2b2c0:	e093      	b.n	2b3ea <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b2c2:	687b      	ldr	r3, [r7, #4]
   2b2c4:	781b      	ldrb	r3, [r3, #0]
   2b2c6:	2b03      	cmp	r3, #3
   2b2c8:	d000      	beq.n	2b2cc <sync+0x30>
   2b2ca:	e081      	b.n	2b3d0 <sync+0x134>
   2b2cc:	687b      	ldr	r3, [r7, #4]
   2b2ce:	795b      	ldrb	r3, [r3, #5]
   2b2d0:	2b00      	cmp	r3, #0
   2b2d2:	d07d      	beq.n	2b3d0 <sync+0x134>
			fs->winsect = 0;
   2b2d4:	687b      	ldr	r3, [r7, #4]
   2b2d6:	2200      	movs	r2, #0
   2b2d8:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b2da:	687b      	ldr	r3, [r7, #4]
   2b2dc:	3330      	adds	r3, #48	; 0x30
   2b2de:	0018      	movs	r0, r3
   2b2e0:	2380      	movs	r3, #128	; 0x80
   2b2e2:	009b      	lsls	r3, r3, #2
   2b2e4:	001a      	movs	r2, r3
   2b2e6:	2100      	movs	r1, #0
   2b2e8:	4b44      	ldr	r3, [pc, #272]	; (2b3fc <sync+0x160>)
   2b2ea:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b2ec:	687b      	ldr	r3, [r7, #4]
   2b2ee:	4a44      	ldr	r2, [pc, #272]	; (2b400 <sync+0x164>)
   2b2f0:	2155      	movs	r1, #85	; 0x55
   2b2f2:	5499      	strb	r1, [r3, r2]
   2b2f4:	687b      	ldr	r3, [r7, #4]
   2b2f6:	4a43      	ldr	r2, [pc, #268]	; (2b404 <sync+0x168>)
   2b2f8:	21aa      	movs	r1, #170	; 0xaa
   2b2fa:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b2fc:	687b      	ldr	r3, [r7, #4]
   2b2fe:	2230      	movs	r2, #48	; 0x30
   2b300:	2152      	movs	r1, #82	; 0x52
   2b302:	5499      	strb	r1, [r3, r2]
   2b304:	687b      	ldr	r3, [r7, #4]
   2b306:	2231      	movs	r2, #49	; 0x31
   2b308:	2152      	movs	r1, #82	; 0x52
   2b30a:	5499      	strb	r1, [r3, r2]
   2b30c:	687b      	ldr	r3, [r7, #4]
   2b30e:	2232      	movs	r2, #50	; 0x32
   2b310:	2161      	movs	r1, #97	; 0x61
   2b312:	5499      	strb	r1, [r3, r2]
   2b314:	687b      	ldr	r3, [r7, #4]
   2b316:	2233      	movs	r2, #51	; 0x33
   2b318:	2141      	movs	r1, #65	; 0x41
   2b31a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b31c:	687a      	ldr	r2, [r7, #4]
   2b31e:	2385      	movs	r3, #133	; 0x85
   2b320:	009b      	lsls	r3, r3, #2
   2b322:	2172      	movs	r1, #114	; 0x72
   2b324:	54d1      	strb	r1, [r2, r3]
   2b326:	687b      	ldr	r3, [r7, #4]
   2b328:	4a37      	ldr	r2, [pc, #220]	; (2b408 <sync+0x16c>)
   2b32a:	2172      	movs	r1, #114	; 0x72
   2b32c:	5499      	strb	r1, [r3, r2]
   2b32e:	687b      	ldr	r3, [r7, #4]
   2b330:	4a36      	ldr	r2, [pc, #216]	; (2b40c <sync+0x170>)
   2b332:	2141      	movs	r1, #65	; 0x41
   2b334:	5499      	strb	r1, [r3, r2]
   2b336:	687b      	ldr	r3, [r7, #4]
   2b338:	4a35      	ldr	r2, [pc, #212]	; (2b410 <sync+0x174>)
   2b33a:	2161      	movs	r1, #97	; 0x61
   2b33c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b33e:	687b      	ldr	r3, [r7, #4]
   2b340:	691b      	ldr	r3, [r3, #16]
   2b342:	b2d9      	uxtb	r1, r3
   2b344:	687a      	ldr	r2, [r7, #4]
   2b346:	2386      	movs	r3, #134	; 0x86
   2b348:	009b      	lsls	r3, r3, #2
   2b34a:	54d1      	strb	r1, [r2, r3]
   2b34c:	687b      	ldr	r3, [r7, #4]
   2b34e:	691b      	ldr	r3, [r3, #16]
   2b350:	b29b      	uxth	r3, r3
   2b352:	0a1b      	lsrs	r3, r3, #8
   2b354:	b29b      	uxth	r3, r3
   2b356:	b2d9      	uxtb	r1, r3
   2b358:	687b      	ldr	r3, [r7, #4]
   2b35a:	4a2e      	ldr	r2, [pc, #184]	; (2b414 <sync+0x178>)
   2b35c:	5499      	strb	r1, [r3, r2]
   2b35e:	687b      	ldr	r3, [r7, #4]
   2b360:	691b      	ldr	r3, [r3, #16]
   2b362:	0c1b      	lsrs	r3, r3, #16
   2b364:	b2d9      	uxtb	r1, r3
   2b366:	687b      	ldr	r3, [r7, #4]
   2b368:	4a2b      	ldr	r2, [pc, #172]	; (2b418 <sync+0x17c>)
   2b36a:	5499      	strb	r1, [r3, r2]
   2b36c:	687b      	ldr	r3, [r7, #4]
   2b36e:	691b      	ldr	r3, [r3, #16]
   2b370:	0e1b      	lsrs	r3, r3, #24
   2b372:	b2d9      	uxtb	r1, r3
   2b374:	687b      	ldr	r3, [r7, #4]
   2b376:	4a29      	ldr	r2, [pc, #164]	; (2b41c <sync+0x180>)
   2b378:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b37a:	687b      	ldr	r3, [r7, #4]
   2b37c:	68db      	ldr	r3, [r3, #12]
   2b37e:	b2d9      	uxtb	r1, r3
   2b380:	687a      	ldr	r2, [r7, #4]
   2b382:	2387      	movs	r3, #135	; 0x87
   2b384:	009b      	lsls	r3, r3, #2
   2b386:	54d1      	strb	r1, [r2, r3]
   2b388:	687b      	ldr	r3, [r7, #4]
   2b38a:	68db      	ldr	r3, [r3, #12]
   2b38c:	b29b      	uxth	r3, r3
   2b38e:	0a1b      	lsrs	r3, r3, #8
   2b390:	b29b      	uxth	r3, r3
   2b392:	b2d9      	uxtb	r1, r3
   2b394:	687b      	ldr	r3, [r7, #4]
   2b396:	4a22      	ldr	r2, [pc, #136]	; (2b420 <sync+0x184>)
   2b398:	5499      	strb	r1, [r3, r2]
   2b39a:	687b      	ldr	r3, [r7, #4]
   2b39c:	68db      	ldr	r3, [r3, #12]
   2b39e:	0c1b      	lsrs	r3, r3, #16
   2b3a0:	b2d9      	uxtb	r1, r3
   2b3a2:	687b      	ldr	r3, [r7, #4]
   2b3a4:	4a1f      	ldr	r2, [pc, #124]	; (2b424 <sync+0x188>)
   2b3a6:	5499      	strb	r1, [r3, r2]
   2b3a8:	687b      	ldr	r3, [r7, #4]
   2b3aa:	68db      	ldr	r3, [r3, #12]
   2b3ac:	0e1b      	lsrs	r3, r3, #24
   2b3ae:	b2d9      	uxtb	r1, r3
   2b3b0:	687b      	ldr	r3, [r7, #4]
   2b3b2:	4a1d      	ldr	r2, [pc, #116]	; (2b428 <sync+0x18c>)
   2b3b4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b3b6:	687b      	ldr	r3, [r7, #4]
   2b3b8:	7858      	ldrb	r0, [r3, #1]
   2b3ba:	687b      	ldr	r3, [r7, #4]
   2b3bc:	3330      	adds	r3, #48	; 0x30
   2b3be:	0019      	movs	r1, r3
   2b3c0:	687b      	ldr	r3, [r7, #4]
   2b3c2:	695a      	ldr	r2, [r3, #20]
   2b3c4:	2301      	movs	r3, #1
   2b3c6:	4c19      	ldr	r4, [pc, #100]	; (2b42c <sync+0x190>)
   2b3c8:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b3ca:	687b      	ldr	r3, [r7, #4]
   2b3cc:	2200      	movs	r2, #0
   2b3ce:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b3d0:	687b      	ldr	r3, [r7, #4]
   2b3d2:	785b      	ldrb	r3, [r3, #1]
   2b3d4:	2200      	movs	r2, #0
   2b3d6:	2100      	movs	r1, #0
   2b3d8:	0018      	movs	r0, r3
   2b3da:	4b15      	ldr	r3, [pc, #84]	; (2b430 <sync+0x194>)
   2b3dc:	4798      	blx	r3
   2b3de:	1e03      	subs	r3, r0, #0
   2b3e0:	d003      	beq.n	2b3ea <sync+0x14e>
			res = FR_DISK_ERR;
   2b3e2:	230f      	movs	r3, #15
   2b3e4:	18fb      	adds	r3, r7, r3
   2b3e6:	2201      	movs	r2, #1
   2b3e8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b3ea:	230f      	movs	r3, #15
   2b3ec:	18fb      	adds	r3, r7, r3
   2b3ee:	781b      	ldrb	r3, [r3, #0]
}
   2b3f0:	0018      	movs	r0, r3
   2b3f2:	46bd      	mov	sp, r7
   2b3f4:	b005      	add	sp, #20
   2b3f6:	bd90      	pop	{r4, r7, pc}
   2b3f8:	0002b1d5 	.word	0x0002b1d5
   2b3fc:	0002b129 	.word	0x0002b129
   2b400:	0000022e 	.word	0x0000022e
   2b404:	0000022f 	.word	0x0000022f
   2b408:	00000215 	.word	0x00000215
   2b40c:	00000216 	.word	0x00000216
   2b410:	00000217 	.word	0x00000217
   2b414:	00000219 	.word	0x00000219
   2b418:	0000021a 	.word	0x0000021a
   2b41c:	0000021b 	.word	0x0000021b
   2b420:	0000021d 	.word	0x0000021d
   2b424:	0000021e 	.word	0x0000021e
   2b428:	0000021f 	.word	0x0000021f
   2b42c:	0002aec1 	.word	0x0002aec1
   2b430:	0002af99 	.word	0x0002af99

0002b434 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b434:	b580      	push	{r7, lr}
   2b436:	b082      	sub	sp, #8
   2b438:	af00      	add	r7, sp, #0
   2b43a:	6078      	str	r0, [r7, #4]
   2b43c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b43e:	683b      	ldr	r3, [r7, #0]
   2b440:	3b02      	subs	r3, #2
   2b442:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b444:	687b      	ldr	r3, [r7, #4]
   2b446:	699b      	ldr	r3, [r3, #24]
   2b448:	1e9a      	subs	r2, r3, #2
   2b44a:	683b      	ldr	r3, [r7, #0]
   2b44c:	429a      	cmp	r2, r3
   2b44e:	d801      	bhi.n	2b454 <clust2sect+0x20>
   2b450:	2300      	movs	r3, #0
   2b452:	e007      	b.n	2b464 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b454:	687b      	ldr	r3, [r7, #4]
   2b456:	789b      	ldrb	r3, [r3, #2]
   2b458:	001a      	movs	r2, r3
   2b45a:	683b      	ldr	r3, [r7, #0]
   2b45c:	435a      	muls	r2, r3
   2b45e:	687b      	ldr	r3, [r7, #4]
   2b460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b462:	18d3      	adds	r3, r2, r3
}
   2b464:	0018      	movs	r0, r3
   2b466:	46bd      	mov	sp, r7
   2b468:	b002      	add	sp, #8
   2b46a:	bd80      	pop	{r7, pc}

0002b46c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b46c:	b580      	push	{r7, lr}
   2b46e:	b086      	sub	sp, #24
   2b470:	af00      	add	r7, sp, #0
   2b472:	6078      	str	r0, [r7, #4]
   2b474:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b476:	683b      	ldr	r3, [r7, #0]
   2b478:	2b01      	cmp	r3, #1
   2b47a:	d904      	bls.n	2b486 <get_fat+0x1a>
   2b47c:	687b      	ldr	r3, [r7, #4]
   2b47e:	699a      	ldr	r2, [r3, #24]
   2b480:	683b      	ldr	r3, [r7, #0]
   2b482:	429a      	cmp	r2, r3
   2b484:	d801      	bhi.n	2b48a <get_fat+0x1e>
		return 1;
   2b486:	2301      	movs	r3, #1
   2b488:	e09f      	b.n	2b5ca <get_fat+0x15e>

	switch (fs->fs_type) {
   2b48a:	687b      	ldr	r3, [r7, #4]
   2b48c:	781b      	ldrb	r3, [r3, #0]
   2b48e:	2b02      	cmp	r3, #2
   2b490:	d048      	beq.n	2b524 <get_fat+0xb8>
   2b492:	2b03      	cmp	r3, #3
   2b494:	d067      	beq.n	2b566 <get_fat+0xfa>
   2b496:	2b01      	cmp	r3, #1
   2b498:	d000      	beq.n	2b49c <get_fat+0x30>
   2b49a:	e094      	b.n	2b5c6 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b49c:	683b      	ldr	r3, [r7, #0]
   2b49e:	617b      	str	r3, [r7, #20]
   2b4a0:	697b      	ldr	r3, [r7, #20]
   2b4a2:	085b      	lsrs	r3, r3, #1
   2b4a4:	697a      	ldr	r2, [r7, #20]
   2b4a6:	18d3      	adds	r3, r2, r3
   2b4a8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b4aa:	687b      	ldr	r3, [r7, #4]
   2b4ac:	6a1a      	ldr	r2, [r3, #32]
   2b4ae:	697b      	ldr	r3, [r7, #20]
   2b4b0:	0a5b      	lsrs	r3, r3, #9
   2b4b2:	18d2      	adds	r2, r2, r3
   2b4b4:	687b      	ldr	r3, [r7, #4]
   2b4b6:	0011      	movs	r1, r2
   2b4b8:	0018      	movs	r0, r3
   2b4ba:	4b46      	ldr	r3, [pc, #280]	; (2b5d4 <get_fat+0x168>)
   2b4bc:	4798      	blx	r3
   2b4be:	1e03      	subs	r3, r0, #0
   2b4c0:	d000      	beq.n	2b4c4 <get_fat+0x58>
   2b4c2:	e079      	b.n	2b5b8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b4c4:	697b      	ldr	r3, [r7, #20]
   2b4c6:	05db      	lsls	r3, r3, #23
   2b4c8:	0ddb      	lsrs	r3, r3, #23
   2b4ca:	687a      	ldr	r2, [r7, #4]
   2b4cc:	2130      	movs	r1, #48	; 0x30
   2b4ce:	18d3      	adds	r3, r2, r3
   2b4d0:	185b      	adds	r3, r3, r1
   2b4d2:	781b      	ldrb	r3, [r3, #0]
   2b4d4:	613b      	str	r3, [r7, #16]
   2b4d6:	697b      	ldr	r3, [r7, #20]
   2b4d8:	3301      	adds	r3, #1
   2b4da:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b4dc:	687b      	ldr	r3, [r7, #4]
   2b4de:	6a1a      	ldr	r2, [r3, #32]
   2b4e0:	697b      	ldr	r3, [r7, #20]
   2b4e2:	0a5b      	lsrs	r3, r3, #9
   2b4e4:	18d2      	adds	r2, r2, r3
   2b4e6:	687b      	ldr	r3, [r7, #4]
   2b4e8:	0011      	movs	r1, r2
   2b4ea:	0018      	movs	r0, r3
   2b4ec:	4b39      	ldr	r3, [pc, #228]	; (2b5d4 <get_fat+0x168>)
   2b4ee:	4798      	blx	r3
   2b4f0:	1e03      	subs	r3, r0, #0
   2b4f2:	d163      	bne.n	2b5bc <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2b4f4:	697b      	ldr	r3, [r7, #20]
   2b4f6:	05db      	lsls	r3, r3, #23
   2b4f8:	0ddb      	lsrs	r3, r3, #23
   2b4fa:	687a      	ldr	r2, [r7, #4]
   2b4fc:	2130      	movs	r1, #48	; 0x30
   2b4fe:	18d3      	adds	r3, r2, r3
   2b500:	185b      	adds	r3, r3, r1
   2b502:	781b      	ldrb	r3, [r3, #0]
   2b504:	021b      	lsls	r3, r3, #8
   2b506:	001a      	movs	r2, r3
   2b508:	693b      	ldr	r3, [r7, #16]
   2b50a:	4313      	orrs	r3, r2
   2b50c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2b50e:	683b      	ldr	r3, [r7, #0]
   2b510:	2201      	movs	r2, #1
   2b512:	4013      	ands	r3, r2
   2b514:	d002      	beq.n	2b51c <get_fat+0xb0>
   2b516:	693b      	ldr	r3, [r7, #16]
   2b518:	091b      	lsrs	r3, r3, #4
   2b51a:	e056      	b.n	2b5ca <get_fat+0x15e>
   2b51c:	693b      	ldr	r3, [r7, #16]
   2b51e:	051b      	lsls	r3, r3, #20
   2b520:	0d1b      	lsrs	r3, r3, #20
   2b522:	e052      	b.n	2b5ca <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b524:	687b      	ldr	r3, [r7, #4]
   2b526:	6a1a      	ldr	r2, [r3, #32]
   2b528:	683b      	ldr	r3, [r7, #0]
   2b52a:	0a1b      	lsrs	r3, r3, #8
   2b52c:	18d2      	adds	r2, r2, r3
   2b52e:	687b      	ldr	r3, [r7, #4]
   2b530:	0011      	movs	r1, r2
   2b532:	0018      	movs	r0, r3
   2b534:	4b27      	ldr	r3, [pc, #156]	; (2b5d4 <get_fat+0x168>)
   2b536:	4798      	blx	r3
   2b538:	1e03      	subs	r3, r0, #0
   2b53a:	d141      	bne.n	2b5c0 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2b53c:	683b      	ldr	r3, [r7, #0]
   2b53e:	005a      	lsls	r2, r3, #1
   2b540:	23ff      	movs	r3, #255	; 0xff
   2b542:	005b      	lsls	r3, r3, #1
   2b544:	4013      	ands	r3, r2
   2b546:	3330      	adds	r3, #48	; 0x30
   2b548:	687a      	ldr	r2, [r7, #4]
   2b54a:	18d3      	adds	r3, r2, r3
   2b54c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2b54e:	68fb      	ldr	r3, [r7, #12]
   2b550:	3301      	adds	r3, #1
   2b552:	781b      	ldrb	r3, [r3, #0]
   2b554:	021b      	lsls	r3, r3, #8
   2b556:	b21a      	sxth	r2, r3
   2b558:	68fb      	ldr	r3, [r7, #12]
   2b55a:	781b      	ldrb	r3, [r3, #0]
   2b55c:	b21b      	sxth	r3, r3
   2b55e:	4313      	orrs	r3, r2
   2b560:	b21b      	sxth	r3, r3
   2b562:	b29b      	uxth	r3, r3
   2b564:	e031      	b.n	2b5ca <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b566:	687b      	ldr	r3, [r7, #4]
   2b568:	6a1a      	ldr	r2, [r3, #32]
   2b56a:	683b      	ldr	r3, [r7, #0]
   2b56c:	09db      	lsrs	r3, r3, #7
   2b56e:	18d2      	adds	r2, r2, r3
   2b570:	687b      	ldr	r3, [r7, #4]
   2b572:	0011      	movs	r1, r2
   2b574:	0018      	movs	r0, r3
   2b576:	4b17      	ldr	r3, [pc, #92]	; (2b5d4 <get_fat+0x168>)
   2b578:	4798      	blx	r3
   2b57a:	1e03      	subs	r3, r0, #0
   2b57c:	d122      	bne.n	2b5c4 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2b57e:	683b      	ldr	r3, [r7, #0]
   2b580:	009a      	lsls	r2, r3, #2
   2b582:	23fe      	movs	r3, #254	; 0xfe
   2b584:	005b      	lsls	r3, r3, #1
   2b586:	4013      	ands	r3, r2
   2b588:	3330      	adds	r3, #48	; 0x30
   2b58a:	687a      	ldr	r2, [r7, #4]
   2b58c:	18d3      	adds	r3, r2, r3
   2b58e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2b590:	68fb      	ldr	r3, [r7, #12]
   2b592:	3303      	adds	r3, #3
   2b594:	781b      	ldrb	r3, [r3, #0]
   2b596:	061a      	lsls	r2, r3, #24
   2b598:	68fb      	ldr	r3, [r7, #12]
   2b59a:	3302      	adds	r3, #2
   2b59c:	781b      	ldrb	r3, [r3, #0]
   2b59e:	041b      	lsls	r3, r3, #16
   2b5a0:	4313      	orrs	r3, r2
   2b5a2:	68fa      	ldr	r2, [r7, #12]
   2b5a4:	3201      	adds	r2, #1
   2b5a6:	7812      	ldrb	r2, [r2, #0]
   2b5a8:	0212      	lsls	r2, r2, #8
   2b5aa:	4313      	orrs	r3, r2
   2b5ac:	68fa      	ldr	r2, [r7, #12]
   2b5ae:	7812      	ldrb	r2, [r2, #0]
   2b5b0:	4313      	orrs	r3, r2
   2b5b2:	011b      	lsls	r3, r3, #4
   2b5b4:	091b      	lsrs	r3, r3, #4
   2b5b6:	e008      	b.n	2b5ca <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b5b8:	46c0      	nop			; (mov r8, r8)
   2b5ba:	e004      	b.n	2b5c6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b5bc:	46c0      	nop			; (mov r8, r8)
   2b5be:	e002      	b.n	2b5c6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b5c0:	46c0      	nop			; (mov r8, r8)
   2b5c2:	e000      	b.n	2b5c6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b5c4:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2b5c6:	2301      	movs	r3, #1
   2b5c8:	425b      	negs	r3, r3
}
   2b5ca:	0018      	movs	r0, r3
   2b5cc:	46bd      	mov	sp, r7
   2b5ce:	b006      	add	sp, #24
   2b5d0:	bd80      	pop	{r7, pc}
   2b5d2:	46c0      	nop			; (mov r8, r8)
   2b5d4:	0002b1d5 	.word	0x0002b1d5

0002b5d8 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2b5d8:	b590      	push	{r4, r7, lr}
   2b5da:	b089      	sub	sp, #36	; 0x24
   2b5dc:	af00      	add	r7, sp, #0
   2b5de:	60f8      	str	r0, [r7, #12]
   2b5e0:	60b9      	str	r1, [r7, #8]
   2b5e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b5e4:	68bb      	ldr	r3, [r7, #8]
   2b5e6:	2b01      	cmp	r3, #1
   2b5e8:	d904      	bls.n	2b5f4 <put_fat+0x1c>
   2b5ea:	68fb      	ldr	r3, [r7, #12]
   2b5ec:	699a      	ldr	r2, [r3, #24]
   2b5ee:	68bb      	ldr	r3, [r7, #8]
   2b5f0:	429a      	cmp	r2, r3
   2b5f2:	d804      	bhi.n	2b5fe <put_fat+0x26>
		res = FR_INT_ERR;
   2b5f4:	231f      	movs	r3, #31
   2b5f6:	18fb      	adds	r3, r7, r3
   2b5f8:	2202      	movs	r2, #2
   2b5fa:	701a      	strb	r2, [r3, #0]
   2b5fc:	e100      	b.n	2b800 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2b5fe:	68fb      	ldr	r3, [r7, #12]
   2b600:	781b      	ldrb	r3, [r3, #0]
   2b602:	2b02      	cmp	r3, #2
   2b604:	d100      	bne.n	2b608 <put_fat+0x30>
   2b606:	e078      	b.n	2b6fa <put_fat+0x122>
   2b608:	2b03      	cmp	r3, #3
   2b60a:	d100      	bne.n	2b60e <put_fat+0x36>
   2b60c:	e09e      	b.n	2b74c <put_fat+0x174>
   2b60e:	2b01      	cmp	r3, #1
   2b610:	d000      	beq.n	2b614 <put_fat+0x3c>
   2b612:	e0e6      	b.n	2b7e2 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2b614:	68bb      	ldr	r3, [r7, #8]
   2b616:	61bb      	str	r3, [r7, #24]
   2b618:	69bb      	ldr	r3, [r7, #24]
   2b61a:	085b      	lsrs	r3, r3, #1
   2b61c:	69ba      	ldr	r2, [r7, #24]
   2b61e:	18d3      	adds	r3, r2, r3
   2b620:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b622:	68fb      	ldr	r3, [r7, #12]
   2b624:	6a1a      	ldr	r2, [r3, #32]
   2b626:	69bb      	ldr	r3, [r7, #24]
   2b628:	0a5b      	lsrs	r3, r3, #9
   2b62a:	18d2      	adds	r2, r2, r3
   2b62c:	231f      	movs	r3, #31
   2b62e:	18fc      	adds	r4, r7, r3
   2b630:	68fb      	ldr	r3, [r7, #12]
   2b632:	0011      	movs	r1, r2
   2b634:	0018      	movs	r0, r3
   2b636:	4b76      	ldr	r3, [pc, #472]	; (2b810 <put_fat+0x238>)
   2b638:	4798      	blx	r3
   2b63a:	0003      	movs	r3, r0
   2b63c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b63e:	231f      	movs	r3, #31
   2b640:	18fb      	adds	r3, r7, r3
   2b642:	781b      	ldrb	r3, [r3, #0]
   2b644:	2b00      	cmp	r3, #0
   2b646:	d000      	beq.n	2b64a <put_fat+0x72>
   2b648:	e0d0      	b.n	2b7ec <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b64a:	69bb      	ldr	r3, [r7, #24]
   2b64c:	05db      	lsls	r3, r3, #23
   2b64e:	0ddb      	lsrs	r3, r3, #23
   2b650:	3330      	adds	r3, #48	; 0x30
   2b652:	68fa      	ldr	r2, [r7, #12]
   2b654:	18d3      	adds	r3, r2, r3
   2b656:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b658:	68bb      	ldr	r3, [r7, #8]
   2b65a:	2201      	movs	r2, #1
   2b65c:	4013      	ands	r3, r2
   2b65e:	d00d      	beq.n	2b67c <put_fat+0xa4>
   2b660:	697b      	ldr	r3, [r7, #20]
   2b662:	781b      	ldrb	r3, [r3, #0]
   2b664:	b25b      	sxtb	r3, r3
   2b666:	220f      	movs	r2, #15
   2b668:	4013      	ands	r3, r2
   2b66a:	b25a      	sxtb	r2, r3
   2b66c:	687b      	ldr	r3, [r7, #4]
   2b66e:	b2db      	uxtb	r3, r3
   2b670:	011b      	lsls	r3, r3, #4
   2b672:	b25b      	sxtb	r3, r3
   2b674:	4313      	orrs	r3, r2
   2b676:	b25b      	sxtb	r3, r3
   2b678:	b2db      	uxtb	r3, r3
   2b67a:	e001      	b.n	2b680 <put_fat+0xa8>
   2b67c:	687b      	ldr	r3, [r7, #4]
   2b67e:	b2db      	uxtb	r3, r3
   2b680:	697a      	ldr	r2, [r7, #20]
   2b682:	7013      	strb	r3, [r2, #0]
			bc++;
   2b684:	69bb      	ldr	r3, [r7, #24]
   2b686:	3301      	adds	r3, #1
   2b688:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b68a:	68fb      	ldr	r3, [r7, #12]
   2b68c:	2201      	movs	r2, #1
   2b68e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b690:	68fb      	ldr	r3, [r7, #12]
   2b692:	6a1a      	ldr	r2, [r3, #32]
   2b694:	69bb      	ldr	r3, [r7, #24]
   2b696:	0a5b      	lsrs	r3, r3, #9
   2b698:	18d2      	adds	r2, r2, r3
   2b69a:	231f      	movs	r3, #31
   2b69c:	18fc      	adds	r4, r7, r3
   2b69e:	68fb      	ldr	r3, [r7, #12]
   2b6a0:	0011      	movs	r1, r2
   2b6a2:	0018      	movs	r0, r3
   2b6a4:	4b5a      	ldr	r3, [pc, #360]	; (2b810 <put_fat+0x238>)
   2b6a6:	4798      	blx	r3
   2b6a8:	0003      	movs	r3, r0
   2b6aa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b6ac:	231f      	movs	r3, #31
   2b6ae:	18fb      	adds	r3, r7, r3
   2b6b0:	781b      	ldrb	r3, [r3, #0]
   2b6b2:	2b00      	cmp	r3, #0
   2b6b4:	d000      	beq.n	2b6b8 <put_fat+0xe0>
   2b6b6:	e09b      	b.n	2b7f0 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b6b8:	69bb      	ldr	r3, [r7, #24]
   2b6ba:	05db      	lsls	r3, r3, #23
   2b6bc:	0ddb      	lsrs	r3, r3, #23
   2b6be:	3330      	adds	r3, #48	; 0x30
   2b6c0:	68fa      	ldr	r2, [r7, #12]
   2b6c2:	18d3      	adds	r3, r2, r3
   2b6c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b6c6:	68bb      	ldr	r3, [r7, #8]
   2b6c8:	2201      	movs	r2, #1
   2b6ca:	4013      	ands	r3, r2
   2b6cc:	d003      	beq.n	2b6d6 <put_fat+0xfe>
   2b6ce:	687b      	ldr	r3, [r7, #4]
   2b6d0:	091b      	lsrs	r3, r3, #4
   2b6d2:	b2db      	uxtb	r3, r3
   2b6d4:	e00e      	b.n	2b6f4 <put_fat+0x11c>
   2b6d6:	697b      	ldr	r3, [r7, #20]
   2b6d8:	781b      	ldrb	r3, [r3, #0]
   2b6da:	b25b      	sxtb	r3, r3
   2b6dc:	220f      	movs	r2, #15
   2b6de:	4393      	bics	r3, r2
   2b6e0:	b25a      	sxtb	r2, r3
   2b6e2:	687b      	ldr	r3, [r7, #4]
   2b6e4:	0a1b      	lsrs	r3, r3, #8
   2b6e6:	b25b      	sxtb	r3, r3
   2b6e8:	210f      	movs	r1, #15
   2b6ea:	400b      	ands	r3, r1
   2b6ec:	b25b      	sxtb	r3, r3
   2b6ee:	4313      	orrs	r3, r2
   2b6f0:	b25b      	sxtb	r3, r3
   2b6f2:	b2db      	uxtb	r3, r3
   2b6f4:	697a      	ldr	r2, [r7, #20]
   2b6f6:	7013      	strb	r3, [r2, #0]
			break;
   2b6f8:	e07f      	b.n	2b7fa <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2b6fa:	68fb      	ldr	r3, [r7, #12]
   2b6fc:	6a1a      	ldr	r2, [r3, #32]
   2b6fe:	68bb      	ldr	r3, [r7, #8]
   2b700:	0a1b      	lsrs	r3, r3, #8
   2b702:	18d2      	adds	r2, r2, r3
   2b704:	231f      	movs	r3, #31
   2b706:	18fc      	adds	r4, r7, r3
   2b708:	68fb      	ldr	r3, [r7, #12]
   2b70a:	0011      	movs	r1, r2
   2b70c:	0018      	movs	r0, r3
   2b70e:	4b40      	ldr	r3, [pc, #256]	; (2b810 <put_fat+0x238>)
   2b710:	4798      	blx	r3
   2b712:	0003      	movs	r3, r0
   2b714:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b716:	231f      	movs	r3, #31
   2b718:	18fb      	adds	r3, r7, r3
   2b71a:	781b      	ldrb	r3, [r3, #0]
   2b71c:	2b00      	cmp	r3, #0
   2b71e:	d169      	bne.n	2b7f4 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2b720:	68bb      	ldr	r3, [r7, #8]
   2b722:	005a      	lsls	r2, r3, #1
   2b724:	23ff      	movs	r3, #255	; 0xff
   2b726:	005b      	lsls	r3, r3, #1
   2b728:	4013      	ands	r3, r2
   2b72a:	3330      	adds	r3, #48	; 0x30
   2b72c:	68fa      	ldr	r2, [r7, #12]
   2b72e:	18d3      	adds	r3, r2, r3
   2b730:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2b732:	687b      	ldr	r3, [r7, #4]
   2b734:	b2da      	uxtb	r2, r3
   2b736:	697b      	ldr	r3, [r7, #20]
   2b738:	701a      	strb	r2, [r3, #0]
   2b73a:	697b      	ldr	r3, [r7, #20]
   2b73c:	3301      	adds	r3, #1
   2b73e:	687a      	ldr	r2, [r7, #4]
   2b740:	b292      	uxth	r2, r2
   2b742:	0a12      	lsrs	r2, r2, #8
   2b744:	b292      	uxth	r2, r2
   2b746:	b2d2      	uxtb	r2, r2
   2b748:	701a      	strb	r2, [r3, #0]
			break;
   2b74a:	e056      	b.n	2b7fa <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2b74c:	68fb      	ldr	r3, [r7, #12]
   2b74e:	6a1a      	ldr	r2, [r3, #32]
   2b750:	68bb      	ldr	r3, [r7, #8]
   2b752:	09db      	lsrs	r3, r3, #7
   2b754:	18d2      	adds	r2, r2, r3
   2b756:	231f      	movs	r3, #31
   2b758:	18fc      	adds	r4, r7, r3
   2b75a:	68fb      	ldr	r3, [r7, #12]
   2b75c:	0011      	movs	r1, r2
   2b75e:	0018      	movs	r0, r3
   2b760:	4b2b      	ldr	r3, [pc, #172]	; (2b810 <put_fat+0x238>)
   2b762:	4798      	blx	r3
   2b764:	0003      	movs	r3, r0
   2b766:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b768:	231f      	movs	r3, #31
   2b76a:	18fb      	adds	r3, r7, r3
   2b76c:	781b      	ldrb	r3, [r3, #0]
   2b76e:	2b00      	cmp	r3, #0
   2b770:	d142      	bne.n	2b7f8 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2b772:	68bb      	ldr	r3, [r7, #8]
   2b774:	009a      	lsls	r2, r3, #2
   2b776:	23fe      	movs	r3, #254	; 0xfe
   2b778:	005b      	lsls	r3, r3, #1
   2b77a:	4013      	ands	r3, r2
   2b77c:	3330      	adds	r3, #48	; 0x30
   2b77e:	68fa      	ldr	r2, [r7, #12]
   2b780:	18d3      	adds	r3, r2, r3
   2b782:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2b784:	697b      	ldr	r3, [r7, #20]
   2b786:	3303      	adds	r3, #3
   2b788:	781b      	ldrb	r3, [r3, #0]
   2b78a:	061a      	lsls	r2, r3, #24
   2b78c:	697b      	ldr	r3, [r7, #20]
   2b78e:	3302      	adds	r3, #2
   2b790:	781b      	ldrb	r3, [r3, #0]
   2b792:	041b      	lsls	r3, r3, #16
   2b794:	4313      	orrs	r3, r2
   2b796:	697a      	ldr	r2, [r7, #20]
   2b798:	3201      	adds	r2, #1
   2b79a:	7812      	ldrb	r2, [r2, #0]
   2b79c:	0212      	lsls	r2, r2, #8
   2b79e:	4313      	orrs	r3, r2
   2b7a0:	697a      	ldr	r2, [r7, #20]
   2b7a2:	7812      	ldrb	r2, [r2, #0]
   2b7a4:	4313      	orrs	r3, r2
   2b7a6:	0f1b      	lsrs	r3, r3, #28
   2b7a8:	071b      	lsls	r3, r3, #28
   2b7aa:	687a      	ldr	r2, [r7, #4]
   2b7ac:	4313      	orrs	r3, r2
   2b7ae:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2b7b0:	687b      	ldr	r3, [r7, #4]
   2b7b2:	b2da      	uxtb	r2, r3
   2b7b4:	697b      	ldr	r3, [r7, #20]
   2b7b6:	701a      	strb	r2, [r3, #0]
   2b7b8:	697b      	ldr	r3, [r7, #20]
   2b7ba:	3301      	adds	r3, #1
   2b7bc:	687a      	ldr	r2, [r7, #4]
   2b7be:	b292      	uxth	r2, r2
   2b7c0:	0a12      	lsrs	r2, r2, #8
   2b7c2:	b292      	uxth	r2, r2
   2b7c4:	b2d2      	uxtb	r2, r2
   2b7c6:	701a      	strb	r2, [r3, #0]
   2b7c8:	697b      	ldr	r3, [r7, #20]
   2b7ca:	3302      	adds	r3, #2
   2b7cc:	687a      	ldr	r2, [r7, #4]
   2b7ce:	0c12      	lsrs	r2, r2, #16
   2b7d0:	b2d2      	uxtb	r2, r2
   2b7d2:	701a      	strb	r2, [r3, #0]
   2b7d4:	697b      	ldr	r3, [r7, #20]
   2b7d6:	3303      	adds	r3, #3
   2b7d8:	687a      	ldr	r2, [r7, #4]
   2b7da:	0e12      	lsrs	r2, r2, #24
   2b7dc:	b2d2      	uxtb	r2, r2
   2b7de:	701a      	strb	r2, [r3, #0]
			break;
   2b7e0:	e00b      	b.n	2b7fa <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b7e2:	231f      	movs	r3, #31
   2b7e4:	18fb      	adds	r3, r7, r3
   2b7e6:	2202      	movs	r2, #2
   2b7e8:	701a      	strb	r2, [r3, #0]
   2b7ea:	e006      	b.n	2b7fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b7ec:	46c0      	nop			; (mov r8, r8)
   2b7ee:	e004      	b.n	2b7fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b7f0:	46c0      	nop			; (mov r8, r8)
   2b7f2:	e002      	b.n	2b7fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b7f4:	46c0      	nop			; (mov r8, r8)
   2b7f6:	e000      	b.n	2b7fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b7f8:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b7fa:	68fb      	ldr	r3, [r7, #12]
   2b7fc:	2201      	movs	r2, #1
   2b7fe:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b800:	231f      	movs	r3, #31
   2b802:	18fb      	adds	r3, r7, r3
   2b804:	781b      	ldrb	r3, [r3, #0]
}
   2b806:	0018      	movs	r0, r3
   2b808:	46bd      	mov	sp, r7
   2b80a:	b009      	add	sp, #36	; 0x24
   2b80c:	bd90      	pop	{r4, r7, pc}
   2b80e:	46c0      	nop			; (mov r8, r8)
   2b810:	0002b1d5 	.word	0x0002b1d5

0002b814 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b814:	b590      	push	{r4, r7, lr}
   2b816:	b085      	sub	sp, #20
   2b818:	af00      	add	r7, sp, #0
   2b81a:	6078      	str	r0, [r7, #4]
   2b81c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b81e:	683b      	ldr	r3, [r7, #0]
   2b820:	2b01      	cmp	r3, #1
   2b822:	d904      	bls.n	2b82e <remove_chain+0x1a>
   2b824:	687b      	ldr	r3, [r7, #4]
   2b826:	699a      	ldr	r2, [r3, #24]
   2b828:	683b      	ldr	r3, [r7, #0]
   2b82a:	429a      	cmp	r2, r3
   2b82c:	d804      	bhi.n	2b838 <remove_chain+0x24>
		res = FR_INT_ERR;
   2b82e:	230f      	movs	r3, #15
   2b830:	18fb      	adds	r3, r7, r3
   2b832:	2202      	movs	r2, #2
   2b834:	701a      	strb	r2, [r3, #0]
   2b836:	e045      	b.n	2b8c4 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b838:	230f      	movs	r3, #15
   2b83a:	18fb      	adds	r3, r7, r3
   2b83c:	2200      	movs	r2, #0
   2b83e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b840:	e037      	b.n	2b8b2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b842:	683a      	ldr	r2, [r7, #0]
   2b844:	687b      	ldr	r3, [r7, #4]
   2b846:	0011      	movs	r1, r2
   2b848:	0018      	movs	r0, r3
   2b84a:	4b22      	ldr	r3, [pc, #136]	; (2b8d4 <remove_chain+0xc0>)
   2b84c:	4798      	blx	r3
   2b84e:	0003      	movs	r3, r0
   2b850:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b852:	68bb      	ldr	r3, [r7, #8]
   2b854:	2b00      	cmp	r3, #0
   2b856:	d032      	beq.n	2b8be <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b858:	68bb      	ldr	r3, [r7, #8]
   2b85a:	2b01      	cmp	r3, #1
   2b85c:	d104      	bne.n	2b868 <remove_chain+0x54>
   2b85e:	230f      	movs	r3, #15
   2b860:	18fb      	adds	r3, r7, r3
   2b862:	2202      	movs	r2, #2
   2b864:	701a      	strb	r2, [r3, #0]
   2b866:	e02d      	b.n	2b8c4 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b868:	68bb      	ldr	r3, [r7, #8]
   2b86a:	3301      	adds	r3, #1
   2b86c:	d104      	bne.n	2b878 <remove_chain+0x64>
   2b86e:	230f      	movs	r3, #15
   2b870:	18fb      	adds	r3, r7, r3
   2b872:	2201      	movs	r2, #1
   2b874:	701a      	strb	r2, [r3, #0]
   2b876:	e025      	b.n	2b8c4 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b878:	230f      	movs	r3, #15
   2b87a:	18fc      	adds	r4, r7, r3
   2b87c:	6839      	ldr	r1, [r7, #0]
   2b87e:	687b      	ldr	r3, [r7, #4]
   2b880:	2200      	movs	r2, #0
   2b882:	0018      	movs	r0, r3
   2b884:	4b14      	ldr	r3, [pc, #80]	; (2b8d8 <remove_chain+0xc4>)
   2b886:	4798      	blx	r3
   2b888:	0003      	movs	r3, r0
   2b88a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b88c:	230f      	movs	r3, #15
   2b88e:	18fb      	adds	r3, r7, r3
   2b890:	781b      	ldrb	r3, [r3, #0]
   2b892:	2b00      	cmp	r3, #0
   2b894:	d115      	bne.n	2b8c2 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b896:	687b      	ldr	r3, [r7, #4]
   2b898:	691b      	ldr	r3, [r3, #16]
   2b89a:	3301      	adds	r3, #1
   2b89c:	d007      	beq.n	2b8ae <remove_chain+0x9a>
				fs->free_clust++;
   2b89e:	687b      	ldr	r3, [r7, #4]
   2b8a0:	691b      	ldr	r3, [r3, #16]
   2b8a2:	1c5a      	adds	r2, r3, #1
   2b8a4:	687b      	ldr	r3, [r7, #4]
   2b8a6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b8a8:	687b      	ldr	r3, [r7, #4]
   2b8aa:	2201      	movs	r2, #1
   2b8ac:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b8ae:	68bb      	ldr	r3, [r7, #8]
   2b8b0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b8b2:	687b      	ldr	r3, [r7, #4]
   2b8b4:	699a      	ldr	r2, [r3, #24]
   2b8b6:	683b      	ldr	r3, [r7, #0]
   2b8b8:	429a      	cmp	r2, r3
   2b8ba:	d8c2      	bhi.n	2b842 <remove_chain+0x2e>
   2b8bc:	e002      	b.n	2b8c4 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b8be:	46c0      	nop			; (mov r8, r8)
   2b8c0:	e000      	b.n	2b8c4 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b8c2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b8c4:	230f      	movs	r3, #15
   2b8c6:	18fb      	adds	r3, r7, r3
   2b8c8:	781b      	ldrb	r3, [r3, #0]
}
   2b8ca:	0018      	movs	r0, r3
   2b8cc:	46bd      	mov	sp, r7
   2b8ce:	b005      	add	sp, #20
   2b8d0:	bd90      	pop	{r4, r7, pc}
   2b8d2:	46c0      	nop			; (mov r8, r8)
   2b8d4:	0002b46d 	.word	0x0002b46d
   2b8d8:	0002b5d9 	.word	0x0002b5d9

0002b8dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b8dc:	b590      	push	{r4, r7, lr}
   2b8de:	b087      	sub	sp, #28
   2b8e0:	af00      	add	r7, sp, #0
   2b8e2:	6078      	str	r0, [r7, #4]
   2b8e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b8e6:	683b      	ldr	r3, [r7, #0]
   2b8e8:	2b00      	cmp	r3, #0
   2b8ea:	d10d      	bne.n	2b908 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b8ec:	687b      	ldr	r3, [r7, #4]
   2b8ee:	68db      	ldr	r3, [r3, #12]
   2b8f0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b8f2:	693b      	ldr	r3, [r7, #16]
   2b8f4:	2b00      	cmp	r3, #0
   2b8f6:	d004      	beq.n	2b902 <create_chain+0x26>
   2b8f8:	687b      	ldr	r3, [r7, #4]
   2b8fa:	699a      	ldr	r2, [r3, #24]
   2b8fc:	693b      	ldr	r3, [r7, #16]
   2b8fe:	429a      	cmp	r2, r3
   2b900:	d818      	bhi.n	2b934 <create_chain+0x58>
   2b902:	2301      	movs	r3, #1
   2b904:	613b      	str	r3, [r7, #16]
   2b906:	e015      	b.n	2b934 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b908:	683a      	ldr	r2, [r7, #0]
   2b90a:	687b      	ldr	r3, [r7, #4]
   2b90c:	0011      	movs	r1, r2
   2b90e:	0018      	movs	r0, r3
   2b910:	4b3e      	ldr	r3, [pc, #248]	; (2ba0c <create_chain+0x130>)
   2b912:	4798      	blx	r3
   2b914:	0003      	movs	r3, r0
   2b916:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b918:	68bb      	ldr	r3, [r7, #8]
   2b91a:	2b01      	cmp	r3, #1
   2b91c:	d801      	bhi.n	2b922 <create_chain+0x46>
   2b91e:	2301      	movs	r3, #1
   2b920:	e070      	b.n	2ba04 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b922:	687b      	ldr	r3, [r7, #4]
   2b924:	699a      	ldr	r2, [r3, #24]
   2b926:	68bb      	ldr	r3, [r7, #8]
   2b928:	429a      	cmp	r2, r3
   2b92a:	d901      	bls.n	2b930 <create_chain+0x54>
   2b92c:	68bb      	ldr	r3, [r7, #8]
   2b92e:	e069      	b.n	2ba04 <create_chain+0x128>
		scl = clst;
   2b930:	683b      	ldr	r3, [r7, #0]
   2b932:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b934:	693b      	ldr	r3, [r7, #16]
   2b936:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b938:	697b      	ldr	r3, [r7, #20]
   2b93a:	3301      	adds	r3, #1
   2b93c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b93e:	687b      	ldr	r3, [r7, #4]
   2b940:	699a      	ldr	r2, [r3, #24]
   2b942:	697b      	ldr	r3, [r7, #20]
   2b944:	429a      	cmp	r2, r3
   2b946:	d807      	bhi.n	2b958 <create_chain+0x7c>
			ncl = 2;
   2b948:	2302      	movs	r3, #2
   2b94a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b94c:	697a      	ldr	r2, [r7, #20]
   2b94e:	693b      	ldr	r3, [r7, #16]
   2b950:	429a      	cmp	r2, r3
   2b952:	d901      	bls.n	2b958 <create_chain+0x7c>
   2b954:	2300      	movs	r3, #0
   2b956:	e055      	b.n	2ba04 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b958:	697a      	ldr	r2, [r7, #20]
   2b95a:	687b      	ldr	r3, [r7, #4]
   2b95c:	0011      	movs	r1, r2
   2b95e:	0018      	movs	r0, r3
   2b960:	4b2a      	ldr	r3, [pc, #168]	; (2ba0c <create_chain+0x130>)
   2b962:	4798      	blx	r3
   2b964:	0003      	movs	r3, r0
   2b966:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b968:	68bb      	ldr	r3, [r7, #8]
   2b96a:	2b00      	cmp	r3, #0
   2b96c:	d00d      	beq.n	2b98a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b96e:	68bb      	ldr	r3, [r7, #8]
   2b970:	3301      	adds	r3, #1
   2b972:	d002      	beq.n	2b97a <create_chain+0x9e>
   2b974:	68bb      	ldr	r3, [r7, #8]
   2b976:	2b01      	cmp	r3, #1
   2b978:	d101      	bne.n	2b97e <create_chain+0xa2>
			return cs;
   2b97a:	68bb      	ldr	r3, [r7, #8]
   2b97c:	e042      	b.n	2ba04 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b97e:	697a      	ldr	r2, [r7, #20]
   2b980:	693b      	ldr	r3, [r7, #16]
   2b982:	429a      	cmp	r2, r3
   2b984:	d1d8      	bne.n	2b938 <create_chain+0x5c>
   2b986:	2300      	movs	r3, #0
   2b988:	e03c      	b.n	2ba04 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b98a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b98c:	230f      	movs	r3, #15
   2b98e:	18fc      	adds	r4, r7, r3
   2b990:	4a1f      	ldr	r2, [pc, #124]	; (2ba10 <create_chain+0x134>)
   2b992:	6979      	ldr	r1, [r7, #20]
   2b994:	687b      	ldr	r3, [r7, #4]
   2b996:	0018      	movs	r0, r3
   2b998:	4b1e      	ldr	r3, [pc, #120]	; (2ba14 <create_chain+0x138>)
   2b99a:	4798      	blx	r3
   2b99c:	0003      	movs	r3, r0
   2b99e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b9a0:	230f      	movs	r3, #15
   2b9a2:	18fb      	adds	r3, r7, r3
   2b9a4:	781b      	ldrb	r3, [r3, #0]
   2b9a6:	2b00      	cmp	r3, #0
   2b9a8:	d10c      	bne.n	2b9c4 <create_chain+0xe8>
   2b9aa:	683b      	ldr	r3, [r7, #0]
   2b9ac:	2b00      	cmp	r3, #0
   2b9ae:	d009      	beq.n	2b9c4 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b9b0:	230f      	movs	r3, #15
   2b9b2:	18fc      	adds	r4, r7, r3
   2b9b4:	697a      	ldr	r2, [r7, #20]
   2b9b6:	6839      	ldr	r1, [r7, #0]
   2b9b8:	687b      	ldr	r3, [r7, #4]
   2b9ba:	0018      	movs	r0, r3
   2b9bc:	4b15      	ldr	r3, [pc, #84]	; (2ba14 <create_chain+0x138>)
   2b9be:	4798      	blx	r3
   2b9c0:	0003      	movs	r3, r0
   2b9c2:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b9c4:	230f      	movs	r3, #15
   2b9c6:	18fb      	adds	r3, r7, r3
   2b9c8:	781b      	ldrb	r3, [r3, #0]
   2b9ca:	2b00      	cmp	r3, #0
   2b9cc:	d10f      	bne.n	2b9ee <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2b9ce:	687b      	ldr	r3, [r7, #4]
   2b9d0:	697a      	ldr	r2, [r7, #20]
   2b9d2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2b9d4:	687b      	ldr	r3, [r7, #4]
   2b9d6:	691b      	ldr	r3, [r3, #16]
   2b9d8:	3301      	adds	r3, #1
   2b9da:	d012      	beq.n	2ba02 <create_chain+0x126>
			fs->free_clust--;
   2b9dc:	687b      	ldr	r3, [r7, #4]
   2b9de:	691b      	ldr	r3, [r3, #16]
   2b9e0:	1e5a      	subs	r2, r3, #1
   2b9e2:	687b      	ldr	r3, [r7, #4]
   2b9e4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2b9e6:	687b      	ldr	r3, [r7, #4]
   2b9e8:	2201      	movs	r2, #1
   2b9ea:	715a      	strb	r2, [r3, #5]
   2b9ec:	e009      	b.n	2ba02 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2b9ee:	230f      	movs	r3, #15
   2b9f0:	18fb      	adds	r3, r7, r3
   2b9f2:	781b      	ldrb	r3, [r3, #0]
   2b9f4:	2b01      	cmp	r3, #1
   2b9f6:	d102      	bne.n	2b9fe <create_chain+0x122>
   2b9f8:	2301      	movs	r3, #1
   2b9fa:	425b      	negs	r3, r3
   2b9fc:	e000      	b.n	2ba00 <create_chain+0x124>
   2b9fe:	2301      	movs	r3, #1
   2ba00:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2ba02:	697b      	ldr	r3, [r7, #20]
}
   2ba04:	0018      	movs	r0, r3
   2ba06:	46bd      	mov	sp, r7
   2ba08:	b007      	add	sp, #28
   2ba0a:	bd90      	pop	{r4, r7, pc}
   2ba0c:	0002b46d 	.word	0x0002b46d
   2ba10:	0fffffff 	.word	0x0fffffff
   2ba14:	0002b5d9 	.word	0x0002b5d9

0002ba18 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2ba18:	b580      	push	{r7, lr}
   2ba1a:	b084      	sub	sp, #16
   2ba1c:	af00      	add	r7, sp, #0
   2ba1e:	6078      	str	r0, [r7, #4]
   2ba20:	000a      	movs	r2, r1
   2ba22:	1cbb      	adds	r3, r7, #2
   2ba24:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2ba26:	687b      	ldr	r3, [r7, #4]
   2ba28:	1cba      	adds	r2, r7, #2
   2ba2a:	8812      	ldrh	r2, [r2, #0]
   2ba2c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2ba2e:	687b      	ldr	r3, [r7, #4]
   2ba30:	689b      	ldr	r3, [r3, #8]
   2ba32:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2ba34:	68fb      	ldr	r3, [r7, #12]
   2ba36:	2b01      	cmp	r3, #1
   2ba38:	d005      	beq.n	2ba46 <dir_sdi+0x2e>
   2ba3a:	687b      	ldr	r3, [r7, #4]
   2ba3c:	681b      	ldr	r3, [r3, #0]
   2ba3e:	699a      	ldr	r2, [r3, #24]
   2ba40:	68fb      	ldr	r3, [r7, #12]
   2ba42:	429a      	cmp	r2, r3
   2ba44:	d801      	bhi.n	2ba4a <dir_sdi+0x32>
		return FR_INT_ERR;
   2ba46:	2302      	movs	r3, #2
   2ba48:	e075      	b.n	2bb36 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2ba4a:	68fb      	ldr	r3, [r7, #12]
   2ba4c:	2b00      	cmp	r3, #0
   2ba4e:	d108      	bne.n	2ba62 <dir_sdi+0x4a>
   2ba50:	687b      	ldr	r3, [r7, #4]
   2ba52:	681b      	ldr	r3, [r3, #0]
   2ba54:	781b      	ldrb	r3, [r3, #0]
   2ba56:	2b03      	cmp	r3, #3
   2ba58:	d103      	bne.n	2ba62 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2ba5a:	687b      	ldr	r3, [r7, #4]
   2ba5c:	681b      	ldr	r3, [r3, #0]
   2ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ba60:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2ba62:	68fb      	ldr	r3, [r7, #12]
   2ba64:	2b00      	cmp	r3, #0
   2ba66:	d116      	bne.n	2ba96 <dir_sdi+0x7e>
		dj->clust = clst;
   2ba68:	687b      	ldr	r3, [r7, #4]
   2ba6a:	68fa      	ldr	r2, [r7, #12]
   2ba6c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2ba6e:	687b      	ldr	r3, [r7, #4]
   2ba70:	681b      	ldr	r3, [r3, #0]
   2ba72:	891b      	ldrh	r3, [r3, #8]
   2ba74:	1cba      	adds	r2, r7, #2
   2ba76:	8812      	ldrh	r2, [r2, #0]
   2ba78:	429a      	cmp	r2, r3
   2ba7a:	d301      	bcc.n	2ba80 <dir_sdi+0x68>
			return FR_INT_ERR;
   2ba7c:	2302      	movs	r3, #2
   2ba7e:	e05a      	b.n	2bb36 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2ba80:	687b      	ldr	r3, [r7, #4]
   2ba82:	681b      	ldr	r3, [r3, #0]
   2ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ba86:	1cba      	adds	r2, r7, #2
   2ba88:	8812      	ldrh	r2, [r2, #0]
   2ba8a:	0912      	lsrs	r2, r2, #4
   2ba8c:	b292      	uxth	r2, r2
   2ba8e:	189a      	adds	r2, r3, r2
   2ba90:	687b      	ldr	r3, [r7, #4]
   2ba92:	611a      	str	r2, [r3, #16]
   2ba94:	e042      	b.n	2bb1c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2ba96:	687b      	ldr	r3, [r7, #4]
   2ba98:	681b      	ldr	r3, [r3, #0]
   2ba9a:	789b      	ldrb	r3, [r3, #2]
   2ba9c:	b29a      	uxth	r2, r3
   2ba9e:	230a      	movs	r3, #10
   2baa0:	18fb      	adds	r3, r7, r3
   2baa2:	0112      	lsls	r2, r2, #4
   2baa4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2baa6:	e020      	b.n	2baea <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2baa8:	687b      	ldr	r3, [r7, #4]
   2baaa:	681b      	ldr	r3, [r3, #0]
   2baac:	68fa      	ldr	r2, [r7, #12]
   2baae:	0011      	movs	r1, r2
   2bab0:	0018      	movs	r0, r3
   2bab2:	4b23      	ldr	r3, [pc, #140]	; (2bb40 <dir_sdi+0x128>)
   2bab4:	4798      	blx	r3
   2bab6:	0003      	movs	r3, r0
   2bab8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2baba:	68fb      	ldr	r3, [r7, #12]
   2babc:	3301      	adds	r3, #1
   2babe:	d101      	bne.n	2bac4 <dir_sdi+0xac>
   2bac0:	2301      	movs	r3, #1
   2bac2:	e038      	b.n	2bb36 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2bac4:	68fb      	ldr	r3, [r7, #12]
   2bac6:	2b01      	cmp	r3, #1
   2bac8:	d905      	bls.n	2bad6 <dir_sdi+0xbe>
   2baca:	687b      	ldr	r3, [r7, #4]
   2bacc:	681b      	ldr	r3, [r3, #0]
   2bace:	699a      	ldr	r2, [r3, #24]
   2bad0:	68fb      	ldr	r3, [r7, #12]
   2bad2:	429a      	cmp	r2, r3
   2bad4:	d801      	bhi.n	2bada <dir_sdi+0xc2>
				return FR_INT_ERR;
   2bad6:	2302      	movs	r3, #2
   2bad8:	e02d      	b.n	2bb36 <dir_sdi+0x11e>
			idx -= ic;
   2bada:	1cbb      	adds	r3, r7, #2
   2badc:	1cb9      	adds	r1, r7, #2
   2bade:	220a      	movs	r2, #10
   2bae0:	18ba      	adds	r2, r7, r2
   2bae2:	8809      	ldrh	r1, [r1, #0]
   2bae4:	8812      	ldrh	r2, [r2, #0]
   2bae6:	1a8a      	subs	r2, r1, r2
   2bae8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2baea:	1cba      	adds	r2, r7, #2
   2baec:	230a      	movs	r3, #10
   2baee:	18fb      	adds	r3, r7, r3
   2baf0:	8812      	ldrh	r2, [r2, #0]
   2baf2:	881b      	ldrh	r3, [r3, #0]
   2baf4:	429a      	cmp	r2, r3
   2baf6:	d2d7      	bcs.n	2baa8 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2baf8:	687b      	ldr	r3, [r7, #4]
   2bafa:	68fa      	ldr	r2, [r7, #12]
   2bafc:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bafe:	687b      	ldr	r3, [r7, #4]
   2bb00:	681b      	ldr	r3, [r3, #0]
   2bb02:	68fa      	ldr	r2, [r7, #12]
   2bb04:	0011      	movs	r1, r2
   2bb06:	0018      	movs	r0, r3
   2bb08:	4b0e      	ldr	r3, [pc, #56]	; (2bb44 <dir_sdi+0x12c>)
   2bb0a:	4798      	blx	r3
   2bb0c:	0002      	movs	r2, r0
   2bb0e:	1cbb      	adds	r3, r7, #2
   2bb10:	881b      	ldrh	r3, [r3, #0]
   2bb12:	091b      	lsrs	r3, r3, #4
   2bb14:	b29b      	uxth	r3, r3
   2bb16:	18d2      	adds	r2, r2, r3
   2bb18:	687b      	ldr	r3, [r7, #4]
   2bb1a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2bb1c:	687b      	ldr	r3, [r7, #4]
   2bb1e:	681b      	ldr	r3, [r3, #0]
   2bb20:	3330      	adds	r3, #48	; 0x30
   2bb22:	001a      	movs	r2, r3
   2bb24:	1cbb      	adds	r3, r7, #2
   2bb26:	881b      	ldrh	r3, [r3, #0]
   2bb28:	210f      	movs	r1, #15
   2bb2a:	400b      	ands	r3, r1
   2bb2c:	015b      	lsls	r3, r3, #5
   2bb2e:	18d2      	adds	r2, r2, r3
   2bb30:	687b      	ldr	r3, [r7, #4]
   2bb32:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2bb34:	2300      	movs	r3, #0
}
   2bb36:	0018      	movs	r0, r3
   2bb38:	46bd      	mov	sp, r7
   2bb3a:	b004      	add	sp, #16
   2bb3c:	bd80      	pop	{r7, pc}
   2bb3e:	46c0      	nop			; (mov r8, r8)
   2bb40:	0002b46d 	.word	0x0002b46d
   2bb44:	0002b435 	.word	0x0002b435

0002bb48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2bb48:	b590      	push	{r4, r7, lr}
   2bb4a:	b085      	sub	sp, #20
   2bb4c:	af00      	add	r7, sp, #0
   2bb4e:	6078      	str	r0, [r7, #4]
   2bb50:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2bb52:	687b      	ldr	r3, [r7, #4]
   2bb54:	88da      	ldrh	r2, [r3, #6]
   2bb56:	2308      	movs	r3, #8
   2bb58:	18fb      	adds	r3, r7, r3
   2bb5a:	3201      	adds	r2, #1
   2bb5c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2bb5e:	2308      	movs	r3, #8
   2bb60:	18fb      	adds	r3, r7, r3
   2bb62:	881b      	ldrh	r3, [r3, #0]
   2bb64:	2b00      	cmp	r3, #0
   2bb66:	d003      	beq.n	2bb70 <dir_next+0x28>
   2bb68:	687b      	ldr	r3, [r7, #4]
   2bb6a:	691b      	ldr	r3, [r3, #16]
   2bb6c:	2b00      	cmp	r3, #0
   2bb6e:	d101      	bne.n	2bb74 <dir_next+0x2c>
		return FR_NO_FILE;
   2bb70:	2304      	movs	r3, #4
   2bb72:	e0d2      	b.n	2bd1a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2bb74:	2308      	movs	r3, #8
   2bb76:	18fb      	adds	r3, r7, r3
   2bb78:	881b      	ldrh	r3, [r3, #0]
   2bb7a:	220f      	movs	r2, #15
   2bb7c:	4013      	ands	r3, r2
   2bb7e:	b29b      	uxth	r3, r3
   2bb80:	2b00      	cmp	r3, #0
   2bb82:	d000      	beq.n	2bb86 <dir_next+0x3e>
   2bb84:	e0b6      	b.n	2bcf4 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2bb86:	687b      	ldr	r3, [r7, #4]
   2bb88:	691b      	ldr	r3, [r3, #16]
   2bb8a:	1c5a      	adds	r2, r3, #1
   2bb8c:	687b      	ldr	r3, [r7, #4]
   2bb8e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2bb90:	687b      	ldr	r3, [r7, #4]
   2bb92:	68db      	ldr	r3, [r3, #12]
   2bb94:	2b00      	cmp	r3, #0
   2bb96:	d10a      	bne.n	2bbae <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2bb98:	687b      	ldr	r3, [r7, #4]
   2bb9a:	681b      	ldr	r3, [r3, #0]
   2bb9c:	891b      	ldrh	r3, [r3, #8]
   2bb9e:	2208      	movs	r2, #8
   2bba0:	18ba      	adds	r2, r7, r2
   2bba2:	8812      	ldrh	r2, [r2, #0]
   2bba4:	429a      	cmp	r2, r3
   2bba6:	d200      	bcs.n	2bbaa <dir_next+0x62>
   2bba8:	e0a4      	b.n	2bcf4 <dir_next+0x1ac>
				return FR_NO_FILE;
   2bbaa:	2304      	movs	r3, #4
   2bbac:	e0b5      	b.n	2bd1a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2bbae:	2308      	movs	r3, #8
   2bbb0:	18fb      	adds	r3, r7, r3
   2bbb2:	881b      	ldrh	r3, [r3, #0]
   2bbb4:	091b      	lsrs	r3, r3, #4
   2bbb6:	b29b      	uxth	r3, r3
   2bbb8:	001a      	movs	r2, r3
   2bbba:	687b      	ldr	r3, [r7, #4]
   2bbbc:	681b      	ldr	r3, [r3, #0]
   2bbbe:	789b      	ldrb	r3, [r3, #2]
   2bbc0:	3b01      	subs	r3, #1
   2bbc2:	4013      	ands	r3, r2
   2bbc4:	d000      	beq.n	2bbc8 <dir_next+0x80>
   2bbc6:	e095      	b.n	2bcf4 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2bbc8:	687b      	ldr	r3, [r7, #4]
   2bbca:	681a      	ldr	r2, [r3, #0]
   2bbcc:	687b      	ldr	r3, [r7, #4]
   2bbce:	68db      	ldr	r3, [r3, #12]
   2bbd0:	0019      	movs	r1, r3
   2bbd2:	0010      	movs	r0, r2
   2bbd4:	4b53      	ldr	r3, [pc, #332]	; (2bd24 <dir_next+0x1dc>)
   2bbd6:	4798      	blx	r3
   2bbd8:	0003      	movs	r3, r0
   2bbda:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2bbdc:	68fb      	ldr	r3, [r7, #12]
   2bbde:	2b01      	cmp	r3, #1
   2bbe0:	d801      	bhi.n	2bbe6 <dir_next+0x9e>
   2bbe2:	2302      	movs	r3, #2
   2bbe4:	e099      	b.n	2bd1a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bbe6:	68fb      	ldr	r3, [r7, #12]
   2bbe8:	3301      	adds	r3, #1
   2bbea:	d101      	bne.n	2bbf0 <dir_next+0xa8>
   2bbec:	2301      	movs	r3, #1
   2bbee:	e094      	b.n	2bd1a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2bbf0:	687b      	ldr	r3, [r7, #4]
   2bbf2:	681b      	ldr	r3, [r3, #0]
   2bbf4:	699a      	ldr	r2, [r3, #24]
   2bbf6:	68fb      	ldr	r3, [r7, #12]
   2bbf8:	429a      	cmp	r2, r3
   2bbfa:	d900      	bls.n	2bbfe <dir_next+0xb6>
   2bbfc:	e06d      	b.n	2bcda <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2bbfe:	683b      	ldr	r3, [r7, #0]
   2bc00:	2b00      	cmp	r3, #0
   2bc02:	d101      	bne.n	2bc08 <dir_next+0xc0>
   2bc04:	2304      	movs	r3, #4
   2bc06:	e088      	b.n	2bd1a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2bc08:	687b      	ldr	r3, [r7, #4]
   2bc0a:	681a      	ldr	r2, [r3, #0]
   2bc0c:	687b      	ldr	r3, [r7, #4]
   2bc0e:	68db      	ldr	r3, [r3, #12]
   2bc10:	0019      	movs	r1, r3
   2bc12:	0010      	movs	r0, r2
   2bc14:	4b44      	ldr	r3, [pc, #272]	; (2bd28 <dir_next+0x1e0>)
   2bc16:	4798      	blx	r3
   2bc18:	0003      	movs	r3, r0
   2bc1a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2bc1c:	68fb      	ldr	r3, [r7, #12]
   2bc1e:	2b00      	cmp	r3, #0
   2bc20:	d101      	bne.n	2bc26 <dir_next+0xde>
   2bc22:	2307      	movs	r3, #7
   2bc24:	e079      	b.n	2bd1a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2bc26:	68fb      	ldr	r3, [r7, #12]
   2bc28:	2b01      	cmp	r3, #1
   2bc2a:	d101      	bne.n	2bc30 <dir_next+0xe8>
   2bc2c:	2302      	movs	r3, #2
   2bc2e:	e074      	b.n	2bd1a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bc30:	68fb      	ldr	r3, [r7, #12]
   2bc32:	3301      	adds	r3, #1
   2bc34:	d101      	bne.n	2bc3a <dir_next+0xf2>
   2bc36:	2301      	movs	r3, #1
   2bc38:	e06f      	b.n	2bd1a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2bc3a:	687b      	ldr	r3, [r7, #4]
   2bc3c:	681b      	ldr	r3, [r3, #0]
   2bc3e:	2100      	movs	r1, #0
   2bc40:	0018      	movs	r0, r3
   2bc42:	4b3a      	ldr	r3, [pc, #232]	; (2bd2c <dir_next+0x1e4>)
   2bc44:	4798      	blx	r3
   2bc46:	1e03      	subs	r3, r0, #0
   2bc48:	d001      	beq.n	2bc4e <dir_next+0x106>
   2bc4a:	2301      	movs	r3, #1
   2bc4c:	e065      	b.n	2bd1a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2bc4e:	687b      	ldr	r3, [r7, #4]
   2bc50:	681b      	ldr	r3, [r3, #0]
   2bc52:	3330      	adds	r3, #48	; 0x30
   2bc54:	0018      	movs	r0, r3
   2bc56:	2380      	movs	r3, #128	; 0x80
   2bc58:	009b      	lsls	r3, r3, #2
   2bc5a:	001a      	movs	r2, r3
   2bc5c:	2100      	movs	r1, #0
   2bc5e:	4b34      	ldr	r3, [pc, #208]	; (2bd30 <dir_next+0x1e8>)
   2bc60:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2bc62:	687b      	ldr	r3, [r7, #4]
   2bc64:	681c      	ldr	r4, [r3, #0]
   2bc66:	687b      	ldr	r3, [r7, #4]
   2bc68:	681b      	ldr	r3, [r3, #0]
   2bc6a:	68fa      	ldr	r2, [r7, #12]
   2bc6c:	0011      	movs	r1, r2
   2bc6e:	0018      	movs	r0, r3
   2bc70:	4b30      	ldr	r3, [pc, #192]	; (2bd34 <dir_next+0x1ec>)
   2bc72:	4798      	blx	r3
   2bc74:	0003      	movs	r3, r0
   2bc76:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bc78:	230b      	movs	r3, #11
   2bc7a:	18fb      	adds	r3, r7, r3
   2bc7c:	2200      	movs	r2, #0
   2bc7e:	701a      	strb	r2, [r3, #0]
   2bc80:	e019      	b.n	2bcb6 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2bc82:	687b      	ldr	r3, [r7, #4]
   2bc84:	681b      	ldr	r3, [r3, #0]
   2bc86:	2201      	movs	r2, #1
   2bc88:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2bc8a:	687b      	ldr	r3, [r7, #4]
   2bc8c:	681b      	ldr	r3, [r3, #0]
   2bc8e:	2100      	movs	r1, #0
   2bc90:	0018      	movs	r0, r3
   2bc92:	4b26      	ldr	r3, [pc, #152]	; (2bd2c <dir_next+0x1e4>)
   2bc94:	4798      	blx	r3
   2bc96:	1e03      	subs	r3, r0, #0
   2bc98:	d001      	beq.n	2bc9e <dir_next+0x156>
   2bc9a:	2301      	movs	r3, #1
   2bc9c:	e03d      	b.n	2bd1a <dir_next+0x1d2>
						dj->fs->winsect++;
   2bc9e:	687b      	ldr	r3, [r7, #4]
   2bca0:	681b      	ldr	r3, [r3, #0]
   2bca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bca4:	3201      	adds	r2, #1
   2bca6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bca8:	230b      	movs	r3, #11
   2bcaa:	18fb      	adds	r3, r7, r3
   2bcac:	781a      	ldrb	r2, [r3, #0]
   2bcae:	230b      	movs	r3, #11
   2bcb0:	18fb      	adds	r3, r7, r3
   2bcb2:	3201      	adds	r2, #1
   2bcb4:	701a      	strb	r2, [r3, #0]
   2bcb6:	687b      	ldr	r3, [r7, #4]
   2bcb8:	681b      	ldr	r3, [r3, #0]
   2bcba:	789b      	ldrb	r3, [r3, #2]
   2bcbc:	220b      	movs	r2, #11
   2bcbe:	18ba      	adds	r2, r7, r2
   2bcc0:	7812      	ldrb	r2, [r2, #0]
   2bcc2:	429a      	cmp	r2, r3
   2bcc4:	d3dd      	bcc.n	2bc82 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2bcc6:	687b      	ldr	r3, [r7, #4]
   2bcc8:	681b      	ldr	r3, [r3, #0]
   2bcca:	687a      	ldr	r2, [r7, #4]
   2bccc:	6812      	ldr	r2, [r2, #0]
   2bcce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2bcd0:	220b      	movs	r2, #11
   2bcd2:	18ba      	adds	r2, r7, r2
   2bcd4:	7812      	ldrb	r2, [r2, #0]
   2bcd6:	1a8a      	subs	r2, r1, r2
   2bcd8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2bcda:	687b      	ldr	r3, [r7, #4]
   2bcdc:	68fa      	ldr	r2, [r7, #12]
   2bcde:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2bce0:	687b      	ldr	r3, [r7, #4]
   2bce2:	681b      	ldr	r3, [r3, #0]
   2bce4:	68fa      	ldr	r2, [r7, #12]
   2bce6:	0011      	movs	r1, r2
   2bce8:	0018      	movs	r0, r3
   2bcea:	4b12      	ldr	r3, [pc, #72]	; (2bd34 <dir_next+0x1ec>)
   2bcec:	4798      	blx	r3
   2bcee:	0002      	movs	r2, r0
   2bcf0:	687b      	ldr	r3, [r7, #4]
   2bcf2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2bcf4:	687b      	ldr	r3, [r7, #4]
   2bcf6:	2208      	movs	r2, #8
   2bcf8:	18ba      	adds	r2, r7, r2
   2bcfa:	8812      	ldrh	r2, [r2, #0]
   2bcfc:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2bcfe:	687b      	ldr	r3, [r7, #4]
   2bd00:	681b      	ldr	r3, [r3, #0]
   2bd02:	3330      	adds	r3, #48	; 0x30
   2bd04:	001a      	movs	r2, r3
   2bd06:	2308      	movs	r3, #8
   2bd08:	18fb      	adds	r3, r7, r3
   2bd0a:	881b      	ldrh	r3, [r3, #0]
   2bd0c:	210f      	movs	r1, #15
   2bd0e:	400b      	ands	r3, r1
   2bd10:	015b      	lsls	r3, r3, #5
   2bd12:	18d2      	adds	r2, r2, r3
   2bd14:	687b      	ldr	r3, [r7, #4]
   2bd16:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2bd18:	2300      	movs	r3, #0
}
   2bd1a:	0018      	movs	r0, r3
   2bd1c:	46bd      	mov	sp, r7
   2bd1e:	b005      	add	sp, #20
   2bd20:	bd90      	pop	{r4, r7, pc}
   2bd22:	46c0      	nop			; (mov r8, r8)
   2bd24:	0002b46d 	.word	0x0002b46d
   2bd28:	0002b8dd 	.word	0x0002b8dd
   2bd2c:	0002b1d5 	.word	0x0002b1d5
   2bd30:	0002b129 	.word	0x0002b129
   2bd34:	0002b435 	.word	0x0002b435

0002bd38 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2bd38:	b590      	push	{r4, r7, lr}
   2bd3a:	b087      	sub	sp, #28
   2bd3c:	af00      	add	r7, sp, #0
   2bd3e:	6078      	str	r0, [r7, #4]
   2bd40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2bd42:	683b      	ldr	r3, [r7, #0]
   2bd44:	781b      	ldrb	r3, [r3, #0]
   2bd46:	001a      	movs	r2, r3
   2bd48:	2340      	movs	r3, #64	; 0x40
   2bd4a:	439a      	bics	r2, r3
   2bd4c:	0013      	movs	r3, r2
   2bd4e:	1e5a      	subs	r2, r3, #1
   2bd50:	0013      	movs	r3, r2
   2bd52:	005b      	lsls	r3, r3, #1
   2bd54:	189b      	adds	r3, r3, r2
   2bd56:	009b      	lsls	r3, r3, #2
   2bd58:	189b      	adds	r3, r3, r2
   2bd5a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2bd5c:	2300      	movs	r3, #0
   2bd5e:	613b      	str	r3, [r7, #16]
   2bd60:	230e      	movs	r3, #14
   2bd62:	18fb      	adds	r3, r7, r3
   2bd64:	2201      	movs	r2, #1
   2bd66:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2bd68:	4a31      	ldr	r2, [pc, #196]	; (2be30 <cmp_lfn+0xf8>)
   2bd6a:	693b      	ldr	r3, [r7, #16]
   2bd6c:	18d3      	adds	r3, r2, r3
   2bd6e:	781b      	ldrb	r3, [r3, #0]
   2bd70:	3301      	adds	r3, #1
   2bd72:	683a      	ldr	r2, [r7, #0]
   2bd74:	18d3      	adds	r3, r2, r3
   2bd76:	781b      	ldrb	r3, [r3, #0]
   2bd78:	021b      	lsls	r3, r3, #8
   2bd7a:	b21a      	sxth	r2, r3
   2bd7c:	492c      	ldr	r1, [pc, #176]	; (2be30 <cmp_lfn+0xf8>)
   2bd7e:	693b      	ldr	r3, [r7, #16]
   2bd80:	18cb      	adds	r3, r1, r3
   2bd82:	781b      	ldrb	r3, [r3, #0]
   2bd84:	0019      	movs	r1, r3
   2bd86:	683b      	ldr	r3, [r7, #0]
   2bd88:	185b      	adds	r3, r3, r1
   2bd8a:	781b      	ldrb	r3, [r3, #0]
   2bd8c:	b21b      	sxth	r3, r3
   2bd8e:	4313      	orrs	r3, r2
   2bd90:	b21a      	sxth	r2, r3
   2bd92:	230c      	movs	r3, #12
   2bd94:	18fb      	adds	r3, r7, r3
   2bd96:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2bd98:	230e      	movs	r3, #14
   2bd9a:	18fb      	adds	r3, r7, r3
   2bd9c:	881b      	ldrh	r3, [r3, #0]
   2bd9e:	2b00      	cmp	r3, #0
   2bda0:	d01f      	beq.n	2bde2 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2bda2:	230e      	movs	r3, #14
   2bda4:	18fc      	adds	r4, r7, r3
   2bda6:	230c      	movs	r3, #12
   2bda8:	18fb      	adds	r3, r7, r3
   2bdaa:	881b      	ldrh	r3, [r3, #0]
   2bdac:	0018      	movs	r0, r3
   2bdae:	4b21      	ldr	r3, [pc, #132]	; (2be34 <cmp_lfn+0xfc>)
   2bdb0:	4798      	blx	r3
   2bdb2:	0003      	movs	r3, r0
   2bdb4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2bdb6:	697b      	ldr	r3, [r7, #20]
   2bdb8:	2bfe      	cmp	r3, #254	; 0xfe
   2bdba:	d810      	bhi.n	2bdde <cmp_lfn+0xa6>
   2bdbc:	697b      	ldr	r3, [r7, #20]
   2bdbe:	1c5a      	adds	r2, r3, #1
   2bdc0:	617a      	str	r2, [r7, #20]
   2bdc2:	005b      	lsls	r3, r3, #1
   2bdc4:	687a      	ldr	r2, [r7, #4]
   2bdc6:	18d3      	adds	r3, r2, r3
   2bdc8:	881b      	ldrh	r3, [r3, #0]
   2bdca:	0018      	movs	r0, r3
   2bdcc:	4b19      	ldr	r3, [pc, #100]	; (2be34 <cmp_lfn+0xfc>)
   2bdce:	4798      	blx	r3
   2bdd0:	0003      	movs	r3, r0
   2bdd2:	001a      	movs	r2, r3
   2bdd4:	230e      	movs	r3, #14
   2bdd6:	18fb      	adds	r3, r7, r3
   2bdd8:	881b      	ldrh	r3, [r3, #0]
   2bdda:	4293      	cmp	r3, r2
   2bddc:	d009      	beq.n	2bdf2 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2bdde:	2300      	movs	r3, #0
   2bde0:	e022      	b.n	2be28 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2bde2:	230c      	movs	r3, #12
   2bde4:	18fb      	adds	r3, r7, r3
   2bde6:	881b      	ldrh	r3, [r3, #0]
   2bde8:	4a13      	ldr	r2, [pc, #76]	; (2be38 <cmp_lfn+0x100>)
   2bdea:	4293      	cmp	r3, r2
   2bdec:	d001      	beq.n	2bdf2 <cmp_lfn+0xba>
   2bdee:	2300      	movs	r3, #0
   2bdf0:	e01a      	b.n	2be28 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2bdf2:	693b      	ldr	r3, [r7, #16]
   2bdf4:	3301      	adds	r3, #1
   2bdf6:	613b      	str	r3, [r7, #16]
   2bdf8:	693b      	ldr	r3, [r7, #16]
   2bdfa:	2b0c      	cmp	r3, #12
   2bdfc:	d9b4      	bls.n	2bd68 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2bdfe:	683b      	ldr	r3, [r7, #0]
   2be00:	781b      	ldrb	r3, [r3, #0]
   2be02:	001a      	movs	r2, r3
   2be04:	2340      	movs	r3, #64	; 0x40
   2be06:	4013      	ands	r3, r2
   2be08:	d00d      	beq.n	2be26 <cmp_lfn+0xee>
   2be0a:	230e      	movs	r3, #14
   2be0c:	18fb      	adds	r3, r7, r3
   2be0e:	881b      	ldrh	r3, [r3, #0]
   2be10:	2b00      	cmp	r3, #0
   2be12:	d008      	beq.n	2be26 <cmp_lfn+0xee>
   2be14:	697b      	ldr	r3, [r7, #20]
   2be16:	005b      	lsls	r3, r3, #1
   2be18:	687a      	ldr	r2, [r7, #4]
   2be1a:	18d3      	adds	r3, r2, r3
   2be1c:	881b      	ldrh	r3, [r3, #0]
   2be1e:	2b00      	cmp	r3, #0
   2be20:	d001      	beq.n	2be26 <cmp_lfn+0xee>
		return 0;
   2be22:	2300      	movs	r3, #0
   2be24:	e000      	b.n	2be28 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2be26:	2301      	movs	r3, #1
}
   2be28:	0018      	movs	r0, r3
   2be2a:	46bd      	mov	sp, r7
   2be2c:	b007      	add	sp, #28
   2be2e:	bd90      	pop	{r4, r7, pc}
   2be30:	00038a30 	.word	0x00038a30
   2be34:	0002dde5 	.word	0x0002dde5
   2be38:	0000ffff 	.word	0x0000ffff

0002be3c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2be3c:	b580      	push	{r7, lr}
   2be3e:	b088      	sub	sp, #32
   2be40:	af00      	add	r7, sp, #0
   2be42:	60f8      	str	r0, [r7, #12]
   2be44:	60b9      	str	r1, [r7, #8]
   2be46:	0019      	movs	r1, r3
   2be48:	1dfb      	adds	r3, r7, #7
   2be4a:	701a      	strb	r2, [r3, #0]
   2be4c:	1dbb      	adds	r3, r7, #6
   2be4e:	1c0a      	adds	r2, r1, #0
   2be50:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2be52:	68bb      	ldr	r3, [r7, #8]
   2be54:	330d      	adds	r3, #13
   2be56:	1dba      	adds	r2, r7, #6
   2be58:	7812      	ldrb	r2, [r2, #0]
   2be5a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2be5c:	68bb      	ldr	r3, [r7, #8]
   2be5e:	330b      	adds	r3, #11
   2be60:	220f      	movs	r2, #15
   2be62:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2be64:	68bb      	ldr	r3, [r7, #8]
   2be66:	330c      	adds	r3, #12
   2be68:	2200      	movs	r2, #0
   2be6a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2be6c:	68bb      	ldr	r3, [r7, #8]
   2be6e:	331a      	adds	r3, #26
   2be70:	2200      	movs	r2, #0
   2be72:	701a      	strb	r2, [r3, #0]
   2be74:	68bb      	ldr	r3, [r7, #8]
   2be76:	331b      	adds	r3, #27
   2be78:	2200      	movs	r2, #0
   2be7a:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2be7c:	1dfb      	adds	r3, r7, #7
   2be7e:	781b      	ldrb	r3, [r3, #0]
   2be80:	1e5a      	subs	r2, r3, #1
   2be82:	0013      	movs	r3, r2
   2be84:	005b      	lsls	r3, r3, #1
   2be86:	189b      	adds	r3, r3, r2
   2be88:	009b      	lsls	r3, r3, #2
   2be8a:	189b      	adds	r3, r3, r2
   2be8c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2be8e:	2316      	movs	r3, #22
   2be90:	18fb      	adds	r3, r7, r3
   2be92:	2200      	movs	r2, #0
   2be94:	801a      	strh	r2, [r3, #0]
   2be96:	2300      	movs	r3, #0
   2be98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2be9a:	2316      	movs	r3, #22
   2be9c:	18fb      	adds	r3, r7, r3
   2be9e:	881b      	ldrh	r3, [r3, #0]
   2bea0:	4a28      	ldr	r2, [pc, #160]	; (2bf44 <fit_lfn+0x108>)
   2bea2:	4293      	cmp	r3, r2
   2bea4:	d009      	beq.n	2beba <fit_lfn+0x7e>
   2bea6:	69fb      	ldr	r3, [r7, #28]
   2bea8:	1c5a      	adds	r2, r3, #1
   2beaa:	61fa      	str	r2, [r7, #28]
   2beac:	005b      	lsls	r3, r3, #1
   2beae:	68fa      	ldr	r2, [r7, #12]
   2beb0:	18d2      	adds	r2, r2, r3
   2beb2:	2316      	movs	r3, #22
   2beb4:	18fb      	adds	r3, r7, r3
   2beb6:	8812      	ldrh	r2, [r2, #0]
   2beb8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2beba:	4a23      	ldr	r2, [pc, #140]	; (2bf48 <fit_lfn+0x10c>)
   2bebc:	69bb      	ldr	r3, [r7, #24]
   2bebe:	18d3      	adds	r3, r2, r3
   2bec0:	781b      	ldrb	r3, [r3, #0]
   2bec2:	001a      	movs	r2, r3
   2bec4:	68bb      	ldr	r3, [r7, #8]
   2bec6:	189b      	adds	r3, r3, r2
   2bec8:	2216      	movs	r2, #22
   2beca:	18ba      	adds	r2, r7, r2
   2becc:	8812      	ldrh	r2, [r2, #0]
   2bece:	b2d2      	uxtb	r2, r2
   2bed0:	701a      	strb	r2, [r3, #0]
   2bed2:	4a1d      	ldr	r2, [pc, #116]	; (2bf48 <fit_lfn+0x10c>)
   2bed4:	69bb      	ldr	r3, [r7, #24]
   2bed6:	18d3      	adds	r3, r2, r3
   2bed8:	781b      	ldrb	r3, [r3, #0]
   2beda:	3301      	adds	r3, #1
   2bedc:	68ba      	ldr	r2, [r7, #8]
   2bede:	18d3      	adds	r3, r2, r3
   2bee0:	2216      	movs	r2, #22
   2bee2:	18ba      	adds	r2, r7, r2
   2bee4:	8812      	ldrh	r2, [r2, #0]
   2bee6:	0a12      	lsrs	r2, r2, #8
   2bee8:	b292      	uxth	r2, r2
   2beea:	b2d2      	uxtb	r2, r2
   2beec:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2beee:	2316      	movs	r3, #22
   2bef0:	18fb      	adds	r3, r7, r3
   2bef2:	881b      	ldrh	r3, [r3, #0]
   2bef4:	2b00      	cmp	r3, #0
   2bef6:	d104      	bne.n	2bf02 <fit_lfn+0xc6>
   2bef8:	2316      	movs	r3, #22
   2befa:	18fb      	adds	r3, r7, r3
   2befc:	2201      	movs	r2, #1
   2befe:	4252      	negs	r2, r2
   2bf00:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2bf02:	69bb      	ldr	r3, [r7, #24]
   2bf04:	3301      	adds	r3, #1
   2bf06:	61bb      	str	r3, [r7, #24]
   2bf08:	69bb      	ldr	r3, [r7, #24]
   2bf0a:	2b0c      	cmp	r3, #12
   2bf0c:	d9c5      	bls.n	2be9a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2bf0e:	2316      	movs	r3, #22
   2bf10:	18fb      	adds	r3, r7, r3
   2bf12:	881b      	ldrh	r3, [r3, #0]
   2bf14:	4a0b      	ldr	r2, [pc, #44]	; (2bf44 <fit_lfn+0x108>)
   2bf16:	4293      	cmp	r3, r2
   2bf18:	d006      	beq.n	2bf28 <fit_lfn+0xec>
   2bf1a:	69fb      	ldr	r3, [r7, #28]
   2bf1c:	005b      	lsls	r3, r3, #1
   2bf1e:	68fa      	ldr	r2, [r7, #12]
   2bf20:	18d3      	adds	r3, r2, r3
   2bf22:	881b      	ldrh	r3, [r3, #0]
   2bf24:	2b00      	cmp	r3, #0
   2bf26:	d105      	bne.n	2bf34 <fit_lfn+0xf8>
   2bf28:	1dfb      	adds	r3, r7, #7
   2bf2a:	1dfa      	adds	r2, r7, #7
   2bf2c:	7812      	ldrb	r2, [r2, #0]
   2bf2e:	2140      	movs	r1, #64	; 0x40
   2bf30:	430a      	orrs	r2, r1
   2bf32:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2bf34:	68bb      	ldr	r3, [r7, #8]
   2bf36:	1dfa      	adds	r2, r7, #7
   2bf38:	7812      	ldrb	r2, [r2, #0]
   2bf3a:	701a      	strb	r2, [r3, #0]
}
   2bf3c:	46c0      	nop			; (mov r8, r8)
   2bf3e:	46bd      	mov	sp, r7
   2bf40:	b008      	add	sp, #32
   2bf42:	bd80      	pop	{r7, pc}
   2bf44:	0000ffff 	.word	0x0000ffff
   2bf48:	00038a30 	.word	0x00038a30

0002bf4c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2bf4c:	b580      	push	{r7, lr}
   2bf4e:	b08a      	sub	sp, #40	; 0x28
   2bf50:	af00      	add	r7, sp, #0
   2bf52:	60f8      	str	r0, [r7, #12]
   2bf54:	60b9      	str	r1, [r7, #8]
   2bf56:	607a      	str	r2, [r7, #4]
   2bf58:	001a      	movs	r2, r3
   2bf5a:	1cbb      	adds	r3, r7, #2
   2bf5c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2bf5e:	68b9      	ldr	r1, [r7, #8]
   2bf60:	68fb      	ldr	r3, [r7, #12]
   2bf62:	220b      	movs	r2, #11
   2bf64:	0018      	movs	r0, r3
   2bf66:	4b38      	ldr	r3, [pc, #224]	; (2c048 <gen_numname+0xfc>)
   2bf68:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2bf6a:	1cbb      	adds	r3, r7, #2
   2bf6c:	881b      	ldrh	r3, [r3, #0]
   2bf6e:	2b05      	cmp	r3, #5
   2bf70:	d911      	bls.n	2bf96 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2bf72:	1cbb      	adds	r3, r7, #2
   2bf74:	881b      	ldrh	r3, [r3, #0]
   2bf76:	b29a      	uxth	r2, r3
   2bf78:	0852      	lsrs	r2, r2, #1
   2bf7a:	03db      	lsls	r3, r3, #15
   2bf7c:	4313      	orrs	r3, r2
   2bf7e:	b299      	uxth	r1, r3
   2bf80:	687b      	ldr	r3, [r7, #4]
   2bf82:	1c9a      	adds	r2, r3, #2
   2bf84:	607a      	str	r2, [r7, #4]
   2bf86:	881a      	ldrh	r2, [r3, #0]
   2bf88:	1cbb      	adds	r3, r7, #2
   2bf8a:	188a      	adds	r2, r1, r2
   2bf8c:	801a      	strh	r2, [r3, #0]
   2bf8e:	687b      	ldr	r3, [r7, #4]
   2bf90:	881b      	ldrh	r3, [r3, #0]
   2bf92:	2b00      	cmp	r3, #0
   2bf94:	d1ed      	bne.n	2bf72 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2bf96:	2307      	movs	r3, #7
   2bf98:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2bf9a:	1cbb      	adds	r3, r7, #2
   2bf9c:	881b      	ldrh	r3, [r3, #0]
   2bf9e:	b2db      	uxtb	r3, r3
   2bfa0:	220f      	movs	r2, #15
   2bfa2:	4013      	ands	r3, r2
   2bfa4:	b2da      	uxtb	r2, r3
   2bfa6:	2327      	movs	r3, #39	; 0x27
   2bfa8:	18fb      	adds	r3, r7, r3
   2bfaa:	3230      	adds	r2, #48	; 0x30
   2bfac:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2bfae:	2327      	movs	r3, #39	; 0x27
   2bfb0:	18fb      	adds	r3, r7, r3
   2bfb2:	781b      	ldrb	r3, [r3, #0]
   2bfb4:	2b39      	cmp	r3, #57	; 0x39
   2bfb6:	d906      	bls.n	2bfc6 <gen_numname+0x7a>
   2bfb8:	2327      	movs	r3, #39	; 0x27
   2bfba:	18fb      	adds	r3, r7, r3
   2bfbc:	2227      	movs	r2, #39	; 0x27
   2bfbe:	18ba      	adds	r2, r7, r2
   2bfc0:	7812      	ldrb	r2, [r2, #0]
   2bfc2:	3207      	adds	r2, #7
   2bfc4:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2bfc6:	6a3b      	ldr	r3, [r7, #32]
   2bfc8:	1e5a      	subs	r2, r3, #1
   2bfca:	623a      	str	r2, [r7, #32]
   2bfcc:	2214      	movs	r2, #20
   2bfce:	18ba      	adds	r2, r7, r2
   2bfd0:	2127      	movs	r1, #39	; 0x27
   2bfd2:	1879      	adds	r1, r7, r1
   2bfd4:	7809      	ldrb	r1, [r1, #0]
   2bfd6:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2bfd8:	1cbb      	adds	r3, r7, #2
   2bfda:	1cba      	adds	r2, r7, #2
   2bfdc:	8812      	ldrh	r2, [r2, #0]
   2bfde:	0912      	lsrs	r2, r2, #4
   2bfe0:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2bfe2:	1cbb      	adds	r3, r7, #2
   2bfe4:	881b      	ldrh	r3, [r3, #0]
   2bfe6:	2b00      	cmp	r3, #0
   2bfe8:	d1d7      	bne.n	2bf9a <gen_numname+0x4e>
	ns[i] = '~';
   2bfea:	2314      	movs	r3, #20
   2bfec:	18fa      	adds	r2, r7, r3
   2bfee:	6a3b      	ldr	r3, [r7, #32]
   2bff0:	18d3      	adds	r3, r2, r3
   2bff2:	227e      	movs	r2, #126	; 0x7e
   2bff4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2bff6:	2300      	movs	r3, #0
   2bff8:	61fb      	str	r3, [r7, #28]
   2bffa:	e002      	b.n	2c002 <gen_numname+0xb6>
   2bffc:	69fb      	ldr	r3, [r7, #28]
   2bffe:	3301      	adds	r3, #1
   2c000:	61fb      	str	r3, [r7, #28]
   2c002:	69fa      	ldr	r2, [r7, #28]
   2c004:	6a3b      	ldr	r3, [r7, #32]
   2c006:	429a      	cmp	r2, r3
   2c008:	d205      	bcs.n	2c016 <gen_numname+0xca>
   2c00a:	68fa      	ldr	r2, [r7, #12]
   2c00c:	69fb      	ldr	r3, [r7, #28]
   2c00e:	18d3      	adds	r3, r2, r3
   2c010:	781b      	ldrb	r3, [r3, #0]
   2c012:	2b20      	cmp	r3, #32
   2c014:	d1f2      	bne.n	2bffc <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c016:	69fb      	ldr	r3, [r7, #28]
   2c018:	1c5a      	adds	r2, r3, #1
   2c01a:	61fa      	str	r2, [r7, #28]
   2c01c:	68fa      	ldr	r2, [r7, #12]
   2c01e:	18d2      	adds	r2, r2, r3
   2c020:	6a3b      	ldr	r3, [r7, #32]
   2c022:	2b07      	cmp	r3, #7
   2c024:	d806      	bhi.n	2c034 <gen_numname+0xe8>
   2c026:	6a3b      	ldr	r3, [r7, #32]
   2c028:	1c59      	adds	r1, r3, #1
   2c02a:	6239      	str	r1, [r7, #32]
   2c02c:	2114      	movs	r1, #20
   2c02e:	1879      	adds	r1, r7, r1
   2c030:	5ccb      	ldrb	r3, [r1, r3]
   2c032:	e000      	b.n	2c036 <gen_numname+0xea>
   2c034:	2320      	movs	r3, #32
   2c036:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c038:	69fb      	ldr	r3, [r7, #28]
   2c03a:	2b07      	cmp	r3, #7
   2c03c:	d9eb      	bls.n	2c016 <gen_numname+0xca>
}
   2c03e:	46c0      	nop			; (mov r8, r8)
   2c040:	46bd      	mov	sp, r7
   2c042:	b00a      	add	sp, #40	; 0x28
   2c044:	bd80      	pop	{r7, pc}
   2c046:	46c0      	nop			; (mov r8, r8)
   2c048:	0002b0f1 	.word	0x0002b0f1

0002c04c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c04c:	b580      	push	{r7, lr}
   2c04e:	b084      	sub	sp, #16
   2c050:	af00      	add	r7, sp, #0
   2c052:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c054:	230f      	movs	r3, #15
   2c056:	18fb      	adds	r3, r7, r3
   2c058:	2200      	movs	r2, #0
   2c05a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c05c:	230b      	movs	r3, #11
   2c05e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c060:	230f      	movs	r3, #15
   2c062:	18fb      	adds	r3, r7, r3
   2c064:	781b      	ldrb	r3, [r3, #0]
   2c066:	b2da      	uxtb	r2, r3
   2c068:	0852      	lsrs	r2, r2, #1
   2c06a:	01db      	lsls	r3, r3, #7
   2c06c:	4313      	orrs	r3, r2
   2c06e:	b2d9      	uxtb	r1, r3
   2c070:	687b      	ldr	r3, [r7, #4]
   2c072:	1c5a      	adds	r2, r3, #1
   2c074:	607a      	str	r2, [r7, #4]
   2c076:	781a      	ldrb	r2, [r3, #0]
   2c078:	230f      	movs	r3, #15
   2c07a:	18fb      	adds	r3, r7, r3
   2c07c:	188a      	adds	r2, r1, r2
   2c07e:	701a      	strb	r2, [r3, #0]
   2c080:	68bb      	ldr	r3, [r7, #8]
   2c082:	3b01      	subs	r3, #1
   2c084:	60bb      	str	r3, [r7, #8]
   2c086:	68bb      	ldr	r3, [r7, #8]
   2c088:	2b00      	cmp	r3, #0
   2c08a:	d1e9      	bne.n	2c060 <sum_sfn+0x14>
	return sum;
   2c08c:	230f      	movs	r3, #15
   2c08e:	18fb      	adds	r3, r7, r3
   2c090:	781b      	ldrb	r3, [r3, #0]
}
   2c092:	0018      	movs	r0, r3
   2c094:	46bd      	mov	sp, r7
   2c096:	b004      	add	sp, #16
   2c098:	bd80      	pop	{r7, pc}
	...

0002c09c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c09c:	b590      	push	{r4, r7, lr}
   2c09e:	b087      	sub	sp, #28
   2c0a0:	af00      	add	r7, sp, #0
   2c0a2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c0a4:	2317      	movs	r3, #23
   2c0a6:	18fc      	adds	r4, r7, r3
   2c0a8:	687b      	ldr	r3, [r7, #4]
   2c0aa:	2100      	movs	r1, #0
   2c0ac:	0018      	movs	r0, r3
   2c0ae:	4b74      	ldr	r3, [pc, #464]	; (2c280 <dir_find+0x1e4>)
   2c0b0:	4798      	blx	r3
   2c0b2:	0003      	movs	r3, r0
   2c0b4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c0b6:	2317      	movs	r3, #23
   2c0b8:	18fb      	adds	r3, r7, r3
   2c0ba:	781b      	ldrb	r3, [r3, #0]
   2c0bc:	2b00      	cmp	r3, #0
   2c0be:	d003      	beq.n	2c0c8 <dir_find+0x2c>
   2c0c0:	2317      	movs	r3, #23
   2c0c2:	18fb      	adds	r3, r7, r3
   2c0c4:	781b      	ldrb	r3, [r3, #0]
   2c0c6:	e0d6      	b.n	2c276 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c0c8:	2314      	movs	r3, #20
   2c0ca:	18fb      	adds	r3, r7, r3
   2c0cc:	22ff      	movs	r2, #255	; 0xff
   2c0ce:	701a      	strb	r2, [r3, #0]
   2c0d0:	2315      	movs	r3, #21
   2c0d2:	18fb      	adds	r3, r7, r3
   2c0d4:	2214      	movs	r2, #20
   2c0d6:	18ba      	adds	r2, r7, r2
   2c0d8:	7812      	ldrb	r2, [r2, #0]
   2c0da:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c0dc:	687b      	ldr	r3, [r7, #4]
   2c0de:	681a      	ldr	r2, [r3, #0]
   2c0e0:	687b      	ldr	r3, [r7, #4]
   2c0e2:	691b      	ldr	r3, [r3, #16]
   2c0e4:	2117      	movs	r1, #23
   2c0e6:	187c      	adds	r4, r7, r1
   2c0e8:	0019      	movs	r1, r3
   2c0ea:	0010      	movs	r0, r2
   2c0ec:	4b65      	ldr	r3, [pc, #404]	; (2c284 <dir_find+0x1e8>)
   2c0ee:	4798      	blx	r3
   2c0f0:	0003      	movs	r3, r0
   2c0f2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c0f4:	2317      	movs	r3, #23
   2c0f6:	18fb      	adds	r3, r7, r3
   2c0f8:	781b      	ldrb	r3, [r3, #0]
   2c0fa:	2b00      	cmp	r3, #0
   2c0fc:	d000      	beq.n	2c100 <dir_find+0x64>
   2c0fe:	e0b2      	b.n	2c266 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c100:	687b      	ldr	r3, [r7, #4]
   2c102:	695b      	ldr	r3, [r3, #20]
   2c104:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c106:	2316      	movs	r3, #22
   2c108:	18fb      	adds	r3, r7, r3
   2c10a:	693a      	ldr	r2, [r7, #16]
   2c10c:	7812      	ldrb	r2, [r2, #0]
   2c10e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c110:	2316      	movs	r3, #22
   2c112:	18fb      	adds	r3, r7, r3
   2c114:	781b      	ldrb	r3, [r3, #0]
   2c116:	2b00      	cmp	r3, #0
   2c118:	d104      	bne.n	2c124 <dir_find+0x88>
   2c11a:	2317      	movs	r3, #23
   2c11c:	18fb      	adds	r3, r7, r3
   2c11e:	2204      	movs	r2, #4
   2c120:	701a      	strb	r2, [r3, #0]
   2c122:	e0a5      	b.n	2c270 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c124:	693b      	ldr	r3, [r7, #16]
   2c126:	330b      	adds	r3, #11
   2c128:	781a      	ldrb	r2, [r3, #0]
   2c12a:	230f      	movs	r3, #15
   2c12c:	18fb      	adds	r3, r7, r3
   2c12e:	213f      	movs	r1, #63	; 0x3f
   2c130:	400a      	ands	r2, r1
   2c132:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c134:	2316      	movs	r3, #22
   2c136:	18fb      	adds	r3, r7, r3
   2c138:	781b      	ldrb	r3, [r3, #0]
   2c13a:	2be5      	cmp	r3, #229	; 0xe5
   2c13c:	d00a      	beq.n	2c154 <dir_find+0xb8>
   2c13e:	230f      	movs	r3, #15
   2c140:	18fb      	adds	r3, r7, r3
   2c142:	781b      	ldrb	r3, [r3, #0]
   2c144:	2208      	movs	r2, #8
   2c146:	4013      	ands	r3, r2
   2c148:	d009      	beq.n	2c15e <dir_find+0xc2>
   2c14a:	230f      	movs	r3, #15
   2c14c:	18fb      	adds	r3, r7, r3
   2c14e:	781b      	ldrb	r3, [r3, #0]
   2c150:	2b0f      	cmp	r3, #15
   2c152:	d004      	beq.n	2c15e <dir_find+0xc2>
			ord = 0xFF;
   2c154:	2315      	movs	r3, #21
   2c156:	18fb      	adds	r3, r7, r3
   2c158:	22ff      	movs	r2, #255	; 0xff
   2c15a:	701a      	strb	r2, [r3, #0]
   2c15c:	e073      	b.n	2c246 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c15e:	230f      	movs	r3, #15
   2c160:	18fb      	adds	r3, r7, r3
   2c162:	781b      	ldrb	r3, [r3, #0]
   2c164:	2b0f      	cmp	r3, #15
   2c166:	d145      	bne.n	2c1f4 <dir_find+0x158>
				if (dj->lfn) {
   2c168:	687b      	ldr	r3, [r7, #4]
   2c16a:	69db      	ldr	r3, [r3, #28]
   2c16c:	2b00      	cmp	r3, #0
   2c16e:	d100      	bne.n	2c172 <dir_find+0xd6>
   2c170:	e069      	b.n	2c246 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c172:	2316      	movs	r3, #22
   2c174:	18fb      	adds	r3, r7, r3
   2c176:	781b      	ldrb	r3, [r3, #0]
   2c178:	2240      	movs	r2, #64	; 0x40
   2c17a:	4013      	ands	r3, r2
   2c17c:	d016      	beq.n	2c1ac <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c17e:	2314      	movs	r3, #20
   2c180:	18fb      	adds	r3, r7, r3
   2c182:	693a      	ldr	r2, [r7, #16]
   2c184:	7b52      	ldrb	r2, [r2, #13]
   2c186:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c188:	2316      	movs	r3, #22
   2c18a:	18fb      	adds	r3, r7, r3
   2c18c:	2216      	movs	r2, #22
   2c18e:	18ba      	adds	r2, r7, r2
   2c190:	7812      	ldrb	r2, [r2, #0]
   2c192:	2140      	movs	r1, #64	; 0x40
   2c194:	438a      	bics	r2, r1
   2c196:	701a      	strb	r2, [r3, #0]
   2c198:	2315      	movs	r3, #21
   2c19a:	18fb      	adds	r3, r7, r3
   2c19c:	2216      	movs	r2, #22
   2c19e:	18ba      	adds	r2, r7, r2
   2c1a0:	7812      	ldrb	r2, [r2, #0]
   2c1a2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c1a4:	687b      	ldr	r3, [r7, #4]
   2c1a6:	88da      	ldrh	r2, [r3, #6]
   2c1a8:	687b      	ldr	r3, [r7, #4]
   2c1aa:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c1ac:	2316      	movs	r3, #22
   2c1ae:	18fa      	adds	r2, r7, r3
   2c1b0:	2315      	movs	r3, #21
   2c1b2:	18fb      	adds	r3, r7, r3
   2c1b4:	7812      	ldrb	r2, [r2, #0]
   2c1b6:	781b      	ldrb	r3, [r3, #0]
   2c1b8:	429a      	cmp	r2, r3
   2c1ba:	d116      	bne.n	2c1ea <dir_find+0x14e>
   2c1bc:	693b      	ldr	r3, [r7, #16]
   2c1be:	330d      	adds	r3, #13
   2c1c0:	781b      	ldrb	r3, [r3, #0]
   2c1c2:	2214      	movs	r2, #20
   2c1c4:	18ba      	adds	r2, r7, r2
   2c1c6:	7812      	ldrb	r2, [r2, #0]
   2c1c8:	429a      	cmp	r2, r3
   2c1ca:	d10e      	bne.n	2c1ea <dir_find+0x14e>
   2c1cc:	687b      	ldr	r3, [r7, #4]
   2c1ce:	69db      	ldr	r3, [r3, #28]
   2c1d0:	693a      	ldr	r2, [r7, #16]
   2c1d2:	0011      	movs	r1, r2
   2c1d4:	0018      	movs	r0, r3
   2c1d6:	4b2c      	ldr	r3, [pc, #176]	; (2c288 <dir_find+0x1ec>)
   2c1d8:	4798      	blx	r3
   2c1da:	1e03      	subs	r3, r0, #0
   2c1dc:	d005      	beq.n	2c1ea <dir_find+0x14e>
   2c1de:	2315      	movs	r3, #21
   2c1e0:	18fb      	adds	r3, r7, r3
   2c1e2:	781b      	ldrb	r3, [r3, #0]
   2c1e4:	3b01      	subs	r3, #1
   2c1e6:	b2da      	uxtb	r2, r3
   2c1e8:	e000      	b.n	2c1ec <dir_find+0x150>
   2c1ea:	22ff      	movs	r2, #255	; 0xff
   2c1ec:	2315      	movs	r3, #21
   2c1ee:	18fb      	adds	r3, r7, r3
   2c1f0:	701a      	strb	r2, [r3, #0]
   2c1f2:	e028      	b.n	2c246 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c1f4:	2315      	movs	r3, #21
   2c1f6:	18fb      	adds	r3, r7, r3
   2c1f8:	781b      	ldrb	r3, [r3, #0]
   2c1fa:	2b00      	cmp	r3, #0
   2c1fc:	d10a      	bne.n	2c214 <dir_find+0x178>
   2c1fe:	693b      	ldr	r3, [r7, #16]
   2c200:	0018      	movs	r0, r3
   2c202:	4b22      	ldr	r3, [pc, #136]	; (2c28c <dir_find+0x1f0>)
   2c204:	4798      	blx	r3
   2c206:	0003      	movs	r3, r0
   2c208:	001a      	movs	r2, r3
   2c20a:	2314      	movs	r3, #20
   2c20c:	18fb      	adds	r3, r7, r3
   2c20e:	781b      	ldrb	r3, [r3, #0]
   2c210:	4293      	cmp	r3, r2
   2c212:	d02a      	beq.n	2c26a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c214:	2315      	movs	r3, #21
   2c216:	18fb      	adds	r3, r7, r3
   2c218:	22ff      	movs	r2, #255	; 0xff
   2c21a:	701a      	strb	r2, [r3, #0]
   2c21c:	687b      	ldr	r3, [r7, #4]
   2c21e:	2201      	movs	r2, #1
   2c220:	4252      	negs	r2, r2
   2c222:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c224:	687b      	ldr	r3, [r7, #4]
   2c226:	699b      	ldr	r3, [r3, #24]
   2c228:	330b      	adds	r3, #11
   2c22a:	781b      	ldrb	r3, [r3, #0]
   2c22c:	001a      	movs	r2, r3
   2c22e:	2301      	movs	r3, #1
   2c230:	4013      	ands	r3, r2
   2c232:	d108      	bne.n	2c246 <dir_find+0x1aa>
   2c234:	687b      	ldr	r3, [r7, #4]
   2c236:	6999      	ldr	r1, [r3, #24]
   2c238:	693b      	ldr	r3, [r7, #16]
   2c23a:	220b      	movs	r2, #11
   2c23c:	0018      	movs	r0, r3
   2c23e:	4b14      	ldr	r3, [pc, #80]	; (2c290 <dir_find+0x1f4>)
   2c240:	4798      	blx	r3
   2c242:	1e03      	subs	r3, r0, #0
   2c244:	d013      	beq.n	2c26e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c246:	2317      	movs	r3, #23
   2c248:	18fc      	adds	r4, r7, r3
   2c24a:	687b      	ldr	r3, [r7, #4]
   2c24c:	2100      	movs	r1, #0
   2c24e:	0018      	movs	r0, r3
   2c250:	4b10      	ldr	r3, [pc, #64]	; (2c294 <dir_find+0x1f8>)
   2c252:	4798      	blx	r3
   2c254:	0003      	movs	r3, r0
   2c256:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c258:	2317      	movs	r3, #23
   2c25a:	18fb      	adds	r3, r7, r3
   2c25c:	781b      	ldrb	r3, [r3, #0]
   2c25e:	2b00      	cmp	r3, #0
   2c260:	d100      	bne.n	2c264 <dir_find+0x1c8>
   2c262:	e73b      	b.n	2c0dc <dir_find+0x40>
   2c264:	e004      	b.n	2c270 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c266:	46c0      	nop			; (mov r8, r8)
   2c268:	e002      	b.n	2c270 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c26a:	46c0      	nop			; (mov r8, r8)
   2c26c:	e000      	b.n	2c270 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c26e:	46c0      	nop			; (mov r8, r8)

	return res;
   2c270:	2317      	movs	r3, #23
   2c272:	18fb      	adds	r3, r7, r3
   2c274:	781b      	ldrb	r3, [r3, #0]
}
   2c276:	0018      	movs	r0, r3
   2c278:	46bd      	mov	sp, r7
   2c27a:	b007      	add	sp, #28
   2c27c:	bd90      	pop	{r4, r7, pc}
   2c27e:	46c0      	nop			; (mov r8, r8)
   2c280:	0002ba19 	.word	0x0002ba19
   2c284:	0002b1d5 	.word	0x0002b1d5
   2c288:	0002bd39 	.word	0x0002bd39
   2c28c:	0002c04d 	.word	0x0002c04d
   2c290:	0002b159 	.word	0x0002b159
   2c294:	0002bb49 	.word	0x0002bb49

0002c298 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c298:	b590      	push	{r4, r7, lr}
   2c29a:	b08d      	sub	sp, #52	; 0x34
   2c29c:	af00      	add	r7, sp, #0
   2c29e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c2a0:	687b      	ldr	r3, [r7, #4]
   2c2a2:	699b      	ldr	r3, [r3, #24]
   2c2a4:	627b      	str	r3, [r7, #36]	; 0x24
   2c2a6:	687b      	ldr	r3, [r7, #4]
   2c2a8:	69db      	ldr	r3, [r3, #28]
   2c2aa:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c2ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c2ae:	230c      	movs	r3, #12
   2c2b0:	18fb      	adds	r3, r7, r3
   2c2b2:	220c      	movs	r2, #12
   2c2b4:	0018      	movs	r0, r3
   2c2b6:	4bc8      	ldr	r3, [pc, #800]	; (2c5d8 <dir_register+0x340>)
   2c2b8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c2ba:	230c      	movs	r3, #12
   2c2bc:	18fb      	adds	r3, r7, r3
   2c2be:	7adb      	ldrb	r3, [r3, #11]
   2c2c0:	001a      	movs	r2, r3
   2c2c2:	2301      	movs	r3, #1
   2c2c4:	4013      	ands	r3, r2
   2c2c6:	d048      	beq.n	2c35a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c2ca:	330b      	adds	r3, #11
   2c2cc:	2200      	movs	r2, #0
   2c2ce:	701a      	strb	r2, [r3, #0]
   2c2d0:	687b      	ldr	r3, [r7, #4]
   2c2d2:	2200      	movs	r2, #0
   2c2d4:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c2d6:	232c      	movs	r3, #44	; 0x2c
   2c2d8:	18fb      	adds	r3, r7, r3
   2c2da:	2201      	movs	r2, #1
   2c2dc:	801a      	strh	r2, [r3, #0]
   2c2de:	e01c      	b.n	2c31a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c2e0:	232c      	movs	r3, #44	; 0x2c
   2c2e2:	18fb      	adds	r3, r7, r3
   2c2e4:	881b      	ldrh	r3, [r3, #0]
   2c2e6:	6a3a      	ldr	r2, [r7, #32]
   2c2e8:	210c      	movs	r1, #12
   2c2ea:	1879      	adds	r1, r7, r1
   2c2ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c2ee:	4cbb      	ldr	r4, [pc, #748]	; (2c5dc <dir_register+0x344>)
   2c2f0:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c2f2:	232f      	movs	r3, #47	; 0x2f
   2c2f4:	18fc      	adds	r4, r7, r3
   2c2f6:	687b      	ldr	r3, [r7, #4]
   2c2f8:	0018      	movs	r0, r3
   2c2fa:	4bb9      	ldr	r3, [pc, #740]	; (2c5e0 <dir_register+0x348>)
   2c2fc:	4798      	blx	r3
   2c2fe:	0003      	movs	r3, r0
   2c300:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c302:	232f      	movs	r3, #47	; 0x2f
   2c304:	18fb      	adds	r3, r7, r3
   2c306:	781b      	ldrb	r3, [r3, #0]
   2c308:	2b00      	cmp	r3, #0
   2c30a:	d10c      	bne.n	2c326 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c30c:	232c      	movs	r3, #44	; 0x2c
   2c30e:	18fb      	adds	r3, r7, r3
   2c310:	881a      	ldrh	r2, [r3, #0]
   2c312:	232c      	movs	r3, #44	; 0x2c
   2c314:	18fb      	adds	r3, r7, r3
   2c316:	3201      	adds	r2, #1
   2c318:	801a      	strh	r2, [r3, #0]
   2c31a:	232c      	movs	r3, #44	; 0x2c
   2c31c:	18fb      	adds	r3, r7, r3
   2c31e:	881b      	ldrh	r3, [r3, #0]
   2c320:	2b63      	cmp	r3, #99	; 0x63
   2c322:	d9dd      	bls.n	2c2e0 <dir_register+0x48>
   2c324:	e000      	b.n	2c328 <dir_register+0x90>
			if (res != FR_OK) break;
   2c326:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c328:	232c      	movs	r3, #44	; 0x2c
   2c32a:	18fb      	adds	r3, r7, r3
   2c32c:	881b      	ldrh	r3, [r3, #0]
   2c32e:	2b64      	cmp	r3, #100	; 0x64
   2c330:	d101      	bne.n	2c336 <dir_register+0x9e>
   2c332:	2307      	movs	r3, #7
   2c334:	e14c      	b.n	2c5d0 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c336:	232f      	movs	r3, #47	; 0x2f
   2c338:	18fb      	adds	r3, r7, r3
   2c33a:	781b      	ldrb	r3, [r3, #0]
   2c33c:	2b04      	cmp	r3, #4
   2c33e:	d003      	beq.n	2c348 <dir_register+0xb0>
   2c340:	232f      	movs	r3, #47	; 0x2f
   2c342:	18fb      	adds	r3, r7, r3
   2c344:	781b      	ldrb	r3, [r3, #0]
   2c346:	e143      	b.n	2c5d0 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c34a:	330b      	adds	r3, #11
   2c34c:	220c      	movs	r2, #12
   2c34e:	18ba      	adds	r2, r7, r2
   2c350:	7ad2      	ldrb	r2, [r2, #11]
   2c352:	701a      	strb	r2, [r3, #0]
   2c354:	687b      	ldr	r3, [r7, #4]
   2c356:	6a3a      	ldr	r2, [r7, #32]
   2c358:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c35a:	230c      	movs	r3, #12
   2c35c:	18fb      	adds	r3, r7, r3
   2c35e:	7adb      	ldrb	r3, [r3, #11]
   2c360:	001a      	movs	r2, r3
   2c362:	2302      	movs	r3, #2
   2c364:	4013      	ands	r3, r2
   2c366:	d023      	beq.n	2c3b0 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c368:	232a      	movs	r3, #42	; 0x2a
   2c36a:	18fb      	adds	r3, r7, r3
   2c36c:	2200      	movs	r2, #0
   2c36e:	801a      	strh	r2, [r3, #0]
   2c370:	e006      	b.n	2c380 <dir_register+0xe8>
   2c372:	232a      	movs	r3, #42	; 0x2a
   2c374:	18fb      	adds	r3, r7, r3
   2c376:	881a      	ldrh	r2, [r3, #0]
   2c378:	232a      	movs	r3, #42	; 0x2a
   2c37a:	18fb      	adds	r3, r7, r3
   2c37c:	3201      	adds	r2, #1
   2c37e:	801a      	strh	r2, [r3, #0]
   2c380:	232a      	movs	r3, #42	; 0x2a
   2c382:	18fb      	adds	r3, r7, r3
   2c384:	881b      	ldrh	r3, [r3, #0]
   2c386:	005b      	lsls	r3, r3, #1
   2c388:	6a3a      	ldr	r2, [r7, #32]
   2c38a:	18d3      	adds	r3, r2, r3
   2c38c:	881b      	ldrh	r3, [r3, #0]
   2c38e:	2b00      	cmp	r3, #0
   2c390:	d1ef      	bne.n	2c372 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c392:	232a      	movs	r3, #42	; 0x2a
   2c394:	18fb      	adds	r3, r7, r3
   2c396:	881b      	ldrh	r3, [r3, #0]
   2c398:	3319      	adds	r3, #25
   2c39a:	001a      	movs	r2, r3
   2c39c:	4b91      	ldr	r3, [pc, #580]	; (2c5e4 <dir_register+0x34c>)
   2c39e:	210d      	movs	r1, #13
   2c3a0:	0010      	movs	r0, r2
   2c3a2:	4798      	blx	r3
   2c3a4:	0003      	movs	r3, r0
   2c3a6:	001a      	movs	r2, r3
   2c3a8:	232a      	movs	r3, #42	; 0x2a
   2c3aa:	18fb      	adds	r3, r7, r3
   2c3ac:	801a      	strh	r2, [r3, #0]
   2c3ae:	e003      	b.n	2c3b8 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c3b0:	232a      	movs	r3, #42	; 0x2a
   2c3b2:	18fb      	adds	r3, r7, r3
   2c3b4:	2201      	movs	r2, #1
   2c3b6:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c3b8:	232f      	movs	r3, #47	; 0x2f
   2c3ba:	18fc      	adds	r4, r7, r3
   2c3bc:	687b      	ldr	r3, [r7, #4]
   2c3be:	2100      	movs	r1, #0
   2c3c0:	0018      	movs	r0, r3
   2c3c2:	4b89      	ldr	r3, [pc, #548]	; (2c5e8 <dir_register+0x350>)
   2c3c4:	4798      	blx	r3
   2c3c6:	0003      	movs	r3, r0
   2c3c8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c3ca:	232f      	movs	r3, #47	; 0x2f
   2c3cc:	18fb      	adds	r3, r7, r3
   2c3ce:	781b      	ldrb	r3, [r3, #0]
   2c3d0:	2b00      	cmp	r3, #0
   2c3d2:	d003      	beq.n	2c3dc <dir_register+0x144>
   2c3d4:	232f      	movs	r3, #47	; 0x2f
   2c3d6:	18fb      	adds	r3, r7, r3
   2c3d8:	781b      	ldrb	r3, [r3, #0]
   2c3da:	e0f9      	b.n	2c5d0 <dir_register+0x338>
	n = is = 0;
   2c3dc:	2328      	movs	r3, #40	; 0x28
   2c3de:	18fb      	adds	r3, r7, r3
   2c3e0:	2200      	movs	r2, #0
   2c3e2:	801a      	strh	r2, [r3, #0]
   2c3e4:	232c      	movs	r3, #44	; 0x2c
   2c3e6:	18fb      	adds	r3, r7, r3
   2c3e8:	2228      	movs	r2, #40	; 0x28
   2c3ea:	18ba      	adds	r2, r7, r2
   2c3ec:	8812      	ldrh	r2, [r2, #0]
   2c3ee:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c3f0:	687b      	ldr	r3, [r7, #4]
   2c3f2:	681a      	ldr	r2, [r3, #0]
   2c3f4:	687b      	ldr	r3, [r7, #4]
   2c3f6:	691b      	ldr	r3, [r3, #16]
   2c3f8:	212f      	movs	r1, #47	; 0x2f
   2c3fa:	187c      	adds	r4, r7, r1
   2c3fc:	0019      	movs	r1, r3
   2c3fe:	0010      	movs	r0, r2
   2c400:	4b7a      	ldr	r3, [pc, #488]	; (2c5ec <dir_register+0x354>)
   2c402:	4798      	blx	r3
   2c404:	0003      	movs	r3, r0
   2c406:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c408:	232f      	movs	r3, #47	; 0x2f
   2c40a:	18fb      	adds	r3, r7, r3
   2c40c:	781b      	ldrb	r3, [r3, #0]
   2c40e:	2b00      	cmp	r3, #0
   2c410:	d13c      	bne.n	2c48c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c412:	687b      	ldr	r3, [r7, #4]
   2c414:	695a      	ldr	r2, [r3, #20]
   2c416:	231f      	movs	r3, #31
   2c418:	18fb      	adds	r3, r7, r3
   2c41a:	7812      	ldrb	r2, [r2, #0]
   2c41c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c41e:	231f      	movs	r3, #31
   2c420:	18fb      	adds	r3, r7, r3
   2c422:	781b      	ldrb	r3, [r3, #0]
   2c424:	2be5      	cmp	r3, #229	; 0xe5
   2c426:	d004      	beq.n	2c432 <dir_register+0x19a>
   2c428:	231f      	movs	r3, #31
   2c42a:	18fb      	adds	r3, r7, r3
   2c42c:	781b      	ldrb	r3, [r3, #0]
   2c42e:	2b00      	cmp	r3, #0
   2c430:	d119      	bne.n	2c466 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c432:	232c      	movs	r3, #44	; 0x2c
   2c434:	18fb      	adds	r3, r7, r3
   2c436:	881b      	ldrh	r3, [r3, #0]
   2c438:	2b00      	cmp	r3, #0
   2c43a:	d104      	bne.n	2c446 <dir_register+0x1ae>
   2c43c:	2328      	movs	r3, #40	; 0x28
   2c43e:	18fb      	adds	r3, r7, r3
   2c440:	687a      	ldr	r2, [r7, #4]
   2c442:	88d2      	ldrh	r2, [r2, #6]
   2c444:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c446:	232c      	movs	r3, #44	; 0x2c
   2c448:	18fb      	adds	r3, r7, r3
   2c44a:	222c      	movs	r2, #44	; 0x2c
   2c44c:	18ba      	adds	r2, r7, r2
   2c44e:	8812      	ldrh	r2, [r2, #0]
   2c450:	3201      	adds	r2, #1
   2c452:	801a      	strh	r2, [r3, #0]
   2c454:	232c      	movs	r3, #44	; 0x2c
   2c456:	18fa      	adds	r2, r7, r3
   2c458:	232a      	movs	r3, #42	; 0x2a
   2c45a:	18fb      	adds	r3, r7, r3
   2c45c:	8812      	ldrh	r2, [r2, #0]
   2c45e:	881b      	ldrh	r3, [r3, #0]
   2c460:	429a      	cmp	r2, r3
   2c462:	d104      	bne.n	2c46e <dir_register+0x1d6>
   2c464:	e013      	b.n	2c48e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c466:	232c      	movs	r3, #44	; 0x2c
   2c468:	18fb      	adds	r3, r7, r3
   2c46a:	2200      	movs	r2, #0
   2c46c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c46e:	232f      	movs	r3, #47	; 0x2f
   2c470:	18fc      	adds	r4, r7, r3
   2c472:	687b      	ldr	r3, [r7, #4]
   2c474:	2101      	movs	r1, #1
   2c476:	0018      	movs	r0, r3
   2c478:	4b5d      	ldr	r3, [pc, #372]	; (2c5f0 <dir_register+0x358>)
   2c47a:	4798      	blx	r3
   2c47c:	0003      	movs	r3, r0
   2c47e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c480:	232f      	movs	r3, #47	; 0x2f
   2c482:	18fb      	adds	r3, r7, r3
   2c484:	781b      	ldrb	r3, [r3, #0]
   2c486:	2b00      	cmp	r3, #0
   2c488:	d0b2      	beq.n	2c3f0 <dir_register+0x158>
   2c48a:	e000      	b.n	2c48e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c48c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c48e:	232f      	movs	r3, #47	; 0x2f
   2c490:	18fb      	adds	r3, r7, r3
   2c492:	781b      	ldrb	r3, [r3, #0]
   2c494:	2b00      	cmp	r3, #0
   2c496:	d163      	bne.n	2c560 <dir_register+0x2c8>
   2c498:	232a      	movs	r3, #42	; 0x2a
   2c49a:	18fb      	adds	r3, r7, r3
   2c49c:	881b      	ldrh	r3, [r3, #0]
   2c49e:	2b01      	cmp	r3, #1
   2c4a0:	d95e      	bls.n	2c560 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c4a2:	232f      	movs	r3, #47	; 0x2f
   2c4a4:	18fc      	adds	r4, r7, r3
   2c4a6:	2328      	movs	r3, #40	; 0x28
   2c4a8:	18fb      	adds	r3, r7, r3
   2c4aa:	881a      	ldrh	r2, [r3, #0]
   2c4ac:	687b      	ldr	r3, [r7, #4]
   2c4ae:	0011      	movs	r1, r2
   2c4b0:	0018      	movs	r0, r3
   2c4b2:	4b4d      	ldr	r3, [pc, #308]	; (2c5e8 <dir_register+0x350>)
   2c4b4:	4798      	blx	r3
   2c4b6:	0003      	movs	r3, r0
   2c4b8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c4ba:	232f      	movs	r3, #47	; 0x2f
   2c4bc:	18fb      	adds	r3, r7, r3
   2c4be:	781b      	ldrb	r3, [r3, #0]
   2c4c0:	2b00      	cmp	r3, #0
   2c4c2:	d14d      	bne.n	2c560 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c4c4:	687b      	ldr	r3, [r7, #4]
   2c4c6:	699b      	ldr	r3, [r3, #24]
   2c4c8:	221e      	movs	r2, #30
   2c4ca:	18bc      	adds	r4, r7, r2
   2c4cc:	0018      	movs	r0, r3
   2c4ce:	4b49      	ldr	r3, [pc, #292]	; (2c5f4 <dir_register+0x35c>)
   2c4d0:	4798      	blx	r3
   2c4d2:	0003      	movs	r3, r0
   2c4d4:	7023      	strb	r3, [r4, #0]
			ne--;
   2c4d6:	232a      	movs	r3, #42	; 0x2a
   2c4d8:	18fb      	adds	r3, r7, r3
   2c4da:	881a      	ldrh	r2, [r3, #0]
   2c4dc:	232a      	movs	r3, #42	; 0x2a
   2c4de:	18fb      	adds	r3, r7, r3
   2c4e0:	3a01      	subs	r2, #1
   2c4e2:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2c4e4:	687b      	ldr	r3, [r7, #4]
   2c4e6:	681a      	ldr	r2, [r3, #0]
   2c4e8:	687b      	ldr	r3, [r7, #4]
   2c4ea:	691b      	ldr	r3, [r3, #16]
   2c4ec:	212f      	movs	r1, #47	; 0x2f
   2c4ee:	187c      	adds	r4, r7, r1
   2c4f0:	0019      	movs	r1, r3
   2c4f2:	0010      	movs	r0, r2
   2c4f4:	4b3d      	ldr	r3, [pc, #244]	; (2c5ec <dir_register+0x354>)
   2c4f6:	4798      	blx	r3
   2c4f8:	0003      	movs	r3, r0
   2c4fa:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2c4fc:	232f      	movs	r3, #47	; 0x2f
   2c4fe:	18fb      	adds	r3, r7, r3
   2c500:	781b      	ldrb	r3, [r3, #0]
   2c502:	2b00      	cmp	r3, #0
   2c504:	d12b      	bne.n	2c55e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2c506:	687b      	ldr	r3, [r7, #4]
   2c508:	69d8      	ldr	r0, [r3, #28]
   2c50a:	687b      	ldr	r3, [r7, #4]
   2c50c:	6959      	ldr	r1, [r3, #20]
   2c50e:	232a      	movs	r3, #42	; 0x2a
   2c510:	18fb      	adds	r3, r7, r3
   2c512:	881b      	ldrh	r3, [r3, #0]
   2c514:	b2da      	uxtb	r2, r3
   2c516:	231e      	movs	r3, #30
   2c518:	18fb      	adds	r3, r7, r3
   2c51a:	781b      	ldrb	r3, [r3, #0]
   2c51c:	4c36      	ldr	r4, [pc, #216]	; (2c5f8 <dir_register+0x360>)
   2c51e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2c520:	687b      	ldr	r3, [r7, #4]
   2c522:	681b      	ldr	r3, [r3, #0]
   2c524:	2201      	movs	r2, #1
   2c526:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2c528:	232f      	movs	r3, #47	; 0x2f
   2c52a:	18fc      	adds	r4, r7, r3
   2c52c:	687b      	ldr	r3, [r7, #4]
   2c52e:	2100      	movs	r1, #0
   2c530:	0018      	movs	r0, r3
   2c532:	4b2f      	ldr	r3, [pc, #188]	; (2c5f0 <dir_register+0x358>)
   2c534:	4798      	blx	r3
   2c536:	0003      	movs	r3, r0
   2c538:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2c53a:	232f      	movs	r3, #47	; 0x2f
   2c53c:	18fb      	adds	r3, r7, r3
   2c53e:	781b      	ldrb	r3, [r3, #0]
   2c540:	2b00      	cmp	r3, #0
   2c542:	d10d      	bne.n	2c560 <dir_register+0x2c8>
   2c544:	232a      	movs	r3, #42	; 0x2a
   2c546:	18fb      	adds	r3, r7, r3
   2c548:	222a      	movs	r2, #42	; 0x2a
   2c54a:	18ba      	adds	r2, r7, r2
   2c54c:	8812      	ldrh	r2, [r2, #0]
   2c54e:	3a01      	subs	r2, #1
   2c550:	801a      	strh	r2, [r3, #0]
   2c552:	232a      	movs	r3, #42	; 0x2a
   2c554:	18fb      	adds	r3, r7, r3
   2c556:	881b      	ldrh	r3, [r3, #0]
   2c558:	2b00      	cmp	r3, #0
   2c55a:	d1c3      	bne.n	2c4e4 <dir_register+0x24c>
   2c55c:	e000      	b.n	2c560 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2c55e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2c560:	232f      	movs	r3, #47	; 0x2f
   2c562:	18fb      	adds	r3, r7, r3
   2c564:	781b      	ldrb	r3, [r3, #0]
   2c566:	2b00      	cmp	r3, #0
   2c568:	d12f      	bne.n	2c5ca <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2c56a:	687b      	ldr	r3, [r7, #4]
   2c56c:	681a      	ldr	r2, [r3, #0]
   2c56e:	687b      	ldr	r3, [r7, #4]
   2c570:	691b      	ldr	r3, [r3, #16]
   2c572:	212f      	movs	r1, #47	; 0x2f
   2c574:	187c      	adds	r4, r7, r1
   2c576:	0019      	movs	r1, r3
   2c578:	0010      	movs	r0, r2
   2c57a:	4b1c      	ldr	r3, [pc, #112]	; (2c5ec <dir_register+0x354>)
   2c57c:	4798      	blx	r3
   2c57e:	0003      	movs	r3, r0
   2c580:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c582:	232f      	movs	r3, #47	; 0x2f
   2c584:	18fb      	adds	r3, r7, r3
   2c586:	781b      	ldrb	r3, [r3, #0]
   2c588:	2b00      	cmp	r3, #0
   2c58a:	d11e      	bne.n	2c5ca <dir_register+0x332>
			dir = dj->dir;
   2c58c:	687b      	ldr	r3, [r7, #4]
   2c58e:	695b      	ldr	r3, [r3, #20]
   2c590:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2c592:	69bb      	ldr	r3, [r7, #24]
   2c594:	2220      	movs	r2, #32
   2c596:	2100      	movs	r1, #0
   2c598:	0018      	movs	r0, r3
   2c59a:	4b18      	ldr	r3, [pc, #96]	; (2c5fc <dir_register+0x364>)
   2c59c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2c59e:	687b      	ldr	r3, [r7, #4]
   2c5a0:	6999      	ldr	r1, [r3, #24]
   2c5a2:	69bb      	ldr	r3, [r7, #24]
   2c5a4:	220b      	movs	r2, #11
   2c5a6:	0018      	movs	r0, r3
   2c5a8:	4b0b      	ldr	r3, [pc, #44]	; (2c5d8 <dir_register+0x340>)
   2c5aa:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2c5ac:	69bb      	ldr	r3, [r7, #24]
   2c5ae:	330c      	adds	r3, #12
   2c5b0:	001a      	movs	r2, r3
   2c5b2:	687b      	ldr	r3, [r7, #4]
   2c5b4:	699b      	ldr	r3, [r3, #24]
   2c5b6:	330b      	adds	r3, #11
   2c5b8:	781b      	ldrb	r3, [r3, #0]
   2c5ba:	2118      	movs	r1, #24
   2c5bc:	400b      	ands	r3, r1
   2c5be:	b2db      	uxtb	r3, r3
   2c5c0:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2c5c2:	687b      	ldr	r3, [r7, #4]
   2c5c4:	681b      	ldr	r3, [r3, #0]
   2c5c6:	2201      	movs	r2, #1
   2c5c8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2c5ca:	232f      	movs	r3, #47	; 0x2f
   2c5cc:	18fb      	adds	r3, r7, r3
   2c5ce:	781b      	ldrb	r3, [r3, #0]
}
   2c5d0:	0018      	movs	r0, r3
   2c5d2:	46bd      	mov	sp, r7
   2c5d4:	b00d      	add	sp, #52	; 0x34
   2c5d6:	bd90      	pop	{r4, r7, pc}
   2c5d8:	0002b0f1 	.word	0x0002b0f1
   2c5dc:	0002bf4d 	.word	0x0002bf4d
   2c5e0:	0002c09d 	.word	0x0002c09d
   2c5e4:	0003249d 	.word	0x0003249d
   2c5e8:	0002ba19 	.word	0x0002ba19
   2c5ec:	0002b1d5 	.word	0x0002b1d5
   2c5f0:	0002bb49 	.word	0x0002bb49
   2c5f4:	0002c04d 	.word	0x0002c04d
   2c5f8:	0002be3d 	.word	0x0002be3d
   2c5fc:	0002b129 	.word	0x0002b129

0002c600 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2c600:	b590      	push	{r4, r7, lr}
   2c602:	b08b      	sub	sp, #44	; 0x2c
   2c604:	af00      	add	r7, sp, #0
   2c606:	6078      	str	r0, [r7, #4]
   2c608:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2c60a:	683b      	ldr	r3, [r7, #0]
   2c60c:	681b      	ldr	r3, [r3, #0]
   2c60e:	613b      	str	r3, [r7, #16]
   2c610:	e002      	b.n	2c618 <create_name+0x18>
   2c612:	693b      	ldr	r3, [r7, #16]
   2c614:	3301      	adds	r3, #1
   2c616:	613b      	str	r3, [r7, #16]
   2c618:	693b      	ldr	r3, [r7, #16]
   2c61a:	781b      	ldrb	r3, [r3, #0]
   2c61c:	2b2f      	cmp	r3, #47	; 0x2f
   2c61e:	d0f8      	beq.n	2c612 <create_name+0x12>
   2c620:	693b      	ldr	r3, [r7, #16]
   2c622:	781b      	ldrb	r3, [r3, #0]
   2c624:	2b5c      	cmp	r3, #92	; 0x5c
   2c626:	d0f4      	beq.n	2c612 <create_name+0x12>
	lfn = dj->lfn;
   2c628:	687b      	ldr	r3, [r7, #4]
   2c62a:	69db      	ldr	r3, [r3, #28]
   2c62c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c62e:	2300      	movs	r3, #0
   2c630:	617b      	str	r3, [r7, #20]
   2c632:	697b      	ldr	r3, [r7, #20]
   2c634:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c636:	69bb      	ldr	r3, [r7, #24]
   2c638:	1c5a      	adds	r2, r3, #1
   2c63a:	61ba      	str	r2, [r7, #24]
   2c63c:	693a      	ldr	r2, [r7, #16]
   2c63e:	18d3      	adds	r3, r2, r3
   2c640:	781a      	ldrb	r2, [r3, #0]
   2c642:	2324      	movs	r3, #36	; 0x24
   2c644:	18fb      	adds	r3, r7, r3
   2c646:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c648:	2324      	movs	r3, #36	; 0x24
   2c64a:	18fb      	adds	r3, r7, r3
   2c64c:	881b      	ldrh	r3, [r3, #0]
   2c64e:	2b1f      	cmp	r3, #31
   2c650:	d944      	bls.n	2c6dc <create_name+0xdc>
   2c652:	2324      	movs	r3, #36	; 0x24
   2c654:	18fb      	adds	r3, r7, r3
   2c656:	881b      	ldrh	r3, [r3, #0]
   2c658:	2b2f      	cmp	r3, #47	; 0x2f
   2c65a:	d03f      	beq.n	2c6dc <create_name+0xdc>
   2c65c:	2324      	movs	r3, #36	; 0x24
   2c65e:	18fb      	adds	r3, r7, r3
   2c660:	881b      	ldrh	r3, [r3, #0]
   2c662:	2b5c      	cmp	r3, #92	; 0x5c
   2c664:	d03a      	beq.n	2c6dc <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c666:	697b      	ldr	r3, [r7, #20]
   2c668:	2bfe      	cmp	r3, #254	; 0xfe
   2c66a:	d901      	bls.n	2c670 <create_name+0x70>
			return FR_INVALID_NAME;
   2c66c:	2306      	movs	r3, #6
   2c66e:	e1e7      	b.n	2ca40 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c670:	2324      	movs	r3, #36	; 0x24
   2c672:	18fb      	adds	r3, r7, r3
   2c674:	2224      	movs	r2, #36	; 0x24
   2c676:	18ba      	adds	r2, r7, r2
   2c678:	8812      	ldrh	r2, [r2, #0]
   2c67a:	21ff      	movs	r1, #255	; 0xff
   2c67c:	400a      	ands	r2, r1
   2c67e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c680:	2324      	movs	r3, #36	; 0x24
   2c682:	18fc      	adds	r4, r7, r3
   2c684:	2324      	movs	r3, #36	; 0x24
   2c686:	18fb      	adds	r3, r7, r3
   2c688:	881b      	ldrh	r3, [r3, #0]
   2c68a:	2101      	movs	r1, #1
   2c68c:	0018      	movs	r0, r3
   2c68e:	4bba      	ldr	r3, [pc, #744]	; (2c978 <create_name+0x378>)
   2c690:	4798      	blx	r3
   2c692:	0003      	movs	r3, r0
   2c694:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c696:	2324      	movs	r3, #36	; 0x24
   2c698:	18fb      	adds	r3, r7, r3
   2c69a:	881b      	ldrh	r3, [r3, #0]
   2c69c:	2b00      	cmp	r3, #0
   2c69e:	d101      	bne.n	2c6a4 <create_name+0xa4>
   2c6a0:	2306      	movs	r3, #6
   2c6a2:	e1cd      	b.n	2ca40 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c6a4:	2324      	movs	r3, #36	; 0x24
   2c6a6:	18fb      	adds	r3, r7, r3
   2c6a8:	881b      	ldrh	r3, [r3, #0]
   2c6aa:	2b7f      	cmp	r3, #127	; 0x7f
   2c6ac:	d80b      	bhi.n	2c6c6 <create_name+0xc6>
   2c6ae:	2324      	movs	r3, #36	; 0x24
   2c6b0:	18fb      	adds	r3, r7, r3
   2c6b2:	881a      	ldrh	r2, [r3, #0]
   2c6b4:	4bb1      	ldr	r3, [pc, #708]	; (2c97c <create_name+0x37c>)
   2c6b6:	0011      	movs	r1, r2
   2c6b8:	0018      	movs	r0, r3
   2c6ba:	4bb1      	ldr	r3, [pc, #708]	; (2c980 <create_name+0x380>)
   2c6bc:	4798      	blx	r3
   2c6be:	1e03      	subs	r3, r0, #0
   2c6c0:	d001      	beq.n	2c6c6 <create_name+0xc6>
			return FR_INVALID_NAME;
   2c6c2:	2306      	movs	r3, #6
   2c6c4:	e1bc      	b.n	2ca40 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c6c6:	697b      	ldr	r3, [r7, #20]
   2c6c8:	1c5a      	adds	r2, r3, #1
   2c6ca:	617a      	str	r2, [r7, #20]
   2c6cc:	005b      	lsls	r3, r3, #1
   2c6ce:	68fa      	ldr	r2, [r7, #12]
   2c6d0:	18d3      	adds	r3, r2, r3
   2c6d2:	2224      	movs	r2, #36	; 0x24
   2c6d4:	18ba      	adds	r2, r7, r2
   2c6d6:	8812      	ldrh	r2, [r2, #0]
   2c6d8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2c6da:	e7ac      	b.n	2c636 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2c6dc:	693a      	ldr	r2, [r7, #16]
   2c6de:	69bb      	ldr	r3, [r7, #24]
   2c6e0:	18d2      	adds	r2, r2, r3
   2c6e2:	683b      	ldr	r3, [r7, #0]
   2c6e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2c6e6:	2324      	movs	r3, #36	; 0x24
   2c6e8:	18fb      	adds	r3, r7, r3
   2c6ea:	881b      	ldrh	r3, [r3, #0]
   2c6ec:	2b1f      	cmp	r3, #31
   2c6ee:	d801      	bhi.n	2c6f4 <create_name+0xf4>
   2c6f0:	2204      	movs	r2, #4
   2c6f2:	e000      	b.n	2c6f6 <create_name+0xf6>
   2c6f4:	2200      	movs	r2, #0
   2c6f6:	2326      	movs	r3, #38	; 0x26
   2c6f8:	18fb      	adds	r3, r7, r3
   2c6fa:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2c6fc:	e017      	b.n	2c72e <create_name+0x12e>
		w = lfn[di-1];
   2c6fe:	697b      	ldr	r3, [r7, #20]
   2c700:	4aa0      	ldr	r2, [pc, #640]	; (2c984 <create_name+0x384>)
   2c702:	4694      	mov	ip, r2
   2c704:	4463      	add	r3, ip
   2c706:	005b      	lsls	r3, r3, #1
   2c708:	68fa      	ldr	r2, [r7, #12]
   2c70a:	18d2      	adds	r2, r2, r3
   2c70c:	2324      	movs	r3, #36	; 0x24
   2c70e:	18fb      	adds	r3, r7, r3
   2c710:	8812      	ldrh	r2, [r2, #0]
   2c712:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2c714:	2324      	movs	r3, #36	; 0x24
   2c716:	18fb      	adds	r3, r7, r3
   2c718:	881b      	ldrh	r3, [r3, #0]
   2c71a:	2b20      	cmp	r3, #32
   2c71c:	d004      	beq.n	2c728 <create_name+0x128>
   2c71e:	2324      	movs	r3, #36	; 0x24
   2c720:	18fb      	adds	r3, r7, r3
   2c722:	881b      	ldrh	r3, [r3, #0]
   2c724:	2b2e      	cmp	r3, #46	; 0x2e
   2c726:	d106      	bne.n	2c736 <create_name+0x136>
		di--;
   2c728:	697b      	ldr	r3, [r7, #20]
   2c72a:	3b01      	subs	r3, #1
   2c72c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2c72e:	697b      	ldr	r3, [r7, #20]
   2c730:	2b00      	cmp	r3, #0
   2c732:	d1e4      	bne.n	2c6fe <create_name+0xfe>
   2c734:	e000      	b.n	2c738 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2c736:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2c738:	697b      	ldr	r3, [r7, #20]
   2c73a:	2b00      	cmp	r3, #0
   2c73c:	d101      	bne.n	2c742 <create_name+0x142>
   2c73e:	2306      	movs	r3, #6
   2c740:	e17e      	b.n	2ca40 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2c742:	697b      	ldr	r3, [r7, #20]
   2c744:	005b      	lsls	r3, r3, #1
   2c746:	68fa      	ldr	r2, [r7, #12]
   2c748:	18d3      	adds	r3, r2, r3
   2c74a:	2200      	movs	r2, #0
   2c74c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2c74e:	687b      	ldr	r3, [r7, #4]
   2c750:	699b      	ldr	r3, [r3, #24]
   2c752:	220b      	movs	r2, #11
   2c754:	2120      	movs	r1, #32
   2c756:	0018      	movs	r0, r3
   2c758:	4b8b      	ldr	r3, [pc, #556]	; (2c988 <create_name+0x388>)
   2c75a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2c75c:	2300      	movs	r3, #0
   2c75e:	61bb      	str	r3, [r7, #24]
   2c760:	e002      	b.n	2c768 <create_name+0x168>
   2c762:	69bb      	ldr	r3, [r7, #24]
   2c764:	3301      	adds	r3, #1
   2c766:	61bb      	str	r3, [r7, #24]
   2c768:	69bb      	ldr	r3, [r7, #24]
   2c76a:	005b      	lsls	r3, r3, #1
   2c76c:	68fa      	ldr	r2, [r7, #12]
   2c76e:	18d3      	adds	r3, r2, r3
   2c770:	881b      	ldrh	r3, [r3, #0]
   2c772:	2b20      	cmp	r3, #32
   2c774:	d0f5      	beq.n	2c762 <create_name+0x162>
   2c776:	69bb      	ldr	r3, [r7, #24]
   2c778:	005b      	lsls	r3, r3, #1
   2c77a:	68fa      	ldr	r2, [r7, #12]
   2c77c:	18d3      	adds	r3, r2, r3
   2c77e:	881b      	ldrh	r3, [r3, #0]
   2c780:	2b2e      	cmp	r3, #46	; 0x2e
   2c782:	d0ee      	beq.n	2c762 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2c784:	69bb      	ldr	r3, [r7, #24]
   2c786:	2b00      	cmp	r3, #0
   2c788:	d00b      	beq.n	2c7a2 <create_name+0x1a2>
   2c78a:	2326      	movs	r3, #38	; 0x26
   2c78c:	18fb      	adds	r3, r7, r3
   2c78e:	2226      	movs	r2, #38	; 0x26
   2c790:	18ba      	adds	r2, r7, r2
   2c792:	7812      	ldrb	r2, [r2, #0]
   2c794:	2103      	movs	r1, #3
   2c796:	430a      	orrs	r2, r1
   2c798:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2c79a:	e002      	b.n	2c7a2 <create_name+0x1a2>
   2c79c:	697b      	ldr	r3, [r7, #20]
   2c79e:	3b01      	subs	r3, #1
   2c7a0:	617b      	str	r3, [r7, #20]
   2c7a2:	697b      	ldr	r3, [r7, #20]
   2c7a4:	2b00      	cmp	r3, #0
   2c7a6:	d009      	beq.n	2c7bc <create_name+0x1bc>
   2c7a8:	697b      	ldr	r3, [r7, #20]
   2c7aa:	4a76      	ldr	r2, [pc, #472]	; (2c984 <create_name+0x384>)
   2c7ac:	4694      	mov	ip, r2
   2c7ae:	4463      	add	r3, ip
   2c7b0:	005b      	lsls	r3, r3, #1
   2c7b2:	68fa      	ldr	r2, [r7, #12]
   2c7b4:	18d3      	adds	r3, r2, r3
   2c7b6:	881b      	ldrh	r3, [r3, #0]
   2c7b8:	2b2e      	cmp	r3, #46	; 0x2e
   2c7ba:	d1ef      	bne.n	2c79c <create_name+0x19c>

	b = i = 0; ni = 8;
   2c7bc:	2300      	movs	r3, #0
   2c7be:	623b      	str	r3, [r7, #32]
   2c7c0:	2327      	movs	r3, #39	; 0x27
   2c7c2:	18fb      	adds	r3, r7, r3
   2c7c4:	2200      	movs	r2, #0
   2c7c6:	701a      	strb	r2, [r3, #0]
   2c7c8:	2308      	movs	r3, #8
   2c7ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2c7cc:	69bb      	ldr	r3, [r7, #24]
   2c7ce:	1c5a      	adds	r2, r3, #1
   2c7d0:	61ba      	str	r2, [r7, #24]
   2c7d2:	005b      	lsls	r3, r3, #1
   2c7d4:	68fa      	ldr	r2, [r7, #12]
   2c7d6:	18d2      	adds	r2, r2, r3
   2c7d8:	2324      	movs	r3, #36	; 0x24
   2c7da:	18fb      	adds	r3, r7, r3
   2c7dc:	8812      	ldrh	r2, [r2, #0]
   2c7de:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c7e0:	2324      	movs	r3, #36	; 0x24
   2c7e2:	18fb      	adds	r3, r7, r3
   2c7e4:	881b      	ldrh	r3, [r3, #0]
   2c7e6:	2b00      	cmp	r3, #0
   2c7e8:	d100      	bne.n	2c7ec <create_name+0x1ec>
   2c7ea:	e0c3      	b.n	2c974 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c7ec:	2324      	movs	r3, #36	; 0x24
   2c7ee:	18fb      	adds	r3, r7, r3
   2c7f0:	881b      	ldrh	r3, [r3, #0]
   2c7f2:	2b20      	cmp	r3, #32
   2c7f4:	d008      	beq.n	2c808 <create_name+0x208>
   2c7f6:	2324      	movs	r3, #36	; 0x24
   2c7f8:	18fb      	adds	r3, r7, r3
   2c7fa:	881b      	ldrh	r3, [r3, #0]
   2c7fc:	2b2e      	cmp	r3, #46	; 0x2e
   2c7fe:	d10c      	bne.n	2c81a <create_name+0x21a>
   2c800:	69ba      	ldr	r2, [r7, #24]
   2c802:	697b      	ldr	r3, [r7, #20]
   2c804:	429a      	cmp	r2, r3
   2c806:	d008      	beq.n	2c81a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c808:	2326      	movs	r3, #38	; 0x26
   2c80a:	18fb      	adds	r3, r7, r3
   2c80c:	2226      	movs	r2, #38	; 0x26
   2c80e:	18ba      	adds	r2, r7, r2
   2c810:	7812      	ldrb	r2, [r2, #0]
   2c812:	2103      	movs	r1, #3
   2c814:	430a      	orrs	r2, r1
   2c816:	701a      	strb	r2, [r3, #0]
   2c818:	e0ab      	b.n	2c972 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c81a:	6a3a      	ldr	r2, [r7, #32]
   2c81c:	69fb      	ldr	r3, [r7, #28]
   2c81e:	429a      	cmp	r2, r3
   2c820:	d203      	bcs.n	2c82a <create_name+0x22a>
   2c822:	69ba      	ldr	r2, [r7, #24]
   2c824:	697b      	ldr	r3, [r7, #20]
   2c826:	429a      	cmp	r2, r3
   2c828:	d12a      	bne.n	2c880 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c82a:	69fb      	ldr	r3, [r7, #28]
   2c82c:	2b0b      	cmp	r3, #11
   2c82e:	d108      	bne.n	2c842 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c830:	2326      	movs	r3, #38	; 0x26
   2c832:	18fb      	adds	r3, r7, r3
   2c834:	2226      	movs	r2, #38	; 0x26
   2c836:	18ba      	adds	r2, r7, r2
   2c838:	7812      	ldrb	r2, [r2, #0]
   2c83a:	2103      	movs	r1, #3
   2c83c:	430a      	orrs	r2, r1
   2c83e:	701a      	strb	r2, [r3, #0]
   2c840:	e0a9      	b.n	2c996 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c842:	69ba      	ldr	r2, [r7, #24]
   2c844:	697b      	ldr	r3, [r7, #20]
   2c846:	429a      	cmp	r2, r3
   2c848:	d007      	beq.n	2c85a <create_name+0x25a>
   2c84a:	2326      	movs	r3, #38	; 0x26
   2c84c:	18fb      	adds	r3, r7, r3
   2c84e:	2226      	movs	r2, #38	; 0x26
   2c850:	18ba      	adds	r2, r7, r2
   2c852:	7812      	ldrb	r2, [r2, #0]
   2c854:	2103      	movs	r1, #3
   2c856:	430a      	orrs	r2, r1
   2c858:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c85a:	69ba      	ldr	r2, [r7, #24]
   2c85c:	697b      	ldr	r3, [r7, #20]
   2c85e:	429a      	cmp	r2, r3
   2c860:	d900      	bls.n	2c864 <create_name+0x264>
   2c862:	e097      	b.n	2c994 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c864:	697b      	ldr	r3, [r7, #20]
   2c866:	61bb      	str	r3, [r7, #24]
   2c868:	2308      	movs	r3, #8
   2c86a:	623b      	str	r3, [r7, #32]
   2c86c:	230b      	movs	r3, #11
   2c86e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c870:	2327      	movs	r3, #39	; 0x27
   2c872:	18fb      	adds	r3, r7, r3
   2c874:	2227      	movs	r2, #39	; 0x27
   2c876:	18ba      	adds	r2, r7, r2
   2c878:	7812      	ldrb	r2, [r2, #0]
   2c87a:	0092      	lsls	r2, r2, #2
   2c87c:	701a      	strb	r2, [r3, #0]
   2c87e:	e078      	b.n	2c972 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c880:	2324      	movs	r3, #36	; 0x24
   2c882:	18fb      	adds	r3, r7, r3
   2c884:	881b      	ldrh	r3, [r3, #0]
   2c886:	2b7f      	cmp	r3, #127	; 0x7f
   2c888:	d920      	bls.n	2c8cc <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c88a:	2324      	movs	r3, #36	; 0x24
   2c88c:	18fc      	adds	r4, r7, r3
   2c88e:	2324      	movs	r3, #36	; 0x24
   2c890:	18fb      	adds	r3, r7, r3
   2c892:	881b      	ldrh	r3, [r3, #0]
   2c894:	2100      	movs	r1, #0
   2c896:	0018      	movs	r0, r3
   2c898:	4b37      	ldr	r3, [pc, #220]	; (2c978 <create_name+0x378>)
   2c89a:	4798      	blx	r3
   2c89c:	0003      	movs	r3, r0
   2c89e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c8a0:	2324      	movs	r3, #36	; 0x24
   2c8a2:	18fb      	adds	r3, r7, r3
   2c8a4:	881b      	ldrh	r3, [r3, #0]
   2c8a6:	2b00      	cmp	r3, #0
   2c8a8:	d008      	beq.n	2c8bc <create_name+0x2bc>
   2c8aa:	2324      	movs	r3, #36	; 0x24
   2c8ac:	18fb      	adds	r3, r7, r3
   2c8ae:	881b      	ldrh	r3, [r3, #0]
   2c8b0:	3b80      	subs	r3, #128	; 0x80
   2c8b2:	4a36      	ldr	r2, [pc, #216]	; (2c98c <create_name+0x38c>)
   2c8b4:	5cd2      	ldrb	r2, [r2, r3]
   2c8b6:	2324      	movs	r3, #36	; 0x24
   2c8b8:	18fb      	adds	r3, r7, r3
   2c8ba:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c8bc:	2326      	movs	r3, #38	; 0x26
   2c8be:	18fb      	adds	r3, r7, r3
   2c8c0:	2226      	movs	r2, #38	; 0x26
   2c8c2:	18ba      	adds	r2, r7, r2
   2c8c4:	7812      	ldrb	r2, [r2, #0]
   2c8c6:	2102      	movs	r1, #2
   2c8c8:	430a      	orrs	r2, r1
   2c8ca:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c8cc:	2324      	movs	r3, #36	; 0x24
   2c8ce:	18fb      	adds	r3, r7, r3
   2c8d0:	881b      	ldrh	r3, [r3, #0]
   2c8d2:	2b00      	cmp	r3, #0
   2c8d4:	d009      	beq.n	2c8ea <create_name+0x2ea>
   2c8d6:	2324      	movs	r3, #36	; 0x24
   2c8d8:	18fb      	adds	r3, r7, r3
   2c8da:	881a      	ldrh	r2, [r3, #0]
   2c8dc:	4b2c      	ldr	r3, [pc, #176]	; (2c990 <create_name+0x390>)
   2c8de:	0011      	movs	r1, r2
   2c8e0:	0018      	movs	r0, r3
   2c8e2:	4b27      	ldr	r3, [pc, #156]	; (2c980 <create_name+0x380>)
   2c8e4:	4798      	blx	r3
   2c8e6:	1e03      	subs	r3, r0, #0
   2c8e8:	d00c      	beq.n	2c904 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c8ea:	2324      	movs	r3, #36	; 0x24
   2c8ec:	18fb      	adds	r3, r7, r3
   2c8ee:	225f      	movs	r2, #95	; 0x5f
   2c8f0:	801a      	strh	r2, [r3, #0]
   2c8f2:	2326      	movs	r3, #38	; 0x26
   2c8f4:	18fb      	adds	r3, r7, r3
   2c8f6:	2226      	movs	r2, #38	; 0x26
   2c8f8:	18ba      	adds	r2, r7, r2
   2c8fa:	7812      	ldrb	r2, [r2, #0]
   2c8fc:	2103      	movs	r1, #3
   2c8fe:	430a      	orrs	r2, r1
   2c900:	701a      	strb	r2, [r3, #0]
   2c902:	e02b      	b.n	2c95c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c904:	2324      	movs	r3, #36	; 0x24
   2c906:	18fb      	adds	r3, r7, r3
   2c908:	881b      	ldrh	r3, [r3, #0]
   2c90a:	2b40      	cmp	r3, #64	; 0x40
   2c90c:	d90d      	bls.n	2c92a <create_name+0x32a>
   2c90e:	2324      	movs	r3, #36	; 0x24
   2c910:	18fb      	adds	r3, r7, r3
   2c912:	881b      	ldrh	r3, [r3, #0]
   2c914:	2b5a      	cmp	r3, #90	; 0x5a
   2c916:	d808      	bhi.n	2c92a <create_name+0x32a>
					b |= 2;
   2c918:	2327      	movs	r3, #39	; 0x27
   2c91a:	18fb      	adds	r3, r7, r3
   2c91c:	2227      	movs	r2, #39	; 0x27
   2c91e:	18ba      	adds	r2, r7, r2
   2c920:	7812      	ldrb	r2, [r2, #0]
   2c922:	2102      	movs	r1, #2
   2c924:	430a      	orrs	r2, r1
   2c926:	701a      	strb	r2, [r3, #0]
   2c928:	e018      	b.n	2c95c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c92a:	2324      	movs	r3, #36	; 0x24
   2c92c:	18fb      	adds	r3, r7, r3
   2c92e:	881b      	ldrh	r3, [r3, #0]
   2c930:	2b60      	cmp	r3, #96	; 0x60
   2c932:	d913      	bls.n	2c95c <create_name+0x35c>
   2c934:	2324      	movs	r3, #36	; 0x24
   2c936:	18fb      	adds	r3, r7, r3
   2c938:	881b      	ldrh	r3, [r3, #0]
   2c93a:	2b7a      	cmp	r3, #122	; 0x7a
   2c93c:	d80e      	bhi.n	2c95c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c93e:	2327      	movs	r3, #39	; 0x27
   2c940:	18fb      	adds	r3, r7, r3
   2c942:	2227      	movs	r2, #39	; 0x27
   2c944:	18ba      	adds	r2, r7, r2
   2c946:	7812      	ldrb	r2, [r2, #0]
   2c948:	2101      	movs	r1, #1
   2c94a:	430a      	orrs	r2, r1
   2c94c:	701a      	strb	r2, [r3, #0]
   2c94e:	2324      	movs	r3, #36	; 0x24
   2c950:	18fb      	adds	r3, r7, r3
   2c952:	2224      	movs	r2, #36	; 0x24
   2c954:	18ba      	adds	r2, r7, r2
   2c956:	8812      	ldrh	r2, [r2, #0]
   2c958:	3a20      	subs	r2, #32
   2c95a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c95c:	687b      	ldr	r3, [r7, #4]
   2c95e:	699a      	ldr	r2, [r3, #24]
   2c960:	6a3b      	ldr	r3, [r7, #32]
   2c962:	1c59      	adds	r1, r3, #1
   2c964:	6239      	str	r1, [r7, #32]
   2c966:	18d3      	adds	r3, r2, r3
   2c968:	2224      	movs	r2, #36	; 0x24
   2c96a:	18ba      	adds	r2, r7, r2
   2c96c:	8812      	ldrh	r2, [r2, #0]
   2c96e:	b2d2      	uxtb	r2, r2
   2c970:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c972:	e72b      	b.n	2c7cc <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c974:	46c0      	nop			; (mov r8, r8)
   2c976:	e00e      	b.n	2c996 <create_name+0x396>
   2c978:	0002dd39 	.word	0x0002dd39
   2c97c:	00038a40 	.word	0x00038a40
   2c980:	0002b1a3 	.word	0x0002b1a3
   2c984:	7fffffff 	.word	0x7fffffff
   2c988:	0002b129 	.word	0x0002b129
   2c98c:	00038a88 	.word	0x00038a88
   2c990:	00038a4c 	.word	0x00038a4c
			if (si > di) break;			/* No extension */
   2c994:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c996:	687b      	ldr	r3, [r7, #4]
   2c998:	699b      	ldr	r3, [r3, #24]
   2c99a:	781b      	ldrb	r3, [r3, #0]
   2c99c:	2be5      	cmp	r3, #229	; 0xe5
   2c99e:	d103      	bne.n	2c9a8 <create_name+0x3a8>
   2c9a0:	687b      	ldr	r3, [r7, #4]
   2c9a2:	699b      	ldr	r3, [r3, #24]
   2c9a4:	2205      	movs	r2, #5
   2c9a6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c9a8:	69fb      	ldr	r3, [r7, #28]
   2c9aa:	2b08      	cmp	r3, #8
   2c9ac:	d106      	bne.n	2c9bc <create_name+0x3bc>
   2c9ae:	2327      	movs	r3, #39	; 0x27
   2c9b0:	18fb      	adds	r3, r7, r3
   2c9b2:	2227      	movs	r2, #39	; 0x27
   2c9b4:	18ba      	adds	r2, r7, r2
   2c9b6:	7812      	ldrb	r2, [r2, #0]
   2c9b8:	0092      	lsls	r2, r2, #2
   2c9ba:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c9bc:	2327      	movs	r3, #39	; 0x27
   2c9be:	18fb      	adds	r3, r7, r3
   2c9c0:	781b      	ldrb	r3, [r3, #0]
   2c9c2:	220c      	movs	r2, #12
   2c9c4:	4013      	ands	r3, r2
   2c9c6:	2b0c      	cmp	r3, #12
   2c9c8:	d006      	beq.n	2c9d8 <create_name+0x3d8>
   2c9ca:	2327      	movs	r3, #39	; 0x27
   2c9cc:	18fb      	adds	r3, r7, r3
   2c9ce:	781b      	ldrb	r3, [r3, #0]
   2c9d0:	2203      	movs	r2, #3
   2c9d2:	4013      	ands	r3, r2
   2c9d4:	2b03      	cmp	r3, #3
   2c9d6:	d107      	bne.n	2c9e8 <create_name+0x3e8>
		cf |= NS_LFN;
   2c9d8:	2326      	movs	r3, #38	; 0x26
   2c9da:	18fb      	adds	r3, r7, r3
   2c9dc:	2226      	movs	r2, #38	; 0x26
   2c9de:	18ba      	adds	r2, r7, r2
   2c9e0:	7812      	ldrb	r2, [r2, #0]
   2c9e2:	2102      	movs	r1, #2
   2c9e4:	430a      	orrs	r2, r1
   2c9e6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2c9e8:	2326      	movs	r3, #38	; 0x26
   2c9ea:	18fb      	adds	r3, r7, r3
   2c9ec:	781b      	ldrb	r3, [r3, #0]
   2c9ee:	2202      	movs	r2, #2
   2c9f0:	4013      	ands	r3, r2
   2c9f2:	d11d      	bne.n	2ca30 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2c9f4:	2327      	movs	r3, #39	; 0x27
   2c9f6:	18fb      	adds	r3, r7, r3
   2c9f8:	781b      	ldrb	r3, [r3, #0]
   2c9fa:	2203      	movs	r2, #3
   2c9fc:	4013      	ands	r3, r2
   2c9fe:	2b01      	cmp	r3, #1
   2ca00:	d107      	bne.n	2ca12 <create_name+0x412>
   2ca02:	2326      	movs	r3, #38	; 0x26
   2ca04:	18fb      	adds	r3, r7, r3
   2ca06:	2226      	movs	r2, #38	; 0x26
   2ca08:	18ba      	adds	r2, r7, r2
   2ca0a:	7812      	ldrb	r2, [r2, #0]
   2ca0c:	2110      	movs	r1, #16
   2ca0e:	430a      	orrs	r2, r1
   2ca10:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2ca12:	2327      	movs	r3, #39	; 0x27
   2ca14:	18fb      	adds	r3, r7, r3
   2ca16:	781b      	ldrb	r3, [r3, #0]
   2ca18:	220c      	movs	r2, #12
   2ca1a:	4013      	ands	r3, r2
   2ca1c:	2b04      	cmp	r3, #4
   2ca1e:	d107      	bne.n	2ca30 <create_name+0x430>
   2ca20:	2326      	movs	r3, #38	; 0x26
   2ca22:	18fb      	adds	r3, r7, r3
   2ca24:	2226      	movs	r2, #38	; 0x26
   2ca26:	18ba      	adds	r2, r7, r2
   2ca28:	7812      	ldrb	r2, [r2, #0]
   2ca2a:	2108      	movs	r1, #8
   2ca2c:	430a      	orrs	r2, r1
   2ca2e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2ca30:	687b      	ldr	r3, [r7, #4]
   2ca32:	699b      	ldr	r3, [r3, #24]
   2ca34:	330b      	adds	r3, #11
   2ca36:	2226      	movs	r2, #38	; 0x26
   2ca38:	18ba      	adds	r2, r7, r2
   2ca3a:	7812      	ldrb	r2, [r2, #0]
   2ca3c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2ca3e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2ca40:	0018      	movs	r0, r3
   2ca42:	46bd      	mov	sp, r7
   2ca44:	b00b      	add	sp, #44	; 0x2c
   2ca46:	bd90      	pop	{r4, r7, pc}

0002ca48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2ca48:	b590      	push	{r4, r7, lr}
   2ca4a:	b085      	sub	sp, #20
   2ca4c:	af00      	add	r7, sp, #0
   2ca4e:	6078      	str	r0, [r7, #4]
   2ca50:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2ca52:	683b      	ldr	r3, [r7, #0]
   2ca54:	781b      	ldrb	r3, [r3, #0]
   2ca56:	2b2f      	cmp	r3, #47	; 0x2f
   2ca58:	d003      	beq.n	2ca62 <follow_path+0x1a>
   2ca5a:	683b      	ldr	r3, [r7, #0]
   2ca5c:	781b      	ldrb	r3, [r3, #0]
   2ca5e:	2b5c      	cmp	r3, #92	; 0x5c
   2ca60:	d102      	bne.n	2ca68 <follow_path+0x20>
		path++;
   2ca62:	683b      	ldr	r3, [r7, #0]
   2ca64:	3301      	adds	r3, #1
   2ca66:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2ca68:	687b      	ldr	r3, [r7, #4]
   2ca6a:	2200      	movs	r2, #0
   2ca6c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2ca6e:	683b      	ldr	r3, [r7, #0]
   2ca70:	781b      	ldrb	r3, [r3, #0]
   2ca72:	2b1f      	cmp	r3, #31
   2ca74:	d80c      	bhi.n	2ca90 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2ca76:	230f      	movs	r3, #15
   2ca78:	18fc      	adds	r4, r7, r3
   2ca7a:	687b      	ldr	r3, [r7, #4]
   2ca7c:	2100      	movs	r1, #0
   2ca7e:	0018      	movs	r0, r3
   2ca80:	4b3c      	ldr	r3, [pc, #240]	; (2cb74 <follow_path+0x12c>)
   2ca82:	4798      	blx	r3
   2ca84:	0003      	movs	r3, r0
   2ca86:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2ca88:	687b      	ldr	r3, [r7, #4]
   2ca8a:	2200      	movs	r2, #0
   2ca8c:	615a      	str	r2, [r3, #20]
   2ca8e:	e06a      	b.n	2cb66 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2ca90:	230f      	movs	r3, #15
   2ca92:	18fc      	adds	r4, r7, r3
   2ca94:	003a      	movs	r2, r7
   2ca96:	687b      	ldr	r3, [r7, #4]
   2ca98:	0011      	movs	r1, r2
   2ca9a:	0018      	movs	r0, r3
   2ca9c:	4b36      	ldr	r3, [pc, #216]	; (2cb78 <follow_path+0x130>)
   2ca9e:	4798      	blx	r3
   2caa0:	0003      	movs	r3, r0
   2caa2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2caa4:	230f      	movs	r3, #15
   2caa6:	18fb      	adds	r3, r7, r3
   2caa8:	781b      	ldrb	r3, [r3, #0]
   2caaa:	2b00      	cmp	r3, #0
   2caac:	d154      	bne.n	2cb58 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2caae:	230f      	movs	r3, #15
   2cab0:	18fc      	adds	r4, r7, r3
   2cab2:	687b      	ldr	r3, [r7, #4]
   2cab4:	0018      	movs	r0, r3
   2cab6:	4b31      	ldr	r3, [pc, #196]	; (2cb7c <follow_path+0x134>)
   2cab8:	4798      	blx	r3
   2caba:	0003      	movs	r3, r0
   2cabc:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2cabe:	687b      	ldr	r3, [r7, #4]
   2cac0:	699a      	ldr	r2, [r3, #24]
   2cac2:	230e      	movs	r3, #14
   2cac4:	18fb      	adds	r3, r7, r3
   2cac6:	7ad2      	ldrb	r2, [r2, #11]
   2cac8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2caca:	230f      	movs	r3, #15
   2cacc:	18fb      	adds	r3, r7, r3
   2cace:	781b      	ldrb	r3, [r3, #0]
   2cad0:	2b00      	cmp	r3, #0
   2cad2:	d00f      	beq.n	2caf4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cad4:	230f      	movs	r3, #15
   2cad6:	18fb      	adds	r3, r7, r3
   2cad8:	781b      	ldrb	r3, [r3, #0]
   2cada:	2b04      	cmp	r3, #4
   2cadc:	d13e      	bne.n	2cb5c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2cade:	230e      	movs	r3, #14
   2cae0:	18fb      	adds	r3, r7, r3
   2cae2:	781b      	ldrb	r3, [r3, #0]
   2cae4:	2204      	movs	r2, #4
   2cae6:	4013      	ands	r3, r2
   2cae8:	d13a      	bne.n	2cb60 <follow_path+0x118>
   2caea:	230f      	movs	r3, #15
   2caec:	18fb      	adds	r3, r7, r3
   2caee:	2205      	movs	r2, #5
   2caf0:	701a      	strb	r2, [r3, #0]
				}
				break;
   2caf2:	e035      	b.n	2cb60 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2caf4:	230e      	movs	r3, #14
   2caf6:	18fb      	adds	r3, r7, r3
   2caf8:	781b      	ldrb	r3, [r3, #0]
   2cafa:	2204      	movs	r2, #4
   2cafc:	4013      	ands	r3, r2
   2cafe:	d131      	bne.n	2cb64 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2cb00:	687b      	ldr	r3, [r7, #4]
   2cb02:	695b      	ldr	r3, [r3, #20]
   2cb04:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2cb06:	68bb      	ldr	r3, [r7, #8]
   2cb08:	330b      	adds	r3, #11
   2cb0a:	781b      	ldrb	r3, [r3, #0]
   2cb0c:	001a      	movs	r2, r3
   2cb0e:	2310      	movs	r3, #16
   2cb10:	4013      	ands	r3, r2
   2cb12:	d104      	bne.n	2cb1e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2cb14:	230f      	movs	r3, #15
   2cb16:	18fb      	adds	r3, r7, r3
   2cb18:	2205      	movs	r2, #5
   2cb1a:	701a      	strb	r2, [r3, #0]
   2cb1c:	e023      	b.n	2cb66 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2cb1e:	68bb      	ldr	r3, [r7, #8]
   2cb20:	3315      	adds	r3, #21
   2cb22:	781b      	ldrb	r3, [r3, #0]
   2cb24:	021b      	lsls	r3, r3, #8
   2cb26:	b21a      	sxth	r2, r3
   2cb28:	68bb      	ldr	r3, [r7, #8]
   2cb2a:	3314      	adds	r3, #20
   2cb2c:	781b      	ldrb	r3, [r3, #0]
   2cb2e:	b21b      	sxth	r3, r3
   2cb30:	4313      	orrs	r3, r2
   2cb32:	b21b      	sxth	r3, r3
   2cb34:	b29b      	uxth	r3, r3
   2cb36:	041b      	lsls	r3, r3, #16
   2cb38:	68ba      	ldr	r2, [r7, #8]
   2cb3a:	321b      	adds	r2, #27
   2cb3c:	7812      	ldrb	r2, [r2, #0]
   2cb3e:	0212      	lsls	r2, r2, #8
   2cb40:	b211      	sxth	r1, r2
   2cb42:	68ba      	ldr	r2, [r7, #8]
   2cb44:	321a      	adds	r2, #26
   2cb46:	7812      	ldrb	r2, [r2, #0]
   2cb48:	b212      	sxth	r2, r2
   2cb4a:	430a      	orrs	r2, r1
   2cb4c:	b212      	sxth	r2, r2
   2cb4e:	b292      	uxth	r2, r2
   2cb50:	431a      	orrs	r2, r3
   2cb52:	687b      	ldr	r3, [r7, #4]
   2cb54:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2cb56:	e79b      	b.n	2ca90 <follow_path+0x48>
			if (res != FR_OK) break;
   2cb58:	46c0      	nop			; (mov r8, r8)
   2cb5a:	e004      	b.n	2cb66 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cb5c:	46c0      	nop			; (mov r8, r8)
   2cb5e:	e002      	b.n	2cb66 <follow_path+0x11e>
				break;
   2cb60:	46c0      	nop			; (mov r8, r8)
   2cb62:	e000      	b.n	2cb66 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cb64:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cb66:	230f      	movs	r3, #15
   2cb68:	18fb      	adds	r3, r7, r3
   2cb6a:	781b      	ldrb	r3, [r3, #0]
}
   2cb6c:	0018      	movs	r0, r3
   2cb6e:	46bd      	mov	sp, r7
   2cb70:	b005      	add	sp, #20
   2cb72:	bd90      	pop	{r4, r7, pc}
   2cb74:	0002ba19 	.word	0x0002ba19
   2cb78:	0002c601 	.word	0x0002c601
   2cb7c:	0002c09d 	.word	0x0002c09d

0002cb80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2cb80:	b590      	push	{r4, r7, lr}
   2cb82:	b083      	sub	sp, #12
   2cb84:	af00      	add	r7, sp, #0
   2cb86:	6078      	str	r0, [r7, #4]
   2cb88:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2cb8a:	687b      	ldr	r3, [r7, #4]
   2cb8c:	7858      	ldrb	r0, [r3, #1]
   2cb8e:	687b      	ldr	r3, [r7, #4]
   2cb90:	3330      	adds	r3, #48	; 0x30
   2cb92:	0019      	movs	r1, r3
   2cb94:	683a      	ldr	r2, [r7, #0]
   2cb96:	2301      	movs	r3, #1
   2cb98:	4c2a      	ldr	r4, [pc, #168]	; (2cc44 <check_fs+0xc4>)
   2cb9a:	47a0      	blx	r4
   2cb9c:	1e03      	subs	r3, r0, #0
   2cb9e:	d001      	beq.n	2cba4 <check_fs+0x24>
		return 3;
   2cba0:	2303      	movs	r3, #3
   2cba2:	e04b      	b.n	2cc3c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2cba4:	687b      	ldr	r3, [r7, #4]
   2cba6:	4a28      	ldr	r2, [pc, #160]	; (2cc48 <check_fs+0xc8>)
   2cba8:	4694      	mov	ip, r2
   2cbaa:	4463      	add	r3, ip
   2cbac:	3301      	adds	r3, #1
   2cbae:	781b      	ldrb	r3, [r3, #0]
   2cbb0:	021b      	lsls	r3, r3, #8
   2cbb2:	b21a      	sxth	r2, r3
   2cbb4:	687b      	ldr	r3, [r7, #4]
   2cbb6:	4924      	ldr	r1, [pc, #144]	; (2cc48 <check_fs+0xc8>)
   2cbb8:	5c5b      	ldrb	r3, [r3, r1]
   2cbba:	b21b      	sxth	r3, r3
   2cbbc:	4313      	orrs	r3, r2
   2cbbe:	b21b      	sxth	r3, r3
   2cbc0:	4a22      	ldr	r2, [pc, #136]	; (2cc4c <check_fs+0xcc>)
   2cbc2:	4293      	cmp	r3, r2
   2cbc4:	d001      	beq.n	2cbca <check_fs+0x4a>
		return 2;
   2cbc6:	2302      	movs	r3, #2
   2cbc8:	e038      	b.n	2cc3c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2cbca:	687b      	ldr	r3, [r7, #4]
   2cbcc:	3366      	adds	r3, #102	; 0x66
   2cbce:	3303      	adds	r3, #3
   2cbd0:	781b      	ldrb	r3, [r3, #0]
   2cbd2:	061a      	lsls	r2, r3, #24
   2cbd4:	687b      	ldr	r3, [r7, #4]
   2cbd6:	3366      	adds	r3, #102	; 0x66
   2cbd8:	3302      	adds	r3, #2
   2cbda:	781b      	ldrb	r3, [r3, #0]
   2cbdc:	041b      	lsls	r3, r3, #16
   2cbde:	4313      	orrs	r3, r2
   2cbe0:	687a      	ldr	r2, [r7, #4]
   2cbe2:	3266      	adds	r2, #102	; 0x66
   2cbe4:	3201      	adds	r2, #1
   2cbe6:	7812      	ldrb	r2, [r2, #0]
   2cbe8:	0212      	lsls	r2, r2, #8
   2cbea:	4313      	orrs	r3, r2
   2cbec:	687a      	ldr	r2, [r7, #4]
   2cbee:	2166      	movs	r1, #102	; 0x66
   2cbf0:	5c52      	ldrb	r2, [r2, r1]
   2cbf2:	4313      	orrs	r3, r2
   2cbf4:	021b      	lsls	r3, r3, #8
   2cbf6:	0a1b      	lsrs	r3, r3, #8
   2cbf8:	4a15      	ldr	r2, [pc, #84]	; (2cc50 <check_fs+0xd0>)
   2cbfa:	4293      	cmp	r3, r2
   2cbfc:	d101      	bne.n	2cc02 <check_fs+0x82>
		return 0;
   2cbfe:	2300      	movs	r3, #0
   2cc00:	e01c      	b.n	2cc3c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2cc02:	687b      	ldr	r3, [r7, #4]
   2cc04:	3382      	adds	r3, #130	; 0x82
   2cc06:	3303      	adds	r3, #3
   2cc08:	781b      	ldrb	r3, [r3, #0]
   2cc0a:	061a      	lsls	r2, r3, #24
   2cc0c:	687b      	ldr	r3, [r7, #4]
   2cc0e:	3382      	adds	r3, #130	; 0x82
   2cc10:	3302      	adds	r3, #2
   2cc12:	781b      	ldrb	r3, [r3, #0]
   2cc14:	041b      	lsls	r3, r3, #16
   2cc16:	4313      	orrs	r3, r2
   2cc18:	687a      	ldr	r2, [r7, #4]
   2cc1a:	3282      	adds	r2, #130	; 0x82
   2cc1c:	3201      	adds	r2, #1
   2cc1e:	7812      	ldrb	r2, [r2, #0]
   2cc20:	0212      	lsls	r2, r2, #8
   2cc22:	4313      	orrs	r3, r2
   2cc24:	687a      	ldr	r2, [r7, #4]
   2cc26:	2182      	movs	r1, #130	; 0x82
   2cc28:	5c52      	ldrb	r2, [r2, r1]
   2cc2a:	4313      	orrs	r3, r2
   2cc2c:	021b      	lsls	r3, r3, #8
   2cc2e:	0a1b      	lsrs	r3, r3, #8
   2cc30:	4a07      	ldr	r2, [pc, #28]	; (2cc50 <check_fs+0xd0>)
   2cc32:	4293      	cmp	r3, r2
   2cc34:	d101      	bne.n	2cc3a <check_fs+0xba>
		return 0;
   2cc36:	2300      	movs	r3, #0
   2cc38:	e000      	b.n	2cc3c <check_fs+0xbc>

	return 1;
   2cc3a:	2301      	movs	r3, #1
}
   2cc3c:	0018      	movs	r0, r3
   2cc3e:	46bd      	mov	sp, r7
   2cc40:	b003      	add	sp, #12
   2cc42:	bd90      	pop	{r4, r7, pc}
   2cc44:	0002ade9 	.word	0x0002ade9
   2cc48:	0000022e 	.word	0x0000022e
   2cc4c:	ffffaa55 	.word	0xffffaa55
   2cc50:	00544146 	.word	0x00544146

0002cc54 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2cc54:	b590      	push	{r4, r7, lr}
   2cc56:	b093      	sub	sp, #76	; 0x4c
   2cc58:	af00      	add	r7, sp, #0
   2cc5a:	60f8      	str	r0, [r7, #12]
   2cc5c:	60b9      	str	r1, [r7, #8]
   2cc5e:	1dfb      	adds	r3, r7, #7
   2cc60:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2cc62:	68fb      	ldr	r3, [r7, #12]
   2cc64:	681b      	ldr	r3, [r3, #0]
   2cc66:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cc6a:	781b      	ldrb	r3, [r3, #0]
   2cc6c:	3b30      	subs	r3, #48	; 0x30
   2cc6e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2cc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cc72:	2b09      	cmp	r3, #9
   2cc74:	d80b      	bhi.n	2cc8e <chk_mounted+0x3a>
   2cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cc78:	3301      	adds	r3, #1
   2cc7a:	781b      	ldrb	r3, [r3, #0]
   2cc7c:	2b3a      	cmp	r3, #58	; 0x3a
   2cc7e:	d106      	bne.n	2cc8e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cc82:	3302      	adds	r3, #2
   2cc84:	62fb      	str	r3, [r7, #44]	; 0x2c
   2cc86:	68fb      	ldr	r3, [r7, #12]
   2cc88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2cc8a:	601a      	str	r2, [r3, #0]
   2cc8c:	e001      	b.n	2cc92 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2cc8e:	2300      	movs	r3, #0
   2cc90:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2cc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cc94:	2b07      	cmp	r3, #7
   2cc96:	d901      	bls.n	2cc9c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2cc98:	230b      	movs	r3, #11
   2cc9a:	e2af      	b.n	2d1fc <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2cc9c:	4bc5      	ldr	r3, [pc, #788]	; (2cfb4 <chk_mounted+0x360>)
   2cc9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2cca0:	0092      	lsls	r2, r2, #2
   2cca2:	58d3      	ldr	r3, [r2, r3]
   2cca4:	62bb      	str	r3, [r7, #40]	; 0x28
   2cca6:	68bb      	ldr	r3, [r7, #8]
   2cca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ccaa:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2ccac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccae:	2b00      	cmp	r3, #0
   2ccb0:	d101      	bne.n	2ccb6 <chk_mounted+0x62>
   2ccb2:	230c      	movs	r3, #12
   2ccb4:	e2a2      	b.n	2d1fc <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2ccb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccb8:	781b      	ldrb	r3, [r3, #0]
   2ccba:	2b00      	cmp	r3, #0
   2ccbc:	d01c      	beq.n	2ccf8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccc0:	785b      	ldrb	r3, [r3, #1]
   2ccc2:	2227      	movs	r2, #39	; 0x27
   2ccc4:	18bc      	adds	r4, r7, r2
   2ccc6:	0018      	movs	r0, r3
   2ccc8:	4bbb      	ldr	r3, [pc, #748]	; (2cfb8 <chk_mounted+0x364>)
   2ccca:	4798      	blx	r3
   2cccc:	0003      	movs	r3, r0
   2ccce:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2ccd0:	2327      	movs	r3, #39	; 0x27
   2ccd2:	18fb      	adds	r3, r7, r3
   2ccd4:	781b      	ldrb	r3, [r3, #0]
   2ccd6:	2201      	movs	r2, #1
   2ccd8:	4013      	ands	r3, r2
   2ccda:	d10d      	bne.n	2ccf8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2ccdc:	1dfb      	adds	r3, r7, #7
   2ccde:	781b      	ldrb	r3, [r3, #0]
   2cce0:	2b00      	cmp	r3, #0
   2cce2:	d007      	beq.n	2ccf4 <chk_mounted+0xa0>
   2cce4:	2327      	movs	r3, #39	; 0x27
   2cce6:	18fb      	adds	r3, r7, r3
   2cce8:	781b      	ldrb	r3, [r3, #0]
   2ccea:	2204      	movs	r2, #4
   2ccec:	4013      	ands	r3, r2
   2ccee:	d001      	beq.n	2ccf4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2ccf0:	230a      	movs	r3, #10
   2ccf2:	e283      	b.n	2d1fc <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2ccf4:	2300      	movs	r3, #0
   2ccf6:	e281      	b.n	2d1fc <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccfa:	2200      	movs	r2, #0
   2ccfc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2ccfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cd00:	b2da      	uxtb	r2, r3
   2cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd04:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd08:	785b      	ldrb	r3, [r3, #1]
   2cd0a:	2227      	movs	r2, #39	; 0x27
   2cd0c:	18bc      	adds	r4, r7, r2
   2cd0e:	0018      	movs	r0, r3
   2cd10:	4baa      	ldr	r3, [pc, #680]	; (2cfbc <chk_mounted+0x368>)
   2cd12:	4798      	blx	r3
   2cd14:	0003      	movs	r3, r0
   2cd16:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2cd18:	2327      	movs	r3, #39	; 0x27
   2cd1a:	18fb      	adds	r3, r7, r3
   2cd1c:	781b      	ldrb	r3, [r3, #0]
   2cd1e:	2201      	movs	r2, #1
   2cd20:	4013      	ands	r3, r2
   2cd22:	d001      	beq.n	2cd28 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2cd24:	2303      	movs	r3, #3
   2cd26:	e269      	b.n	2d1fc <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2cd28:	1dfb      	adds	r3, r7, #7
   2cd2a:	781b      	ldrb	r3, [r3, #0]
   2cd2c:	2b00      	cmp	r3, #0
   2cd2e:	d007      	beq.n	2cd40 <chk_mounted+0xec>
   2cd30:	2327      	movs	r3, #39	; 0x27
   2cd32:	18fb      	adds	r3, r7, r3
   2cd34:	781b      	ldrb	r3, [r3, #0]
   2cd36:	2204      	movs	r2, #4
   2cd38:	4013      	ands	r3, r2
   2cd3a:	d001      	beq.n	2cd40 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2cd3c:	230a      	movs	r3, #10
   2cd3e:	e25d      	b.n	2d1fc <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2cd40:	2300      	movs	r3, #0
   2cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cd44:	2347      	movs	r3, #71	; 0x47
   2cd46:	18fc      	adds	r4, r7, r3
   2cd48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd4c:	0011      	movs	r1, r2
   2cd4e:	0018      	movs	r0, r3
   2cd50:	4b9b      	ldr	r3, [pc, #620]	; (2cfc0 <chk_mounted+0x36c>)
   2cd52:	4798      	blx	r3
   2cd54:	0003      	movs	r3, r0
   2cd56:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2cd58:	2347      	movs	r3, #71	; 0x47
   2cd5a:	18fb      	adds	r3, r7, r3
   2cd5c:	781b      	ldrb	r3, [r3, #0]
   2cd5e:	2b01      	cmp	r3, #1
   2cd60:	d13b      	bne.n	2cdda <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2cd62:	2346      	movs	r3, #70	; 0x46
   2cd64:	18fb      	adds	r3, r7, r3
   2cd66:	2200      	movs	r2, #0
   2cd68:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2cd6a:	2346      	movs	r3, #70	; 0x46
   2cd6c:	18fb      	adds	r3, r7, r3
   2cd6e:	781b      	ldrb	r3, [r3, #0]
   2cd70:	2b00      	cmp	r3, #0
   2cd72:	d006      	beq.n	2cd82 <chk_mounted+0x12e>
   2cd74:	2346      	movs	r3, #70	; 0x46
   2cd76:	18fb      	adds	r3, r7, r3
   2cd78:	781a      	ldrb	r2, [r3, #0]
   2cd7a:	2346      	movs	r3, #70	; 0x46
   2cd7c:	18fb      	adds	r3, r7, r3
   2cd7e:	3a01      	subs	r2, #1
   2cd80:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2cd82:	2346      	movs	r3, #70	; 0x46
   2cd84:	18fb      	adds	r3, r7, r3
   2cd86:	781b      	ldrb	r3, [r3, #0]
   2cd88:	011b      	lsls	r3, r3, #4
   2cd8a:	33bf      	adds	r3, #191	; 0xbf
   2cd8c:	33ff      	adds	r3, #255	; 0xff
   2cd8e:	3330      	adds	r3, #48	; 0x30
   2cd90:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cd92:	18d3      	adds	r3, r2, r3
   2cd94:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2cd96:	6a3b      	ldr	r3, [r7, #32]
   2cd98:	3304      	adds	r3, #4
   2cd9a:	781b      	ldrb	r3, [r3, #0]
   2cd9c:	2b00      	cmp	r3, #0
   2cd9e:	d01c      	beq.n	2cdda <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2cda0:	6a3b      	ldr	r3, [r7, #32]
   2cda2:	330b      	adds	r3, #11
   2cda4:	781b      	ldrb	r3, [r3, #0]
   2cda6:	061a      	lsls	r2, r3, #24
   2cda8:	6a3b      	ldr	r3, [r7, #32]
   2cdaa:	330a      	adds	r3, #10
   2cdac:	781b      	ldrb	r3, [r3, #0]
   2cdae:	041b      	lsls	r3, r3, #16
   2cdb0:	4313      	orrs	r3, r2
   2cdb2:	6a3a      	ldr	r2, [r7, #32]
   2cdb4:	3209      	adds	r2, #9
   2cdb6:	7812      	ldrb	r2, [r2, #0]
   2cdb8:	0212      	lsls	r2, r2, #8
   2cdba:	4313      	orrs	r3, r2
   2cdbc:	6a3a      	ldr	r2, [r7, #32]
   2cdbe:	3208      	adds	r2, #8
   2cdc0:	7812      	ldrb	r2, [r2, #0]
   2cdc2:	4313      	orrs	r3, r2
   2cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2cdc6:	2347      	movs	r3, #71	; 0x47
   2cdc8:	18fc      	adds	r4, r7, r3
   2cdca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cdce:	0011      	movs	r1, r2
   2cdd0:	0018      	movs	r0, r3
   2cdd2:	4b7b      	ldr	r3, [pc, #492]	; (2cfc0 <chk_mounted+0x36c>)
   2cdd4:	4798      	blx	r3
   2cdd6:	0003      	movs	r3, r0
   2cdd8:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2cdda:	2347      	movs	r3, #71	; 0x47
   2cddc:	18fb      	adds	r3, r7, r3
   2cdde:	781b      	ldrb	r3, [r3, #0]
   2cde0:	2b03      	cmp	r3, #3
   2cde2:	d101      	bne.n	2cde8 <chk_mounted+0x194>
   2cde4:	2301      	movs	r3, #1
   2cde6:	e209      	b.n	2d1fc <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2cde8:	2347      	movs	r3, #71	; 0x47
   2cdea:	18fb      	adds	r3, r7, r3
   2cdec:	781b      	ldrb	r3, [r3, #0]
   2cdee:	2b00      	cmp	r3, #0
   2cdf0:	d001      	beq.n	2cdf6 <chk_mounted+0x1a2>
   2cdf2:	230d      	movs	r3, #13
   2cdf4:	e202      	b.n	2d1fc <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cdf8:	223c      	movs	r2, #60	; 0x3c
   2cdfa:	5c9b      	ldrb	r3, [r3, r2]
   2cdfc:	021b      	lsls	r3, r3, #8
   2cdfe:	b21a      	sxth	r2, r3
   2ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce02:	213b      	movs	r1, #59	; 0x3b
   2ce04:	5c5b      	ldrb	r3, [r3, r1]
   2ce06:	b21b      	sxth	r3, r3
   2ce08:	4313      	orrs	r3, r2
   2ce0a:	b21a      	sxth	r2, r3
   2ce0c:	2380      	movs	r3, #128	; 0x80
   2ce0e:	009b      	lsls	r3, r3, #2
   2ce10:	429a      	cmp	r2, r3
   2ce12:	d001      	beq.n	2ce18 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2ce14:	230d      	movs	r3, #13
   2ce16:	e1f1      	b.n	2d1fc <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce1a:	2247      	movs	r2, #71	; 0x47
   2ce1c:	5c9b      	ldrb	r3, [r3, r2]
   2ce1e:	021b      	lsls	r3, r3, #8
   2ce20:	b21a      	sxth	r2, r3
   2ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce24:	2146      	movs	r1, #70	; 0x46
   2ce26:	5c5b      	ldrb	r3, [r3, r1]
   2ce28:	b21b      	sxth	r3, r3
   2ce2a:	4313      	orrs	r3, r2
   2ce2c:	b21b      	sxth	r3, r3
   2ce2e:	b29b      	uxth	r3, r3
   2ce30:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ce34:	2b00      	cmp	r3, #0
   2ce36:	d112      	bne.n	2ce5e <chk_mounted+0x20a>
   2ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce3a:	2257      	movs	r2, #87	; 0x57
   2ce3c:	5c9b      	ldrb	r3, [r3, r2]
   2ce3e:	061a      	lsls	r2, r3, #24
   2ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce42:	2156      	movs	r1, #86	; 0x56
   2ce44:	5c5b      	ldrb	r3, [r3, r1]
   2ce46:	041b      	lsls	r3, r3, #16
   2ce48:	4313      	orrs	r3, r2
   2ce4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce4c:	2155      	movs	r1, #85	; 0x55
   2ce4e:	5c52      	ldrb	r2, [r2, r1]
   2ce50:	0212      	lsls	r2, r2, #8
   2ce52:	4313      	orrs	r3, r2
   2ce54:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce56:	2154      	movs	r1, #84	; 0x54
   2ce58:	5c52      	ldrb	r2, [r2, r1]
   2ce5a:	4313      	orrs	r3, r2
   2ce5c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce60:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2ce62:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2ce64:	231f      	movs	r3, #31
   2ce66:	18fb      	adds	r3, r7, r3
   2ce68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce6a:	2140      	movs	r1, #64	; 0x40
   2ce6c:	5c52      	ldrb	r2, [r2, r1]
   2ce6e:	701a      	strb	r2, [r3, #0]
   2ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce72:	221f      	movs	r2, #31
   2ce74:	18ba      	adds	r2, r7, r2
   2ce76:	7812      	ldrb	r2, [r2, #0]
   2ce78:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2ce7a:	231f      	movs	r3, #31
   2ce7c:	18fb      	adds	r3, r7, r3
   2ce7e:	781b      	ldrb	r3, [r3, #0]
   2ce80:	2b01      	cmp	r3, #1
   2ce82:	d006      	beq.n	2ce92 <chk_mounted+0x23e>
   2ce84:	231f      	movs	r3, #31
   2ce86:	18fb      	adds	r3, r7, r3
   2ce88:	781b      	ldrb	r3, [r3, #0]
   2ce8a:	2b02      	cmp	r3, #2
   2ce8c:	d001      	beq.n	2ce92 <chk_mounted+0x23e>
   2ce8e:	230d      	movs	r3, #13
   2ce90:	e1b4      	b.n	2d1fc <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2ce92:	231f      	movs	r3, #31
   2ce94:	18fb      	adds	r3, r7, r3
   2ce96:	781a      	ldrb	r2, [r3, #0]
   2ce98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ce9a:	4353      	muls	r3, r2
   2ce9c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2ce9e:	231f      	movs	r3, #31
   2cea0:	18fb      	adds	r3, r7, r3
   2cea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cea4:	213d      	movs	r1, #61	; 0x3d
   2cea6:	5c52      	ldrb	r2, [r2, r1]
   2cea8:	701a      	strb	r2, [r3, #0]
   2ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ceac:	221f      	movs	r2, #31
   2ceae:	18ba      	adds	r2, r7, r2
   2ceb0:	7812      	ldrb	r2, [r2, #0]
   2ceb2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2ceb4:	231f      	movs	r3, #31
   2ceb6:	18fb      	adds	r3, r7, r3
   2ceb8:	781b      	ldrb	r3, [r3, #0]
   2ceba:	2b00      	cmp	r3, #0
   2cebc:	d008      	beq.n	2ced0 <chk_mounted+0x27c>
   2cebe:	231f      	movs	r3, #31
   2cec0:	18fb      	adds	r3, r7, r3
   2cec2:	781b      	ldrb	r3, [r3, #0]
   2cec4:	221f      	movs	r2, #31
   2cec6:	18ba      	adds	r2, r7, r2
   2cec8:	7812      	ldrb	r2, [r2, #0]
   2ceca:	3a01      	subs	r2, #1
   2cecc:	4013      	ands	r3, r2
   2cece:	d001      	beq.n	2ced4 <chk_mounted+0x280>
   2ced0:	230d      	movs	r3, #13
   2ced2:	e193      	b.n	2d1fc <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ced6:	2242      	movs	r2, #66	; 0x42
   2ced8:	5c9b      	ldrb	r3, [r3, r2]
   2ceda:	021b      	lsls	r3, r3, #8
   2cedc:	b21a      	sxth	r2, r3
   2cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cee0:	2141      	movs	r1, #65	; 0x41
   2cee2:	5c5b      	ldrb	r3, [r3, r1]
   2cee4:	b21b      	sxth	r3, r3
   2cee6:	4313      	orrs	r3, r2
   2cee8:	b21b      	sxth	r3, r3
   2ceea:	b29a      	uxth	r2, r3
   2ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ceee:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cef2:	891b      	ldrh	r3, [r3, #8]
   2cef4:	220f      	movs	r2, #15
   2cef6:	4013      	ands	r3, r2
   2cef8:	b29b      	uxth	r3, r3
   2cefa:	2b00      	cmp	r3, #0
   2cefc:	d001      	beq.n	2cf02 <chk_mounted+0x2ae>
   2cefe:	230d      	movs	r3, #13
   2cf00:	e17c      	b.n	2d1fc <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf04:	2244      	movs	r2, #68	; 0x44
   2cf06:	5c9b      	ldrb	r3, [r3, r2]
   2cf08:	021b      	lsls	r3, r3, #8
   2cf0a:	b21a      	sxth	r2, r3
   2cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf0e:	2143      	movs	r1, #67	; 0x43
   2cf10:	5c5b      	ldrb	r3, [r3, r1]
   2cf12:	b21b      	sxth	r3, r3
   2cf14:	4313      	orrs	r3, r2
   2cf16:	b21b      	sxth	r3, r3
   2cf18:	b29b      	uxth	r3, r3
   2cf1a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2cf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cf1e:	2b00      	cmp	r3, #0
   2cf20:	d112      	bne.n	2cf48 <chk_mounted+0x2f4>
   2cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf24:	2253      	movs	r2, #83	; 0x53
   2cf26:	5c9b      	ldrb	r3, [r3, r2]
   2cf28:	061a      	lsls	r2, r3, #24
   2cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf2c:	2152      	movs	r1, #82	; 0x52
   2cf2e:	5c5b      	ldrb	r3, [r3, r1]
   2cf30:	041b      	lsls	r3, r3, #16
   2cf32:	4313      	orrs	r3, r2
   2cf34:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf36:	2151      	movs	r1, #81	; 0x51
   2cf38:	5c52      	ldrb	r2, [r2, r1]
   2cf3a:	0212      	lsls	r2, r2, #8
   2cf3c:	4313      	orrs	r3, r2
   2cf3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf40:	2150      	movs	r1, #80	; 0x50
   2cf42:	5c52      	ldrb	r2, [r2, r1]
   2cf44:	4313      	orrs	r3, r2
   2cf46:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf4a:	223f      	movs	r2, #63	; 0x3f
   2cf4c:	5c9b      	ldrb	r3, [r3, r2]
   2cf4e:	021b      	lsls	r3, r3, #8
   2cf50:	b21a      	sxth	r2, r3
   2cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf54:	213e      	movs	r1, #62	; 0x3e
   2cf56:	5c5b      	ldrb	r3, [r3, r1]
   2cf58:	b21b      	sxth	r3, r3
   2cf5a:	4313      	orrs	r3, r2
   2cf5c:	b21a      	sxth	r2, r3
   2cf5e:	231c      	movs	r3, #28
   2cf60:	18fb      	adds	r3, r7, r3
   2cf62:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2cf64:	231c      	movs	r3, #28
   2cf66:	18fb      	adds	r3, r7, r3
   2cf68:	881b      	ldrh	r3, [r3, #0]
   2cf6a:	2b00      	cmp	r3, #0
   2cf6c:	d101      	bne.n	2cf72 <chk_mounted+0x31e>
   2cf6e:	230d      	movs	r3, #13
   2cf70:	e144      	b.n	2d1fc <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2cf72:	231c      	movs	r3, #28
   2cf74:	18fb      	adds	r3, r7, r3
   2cf76:	881a      	ldrh	r2, [r3, #0]
   2cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cf7a:	18d3      	adds	r3, r2, r3
   2cf7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf7e:	8912      	ldrh	r2, [r2, #8]
   2cf80:	0912      	lsrs	r2, r2, #4
   2cf82:	b292      	uxth	r2, r2
   2cf84:	189b      	adds	r3, r3, r2
   2cf86:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2cf88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2cf8a:	69bb      	ldr	r3, [r7, #24]
   2cf8c:	429a      	cmp	r2, r3
   2cf8e:	d201      	bcs.n	2cf94 <chk_mounted+0x340>
   2cf90:	230d      	movs	r3, #13
   2cf92:	e133      	b.n	2d1fc <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2cf94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2cf96:	69bb      	ldr	r3, [r7, #24]
   2cf98:	1ad2      	subs	r2, r2, r3
   2cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf9c:	789b      	ldrb	r3, [r3, #2]
   2cf9e:	0019      	movs	r1, r3
   2cfa0:	4b08      	ldr	r3, [pc, #32]	; (2cfc4 <chk_mounted+0x370>)
   2cfa2:	0010      	movs	r0, r2
   2cfa4:	4798      	blx	r3
   2cfa6:	0003      	movs	r3, r0
   2cfa8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2cfaa:	697b      	ldr	r3, [r7, #20]
   2cfac:	2b00      	cmp	r3, #0
   2cfae:	d10b      	bne.n	2cfc8 <chk_mounted+0x374>
   2cfb0:	230d      	movs	r3, #13
   2cfb2:	e123      	b.n	2d1fc <chk_mounted+0x5a8>
   2cfb4:	20004154 	.word	0x20004154
   2cfb8:	0002adb1 	.word	0x0002adb1
   2cfbc:	0002ad2d 	.word	0x0002ad2d
   2cfc0:	0002cb81 	.word	0x0002cb81
   2cfc4:	00032389 	.word	0x00032389
	fmt = FS_FAT12;
   2cfc8:	2347      	movs	r3, #71	; 0x47
   2cfca:	18fb      	adds	r3, r7, r3
   2cfcc:	2201      	movs	r2, #1
   2cfce:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2cfd0:	697b      	ldr	r3, [r7, #20]
   2cfd2:	4a8c      	ldr	r2, [pc, #560]	; (2d204 <chk_mounted+0x5b0>)
   2cfd4:	4293      	cmp	r3, r2
   2cfd6:	d903      	bls.n	2cfe0 <chk_mounted+0x38c>
   2cfd8:	2347      	movs	r3, #71	; 0x47
   2cfda:	18fb      	adds	r3, r7, r3
   2cfdc:	2202      	movs	r2, #2
   2cfde:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2cfe0:	697b      	ldr	r3, [r7, #20]
   2cfe2:	4a89      	ldr	r2, [pc, #548]	; (2d208 <chk_mounted+0x5b4>)
   2cfe4:	4293      	cmp	r3, r2
   2cfe6:	d903      	bls.n	2cff0 <chk_mounted+0x39c>
   2cfe8:	2347      	movs	r3, #71	; 0x47
   2cfea:	18fb      	adds	r3, r7, r3
   2cfec:	2203      	movs	r2, #3
   2cfee:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2cff0:	697b      	ldr	r3, [r7, #20]
   2cff2:	1c9a      	adds	r2, r3, #2
   2cff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cff6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2cff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cffa:	69bb      	ldr	r3, [r7, #24]
   2cffc:	18d2      	adds	r2, r2, r3
   2cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d000:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d002:	231c      	movs	r3, #28
   2d004:	18fb      	adds	r3, r7, r3
   2d006:	881a      	ldrh	r2, [r3, #0]
   2d008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d00a:	18d2      	adds	r2, r2, r3
   2d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d00e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d010:	2347      	movs	r3, #71	; 0x47
   2d012:	18fb      	adds	r3, r7, r3
   2d014:	781b      	ldrb	r3, [r3, #0]
   2d016:	2b03      	cmp	r3, #3
   2d018:	d11e      	bne.n	2d058 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d01c:	891b      	ldrh	r3, [r3, #8]
   2d01e:	2b00      	cmp	r3, #0
   2d020:	d001      	beq.n	2d026 <chk_mounted+0x3d2>
   2d022:	230d      	movs	r3, #13
   2d024:	e0ea      	b.n	2d1fc <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d028:	225f      	movs	r2, #95	; 0x5f
   2d02a:	5c9b      	ldrb	r3, [r3, r2]
   2d02c:	061a      	lsls	r2, r3, #24
   2d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d030:	215e      	movs	r1, #94	; 0x5e
   2d032:	5c5b      	ldrb	r3, [r3, r1]
   2d034:	041b      	lsls	r3, r3, #16
   2d036:	4313      	orrs	r3, r2
   2d038:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d03a:	215d      	movs	r1, #93	; 0x5d
   2d03c:	5c52      	ldrb	r2, [r2, r1]
   2d03e:	0212      	lsls	r2, r2, #8
   2d040:	4313      	orrs	r3, r2
   2d042:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d044:	215c      	movs	r1, #92	; 0x5c
   2d046:	5c52      	ldrb	r2, [r2, r1]
   2d048:	431a      	orrs	r2, r3
   2d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d04c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d050:	699b      	ldr	r3, [r3, #24]
   2d052:	009b      	lsls	r3, r3, #2
   2d054:	633b      	str	r3, [r7, #48]	; 0x30
   2d056:	e020      	b.n	2d09a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d05a:	891b      	ldrh	r3, [r3, #8]
   2d05c:	2b00      	cmp	r3, #0
   2d05e:	d101      	bne.n	2d064 <chk_mounted+0x410>
   2d060:	230d      	movs	r3, #13
   2d062:	e0cb      	b.n	2d1fc <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d066:	6a1a      	ldr	r2, [r3, #32]
   2d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d06a:	18d2      	adds	r2, r2, r3
   2d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d06e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d070:	2347      	movs	r3, #71	; 0x47
   2d072:	18fb      	adds	r3, r7, r3
   2d074:	781b      	ldrb	r3, [r3, #0]
   2d076:	2b02      	cmp	r3, #2
   2d078:	d103      	bne.n	2d082 <chk_mounted+0x42e>
   2d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d07c:	699b      	ldr	r3, [r3, #24]
   2d07e:	005b      	lsls	r3, r3, #1
   2d080:	e00a      	b.n	2d098 <chk_mounted+0x444>
   2d082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d084:	699a      	ldr	r2, [r3, #24]
   2d086:	0013      	movs	r3, r2
   2d088:	005b      	lsls	r3, r3, #1
   2d08a:	189b      	adds	r3, r3, r2
   2d08c:	085a      	lsrs	r2, r3, #1
   2d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d090:	699b      	ldr	r3, [r3, #24]
   2d092:	2101      	movs	r1, #1
   2d094:	400b      	ands	r3, r1
   2d096:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d098:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d09c:	69da      	ldr	r2, [r3, #28]
   2d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d0a0:	495a      	ldr	r1, [pc, #360]	; (2d20c <chk_mounted+0x5b8>)
   2d0a2:	468c      	mov	ip, r1
   2d0a4:	4463      	add	r3, ip
   2d0a6:	0a5b      	lsrs	r3, r3, #9
   2d0a8:	429a      	cmp	r2, r3
   2d0aa:	d201      	bcs.n	2d0b0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d0ac:	230d      	movs	r3, #13
   2d0ae:	e0a5      	b.n	2d1fc <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0b2:	2201      	movs	r2, #1
   2d0b4:	4252      	negs	r2, r2
   2d0b6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0ba:	2200      	movs	r2, #0
   2d0bc:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d0be:	2347      	movs	r3, #71	; 0x47
   2d0c0:	18fb      	adds	r3, r7, r3
   2d0c2:	781b      	ldrb	r3, [r3, #0]
   2d0c4:	2b03      	cmp	r3, #3
   2d0c6:	d000      	beq.n	2d0ca <chk_mounted+0x476>
   2d0c8:	e082      	b.n	2d1d0 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0cc:	2200      	movs	r2, #0
   2d0ce:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0d2:	2261      	movs	r2, #97	; 0x61
   2d0d4:	5c9b      	ldrb	r3, [r3, r2]
   2d0d6:	021b      	lsls	r3, r3, #8
   2d0d8:	b21a      	sxth	r2, r3
   2d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0dc:	2160      	movs	r1, #96	; 0x60
   2d0de:	5c5b      	ldrb	r3, [r3, r1]
   2d0e0:	b21b      	sxth	r3, r3
   2d0e2:	4313      	orrs	r3, r2
   2d0e4:	b21b      	sxth	r3, r3
   2d0e6:	b29b      	uxth	r3, r3
   2d0e8:	001a      	movs	r2, r3
   2d0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d0ec:	18d2      	adds	r2, r2, r3
   2d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0f0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0f4:	7858      	ldrb	r0, [r3, #1]
   2d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0f8:	3330      	adds	r3, #48	; 0x30
   2d0fa:	0019      	movs	r1, r3
   2d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0fe:	695a      	ldr	r2, [r3, #20]
   2d100:	2301      	movs	r3, #1
   2d102:	4c43      	ldr	r4, [pc, #268]	; (2d210 <chk_mounted+0x5bc>)
   2d104:	47a0      	blx	r4
   2d106:	1e03      	subs	r3, r0, #0
   2d108:	d162      	bne.n	2d1d0 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d10c:	4a41      	ldr	r2, [pc, #260]	; (2d214 <chk_mounted+0x5c0>)
   2d10e:	5c9b      	ldrb	r3, [r3, r2]
   2d110:	021b      	lsls	r3, r3, #8
   2d112:	b21a      	sxth	r2, r3
   2d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d116:	4940      	ldr	r1, [pc, #256]	; (2d218 <chk_mounted+0x5c4>)
   2d118:	5c5b      	ldrb	r3, [r3, r1]
   2d11a:	b21b      	sxth	r3, r3
   2d11c:	4313      	orrs	r3, r2
   2d11e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d120:	4a3e      	ldr	r2, [pc, #248]	; (2d21c <chk_mounted+0x5c8>)
   2d122:	4293      	cmp	r3, r2
   2d124:	d154      	bne.n	2d1d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d128:	2233      	movs	r2, #51	; 0x33
   2d12a:	5c9b      	ldrb	r3, [r3, r2]
   2d12c:	061a      	lsls	r2, r3, #24
   2d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d130:	2132      	movs	r1, #50	; 0x32
   2d132:	5c5b      	ldrb	r3, [r3, r1]
   2d134:	041b      	lsls	r3, r3, #16
   2d136:	4313      	orrs	r3, r2
   2d138:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d13a:	2131      	movs	r1, #49	; 0x31
   2d13c:	5c52      	ldrb	r2, [r2, r1]
   2d13e:	0212      	lsls	r2, r2, #8
   2d140:	4313      	orrs	r3, r2
   2d142:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d144:	2130      	movs	r1, #48	; 0x30
   2d146:	5c52      	ldrb	r2, [r2, r1]
   2d148:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d14a:	4a35      	ldr	r2, [pc, #212]	; (2d220 <chk_mounted+0x5cc>)
   2d14c:	4293      	cmp	r3, r2
   2d14e:	d13f      	bne.n	2d1d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d152:	4a34      	ldr	r2, [pc, #208]	; (2d224 <chk_mounted+0x5d0>)
   2d154:	5c9b      	ldrb	r3, [r3, r2]
   2d156:	061a      	lsls	r2, r3, #24
   2d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d15a:	4933      	ldr	r1, [pc, #204]	; (2d228 <chk_mounted+0x5d4>)
   2d15c:	5c5b      	ldrb	r3, [r3, r1]
   2d15e:	041b      	lsls	r3, r3, #16
   2d160:	4313      	orrs	r3, r2
   2d162:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d164:	4931      	ldr	r1, [pc, #196]	; (2d22c <chk_mounted+0x5d8>)
   2d166:	5c52      	ldrb	r2, [r2, r1]
   2d168:	0212      	lsls	r2, r2, #8
   2d16a:	4313      	orrs	r3, r2
   2d16c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d16e:	2285      	movs	r2, #133	; 0x85
   2d170:	0092      	lsls	r2, r2, #2
   2d172:	5c8a      	ldrb	r2, [r1, r2]
   2d174:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d176:	4a2e      	ldr	r2, [pc, #184]	; (2d230 <chk_mounted+0x5dc>)
   2d178:	4293      	cmp	r3, r2
   2d17a:	d129      	bne.n	2d1d0 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d17e:	4a2d      	ldr	r2, [pc, #180]	; (2d234 <chk_mounted+0x5e0>)
   2d180:	5c9b      	ldrb	r3, [r3, r2]
   2d182:	061a      	lsls	r2, r3, #24
   2d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d186:	492c      	ldr	r1, [pc, #176]	; (2d238 <chk_mounted+0x5e4>)
   2d188:	5c5b      	ldrb	r3, [r3, r1]
   2d18a:	041b      	lsls	r3, r3, #16
   2d18c:	4313      	orrs	r3, r2
   2d18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d190:	492a      	ldr	r1, [pc, #168]	; (2d23c <chk_mounted+0x5e8>)
   2d192:	5c52      	ldrb	r2, [r2, r1]
   2d194:	0212      	lsls	r2, r2, #8
   2d196:	4313      	orrs	r3, r2
   2d198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d19a:	2287      	movs	r2, #135	; 0x87
   2d19c:	0092      	lsls	r2, r2, #2
   2d19e:	5c8a      	ldrb	r2, [r1, r2]
   2d1a0:	431a      	orrs	r2, r3
   2d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1a4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1a8:	4a25      	ldr	r2, [pc, #148]	; (2d240 <chk_mounted+0x5ec>)
   2d1aa:	5c9b      	ldrb	r3, [r3, r2]
   2d1ac:	061a      	lsls	r2, r3, #24
   2d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1b0:	4924      	ldr	r1, [pc, #144]	; (2d244 <chk_mounted+0x5f0>)
   2d1b2:	5c5b      	ldrb	r3, [r3, r1]
   2d1b4:	041b      	lsls	r3, r3, #16
   2d1b6:	4313      	orrs	r3, r2
   2d1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1ba:	4923      	ldr	r1, [pc, #140]	; (2d248 <chk_mounted+0x5f4>)
   2d1bc:	5c52      	ldrb	r2, [r2, r1]
   2d1be:	0212      	lsls	r2, r2, #8
   2d1c0:	4313      	orrs	r3, r2
   2d1c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d1c4:	2286      	movs	r2, #134	; 0x86
   2d1c6:	0092      	lsls	r2, r2, #2
   2d1c8:	5c8a      	ldrb	r2, [r1, r2]
   2d1ca:	431a      	orrs	r2, r3
   2d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ce:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1d2:	2247      	movs	r2, #71	; 0x47
   2d1d4:	18ba      	adds	r2, r7, r2
   2d1d6:	7812      	ldrb	r2, [r2, #0]
   2d1d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d1da:	4b1c      	ldr	r3, [pc, #112]	; (2d24c <chk_mounted+0x5f8>)
   2d1dc:	881b      	ldrh	r3, [r3, #0]
   2d1de:	3301      	adds	r3, #1
   2d1e0:	b29a      	uxth	r2, r3
   2d1e2:	4b1a      	ldr	r3, [pc, #104]	; (2d24c <chk_mounted+0x5f8>)
   2d1e4:	801a      	strh	r2, [r3, #0]
   2d1e6:	4b19      	ldr	r3, [pc, #100]	; (2d24c <chk_mounted+0x5f8>)
   2d1e8:	881a      	ldrh	r2, [r3, #0]
   2d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ec:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1f0:	2200      	movs	r2, #0
   2d1f2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1f6:	2200      	movs	r2, #0
   2d1f8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d1fa:	2300      	movs	r3, #0
}
   2d1fc:	0018      	movs	r0, r3
   2d1fe:	46bd      	mov	sp, r7
   2d200:	b013      	add	sp, #76	; 0x4c
   2d202:	bd90      	pop	{r4, r7, pc}
   2d204:	00000ff5 	.word	0x00000ff5
   2d208:	0000fff5 	.word	0x0000fff5
   2d20c:	000001ff 	.word	0x000001ff
   2d210:	0002ade9 	.word	0x0002ade9
   2d214:	0000022f 	.word	0x0000022f
   2d218:	0000022e 	.word	0x0000022e
   2d21c:	ffffaa55 	.word	0xffffaa55
   2d220:	41615252 	.word	0x41615252
   2d224:	00000217 	.word	0x00000217
   2d228:	00000216 	.word	0x00000216
   2d22c:	00000215 	.word	0x00000215
   2d230:	61417272 	.word	0x61417272
   2d234:	0000021f 	.word	0x0000021f
   2d238:	0000021e 	.word	0x0000021e
   2d23c:	0000021d 	.word	0x0000021d
   2d240:	0000021b 	.word	0x0000021b
   2d244:	0000021a 	.word	0x0000021a
   2d248:	00000219 	.word	0x00000219
   2d24c:	20004174 	.word	0x20004174

0002d250 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d250:	b580      	push	{r7, lr}
   2d252:	b082      	sub	sp, #8
   2d254:	af00      	add	r7, sp, #0
   2d256:	6078      	str	r0, [r7, #4]
   2d258:	000a      	movs	r2, r1
   2d25a:	1cbb      	adds	r3, r7, #2
   2d25c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d25e:	687b      	ldr	r3, [r7, #4]
   2d260:	2b00      	cmp	r3, #0
   2d262:	d009      	beq.n	2d278 <validate+0x28>
   2d264:	687b      	ldr	r3, [r7, #4]
   2d266:	781b      	ldrb	r3, [r3, #0]
   2d268:	2b00      	cmp	r3, #0
   2d26a:	d005      	beq.n	2d278 <validate+0x28>
   2d26c:	687b      	ldr	r3, [r7, #4]
   2d26e:	88db      	ldrh	r3, [r3, #6]
   2d270:	1cba      	adds	r2, r7, #2
   2d272:	8812      	ldrh	r2, [r2, #0]
   2d274:	429a      	cmp	r2, r3
   2d276:	d001      	beq.n	2d27c <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d278:	2309      	movs	r3, #9
   2d27a:	e00c      	b.n	2d296 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d27c:	687b      	ldr	r3, [r7, #4]
   2d27e:	785b      	ldrb	r3, [r3, #1]
   2d280:	0018      	movs	r0, r3
   2d282:	4b07      	ldr	r3, [pc, #28]	; (2d2a0 <validate+0x50>)
   2d284:	4798      	blx	r3
   2d286:	0003      	movs	r3, r0
   2d288:	001a      	movs	r2, r3
   2d28a:	2301      	movs	r3, #1
   2d28c:	4013      	ands	r3, r2
   2d28e:	d001      	beq.n	2d294 <validate+0x44>
		return FR_NOT_READY;
   2d290:	2303      	movs	r3, #3
   2d292:	e000      	b.n	2d296 <validate+0x46>

	return FR_OK;
   2d294:	2300      	movs	r3, #0
}
   2d296:	0018      	movs	r0, r3
   2d298:	46bd      	mov	sp, r7
   2d29a:	b002      	add	sp, #8
   2d29c:	bd80      	pop	{r7, pc}
   2d29e:	46c0      	nop			; (mov r8, r8)
   2d2a0:	0002adb1 	.word	0x0002adb1

0002d2a4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2d2a4:	b580      	push	{r7, lr}
   2d2a6:	b084      	sub	sp, #16
   2d2a8:	af00      	add	r7, sp, #0
   2d2aa:	0002      	movs	r2, r0
   2d2ac:	6039      	str	r1, [r7, #0]
   2d2ae:	1dfb      	adds	r3, r7, #7
   2d2b0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2d2b2:	1dfb      	adds	r3, r7, #7
   2d2b4:	781b      	ldrb	r3, [r3, #0]
   2d2b6:	2b07      	cmp	r3, #7
   2d2b8:	d901      	bls.n	2d2be <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2d2ba:	230b      	movs	r3, #11
   2d2bc:	e018      	b.n	2d2f0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2d2be:	1dfb      	adds	r3, r7, #7
   2d2c0:	781a      	ldrb	r2, [r3, #0]
   2d2c2:	4b0d      	ldr	r3, [pc, #52]	; (2d2f8 <f_mount+0x54>)
   2d2c4:	0092      	lsls	r2, r2, #2
   2d2c6:	58d3      	ldr	r3, [r2, r3]
   2d2c8:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2d2ca:	68fb      	ldr	r3, [r7, #12]
   2d2cc:	2b00      	cmp	r3, #0
   2d2ce:	d002      	beq.n	2d2d6 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2d2d0:	68fb      	ldr	r3, [r7, #12]
   2d2d2:	2200      	movs	r2, #0
   2d2d4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2d2d6:	683b      	ldr	r3, [r7, #0]
   2d2d8:	2b00      	cmp	r3, #0
   2d2da:	d002      	beq.n	2d2e2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2d2dc:	683b      	ldr	r3, [r7, #0]
   2d2de:	2200      	movs	r2, #0
   2d2e0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2d2e2:	1dfb      	adds	r3, r7, #7
   2d2e4:	781a      	ldrb	r2, [r3, #0]
   2d2e6:	4b04      	ldr	r3, [pc, #16]	; (2d2f8 <f_mount+0x54>)
   2d2e8:	0092      	lsls	r2, r2, #2
   2d2ea:	6839      	ldr	r1, [r7, #0]
   2d2ec:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2d2ee:	2300      	movs	r3, #0
}
   2d2f0:	0018      	movs	r0, r3
   2d2f2:	46bd      	mov	sp, r7
   2d2f4:	b004      	add	sp, #16
   2d2f6:	bd80      	pop	{r7, pc}
   2d2f8:	20004154 	.word	0x20004154

0002d2fc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d2fc:	b590      	push	{r4, r7, lr}
   2d2fe:	4ce5      	ldr	r4, [pc, #916]	; (2d694 <f_open+0x398>)
   2d300:	44a5      	add	sp, r4
   2d302:	af00      	add	r7, sp, #0
   2d304:	60f8      	str	r0, [r7, #12]
   2d306:	60b9      	str	r1, [r7, #8]
   2d308:	4be3      	ldr	r3, [pc, #908]	; (2d698 <f_open+0x39c>)
   2d30a:	2194      	movs	r1, #148	; 0x94
   2d30c:	0089      	lsls	r1, r1, #2
   2d30e:	468c      	mov	ip, r1
   2d310:	44bc      	add	ip, r7
   2d312:	4463      	add	r3, ip
   2d314:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d316:	68fb      	ldr	r3, [r7, #12]
   2d318:	2200      	movs	r2, #0
   2d31a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d31c:	4bde      	ldr	r3, [pc, #888]	; (2d698 <f_open+0x39c>)
   2d31e:	2294      	movs	r2, #148	; 0x94
   2d320:	0092      	lsls	r2, r2, #2
   2d322:	4694      	mov	ip, r2
   2d324:	44bc      	add	ip, r7
   2d326:	4463      	add	r3, ip
   2d328:	4adb      	ldr	r2, [pc, #876]	; (2d698 <f_open+0x39c>)
   2d32a:	2194      	movs	r1, #148	; 0x94
   2d32c:	0089      	lsls	r1, r1, #2
   2d32e:	468c      	mov	ip, r1
   2d330:	44bc      	add	ip, r7
   2d332:	4462      	add	r2, ip
   2d334:	7812      	ldrb	r2, [r2, #0]
   2d336:	211f      	movs	r1, #31
   2d338:	400a      	ands	r2, r1
   2d33a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d33c:	4bd6      	ldr	r3, [pc, #856]	; (2d698 <f_open+0x39c>)
   2d33e:	2294      	movs	r2, #148	; 0x94
   2d340:	0092      	lsls	r2, r2, #2
   2d342:	4694      	mov	ip, r2
   2d344:	44bc      	add	ip, r7
   2d346:	4463      	add	r3, ip
   2d348:	781b      	ldrb	r3, [r3, #0]
   2d34a:	2201      	movs	r2, #1
   2d34c:	4393      	bics	r3, r2
   2d34e:	b2da      	uxtb	r2, r3
   2d350:	4bd2      	ldr	r3, [pc, #840]	; (2d69c <f_open+0x3a0>)
   2d352:	18fc      	adds	r4, r7, r3
   2d354:	2387      	movs	r3, #135	; 0x87
   2d356:	009b      	lsls	r3, r3, #2
   2d358:	18f9      	adds	r1, r7, r3
   2d35a:	2308      	movs	r3, #8
   2d35c:	18fb      	adds	r3, r7, r3
   2d35e:	0018      	movs	r0, r3
   2d360:	4bcf      	ldr	r3, [pc, #828]	; (2d6a0 <f_open+0x3a4>)
   2d362:	4798      	blx	r3
   2d364:	0003      	movs	r3, r0
   2d366:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d368:	2387      	movs	r3, #135	; 0x87
   2d36a:	009b      	lsls	r3, r3, #2
   2d36c:	18fb      	adds	r3, r7, r3
   2d36e:	2284      	movs	r2, #132	; 0x84
   2d370:	0092      	lsls	r2, r2, #2
   2d372:	18ba      	adds	r2, r7, r2
   2d374:	619a      	str	r2, [r3, #24]
   2d376:	2387      	movs	r3, #135	; 0x87
   2d378:	009b      	lsls	r3, r3, #2
   2d37a:	18fb      	adds	r3, r7, r3
   2d37c:	2210      	movs	r2, #16
   2d37e:	18ba      	adds	r2, r7, r2
   2d380:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d382:	4bc6      	ldr	r3, [pc, #792]	; (2d69c <f_open+0x3a0>)
   2d384:	18fb      	adds	r3, r7, r3
   2d386:	781b      	ldrb	r3, [r3, #0]
   2d388:	2b00      	cmp	r3, #0
   2d38a:	d10b      	bne.n	2d3a4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d38c:	68ba      	ldr	r2, [r7, #8]
   2d38e:	4bc3      	ldr	r3, [pc, #780]	; (2d69c <f_open+0x3a0>)
   2d390:	18fc      	adds	r4, r7, r3
   2d392:	2387      	movs	r3, #135	; 0x87
   2d394:	009b      	lsls	r3, r3, #2
   2d396:	18fb      	adds	r3, r7, r3
   2d398:	0011      	movs	r1, r2
   2d39a:	0018      	movs	r0, r3
   2d39c:	4bc1      	ldr	r3, [pc, #772]	; (2d6a4 <f_open+0x3a8>)
   2d39e:	4798      	blx	r3
   2d3a0:	0003      	movs	r3, r0
   2d3a2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d3a4:	2387      	movs	r3, #135	; 0x87
   2d3a6:	009b      	lsls	r3, r3, #2
   2d3a8:	18fb      	adds	r3, r7, r3
   2d3aa:	695b      	ldr	r3, [r3, #20]
   2d3ac:	2292      	movs	r2, #146	; 0x92
   2d3ae:	0092      	lsls	r2, r2, #2
   2d3b0:	18ba      	adds	r2, r7, r2
   2d3b2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d3b4:	4bb9      	ldr	r3, [pc, #740]	; (2d69c <f_open+0x3a0>)
   2d3b6:	18fb      	adds	r3, r7, r3
   2d3b8:	781b      	ldrb	r3, [r3, #0]
   2d3ba:	2b00      	cmp	r3, #0
   2d3bc:	d109      	bne.n	2d3d2 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d3be:	2392      	movs	r3, #146	; 0x92
   2d3c0:	009b      	lsls	r3, r3, #2
   2d3c2:	18fb      	adds	r3, r7, r3
   2d3c4:	681b      	ldr	r3, [r3, #0]
   2d3c6:	2b00      	cmp	r3, #0
   2d3c8:	d103      	bne.n	2d3d2 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d3ca:	4bb4      	ldr	r3, [pc, #720]	; (2d69c <f_open+0x3a0>)
   2d3cc:	18fb      	adds	r3, r7, r3
   2d3ce:	2206      	movs	r2, #6
   2d3d0:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d3d2:	4bb1      	ldr	r3, [pc, #708]	; (2d698 <f_open+0x39c>)
   2d3d4:	2294      	movs	r2, #148	; 0x94
   2d3d6:	0092      	lsls	r2, r2, #2
   2d3d8:	4694      	mov	ip, r2
   2d3da:	44bc      	add	ip, r7
   2d3dc:	4463      	add	r3, ip
   2d3de:	781b      	ldrb	r3, [r3, #0]
   2d3e0:	221c      	movs	r2, #28
   2d3e2:	4013      	ands	r3, r2
   2d3e4:	d100      	bne.n	2d3e8 <f_open+0xec>
   2d3e6:	e141      	b.n	2d66c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d3e8:	4bac      	ldr	r3, [pc, #688]	; (2d69c <f_open+0x3a0>)
   2d3ea:	18fb      	adds	r3, r7, r3
   2d3ec:	781b      	ldrb	r3, [r3, #0]
   2d3ee:	2b00      	cmp	r3, #0
   2d3f0:	d027      	beq.n	2d442 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d3f2:	4baa      	ldr	r3, [pc, #680]	; (2d69c <f_open+0x3a0>)
   2d3f4:	18fb      	adds	r3, r7, r3
   2d3f6:	781b      	ldrb	r3, [r3, #0]
   2d3f8:	2b04      	cmp	r3, #4
   2d3fa:	d109      	bne.n	2d410 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d3fc:	4ba7      	ldr	r3, [pc, #668]	; (2d69c <f_open+0x3a0>)
   2d3fe:	18fc      	adds	r4, r7, r3
   2d400:	2387      	movs	r3, #135	; 0x87
   2d402:	009b      	lsls	r3, r3, #2
   2d404:	18fb      	adds	r3, r7, r3
   2d406:	0018      	movs	r0, r3
   2d408:	4ba7      	ldr	r3, [pc, #668]	; (2d6a8 <f_open+0x3ac>)
   2d40a:	4798      	blx	r3
   2d40c:	0003      	movs	r3, r0
   2d40e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d410:	4ba1      	ldr	r3, [pc, #644]	; (2d698 <f_open+0x39c>)
   2d412:	2294      	movs	r2, #148	; 0x94
   2d414:	0092      	lsls	r2, r2, #2
   2d416:	4694      	mov	ip, r2
   2d418:	44bc      	add	ip, r7
   2d41a:	4463      	add	r3, ip
   2d41c:	4a9e      	ldr	r2, [pc, #632]	; (2d698 <f_open+0x39c>)
   2d41e:	2194      	movs	r1, #148	; 0x94
   2d420:	0089      	lsls	r1, r1, #2
   2d422:	468c      	mov	ip, r1
   2d424:	44bc      	add	ip, r7
   2d426:	4462      	add	r2, ip
   2d428:	7812      	ldrb	r2, [r2, #0]
   2d42a:	2108      	movs	r1, #8
   2d42c:	430a      	orrs	r2, r1
   2d42e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d430:	2387      	movs	r3, #135	; 0x87
   2d432:	009b      	lsls	r3, r3, #2
   2d434:	18fb      	adds	r3, r7, r3
   2d436:	695b      	ldr	r3, [r3, #20]
   2d438:	2292      	movs	r2, #146	; 0x92
   2d43a:	0092      	lsls	r2, r2, #2
   2d43c:	18ba      	adds	r2, r7, r2
   2d43e:	6013      	str	r3, [r2, #0]
   2d440:	e01c      	b.n	2d47c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d442:	2392      	movs	r3, #146	; 0x92
   2d444:	009b      	lsls	r3, r3, #2
   2d446:	18fb      	adds	r3, r7, r3
   2d448:	681b      	ldr	r3, [r3, #0]
   2d44a:	330b      	adds	r3, #11
   2d44c:	781b      	ldrb	r3, [r3, #0]
   2d44e:	001a      	movs	r2, r3
   2d450:	2311      	movs	r3, #17
   2d452:	4013      	ands	r3, r2
   2d454:	d004      	beq.n	2d460 <f_open+0x164>
				res = FR_DENIED;
   2d456:	4b91      	ldr	r3, [pc, #580]	; (2d69c <f_open+0x3a0>)
   2d458:	18fb      	adds	r3, r7, r3
   2d45a:	2207      	movs	r2, #7
   2d45c:	701a      	strb	r2, [r3, #0]
   2d45e:	e00d      	b.n	2d47c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d460:	4b8d      	ldr	r3, [pc, #564]	; (2d698 <f_open+0x39c>)
   2d462:	2294      	movs	r2, #148	; 0x94
   2d464:	0092      	lsls	r2, r2, #2
   2d466:	4694      	mov	ip, r2
   2d468:	44bc      	add	ip, r7
   2d46a:	4463      	add	r3, ip
   2d46c:	781b      	ldrb	r3, [r3, #0]
   2d46e:	2204      	movs	r2, #4
   2d470:	4013      	ands	r3, r2
   2d472:	d003      	beq.n	2d47c <f_open+0x180>
					res = FR_EXIST;
   2d474:	4b89      	ldr	r3, [pc, #548]	; (2d69c <f_open+0x3a0>)
   2d476:	18fb      	adds	r3, r7, r3
   2d478:	2208      	movs	r2, #8
   2d47a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d47c:	4b87      	ldr	r3, [pc, #540]	; (2d69c <f_open+0x3a0>)
   2d47e:	18fb      	adds	r3, r7, r3
   2d480:	781b      	ldrb	r3, [r3, #0]
   2d482:	2b00      	cmp	r3, #0
   2d484:	d000      	beq.n	2d488 <f_open+0x18c>
   2d486:	e12f      	b.n	2d6e8 <f_open+0x3ec>
   2d488:	4b83      	ldr	r3, [pc, #524]	; (2d698 <f_open+0x39c>)
   2d48a:	2294      	movs	r2, #148	; 0x94
   2d48c:	0092      	lsls	r2, r2, #2
   2d48e:	4694      	mov	ip, r2
   2d490:	44bc      	add	ip, r7
   2d492:	4463      	add	r3, ip
   2d494:	781b      	ldrb	r3, [r3, #0]
   2d496:	2208      	movs	r2, #8
   2d498:	4013      	ands	r3, r2
   2d49a:	d100      	bne.n	2d49e <f_open+0x1a2>
   2d49c:	e124      	b.n	2d6e8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d49e:	4b83      	ldr	r3, [pc, #524]	; (2d6ac <f_open+0x3b0>)
   2d4a0:	4798      	blx	r3
   2d4a2:	0003      	movs	r3, r0
   2d4a4:	2291      	movs	r2, #145	; 0x91
   2d4a6:	0092      	lsls	r2, r2, #2
   2d4a8:	18ba      	adds	r2, r7, r2
   2d4aa:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d4ac:	2392      	movs	r3, #146	; 0x92
   2d4ae:	009b      	lsls	r3, r3, #2
   2d4b0:	18fb      	adds	r3, r7, r3
   2d4b2:	681b      	ldr	r3, [r3, #0]
   2d4b4:	330e      	adds	r3, #14
   2d4b6:	2291      	movs	r2, #145	; 0x91
   2d4b8:	0092      	lsls	r2, r2, #2
   2d4ba:	18ba      	adds	r2, r7, r2
   2d4bc:	6812      	ldr	r2, [r2, #0]
   2d4be:	b2d2      	uxtb	r2, r2
   2d4c0:	701a      	strb	r2, [r3, #0]
   2d4c2:	2392      	movs	r3, #146	; 0x92
   2d4c4:	009b      	lsls	r3, r3, #2
   2d4c6:	18fb      	adds	r3, r7, r3
   2d4c8:	681b      	ldr	r3, [r3, #0]
   2d4ca:	330f      	adds	r3, #15
   2d4cc:	2291      	movs	r2, #145	; 0x91
   2d4ce:	0092      	lsls	r2, r2, #2
   2d4d0:	18ba      	adds	r2, r7, r2
   2d4d2:	6812      	ldr	r2, [r2, #0]
   2d4d4:	b292      	uxth	r2, r2
   2d4d6:	0a12      	lsrs	r2, r2, #8
   2d4d8:	b292      	uxth	r2, r2
   2d4da:	b2d2      	uxtb	r2, r2
   2d4dc:	701a      	strb	r2, [r3, #0]
   2d4de:	2392      	movs	r3, #146	; 0x92
   2d4e0:	009b      	lsls	r3, r3, #2
   2d4e2:	18fb      	adds	r3, r7, r3
   2d4e4:	681b      	ldr	r3, [r3, #0]
   2d4e6:	3310      	adds	r3, #16
   2d4e8:	2291      	movs	r2, #145	; 0x91
   2d4ea:	0092      	lsls	r2, r2, #2
   2d4ec:	18ba      	adds	r2, r7, r2
   2d4ee:	6812      	ldr	r2, [r2, #0]
   2d4f0:	0c12      	lsrs	r2, r2, #16
   2d4f2:	b2d2      	uxtb	r2, r2
   2d4f4:	701a      	strb	r2, [r3, #0]
   2d4f6:	2392      	movs	r3, #146	; 0x92
   2d4f8:	009b      	lsls	r3, r3, #2
   2d4fa:	18fb      	adds	r3, r7, r3
   2d4fc:	681b      	ldr	r3, [r3, #0]
   2d4fe:	3311      	adds	r3, #17
   2d500:	2291      	movs	r2, #145	; 0x91
   2d502:	0092      	lsls	r2, r2, #2
   2d504:	18ba      	adds	r2, r7, r2
   2d506:	6812      	ldr	r2, [r2, #0]
   2d508:	0e12      	lsrs	r2, r2, #24
   2d50a:	b2d2      	uxtb	r2, r2
   2d50c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d50e:	2392      	movs	r3, #146	; 0x92
   2d510:	009b      	lsls	r3, r3, #2
   2d512:	18fb      	adds	r3, r7, r3
   2d514:	681b      	ldr	r3, [r3, #0]
   2d516:	330b      	adds	r3, #11
   2d518:	2200      	movs	r2, #0
   2d51a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d51c:	2392      	movs	r3, #146	; 0x92
   2d51e:	009b      	lsls	r3, r3, #2
   2d520:	18fb      	adds	r3, r7, r3
   2d522:	681b      	ldr	r3, [r3, #0]
   2d524:	331c      	adds	r3, #28
   2d526:	2200      	movs	r2, #0
   2d528:	701a      	strb	r2, [r3, #0]
   2d52a:	2392      	movs	r3, #146	; 0x92
   2d52c:	009b      	lsls	r3, r3, #2
   2d52e:	18fb      	adds	r3, r7, r3
   2d530:	681b      	ldr	r3, [r3, #0]
   2d532:	331d      	adds	r3, #29
   2d534:	2200      	movs	r2, #0
   2d536:	701a      	strb	r2, [r3, #0]
   2d538:	2392      	movs	r3, #146	; 0x92
   2d53a:	009b      	lsls	r3, r3, #2
   2d53c:	18fb      	adds	r3, r7, r3
   2d53e:	681b      	ldr	r3, [r3, #0]
   2d540:	331e      	adds	r3, #30
   2d542:	2200      	movs	r2, #0
   2d544:	701a      	strb	r2, [r3, #0]
   2d546:	2392      	movs	r3, #146	; 0x92
   2d548:	009b      	lsls	r3, r3, #2
   2d54a:	18fb      	adds	r3, r7, r3
   2d54c:	681b      	ldr	r3, [r3, #0]
   2d54e:	331f      	adds	r3, #31
   2d550:	2200      	movs	r2, #0
   2d552:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2d554:	2392      	movs	r3, #146	; 0x92
   2d556:	009b      	lsls	r3, r3, #2
   2d558:	18fb      	adds	r3, r7, r3
   2d55a:	681b      	ldr	r3, [r3, #0]
   2d55c:	3315      	adds	r3, #21
   2d55e:	781b      	ldrb	r3, [r3, #0]
   2d560:	021b      	lsls	r3, r3, #8
   2d562:	b21a      	sxth	r2, r3
   2d564:	2392      	movs	r3, #146	; 0x92
   2d566:	009b      	lsls	r3, r3, #2
   2d568:	18fb      	adds	r3, r7, r3
   2d56a:	681b      	ldr	r3, [r3, #0]
   2d56c:	3314      	adds	r3, #20
   2d56e:	781b      	ldrb	r3, [r3, #0]
   2d570:	b21b      	sxth	r3, r3
   2d572:	4313      	orrs	r3, r2
   2d574:	b21b      	sxth	r3, r3
   2d576:	b29b      	uxth	r3, r3
   2d578:	041b      	lsls	r3, r3, #16
   2d57a:	2292      	movs	r2, #146	; 0x92
   2d57c:	0092      	lsls	r2, r2, #2
   2d57e:	18ba      	adds	r2, r7, r2
   2d580:	6812      	ldr	r2, [r2, #0]
   2d582:	321b      	adds	r2, #27
   2d584:	7812      	ldrb	r2, [r2, #0]
   2d586:	0212      	lsls	r2, r2, #8
   2d588:	b211      	sxth	r1, r2
   2d58a:	2292      	movs	r2, #146	; 0x92
   2d58c:	0092      	lsls	r2, r2, #2
   2d58e:	18ba      	adds	r2, r7, r2
   2d590:	6812      	ldr	r2, [r2, #0]
   2d592:	321a      	adds	r2, #26
   2d594:	7812      	ldrb	r2, [r2, #0]
   2d596:	b212      	sxth	r2, r2
   2d598:	430a      	orrs	r2, r1
   2d59a:	b212      	sxth	r2, r2
   2d59c:	b292      	uxth	r2, r2
   2d59e:	4313      	orrs	r3, r2
   2d5a0:	2290      	movs	r2, #144	; 0x90
   2d5a2:	0092      	lsls	r2, r2, #2
   2d5a4:	18ba      	adds	r2, r7, r2
   2d5a6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2d5a8:	2392      	movs	r3, #146	; 0x92
   2d5aa:	009b      	lsls	r3, r3, #2
   2d5ac:	18fb      	adds	r3, r7, r3
   2d5ae:	681b      	ldr	r3, [r3, #0]
   2d5b0:	331a      	adds	r3, #26
   2d5b2:	2200      	movs	r2, #0
   2d5b4:	701a      	strb	r2, [r3, #0]
   2d5b6:	2392      	movs	r3, #146	; 0x92
   2d5b8:	009b      	lsls	r3, r3, #2
   2d5ba:	18fb      	adds	r3, r7, r3
   2d5bc:	681b      	ldr	r3, [r3, #0]
   2d5be:	331b      	adds	r3, #27
   2d5c0:	2200      	movs	r2, #0
   2d5c2:	701a      	strb	r2, [r3, #0]
   2d5c4:	2392      	movs	r3, #146	; 0x92
   2d5c6:	009b      	lsls	r3, r3, #2
   2d5c8:	18fb      	adds	r3, r7, r3
   2d5ca:	681b      	ldr	r3, [r3, #0]
   2d5cc:	3314      	adds	r3, #20
   2d5ce:	2200      	movs	r2, #0
   2d5d0:	701a      	strb	r2, [r3, #0]
   2d5d2:	2392      	movs	r3, #146	; 0x92
   2d5d4:	009b      	lsls	r3, r3, #2
   2d5d6:	18fb      	adds	r3, r7, r3
   2d5d8:	681b      	ldr	r3, [r3, #0]
   2d5da:	3315      	adds	r3, #21
   2d5dc:	2200      	movs	r2, #0
   2d5de:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2d5e0:	2387      	movs	r3, #135	; 0x87
   2d5e2:	009b      	lsls	r3, r3, #2
   2d5e4:	18fb      	adds	r3, r7, r3
   2d5e6:	681b      	ldr	r3, [r3, #0]
   2d5e8:	2201      	movs	r2, #1
   2d5ea:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2d5ec:	2390      	movs	r3, #144	; 0x90
   2d5ee:	009b      	lsls	r3, r3, #2
   2d5f0:	18fb      	adds	r3, r7, r3
   2d5f2:	681b      	ldr	r3, [r3, #0]
   2d5f4:	2b00      	cmp	r3, #0
   2d5f6:	d100      	bne.n	2d5fa <f_open+0x2fe>
   2d5f8:	e076      	b.n	2d6e8 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2d5fa:	2387      	movs	r3, #135	; 0x87
   2d5fc:	009b      	lsls	r3, r3, #2
   2d5fe:	18fb      	adds	r3, r7, r3
   2d600:	681b      	ldr	r3, [r3, #0]
   2d602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d604:	2291      	movs	r2, #145	; 0x91
   2d606:	0092      	lsls	r2, r2, #2
   2d608:	18ba      	adds	r2, r7, r2
   2d60a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2d60c:	2387      	movs	r3, #135	; 0x87
   2d60e:	009b      	lsls	r3, r3, #2
   2d610:	18fb      	adds	r3, r7, r3
   2d612:	681b      	ldr	r3, [r3, #0]
   2d614:	4a21      	ldr	r2, [pc, #132]	; (2d69c <f_open+0x3a0>)
   2d616:	18bc      	adds	r4, r7, r2
   2d618:	2290      	movs	r2, #144	; 0x90
   2d61a:	0092      	lsls	r2, r2, #2
   2d61c:	18ba      	adds	r2, r7, r2
   2d61e:	6812      	ldr	r2, [r2, #0]
   2d620:	0011      	movs	r1, r2
   2d622:	0018      	movs	r0, r3
   2d624:	4b22      	ldr	r3, [pc, #136]	; (2d6b0 <f_open+0x3b4>)
   2d626:	4798      	blx	r3
   2d628:	0003      	movs	r3, r0
   2d62a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d62c:	4b1b      	ldr	r3, [pc, #108]	; (2d69c <f_open+0x3a0>)
   2d62e:	18fb      	adds	r3, r7, r3
   2d630:	781b      	ldrb	r3, [r3, #0]
   2d632:	2b00      	cmp	r3, #0
   2d634:	d158      	bne.n	2d6e8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d636:	2387      	movs	r3, #135	; 0x87
   2d638:	009b      	lsls	r3, r3, #2
   2d63a:	18fb      	adds	r3, r7, r3
   2d63c:	681b      	ldr	r3, [r3, #0]
   2d63e:	2290      	movs	r2, #144	; 0x90
   2d640:	0092      	lsls	r2, r2, #2
   2d642:	18ba      	adds	r2, r7, r2
   2d644:	6812      	ldr	r2, [r2, #0]
   2d646:	3a01      	subs	r2, #1
   2d648:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d64a:	2387      	movs	r3, #135	; 0x87
   2d64c:	009b      	lsls	r3, r3, #2
   2d64e:	18fb      	adds	r3, r7, r3
   2d650:	681b      	ldr	r3, [r3, #0]
   2d652:	4a12      	ldr	r2, [pc, #72]	; (2d69c <f_open+0x3a0>)
   2d654:	18bc      	adds	r4, r7, r2
   2d656:	2291      	movs	r2, #145	; 0x91
   2d658:	0092      	lsls	r2, r2, #2
   2d65a:	18ba      	adds	r2, r7, r2
   2d65c:	6812      	ldr	r2, [r2, #0]
   2d65e:	0011      	movs	r1, r2
   2d660:	0018      	movs	r0, r3
   2d662:	4b14      	ldr	r3, [pc, #80]	; (2d6b4 <f_open+0x3b8>)
   2d664:	4798      	blx	r3
   2d666:	0003      	movs	r3, r0
   2d668:	7023      	strb	r3, [r4, #0]
   2d66a:	e03d      	b.n	2d6e8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d66c:	4b0b      	ldr	r3, [pc, #44]	; (2d69c <f_open+0x3a0>)
   2d66e:	18fb      	adds	r3, r7, r3
   2d670:	781b      	ldrb	r3, [r3, #0]
   2d672:	2b00      	cmp	r3, #0
   2d674:	d138      	bne.n	2d6e8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d676:	2392      	movs	r3, #146	; 0x92
   2d678:	009b      	lsls	r3, r3, #2
   2d67a:	18fb      	adds	r3, r7, r3
   2d67c:	681b      	ldr	r3, [r3, #0]
   2d67e:	330b      	adds	r3, #11
   2d680:	781b      	ldrb	r3, [r3, #0]
   2d682:	001a      	movs	r2, r3
   2d684:	2310      	movs	r3, #16
   2d686:	4013      	ands	r3, r2
   2d688:	d016      	beq.n	2d6b8 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d68a:	4b04      	ldr	r3, [pc, #16]	; (2d69c <f_open+0x3a0>)
   2d68c:	18fb      	adds	r3, r7, r3
   2d68e:	2204      	movs	r2, #4
   2d690:	701a      	strb	r2, [r3, #0]
   2d692:	e029      	b.n	2d6e8 <f_open+0x3ec>
   2d694:	fffffdac 	.word	0xfffffdac
   2d698:	fffffdb7 	.word	0xfffffdb7
   2d69c:	0000024f 	.word	0x0000024f
   2d6a0:	0002cc55 	.word	0x0002cc55
   2d6a4:	0002ca49 	.word	0x0002ca49
   2d6a8:	0002c299 	.word	0x0002c299
   2d6ac:	0002b091 	.word	0x0002b091
   2d6b0:	0002b815 	.word	0x0002b815
   2d6b4:	0002b1d5 	.word	0x0002b1d5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d6b8:	4b5a      	ldr	r3, [pc, #360]	; (2d824 <f_open+0x528>)
   2d6ba:	2294      	movs	r2, #148	; 0x94
   2d6bc:	0092      	lsls	r2, r2, #2
   2d6be:	4694      	mov	ip, r2
   2d6c0:	44bc      	add	ip, r7
   2d6c2:	4463      	add	r3, ip
   2d6c4:	781b      	ldrb	r3, [r3, #0]
   2d6c6:	2202      	movs	r2, #2
   2d6c8:	4013      	ands	r3, r2
   2d6ca:	d00d      	beq.n	2d6e8 <f_open+0x3ec>
   2d6cc:	2392      	movs	r3, #146	; 0x92
   2d6ce:	009b      	lsls	r3, r3, #2
   2d6d0:	18fb      	adds	r3, r7, r3
   2d6d2:	681b      	ldr	r3, [r3, #0]
   2d6d4:	330b      	adds	r3, #11
   2d6d6:	781b      	ldrb	r3, [r3, #0]
   2d6d8:	001a      	movs	r2, r3
   2d6da:	2301      	movs	r3, #1
   2d6dc:	4013      	ands	r3, r2
   2d6de:	d003      	beq.n	2d6e8 <f_open+0x3ec>
					res = FR_DENIED;
   2d6e0:	4b51      	ldr	r3, [pc, #324]	; (2d828 <f_open+0x52c>)
   2d6e2:	18fb      	adds	r3, r7, r3
   2d6e4:	2207      	movs	r2, #7
   2d6e6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2d6e8:	4b4f      	ldr	r3, [pc, #316]	; (2d828 <f_open+0x52c>)
   2d6ea:	18fb      	adds	r3, r7, r3
   2d6ec:	781b      	ldrb	r3, [r3, #0]
   2d6ee:	2b00      	cmp	r3, #0
   2d6f0:	d126      	bne.n	2d740 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2d6f2:	4b4c      	ldr	r3, [pc, #304]	; (2d824 <f_open+0x528>)
   2d6f4:	2294      	movs	r2, #148	; 0x94
   2d6f6:	0092      	lsls	r2, r2, #2
   2d6f8:	4694      	mov	ip, r2
   2d6fa:	44bc      	add	ip, r7
   2d6fc:	4463      	add	r3, ip
   2d6fe:	781b      	ldrb	r3, [r3, #0]
   2d700:	2208      	movs	r2, #8
   2d702:	4013      	ands	r3, r2
   2d704:	d00f      	beq.n	2d726 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2d706:	4b47      	ldr	r3, [pc, #284]	; (2d824 <f_open+0x528>)
   2d708:	2294      	movs	r2, #148	; 0x94
   2d70a:	0092      	lsls	r2, r2, #2
   2d70c:	4694      	mov	ip, r2
   2d70e:	44bc      	add	ip, r7
   2d710:	4463      	add	r3, ip
   2d712:	4a44      	ldr	r2, [pc, #272]	; (2d824 <f_open+0x528>)
   2d714:	2194      	movs	r1, #148	; 0x94
   2d716:	0089      	lsls	r1, r1, #2
   2d718:	468c      	mov	ip, r1
   2d71a:	44bc      	add	ip, r7
   2d71c:	4462      	add	r2, ip
   2d71e:	7812      	ldrb	r2, [r2, #0]
   2d720:	2120      	movs	r1, #32
   2d722:	430a      	orrs	r2, r1
   2d724:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2d726:	2387      	movs	r3, #135	; 0x87
   2d728:	009b      	lsls	r3, r3, #2
   2d72a:	18fb      	adds	r3, r7, r3
   2d72c:	681b      	ldr	r3, [r3, #0]
   2d72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d730:	68fb      	ldr	r3, [r7, #12]
   2d732:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2d734:	68fb      	ldr	r3, [r7, #12]
   2d736:	2292      	movs	r2, #146	; 0x92
   2d738:	0092      	lsls	r2, r2, #2
   2d73a:	18ba      	adds	r2, r7, r2
   2d73c:	6812      	ldr	r2, [r2, #0]
   2d73e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2d740:	4b39      	ldr	r3, [pc, #228]	; (2d828 <f_open+0x52c>)
   2d742:	18fb      	adds	r3, r7, r3
   2d744:	781b      	ldrb	r3, [r3, #0]
   2d746:	2b00      	cmp	r3, #0
   2d748:	d163      	bne.n	2d812 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2d74a:	68fb      	ldr	r3, [r7, #12]
   2d74c:	4a35      	ldr	r2, [pc, #212]	; (2d824 <f_open+0x528>)
   2d74e:	2194      	movs	r1, #148	; 0x94
   2d750:	0089      	lsls	r1, r1, #2
   2d752:	468c      	mov	ip, r1
   2d754:	44bc      	add	ip, r7
   2d756:	4462      	add	r2, ip
   2d758:	7812      	ldrb	r2, [r2, #0]
   2d75a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2d75c:	2392      	movs	r3, #146	; 0x92
   2d75e:	009b      	lsls	r3, r3, #2
   2d760:	18fb      	adds	r3, r7, r3
   2d762:	681b      	ldr	r3, [r3, #0]
   2d764:	3315      	adds	r3, #21
   2d766:	781b      	ldrb	r3, [r3, #0]
   2d768:	021b      	lsls	r3, r3, #8
   2d76a:	b21a      	sxth	r2, r3
   2d76c:	2392      	movs	r3, #146	; 0x92
   2d76e:	009b      	lsls	r3, r3, #2
   2d770:	18fb      	adds	r3, r7, r3
   2d772:	681b      	ldr	r3, [r3, #0]
   2d774:	3314      	adds	r3, #20
   2d776:	781b      	ldrb	r3, [r3, #0]
   2d778:	b21b      	sxth	r3, r3
   2d77a:	4313      	orrs	r3, r2
   2d77c:	b21b      	sxth	r3, r3
   2d77e:	b29b      	uxth	r3, r3
   2d780:	041b      	lsls	r3, r3, #16
   2d782:	2292      	movs	r2, #146	; 0x92
   2d784:	0092      	lsls	r2, r2, #2
   2d786:	18ba      	adds	r2, r7, r2
   2d788:	6812      	ldr	r2, [r2, #0]
   2d78a:	321b      	adds	r2, #27
   2d78c:	7812      	ldrb	r2, [r2, #0]
   2d78e:	0212      	lsls	r2, r2, #8
   2d790:	b211      	sxth	r1, r2
   2d792:	2292      	movs	r2, #146	; 0x92
   2d794:	0092      	lsls	r2, r2, #2
   2d796:	18ba      	adds	r2, r7, r2
   2d798:	6812      	ldr	r2, [r2, #0]
   2d79a:	321a      	adds	r2, #26
   2d79c:	7812      	ldrb	r2, [r2, #0]
   2d79e:	b212      	sxth	r2, r2
   2d7a0:	430a      	orrs	r2, r1
   2d7a2:	b212      	sxth	r2, r2
   2d7a4:	b292      	uxth	r2, r2
   2d7a6:	431a      	orrs	r2, r3
   2d7a8:	68fb      	ldr	r3, [r7, #12]
   2d7aa:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2d7ac:	2392      	movs	r3, #146	; 0x92
   2d7ae:	009b      	lsls	r3, r3, #2
   2d7b0:	18fb      	adds	r3, r7, r3
   2d7b2:	681b      	ldr	r3, [r3, #0]
   2d7b4:	331f      	adds	r3, #31
   2d7b6:	781b      	ldrb	r3, [r3, #0]
   2d7b8:	061a      	lsls	r2, r3, #24
   2d7ba:	2392      	movs	r3, #146	; 0x92
   2d7bc:	009b      	lsls	r3, r3, #2
   2d7be:	18fb      	adds	r3, r7, r3
   2d7c0:	681b      	ldr	r3, [r3, #0]
   2d7c2:	331e      	adds	r3, #30
   2d7c4:	781b      	ldrb	r3, [r3, #0]
   2d7c6:	041b      	lsls	r3, r3, #16
   2d7c8:	4313      	orrs	r3, r2
   2d7ca:	2292      	movs	r2, #146	; 0x92
   2d7cc:	0092      	lsls	r2, r2, #2
   2d7ce:	18ba      	adds	r2, r7, r2
   2d7d0:	6812      	ldr	r2, [r2, #0]
   2d7d2:	321d      	adds	r2, #29
   2d7d4:	7812      	ldrb	r2, [r2, #0]
   2d7d6:	0212      	lsls	r2, r2, #8
   2d7d8:	4313      	orrs	r3, r2
   2d7da:	2292      	movs	r2, #146	; 0x92
   2d7dc:	0092      	lsls	r2, r2, #2
   2d7de:	18ba      	adds	r2, r7, r2
   2d7e0:	6812      	ldr	r2, [r2, #0]
   2d7e2:	321c      	adds	r2, #28
   2d7e4:	7812      	ldrb	r2, [r2, #0]
   2d7e6:	431a      	orrs	r2, r3
   2d7e8:	68fb      	ldr	r3, [r7, #12]
   2d7ea:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d7ec:	68fb      	ldr	r3, [r7, #12]
   2d7ee:	2200      	movs	r2, #0
   2d7f0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d7f2:	68fb      	ldr	r3, [r7, #12]
   2d7f4:	2200      	movs	r2, #0
   2d7f6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d7f8:	2387      	movs	r3, #135	; 0x87
   2d7fa:	009b      	lsls	r3, r3, #2
   2d7fc:	18fb      	adds	r3, r7, r3
   2d7fe:	681a      	ldr	r2, [r3, #0]
   2d800:	68fb      	ldr	r3, [r7, #12]
   2d802:	601a      	str	r2, [r3, #0]
   2d804:	2387      	movs	r3, #135	; 0x87
   2d806:	009b      	lsls	r3, r3, #2
   2d808:	18fb      	adds	r3, r7, r3
   2d80a:	681b      	ldr	r3, [r3, #0]
   2d80c:	88da      	ldrh	r2, [r3, #6]
   2d80e:	68fb      	ldr	r3, [r7, #12]
   2d810:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d812:	4b05      	ldr	r3, [pc, #20]	; (2d828 <f_open+0x52c>)
   2d814:	18fb      	adds	r3, r7, r3
   2d816:	781b      	ldrb	r3, [r3, #0]
}
   2d818:	0018      	movs	r0, r3
   2d81a:	46bd      	mov	sp, r7
   2d81c:	2395      	movs	r3, #149	; 0x95
   2d81e:	009b      	lsls	r3, r3, #2
   2d820:	449d      	add	sp, r3
   2d822:	bd90      	pop	{r4, r7, pc}
   2d824:	fffffdb7 	.word	0xfffffdb7
   2d828:	0000024f 	.word	0x0000024f

0002d82c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d82c:	b590      	push	{r4, r7, lr}
   2d82e:	b08b      	sub	sp, #44	; 0x2c
   2d830:	af00      	add	r7, sp, #0
   2d832:	60f8      	str	r0, [r7, #12]
   2d834:	60b9      	str	r1, [r7, #8]
   2d836:	607a      	str	r2, [r7, #4]
   2d838:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d83a:	68bb      	ldr	r3, [r7, #8]
   2d83c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d83e:	683b      	ldr	r3, [r7, #0]
   2d840:	2200      	movs	r2, #0
   2d842:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d844:	68fb      	ldr	r3, [r7, #12]
   2d846:	681a      	ldr	r2, [r3, #0]
   2d848:	68fb      	ldr	r3, [r7, #12]
   2d84a:	889b      	ldrh	r3, [r3, #4]
   2d84c:	2117      	movs	r1, #23
   2d84e:	187c      	adds	r4, r7, r1
   2d850:	0019      	movs	r1, r3
   2d852:	0010      	movs	r0, r2
   2d854:	4bc3      	ldr	r3, [pc, #780]	; (2db64 <f_write+0x338>)
   2d856:	4798      	blx	r3
   2d858:	0003      	movs	r3, r0
   2d85a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d85c:	2317      	movs	r3, #23
   2d85e:	18fb      	adds	r3, r7, r3
   2d860:	781b      	ldrb	r3, [r3, #0]
   2d862:	2b00      	cmp	r3, #0
   2d864:	d003      	beq.n	2d86e <f_write+0x42>
   2d866:	2317      	movs	r3, #23
   2d868:	18fb      	adds	r3, r7, r3
   2d86a:	781b      	ldrb	r3, [r3, #0]
   2d86c:	e176      	b.n	2db5c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d86e:	68fb      	ldr	r3, [r7, #12]
   2d870:	799b      	ldrb	r3, [r3, #6]
   2d872:	b25b      	sxtb	r3, r3
   2d874:	2b00      	cmp	r3, #0
   2d876:	da01      	bge.n	2d87c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d878:	2302      	movs	r3, #2
   2d87a:	e16f      	b.n	2db5c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d87c:	68fb      	ldr	r3, [r7, #12]
   2d87e:	799b      	ldrb	r3, [r3, #6]
   2d880:	001a      	movs	r2, r3
   2d882:	2302      	movs	r3, #2
   2d884:	4013      	ands	r3, r2
   2d886:	d101      	bne.n	2d88c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d888:	2307      	movs	r3, #7
   2d88a:	e167      	b.n	2db5c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d88c:	68fb      	ldr	r3, [r7, #12]
   2d88e:	68da      	ldr	r2, [r3, #12]
   2d890:	687b      	ldr	r3, [r7, #4]
   2d892:	18d2      	adds	r2, r2, r3
   2d894:	68fb      	ldr	r3, [r7, #12]
   2d896:	68db      	ldr	r3, [r3, #12]
   2d898:	429a      	cmp	r2, r3
   2d89a:	d300      	bcc.n	2d89e <f_write+0x72>
   2d89c:	e146      	b.n	2db2c <f_write+0x300>
   2d89e:	2300      	movs	r3, #0
   2d8a0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d8a2:	e143      	b.n	2db2c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d8a4:	68fb      	ldr	r3, [r7, #12]
   2d8a6:	689b      	ldr	r3, [r3, #8]
   2d8a8:	05db      	lsls	r3, r3, #23
   2d8aa:	0ddb      	lsrs	r3, r3, #23
   2d8ac:	d000      	beq.n	2d8b0 <f_write+0x84>
   2d8ae:	e0f6      	b.n	2da9e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d8b0:	68fb      	ldr	r3, [r7, #12]
   2d8b2:	689b      	ldr	r3, [r3, #8]
   2d8b4:	0a5b      	lsrs	r3, r3, #9
   2d8b6:	b2da      	uxtb	r2, r3
   2d8b8:	68fb      	ldr	r3, [r7, #12]
   2d8ba:	681b      	ldr	r3, [r3, #0]
   2d8bc:	789b      	ldrb	r3, [r3, #2]
   2d8be:	3b01      	subs	r3, #1
   2d8c0:	b2d9      	uxtb	r1, r3
   2d8c2:	2316      	movs	r3, #22
   2d8c4:	18fb      	adds	r3, r7, r3
   2d8c6:	400a      	ands	r2, r1
   2d8c8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d8ca:	2316      	movs	r3, #22
   2d8cc:	18fb      	adds	r3, r7, r3
   2d8ce:	781b      	ldrb	r3, [r3, #0]
   2d8d0:	2b00      	cmp	r3, #0
   2d8d2:	d140      	bne.n	2d956 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d8d4:	68fb      	ldr	r3, [r7, #12]
   2d8d6:	689b      	ldr	r3, [r3, #8]
   2d8d8:	2b00      	cmp	r3, #0
   2d8da:	d111      	bne.n	2d900 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d8dc:	68fb      	ldr	r3, [r7, #12]
   2d8de:	691b      	ldr	r3, [r3, #16]
   2d8e0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d8e4:	2b00      	cmp	r3, #0
   2d8e6:	d115      	bne.n	2d914 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d8e8:	68fb      	ldr	r3, [r7, #12]
   2d8ea:	681b      	ldr	r3, [r3, #0]
   2d8ec:	2100      	movs	r1, #0
   2d8ee:	0018      	movs	r0, r3
   2d8f0:	4b9d      	ldr	r3, [pc, #628]	; (2db68 <f_write+0x33c>)
   2d8f2:	4798      	blx	r3
   2d8f4:	0003      	movs	r3, r0
   2d8f6:	627b      	str	r3, [r7, #36]	; 0x24
   2d8f8:	68fb      	ldr	r3, [r7, #12]
   2d8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d8fc:	611a      	str	r2, [r3, #16]
   2d8fe:	e009      	b.n	2d914 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d900:	68fb      	ldr	r3, [r7, #12]
   2d902:	681a      	ldr	r2, [r3, #0]
   2d904:	68fb      	ldr	r3, [r7, #12]
   2d906:	695b      	ldr	r3, [r3, #20]
   2d908:	0019      	movs	r1, r3
   2d90a:	0010      	movs	r0, r2
   2d90c:	4b96      	ldr	r3, [pc, #600]	; (2db68 <f_write+0x33c>)
   2d90e:	4798      	blx	r3
   2d910:	0003      	movs	r3, r0
   2d912:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d916:	2b00      	cmp	r3, #0
   2d918:	d100      	bne.n	2d91c <f_write+0xf0>
   2d91a:	e10c      	b.n	2db36 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d91e:	2b01      	cmp	r3, #1
   2d920:	d109      	bne.n	2d936 <f_write+0x10a>
   2d922:	68fb      	ldr	r3, [r7, #12]
   2d924:	799b      	ldrb	r3, [r3, #6]
   2d926:	2280      	movs	r2, #128	; 0x80
   2d928:	4252      	negs	r2, r2
   2d92a:	4313      	orrs	r3, r2
   2d92c:	b2da      	uxtb	r2, r3
   2d92e:	68fb      	ldr	r3, [r7, #12]
   2d930:	719a      	strb	r2, [r3, #6]
   2d932:	2302      	movs	r3, #2
   2d934:	e112      	b.n	2db5c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d938:	3301      	adds	r3, #1
   2d93a:	d109      	bne.n	2d950 <f_write+0x124>
   2d93c:	68fb      	ldr	r3, [r7, #12]
   2d93e:	799b      	ldrb	r3, [r3, #6]
   2d940:	2280      	movs	r2, #128	; 0x80
   2d942:	4252      	negs	r2, r2
   2d944:	4313      	orrs	r3, r2
   2d946:	b2da      	uxtb	r2, r3
   2d948:	68fb      	ldr	r3, [r7, #12]
   2d94a:	719a      	strb	r2, [r3, #6]
   2d94c:	2301      	movs	r3, #1
   2d94e:	e105      	b.n	2db5c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d950:	68fb      	ldr	r3, [r7, #12]
   2d952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d954:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d956:	68fb      	ldr	r3, [r7, #12]
   2d958:	681b      	ldr	r3, [r3, #0]
   2d95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d95c:	68fb      	ldr	r3, [r7, #12]
   2d95e:	699b      	ldr	r3, [r3, #24]
   2d960:	429a      	cmp	r2, r3
   2d962:	d111      	bne.n	2d988 <f_write+0x15c>
   2d964:	68fb      	ldr	r3, [r7, #12]
   2d966:	681b      	ldr	r3, [r3, #0]
   2d968:	2100      	movs	r1, #0
   2d96a:	0018      	movs	r0, r3
   2d96c:	4b7f      	ldr	r3, [pc, #508]	; (2db6c <f_write+0x340>)
   2d96e:	4798      	blx	r3
   2d970:	1e03      	subs	r3, r0, #0
   2d972:	d009      	beq.n	2d988 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d974:	68fb      	ldr	r3, [r7, #12]
   2d976:	799b      	ldrb	r3, [r3, #6]
   2d978:	2280      	movs	r2, #128	; 0x80
   2d97a:	4252      	negs	r2, r2
   2d97c:	4313      	orrs	r3, r2
   2d97e:	b2da      	uxtb	r2, r3
   2d980:	68fb      	ldr	r3, [r7, #12]
   2d982:	719a      	strb	r2, [r3, #6]
   2d984:	2301      	movs	r3, #1
   2d986:	e0e9      	b.n	2db5c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d988:	68fb      	ldr	r3, [r7, #12]
   2d98a:	681a      	ldr	r2, [r3, #0]
   2d98c:	68fb      	ldr	r3, [r7, #12]
   2d98e:	695b      	ldr	r3, [r3, #20]
   2d990:	0019      	movs	r1, r3
   2d992:	0010      	movs	r0, r2
   2d994:	4b76      	ldr	r3, [pc, #472]	; (2db70 <f_write+0x344>)
   2d996:	4798      	blx	r3
   2d998:	0003      	movs	r3, r0
   2d99a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d99c:	693b      	ldr	r3, [r7, #16]
   2d99e:	2b00      	cmp	r3, #0
   2d9a0:	d109      	bne.n	2d9b6 <f_write+0x18a>
   2d9a2:	68fb      	ldr	r3, [r7, #12]
   2d9a4:	799b      	ldrb	r3, [r3, #6]
   2d9a6:	2280      	movs	r2, #128	; 0x80
   2d9a8:	4252      	negs	r2, r2
   2d9aa:	4313      	orrs	r3, r2
   2d9ac:	b2da      	uxtb	r2, r3
   2d9ae:	68fb      	ldr	r3, [r7, #12]
   2d9b0:	719a      	strb	r2, [r3, #6]
   2d9b2:	2302      	movs	r3, #2
   2d9b4:	e0d2      	b.n	2db5c <f_write+0x330>
			sect += csect;
   2d9b6:	2316      	movs	r3, #22
   2d9b8:	18fb      	adds	r3, r7, r3
   2d9ba:	781b      	ldrb	r3, [r3, #0]
   2d9bc:	693a      	ldr	r2, [r7, #16]
   2d9be:	18d3      	adds	r3, r2, r3
   2d9c0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d9c2:	687b      	ldr	r3, [r7, #4]
   2d9c4:	0a5b      	lsrs	r3, r3, #9
   2d9c6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d9c8:	69fb      	ldr	r3, [r7, #28]
   2d9ca:	2b00      	cmp	r3, #0
   2d9cc:	d048      	beq.n	2da60 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d9ce:	2316      	movs	r3, #22
   2d9d0:	18fb      	adds	r3, r7, r3
   2d9d2:	781a      	ldrb	r2, [r3, #0]
   2d9d4:	69fb      	ldr	r3, [r7, #28]
   2d9d6:	18d2      	adds	r2, r2, r3
   2d9d8:	68fb      	ldr	r3, [r7, #12]
   2d9da:	681b      	ldr	r3, [r3, #0]
   2d9dc:	789b      	ldrb	r3, [r3, #2]
   2d9de:	429a      	cmp	r2, r3
   2d9e0:	d908      	bls.n	2d9f4 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d9e2:	68fb      	ldr	r3, [r7, #12]
   2d9e4:	681b      	ldr	r3, [r3, #0]
   2d9e6:	789b      	ldrb	r3, [r3, #2]
   2d9e8:	001a      	movs	r2, r3
   2d9ea:	2316      	movs	r3, #22
   2d9ec:	18fb      	adds	r3, r7, r3
   2d9ee:	781b      	ldrb	r3, [r3, #0]
   2d9f0:	1ad3      	subs	r3, r2, r3
   2d9f2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d9f4:	68fb      	ldr	r3, [r7, #12]
   2d9f6:	681b      	ldr	r3, [r3, #0]
   2d9f8:	7858      	ldrb	r0, [r3, #1]
   2d9fa:	69fb      	ldr	r3, [r7, #28]
   2d9fc:	b2db      	uxtb	r3, r3
   2d9fe:	693a      	ldr	r2, [r7, #16]
   2da00:	69b9      	ldr	r1, [r7, #24]
   2da02:	4c5c      	ldr	r4, [pc, #368]	; (2db74 <f_write+0x348>)
   2da04:	47a0      	blx	r4
   2da06:	1e03      	subs	r3, r0, #0
   2da08:	d009      	beq.n	2da1e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2da0a:	68fb      	ldr	r3, [r7, #12]
   2da0c:	799b      	ldrb	r3, [r3, #6]
   2da0e:	2280      	movs	r2, #128	; 0x80
   2da10:	4252      	negs	r2, r2
   2da12:	4313      	orrs	r3, r2
   2da14:	b2da      	uxtb	r2, r3
   2da16:	68fb      	ldr	r3, [r7, #12]
   2da18:	719a      	strb	r2, [r3, #6]
   2da1a:	2301      	movs	r3, #1
   2da1c:	e09e      	b.n	2db5c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2da1e:	68fb      	ldr	r3, [r7, #12]
   2da20:	681b      	ldr	r3, [r3, #0]
   2da22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2da24:	693b      	ldr	r3, [r7, #16]
   2da26:	1ad2      	subs	r2, r2, r3
   2da28:	69fb      	ldr	r3, [r7, #28]
   2da2a:	429a      	cmp	r2, r3
   2da2c:	d214      	bcs.n	2da58 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2da2e:	68fb      	ldr	r3, [r7, #12]
   2da30:	681b      	ldr	r3, [r3, #0]
   2da32:	3330      	adds	r3, #48	; 0x30
   2da34:	0018      	movs	r0, r3
   2da36:	68fb      	ldr	r3, [r7, #12]
   2da38:	681b      	ldr	r3, [r3, #0]
   2da3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2da3c:	693b      	ldr	r3, [r7, #16]
   2da3e:	1ad3      	subs	r3, r2, r3
   2da40:	025b      	lsls	r3, r3, #9
   2da42:	69ba      	ldr	r2, [r7, #24]
   2da44:	18d1      	adds	r1, r2, r3
   2da46:	2380      	movs	r3, #128	; 0x80
   2da48:	009b      	lsls	r3, r3, #2
   2da4a:	001a      	movs	r2, r3
   2da4c:	4b4a      	ldr	r3, [pc, #296]	; (2db78 <f_write+0x34c>)
   2da4e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2da50:	68fb      	ldr	r3, [r7, #12]
   2da52:	681b      	ldr	r3, [r3, #0]
   2da54:	2200      	movs	r2, #0
   2da56:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2da58:	69fb      	ldr	r3, [r7, #28]
   2da5a:	025b      	lsls	r3, r3, #9
   2da5c:	623b      	str	r3, [r7, #32]
				continue;
   2da5e:	e051      	b.n	2db04 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2da60:	68fb      	ldr	r3, [r7, #12]
   2da62:	689a      	ldr	r2, [r3, #8]
   2da64:	68fb      	ldr	r3, [r7, #12]
   2da66:	68db      	ldr	r3, [r3, #12]
   2da68:	429a      	cmp	r2, r3
   2da6a:	d315      	bcc.n	2da98 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2da6c:	68fb      	ldr	r3, [r7, #12]
   2da6e:	681b      	ldr	r3, [r3, #0]
   2da70:	2100      	movs	r1, #0
   2da72:	0018      	movs	r0, r3
   2da74:	4b3d      	ldr	r3, [pc, #244]	; (2db6c <f_write+0x340>)
   2da76:	4798      	blx	r3
   2da78:	1e03      	subs	r3, r0, #0
   2da7a:	d009      	beq.n	2da90 <f_write+0x264>
   2da7c:	68fb      	ldr	r3, [r7, #12]
   2da7e:	799b      	ldrb	r3, [r3, #6]
   2da80:	2280      	movs	r2, #128	; 0x80
   2da82:	4252      	negs	r2, r2
   2da84:	4313      	orrs	r3, r2
   2da86:	b2da      	uxtb	r2, r3
   2da88:	68fb      	ldr	r3, [r7, #12]
   2da8a:	719a      	strb	r2, [r3, #6]
   2da8c:	2301      	movs	r3, #1
   2da8e:	e065      	b.n	2db5c <f_write+0x330>
				fp->fs->winsect = sect;
   2da90:	68fb      	ldr	r3, [r7, #12]
   2da92:	681b      	ldr	r3, [r3, #0]
   2da94:	693a      	ldr	r2, [r7, #16]
   2da96:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2da98:	68fb      	ldr	r3, [r7, #12]
   2da9a:	693a      	ldr	r2, [r7, #16]
   2da9c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2da9e:	68fb      	ldr	r3, [r7, #12]
   2daa0:	689b      	ldr	r3, [r3, #8]
   2daa2:	05db      	lsls	r3, r3, #23
   2daa4:	0ddb      	lsrs	r3, r3, #23
   2daa6:	2280      	movs	r2, #128	; 0x80
   2daa8:	0092      	lsls	r2, r2, #2
   2daaa:	1ad3      	subs	r3, r2, r3
   2daac:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2daae:	6a3a      	ldr	r2, [r7, #32]
   2dab0:	687b      	ldr	r3, [r7, #4]
   2dab2:	429a      	cmp	r2, r3
   2dab4:	d901      	bls.n	2daba <f_write+0x28e>
   2dab6:	687b      	ldr	r3, [r7, #4]
   2dab8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2daba:	68fb      	ldr	r3, [r7, #12]
   2dabc:	681a      	ldr	r2, [r3, #0]
   2dabe:	68fb      	ldr	r3, [r7, #12]
   2dac0:	699b      	ldr	r3, [r3, #24]
   2dac2:	0019      	movs	r1, r3
   2dac4:	0010      	movs	r0, r2
   2dac6:	4b29      	ldr	r3, [pc, #164]	; (2db6c <f_write+0x340>)
   2dac8:	4798      	blx	r3
   2daca:	1e03      	subs	r3, r0, #0
   2dacc:	d009      	beq.n	2dae2 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2dace:	68fb      	ldr	r3, [r7, #12]
   2dad0:	799b      	ldrb	r3, [r3, #6]
   2dad2:	2280      	movs	r2, #128	; 0x80
   2dad4:	4252      	negs	r2, r2
   2dad6:	4313      	orrs	r3, r2
   2dad8:	b2da      	uxtb	r2, r3
   2dada:	68fb      	ldr	r3, [r7, #12]
   2dadc:	719a      	strb	r2, [r3, #6]
   2dade:	2301      	movs	r3, #1
   2dae0:	e03c      	b.n	2db5c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2dae2:	68fb      	ldr	r3, [r7, #12]
   2dae4:	681a      	ldr	r2, [r3, #0]
   2dae6:	68fb      	ldr	r3, [r7, #12]
   2dae8:	689b      	ldr	r3, [r3, #8]
   2daea:	05db      	lsls	r3, r3, #23
   2daec:	0ddb      	lsrs	r3, r3, #23
   2daee:	3330      	adds	r3, #48	; 0x30
   2daf0:	18d3      	adds	r3, r2, r3
   2daf2:	6a3a      	ldr	r2, [r7, #32]
   2daf4:	69b9      	ldr	r1, [r7, #24]
   2daf6:	0018      	movs	r0, r3
   2daf8:	4b1f      	ldr	r3, [pc, #124]	; (2db78 <f_write+0x34c>)
   2dafa:	4798      	blx	r3
		fp->fs->wflag = 1;
   2dafc:	68fb      	ldr	r3, [r7, #12]
   2dafe:	681b      	ldr	r3, [r3, #0]
   2db00:	2201      	movs	r2, #1
   2db02:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2db04:	69ba      	ldr	r2, [r7, #24]
   2db06:	6a3b      	ldr	r3, [r7, #32]
   2db08:	18d3      	adds	r3, r2, r3
   2db0a:	61bb      	str	r3, [r7, #24]
   2db0c:	68fb      	ldr	r3, [r7, #12]
   2db0e:	689a      	ldr	r2, [r3, #8]
   2db10:	6a3b      	ldr	r3, [r7, #32]
   2db12:	18d2      	adds	r2, r2, r3
   2db14:	68fb      	ldr	r3, [r7, #12]
   2db16:	609a      	str	r2, [r3, #8]
   2db18:	683b      	ldr	r3, [r7, #0]
   2db1a:	681a      	ldr	r2, [r3, #0]
   2db1c:	6a3b      	ldr	r3, [r7, #32]
   2db1e:	18d2      	adds	r2, r2, r3
   2db20:	683b      	ldr	r3, [r7, #0]
   2db22:	601a      	str	r2, [r3, #0]
   2db24:	687a      	ldr	r2, [r7, #4]
   2db26:	6a3b      	ldr	r3, [r7, #32]
   2db28:	1ad3      	subs	r3, r2, r3
   2db2a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2db2c:	687b      	ldr	r3, [r7, #4]
   2db2e:	2b00      	cmp	r3, #0
   2db30:	d000      	beq.n	2db34 <f_write+0x308>
   2db32:	e6b7      	b.n	2d8a4 <f_write+0x78>
   2db34:	e000      	b.n	2db38 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2db36:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2db38:	68fb      	ldr	r3, [r7, #12]
   2db3a:	689a      	ldr	r2, [r3, #8]
   2db3c:	68fb      	ldr	r3, [r7, #12]
   2db3e:	68db      	ldr	r3, [r3, #12]
   2db40:	429a      	cmp	r2, r3
   2db42:	d903      	bls.n	2db4c <f_write+0x320>
   2db44:	68fb      	ldr	r3, [r7, #12]
   2db46:	689a      	ldr	r2, [r3, #8]
   2db48:	68fb      	ldr	r3, [r7, #12]
   2db4a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2db4c:	68fb      	ldr	r3, [r7, #12]
   2db4e:	799b      	ldrb	r3, [r3, #6]
   2db50:	2220      	movs	r2, #32
   2db52:	4313      	orrs	r3, r2
   2db54:	b2da      	uxtb	r2, r3
   2db56:	68fb      	ldr	r3, [r7, #12]
   2db58:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2db5a:	2300      	movs	r3, #0
}
   2db5c:	0018      	movs	r0, r3
   2db5e:	46bd      	mov	sp, r7
   2db60:	b00b      	add	sp, #44	; 0x2c
   2db62:	bd90      	pop	{r4, r7, pc}
   2db64:	0002d251 	.word	0x0002d251
   2db68:	0002b8dd 	.word	0x0002b8dd
   2db6c:	0002b1d5 	.word	0x0002b1d5
   2db70:	0002b435 	.word	0x0002b435
   2db74:	0002aec1 	.word	0x0002aec1
   2db78:	0002b0f1 	.word	0x0002b0f1

0002db7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2db7c:	b590      	push	{r4, r7, lr}
   2db7e:	b087      	sub	sp, #28
   2db80:	af00      	add	r7, sp, #0
   2db82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2db84:	687b      	ldr	r3, [r7, #4]
   2db86:	681a      	ldr	r2, [r3, #0]
   2db88:	687b      	ldr	r3, [r7, #4]
   2db8a:	889b      	ldrh	r3, [r3, #4]
   2db8c:	2117      	movs	r1, #23
   2db8e:	187c      	adds	r4, r7, r1
   2db90:	0019      	movs	r1, r3
   2db92:	0010      	movs	r0, r2
   2db94:	4b55      	ldr	r3, [pc, #340]	; (2dcec <f_sync+0x170>)
   2db96:	4798      	blx	r3
   2db98:	0003      	movs	r3, r0
   2db9a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2db9c:	2317      	movs	r3, #23
   2db9e:	18fb      	adds	r3, r7, r3
   2dba0:	781b      	ldrb	r3, [r3, #0]
   2dba2:	2b00      	cmp	r3, #0
   2dba4:	d000      	beq.n	2dba8 <f_sync+0x2c>
   2dba6:	e09a      	b.n	2dcde <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2dba8:	687b      	ldr	r3, [r7, #4]
   2dbaa:	799b      	ldrb	r3, [r3, #6]
   2dbac:	001a      	movs	r2, r3
   2dbae:	2320      	movs	r3, #32
   2dbb0:	4013      	ands	r3, r2
   2dbb2:	d100      	bne.n	2dbb6 <f_sync+0x3a>
   2dbb4:	e093      	b.n	2dcde <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2dbb6:	687b      	ldr	r3, [r7, #4]
   2dbb8:	681a      	ldr	r2, [r3, #0]
   2dbba:	687b      	ldr	r3, [r7, #4]
   2dbbc:	69db      	ldr	r3, [r3, #28]
   2dbbe:	2117      	movs	r1, #23
   2dbc0:	187c      	adds	r4, r7, r1
   2dbc2:	0019      	movs	r1, r3
   2dbc4:	0010      	movs	r0, r2
   2dbc6:	4b4a      	ldr	r3, [pc, #296]	; (2dcf0 <f_sync+0x174>)
   2dbc8:	4798      	blx	r3
   2dbca:	0003      	movs	r3, r0
   2dbcc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2dbce:	2317      	movs	r3, #23
   2dbd0:	18fb      	adds	r3, r7, r3
   2dbd2:	781b      	ldrb	r3, [r3, #0]
   2dbd4:	2b00      	cmp	r3, #0
   2dbd6:	d000      	beq.n	2dbda <f_sync+0x5e>
   2dbd8:	e081      	b.n	2dcde <f_sync+0x162>
				dir = fp->dir_ptr;
   2dbda:	687b      	ldr	r3, [r7, #4]
   2dbdc:	6a1b      	ldr	r3, [r3, #32]
   2dbde:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2dbe0:	693b      	ldr	r3, [r7, #16]
   2dbe2:	330b      	adds	r3, #11
   2dbe4:	693a      	ldr	r2, [r7, #16]
   2dbe6:	320b      	adds	r2, #11
   2dbe8:	7812      	ldrb	r2, [r2, #0]
   2dbea:	2120      	movs	r1, #32
   2dbec:	430a      	orrs	r2, r1
   2dbee:	b2d2      	uxtb	r2, r2
   2dbf0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2dbf2:	693b      	ldr	r3, [r7, #16]
   2dbf4:	331c      	adds	r3, #28
   2dbf6:	001a      	movs	r2, r3
   2dbf8:	687b      	ldr	r3, [r7, #4]
   2dbfa:	68db      	ldr	r3, [r3, #12]
   2dbfc:	b2db      	uxtb	r3, r3
   2dbfe:	7013      	strb	r3, [r2, #0]
   2dc00:	693b      	ldr	r3, [r7, #16]
   2dc02:	331d      	adds	r3, #29
   2dc04:	001a      	movs	r2, r3
   2dc06:	687b      	ldr	r3, [r7, #4]
   2dc08:	68db      	ldr	r3, [r3, #12]
   2dc0a:	b29b      	uxth	r3, r3
   2dc0c:	0a1b      	lsrs	r3, r3, #8
   2dc0e:	b29b      	uxth	r3, r3
   2dc10:	b2db      	uxtb	r3, r3
   2dc12:	7013      	strb	r3, [r2, #0]
   2dc14:	693b      	ldr	r3, [r7, #16]
   2dc16:	331e      	adds	r3, #30
   2dc18:	001a      	movs	r2, r3
   2dc1a:	687b      	ldr	r3, [r7, #4]
   2dc1c:	68db      	ldr	r3, [r3, #12]
   2dc1e:	0c1b      	lsrs	r3, r3, #16
   2dc20:	b2db      	uxtb	r3, r3
   2dc22:	7013      	strb	r3, [r2, #0]
   2dc24:	693b      	ldr	r3, [r7, #16]
   2dc26:	331f      	adds	r3, #31
   2dc28:	001a      	movs	r2, r3
   2dc2a:	687b      	ldr	r3, [r7, #4]
   2dc2c:	68db      	ldr	r3, [r3, #12]
   2dc2e:	0e1b      	lsrs	r3, r3, #24
   2dc30:	b2db      	uxtb	r3, r3
   2dc32:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2dc34:	693b      	ldr	r3, [r7, #16]
   2dc36:	331a      	adds	r3, #26
   2dc38:	001a      	movs	r2, r3
   2dc3a:	687b      	ldr	r3, [r7, #4]
   2dc3c:	691b      	ldr	r3, [r3, #16]
   2dc3e:	b2db      	uxtb	r3, r3
   2dc40:	7013      	strb	r3, [r2, #0]
   2dc42:	693b      	ldr	r3, [r7, #16]
   2dc44:	331b      	adds	r3, #27
   2dc46:	001a      	movs	r2, r3
   2dc48:	687b      	ldr	r3, [r7, #4]
   2dc4a:	691b      	ldr	r3, [r3, #16]
   2dc4c:	b29b      	uxth	r3, r3
   2dc4e:	0a1b      	lsrs	r3, r3, #8
   2dc50:	b29b      	uxth	r3, r3
   2dc52:	b2db      	uxtb	r3, r3
   2dc54:	7013      	strb	r3, [r2, #0]
   2dc56:	693b      	ldr	r3, [r7, #16]
   2dc58:	3314      	adds	r3, #20
   2dc5a:	001a      	movs	r2, r3
   2dc5c:	687b      	ldr	r3, [r7, #4]
   2dc5e:	691b      	ldr	r3, [r3, #16]
   2dc60:	0c1b      	lsrs	r3, r3, #16
   2dc62:	b2db      	uxtb	r3, r3
   2dc64:	7013      	strb	r3, [r2, #0]
   2dc66:	693b      	ldr	r3, [r7, #16]
   2dc68:	3315      	adds	r3, #21
   2dc6a:	001a      	movs	r2, r3
   2dc6c:	687b      	ldr	r3, [r7, #4]
   2dc6e:	691b      	ldr	r3, [r3, #16]
   2dc70:	0c1b      	lsrs	r3, r3, #16
   2dc72:	b29b      	uxth	r3, r3
   2dc74:	0a1b      	lsrs	r3, r3, #8
   2dc76:	b29b      	uxth	r3, r3
   2dc78:	b2db      	uxtb	r3, r3
   2dc7a:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2dc7c:	4b1d      	ldr	r3, [pc, #116]	; (2dcf4 <f_sync+0x178>)
   2dc7e:	4798      	blx	r3
   2dc80:	0003      	movs	r3, r0
   2dc82:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2dc84:	693b      	ldr	r3, [r7, #16]
   2dc86:	3316      	adds	r3, #22
   2dc88:	68fa      	ldr	r2, [r7, #12]
   2dc8a:	b2d2      	uxtb	r2, r2
   2dc8c:	701a      	strb	r2, [r3, #0]
   2dc8e:	693b      	ldr	r3, [r7, #16]
   2dc90:	3317      	adds	r3, #23
   2dc92:	68fa      	ldr	r2, [r7, #12]
   2dc94:	b292      	uxth	r2, r2
   2dc96:	0a12      	lsrs	r2, r2, #8
   2dc98:	b292      	uxth	r2, r2
   2dc9a:	b2d2      	uxtb	r2, r2
   2dc9c:	701a      	strb	r2, [r3, #0]
   2dc9e:	693b      	ldr	r3, [r7, #16]
   2dca0:	3318      	adds	r3, #24
   2dca2:	68fa      	ldr	r2, [r7, #12]
   2dca4:	0c12      	lsrs	r2, r2, #16
   2dca6:	b2d2      	uxtb	r2, r2
   2dca8:	701a      	strb	r2, [r3, #0]
   2dcaa:	693b      	ldr	r3, [r7, #16]
   2dcac:	3319      	adds	r3, #25
   2dcae:	68fa      	ldr	r2, [r7, #12]
   2dcb0:	0e12      	lsrs	r2, r2, #24
   2dcb2:	b2d2      	uxtb	r2, r2
   2dcb4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2dcb6:	687b      	ldr	r3, [r7, #4]
   2dcb8:	799b      	ldrb	r3, [r3, #6]
   2dcba:	2220      	movs	r2, #32
   2dcbc:	4393      	bics	r3, r2
   2dcbe:	b2da      	uxtb	r2, r3
   2dcc0:	687b      	ldr	r3, [r7, #4]
   2dcc2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2dcc4:	687b      	ldr	r3, [r7, #4]
   2dcc6:	681b      	ldr	r3, [r3, #0]
   2dcc8:	2201      	movs	r2, #1
   2dcca:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2dccc:	687b      	ldr	r3, [r7, #4]
   2dcce:	681b      	ldr	r3, [r3, #0]
   2dcd0:	2217      	movs	r2, #23
   2dcd2:	18bc      	adds	r4, r7, r2
   2dcd4:	0018      	movs	r0, r3
   2dcd6:	4b08      	ldr	r3, [pc, #32]	; (2dcf8 <f_sync+0x17c>)
   2dcd8:	4798      	blx	r3
   2dcda:	0003      	movs	r3, r0
   2dcdc:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2dcde:	2317      	movs	r3, #23
   2dce0:	18fb      	adds	r3, r7, r3
   2dce2:	781b      	ldrb	r3, [r3, #0]
}
   2dce4:	0018      	movs	r0, r3
   2dce6:	46bd      	mov	sp, r7
   2dce8:	b007      	add	sp, #28
   2dcea:	bd90      	pop	{r4, r7, pc}
   2dcec:	0002d251 	.word	0x0002d251
   2dcf0:	0002b1d5 	.word	0x0002b1d5
   2dcf4:	0002b091 	.word	0x0002b091
   2dcf8:	0002b29d 	.word	0x0002b29d

0002dcfc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2dcfc:	b590      	push	{r4, r7, lr}
   2dcfe:	b085      	sub	sp, #20
   2dd00:	af00      	add	r7, sp, #0
   2dd02:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2dd04:	230f      	movs	r3, #15
   2dd06:	18fc      	adds	r4, r7, r3
   2dd08:	687b      	ldr	r3, [r7, #4]
   2dd0a:	0018      	movs	r0, r3
   2dd0c:	4b09      	ldr	r3, [pc, #36]	; (2dd34 <f_close+0x38>)
   2dd0e:	4798      	blx	r3
   2dd10:	0003      	movs	r3, r0
   2dd12:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2dd14:	230f      	movs	r3, #15
   2dd16:	18fb      	adds	r3, r7, r3
   2dd18:	781b      	ldrb	r3, [r3, #0]
   2dd1a:	2b00      	cmp	r3, #0
   2dd1c:	d102      	bne.n	2dd24 <f_close+0x28>
   2dd1e:	687b      	ldr	r3, [r7, #4]
   2dd20:	2200      	movs	r2, #0
   2dd22:	601a      	str	r2, [r3, #0]
	return res;
   2dd24:	230f      	movs	r3, #15
   2dd26:	18fb      	adds	r3, r7, r3
   2dd28:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2dd2a:	0018      	movs	r0, r3
   2dd2c:	46bd      	mov	sp, r7
   2dd2e:	b005      	add	sp, #20
   2dd30:	bd90      	pop	{r4, r7, pc}
   2dd32:	46c0      	nop			; (mov r8, r8)
   2dd34:	0002db7d 	.word	0x0002db7d

0002dd38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2dd38:	b580      	push	{r7, lr}
   2dd3a:	b084      	sub	sp, #16
   2dd3c:	af00      	add	r7, sp, #0
   2dd3e:	0002      	movs	r2, r0
   2dd40:	6039      	str	r1, [r7, #0]
   2dd42:	1dbb      	adds	r3, r7, #6
   2dd44:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2dd46:	1dbb      	adds	r3, r7, #6
   2dd48:	881b      	ldrh	r3, [r3, #0]
   2dd4a:	2b7f      	cmp	r3, #127	; 0x7f
   2dd4c:	d805      	bhi.n	2dd5a <ff_convert+0x22>
		c = src;
   2dd4e:	230e      	movs	r3, #14
   2dd50:	18fb      	adds	r3, r7, r3
   2dd52:	1dba      	adds	r2, r7, #6
   2dd54:	8812      	ldrh	r2, [r2, #0]
   2dd56:	801a      	strh	r2, [r3, #0]
   2dd58:	e03a      	b.n	2ddd0 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2dd5a:	683b      	ldr	r3, [r7, #0]
   2dd5c:	2b00      	cmp	r3, #0
   2dd5e:	d010      	beq.n	2dd82 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2dd60:	1dbb      	adds	r3, r7, #6
   2dd62:	881b      	ldrh	r3, [r3, #0]
   2dd64:	2bff      	cmp	r3, #255	; 0xff
   2dd66:	d807      	bhi.n	2dd78 <ff_convert+0x40>
   2dd68:	1dbb      	adds	r3, r7, #6
   2dd6a:	881b      	ldrh	r3, [r3, #0]
   2dd6c:	3b80      	subs	r3, #128	; 0x80
   2dd6e:	001a      	movs	r2, r3
   2dd70:	4b1b      	ldr	r3, [pc, #108]	; (2dde0 <ff_convert+0xa8>)
   2dd72:	0052      	lsls	r2, r2, #1
   2dd74:	5ad2      	ldrh	r2, [r2, r3]
   2dd76:	e000      	b.n	2dd7a <ff_convert+0x42>
   2dd78:	2200      	movs	r2, #0
   2dd7a:	230e      	movs	r3, #14
   2dd7c:	18fb      	adds	r3, r7, r3
   2dd7e:	801a      	strh	r2, [r3, #0]
   2dd80:	e026      	b.n	2ddd0 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2dd82:	230e      	movs	r3, #14
   2dd84:	18fb      	adds	r3, r7, r3
   2dd86:	2200      	movs	r2, #0
   2dd88:	801a      	strh	r2, [r3, #0]
   2dd8a:	e010      	b.n	2ddae <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2dd8c:	230e      	movs	r3, #14
   2dd8e:	18fb      	adds	r3, r7, r3
   2dd90:	881a      	ldrh	r2, [r3, #0]
   2dd92:	4b13      	ldr	r3, [pc, #76]	; (2dde0 <ff_convert+0xa8>)
   2dd94:	0052      	lsls	r2, r2, #1
   2dd96:	5ad3      	ldrh	r3, [r2, r3]
   2dd98:	1dba      	adds	r2, r7, #6
   2dd9a:	8812      	ldrh	r2, [r2, #0]
   2dd9c:	429a      	cmp	r2, r3
   2dd9e:	d00c      	beq.n	2ddba <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2dda0:	230e      	movs	r3, #14
   2dda2:	18fb      	adds	r3, r7, r3
   2dda4:	881a      	ldrh	r2, [r3, #0]
   2dda6:	230e      	movs	r3, #14
   2dda8:	18fb      	adds	r3, r7, r3
   2ddaa:	3201      	adds	r2, #1
   2ddac:	801a      	strh	r2, [r3, #0]
   2ddae:	230e      	movs	r3, #14
   2ddb0:	18fb      	adds	r3, r7, r3
   2ddb2:	881b      	ldrh	r3, [r3, #0]
   2ddb4:	2b7f      	cmp	r3, #127	; 0x7f
   2ddb6:	d9e9      	bls.n	2dd8c <ff_convert+0x54>
   2ddb8:	e000      	b.n	2ddbc <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2ddba:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2ddbc:	230e      	movs	r3, #14
   2ddbe:	18fb      	adds	r3, r7, r3
   2ddc0:	881b      	ldrh	r3, [r3, #0]
   2ddc2:	3380      	adds	r3, #128	; 0x80
   2ddc4:	b29a      	uxth	r2, r3
   2ddc6:	230e      	movs	r3, #14
   2ddc8:	18fb      	adds	r3, r7, r3
   2ddca:	21ff      	movs	r1, #255	; 0xff
   2ddcc:	400a      	ands	r2, r1
   2ddce:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2ddd0:	230e      	movs	r3, #14
   2ddd2:	18fb      	adds	r3, r7, r3
   2ddd4:	881b      	ldrh	r3, [r3, #0]
}
   2ddd6:	0018      	movs	r0, r3
   2ddd8:	46bd      	mov	sp, r7
   2ddda:	b004      	add	sp, #16
   2dddc:	bd80      	pop	{r7, pc}
   2ddde:	46c0      	nop			; (mov r8, r8)
   2dde0:	00038b08 	.word	0x00038b08

0002dde4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2dde4:	b580      	push	{r7, lr}
   2dde6:	b084      	sub	sp, #16
   2dde8:	af00      	add	r7, sp, #0
   2ddea:	0002      	movs	r2, r0
   2ddec:	1dbb      	adds	r3, r7, #6
   2ddee:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2ddf0:	2300      	movs	r3, #0
   2ddf2:	60fb      	str	r3, [r7, #12]
   2ddf4:	e002      	b.n	2ddfc <ff_wtoupper+0x18>
   2ddf6:	68fb      	ldr	r3, [r7, #12]
   2ddf8:	3301      	adds	r3, #1
   2ddfa:	60fb      	str	r3, [r7, #12]
   2ddfc:	4b0f      	ldr	r3, [pc, #60]	; (2de3c <ff_wtoupper+0x58>)
   2ddfe:	68fa      	ldr	r2, [r7, #12]
   2de00:	0052      	lsls	r2, r2, #1
   2de02:	5ad3      	ldrh	r3, [r2, r3]
   2de04:	2b00      	cmp	r3, #0
   2de06:	d007      	beq.n	2de18 <ff_wtoupper+0x34>
   2de08:	4b0c      	ldr	r3, [pc, #48]	; (2de3c <ff_wtoupper+0x58>)
   2de0a:	68fa      	ldr	r2, [r7, #12]
   2de0c:	0052      	lsls	r2, r2, #1
   2de0e:	5ad3      	ldrh	r3, [r2, r3]
   2de10:	1dba      	adds	r2, r7, #6
   2de12:	8812      	ldrh	r2, [r2, #0]
   2de14:	429a      	cmp	r2, r3
   2de16:	d1ee      	bne.n	2ddf6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2de18:	4b08      	ldr	r3, [pc, #32]	; (2de3c <ff_wtoupper+0x58>)
   2de1a:	68fa      	ldr	r2, [r7, #12]
   2de1c:	0052      	lsls	r2, r2, #1
   2de1e:	5ad3      	ldrh	r3, [r2, r3]
   2de20:	2b00      	cmp	r3, #0
   2de22:	d004      	beq.n	2de2e <ff_wtoupper+0x4a>
   2de24:	4b06      	ldr	r3, [pc, #24]	; (2de40 <ff_wtoupper+0x5c>)
   2de26:	68fa      	ldr	r2, [r7, #12]
   2de28:	0052      	lsls	r2, r2, #1
   2de2a:	5ad3      	ldrh	r3, [r2, r3]
   2de2c:	e001      	b.n	2de32 <ff_wtoupper+0x4e>
   2de2e:	1dbb      	adds	r3, r7, #6
   2de30:	881b      	ldrh	r3, [r3, #0]
}
   2de32:	0018      	movs	r0, r3
   2de34:	46bd      	mov	sp, r7
   2de36:	b004      	add	sp, #16
   2de38:	bd80      	pop	{r7, pc}
   2de3a:	46c0      	nop			; (mov r8, r8)
   2de3c:	00038c08 	.word	0x00038c08
   2de40:	00038de8 	.word	0x00038de8

0002de44 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2de44:	b580      	push	{r7, lr}
   2de46:	b084      	sub	sp, #16
   2de48:	af00      	add	r7, sp, #0
   2de4a:	60f8      	str	r0, [r7, #12]
   2de4c:	60b9      	str	r1, [r7, #8]
   2de4e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2de50:	68fb      	ldr	r3, [r7, #12]
   2de52:	68ba      	ldr	r2, [r7, #8]
   2de54:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2de56:	68fb      	ldr	r3, [r7, #12]
   2de58:	687a      	ldr	r2, [r7, #4]
   2de5a:	601a      	str	r2, [r3, #0]
}
   2de5c:	46c0      	nop			; (mov r8, r8)
   2de5e:	46bd      	mov	sp, r7
   2de60:	b004      	add	sp, #16
   2de62:	bd80      	pop	{r7, pc}

0002de64 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2de64:	b580      	push	{r7, lr}
   2de66:	b082      	sub	sp, #8
   2de68:	af00      	add	r7, sp, #0
   2de6a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2de6c:	687b      	ldr	r3, [r7, #4]
   2de6e:	681b      	ldr	r3, [r3, #0]
   2de70:	4a07      	ldr	r2, [pc, #28]	; (2de90 <getNextPacketId+0x2c>)
   2de72:	4293      	cmp	r3, r2
   2de74:	d003      	beq.n	2de7e <getNextPacketId+0x1a>
   2de76:	687b      	ldr	r3, [r7, #4]
   2de78:	681b      	ldr	r3, [r3, #0]
   2de7a:	1c5a      	adds	r2, r3, #1
   2de7c:	e000      	b.n	2de80 <getNextPacketId+0x1c>
   2de7e:	2201      	movs	r2, #1
   2de80:	687b      	ldr	r3, [r7, #4]
   2de82:	601a      	str	r2, [r3, #0]
   2de84:	687b      	ldr	r3, [r7, #4]
   2de86:	681b      	ldr	r3, [r3, #0]
}
   2de88:	0018      	movs	r0, r3
   2de8a:	46bd      	mov	sp, r7
   2de8c:	b002      	add	sp, #8
   2de8e:	bd80      	pop	{r7, pc}
   2de90:	0000ffff 	.word	0x0000ffff

0002de94 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2de94:	b5f0      	push	{r4, r5, r6, r7, lr}
   2de96:	b087      	sub	sp, #28
   2de98:	af00      	add	r7, sp, #0
   2de9a:	60f8      	str	r0, [r7, #12]
   2de9c:	60b9      	str	r1, [r7, #8]
   2de9e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2dea0:	2301      	movs	r3, #1
   2dea2:	425b      	negs	r3, r3
   2dea4:	617b      	str	r3, [r7, #20]
        sent = 0;
   2dea6:	2300      	movs	r3, #0
   2dea8:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2deaa:	e01a      	b.n	2dee2 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2deac:	68fb      	ldr	r3, [r7, #12]
   2deae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2deb0:	68dc      	ldr	r4, [r3, #12]
   2deb2:	68fb      	ldr	r3, [r7, #12]
   2deb4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2deb6:	68fb      	ldr	r3, [r7, #12]
   2deb8:	691a      	ldr	r2, [r3, #16]
   2deba:	693b      	ldr	r3, [r7, #16]
   2debc:	18d6      	adds	r6, r2, r3
   2debe:	687b      	ldr	r3, [r7, #4]
   2dec0:	0018      	movs	r0, r3
   2dec2:	4b1a      	ldr	r3, [pc, #104]	; (2df2c <sendPacket+0x98>)
   2dec4:	4798      	blx	r3
   2dec6:	0003      	movs	r3, r0
   2dec8:	68ba      	ldr	r2, [r7, #8]
   2deca:	0031      	movs	r1, r6
   2decc:	0028      	movs	r0, r5
   2dece:	47a0      	blx	r4
   2ded0:	0003      	movs	r3, r0
   2ded2:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2ded4:	697b      	ldr	r3, [r7, #20]
   2ded6:	2b00      	cmp	r3, #0
   2ded8:	db0e      	blt.n	2def8 <sendPacket+0x64>
            break;
        sent += rc;
   2deda:	693a      	ldr	r2, [r7, #16]
   2dedc:	697b      	ldr	r3, [r7, #20]
   2dede:	18d3      	adds	r3, r2, r3
   2dee0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2dee2:	693a      	ldr	r2, [r7, #16]
   2dee4:	68bb      	ldr	r3, [r7, #8]
   2dee6:	429a      	cmp	r2, r3
   2dee8:	da07      	bge.n	2defa <sendPacket+0x66>
   2deea:	687b      	ldr	r3, [r7, #4]
   2deec:	0018      	movs	r0, r3
   2deee:	4b10      	ldr	r3, [pc, #64]	; (2df30 <sendPacket+0x9c>)
   2def0:	4798      	blx	r3
   2def2:	1e03      	subs	r3, r0, #0
   2def4:	d0da      	beq.n	2deac <sendPacket+0x18>
   2def6:	e000      	b.n	2defa <sendPacket+0x66>
            break;
   2def8:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2defa:	693a      	ldr	r2, [r7, #16]
   2defc:	68bb      	ldr	r3, [r7, #8]
   2defe:	429a      	cmp	r2, r3
   2df00:	d10b      	bne.n	2df1a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2df02:	68fb      	ldr	r3, [r7, #12]
   2df04:	3354      	adds	r3, #84	; 0x54
   2df06:	001a      	movs	r2, r3
   2df08:	68fb      	ldr	r3, [r7, #12]
   2df0a:	699b      	ldr	r3, [r3, #24]
   2df0c:	0019      	movs	r1, r3
   2df0e:	0010      	movs	r0, r2
   2df10:	4b08      	ldr	r3, [pc, #32]	; (2df34 <sendPacket+0xa0>)
   2df12:	4798      	blx	r3
        rc = SUCCESS;
   2df14:	2300      	movs	r3, #0
   2df16:	617b      	str	r3, [r7, #20]
   2df18:	e002      	b.n	2df20 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2df1a:	2301      	movs	r3, #1
   2df1c:	425b      	negs	r3, r3
   2df1e:	617b      	str	r3, [r7, #20]
    return rc;
   2df20:	697b      	ldr	r3, [r7, #20]
}
   2df22:	0018      	movs	r0, r3
   2df24:	46bd      	mov	sp, r7
   2df26:	b007      	add	sp, #28
   2df28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2df2a:	46c0      	nop			; (mov r8, r8)
   2df2c:	0002ecf5 	.word	0x0002ecf5
   2df30:	0002ec79 	.word	0x0002ec79
   2df34:	0002eccd 	.word	0x0002eccd

0002df38 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2df38:	b580      	push	{r7, lr}
   2df3a:	b086      	sub	sp, #24
   2df3c:	af00      	add	r7, sp, #0
   2df3e:	60f8      	str	r0, [r7, #12]
   2df40:	60b9      	str	r1, [r7, #8]
   2df42:	607a      	str	r2, [r7, #4]
   2df44:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2df46:	68fb      	ldr	r3, [r7, #12]
   2df48:	68ba      	ldr	r2, [r7, #8]
   2df4a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2df4c:	2300      	movs	r3, #0
   2df4e:	617b      	str	r3, [r7, #20]
   2df50:	e00a      	b.n	2df68 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2df52:	68fa      	ldr	r2, [r7, #12]
   2df54:	697b      	ldr	r3, [r7, #20]
   2df56:	3304      	adds	r3, #4
   2df58:	00db      	lsls	r3, r3, #3
   2df5a:	18d3      	adds	r3, r2, r3
   2df5c:	3304      	adds	r3, #4
   2df5e:	2200      	movs	r2, #0
   2df60:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2df62:	697b      	ldr	r3, [r7, #20]
   2df64:	3301      	adds	r3, #1
   2df66:	617b      	str	r3, [r7, #20]
   2df68:	697b      	ldr	r3, [r7, #20]
   2df6a:	2b04      	cmp	r3, #4
   2df6c:	ddf1      	ble.n	2df52 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2df6e:	68fb      	ldr	r3, [r7, #12]
   2df70:	687a      	ldr	r2, [r7, #4]
   2df72:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2df74:	68fb      	ldr	r3, [r7, #12]
   2df76:	683a      	ldr	r2, [r7, #0]
   2df78:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2df7a:	68fb      	ldr	r3, [r7, #12]
   2df7c:	6a3a      	ldr	r2, [r7, #32]
   2df7e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2df80:	68fb      	ldr	r3, [r7, #12]
   2df82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2df84:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2df86:	68fb      	ldr	r3, [r7, #12]
   2df88:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2df8a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2df8c:	68fb      	ldr	r3, [r7, #12]
   2df8e:	2200      	movs	r2, #0
   2df90:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2df92:	68fb      	ldr	r3, [r7, #12]
   2df94:	2200      	movs	r2, #0
   2df96:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2df98:	68fb      	ldr	r3, [r7, #12]
   2df9a:	2200      	movs	r2, #0
   2df9c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2df9e:	68fb      	ldr	r3, [r7, #12]
   2dfa0:	2201      	movs	r2, #1
   2dfa2:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2dfa4:	68fb      	ldr	r3, [r7, #12]
   2dfa6:	3354      	adds	r3, #84	; 0x54
   2dfa8:	0018      	movs	r0, r3
   2dfaa:	4b03      	ldr	r3, [pc, #12]	; (2dfb8 <MQTTClientInit+0x80>)
   2dfac:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2dfae:	46c0      	nop			; (mov r8, r8)
   2dfb0:	46bd      	mov	sp, r7
   2dfb2:	b006      	add	sp, #24
   2dfb4:	bd80      	pop	{r7, pc}
   2dfb6:	46c0      	nop			; (mov r8, r8)
   2dfb8:	0002ed1d 	.word	0x0002ed1d

0002dfbc <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2dfbc:	b590      	push	{r4, r7, lr}
   2dfbe:	b08b      	sub	sp, #44	; 0x2c
   2dfc0:	af00      	add	r7, sp, #0
   2dfc2:	60f8      	str	r0, [r7, #12]
   2dfc4:	60b9      	str	r1, [r7, #8]
   2dfc6:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2dfc8:	2301      	movs	r3, #1
   2dfca:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2dfcc:	2300      	movs	r3, #0
   2dfce:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2dfd0:	2304      	movs	r3, #4
   2dfd2:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2dfd4:	68bb      	ldr	r3, [r7, #8]
   2dfd6:	2200      	movs	r2, #0
   2dfd8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2dfda:	2301      	movs	r3, #1
   2dfdc:	425b      	negs	r3, r3
   2dfde:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2dfe0:	6a3b      	ldr	r3, [r7, #32]
   2dfe2:	3301      	adds	r3, #1
   2dfe4:	623b      	str	r3, [r7, #32]
   2dfe6:	6a3a      	ldr	r2, [r7, #32]
   2dfe8:	69fb      	ldr	r3, [r7, #28]
   2dfea:	429a      	cmp	r2, r3
   2dfec:	dd03      	ble.n	2dff6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2dfee:	2301      	movs	r3, #1
   2dff0:	425b      	negs	r3, r3
   2dff2:	61bb      	str	r3, [r7, #24]
            goto exit;
   2dff4:	e026      	b.n	2e044 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2dff6:	68fb      	ldr	r3, [r7, #12]
   2dff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2dffa:	689c      	ldr	r4, [r3, #8]
   2dffc:	68fb      	ldr	r3, [r7, #12]
   2dffe:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2e000:	687b      	ldr	r3, [r7, #4]
   2e002:	2217      	movs	r2, #23
   2e004:	18b9      	adds	r1, r7, r2
   2e006:	2201      	movs	r2, #1
   2e008:	47a0      	blx	r4
   2e00a:	0003      	movs	r3, r0
   2e00c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2e00e:	69bb      	ldr	r3, [r7, #24]
   2e010:	2b01      	cmp	r3, #1
   2e012:	d116      	bne.n	2e042 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e014:	68bb      	ldr	r3, [r7, #8]
   2e016:	681a      	ldr	r2, [r3, #0]
   2e018:	2317      	movs	r3, #23
   2e01a:	18fb      	adds	r3, r7, r3
   2e01c:	781b      	ldrb	r3, [r3, #0]
   2e01e:	0019      	movs	r1, r3
   2e020:	237f      	movs	r3, #127	; 0x7f
   2e022:	400b      	ands	r3, r1
   2e024:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e026:	434b      	muls	r3, r1
   2e028:	18d2      	adds	r2, r2, r3
   2e02a:	68bb      	ldr	r3, [r7, #8]
   2e02c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e030:	01db      	lsls	r3, r3, #7
   2e032:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e034:	2317      	movs	r3, #23
   2e036:	18fb      	adds	r3, r7, r3
   2e038:	781b      	ldrb	r3, [r3, #0]
   2e03a:	b25b      	sxtb	r3, r3
   2e03c:	2b00      	cmp	r3, #0
   2e03e:	dbcc      	blt.n	2dfda <decodePacket+0x1e>
   2e040:	e000      	b.n	2e044 <decodePacket+0x88>
            goto exit;
   2e042:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e044:	6a3b      	ldr	r3, [r7, #32]
}
   2e046:	0018      	movs	r0, r3
   2e048:	46bd      	mov	sp, r7
   2e04a:	b00b      	add	sp, #44	; 0x2c
   2e04c:	bd90      	pop	{r4, r7, pc}
	...

0002e050 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e050:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e052:	46c6      	mov	lr, r8
   2e054:	b500      	push	{lr}
   2e056:	b086      	sub	sp, #24
   2e058:	af00      	add	r7, sp, #0
   2e05a:	6078      	str	r0, [r7, #4]
   2e05c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e05e:	2301      	movs	r3, #1
   2e060:	425b      	negs	r3, r3
   2e062:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e064:	2300      	movs	r3, #0
   2e066:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e068:	2300      	movs	r3, #0
   2e06a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e06c:	2300      	movs	r3, #0
   2e06e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e070:	687b      	ldr	r3, [r7, #4]
   2e072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e074:	689c      	ldr	r4, [r3, #8]
   2e076:	687b      	ldr	r3, [r7, #4]
   2e078:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e07a:	687b      	ldr	r3, [r7, #4]
   2e07c:	695e      	ldr	r6, [r3, #20]
   2e07e:	683b      	ldr	r3, [r7, #0]
   2e080:	0018      	movs	r0, r3
   2e082:	4b2b      	ldr	r3, [pc, #172]	; (2e130 <readPacket+0xe0>)
   2e084:	4798      	blx	r3
   2e086:	0003      	movs	r3, r0
   2e088:	2201      	movs	r2, #1
   2e08a:	0031      	movs	r1, r6
   2e08c:	0028      	movs	r0, r5
   2e08e:	47a0      	blx	r4
   2e090:	0003      	movs	r3, r0
   2e092:	2b01      	cmp	r3, #1
   2e094:	d141      	bne.n	2e11a <readPacket+0xca>
        goto exit;

    len = 1;
   2e096:	2301      	movs	r3, #1
   2e098:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e09a:	683b      	ldr	r3, [r7, #0]
   2e09c:	0018      	movs	r0, r3
   2e09e:	4b24      	ldr	r3, [pc, #144]	; (2e130 <readPacket+0xe0>)
   2e0a0:	4798      	blx	r3
   2e0a2:	0002      	movs	r2, r0
   2e0a4:	2308      	movs	r3, #8
   2e0a6:	18f9      	adds	r1, r7, r3
   2e0a8:	687b      	ldr	r3, [r7, #4]
   2e0aa:	0018      	movs	r0, r3
   2e0ac:	4b21      	ldr	r3, [pc, #132]	; (2e134 <readPacket+0xe4>)
   2e0ae:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e0b0:	687b      	ldr	r3, [r7, #4]
   2e0b2:	695b      	ldr	r3, [r3, #20]
   2e0b4:	3301      	adds	r3, #1
   2e0b6:	68ba      	ldr	r2, [r7, #8]
   2e0b8:	0011      	movs	r1, r2
   2e0ba:	0018      	movs	r0, r3
   2e0bc:	4b1e      	ldr	r3, [pc, #120]	; (2e138 <readPacket+0xe8>)
   2e0be:	4798      	blx	r3
   2e0c0:	0002      	movs	r2, r0
   2e0c2:	693b      	ldr	r3, [r7, #16]
   2e0c4:	189b      	adds	r3, r3, r2
   2e0c6:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e0c8:	68bb      	ldr	r3, [r7, #8]
   2e0ca:	2b00      	cmp	r3, #0
   2e0cc:	dd17      	ble.n	2e0fe <readPacket+0xae>
   2e0ce:	687b      	ldr	r3, [r7, #4]
   2e0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e0d2:	689c      	ldr	r4, [r3, #8]
   2e0d4:	687b      	ldr	r3, [r7, #4]
   2e0d6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e0d8:	687b      	ldr	r3, [r7, #4]
   2e0da:	695a      	ldr	r2, [r3, #20]
   2e0dc:	693b      	ldr	r3, [r7, #16]
   2e0de:	18d6      	adds	r6, r2, r3
   2e0e0:	68bb      	ldr	r3, [r7, #8]
   2e0e2:	4698      	mov	r8, r3
   2e0e4:	683b      	ldr	r3, [r7, #0]
   2e0e6:	0018      	movs	r0, r3
   2e0e8:	4b11      	ldr	r3, [pc, #68]	; (2e130 <readPacket+0xe0>)
   2e0ea:	4798      	blx	r3
   2e0ec:	0003      	movs	r3, r0
   2e0ee:	4642      	mov	r2, r8
   2e0f0:	0031      	movs	r1, r6
   2e0f2:	0028      	movs	r0, r5
   2e0f4:	47a0      	blx	r4
   2e0f6:	0002      	movs	r2, r0
   2e0f8:	68bb      	ldr	r3, [r7, #8]
   2e0fa:	429a      	cmp	r2, r3
   2e0fc:	d10f      	bne.n	2e11e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e0fe:	687b      	ldr	r3, [r7, #4]
   2e100:	695b      	ldr	r3, [r3, #20]
   2e102:	781a      	ldrb	r2, [r3, #0]
   2e104:	230c      	movs	r3, #12
   2e106:	18fb      	adds	r3, r7, r3
   2e108:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e10a:	230c      	movs	r3, #12
   2e10c:	18fb      	adds	r3, r7, r3
   2e10e:	781b      	ldrb	r3, [r3, #0]
   2e110:	061b      	lsls	r3, r3, #24
   2e112:	0f1b      	lsrs	r3, r3, #28
   2e114:	b2db      	uxtb	r3, r3
   2e116:	617b      	str	r3, [r7, #20]
   2e118:	e002      	b.n	2e120 <readPacket+0xd0>
        goto exit;
   2e11a:	46c0      	nop			; (mov r8, r8)
   2e11c:	e000      	b.n	2e120 <readPacket+0xd0>
        goto exit;
   2e11e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e120:	697b      	ldr	r3, [r7, #20]
}
   2e122:	0018      	movs	r0, r3
   2e124:	46bd      	mov	sp, r7
   2e126:	b006      	add	sp, #24
   2e128:	bc04      	pop	{r2}
   2e12a:	4690      	mov	r8, r2
   2e12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e12e:	46c0      	nop			; (mov r8, r8)
   2e130:	0002ecf5 	.word	0x0002ecf5
   2e134:	0002dfbd 	.word	0x0002dfbd
   2e138:	0002facd 	.word	0x0002facd

0002e13c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e13c:	b580      	push	{r7, lr}
   2e13e:	b086      	sub	sp, #24
   2e140:	af00      	add	r7, sp, #0
   2e142:	6078      	str	r0, [r7, #4]
   2e144:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e146:	687b      	ldr	r3, [r7, #4]
   2e148:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e14a:	683b      	ldr	r3, [r7, #0]
   2e14c:	689b      	ldr	r3, [r3, #8]
   2e14e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e150:	683b      	ldr	r3, [r7, #0]
   2e152:	685b      	ldr	r3, [r3, #4]
   2e154:	001a      	movs	r2, r3
   2e156:	693b      	ldr	r3, [r7, #16]
   2e158:	189b      	adds	r3, r3, r2
   2e15a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e15c:	e039      	b.n	2e1d2 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e15e:	693b      	ldr	r3, [r7, #16]
   2e160:	781b      	ldrb	r3, [r3, #0]
   2e162:	2b2f      	cmp	r3, #47	; 0x2f
   2e164:	d103      	bne.n	2e16e <isTopicMatched+0x32>
   2e166:	697b      	ldr	r3, [r7, #20]
   2e168:	781b      	ldrb	r3, [r3, #0]
   2e16a:	2b2f      	cmp	r3, #47	; 0x2f
   2e16c:	d13a      	bne.n	2e1e4 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e16e:	697b      	ldr	r3, [r7, #20]
   2e170:	781b      	ldrb	r3, [r3, #0]
   2e172:	2b2b      	cmp	r3, #43	; 0x2b
   2e174:	d009      	beq.n	2e18a <isTopicMatched+0x4e>
   2e176:	697b      	ldr	r3, [r7, #20]
   2e178:	781b      	ldrb	r3, [r3, #0]
   2e17a:	2b23      	cmp	r3, #35	; 0x23
   2e17c:	d005      	beq.n	2e18a <isTopicMatched+0x4e>
   2e17e:	697b      	ldr	r3, [r7, #20]
   2e180:	781a      	ldrb	r2, [r3, #0]
   2e182:	693b      	ldr	r3, [r7, #16]
   2e184:	781b      	ldrb	r3, [r3, #0]
   2e186:	429a      	cmp	r2, r3
   2e188:	d12e      	bne.n	2e1e8 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e18a:	697b      	ldr	r3, [r7, #20]
   2e18c:	781b      	ldrb	r3, [r3, #0]
   2e18e:	2b2b      	cmp	r3, #43	; 0x2b
   2e190:	d112      	bne.n	2e1b8 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e192:	693b      	ldr	r3, [r7, #16]
   2e194:	3301      	adds	r3, #1
   2e196:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e198:	e005      	b.n	2e1a6 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e19a:	693b      	ldr	r3, [r7, #16]
   2e19c:	3301      	adds	r3, #1
   2e19e:	613b      	str	r3, [r7, #16]
   2e1a0:	693b      	ldr	r3, [r7, #16]
   2e1a2:	3301      	adds	r3, #1
   2e1a4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e1a6:	68fa      	ldr	r2, [r7, #12]
   2e1a8:	68bb      	ldr	r3, [r7, #8]
   2e1aa:	429a      	cmp	r2, r3
   2e1ac:	d20b      	bcs.n	2e1c6 <isTopicMatched+0x8a>
   2e1ae:	68fb      	ldr	r3, [r7, #12]
   2e1b0:	781b      	ldrb	r3, [r3, #0]
   2e1b2:	2b2f      	cmp	r3, #47	; 0x2f
   2e1b4:	d1f1      	bne.n	2e19a <isTopicMatched+0x5e>
   2e1b6:	e006      	b.n	2e1c6 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e1b8:	697b      	ldr	r3, [r7, #20]
   2e1ba:	781b      	ldrb	r3, [r3, #0]
   2e1bc:	2b23      	cmp	r3, #35	; 0x23
   2e1be:	d102      	bne.n	2e1c6 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e1c0:	68bb      	ldr	r3, [r7, #8]
   2e1c2:	3b01      	subs	r3, #1
   2e1c4:	613b      	str	r3, [r7, #16]
        curf++;
   2e1c6:	697b      	ldr	r3, [r7, #20]
   2e1c8:	3301      	adds	r3, #1
   2e1ca:	617b      	str	r3, [r7, #20]
        curn++;
   2e1cc:	693b      	ldr	r3, [r7, #16]
   2e1ce:	3301      	adds	r3, #1
   2e1d0:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e1d2:	697b      	ldr	r3, [r7, #20]
   2e1d4:	781b      	ldrb	r3, [r3, #0]
   2e1d6:	2b00      	cmp	r3, #0
   2e1d8:	d007      	beq.n	2e1ea <isTopicMatched+0xae>
   2e1da:	693a      	ldr	r2, [r7, #16]
   2e1dc:	68bb      	ldr	r3, [r7, #8]
   2e1de:	429a      	cmp	r2, r3
   2e1e0:	d3bd      	bcc.n	2e15e <isTopicMatched+0x22>
   2e1e2:	e002      	b.n	2e1ea <isTopicMatched+0xae>
            break;
   2e1e4:	46c0      	nop			; (mov r8, r8)
   2e1e6:	e000      	b.n	2e1ea <isTopicMatched+0xae>
            break;
   2e1e8:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e1ea:	693a      	ldr	r2, [r7, #16]
   2e1ec:	68bb      	ldr	r3, [r7, #8]
   2e1ee:	429a      	cmp	r2, r3
   2e1f0:	d105      	bne.n	2e1fe <isTopicMatched+0xc2>
   2e1f2:	697b      	ldr	r3, [r7, #20]
   2e1f4:	781b      	ldrb	r3, [r3, #0]
   2e1f6:	2b00      	cmp	r3, #0
   2e1f8:	d101      	bne.n	2e1fe <isTopicMatched+0xc2>
   2e1fa:	2301      	movs	r3, #1
   2e1fc:	e000      	b.n	2e200 <isTopicMatched+0xc4>
   2e1fe:	2300      	movs	r3, #0
   2e200:	b2db      	uxtb	r3, r3
}
   2e202:	0018      	movs	r0, r3
   2e204:	46bd      	mov	sp, r7
   2e206:	b006      	add	sp, #24
   2e208:	bd80      	pop	{r7, pc}
	...

0002e20c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e20c:	b580      	push	{r7, lr}
   2e20e:	b08a      	sub	sp, #40	; 0x28
   2e210:	af00      	add	r7, sp, #0
   2e212:	60f8      	str	r0, [r7, #12]
   2e214:	60b9      	str	r1, [r7, #8]
   2e216:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e218:	2301      	movs	r3, #1
   2e21a:	425b      	negs	r3, r3
   2e21c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e21e:	2300      	movs	r3, #0
   2e220:	627b      	str	r3, [r7, #36]	; 0x24
   2e222:	e044      	b.n	2e2ae <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e224:	68fa      	ldr	r2, [r7, #12]
   2e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e228:	3304      	adds	r3, #4
   2e22a:	00db      	lsls	r3, r3, #3
   2e22c:	18d3      	adds	r3, r2, r3
   2e22e:	3304      	adds	r3, #4
   2e230:	681b      	ldr	r3, [r3, #0]
   2e232:	2b00      	cmp	r3, #0
   2e234:	d038      	beq.n	2e2a8 <deliverMessage+0x9c>
   2e236:	68fa      	ldr	r2, [r7, #12]
   2e238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e23a:	3304      	adds	r3, #4
   2e23c:	00db      	lsls	r3, r3, #3
   2e23e:	18d3      	adds	r3, r2, r3
   2e240:	3304      	adds	r3, #4
   2e242:	681a      	ldr	r2, [r3, #0]
   2e244:	68bb      	ldr	r3, [r7, #8]
   2e246:	0011      	movs	r1, r2
   2e248:	0018      	movs	r0, r3
   2e24a:	4b28      	ldr	r3, [pc, #160]	; (2e2ec <deliverMessage+0xe0>)
   2e24c:	4798      	blx	r3
   2e24e:	1e03      	subs	r3, r0, #0
   2e250:	d10d      	bne.n	2e26e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e252:	68fa      	ldr	r2, [r7, #12]
   2e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e256:	3304      	adds	r3, #4
   2e258:	00db      	lsls	r3, r3, #3
   2e25a:	18d3      	adds	r3, r2, r3
   2e25c:	3304      	adds	r3, #4
   2e25e:	681b      	ldr	r3, [r3, #0]
   2e260:	68ba      	ldr	r2, [r7, #8]
   2e262:	0011      	movs	r1, r2
   2e264:	0018      	movs	r0, r3
   2e266:	4b22      	ldr	r3, [pc, #136]	; (2e2f0 <deliverMessage+0xe4>)
   2e268:	4798      	blx	r3
   2e26a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e26c:	d01c      	beq.n	2e2a8 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e26e:	68fa      	ldr	r2, [r7, #12]
   2e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e272:	3304      	adds	r3, #4
   2e274:	00db      	lsls	r3, r3, #3
   2e276:	18d3      	adds	r3, r2, r3
   2e278:	3308      	adds	r3, #8
   2e27a:	681b      	ldr	r3, [r3, #0]
   2e27c:	2b00      	cmp	r3, #0
   2e27e:	d013      	beq.n	2e2a8 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e280:	687a      	ldr	r2, [r7, #4]
   2e282:	68b9      	ldr	r1, [r7, #8]
   2e284:	2318      	movs	r3, #24
   2e286:	18fb      	adds	r3, r7, r3
   2e288:	0018      	movs	r0, r3
   2e28a:	4b1a      	ldr	r3, [pc, #104]	; (2e2f4 <deliverMessage+0xe8>)
   2e28c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e28e:	68fa      	ldr	r2, [r7, #12]
   2e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e292:	3304      	adds	r3, #4
   2e294:	00db      	lsls	r3, r3, #3
   2e296:	18d3      	adds	r3, r2, r3
   2e298:	3308      	adds	r3, #8
   2e29a:	681b      	ldr	r3, [r3, #0]
   2e29c:	2218      	movs	r2, #24
   2e29e:	18ba      	adds	r2, r7, r2
   2e2a0:	0010      	movs	r0, r2
   2e2a2:	4798      	blx	r3
                rc = SUCCESS;
   2e2a4:	2300      	movs	r3, #0
   2e2a6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e2aa:	3301      	adds	r3, #1
   2e2ac:	627b      	str	r3, [r7, #36]	; 0x24
   2e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e2b0:	2b04      	cmp	r3, #4
   2e2b2:	ddb7      	ble.n	2e224 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e2b4:	6a3b      	ldr	r3, [r7, #32]
   2e2b6:	3301      	adds	r3, #1
   2e2b8:	d112      	bne.n	2e2e0 <deliverMessage+0xd4>
   2e2ba:	68fb      	ldr	r3, [r7, #12]
   2e2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e2be:	2b00      	cmp	r3, #0
   2e2c0:	d00e      	beq.n	2e2e0 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e2c2:	687a      	ldr	r2, [r7, #4]
   2e2c4:	68b9      	ldr	r1, [r7, #8]
   2e2c6:	2310      	movs	r3, #16
   2e2c8:	18fb      	adds	r3, r7, r3
   2e2ca:	0018      	movs	r0, r3
   2e2cc:	4b09      	ldr	r3, [pc, #36]	; (2e2f4 <deliverMessage+0xe8>)
   2e2ce:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e2d0:	68fb      	ldr	r3, [r7, #12]
   2e2d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e2d4:	2210      	movs	r2, #16
   2e2d6:	18ba      	adds	r2, r7, r2
   2e2d8:	0010      	movs	r0, r2
   2e2da:	4798      	blx	r3
        rc = SUCCESS;
   2e2dc:	2300      	movs	r3, #0
   2e2de:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e2e0:	6a3b      	ldr	r3, [r7, #32]
}
   2e2e2:	0018      	movs	r0, r3
   2e2e4:	46bd      	mov	sp, r7
   2e2e6:	b00a      	add	sp, #40	; 0x28
   2e2e8:	bd80      	pop	{r7, pc}
   2e2ea:	46c0      	nop			; (mov r8, r8)
   2e2ec:	0002fee1 	.word	0x0002fee1
   2e2f0:	0002e13d 	.word	0x0002e13d
   2e2f4:	0002de45 	.word	0x0002de45

0002e2f8 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e2f8:	b580      	push	{r7, lr}
   2e2fa:	b088      	sub	sp, #32
   2e2fc:	af00      	add	r7, sp, #0
   2e2fe:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e300:	2301      	movs	r3, #1
   2e302:	425b      	negs	r3, r3
   2e304:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e306:	687b      	ldr	r3, [r7, #4]
   2e308:	699b      	ldr	r3, [r3, #24]
   2e30a:	2b00      	cmp	r3, #0
   2e30c:	d102      	bne.n	2e314 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e30e:	2300      	movs	r3, #0
   2e310:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e312:	e033      	b.n	2e37c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e314:	687b      	ldr	r3, [r7, #4]
   2e316:	3354      	adds	r3, #84	; 0x54
   2e318:	0018      	movs	r0, r3
   2e31a:	4b1b      	ldr	r3, [pc, #108]	; (2e388 <keepalive+0x90>)
   2e31c:	4798      	blx	r3
   2e31e:	1e03      	subs	r3, r0, #0
   2e320:	d02c      	beq.n	2e37c <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e322:	687b      	ldr	r3, [r7, #4]
   2e324:	7f1b      	ldrb	r3, [r3, #28]
   2e326:	2b00      	cmp	r3, #0
   2e328:	d128      	bne.n	2e37c <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e32a:	230c      	movs	r3, #12
   2e32c:	18fb      	adds	r3, r7, r3
   2e32e:	0018      	movs	r0, r3
   2e330:	4b16      	ldr	r3, [pc, #88]	; (2e38c <keepalive+0x94>)
   2e332:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e334:	23fa      	movs	r3, #250	; 0xfa
   2e336:	009a      	lsls	r2, r3, #2
   2e338:	230c      	movs	r3, #12
   2e33a:	18fb      	adds	r3, r7, r3
   2e33c:	0011      	movs	r1, r2
   2e33e:	0018      	movs	r0, r3
   2e340:	4b13      	ldr	r3, [pc, #76]	; (2e390 <keepalive+0x98>)
   2e342:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e344:	687b      	ldr	r3, [r7, #4]
   2e346:	691a      	ldr	r2, [r3, #16]
   2e348:	687b      	ldr	r3, [r7, #4]
   2e34a:	689b      	ldr	r3, [r3, #8]
   2e34c:	0019      	movs	r1, r3
   2e34e:	0010      	movs	r0, r2
   2e350:	4b10      	ldr	r3, [pc, #64]	; (2e394 <keepalive+0x9c>)
   2e352:	4798      	blx	r3
   2e354:	0003      	movs	r3, r0
   2e356:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e358:	69bb      	ldr	r3, [r7, #24]
   2e35a:	2b00      	cmp	r3, #0
   2e35c:	dd0e      	ble.n	2e37c <keepalive+0x84>
   2e35e:	230c      	movs	r3, #12
   2e360:	18fa      	adds	r2, r7, r3
   2e362:	69b9      	ldr	r1, [r7, #24]
   2e364:	687b      	ldr	r3, [r7, #4]
   2e366:	0018      	movs	r0, r3
   2e368:	4b0b      	ldr	r3, [pc, #44]	; (2e398 <keepalive+0xa0>)
   2e36a:	4798      	blx	r3
   2e36c:	0003      	movs	r3, r0
   2e36e:	61fb      	str	r3, [r7, #28]
   2e370:	69fb      	ldr	r3, [r7, #28]
   2e372:	2b00      	cmp	r3, #0
   2e374:	d102      	bne.n	2e37c <keepalive+0x84>
                c->ping_outstanding = 1;
   2e376:	687b      	ldr	r3, [r7, #4]
   2e378:	2201      	movs	r2, #1
   2e37a:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e37c:	69fb      	ldr	r3, [r7, #28]
}
   2e37e:	0018      	movs	r0, r3
   2e380:	46bd      	mov	sp, r7
   2e382:	b008      	add	sp, #32
   2e384:	bd80      	pop	{r7, pc}
   2e386:	46c0      	nop			; (mov r8, r8)
   2e388:	0002ec79 	.word	0x0002ec79
   2e38c:	0002ed1d 	.word	0x0002ed1d
   2e390:	0002eca5 	.word	0x0002eca5
   2e394:	0002f8f1 	.word	0x0002f8f1
   2e398:	0002de95 	.word	0x0002de95

0002e39c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e39c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e39e:	b095      	sub	sp, #84	; 0x54
   2e3a0:	af06      	add	r7, sp, #24
   2e3a2:	6078      	str	r0, [r7, #4]
   2e3a4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e3a6:	683a      	ldr	r2, [r7, #0]
   2e3a8:	687b      	ldr	r3, [r7, #4]
   2e3aa:	0011      	movs	r1, r2
   2e3ac:	0018      	movs	r0, r3
   2e3ae:	4b70      	ldr	r3, [pc, #448]	; (2e570 <cycle+0x1d4>)
   2e3b0:	4798      	blx	r3
   2e3b2:	0002      	movs	r2, r0
   2e3b4:	232e      	movs	r3, #46	; 0x2e
   2e3b6:	18fb      	adds	r3, r7, r3
   2e3b8:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e3ba:	2300      	movs	r3, #0
   2e3bc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e3be:	2300      	movs	r3, #0
   2e3c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e3c2:	232e      	movs	r3, #46	; 0x2e
   2e3c4:	18fb      	adds	r3, r7, r3
   2e3c6:	881b      	ldrh	r3, [r3, #0]
   2e3c8:	2b0d      	cmp	r3, #13
   2e3ca:	d900      	bls.n	2e3ce <cycle+0x32>
   2e3cc:	e0bd      	b.n	2e54a <cycle+0x1ae>
   2e3ce:	009a      	lsls	r2, r3, #2
   2e3d0:	4b68      	ldr	r3, [pc, #416]	; (2e574 <cycle+0x1d8>)
   2e3d2:	18d3      	adds	r3, r2, r3
   2e3d4:	681b      	ldr	r3, [r3, #0]
   2e3d6:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e3d8:	687b      	ldr	r3, [r7, #4]
   2e3da:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e3dc:	687b      	ldr	r3, [r7, #4]
   2e3de:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e3e0:	001e      	movs	r6, r3
   2e3e2:	2310      	movs	r3, #16
   2e3e4:	18fb      	adds	r3, r7, r3
   2e3e6:	1d1d      	adds	r5, r3, #4
   2e3e8:	2310      	movs	r3, #16
   2e3ea:	18fb      	adds	r3, r7, r3
   2e3ec:	1c5c      	adds	r4, r3, #1
   2e3ee:	230c      	movs	r3, #12
   2e3f0:	18f9      	adds	r1, r7, r3
   2e3f2:	2310      	movs	r3, #16
   2e3f4:	18fb      	adds	r3, r7, r3
   2e3f6:	1c98      	adds	r0, r3, #2
   2e3f8:	9604      	str	r6, [sp, #16]
   2e3fa:	9203      	str	r2, [sp, #12]
   2e3fc:	2310      	movs	r3, #16
   2e3fe:	18fb      	adds	r3, r7, r3
   2e400:	330c      	adds	r3, #12
   2e402:	9302      	str	r3, [sp, #8]
   2e404:	2310      	movs	r3, #16
   2e406:	18fb      	adds	r3, r7, r3
   2e408:	3308      	adds	r3, #8
   2e40a:	9301      	str	r3, [sp, #4]
   2e40c:	2320      	movs	r3, #32
   2e40e:	18fb      	adds	r3, r7, r3
   2e410:	9300      	str	r3, [sp, #0]
   2e412:	002b      	movs	r3, r5
   2e414:	0022      	movs	r2, r4
   2e416:	4c58      	ldr	r4, [pc, #352]	; (2e578 <cycle+0x1dc>)
   2e418:	47a0      	blx	r4
   2e41a:	0003      	movs	r3, r0
   2e41c:	2b01      	cmp	r3, #1
   2e41e:	d000      	beq.n	2e422 <cycle+0x86>
   2e420:	e098      	b.n	2e554 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e422:	68fb      	ldr	r3, [r7, #12]
   2e424:	b2da      	uxtb	r2, r3
   2e426:	2310      	movs	r3, #16
   2e428:	18fb      	adds	r3, r7, r3
   2e42a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e42c:	2310      	movs	r3, #16
   2e42e:	18fa      	adds	r2, r7, r3
   2e430:	2320      	movs	r3, #32
   2e432:	18f9      	adds	r1, r7, r3
   2e434:	687b      	ldr	r3, [r7, #4]
   2e436:	0018      	movs	r0, r3
   2e438:	4b50      	ldr	r3, [pc, #320]	; (2e57c <cycle+0x1e0>)
   2e43a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e43c:	2310      	movs	r3, #16
   2e43e:	18fb      	adds	r3, r7, r3
   2e440:	781b      	ldrb	r3, [r3, #0]
   2e442:	2b00      	cmp	r3, #0
   2e444:	d100      	bne.n	2e448 <cycle+0xac>
   2e446:	e07d      	b.n	2e544 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e448:	2310      	movs	r3, #16
   2e44a:	18fb      	adds	r3, r7, r3
   2e44c:	781b      	ldrb	r3, [r3, #0]
   2e44e:	2b01      	cmp	r3, #1
   2e450:	d10f      	bne.n	2e472 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e452:	687b      	ldr	r3, [r7, #4]
   2e454:	6918      	ldr	r0, [r3, #16]
   2e456:	687b      	ldr	r3, [r7, #4]
   2e458:	689b      	ldr	r3, [r3, #8]
   2e45a:	0019      	movs	r1, r3
   2e45c:	2310      	movs	r3, #16
   2e45e:	18fb      	adds	r3, r7, r3
   2e460:	889b      	ldrh	r3, [r3, #4]
   2e462:	9300      	str	r3, [sp, #0]
   2e464:	2300      	movs	r3, #0
   2e466:	2204      	movs	r2, #4
   2e468:	4c45      	ldr	r4, [pc, #276]	; (2e580 <cycle+0x1e4>)
   2e46a:	47a0      	blx	r4
   2e46c:	0003      	movs	r3, r0
   2e46e:	637b      	str	r3, [r7, #52]	; 0x34
   2e470:	e013      	b.n	2e49a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e472:	2310      	movs	r3, #16
   2e474:	18fb      	adds	r3, r7, r3
   2e476:	781b      	ldrb	r3, [r3, #0]
   2e478:	2b02      	cmp	r3, #2
   2e47a:	d10e      	bne.n	2e49a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e47c:	687b      	ldr	r3, [r7, #4]
   2e47e:	6918      	ldr	r0, [r3, #16]
   2e480:	687b      	ldr	r3, [r7, #4]
   2e482:	689b      	ldr	r3, [r3, #8]
   2e484:	0019      	movs	r1, r3
   2e486:	2310      	movs	r3, #16
   2e488:	18fb      	adds	r3, r7, r3
   2e48a:	889b      	ldrh	r3, [r3, #4]
   2e48c:	9300      	str	r3, [sp, #0]
   2e48e:	2300      	movs	r3, #0
   2e490:	2205      	movs	r2, #5
   2e492:	4c3b      	ldr	r4, [pc, #236]	; (2e580 <cycle+0x1e4>)
   2e494:	47a0      	blx	r4
   2e496:	0003      	movs	r3, r0
   2e498:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e49c:	2b00      	cmp	r3, #0
   2e49e:	dc03      	bgt.n	2e4a8 <cycle+0x10c>
                    rc = FAILURE;
   2e4a0:	2301      	movs	r3, #1
   2e4a2:	425b      	negs	r3, r3
   2e4a4:	633b      	str	r3, [r7, #48]	; 0x30
   2e4a6:	e007      	b.n	2e4b8 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e4a8:	683a      	ldr	r2, [r7, #0]
   2e4aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e4ac:	687b      	ldr	r3, [r7, #4]
   2e4ae:	0018      	movs	r0, r3
   2e4b0:	4b34      	ldr	r3, [pc, #208]	; (2e584 <cycle+0x1e8>)
   2e4b2:	4798      	blx	r3
   2e4b4:	0003      	movs	r3, r0
   2e4b6:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e4ba:	3301      	adds	r3, #1
   2e4bc:	d142      	bne.n	2e544 <cycle+0x1a8>
                    goto exit; // there was a problem
   2e4be:	46c0      	nop			; (mov r8, r8)
   2e4c0:	e049      	b.n	2e556 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e4c2:	687b      	ldr	r3, [r7, #4]
   2e4c4:	695c      	ldr	r4, [r3, #20]
   2e4c6:	687b      	ldr	r3, [r7, #4]
   2e4c8:	68db      	ldr	r3, [r3, #12]
   2e4ca:	220a      	movs	r2, #10
   2e4cc:	18ba      	adds	r2, r7, r2
   2e4ce:	2109      	movs	r1, #9
   2e4d0:	1879      	adds	r1, r7, r1
   2e4d2:	2008      	movs	r0, #8
   2e4d4:	1838      	adds	r0, r7, r0
   2e4d6:	9300      	str	r3, [sp, #0]
   2e4d8:	0023      	movs	r3, r4
   2e4da:	4c2b      	ldr	r4, [pc, #172]	; (2e588 <cycle+0x1ec>)
   2e4dc:	47a0      	blx	r4
   2e4de:	0003      	movs	r3, r0
   2e4e0:	2b01      	cmp	r3, #1
   2e4e2:	d003      	beq.n	2e4ec <cycle+0x150>
                rc = FAILURE;
   2e4e4:	2301      	movs	r3, #1
   2e4e6:	425b      	negs	r3, r3
   2e4e8:	633b      	str	r3, [r7, #48]	; 0x30
   2e4ea:	e023      	b.n	2e534 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e4ec:	687b      	ldr	r3, [r7, #4]
   2e4ee:	6918      	ldr	r0, [r3, #16]
   2e4f0:	687b      	ldr	r3, [r7, #4]
   2e4f2:	689b      	ldr	r3, [r3, #8]
   2e4f4:	0019      	movs	r1, r3
   2e4f6:	230a      	movs	r3, #10
   2e4f8:	18fb      	adds	r3, r7, r3
   2e4fa:	881b      	ldrh	r3, [r3, #0]
   2e4fc:	9300      	str	r3, [sp, #0]
   2e4fe:	2300      	movs	r3, #0
   2e500:	2206      	movs	r2, #6
   2e502:	4c1f      	ldr	r4, [pc, #124]	; (2e580 <cycle+0x1e4>)
   2e504:	47a0      	blx	r4
   2e506:	0003      	movs	r3, r0
   2e508:	637b      	str	r3, [r7, #52]	; 0x34
   2e50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e50c:	2b00      	cmp	r3, #0
   2e50e:	dc03      	bgt.n	2e518 <cycle+0x17c>
                rc = FAILURE;
   2e510:	2301      	movs	r3, #1
   2e512:	425b      	negs	r3, r3
   2e514:	633b      	str	r3, [r7, #48]	; 0x30
   2e516:	e00d      	b.n	2e534 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e518:	683a      	ldr	r2, [r7, #0]
   2e51a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e51c:	687b      	ldr	r3, [r7, #4]
   2e51e:	0018      	movs	r0, r3
   2e520:	4b18      	ldr	r3, [pc, #96]	; (2e584 <cycle+0x1e8>)
   2e522:	4798      	blx	r3
   2e524:	0003      	movs	r3, r0
   2e526:	633b      	str	r3, [r7, #48]	; 0x30
   2e528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e52a:	2b00      	cmp	r3, #0
   2e52c:	d002      	beq.n	2e534 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e52e:	2301      	movs	r3, #1
   2e530:	425b      	negs	r3, r3
   2e532:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2e534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e536:	3301      	adds	r3, #1
   2e538:	d106      	bne.n	2e548 <cycle+0x1ac>
                goto exit; // there was a problem
   2e53a:	e00c      	b.n	2e556 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2e53c:	687b      	ldr	r3, [r7, #4]
   2e53e:	2200      	movs	r2, #0
   2e540:	771a      	strb	r2, [r3, #28]
            break;
   2e542:	e002      	b.n	2e54a <cycle+0x1ae>
            break;
   2e544:	46c0      	nop			; (mov r8, r8)
   2e546:	e000      	b.n	2e54a <cycle+0x1ae>
            break;
   2e548:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2e54a:	687b      	ldr	r3, [r7, #4]
   2e54c:	0018      	movs	r0, r3
   2e54e:	4b0f      	ldr	r3, [pc, #60]	; (2e58c <cycle+0x1f0>)
   2e550:	4798      	blx	r3
   2e552:	e000      	b.n	2e556 <cycle+0x1ba>
                goto exit;
   2e554:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2e556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e558:	2b00      	cmp	r3, #0
   2e55a:	d103      	bne.n	2e564 <cycle+0x1c8>
        rc = packet_type;
   2e55c:	232e      	movs	r3, #46	; 0x2e
   2e55e:	18fb      	adds	r3, r7, r3
   2e560:	881b      	ldrh	r3, [r3, #0]
   2e562:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2e564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2e566:	0018      	movs	r0, r3
   2e568:	46bd      	mov	sp, r7
   2e56a:	b00f      	add	sp, #60	; 0x3c
   2e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e56e:	46c0      	nop			; (mov r8, r8)
   2e570:	0002e051 	.word	0x0002e051
   2e574:	00038fc8 	.word	0x00038fc8
   2e578:	0002f915 	.word	0x0002f915
   2e57c:	0002e20d 	.word	0x0002e20d
   2e580:	0003010d 	.word	0x0003010d
   2e584:	0002de95 	.word	0x0002de95
   2e588:	0002fa19 	.word	0x0002fa19
   2e58c:	0002e2f9 	.word	0x0002e2f9

0002e590 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2e590:	b580      	push	{r7, lr}
   2e592:	b086      	sub	sp, #24
   2e594:	af00      	add	r7, sp, #0
   2e596:	6078      	str	r0, [r7, #4]
   2e598:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2e59a:	2300      	movs	r3, #0
   2e59c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2e59e:	2308      	movs	r3, #8
   2e5a0:	18fb      	adds	r3, r7, r3
   2e5a2:	0018      	movs	r0, r3
   2e5a4:	4b11      	ldr	r3, [pc, #68]	; (2e5ec <MQTTYield+0x5c>)
   2e5a6:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2e5a8:	683a      	ldr	r2, [r7, #0]
   2e5aa:	2308      	movs	r3, #8
   2e5ac:	18fb      	adds	r3, r7, r3
   2e5ae:	0011      	movs	r1, r2
   2e5b0:	0018      	movs	r0, r3
   2e5b2:	4b0f      	ldr	r3, [pc, #60]	; (2e5f0 <MQTTYield+0x60>)
   2e5b4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2e5b6:	2308      	movs	r3, #8
   2e5b8:	18fa      	adds	r2, r7, r3
   2e5ba:	687b      	ldr	r3, [r7, #4]
   2e5bc:	0011      	movs	r1, r2
   2e5be:	0018      	movs	r0, r3
   2e5c0:	4b0c      	ldr	r3, [pc, #48]	; (2e5f4 <MQTTYield+0x64>)
   2e5c2:	4798      	blx	r3
   2e5c4:	0003      	movs	r3, r0
   2e5c6:	3301      	adds	r3, #1
   2e5c8:	d103      	bne.n	2e5d2 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2e5ca:	2301      	movs	r3, #1
   2e5cc:	425b      	negs	r3, r3
   2e5ce:	617b      	str	r3, [r7, #20]
            break;
   2e5d0:	e006      	b.n	2e5e0 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2e5d2:	2308      	movs	r3, #8
   2e5d4:	18fb      	adds	r3, r7, r3
   2e5d6:	0018      	movs	r0, r3
   2e5d8:	4b07      	ldr	r3, [pc, #28]	; (2e5f8 <MQTTYield+0x68>)
   2e5da:	4798      	blx	r3
   2e5dc:	1e03      	subs	r3, r0, #0
   2e5de:	d0ea      	beq.n	2e5b6 <MQTTYield+0x26>
        
    return rc;
   2e5e0:	697b      	ldr	r3, [r7, #20]
}
   2e5e2:	0018      	movs	r0, r3
   2e5e4:	46bd      	mov	sp, r7
   2e5e6:	b006      	add	sp, #24
   2e5e8:	bd80      	pop	{r7, pc}
   2e5ea:	46c0      	nop			; (mov r8, r8)
   2e5ec:	0002ed1d 	.word	0x0002ed1d
   2e5f0:	0002eca5 	.word	0x0002eca5
   2e5f4:	0002e39d 	.word	0x0002e39d
   2e5f8:	0002ec79 	.word	0x0002ec79

0002e5fc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2e5fc:	b580      	push	{r7, lr}
   2e5fe:	b086      	sub	sp, #24
   2e600:	af00      	add	r7, sp, #0
   2e602:	60f8      	str	r0, [r7, #12]
   2e604:	60b9      	str	r1, [r7, #8]
   2e606:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e608:	2301      	movs	r3, #1
   2e60a:	425b      	negs	r3, r3
   2e60c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2e60e:	687b      	ldr	r3, [r7, #4]
   2e610:	0018      	movs	r0, r3
   2e612:	4b0b      	ldr	r3, [pc, #44]	; (2e640 <waitfor+0x44>)
   2e614:	4798      	blx	r3
   2e616:	1e03      	subs	r3, r0, #0
   2e618:	d10c      	bne.n	2e634 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2e61a:	687a      	ldr	r2, [r7, #4]
   2e61c:	68fb      	ldr	r3, [r7, #12]
   2e61e:	0011      	movs	r1, r2
   2e620:	0018      	movs	r0, r3
   2e622:	4b08      	ldr	r3, [pc, #32]	; (2e644 <waitfor+0x48>)
   2e624:	4798      	blx	r3
   2e626:	0003      	movs	r3, r0
   2e628:	617b      	str	r3, [r7, #20]
   2e62a:	697a      	ldr	r2, [r7, #20]
   2e62c:	68bb      	ldr	r3, [r7, #8]
   2e62e:	429a      	cmp	r2, r3
   2e630:	d1ed      	bne.n	2e60e <waitfor+0x12>
   2e632:	e000      	b.n	2e636 <waitfor+0x3a>
            break; // we timed out
   2e634:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e636:	697b      	ldr	r3, [r7, #20]
}
   2e638:	0018      	movs	r0, r3
   2e63a:	46bd      	mov	sp, r7
   2e63c:	b006      	add	sp, #24
   2e63e:	bd80      	pop	{r7, pc}
   2e640:	0002ec79 	.word	0x0002ec79
   2e644:	0002e39d 	.word	0x0002e39d

0002e648 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e648:	b590      	push	{r4, r7, lr}
   2e64a:	b09f      	sub	sp, #124	; 0x7c
   2e64c:	af00      	add	r7, sp, #0
   2e64e:	6078      	str	r0, [r7, #4]
   2e650:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e652:	2301      	movs	r3, #1
   2e654:	425b      	negs	r3, r3
   2e656:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e658:	230c      	movs	r3, #12
   2e65a:	18fa      	adds	r2, r7, r3
   2e65c:	4b41      	ldr	r3, [pc, #260]	; (2e764 <MQTTConnect+0x11c>)
   2e65e:	0010      	movs	r0, r2
   2e660:	0019      	movs	r1, r3
   2e662:	2358      	movs	r3, #88	; 0x58
   2e664:	001a      	movs	r2, r3
   2e666:	4b40      	ldr	r3, [pc, #256]	; (2e768 <MQTTConnect+0x120>)
   2e668:	4798      	blx	r3
    int len = 0;
   2e66a:	2300      	movs	r3, #0
   2e66c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e66e:	687b      	ldr	r3, [r7, #4]
   2e670:	6a1b      	ldr	r3, [r3, #32]
   2e672:	2b00      	cmp	r3, #0
   2e674:	d166      	bne.n	2e744 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e676:	2364      	movs	r3, #100	; 0x64
   2e678:	18fb      	adds	r3, r7, r3
   2e67a:	0018      	movs	r0, r3
   2e67c:	4b3b      	ldr	r3, [pc, #236]	; (2e76c <MQTTConnect+0x124>)
   2e67e:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e680:	687b      	ldr	r3, [r7, #4]
   2e682:	685a      	ldr	r2, [r3, #4]
   2e684:	2364      	movs	r3, #100	; 0x64
   2e686:	18fb      	adds	r3, r7, r3
   2e688:	0011      	movs	r1, r2
   2e68a:	0018      	movs	r0, r3
   2e68c:	4b38      	ldr	r3, [pc, #224]	; (2e770 <MQTTConnect+0x128>)
   2e68e:	4798      	blx	r3

    if (options == 0)
   2e690:	683b      	ldr	r3, [r7, #0]
   2e692:	2b00      	cmp	r3, #0
   2e694:	d102      	bne.n	2e69c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e696:	230c      	movs	r3, #12
   2e698:	18fb      	adds	r3, r7, r3
   2e69a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e69c:	683b      	ldr	r3, [r7, #0]
   2e69e:	8b1b      	ldrh	r3, [r3, #24]
   2e6a0:	001a      	movs	r2, r3
   2e6a2:	687b      	ldr	r3, [r7, #4]
   2e6a4:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e6a6:	687b      	ldr	r3, [r7, #4]
   2e6a8:	3354      	adds	r3, #84	; 0x54
   2e6aa:	001a      	movs	r2, r3
   2e6ac:	687b      	ldr	r3, [r7, #4]
   2e6ae:	699b      	ldr	r3, [r3, #24]
   2e6b0:	0019      	movs	r1, r3
   2e6b2:	0010      	movs	r0, r2
   2e6b4:	4b2f      	ldr	r3, [pc, #188]	; (2e774 <MQTTConnect+0x12c>)
   2e6b6:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e6b8:	687b      	ldr	r3, [r7, #4]
   2e6ba:	6918      	ldr	r0, [r3, #16]
   2e6bc:	687b      	ldr	r3, [r7, #4]
   2e6be:	689b      	ldr	r3, [r3, #8]
   2e6c0:	0019      	movs	r1, r3
   2e6c2:	683b      	ldr	r3, [r7, #0]
   2e6c4:	001a      	movs	r2, r3
   2e6c6:	4b2c      	ldr	r3, [pc, #176]	; (2e778 <MQTTConnect+0x130>)
   2e6c8:	4798      	blx	r3
   2e6ca:	0003      	movs	r3, r0
   2e6cc:	673b      	str	r3, [r7, #112]	; 0x70
   2e6ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e6d0:	2b00      	cmp	r3, #0
   2e6d2:	dd39      	ble.n	2e748 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2e6d4:	2364      	movs	r3, #100	; 0x64
   2e6d6:	18fa      	adds	r2, r7, r3
   2e6d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2e6da:	687b      	ldr	r3, [r7, #4]
   2e6dc:	0018      	movs	r0, r3
   2e6de:	4b27      	ldr	r3, [pc, #156]	; (2e77c <MQTTConnect+0x134>)
   2e6e0:	4798      	blx	r3
   2e6e2:	0003      	movs	r3, r0
   2e6e4:	677b      	str	r3, [r7, #116]	; 0x74
   2e6e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e6e8:	2b00      	cmp	r3, #0
   2e6ea:	d12f      	bne.n	2e74c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2e6ec:	2364      	movs	r3, #100	; 0x64
   2e6ee:	18fa      	adds	r2, r7, r3
   2e6f0:	687b      	ldr	r3, [r7, #4]
   2e6f2:	2102      	movs	r1, #2
   2e6f4:	0018      	movs	r0, r3
   2e6f6:	4b22      	ldr	r3, [pc, #136]	; (2e780 <MQTTConnect+0x138>)
   2e6f8:	4798      	blx	r3
   2e6fa:	0003      	movs	r3, r0
   2e6fc:	2b02      	cmp	r3, #2
   2e6fe:	d11d      	bne.n	2e73c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2e700:	230b      	movs	r3, #11
   2e702:	18fb      	adds	r3, r7, r3
   2e704:	22ff      	movs	r2, #255	; 0xff
   2e706:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2e708:	230a      	movs	r3, #10
   2e70a:	18fb      	adds	r3, r7, r3
   2e70c:	2200      	movs	r2, #0
   2e70e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2e710:	687b      	ldr	r3, [r7, #4]
   2e712:	695a      	ldr	r2, [r3, #20]
   2e714:	687b      	ldr	r3, [r7, #4]
   2e716:	68db      	ldr	r3, [r3, #12]
   2e718:	210b      	movs	r1, #11
   2e71a:	1879      	adds	r1, r7, r1
   2e71c:	200a      	movs	r0, #10
   2e71e:	1838      	adds	r0, r7, r0
   2e720:	4c18      	ldr	r4, [pc, #96]	; (2e784 <MQTTConnect+0x13c>)
   2e722:	47a0      	blx	r4
   2e724:	0003      	movs	r3, r0
   2e726:	2b01      	cmp	r3, #1
   2e728:	d104      	bne.n	2e734 <MQTTConnect+0xec>
            rc = connack_rc;
   2e72a:	230b      	movs	r3, #11
   2e72c:	18fb      	adds	r3, r7, r3
   2e72e:	781b      	ldrb	r3, [r3, #0]
   2e730:	677b      	str	r3, [r7, #116]	; 0x74
   2e732:	e00c      	b.n	2e74e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2e734:	2301      	movs	r3, #1
   2e736:	425b      	negs	r3, r3
   2e738:	677b      	str	r3, [r7, #116]	; 0x74
   2e73a:	e008      	b.n	2e74e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2e73c:	2301      	movs	r3, #1
   2e73e:	425b      	negs	r3, r3
   2e740:	677b      	str	r3, [r7, #116]	; 0x74
   2e742:	e004      	b.n	2e74e <MQTTConnect+0x106>
		goto exit;
   2e744:	46c0      	nop			; (mov r8, r8)
   2e746:	e002      	b.n	2e74e <MQTTConnect+0x106>
        goto exit;
   2e748:	46c0      	nop			; (mov r8, r8)
   2e74a:	e000      	b.n	2e74e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2e74c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2e74e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e750:	2b00      	cmp	r3, #0
   2e752:	d102      	bne.n	2e75a <MQTTConnect+0x112>
        c->isconnected = 1;
   2e754:	687b      	ldr	r3, [r7, #4]
   2e756:	2201      	movs	r2, #1
   2e758:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2e75a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2e75c:	0018      	movs	r0, r3
   2e75e:	46bd      	mov	sp, r7
   2e760:	b01f      	add	sp, #124	; 0x7c
   2e762:	bd90      	pop	{r4, r7, pc}
   2e764:	00039000 	.word	0x00039000
   2e768:	0003400d 	.word	0x0003400d
   2e76c:	0002ed1d 	.word	0x0002ed1d
   2e770:	0002eca5 	.word	0x0002eca5
   2e774:	0002eccd 	.word	0x0002eccd
   2e778:	0002f4f9 	.word	0x0002f4f9
   2e77c:	0002de95 	.word	0x0002de95
   2e780:	0002e5fd 	.word	0x0002e5fd
   2e784:	0002f775 	.word	0x0002f775

0002e788 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2e788:	b5b0      	push	{r4, r5, r7, lr}
   2e78a:	b096      	sub	sp, #88	; 0x58
   2e78c:	af04      	add	r7, sp, #16
   2e78e:	60f8      	str	r0, [r7, #12]
   2e790:	60b9      	str	r1, [r7, #8]
   2e792:	603b      	str	r3, [r7, #0]
   2e794:	1dfb      	adds	r3, r7, #7
   2e796:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2e798:	2301      	movs	r3, #1
   2e79a:	425b      	negs	r3, r3
   2e79c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2e79e:	2300      	movs	r3, #0
   2e7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2e7a2:	2324      	movs	r3, #36	; 0x24
   2e7a4:	18fb      	adds	r3, r7, r3
   2e7a6:	2200      	movs	r2, #0
   2e7a8:	601a      	str	r2, [r3, #0]
   2e7aa:	2324      	movs	r3, #36	; 0x24
   2e7ac:	18fb      	adds	r3, r7, r3
   2e7ae:	2200      	movs	r2, #0
   2e7b0:	605a      	str	r2, [r3, #4]
   2e7b2:	2324      	movs	r3, #36	; 0x24
   2e7b4:	18fb      	adds	r3, r7, r3
   2e7b6:	2200      	movs	r2, #0
   2e7b8:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2e7ba:	1dfb      	adds	r3, r7, #7
   2e7bc:	781b      	ldrb	r3, [r3, #0]
   2e7be:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2e7c0:	2324      	movs	r3, #36	; 0x24
   2e7c2:	18fb      	adds	r3, r7, r3
   2e7c4:	68ba      	ldr	r2, [r7, #8]
   2e7c6:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e7c8:	68fb      	ldr	r3, [r7, #12]
   2e7ca:	6a1b      	ldr	r3, [r3, #32]
   2e7cc:	2b00      	cmp	r3, #0
   2e7ce:	d100      	bne.n	2e7d2 <MQTTSubscribe+0x4a>
   2e7d0:	e088      	b.n	2e8e4 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e7d2:	2330      	movs	r3, #48	; 0x30
   2e7d4:	18fb      	adds	r3, r7, r3
   2e7d6:	0018      	movs	r0, r3
   2e7d8:	4b47      	ldr	r3, [pc, #284]	; (2e8f8 <MQTTSubscribe+0x170>)
   2e7da:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e7dc:	68fb      	ldr	r3, [r7, #12]
   2e7de:	685a      	ldr	r2, [r3, #4]
   2e7e0:	2330      	movs	r3, #48	; 0x30
   2e7e2:	18fb      	adds	r3, r7, r3
   2e7e4:	0011      	movs	r1, r2
   2e7e6:	0018      	movs	r0, r3
   2e7e8:	4b44      	ldr	r3, [pc, #272]	; (2e8fc <MQTTSubscribe+0x174>)
   2e7ea:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e7ec:	68fb      	ldr	r3, [r7, #12]
   2e7ee:	691c      	ldr	r4, [r3, #16]
   2e7f0:	68fb      	ldr	r3, [r7, #12]
   2e7f2:	689b      	ldr	r3, [r3, #8]
   2e7f4:	001d      	movs	r5, r3
   2e7f6:	68fb      	ldr	r3, [r7, #12]
   2e7f8:	0018      	movs	r0, r3
   2e7fa:	4b41      	ldr	r3, [pc, #260]	; (2e900 <MQTTSubscribe+0x178>)
   2e7fc:	4798      	blx	r3
   2e7fe:	0003      	movs	r3, r0
   2e800:	b29a      	uxth	r2, r3
   2e802:	2320      	movs	r3, #32
   2e804:	18fb      	adds	r3, r7, r3
   2e806:	9302      	str	r3, [sp, #8]
   2e808:	2324      	movs	r3, #36	; 0x24
   2e80a:	18fb      	adds	r3, r7, r3
   2e80c:	9301      	str	r3, [sp, #4]
   2e80e:	2301      	movs	r3, #1
   2e810:	9300      	str	r3, [sp, #0]
   2e812:	0013      	movs	r3, r2
   2e814:	2200      	movs	r2, #0
   2e816:	0029      	movs	r1, r5
   2e818:	0020      	movs	r0, r4
   2e81a:	4c3a      	ldr	r4, [pc, #232]	; (2e904 <MQTTSubscribe+0x17c>)
   2e81c:	47a0      	blx	r4
   2e81e:	0003      	movs	r3, r0
   2e820:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e824:	2b00      	cmp	r3, #0
   2e826:	dd5f      	ble.n	2e8e8 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e828:	2330      	movs	r3, #48	; 0x30
   2e82a:	18fa      	adds	r2, r7, r3
   2e82c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e82e:	68fb      	ldr	r3, [r7, #12]
   2e830:	0018      	movs	r0, r3
   2e832:	4b35      	ldr	r3, [pc, #212]	; (2e908 <MQTTSubscribe+0x180>)
   2e834:	4798      	blx	r3
   2e836:	0003      	movs	r3, r0
   2e838:	647b      	str	r3, [r7, #68]	; 0x44
   2e83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e83c:	2b00      	cmp	r3, #0
   2e83e:	d155      	bne.n	2e8ec <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e840:	2330      	movs	r3, #48	; 0x30
   2e842:	18fa      	adds	r2, r7, r3
   2e844:	68fb      	ldr	r3, [r7, #12]
   2e846:	2109      	movs	r1, #9
   2e848:	0018      	movs	r0, r3
   2e84a:	4b30      	ldr	r3, [pc, #192]	; (2e90c <MQTTSubscribe+0x184>)
   2e84c:	4798      	blx	r3
   2e84e:	0003      	movs	r3, r0
   2e850:	2b09      	cmp	r3, #9
   2e852:	d143      	bne.n	2e8dc <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e854:	2300      	movs	r3, #0
   2e856:	61fb      	str	r3, [r7, #28]
   2e858:	2301      	movs	r3, #1
   2e85a:	425b      	negs	r3, r3
   2e85c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e85e:	68fb      	ldr	r3, [r7, #12]
   2e860:	695a      	ldr	r2, [r3, #20]
   2e862:	68fb      	ldr	r3, [r7, #12]
   2e864:	68db      	ldr	r3, [r3, #12]
   2e866:	001c      	movs	r4, r3
   2e868:	2318      	movs	r3, #24
   2e86a:	18fb      	adds	r3, r7, r3
   2e86c:	211c      	movs	r1, #28
   2e86e:	1879      	adds	r1, r7, r1
   2e870:	2016      	movs	r0, #22
   2e872:	1838      	adds	r0, r7, r0
   2e874:	9401      	str	r4, [sp, #4]
   2e876:	9200      	str	r2, [sp, #0]
   2e878:	000a      	movs	r2, r1
   2e87a:	2101      	movs	r1, #1
   2e87c:	4c24      	ldr	r4, [pc, #144]	; (2e910 <MQTTSubscribe+0x188>)
   2e87e:	47a0      	blx	r4
   2e880:	0003      	movs	r3, r0
   2e882:	2b01      	cmp	r3, #1
   2e884:	d101      	bne.n	2e88a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e886:	69bb      	ldr	r3, [r7, #24]
   2e888:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e88c:	2b80      	cmp	r3, #128	; 0x80
   2e88e:	d02e      	beq.n	2e8ee <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e890:	2300      	movs	r3, #0
   2e892:	643b      	str	r3, [r7, #64]	; 0x40
   2e894:	e01e      	b.n	2e8d4 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e896:	68fa      	ldr	r2, [r7, #12]
   2e898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e89a:	3304      	adds	r3, #4
   2e89c:	00db      	lsls	r3, r3, #3
   2e89e:	18d3      	adds	r3, r2, r3
   2e8a0:	3304      	adds	r3, #4
   2e8a2:	681b      	ldr	r3, [r3, #0]
   2e8a4:	2b00      	cmp	r3, #0
   2e8a6:	d112      	bne.n	2e8ce <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e8a8:	68fa      	ldr	r2, [r7, #12]
   2e8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8ac:	3304      	adds	r3, #4
   2e8ae:	00db      	lsls	r3, r3, #3
   2e8b0:	18d3      	adds	r3, r2, r3
   2e8b2:	3304      	adds	r3, #4
   2e8b4:	68ba      	ldr	r2, [r7, #8]
   2e8b6:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e8b8:	68fa      	ldr	r2, [r7, #12]
   2e8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8bc:	3304      	adds	r3, #4
   2e8be:	00db      	lsls	r3, r3, #3
   2e8c0:	18d3      	adds	r3, r2, r3
   2e8c2:	3308      	adds	r3, #8
   2e8c4:	683a      	ldr	r2, [r7, #0]
   2e8c6:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e8c8:	2300      	movs	r3, #0
   2e8ca:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e8cc:	e00f      	b.n	2e8ee <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8d0:	3301      	adds	r3, #1
   2e8d2:	643b      	str	r3, [r7, #64]	; 0x40
   2e8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8d6:	2b04      	cmp	r3, #4
   2e8d8:	dddd      	ble.n	2e896 <MQTTSubscribe+0x10e>
   2e8da:	e008      	b.n	2e8ee <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e8dc:	2301      	movs	r3, #1
   2e8de:	425b      	negs	r3, r3
   2e8e0:	647b      	str	r3, [r7, #68]	; 0x44
   2e8e2:	e004      	b.n	2e8ee <MQTTSubscribe+0x166>
		goto exit;
   2e8e4:	46c0      	nop			; (mov r8, r8)
   2e8e6:	e002      	b.n	2e8ee <MQTTSubscribe+0x166>
        goto exit;
   2e8e8:	46c0      	nop			; (mov r8, r8)
   2e8ea:	e000      	b.n	2e8ee <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e8ec:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e8f0:	0018      	movs	r0, r3
   2e8f2:	46bd      	mov	sp, r7
   2e8f4:	b012      	add	sp, #72	; 0x48
   2e8f6:	bdb0      	pop	{r4, r5, r7, pc}
   2e8f8:	0002ed1d 	.word	0x0002ed1d
   2e8fc:	0002eca5 	.word	0x0002eca5
   2e900:	0002de65 	.word	0x0002de65
   2e904:	00030255 	.word	0x00030255
   2e908:	0002de95 	.word	0x0002de95
   2e90c:	0002e5fd 	.word	0x0002e5fd
   2e910:	000303a5 	.word	0x000303a5

0002e914 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e914:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e916:	46ce      	mov	lr, r9
   2e918:	4647      	mov	r7, r8
   2e91a:	b580      	push	{r7, lr}
   2e91c:	b097      	sub	sp, #92	; 0x5c
   2e91e:	af08      	add	r7, sp, #32
   2e920:	60f8      	str	r0, [r7, #12]
   2e922:	60b9      	str	r1, [r7, #8]
   2e924:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e926:	2301      	movs	r3, #1
   2e928:	425b      	negs	r3, r3
   2e92a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e92c:	2318      	movs	r3, #24
   2e92e:	18fb      	adds	r3, r7, r3
   2e930:	2200      	movs	r2, #0
   2e932:	601a      	str	r2, [r3, #0]
   2e934:	2318      	movs	r3, #24
   2e936:	18fb      	adds	r3, r7, r3
   2e938:	2200      	movs	r2, #0
   2e93a:	605a      	str	r2, [r3, #4]
   2e93c:	2318      	movs	r3, #24
   2e93e:	18fb      	adds	r3, r7, r3
   2e940:	2200      	movs	r2, #0
   2e942:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e944:	2318      	movs	r3, #24
   2e946:	18fb      	adds	r3, r7, r3
   2e948:	68ba      	ldr	r2, [r7, #8]
   2e94a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e94c:	2300      	movs	r3, #0
   2e94e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e950:	68fb      	ldr	r3, [r7, #12]
   2e952:	6a1b      	ldr	r3, [r3, #32]
   2e954:	2b00      	cmp	r3, #0
   2e956:	d100      	bne.n	2e95a <MQTTPublish+0x46>
   2e958:	e0a0      	b.n	2ea9c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e95a:	2324      	movs	r3, #36	; 0x24
   2e95c:	18fb      	adds	r3, r7, r3
   2e95e:	0018      	movs	r0, r3
   2e960:	4b55      	ldr	r3, [pc, #340]	; (2eab8 <MQTTPublish+0x1a4>)
   2e962:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e964:	68fb      	ldr	r3, [r7, #12]
   2e966:	685a      	ldr	r2, [r3, #4]
   2e968:	2324      	movs	r3, #36	; 0x24
   2e96a:	18fb      	adds	r3, r7, r3
   2e96c:	0011      	movs	r1, r2
   2e96e:	0018      	movs	r0, r3
   2e970:	4b52      	ldr	r3, [pc, #328]	; (2eabc <MQTTPublish+0x1a8>)
   2e972:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e974:	687b      	ldr	r3, [r7, #4]
   2e976:	781b      	ldrb	r3, [r3, #0]
   2e978:	2b01      	cmp	r3, #1
   2e97a:	d003      	beq.n	2e984 <MQTTPublish+0x70>
   2e97c:	687b      	ldr	r3, [r7, #4]
   2e97e:	781b      	ldrb	r3, [r3, #0]
   2e980:	2b02      	cmp	r3, #2
   2e982:	d107      	bne.n	2e994 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e984:	68fb      	ldr	r3, [r7, #12]
   2e986:	0018      	movs	r0, r3
   2e988:	4b4d      	ldr	r3, [pc, #308]	; (2eac0 <MQTTPublish+0x1ac>)
   2e98a:	4798      	blx	r3
   2e98c:	0003      	movs	r3, r0
   2e98e:	b29a      	uxth	r2, r3
   2e990:	687b      	ldr	r3, [r7, #4]
   2e992:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e994:	68fb      	ldr	r3, [r7, #12]
   2e996:	691b      	ldr	r3, [r3, #16]
   2e998:	469c      	mov	ip, r3
   2e99a:	68fb      	ldr	r3, [r7, #12]
   2e99c:	689b      	ldr	r3, [r3, #8]
   2e99e:	001d      	movs	r5, r3
   2e9a0:	687b      	ldr	r3, [r7, #4]
   2e9a2:	781b      	ldrb	r3, [r3, #0]
   2e9a4:	001e      	movs	r6, r3
   2e9a6:	687b      	ldr	r3, [r7, #4]
   2e9a8:	785b      	ldrb	r3, [r3, #1]
   2e9aa:	4698      	mov	r8, r3
   2e9ac:	687b      	ldr	r3, [r7, #4]
   2e9ae:	889b      	ldrh	r3, [r3, #4]
   2e9b0:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e9b2:	687b      	ldr	r3, [r7, #4]
   2e9b4:	689a      	ldr	r2, [r3, #8]
   2e9b6:	687b      	ldr	r3, [r7, #4]
   2e9b8:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e9ba:	9306      	str	r3, [sp, #24]
   2e9bc:	9205      	str	r2, [sp, #20]
   2e9be:	2318      	movs	r3, #24
   2e9c0:	18fa      	adds	r2, r7, r3
   2e9c2:	2308      	movs	r3, #8
   2e9c4:	446b      	add	r3, sp
   2e9c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e9c8:	c313      	stmia	r3!, {r0, r1, r4}
   2e9ca:	464b      	mov	r3, r9
   2e9cc:	9301      	str	r3, [sp, #4]
   2e9ce:	4643      	mov	r3, r8
   2e9d0:	9300      	str	r3, [sp, #0]
   2e9d2:	0033      	movs	r3, r6
   2e9d4:	2200      	movs	r2, #0
   2e9d6:	0029      	movs	r1, r5
   2e9d8:	4660      	mov	r0, ip
   2e9da:	4c3a      	ldr	r4, [pc, #232]	; (2eac4 <MQTTPublish+0x1b0>)
   2e9dc:	47a0      	blx	r4
   2e9de:	0003      	movs	r3, r0
   2e9e0:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e9e4:	2b00      	cmp	r3, #0
   2e9e6:	dd5b      	ble.n	2eaa0 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e9e8:	2324      	movs	r3, #36	; 0x24
   2e9ea:	18fa      	adds	r2, r7, r3
   2e9ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e9ee:	68fb      	ldr	r3, [r7, #12]
   2e9f0:	0018      	movs	r0, r3
   2e9f2:	4b35      	ldr	r3, [pc, #212]	; (2eac8 <MQTTPublish+0x1b4>)
   2e9f4:	4798      	blx	r3
   2e9f6:	0003      	movs	r3, r0
   2e9f8:	637b      	str	r3, [r7, #52]	; 0x34
   2e9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e9fc:	2b00      	cmp	r3, #0
   2e9fe:	d151      	bne.n	2eaa4 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2ea00:	687b      	ldr	r3, [r7, #4]
   2ea02:	781b      	ldrb	r3, [r3, #0]
   2ea04:	2b01      	cmp	r3, #1
   2ea06:	d122      	bne.n	2ea4e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2ea08:	2324      	movs	r3, #36	; 0x24
   2ea0a:	18fa      	adds	r2, r7, r3
   2ea0c:	68fb      	ldr	r3, [r7, #12]
   2ea0e:	2104      	movs	r1, #4
   2ea10:	0018      	movs	r0, r3
   2ea12:	4b2e      	ldr	r3, [pc, #184]	; (2eacc <MQTTPublish+0x1b8>)
   2ea14:	4798      	blx	r3
   2ea16:	0003      	movs	r3, r0
   2ea18:	2b04      	cmp	r3, #4
   2ea1a:	d114      	bne.n	2ea46 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ea1c:	68fb      	ldr	r3, [r7, #12]
   2ea1e:	695c      	ldr	r4, [r3, #20]
   2ea20:	68fb      	ldr	r3, [r7, #12]
   2ea22:	68db      	ldr	r3, [r3, #12]
   2ea24:	2216      	movs	r2, #22
   2ea26:	18ba      	adds	r2, r7, r2
   2ea28:	2115      	movs	r1, #21
   2ea2a:	1879      	adds	r1, r7, r1
   2ea2c:	2014      	movs	r0, #20
   2ea2e:	1838      	adds	r0, r7, r0
   2ea30:	9300      	str	r3, [sp, #0]
   2ea32:	0023      	movs	r3, r4
   2ea34:	4c26      	ldr	r4, [pc, #152]	; (2ead0 <MQTTPublish+0x1bc>)
   2ea36:	47a0      	blx	r4
   2ea38:	0003      	movs	r3, r0
   2ea3a:	2b01      	cmp	r3, #1
   2ea3c:	d033      	beq.n	2eaa6 <MQTTPublish+0x192>
                rc = FAILURE;
   2ea3e:	2301      	movs	r3, #1
   2ea40:	425b      	negs	r3, r3
   2ea42:	637b      	str	r3, [r7, #52]	; 0x34
   2ea44:	e02f      	b.n	2eaa6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ea46:	2301      	movs	r3, #1
   2ea48:	425b      	negs	r3, r3
   2ea4a:	637b      	str	r3, [r7, #52]	; 0x34
   2ea4c:	e02b      	b.n	2eaa6 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2ea4e:	687b      	ldr	r3, [r7, #4]
   2ea50:	781b      	ldrb	r3, [r3, #0]
   2ea52:	2b02      	cmp	r3, #2
   2ea54:	d127      	bne.n	2eaa6 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2ea56:	2324      	movs	r3, #36	; 0x24
   2ea58:	18fa      	adds	r2, r7, r3
   2ea5a:	68fb      	ldr	r3, [r7, #12]
   2ea5c:	2107      	movs	r1, #7
   2ea5e:	0018      	movs	r0, r3
   2ea60:	4b1a      	ldr	r3, [pc, #104]	; (2eacc <MQTTPublish+0x1b8>)
   2ea62:	4798      	blx	r3
   2ea64:	0003      	movs	r3, r0
   2ea66:	2b07      	cmp	r3, #7
   2ea68:	d114      	bne.n	2ea94 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ea6a:	68fb      	ldr	r3, [r7, #12]
   2ea6c:	695c      	ldr	r4, [r3, #20]
   2ea6e:	68fb      	ldr	r3, [r7, #12]
   2ea70:	68db      	ldr	r3, [r3, #12]
   2ea72:	2212      	movs	r2, #18
   2ea74:	18ba      	adds	r2, r7, r2
   2ea76:	2111      	movs	r1, #17
   2ea78:	1879      	adds	r1, r7, r1
   2ea7a:	2010      	movs	r0, #16
   2ea7c:	1838      	adds	r0, r7, r0
   2ea7e:	9300      	str	r3, [sp, #0]
   2ea80:	0023      	movs	r3, r4
   2ea82:	4c13      	ldr	r4, [pc, #76]	; (2ead0 <MQTTPublish+0x1bc>)
   2ea84:	47a0      	blx	r4
   2ea86:	0003      	movs	r3, r0
   2ea88:	2b01      	cmp	r3, #1
   2ea8a:	d00c      	beq.n	2eaa6 <MQTTPublish+0x192>
                rc = FAILURE;
   2ea8c:	2301      	movs	r3, #1
   2ea8e:	425b      	negs	r3, r3
   2ea90:	637b      	str	r3, [r7, #52]	; 0x34
   2ea92:	e008      	b.n	2eaa6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ea94:	2301      	movs	r3, #1
   2ea96:	425b      	negs	r3, r3
   2ea98:	637b      	str	r3, [r7, #52]	; 0x34
   2ea9a:	e004      	b.n	2eaa6 <MQTTPublish+0x192>
		goto exit;
   2ea9c:	46c0      	nop			; (mov r8, r8)
   2ea9e:	e002      	b.n	2eaa6 <MQTTPublish+0x192>
        goto exit;
   2eaa0:	46c0      	nop			; (mov r8, r8)
   2eaa2:	e000      	b.n	2eaa6 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2eaa4:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2eaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2eaa8:	0018      	movs	r0, r3
   2eaaa:	46bd      	mov	sp, r7
   2eaac:	b00f      	add	sp, #60	; 0x3c
   2eaae:	bc0c      	pop	{r2, r3}
   2eab0:	4690      	mov	r8, r2
   2eab2:	4699      	mov	r9, r3
   2eab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eab6:	46c0      	nop			; (mov r8, r8)
   2eab8:	0002ed1d 	.word	0x0002ed1d
   2eabc:	0002eca5 	.word	0x0002eca5
   2eac0:	0002de65 	.word	0x0002de65
   2eac4:	0002ffa1 	.word	0x0002ffa1
   2eac8:	0002de95 	.word	0x0002de95
   2eacc:	0002e5fd 	.word	0x0002e5fd
   2ead0:	0002fa19 	.word	0x0002fa19

0002ead4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2ead4:	b580      	push	{r7, lr}
   2ead6:	b088      	sub	sp, #32
   2ead8:	af00      	add	r7, sp, #0
   2eada:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2eadc:	2301      	movs	r3, #1
   2eade:	425b      	negs	r3, r3
   2eae0:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2eae2:	2300      	movs	r3, #0
   2eae4:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2eae6:	230c      	movs	r3, #12
   2eae8:	18fb      	adds	r3, r7, r3
   2eaea:	0018      	movs	r0, r3
   2eaec:	4b13      	ldr	r3, [pc, #76]	; (2eb3c <MQTTDisconnect+0x68>)
   2eaee:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2eaf0:	687b      	ldr	r3, [r7, #4]
   2eaf2:	685a      	ldr	r2, [r3, #4]
   2eaf4:	230c      	movs	r3, #12
   2eaf6:	18fb      	adds	r3, r7, r3
   2eaf8:	0011      	movs	r1, r2
   2eafa:	0018      	movs	r0, r3
   2eafc:	4b10      	ldr	r3, [pc, #64]	; (2eb40 <MQTTDisconnect+0x6c>)
   2eafe:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2eb00:	687b      	ldr	r3, [r7, #4]
   2eb02:	691a      	ldr	r2, [r3, #16]
   2eb04:	687b      	ldr	r3, [r7, #4]
   2eb06:	689b      	ldr	r3, [r3, #8]
   2eb08:	0019      	movs	r1, r3
   2eb0a:	0010      	movs	r0, r2
   2eb0c:	4b0d      	ldr	r3, [pc, #52]	; (2eb44 <MQTTDisconnect+0x70>)
   2eb0e:	4798      	blx	r3
   2eb10:	0003      	movs	r3, r0
   2eb12:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2eb14:	69bb      	ldr	r3, [r7, #24]
   2eb16:	2b00      	cmp	r3, #0
   2eb18:	dd08      	ble.n	2eb2c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2eb1a:	230c      	movs	r3, #12
   2eb1c:	18fa      	adds	r2, r7, r3
   2eb1e:	69b9      	ldr	r1, [r7, #24]
   2eb20:	687b      	ldr	r3, [r7, #4]
   2eb22:	0018      	movs	r0, r3
   2eb24:	4b08      	ldr	r3, [pc, #32]	; (2eb48 <MQTTDisconnect+0x74>)
   2eb26:	4798      	blx	r3
   2eb28:	0003      	movs	r3, r0
   2eb2a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2eb2c:	687b      	ldr	r3, [r7, #4]
   2eb2e:	2200      	movs	r2, #0
   2eb30:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2eb32:	69fb      	ldr	r3, [r7, #28]
}
   2eb34:	0018      	movs	r0, r3
   2eb36:	46bd      	mov	sp, r7
   2eb38:	b008      	add	sp, #32
   2eb3a:	bd80      	pop	{r7, pc}
   2eb3c:	0002ed1d 	.word	0x0002ed1d
   2eb40:	0002eca5 	.word	0x0002eca5
   2eb44:	0002f8cd 	.word	0x0002f8cd
   2eb48:	0002de95 	.word	0x0002de95

0002eb4c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2eb4c:	b580      	push	{r7, lr}
   2eb4e:	b084      	sub	sp, #16
   2eb50:	af00      	add	r7, sp, #0
   2eb52:	0002      	movs	r2, r0
   2eb54:	1dfb      	adds	r3, r7, #7
   2eb56:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eb58:	2300      	movs	r3, #0
   2eb5a:	60fb      	str	r3, [r7, #12]
   2eb5c:	e01c      	b.n	2eb98 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2eb5e:	4a12      	ldr	r2, [pc, #72]	; (2eba8 <isMQTTSocket+0x5c>)
   2eb60:	68fb      	ldr	r3, [r7, #12]
   2eb62:	2164      	movs	r1, #100	; 0x64
   2eb64:	434b      	muls	r3, r1
   2eb66:	18d3      	adds	r3, r2, r3
   2eb68:	3360      	adds	r3, #96	; 0x60
   2eb6a:	681b      	ldr	r3, [r3, #0]
   2eb6c:	2b00      	cmp	r3, #0
   2eb6e:	d010      	beq.n	2eb92 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2eb70:	4a0d      	ldr	r2, [pc, #52]	; (2eba8 <isMQTTSocket+0x5c>)
   2eb72:	68fb      	ldr	r3, [r7, #12]
   2eb74:	2164      	movs	r1, #100	; 0x64
   2eb76:	434b      	muls	r3, r1
   2eb78:	18d3      	adds	r3, r2, r3
   2eb7a:	3360      	adds	r3, #96	; 0x60
   2eb7c:	681b      	ldr	r3, [r3, #0]
   2eb7e:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2eb80:	68bb      	ldr	r3, [r7, #8]
   2eb82:	6a1a      	ldr	r2, [r3, #32]
   2eb84:	1dfb      	adds	r3, r7, #7
   2eb86:	781b      	ldrb	r3, [r3, #0]
   2eb88:	b25b      	sxtb	r3, r3
   2eb8a:	429a      	cmp	r2, r3
   2eb8c:	d101      	bne.n	2eb92 <isMQTTSocket+0x46>
				return true;
   2eb8e:	2301      	movs	r3, #1
   2eb90:	e006      	b.n	2eba0 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eb92:	68fb      	ldr	r3, [r7, #12]
   2eb94:	3301      	adds	r3, #1
   2eb96:	60fb      	str	r3, [r7, #12]
   2eb98:	68fb      	ldr	r3, [r7, #12]
   2eb9a:	2b06      	cmp	r3, #6
   2eb9c:	d9df      	bls.n	2eb5e <isMQTTSocket+0x12>
		}
	}
	return false;
   2eb9e:	2300      	movs	r3, #0
}
   2eba0:	0018      	movs	r0, r3
   2eba2:	46bd      	mov	sp, r7
   2eba4:	b004      	add	sp, #16
   2eba6:	bd80      	pop	{r7, pc}
   2eba8:	20004290 	.word	0x20004290

0002ebac <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2ebac:	b580      	push	{r7, lr}
   2ebae:	b082      	sub	sp, #8
   2ebb0:	af00      	add	r7, sp, #0
   2ebb2:	6078      	str	r0, [r7, #4]
   2ebb4:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2ebb6:	4b0d      	ldr	r3, [pc, #52]	; (2ebec <dnsResolveCallback+0x40>)
   2ebb8:	781b      	ldrb	r3, [r3, #0]
   2ebba:	2201      	movs	r2, #1
   2ebbc:	4053      	eors	r3, r2
   2ebbe:	b2db      	uxtb	r3, r3
   2ebc0:	2b00      	cmp	r3, #0
   2ebc2:	d00e      	beq.n	2ebe2 <dnsResolveCallback+0x36>
   2ebc4:	4b0a      	ldr	r3, [pc, #40]	; (2ebf0 <dnsResolveCallback+0x44>)
   2ebc6:	681b      	ldr	r3, [r3, #0]
   2ebc8:	687a      	ldr	r2, [r7, #4]
   2ebca:	0011      	movs	r1, r2
   2ebcc:	0018      	movs	r0, r3
   2ebce:	4b09      	ldr	r3, [pc, #36]	; (2ebf4 <dnsResolveCallback+0x48>)
   2ebd0:	4798      	blx	r3
   2ebd2:	1e03      	subs	r3, r0, #0
   2ebd4:	d105      	bne.n	2ebe2 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ebd6:	683a      	ldr	r2, [r7, #0]
   2ebd8:	4b07      	ldr	r3, [pc, #28]	; (2ebf8 <dnsResolveCallback+0x4c>)
   2ebda:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ebdc:	4b03      	ldr	r3, [pc, #12]	; (2ebec <dnsResolveCallback+0x40>)
   2ebde:	2201      	movs	r2, #1
   2ebe0:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ebe2:	46c0      	nop			; (mov r8, r8)
   2ebe4:	46bd      	mov	sp, r7
   2ebe6:	b002      	add	sp, #8
   2ebe8:	bd80      	pop	{r7, pc}
   2ebea:	46c0      	nop			; (mov r8, r8)
   2ebec:	20004180 	.word	0x20004180
   2ebf0:	2000428c 	.word	0x2000428c
   2ebf4:	0003439b 	.word	0x0003439b
   2ebf8:	20004178 	.word	0x20004178

0002ebfc <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ebfc:	b580      	push	{r7, lr}
   2ebfe:	b084      	sub	sp, #16
   2ec00:	af00      	add	r7, sp, #0
   2ec02:	603a      	str	r2, [r7, #0]
   2ec04:	1dfb      	adds	r3, r7, #7
   2ec06:	1c02      	adds	r2, r0, #0
   2ec08:	701a      	strb	r2, [r3, #0]
   2ec0a:	1dbb      	adds	r3, r7, #6
   2ec0c:	1c0a      	adds	r2, r1, #0
   2ec0e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ec10:	1dfb      	adds	r3, r7, #7
   2ec12:	781b      	ldrb	r3, [r3, #0]
   2ec14:	b25b      	sxtb	r3, r3
   2ec16:	0018      	movs	r0, r3
   2ec18:	4b12      	ldr	r3, [pc, #72]	; (2ec64 <tcpClientSocketEventHandler+0x68>)
   2ec1a:	4798      	blx	r3
   2ec1c:	1e03      	subs	r3, r0, #0
   2ec1e:	d01c      	beq.n	2ec5a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ec20:	1dbb      	adds	r3, r7, #6
   2ec22:	781b      	ldrb	r3, [r3, #0]
   2ec24:	2b06      	cmp	r3, #6
   2ec26:	d00c      	beq.n	2ec42 <tcpClientSocketEventHandler+0x46>
   2ec28:	2b07      	cmp	r3, #7
   2ec2a:	d006      	beq.n	2ec3a <tcpClientSocketEventHandler+0x3e>
   2ec2c:	2b05      	cmp	r3, #5
   2ec2e:	d000      	beq.n	2ec32 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ec30:	e013      	b.n	2ec5a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ec32:	4b0d      	ldr	r3, [pc, #52]	; (2ec68 <tcpClientSocketEventHandler+0x6c>)
   2ec34:	2201      	movs	r2, #1
   2ec36:	701a      	strb	r2, [r3, #0]
			break;
   2ec38:	e00f      	b.n	2ec5a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ec3a:	4b0c      	ldr	r3, [pc, #48]	; (2ec6c <tcpClientSocketEventHandler+0x70>)
   2ec3c:	2201      	movs	r2, #1
   2ec3e:	701a      	strb	r2, [r3, #0]
			break;
   2ec40:	e00b      	b.n	2ec5a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ec42:	683b      	ldr	r3, [r7, #0]
   2ec44:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ec46:	68fb      	ldr	r3, [r7, #12]
   2ec48:	2204      	movs	r2, #4
   2ec4a:	5e9b      	ldrsh	r3, [r3, r2]
   2ec4c:	001a      	movs	r2, r3
   2ec4e:	4b08      	ldr	r3, [pc, #32]	; (2ec70 <tcpClientSocketEventHandler+0x74>)
   2ec50:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ec52:	4b08      	ldr	r3, [pc, #32]	; (2ec74 <tcpClientSocketEventHandler+0x78>)
   2ec54:	2201      	movs	r2, #1
   2ec56:	701a      	strb	r2, [r3, #0]
			break;
   2ec58:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ec5a:	46c0      	nop			; (mov r8, r8)
   2ec5c:	46bd      	mov	sp, r7
   2ec5e:	b004      	add	sp, #16
   2ec60:	bd80      	pop	{r7, pc}
   2ec62:	46c0      	nop			; (mov r8, r8)
   2ec64:	0002eb4d 	.word	0x0002eb4d
   2ec68:	20004181 	.word	0x20004181
   2ec6c:	20004182 	.word	0x20004182
   2ec70:	2000417c 	.word	0x2000417c
   2ec74:	20004183 	.word	0x20004183

0002ec78 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2ec78:	b580      	push	{r7, lr}
   2ec7a:	b082      	sub	sp, #8
   2ec7c:	af00      	add	r7, sp, #0
   2ec7e:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ec80:	687b      	ldr	r3, [r7, #4]
   2ec82:	3304      	adds	r3, #4
   2ec84:	687a      	ldr	r2, [r7, #4]
   2ec86:	0011      	movs	r1, r2
   2ec88:	0018      	movs	r0, r3
   2ec8a:	4b05      	ldr	r3, [pc, #20]	; (2eca0 <TimerIsExpired+0x28>)
   2ec8c:	4798      	blx	r3
   2ec8e:	0003      	movs	r3, r0
   2ec90:	3b01      	subs	r3, #1
   2ec92:	425a      	negs	r2, r3
   2ec94:	4153      	adcs	r3, r2
   2ec96:	b2db      	uxtb	r3, r3
}
   2ec98:	0018      	movs	r0, r3
   2ec9a:	46bd      	mov	sp, r7
   2ec9c:	b002      	add	sp, #8
   2ec9e:	bd80      	pop	{r7, pc}
   2eca0:	0001c511 	.word	0x0001c511

0002eca4 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2eca4:	b580      	push	{r7, lr}
   2eca6:	b082      	sub	sp, #8
   2eca8:	af00      	add	r7, sp, #0
   2ecaa:	6078      	str	r0, [r7, #4]
   2ecac:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ecae:	687b      	ldr	r3, [r7, #4]
   2ecb0:	683a      	ldr	r2, [r7, #0]
   2ecb2:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2ecb4:	687b      	ldr	r3, [r7, #4]
   2ecb6:	3304      	adds	r3, #4
   2ecb8:	0018      	movs	r0, r3
   2ecba:	4b03      	ldr	r3, [pc, #12]	; (2ecc8 <TimerCountdownMS+0x24>)
   2ecbc:	4798      	blx	r3
}
   2ecbe:	46c0      	nop			; (mov r8, r8)
   2ecc0:	46bd      	mov	sp, r7
   2ecc2:	b002      	add	sp, #8
   2ecc4:	bd80      	pop	{r7, pc}
   2ecc6:	46c0      	nop			; (mov r8, r8)
   2ecc8:	0001c4a5 	.word	0x0001c4a5

0002eccc <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2eccc:	b580      	push	{r7, lr}
   2ecce:	b082      	sub	sp, #8
   2ecd0:	af00      	add	r7, sp, #0
   2ecd2:	6078      	str	r0, [r7, #4]
   2ecd4:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ecd6:	683b      	ldr	r3, [r7, #0]
   2ecd8:	22fa      	movs	r2, #250	; 0xfa
   2ecda:	0092      	lsls	r2, r2, #2
   2ecdc:	435a      	muls	r2, r3
   2ecde:	687b      	ldr	r3, [r7, #4]
   2ece0:	0011      	movs	r1, r2
   2ece2:	0018      	movs	r0, r3
   2ece4:	4b02      	ldr	r3, [pc, #8]	; (2ecf0 <TimerCountdown+0x24>)
   2ece6:	4798      	blx	r3
}
   2ece8:	46c0      	nop			; (mov r8, r8)
   2ecea:	46bd      	mov	sp, r7
   2ecec:	b002      	add	sp, #8
   2ecee:	bd80      	pop	{r7, pc}
   2ecf0:	0002eca5 	.word	0x0002eca5

0002ecf4 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ecf4:	b580      	push	{r7, lr}
   2ecf6:	b082      	sub	sp, #8
   2ecf8:	af00      	add	r7, sp, #0
   2ecfa:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ecfc:	687b      	ldr	r3, [r7, #4]
   2ecfe:	3304      	adds	r3, #4
   2ed00:	687a      	ldr	r2, [r7, #4]
   2ed02:	0011      	movs	r1, r2
   2ed04:	0018      	movs	r0, r3
   2ed06:	4b04      	ldr	r3, [pc, #16]	; (2ed18 <TimerLeftMS+0x24>)
   2ed08:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ed0a:	687b      	ldr	r3, [r7, #4]
   2ed0c:	681b      	ldr	r3, [r3, #0]
}
   2ed0e:	0018      	movs	r0, r3
   2ed10:	46bd      	mov	sp, r7
   2ed12:	b002      	add	sp, #8
   2ed14:	bd80      	pop	{r7, pc}
   2ed16:	46c0      	nop			; (mov r8, r8)
   2ed18:	0001c511 	.word	0x0001c511

0002ed1c <TimerInit>:


void TimerInit(Timer* timer) {
   2ed1c:	b580      	push	{r7, lr}
   2ed1e:	b082      	sub	sp, #8
   2ed20:	af00      	add	r7, sp, #0
   2ed22:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2ed24:	687b      	ldr	r3, [r7, #4]
   2ed26:	2200      	movs	r2, #0
   2ed28:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2ed2a:	687b      	ldr	r3, [r7, #4]
   2ed2c:	3304      	adds	r3, #4
   2ed2e:	2208      	movs	r2, #8
   2ed30:	2100      	movs	r1, #0
   2ed32:	0018      	movs	r0, r3
   2ed34:	4b02      	ldr	r3, [pc, #8]	; (2ed40 <TimerInit+0x24>)
   2ed36:	4798      	blx	r3
}
   2ed38:	46c0      	nop			; (mov r8, r8)
   2ed3a:	46bd      	mov	sp, r7
   2ed3c:	b002      	add	sp, #8
   2ed3e:	bd80      	pop	{r7, pc}
   2ed40:	00034043 	.word	0x00034043

0002ed44 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2ed44:	b590      	push	{r4, r7, lr}
   2ed46:	b085      	sub	sp, #20
   2ed48:	af00      	add	r7, sp, #0
   2ed4a:	60f8      	str	r0, [r7, #12]
   2ed4c:	60b9      	str	r1, [r7, #8]
   2ed4e:	607a      	str	r2, [r7, #4]
   2ed50:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2ed52:	683b      	ldr	r3, [r7, #0]
   2ed54:	2b00      	cmp	r3, #0
   2ed56:	d101      	bne.n	2ed5c <WINC1500_read+0x18>
   2ed58:	230a      	movs	r3, #10
   2ed5a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2ed5c:	4b2c      	ldr	r3, [pc, #176]	; (2ee10 <WINC1500_read+0xcc>)
   2ed5e:	681b      	ldr	r3, [r3, #0]
   2ed60:	2b00      	cmp	r3, #0
   2ed62:	d131      	bne.n	2edc8 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2ed64:	4b2b      	ldr	r3, [pc, #172]	; (2ee14 <WINC1500_read+0xd0>)
   2ed66:	2200      	movs	r2, #0
   2ed68:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2ed6a:	68fb      	ldr	r3, [r7, #12]
   2ed6c:	681b      	ldr	r3, [r3, #0]
   2ed6e:	b258      	sxtb	r0, r3
   2ed70:	683c      	ldr	r4, [r7, #0]
   2ed72:	2380      	movs	r3, #128	; 0x80
   2ed74:	005a      	lsls	r2, r3, #1
   2ed76:	4928      	ldr	r1, [pc, #160]	; (2ee18 <WINC1500_read+0xd4>)
   2ed78:	0023      	movs	r3, r4
   2ed7a:	4c28      	ldr	r4, [pc, #160]	; (2ee1c <WINC1500_read+0xd8>)
   2ed7c:	47a0      	blx	r4
   2ed7e:	1e03      	subs	r3, r0, #0
   2ed80:	d005      	beq.n	2ed8e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2ed82:	2301      	movs	r3, #1
   2ed84:	425b      	negs	r3, r3
   2ed86:	e03e      	b.n	2ee06 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2ed88:	2000      	movs	r0, #0
   2ed8a:	4b25      	ldr	r3, [pc, #148]	; (2ee20 <WINC1500_read+0xdc>)
   2ed8c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2ed8e:	4b21      	ldr	r3, [pc, #132]	; (2ee14 <WINC1500_read+0xd0>)
   2ed90:	781b      	ldrb	r3, [r3, #0]
   2ed92:	2201      	movs	r2, #1
   2ed94:	4053      	eors	r3, r2
   2ed96:	b2db      	uxtb	r3, r3
   2ed98:	2b00      	cmp	r3, #0
   2ed9a:	d1f5      	bne.n	2ed88 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2ed9c:	4b21      	ldr	r3, [pc, #132]	; (2ee24 <WINC1500_read+0xe0>)
   2ed9e:	681b      	ldr	r3, [r3, #0]
   2eda0:	2b00      	cmp	r3, #0
   2eda2:	dd08      	ble.n	2edb6 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2eda4:	4b1f      	ldr	r3, [pc, #124]	; (2ee24 <WINC1500_read+0xe0>)
   2eda6:	681b      	ldr	r3, [r3, #0]
   2eda8:	001a      	movs	r2, r3
   2edaa:	4b19      	ldr	r3, [pc, #100]	; (2ee10 <WINC1500_read+0xcc>)
   2edac:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2edae:	4b1e      	ldr	r3, [pc, #120]	; (2ee28 <WINC1500_read+0xe4>)
   2edb0:	2200      	movs	r2, #0
   2edb2:	601a      	str	r2, [r3, #0]
   2edb4:	e008      	b.n	2edc8 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2edb6:	4b16      	ldr	r3, [pc, #88]	; (2ee10 <WINC1500_read+0xcc>)
   2edb8:	2200      	movs	r2, #0
   2edba:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2edbc:	4b1a      	ldr	r3, [pc, #104]	; (2ee28 <WINC1500_read+0xe4>)
   2edbe:	2200      	movs	r2, #0
   2edc0:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2edc2:	4b18      	ldr	r3, [pc, #96]	; (2ee24 <WINC1500_read+0xe0>)
   2edc4:	681b      	ldr	r3, [r3, #0]
   2edc6:	e01e      	b.n	2ee06 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2edc8:	4b11      	ldr	r3, [pc, #68]	; (2ee10 <WINC1500_read+0xcc>)
   2edca:	681b      	ldr	r3, [r3, #0]
   2edcc:	001a      	movs	r2, r3
   2edce:	687b      	ldr	r3, [r7, #4]
   2edd0:	4293      	cmp	r3, r2
   2edd2:	dd02      	ble.n	2edda <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2edd4:	2301      	movs	r3, #1
   2edd6:	425b      	negs	r3, r3
   2edd8:	e015      	b.n	2ee06 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2edda:	4b13      	ldr	r3, [pc, #76]	; (2ee28 <WINC1500_read+0xe4>)
   2eddc:	681a      	ldr	r2, [r3, #0]
   2edde:	4b0e      	ldr	r3, [pc, #56]	; (2ee18 <WINC1500_read+0xd4>)
   2ede0:	18d1      	adds	r1, r2, r3
   2ede2:	687a      	ldr	r2, [r7, #4]
   2ede4:	68bb      	ldr	r3, [r7, #8]
   2ede6:	0018      	movs	r0, r3
   2ede8:	4b10      	ldr	r3, [pc, #64]	; (2ee2c <WINC1500_read+0xe8>)
   2edea:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2edec:	4b08      	ldr	r3, [pc, #32]	; (2ee10 <WINC1500_read+0xcc>)
   2edee:	681a      	ldr	r2, [r3, #0]
   2edf0:	687b      	ldr	r3, [r7, #4]
   2edf2:	1ad2      	subs	r2, r2, r3
   2edf4:	4b06      	ldr	r3, [pc, #24]	; (2ee10 <WINC1500_read+0xcc>)
   2edf6:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2edf8:	4b0b      	ldr	r3, [pc, #44]	; (2ee28 <WINC1500_read+0xe4>)
   2edfa:	681a      	ldr	r2, [r3, #0]
   2edfc:	687b      	ldr	r3, [r7, #4]
   2edfe:	18d2      	adds	r2, r2, r3
   2ee00:	4b09      	ldr	r3, [pc, #36]	; (2ee28 <WINC1500_read+0xe4>)
   2ee02:	601a      	str	r2, [r3, #0]
  
  return len;
   2ee04:	687b      	ldr	r3, [r7, #4]
}
   2ee06:	0018      	movs	r0, r3
   2ee08:	46bd      	mov	sp, r7
   2ee0a:	b005      	add	sp, #20
   2ee0c:	bd90      	pop	{r4, r7, pc}
   2ee0e:	46c0      	nop			; (mov r8, r8)
   2ee10:	20004288 	.word	0x20004288
   2ee14:	20004183 	.word	0x20004183
   2ee18:	20004184 	.word	0x20004184
   2ee1c:	000253f9 	.word	0x000253f9
   2ee20:	00021941 	.word	0x00021941
   2ee24:	2000417c 	.word	0x2000417c
   2ee28:	20004284 	.word	0x20004284
   2ee2c:	0003400d 	.word	0x0003400d

0002ee30 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2ee30:	b590      	push	{r4, r7, lr}
   2ee32:	b085      	sub	sp, #20
   2ee34:	af00      	add	r7, sp, #0
   2ee36:	60f8      	str	r0, [r7, #12]
   2ee38:	60b9      	str	r1, [r7, #8]
   2ee3a:	607a      	str	r2, [r7, #4]
   2ee3c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2ee3e:	4b10      	ldr	r3, [pc, #64]	; (2ee80 <WINC1500_write+0x50>)
   2ee40:	2200      	movs	r2, #0
   2ee42:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2ee44:	68fb      	ldr	r3, [r7, #12]
   2ee46:	681b      	ldr	r3, [r3, #0]
   2ee48:	b258      	sxtb	r0, r3
   2ee4a:	687b      	ldr	r3, [r7, #4]
   2ee4c:	b29a      	uxth	r2, r3
   2ee4e:	68b9      	ldr	r1, [r7, #8]
   2ee50:	2300      	movs	r3, #0
   2ee52:	4c0c      	ldr	r4, [pc, #48]	; (2ee84 <WINC1500_write+0x54>)
   2ee54:	47a0      	blx	r4
   2ee56:	1e03      	subs	r3, r0, #0
   2ee58:	d005      	beq.n	2ee66 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2ee5a:	2301      	movs	r3, #1
   2ee5c:	425b      	negs	r3, r3
   2ee5e:	e00a      	b.n	2ee76 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2ee60:	2000      	movs	r0, #0
   2ee62:	4b09      	ldr	r3, [pc, #36]	; (2ee88 <WINC1500_write+0x58>)
   2ee64:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2ee66:	4b06      	ldr	r3, [pc, #24]	; (2ee80 <WINC1500_write+0x50>)
   2ee68:	781b      	ldrb	r3, [r3, #0]
   2ee6a:	2201      	movs	r2, #1
   2ee6c:	4053      	eors	r3, r2
   2ee6e:	b2db      	uxtb	r3, r3
   2ee70:	2b00      	cmp	r3, #0
   2ee72:	d1f5      	bne.n	2ee60 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2ee74:	687b      	ldr	r3, [r7, #4]
}
   2ee76:	0018      	movs	r0, r3
   2ee78:	46bd      	mov	sp, r7
   2ee7a:	b005      	add	sp, #20
   2ee7c:	bd90      	pop	{r4, r7, pc}
   2ee7e:	46c0      	nop			; (mov r8, r8)
   2ee80:	20004182 	.word	0x20004182
   2ee84:	00025295 	.word	0x00025295
   2ee88:	00021941 	.word	0x00021941

0002ee8c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2ee8c:	b580      	push	{r7, lr}
   2ee8e:	b082      	sub	sp, #8
   2ee90:	af00      	add	r7, sp, #0
   2ee92:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2ee94:	687b      	ldr	r3, [r7, #4]
   2ee96:	681b      	ldr	r3, [r3, #0]
   2ee98:	b25b      	sxtb	r3, r3
   2ee9a:	0018      	movs	r0, r3
   2ee9c:	4b06      	ldr	r3, [pc, #24]	; (2eeb8 <WINC1500_disconnect+0x2c>)
   2ee9e:	4798      	blx	r3
	n->socket=-1;
   2eea0:	687b      	ldr	r3, [r7, #4]
   2eea2:	2201      	movs	r2, #1
   2eea4:	4252      	negs	r2, r2
   2eea6:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2eea8:	4b04      	ldr	r3, [pc, #16]	; (2eebc <WINC1500_disconnect+0x30>)
   2eeaa:	2200      	movs	r2, #0
   2eeac:	701a      	strb	r2, [r3, #0]
}
   2eeae:	46c0      	nop			; (mov r8, r8)
   2eeb0:	46bd      	mov	sp, r7
   2eeb2:	b002      	add	sp, #8
   2eeb4:	bd80      	pop	{r7, pc}
   2eeb6:	46c0      	nop			; (mov r8, r8)
   2eeb8:	00025579 	.word	0x00025579
   2eebc:	20004181 	.word	0x20004181

0002eec0 <NetworkInit>:


void NetworkInit(Network* n) {
   2eec0:	b580      	push	{r7, lr}
   2eec2:	b082      	sub	sp, #8
   2eec4:	af00      	add	r7, sp, #0
   2eec6:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2eec8:	687b      	ldr	r3, [r7, #4]
   2eeca:	2201      	movs	r2, #1
   2eecc:	4252      	negs	r2, r2
   2eece:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2eed0:	687b      	ldr	r3, [r7, #4]
   2eed2:	4a06      	ldr	r2, [pc, #24]	; (2eeec <NetworkInit+0x2c>)
   2eed4:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2eed6:	687b      	ldr	r3, [r7, #4]
   2eed8:	4a05      	ldr	r2, [pc, #20]	; (2eef0 <NetworkInit+0x30>)
   2eeda:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2eedc:	687b      	ldr	r3, [r7, #4]
   2eede:	4a05      	ldr	r2, [pc, #20]	; (2eef4 <NetworkInit+0x34>)
   2eee0:	611a      	str	r2, [r3, #16]
}
   2eee2:	46c0      	nop			; (mov r8, r8)
   2eee4:	46bd      	mov	sp, r7
   2eee6:	b002      	add	sp, #8
   2eee8:	bd80      	pop	{r7, pc}
   2eeea:	46c0      	nop			; (mov r8, r8)
   2eeec:	0002ed45 	.word	0x0002ed45
   2eef0:	0002ee31 	.word	0x0002ee31
   2eef4:	0002ee8d 	.word	0x0002ee8d

0002eef8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2eef8:	b580      	push	{r7, lr}
   2eefa:	b088      	sub	sp, #32
   2eefc:	af00      	add	r7, sp, #0
   2eefe:	60f8      	str	r0, [r7, #12]
   2ef00:	60b9      	str	r1, [r7, #8]
   2ef02:	607a      	str	r2, [r7, #4]
   2ef04:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2ef06:	4b37      	ldr	r3, [pc, #220]	; (2efe4 <ConnectNetwork+0xec>)
   2ef08:	2200      	movs	r2, #0
   2ef0a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2ef0c:	4b36      	ldr	r3, [pc, #216]	; (2efe8 <ConnectNetwork+0xf0>)
   2ef0e:	68ba      	ldr	r2, [r7, #8]
   2ef10:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2ef12:	68bb      	ldr	r3, [r7, #8]
   2ef14:	0018      	movs	r0, r3
   2ef16:	4b35      	ldr	r3, [pc, #212]	; (2efec <ConnectNetwork+0xf4>)
   2ef18:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2ef1a:	e002      	b.n	2ef22 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2ef1c:	2000      	movs	r0, #0
   2ef1e:	4b34      	ldr	r3, [pc, #208]	; (2eff0 <ConnectNetwork+0xf8>)
   2ef20:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2ef22:	4b30      	ldr	r3, [pc, #192]	; (2efe4 <ConnectNetwork+0xec>)
   2ef24:	781b      	ldrb	r3, [r3, #0]
   2ef26:	2201      	movs	r2, #1
   2ef28:	4053      	eors	r3, r2
   2ef2a:	b2db      	uxtb	r3, r3
   2ef2c:	2b00      	cmp	r3, #0
   2ef2e:	d1f5      	bne.n	2ef1c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2ef30:	4b30      	ldr	r3, [pc, #192]	; (2eff4 <ConnectNetwork+0xfc>)
   2ef32:	681a      	ldr	r2, [r3, #0]
   2ef34:	68fb      	ldr	r3, [r7, #12]
   2ef36:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2ef38:	2310      	movs	r3, #16
   2ef3a:	18fb      	adds	r3, r7, r3
   2ef3c:	2202      	movs	r2, #2
   2ef3e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2ef40:	687b      	ldr	r3, [r7, #4]
   2ef42:	b29b      	uxth	r3, r3
   2ef44:	021b      	lsls	r3, r3, #8
   2ef46:	b21a      	sxth	r2, r3
   2ef48:	687b      	ldr	r3, [r7, #4]
   2ef4a:	b29b      	uxth	r3, r3
   2ef4c:	0a1b      	lsrs	r3, r3, #8
   2ef4e:	b29b      	uxth	r3, r3
   2ef50:	b21b      	sxth	r3, r3
   2ef52:	4313      	orrs	r3, r2
   2ef54:	b21b      	sxth	r3, r3
   2ef56:	b29a      	uxth	r2, r3
   2ef58:	2310      	movs	r3, #16
   2ef5a:	18fb      	adds	r3, r7, r3
   2ef5c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2ef5e:	4b25      	ldr	r3, [pc, #148]	; (2eff4 <ConnectNetwork+0xfc>)
   2ef60:	681b      	ldr	r3, [r3, #0]
   2ef62:	001a      	movs	r2, r3
   2ef64:	2310      	movs	r3, #16
   2ef66:	18fb      	adds	r3, r7, r3
   2ef68:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2ef6a:	68fb      	ldr	r3, [r7, #12]
   2ef6c:	681b      	ldr	r3, [r3, #0]
   2ef6e:	2b00      	cmp	r3, #0
   2ef70:	da0a      	bge.n	2ef88 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2ef72:	683b      	ldr	r3, [r7, #0]
   2ef74:	b2db      	uxtb	r3, r3
   2ef76:	001a      	movs	r2, r3
   2ef78:	2101      	movs	r1, #1
   2ef7a:	2002      	movs	r0, #2
   2ef7c:	4b1e      	ldr	r3, [pc, #120]	; (2eff8 <ConnectNetwork+0x100>)
   2ef7e:	4798      	blx	r3
   2ef80:	0003      	movs	r3, r0
   2ef82:	001a      	movs	r2, r3
   2ef84:	68fb      	ldr	r3, [r7, #12]
   2ef86:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2ef88:	68fb      	ldr	r3, [r7, #12]
   2ef8a:	681b      	ldr	r3, [r3, #0]
   2ef8c:	3301      	adds	r3, #1
   2ef8e:	d108      	bne.n	2efa2 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2ef90:	68fb      	ldr	r3, [r7, #12]
   2ef92:	681b      	ldr	r3, [r3, #0]
   2ef94:	b25b      	sxtb	r3, r3
   2ef96:	0018      	movs	r0, r3
   2ef98:	4b18      	ldr	r3, [pc, #96]	; (2effc <ConnectNetwork+0x104>)
   2ef9a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2ef9c:	2309      	movs	r3, #9
   2ef9e:	425b      	negs	r3, r3
   2efa0:	e01c      	b.n	2efdc <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2efa2:	68fb      	ldr	r3, [r7, #12]
   2efa4:	681b      	ldr	r3, [r3, #0]
   2efa6:	b25b      	sxtb	r3, r3
   2efa8:	2210      	movs	r2, #16
   2efaa:	18b9      	adds	r1, r7, r2
   2efac:	2210      	movs	r2, #16
   2efae:	0018      	movs	r0, r3
   2efb0:	4b13      	ldr	r3, [pc, #76]	; (2f000 <ConnectNetwork+0x108>)
   2efb2:	4798      	blx	r3
   2efb4:	1e03      	subs	r3, r0, #0
   2efb6:	d002      	beq.n	2efbe <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2efb8:	2309      	movs	r3, #9
   2efba:	425b      	negs	r3, r3
   2efbc:	e00e      	b.n	2efdc <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2efbe:	4b11      	ldr	r3, [pc, #68]	; (2f004 <ConnectNetwork+0x10c>)
   2efc0:	2200      	movs	r2, #0
   2efc2:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2efc4:	e002      	b.n	2efcc <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2efc6:	2000      	movs	r0, #0
   2efc8:	4b09      	ldr	r3, [pc, #36]	; (2eff0 <ConnectNetwork+0xf8>)
   2efca:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2efcc:	4b0d      	ldr	r3, [pc, #52]	; (2f004 <ConnectNetwork+0x10c>)
   2efce:	781b      	ldrb	r3, [r3, #0]
   2efd0:	2201      	movs	r2, #1
   2efd2:	4053      	eors	r3, r2
   2efd4:	b2db      	uxtb	r3, r3
   2efd6:	2b00      	cmp	r3, #0
   2efd8:	d1f5      	bne.n	2efc6 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2efda:	2300      	movs	r3, #0
   2efdc:	0018      	movs	r0, r3
   2efde:	46bd      	mov	sp, r7
   2efe0:	b008      	add	sp, #32
   2efe2:	bd80      	pop	{r7, pc}
   2efe4:	20004180 	.word	0x20004180
   2efe8:	2000428c 	.word	0x2000428c
   2efec:	000257c1 	.word	0x000257c1
   2eff0:	00021941 	.word	0x00021941
   2eff4:	20004178 	.word	0x20004178
   2eff8:	00024f6d 	.word	0x00024f6d
   2effc:	00025579 	.word	0x00025579
   2f000:	00025181 	.word	0x00025181
   2f004:	20004181 	.word	0x20004181

0002f008 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2f008:	b580      	push	{r7, lr}
   2f00a:	b084      	sub	sp, #16
   2f00c:	af00      	add	r7, sp, #0
   2f00e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2f010:	687b      	ldr	r3, [r7, #4]
   2f012:	2b00      	cmp	r3, #0
   2f014:	d022      	beq.n	2f05c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f016:	2300      	movs	r3, #0
   2f018:	60fb      	str	r3, [r7, #12]
   2f01a:	e01b      	b.n	2f054 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f01c:	4a11      	ldr	r2, [pc, #68]	; (2f064 <allocateClient+0x5c>)
   2f01e:	68fb      	ldr	r3, [r7, #12]
   2f020:	2164      	movs	r1, #100	; 0x64
   2f022:	434b      	muls	r3, r1
   2f024:	18d3      	adds	r3, r2, r3
   2f026:	3360      	adds	r3, #96	; 0x60
   2f028:	681b      	ldr	r3, [r3, #0]
   2f02a:	2b00      	cmp	r3, #0
   2f02c:	d10f      	bne.n	2f04e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f02e:	4a0d      	ldr	r2, [pc, #52]	; (2f064 <allocateClient+0x5c>)
   2f030:	68fb      	ldr	r3, [r7, #12]
   2f032:	2164      	movs	r1, #100	; 0x64
   2f034:	434b      	muls	r3, r1
   2f036:	18d3      	adds	r3, r2, r3
   2f038:	3360      	adds	r3, #96	; 0x60
   2f03a:	687a      	ldr	r2, [r7, #4]
   2f03c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f03e:	68fb      	ldr	r3, [r7, #12]
   2f040:	2264      	movs	r2, #100	; 0x64
   2f042:	435a      	muls	r2, r3
   2f044:	4b07      	ldr	r3, [pc, #28]	; (2f064 <allocateClient+0x5c>)
   2f046:	18d2      	adds	r2, r2, r3
   2f048:	687b      	ldr	r3, [r7, #4]
   2f04a:	61da      	str	r2, [r3, #28]
			return;
   2f04c:	e007      	b.n	2f05e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f04e:	68fb      	ldr	r3, [r7, #12]
   2f050:	3301      	adds	r3, #1
   2f052:	60fb      	str	r3, [r7, #12]
   2f054:	68fb      	ldr	r3, [r7, #12]
   2f056:	2b06      	cmp	r3, #6
   2f058:	d9e0      	bls.n	2f01c <allocateClient+0x14>
   2f05a:	e000      	b.n	2f05e <allocateClient+0x56>
		return;
   2f05c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f05e:	46bd      	mov	sp, r7
   2f060:	b004      	add	sp, #16
   2f062:	bd80      	pop	{r7, pc}
   2f064:	20004290 	.word	0x20004290

0002f068 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f068:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f06a:	b089      	sub	sp, #36	; 0x24
   2f06c:	af04      	add	r7, sp, #16
   2f06e:	6078      	str	r0, [r7, #4]
   2f070:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f072:	687b      	ldr	r3, [r7, #4]
   2f074:	2b00      	cmp	r3, #0
   2f076:	d00a      	beq.n	2f08e <mqtt_init+0x26>
   2f078:	683b      	ldr	r3, [r7, #0]
   2f07a:	2b00      	cmp	r3, #0
   2f07c:	d007      	beq.n	2f08e <mqtt_init+0x26>
   2f07e:	683b      	ldr	r3, [r7, #0]
   2f080:	691b      	ldr	r3, [r3, #16]
   2f082:	2b00      	cmp	r3, #0
   2f084:	d003      	beq.n	2f08e <mqtt_init+0x26>
   2f086:	683b      	ldr	r3, [r7, #0]
   2f088:	689b      	ldr	r3, [r3, #8]
   2f08a:	2b00      	cmp	r3, #0
   2f08c:	d102      	bne.n	2f094 <mqtt_init+0x2c>
		return FAILURE;
   2f08e:	2301      	movs	r3, #1
   2f090:	425b      	negs	r3, r3
   2f092:	e034      	b.n	2f0fe <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f094:	683b      	ldr	r3, [r7, #0]
   2f096:	889b      	ldrh	r3, [r3, #4]
   2f098:	001a      	movs	r2, r3
   2f09a:	23fa      	movs	r3, #250	; 0xfa
   2f09c:	009b      	lsls	r3, r3, #2
   2f09e:	4353      	muls	r3, r2
   2f0a0:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f0a2:	687b      	ldr	r3, [r7, #4]
   2f0a4:	3320      	adds	r3, #32
   2f0a6:	0018      	movs	r0, r3
   2f0a8:	4b17      	ldr	r3, [pc, #92]	; (2f108 <mqtt_init+0xa0>)
   2f0aa:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f0ac:	687b      	ldr	r3, [r7, #4]
   2f0ae:	3304      	adds	r3, #4
   2f0b0:	6839      	ldr	r1, [r7, #0]
   2f0b2:	2218      	movs	r2, #24
   2f0b4:	0018      	movs	r0, r3
   2f0b6:	4b15      	ldr	r3, [pc, #84]	; (2f10c <mqtt_init+0xa4>)
   2f0b8:	4798      	blx	r3
	allocateClient(module);
   2f0ba:	687b      	ldr	r3, [r7, #4]
   2f0bc:	0018      	movs	r0, r3
   2f0be:	4b14      	ldr	r3, [pc, #80]	; (2f110 <mqtt_init+0xa8>)
   2f0c0:	4798      	blx	r3
	
	if(module->client)
   2f0c2:	687b      	ldr	r3, [r7, #4]
   2f0c4:	69db      	ldr	r3, [r3, #28]
   2f0c6:	2b00      	cmp	r3, #0
   2f0c8:	d017      	beq.n	2f0fa <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f0ca:	687b      	ldr	r3, [r7, #4]
   2f0cc:	69d8      	ldr	r0, [r3, #28]
   2f0ce:	687b      	ldr	r3, [r7, #4]
   2f0d0:	3320      	adds	r3, #32
   2f0d2:	001c      	movs	r4, r3
   2f0d4:	683b      	ldr	r3, [r7, #0]
   2f0d6:	691e      	ldr	r6, [r3, #16]
   2f0d8:	683b      	ldr	r3, [r7, #0]
   2f0da:	695a      	ldr	r2, [r3, #20]
   2f0dc:	683b      	ldr	r3, [r7, #0]
   2f0de:	6899      	ldr	r1, [r3, #8]
   2f0e0:	683b      	ldr	r3, [r7, #0]
   2f0e2:	68db      	ldr	r3, [r3, #12]
   2f0e4:	68fd      	ldr	r5, [r7, #12]
   2f0e6:	9302      	str	r3, [sp, #8]
   2f0e8:	9101      	str	r1, [sp, #4]
   2f0ea:	9200      	str	r2, [sp, #0]
   2f0ec:	0033      	movs	r3, r6
   2f0ee:	002a      	movs	r2, r5
   2f0f0:	0021      	movs	r1, r4
   2f0f2:	4c08      	ldr	r4, [pc, #32]	; (2f114 <mqtt_init+0xac>)
   2f0f4:	47a0      	blx	r4
		return SUCCESS;
   2f0f6:	2300      	movs	r3, #0
   2f0f8:	e001      	b.n	2f0fe <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f0fa:	2301      	movs	r3, #1
   2f0fc:	425b      	negs	r3, r3
}
   2f0fe:	0018      	movs	r0, r3
   2f100:	46bd      	mov	sp, r7
   2f102:	b005      	add	sp, #20
   2f104:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f106:	46c0      	nop			; (mov r8, r8)
   2f108:	0002eec1 	.word	0x0002eec1
   2f10c:	0003400d 	.word	0x0003400d
   2f110:	0002f009 	.word	0x0002f009
   2f114:	0002df39 	.word	0x0002df39

0002f118 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f118:	b580      	push	{r7, lr}
   2f11a:	b082      	sub	sp, #8
   2f11c:	af00      	add	r7, sp, #0
   2f11e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f120:	687b      	ldr	r3, [r7, #4]
   2f122:	4a0c      	ldr	r2, [pc, #48]	; (2f154 <mqtt_get_config_defaults+0x3c>)
   2f124:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f126:	687b      	ldr	r3, [r7, #4]
   2f128:	2200      	movs	r2, #0
   2f12a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f12c:	687b      	ldr	r3, [r7, #4]
   2f12e:	223c      	movs	r2, #60	; 0x3c
   2f130:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f132:	687b      	ldr	r3, [r7, #4]
   2f134:	2200      	movs	r2, #0
   2f136:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f138:	687b      	ldr	r3, [r7, #4]
   2f13a:	2200      	movs	r2, #0
   2f13c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f13e:	687b      	ldr	r3, [r7, #4]
   2f140:	2200      	movs	r2, #0
   2f142:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f144:	687b      	ldr	r3, [r7, #4]
   2f146:	2200      	movs	r2, #0
   2f148:	615a      	str	r2, [r3, #20]
}
   2f14a:	46c0      	nop			; (mov r8, r8)
   2f14c:	46bd      	mov	sp, r7
   2f14e:	b002      	add	sp, #8
   2f150:	bd80      	pop	{r7, pc}
   2f152:	46c0      	nop			; (mov r8, r8)
   2f154:	0000075b 	.word	0x0000075b

0002f158 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f158:	b580      	push	{r7, lr}
   2f15a:	b082      	sub	sp, #8
   2f15c:	af00      	add	r7, sp, #0
   2f15e:	6078      	str	r0, [r7, #4]
   2f160:	6039      	str	r1, [r7, #0]
	if(module)
   2f162:	687b      	ldr	r3, [r7, #4]
   2f164:	2b00      	cmp	r3, #0
   2f166:	d004      	beq.n	2f172 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f168:	687b      	ldr	r3, [r7, #4]
   2f16a:	683a      	ldr	r2, [r7, #0]
   2f16c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f16e:	2300      	movs	r3, #0
   2f170:	e001      	b.n	2f176 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f172:	2301      	movs	r3, #1
   2f174:	425b      	negs	r3, r3
}
   2f176:	0018      	movs	r0, r3
   2f178:	46bd      	mov	sp, r7
   2f17a:	b002      	add	sp, #8
   2f17c:	bd80      	pop	{r7, pc}
	...

0002f180 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f180:	b580      	push	{r7, lr}
   2f182:	b082      	sub	sp, #8
   2f184:	af00      	add	r7, sp, #0
   2f186:	603a      	str	r2, [r7, #0]
   2f188:	1dfb      	adds	r3, r7, #7
   2f18a:	1c02      	adds	r2, r0, #0
   2f18c:	701a      	strb	r2, [r3, #0]
   2f18e:	1dbb      	adds	r3, r7, #6
   2f190:	1c0a      	adds	r2, r1, #0
   2f192:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f194:	683a      	ldr	r2, [r7, #0]
   2f196:	1dbb      	adds	r3, r7, #6
   2f198:	7819      	ldrb	r1, [r3, #0]
   2f19a:	1dfb      	adds	r3, r7, #7
   2f19c:	781b      	ldrb	r3, [r3, #0]
   2f19e:	b25b      	sxtb	r3, r3
   2f1a0:	0018      	movs	r0, r3
   2f1a2:	4b03      	ldr	r3, [pc, #12]	; (2f1b0 <mqtt_socket_event_handler+0x30>)
   2f1a4:	4798      	blx	r3
}
   2f1a6:	46c0      	nop			; (mov r8, r8)
   2f1a8:	46bd      	mov	sp, r7
   2f1aa:	b002      	add	sp, #8
   2f1ac:	bd80      	pop	{r7, pc}
   2f1ae:	46c0      	nop			; (mov r8, r8)
   2f1b0:	0002ebfd 	.word	0x0002ebfd

0002f1b4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f1b4:	b580      	push	{r7, lr}
   2f1b6:	b082      	sub	sp, #8
   2f1b8:	af00      	add	r7, sp, #0
   2f1ba:	6078      	str	r0, [r7, #4]
   2f1bc:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f1be:	683a      	ldr	r2, [r7, #0]
   2f1c0:	687b      	ldr	r3, [r7, #4]
   2f1c2:	0011      	movs	r1, r2
   2f1c4:	0018      	movs	r0, r3
   2f1c6:	4b03      	ldr	r3, [pc, #12]	; (2f1d4 <mqtt_socket_resolve_handler+0x20>)
   2f1c8:	4798      	blx	r3
}
   2f1ca:	46c0      	nop			; (mov r8, r8)
   2f1cc:	46bd      	mov	sp, r7
   2f1ce:	b002      	add	sp, #8
   2f1d0:	bd80      	pop	{r7, pc}
   2f1d2:	46c0      	nop			; (mov r8, r8)
   2f1d4:	0002ebad 	.word	0x0002ebad

0002f1d8 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f1d8:	b590      	push	{r4, r7, lr}
   2f1da:	b085      	sub	sp, #20
   2f1dc:	af00      	add	r7, sp, #0
   2f1de:	6078      	str	r0, [r7, #4]
   2f1e0:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f1e2:	687b      	ldr	r3, [r7, #4]
   2f1e4:	3320      	adds	r3, #32
   2f1e6:	0018      	movs	r0, r3
   2f1e8:	687b      	ldr	r3, [r7, #4]
   2f1ea:	889b      	ldrh	r3, [r3, #4]
   2f1ec:	001a      	movs	r2, r3
   2f1ee:	687b      	ldr	r3, [r7, #4]
   2f1f0:	799b      	ldrb	r3, [r3, #6]
   2f1f2:	6839      	ldr	r1, [r7, #0]
   2f1f4:	4c09      	ldr	r4, [pc, #36]	; (2f21c <mqtt_connect+0x44>)
   2f1f6:	47a0      	blx	r4
   2f1f8:	0003      	movs	r3, r0
   2f1fa:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f1fc:	687b      	ldr	r3, [r7, #4]
   2f1fe:	681b      	ldr	r3, [r3, #0]
   2f200:	2b00      	cmp	r3, #0
   2f202:	d006      	beq.n	2f212 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f204:	687b      	ldr	r3, [r7, #4]
   2f206:	681b      	ldr	r3, [r3, #0]
   2f208:	220c      	movs	r2, #12
   2f20a:	18ba      	adds	r2, r7, r2
   2f20c:	6878      	ldr	r0, [r7, #4]
   2f20e:	2100      	movs	r1, #0
   2f210:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f212:	68fb      	ldr	r3, [r7, #12]
}
   2f214:	0018      	movs	r0, r3
   2f216:	46bd      	mov	sp, r7
   2f218:	b005      	add	sp, #20
   2f21a:	bd90      	pop	{r4, r7, pc}
   2f21c:	0002eef9 	.word	0x0002eef9

0002f220 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f220:	b580      	push	{r7, lr}
   2f222:	b09c      	sub	sp, #112	; 0x70
   2f224:	af00      	add	r7, sp, #0
   2f226:	60f8      	str	r0, [r7, #12]
   2f228:	607a      	str	r2, [r7, #4]
   2f22a:	603b      	str	r3, [r7, #0]
   2f22c:	230b      	movs	r3, #11
   2f22e:	18fb      	adds	r3, r7, r3
   2f230:	1c0a      	adds	r2, r1, #0
   2f232:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f234:	2310      	movs	r3, #16
   2f236:	18fa      	adds	r2, r7, r3
   2f238:	4b31      	ldr	r3, [pc, #196]	; (2f300 <mqtt_connect_broker+0xe0>)
   2f23a:	0010      	movs	r0, r2
   2f23c:	0019      	movs	r1, r3
   2f23e:	2358      	movs	r3, #88	; 0x58
   2f240:	001a      	movs	r2, r3
   2f242:	4b30      	ldr	r3, [pc, #192]	; (2f304 <mqtt_connect_broker+0xe4>)
   2f244:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f246:	2310      	movs	r3, #16
   2f248:	18fb      	adds	r3, r7, r3
   2f24a:	2204      	movs	r2, #4
   2f24c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f24e:	2310      	movs	r3, #16
   2f250:	18fb      	adds	r3, r7, r3
   2f252:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f254:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f256:	2310      	movs	r3, #16
   2f258:	18fb      	adds	r3, r7, r3
   2f25a:	687a      	ldr	r2, [r7, #4]
   2f25c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f25e:	2310      	movs	r3, #16
   2f260:	18fb      	adds	r3, r7, r3
   2f262:	683a      	ldr	r2, [r7, #0]
   2f264:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f266:	2310      	movs	r3, #16
   2f268:	18fb      	adds	r3, r7, r3
   2f26a:	220b      	movs	r2, #11
   2f26c:	18ba      	adds	r2, r7, r2
   2f26e:	7812      	ldrb	r2, [r2, #0]
   2f270:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f272:	2310      	movs	r3, #16
   2f274:	18fb      	adds	r3, r7, r3
   2f276:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f278:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f27a:	2310      	movs	r3, #16
   2f27c:	18fb      	adds	r3, r7, r3
   2f27e:	2280      	movs	r2, #128	; 0x80
   2f280:	18ba      	adds	r2, r7, r2
   2f282:	6812      	ldr	r2, [r2, #0]
   2f284:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f286:	2310      	movs	r3, #16
   2f288:	18fb      	adds	r3, r7, r3
   2f28a:	228c      	movs	r2, #140	; 0x8c
   2f28c:	18ba      	adds	r2, r7, r2
   2f28e:	213c      	movs	r1, #60	; 0x3c
   2f290:	7812      	ldrb	r2, [r2, #0]
   2f292:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f294:	2310      	movs	r3, #16
   2f296:	18fb      	adds	r3, r7, r3
   2f298:	2288      	movs	r2, #136	; 0x88
   2f29a:	18ba      	adds	r2, r7, r2
   2f29c:	213d      	movs	r1, #61	; 0x3d
   2f29e:	7812      	ldrb	r2, [r2, #0]
   2f2a0:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f2a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f2a4:	2b00      	cmp	r3, #0
   2f2a6:	d008      	beq.n	2f2ba <mqtt_connect_broker+0x9a>
   2f2a8:	2380      	movs	r3, #128	; 0x80
   2f2aa:	18fb      	adds	r3, r7, r3
   2f2ac:	681b      	ldr	r3, [r3, #0]
   2f2ae:	2b00      	cmp	r3, #0
   2f2b0:	d003      	beq.n	2f2ba <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f2b2:	2310      	movs	r3, #16
   2f2b4:	18fb      	adds	r3, r7, r3
   2f2b6:	2201      	movs	r2, #1
   2f2b8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f2ba:	68fb      	ldr	r3, [r7, #12]
   2f2bc:	69db      	ldr	r3, [r3, #28]
   2f2be:	2210      	movs	r2, #16
   2f2c0:	18ba      	adds	r2, r7, r2
   2f2c2:	0011      	movs	r1, r2
   2f2c4:	0018      	movs	r0, r3
   2f2c6:	4b10      	ldr	r3, [pc, #64]	; (2f308 <mqtt_connect_broker+0xe8>)
   2f2c8:	4798      	blx	r3
   2f2ca:	0003      	movs	r3, r0
   2f2cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f2d0:	b2da      	uxtb	r2, r3
   2f2d2:	2368      	movs	r3, #104	; 0x68
   2f2d4:	18fb      	adds	r3, r7, r3
   2f2d6:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f2d8:	68fb      	ldr	r3, [r7, #12]
   2f2da:	681b      	ldr	r3, [r3, #0]
   2f2dc:	2b00      	cmp	r3, #0
   2f2de:	d006      	beq.n	2f2ee <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f2e0:	68fb      	ldr	r3, [r7, #12]
   2f2e2:	681b      	ldr	r3, [r3, #0]
   2f2e4:	2268      	movs	r2, #104	; 0x68
   2f2e6:	18ba      	adds	r2, r7, r2
   2f2e8:	68f8      	ldr	r0, [r7, #12]
   2f2ea:	2101      	movs	r1, #1
   2f2ec:	4798      	blx	r3
	
	module->isConnected = true;
   2f2ee:	68fb      	ldr	r3, [r7, #12]
   2f2f0:	2234      	movs	r2, #52	; 0x34
   2f2f2:	2101      	movs	r1, #1
   2f2f4:	5499      	strb	r1, [r3, r2]
	return rc;
   2f2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f2f8:	0018      	movs	r0, r3
   2f2fa:	46bd      	mov	sp, r7
   2f2fc:	b01c      	add	sp, #112	; 0x70
   2f2fe:	bd80      	pop	{r7, pc}
   2f300:	00039058 	.word	0x00039058
   2f304:	0003400d 	.word	0x0003400d
   2f308:	0002e649 	.word	0x0002e649

0002f30c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f30c:	b580      	push	{r7, lr}
   2f30e:	b084      	sub	sp, #16
   2f310:	af00      	add	r7, sp, #0
   2f312:	6078      	str	r0, [r7, #4]
   2f314:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f316:	687b      	ldr	r3, [r7, #4]
   2f318:	69db      	ldr	r3, [r3, #28]
   2f31a:	0018      	movs	r0, r3
   2f31c:	4b0c      	ldr	r3, [pc, #48]	; (2f350 <mqtt_disconnect+0x44>)
   2f31e:	4798      	blx	r3
   2f320:	0003      	movs	r3, r0
   2f322:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f324:	68fb      	ldr	r3, [r7, #12]
   2f326:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f328:	687b      	ldr	r3, [r7, #4]
   2f32a:	681b      	ldr	r3, [r3, #0]
   2f32c:	2b00      	cmp	r3, #0
   2f32e:	d006      	beq.n	2f33e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f330:	687b      	ldr	r3, [r7, #4]
   2f332:	681b      	ldr	r3, [r3, #0]
   2f334:	2208      	movs	r2, #8
   2f336:	18ba      	adds	r2, r7, r2
   2f338:	6878      	ldr	r0, [r7, #4]
   2f33a:	2105      	movs	r1, #5
   2f33c:	4798      	blx	r3
	
	module->isConnected = false;
   2f33e:	687b      	ldr	r3, [r7, #4]
   2f340:	2234      	movs	r2, #52	; 0x34
   2f342:	2100      	movs	r1, #0
   2f344:	5499      	strb	r1, [r3, r2]
	return rc;
   2f346:	68fb      	ldr	r3, [r7, #12]
}
   2f348:	0018      	movs	r0, r3
   2f34a:	46bd      	mov	sp, r7
   2f34c:	b004      	add	sp, #16
   2f34e:	bd80      	pop	{r7, pc}
   2f350:	0002ead5 	.word	0x0002ead5

0002f354 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f354:	b580      	push	{r7, lr}
   2f356:	b08a      	sub	sp, #40	; 0x28
   2f358:	af00      	add	r7, sp, #0
   2f35a:	60f8      	str	r0, [r7, #12]
   2f35c:	60b9      	str	r1, [r7, #8]
   2f35e:	607a      	str	r2, [r7, #4]
   2f360:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f362:	2314      	movs	r3, #20
   2f364:	18fb      	adds	r3, r7, r3
   2f366:	2230      	movs	r2, #48	; 0x30
   2f368:	18ba      	adds	r2, r7, r2
   2f36a:	7812      	ldrb	r2, [r2, #0]
   2f36c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f36e:	2314      	movs	r3, #20
   2f370:	18fb      	adds	r3, r7, r3
   2f372:	687a      	ldr	r2, [r7, #4]
   2f374:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f376:	2314      	movs	r3, #20
   2f378:	18fb      	adds	r3, r7, r3
   2f37a:	683a      	ldr	r2, [r7, #0]
   2f37c:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f37e:	2314      	movs	r3, #20
   2f380:	18fb      	adds	r3, r7, r3
   2f382:	2234      	movs	r2, #52	; 0x34
   2f384:	18ba      	adds	r2, r7, r2
   2f386:	7812      	ldrb	r2, [r2, #0]
   2f388:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f38a:	68fb      	ldr	r3, [r7, #12]
   2f38c:	69db      	ldr	r3, [r3, #28]
   2f38e:	2214      	movs	r2, #20
   2f390:	18ba      	adds	r2, r7, r2
   2f392:	68b9      	ldr	r1, [r7, #8]
   2f394:	0018      	movs	r0, r3
   2f396:	4b09      	ldr	r3, [pc, #36]	; (2f3bc <mqtt_publish+0x68>)
   2f398:	4798      	blx	r3
   2f39a:	0003      	movs	r3, r0
   2f39c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f39e:	68fb      	ldr	r3, [r7, #12]
   2f3a0:	681b      	ldr	r3, [r3, #0]
   2f3a2:	2b00      	cmp	r3, #0
   2f3a4:	d005      	beq.n	2f3b2 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f3a6:	68fb      	ldr	r3, [r7, #12]
   2f3a8:	681b      	ldr	r3, [r3, #0]
   2f3aa:	68f8      	ldr	r0, [r7, #12]
   2f3ac:	2200      	movs	r2, #0
   2f3ae:	2102      	movs	r1, #2
   2f3b0:	4798      	blx	r3
	
	return rc;
   2f3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f3b4:	0018      	movs	r0, r3
   2f3b6:	46bd      	mov	sp, r7
   2f3b8:	b00a      	add	sp, #40	; 0x28
   2f3ba:	bd80      	pop	{r7, pc}
   2f3bc:	0002e915 	.word	0x0002e915

0002f3c0 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f3c0:	b590      	push	{r4, r7, lr}
   2f3c2:	b087      	sub	sp, #28
   2f3c4:	af00      	add	r7, sp, #0
   2f3c6:	60f8      	str	r0, [r7, #12]
   2f3c8:	60b9      	str	r1, [r7, #8]
   2f3ca:	603b      	str	r3, [r7, #0]
   2f3cc:	1dfb      	adds	r3, r7, #7
   2f3ce:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f3d0:	68fb      	ldr	r3, [r7, #12]
   2f3d2:	69d8      	ldr	r0, [r3, #28]
   2f3d4:	683c      	ldr	r4, [r7, #0]
   2f3d6:	1dfb      	adds	r3, r7, #7
   2f3d8:	781a      	ldrb	r2, [r3, #0]
   2f3da:	68b9      	ldr	r1, [r7, #8]
   2f3dc:	0023      	movs	r3, r4
   2f3de:	4c09      	ldr	r4, [pc, #36]	; (2f404 <mqtt_subscribe+0x44>)
   2f3e0:	47a0      	blx	r4
   2f3e2:	0003      	movs	r3, r0
   2f3e4:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f3e6:	68fb      	ldr	r3, [r7, #12]
   2f3e8:	681b      	ldr	r3, [r3, #0]
   2f3ea:	2b00      	cmp	r3, #0
   2f3ec:	d005      	beq.n	2f3fa <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f3ee:	68fb      	ldr	r3, [r7, #12]
   2f3f0:	681b      	ldr	r3, [r3, #0]
   2f3f2:	68f8      	ldr	r0, [r7, #12]
   2f3f4:	2200      	movs	r2, #0
   2f3f6:	2103      	movs	r1, #3
   2f3f8:	4798      	blx	r3
	
	return rc;
   2f3fa:	697b      	ldr	r3, [r7, #20]
}
   2f3fc:	0018      	movs	r0, r3
   2f3fe:	46bd      	mov	sp, r7
   2f400:	b007      	add	sp, #28
   2f402:	bd90      	pop	{r4, r7, pc}
   2f404:	0002e789 	.word	0x0002e789

0002f408 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f408:	b580      	push	{r7, lr}
   2f40a:	b082      	sub	sp, #8
   2f40c:	af00      	add	r7, sp, #0
   2f40e:	6078      	str	r0, [r7, #4]
   2f410:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f412:	687b      	ldr	r3, [r7, #4]
   2f414:	69db      	ldr	r3, [r3, #28]
   2f416:	683a      	ldr	r2, [r7, #0]
   2f418:	0011      	movs	r1, r2
   2f41a:	0018      	movs	r0, r3
   2f41c:	4b03      	ldr	r3, [pc, #12]	; (2f42c <mqtt_yield+0x24>)
   2f41e:	4798      	blx	r3
   2f420:	0003      	movs	r3, r0
   2f422:	0018      	movs	r0, r3
   2f424:	46bd      	mov	sp, r7
   2f426:	b002      	add	sp, #8
   2f428:	bd80      	pop	{r7, pc}
   2f42a:	46c0      	nop			; (mov r8, r8)
   2f42c:	0002e591 	.word	0x0002e591

0002f430 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f430:	b590      	push	{r4, r7, lr}
   2f432:	b085      	sub	sp, #20
   2f434:	af00      	add	r7, sp, #0
   2f436:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f438:	2300      	movs	r3, #0
   2f43a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f43c:	687b      	ldr	r3, [r7, #4]
   2f43e:	7a1b      	ldrb	r3, [r3, #8]
   2f440:	2b03      	cmp	r3, #3
   2f442:	d102      	bne.n	2f44a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f444:	230c      	movs	r3, #12
   2f446:	60fb      	str	r3, [r7, #12]
   2f448:	e005      	b.n	2f456 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f44a:	687b      	ldr	r3, [r7, #4]
   2f44c:	7a1b      	ldrb	r3, [r3, #8]
   2f44e:	2b04      	cmp	r3, #4
   2f450:	d101      	bne.n	2f456 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f452:	230a      	movs	r3, #10
   2f454:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f456:	687b      	ldr	r3, [r7, #4]
   2f458:	68d8      	ldr	r0, [r3, #12]
   2f45a:	6919      	ldr	r1, [r3, #16]
   2f45c:	695a      	ldr	r2, [r3, #20]
   2f45e:	4b25      	ldr	r3, [pc, #148]	; (2f4f4 <MQTTSerialize_connectLength+0xc4>)
   2f460:	4798      	blx	r3
   2f462:	0003      	movs	r3, r0
   2f464:	3302      	adds	r3, #2
   2f466:	68fa      	ldr	r2, [r7, #12]
   2f468:	18d3      	adds	r3, r2, r3
   2f46a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f46c:	687b      	ldr	r3, [r7, #4]
   2f46e:	7edb      	ldrb	r3, [r3, #27]
   2f470:	2b00      	cmp	r3, #0
   2f472:	d013      	beq.n	2f49c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f474:	687b      	ldr	r3, [r7, #4]
   2f476:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f478:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f47c:	4b1d      	ldr	r3, [pc, #116]	; (2f4f4 <MQTTSerialize_connectLength+0xc4>)
   2f47e:	4798      	blx	r3
   2f480:	0003      	movs	r3, r0
   2f482:	1c9c      	adds	r4, r3, #2
   2f484:	687b      	ldr	r3, [r7, #4]
   2f486:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f488:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f48a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f48c:	4b19      	ldr	r3, [pc, #100]	; (2f4f4 <MQTTSerialize_connectLength+0xc4>)
   2f48e:	4798      	blx	r3
   2f490:	0003      	movs	r3, r0
   2f492:	18e3      	adds	r3, r4, r3
   2f494:	3302      	adds	r3, #2
   2f496:	68fa      	ldr	r2, [r7, #12]
   2f498:	18d3      	adds	r3, r2, r3
   2f49a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f49c:	687b      	ldr	r3, [r7, #4]
   2f49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f4a0:	2b00      	cmp	r3, #0
   2f4a2:	d103      	bne.n	2f4ac <MQTTSerialize_connectLength+0x7c>
   2f4a4:	687b      	ldr	r3, [r7, #4]
   2f4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f4a8:	2b00      	cmp	r3, #0
   2f4aa:	d00a      	beq.n	2f4c2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f4ac:	687b      	ldr	r3, [r7, #4]
   2f4ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f4b0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f4b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f4b4:	4b0f      	ldr	r3, [pc, #60]	; (2f4f4 <MQTTSerialize_connectLength+0xc4>)
   2f4b6:	4798      	blx	r3
   2f4b8:	0003      	movs	r3, r0
   2f4ba:	3302      	adds	r3, #2
   2f4bc:	68fa      	ldr	r2, [r7, #12]
   2f4be:	18d3      	adds	r3, r2, r3
   2f4c0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f4c2:	687b      	ldr	r3, [r7, #4]
   2f4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f4c6:	2b00      	cmp	r3, #0
   2f4c8:	d103      	bne.n	2f4d2 <MQTTSerialize_connectLength+0xa2>
   2f4ca:	687b      	ldr	r3, [r7, #4]
   2f4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f4ce:	2b00      	cmp	r3, #0
   2f4d0:	d00a      	beq.n	2f4e8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f4d2:	687b      	ldr	r3, [r7, #4]
   2f4d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f4d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f4d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f4da:	4b06      	ldr	r3, [pc, #24]	; (2f4f4 <MQTTSerialize_connectLength+0xc4>)
   2f4dc:	4798      	blx	r3
   2f4de:	0003      	movs	r3, r0
   2f4e0:	3302      	adds	r3, #2
   2f4e2:	68fa      	ldr	r2, [r7, #12]
   2f4e4:	18d3      	adds	r3, r2, r3
   2f4e6:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f4e8:	68fb      	ldr	r3, [r7, #12]
}
   2f4ea:	0018      	movs	r0, r3
   2f4ec:	46bd      	mov	sp, r7
   2f4ee:	b005      	add	sp, #20
   2f4f0:	bd90      	pop	{r4, r7, pc}
   2f4f2:	46c0      	nop			; (mov r8, r8)
   2f4f4:	0002fea1 	.word	0x0002fea1

0002f4f8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f4f8:	b590      	push	{r4, r7, lr}
   2f4fa:	b08b      	sub	sp, #44	; 0x2c
   2f4fc:	af00      	add	r7, sp, #0
   2f4fe:	60f8      	str	r0, [r7, #12]
   2f500:	60b9      	str	r1, [r7, #8]
   2f502:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f504:	68fb      	ldr	r3, [r7, #12]
   2f506:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f508:	2300      	movs	r3, #0
   2f50a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f50c:	2300      	movs	r3, #0
   2f50e:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f510:	2300      	movs	r3, #0
   2f512:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f514:	2301      	movs	r3, #1
   2f516:	425b      	negs	r3, r3
   2f518:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f51a:	687b      	ldr	r3, [r7, #4]
   2f51c:	0018      	movs	r0, r3
   2f51e:	4b8c      	ldr	r3, [pc, #560]	; (2f750 <MQTTSerialize_connect+0x258>)
   2f520:	4798      	blx	r3
   2f522:	0003      	movs	r3, r0
   2f524:	623b      	str	r3, [r7, #32]
   2f526:	6a3b      	ldr	r3, [r7, #32]
   2f528:	0018      	movs	r0, r3
   2f52a:	4b8a      	ldr	r3, [pc, #552]	; (2f754 <MQTTSerialize_connect+0x25c>)
   2f52c:	4798      	blx	r3
   2f52e:	0002      	movs	r2, r0
   2f530:	68bb      	ldr	r3, [r7, #8]
   2f532:	429a      	cmp	r2, r3
   2f534:	dd03      	ble.n	2f53e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f536:	2302      	movs	r3, #2
   2f538:	425b      	negs	r3, r3
   2f53a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f53c:	e103      	b.n	2f746 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2f53e:	2318      	movs	r3, #24
   2f540:	18fb      	adds	r3, r7, r3
   2f542:	2200      	movs	r2, #0
   2f544:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2f546:	2318      	movs	r3, #24
   2f548:	18fb      	adds	r3, r7, r3
   2f54a:	781a      	ldrb	r2, [r3, #0]
   2f54c:	210f      	movs	r1, #15
   2f54e:	400a      	ands	r2, r1
   2f550:	1c11      	adds	r1, r2, #0
   2f552:	2210      	movs	r2, #16
   2f554:	430a      	orrs	r2, r1
   2f556:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f558:	2318      	movs	r3, #24
   2f55a:	18fb      	adds	r3, r7, r3
   2f55c:	781a      	ldrb	r2, [r3, #0]
   2f55e:	231c      	movs	r3, #28
   2f560:	18fb      	adds	r3, r7, r3
   2f562:	0011      	movs	r1, r2
   2f564:	0018      	movs	r0, r3
   2f566:	4b7c      	ldr	r3, [pc, #496]	; (2f758 <MQTTSerialize_connect+0x260>)
   2f568:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2f56a:	69fb      	ldr	r3, [r7, #28]
   2f56c:	6a3a      	ldr	r2, [r7, #32]
   2f56e:	0011      	movs	r1, r2
   2f570:	0018      	movs	r0, r3
   2f572:	4b7a      	ldr	r3, [pc, #488]	; (2f75c <MQTTSerialize_connect+0x264>)
   2f574:	4798      	blx	r3
   2f576:	0002      	movs	r2, r0
   2f578:	69fb      	ldr	r3, [r7, #28]
   2f57a:	189b      	adds	r3, r3, r2
   2f57c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2f57e:	687b      	ldr	r3, [r7, #4]
   2f580:	7a1b      	ldrb	r3, [r3, #8]
   2f582:	2b04      	cmp	r3, #4
   2f584:	d10d      	bne.n	2f5a2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2f586:	4a76      	ldr	r2, [pc, #472]	; (2f760 <MQTTSerialize_connect+0x268>)
   2f588:	231c      	movs	r3, #28
   2f58a:	18fb      	adds	r3, r7, r3
   2f58c:	0011      	movs	r1, r2
   2f58e:	0018      	movs	r0, r3
   2f590:	4b74      	ldr	r3, [pc, #464]	; (2f764 <MQTTSerialize_connect+0x26c>)
   2f592:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2f594:	231c      	movs	r3, #28
   2f596:	18fb      	adds	r3, r7, r3
   2f598:	2104      	movs	r1, #4
   2f59a:	0018      	movs	r0, r3
   2f59c:	4b6e      	ldr	r3, [pc, #440]	; (2f758 <MQTTSerialize_connect+0x260>)
   2f59e:	4798      	blx	r3
   2f5a0:	e00c      	b.n	2f5bc <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2f5a2:	4a71      	ldr	r2, [pc, #452]	; (2f768 <MQTTSerialize_connect+0x270>)
   2f5a4:	231c      	movs	r3, #28
   2f5a6:	18fb      	adds	r3, r7, r3
   2f5a8:	0011      	movs	r1, r2
   2f5aa:	0018      	movs	r0, r3
   2f5ac:	4b6d      	ldr	r3, [pc, #436]	; (2f764 <MQTTSerialize_connect+0x26c>)
   2f5ae:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2f5b0:	231c      	movs	r3, #28
   2f5b2:	18fb      	adds	r3, r7, r3
   2f5b4:	2103      	movs	r1, #3
   2f5b6:	0018      	movs	r0, r3
   2f5b8:	4b67      	ldr	r3, [pc, #412]	; (2f758 <MQTTSerialize_connect+0x260>)
   2f5ba:	4798      	blx	r3
	}

	flags.all = 0;
   2f5bc:	2314      	movs	r3, #20
   2f5be:	18fb      	adds	r3, r7, r3
   2f5c0:	2200      	movs	r2, #0
   2f5c2:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2f5c4:	687b      	ldr	r3, [r7, #4]
   2f5c6:	7e9b      	ldrb	r3, [r3, #26]
   2f5c8:	1c1a      	adds	r2, r3, #0
   2f5ca:	2301      	movs	r3, #1
   2f5cc:	4013      	ands	r3, r2
   2f5ce:	b2da      	uxtb	r2, r3
   2f5d0:	2314      	movs	r3, #20
   2f5d2:	18fb      	adds	r3, r7, r3
   2f5d4:	2101      	movs	r1, #1
   2f5d6:	400a      	ands	r2, r1
   2f5d8:	1890      	adds	r0, r2, r2
   2f5da:	781a      	ldrb	r2, [r3, #0]
   2f5dc:	2102      	movs	r1, #2
   2f5de:	438a      	bics	r2, r1
   2f5e0:	1c11      	adds	r1, r2, #0
   2f5e2:	1c02      	adds	r2, r0, #0
   2f5e4:	430a      	orrs	r2, r1
   2f5e6:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2f5e8:	687b      	ldr	r3, [r7, #4]
   2f5ea:	7edb      	ldrb	r3, [r3, #27]
   2f5ec:	1e5a      	subs	r2, r3, #1
   2f5ee:	4193      	sbcs	r3, r2
   2f5f0:	b2da      	uxtb	r2, r3
   2f5f2:	2314      	movs	r3, #20
   2f5f4:	18fb      	adds	r3, r7, r3
   2f5f6:	2101      	movs	r1, #1
   2f5f8:	400a      	ands	r2, r1
   2f5fa:	0090      	lsls	r0, r2, #2
   2f5fc:	781a      	ldrb	r2, [r3, #0]
   2f5fe:	2104      	movs	r1, #4
   2f600:	438a      	bics	r2, r1
   2f602:	1c11      	adds	r1, r2, #0
   2f604:	1c02      	adds	r2, r0, #0
   2f606:	430a      	orrs	r2, r1
   2f608:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2f60a:	2314      	movs	r3, #20
   2f60c:	18fb      	adds	r3, r7, r3
   2f60e:	781b      	ldrb	r3, [r3, #0]
   2f610:	2204      	movs	r2, #4
   2f612:	4013      	ands	r3, r2
   2f614:	b2db      	uxtb	r3, r3
   2f616:	2b00      	cmp	r3, #0
   2f618:	d025      	beq.n	2f666 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2f61a:	687b      	ldr	r3, [r7, #4]
   2f61c:	223d      	movs	r2, #61	; 0x3d
   2f61e:	5c9b      	ldrb	r3, [r3, r2]
   2f620:	1c1a      	adds	r2, r3, #0
   2f622:	2303      	movs	r3, #3
   2f624:	4013      	ands	r3, r2
   2f626:	b2da      	uxtb	r2, r3
   2f628:	2314      	movs	r3, #20
   2f62a:	18fb      	adds	r3, r7, r3
   2f62c:	2103      	movs	r1, #3
   2f62e:	400a      	ands	r2, r1
   2f630:	00d0      	lsls	r0, r2, #3
   2f632:	781a      	ldrb	r2, [r3, #0]
   2f634:	2118      	movs	r1, #24
   2f636:	438a      	bics	r2, r1
   2f638:	1c11      	adds	r1, r2, #0
   2f63a:	1c02      	adds	r2, r0, #0
   2f63c:	430a      	orrs	r2, r1
   2f63e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f640:	687b      	ldr	r3, [r7, #4]
   2f642:	223c      	movs	r2, #60	; 0x3c
   2f644:	5c9b      	ldrb	r3, [r3, r2]
   2f646:	1c1a      	adds	r2, r3, #0
   2f648:	2301      	movs	r3, #1
   2f64a:	4013      	ands	r3, r2
   2f64c:	b2da      	uxtb	r2, r3
   2f64e:	2314      	movs	r3, #20
   2f650:	18fb      	adds	r3, r7, r3
   2f652:	2101      	movs	r1, #1
   2f654:	400a      	ands	r2, r1
   2f656:	0150      	lsls	r0, r2, #5
   2f658:	781a      	ldrb	r2, [r3, #0]
   2f65a:	2120      	movs	r1, #32
   2f65c:	438a      	bics	r2, r1
   2f65e:	1c11      	adds	r1, r2, #0
   2f660:	1c02      	adds	r2, r0, #0
   2f662:	430a      	orrs	r2, r1
   2f664:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f666:	687b      	ldr	r3, [r7, #4]
   2f668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f66a:	2b00      	cmp	r3, #0
   2f66c:	d103      	bne.n	2f676 <MQTTSerialize_connect+0x17e>
   2f66e:	687b      	ldr	r3, [r7, #4]
   2f670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f672:	2b00      	cmp	r3, #0
   2f674:	d006      	beq.n	2f684 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f676:	2314      	movs	r3, #20
   2f678:	18fb      	adds	r3, r7, r3
   2f67a:	781a      	ldrb	r2, [r3, #0]
   2f67c:	2180      	movs	r1, #128	; 0x80
   2f67e:	4249      	negs	r1, r1
   2f680:	430a      	orrs	r2, r1
   2f682:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f684:	687b      	ldr	r3, [r7, #4]
   2f686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f688:	2b00      	cmp	r3, #0
   2f68a:	d103      	bne.n	2f694 <MQTTSerialize_connect+0x19c>
   2f68c:	687b      	ldr	r3, [r7, #4]
   2f68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f690:	2b00      	cmp	r3, #0
   2f692:	d005      	beq.n	2f6a0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f694:	2314      	movs	r3, #20
   2f696:	18fb      	adds	r3, r7, r3
   2f698:	781a      	ldrb	r2, [r3, #0]
   2f69a:	2140      	movs	r1, #64	; 0x40
   2f69c:	430a      	orrs	r2, r1
   2f69e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f6a0:	2314      	movs	r3, #20
   2f6a2:	18fb      	adds	r3, r7, r3
   2f6a4:	781a      	ldrb	r2, [r3, #0]
   2f6a6:	231c      	movs	r3, #28
   2f6a8:	18fb      	adds	r3, r7, r3
   2f6aa:	0011      	movs	r1, r2
   2f6ac:	0018      	movs	r0, r3
   2f6ae:	4b2a      	ldr	r3, [pc, #168]	; (2f758 <MQTTSerialize_connect+0x260>)
   2f6b0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f6b2:	687b      	ldr	r3, [r7, #4]
   2f6b4:	8b1b      	ldrh	r3, [r3, #24]
   2f6b6:	001a      	movs	r2, r3
   2f6b8:	231c      	movs	r3, #28
   2f6ba:	18fb      	adds	r3, r7, r3
   2f6bc:	0011      	movs	r1, r2
   2f6be:	0018      	movs	r0, r3
   2f6c0:	4b2a      	ldr	r3, [pc, #168]	; (2f76c <MQTTSerialize_connect+0x274>)
   2f6c2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f6c4:	687b      	ldr	r3, [r7, #4]
   2f6c6:	221c      	movs	r2, #28
   2f6c8:	18b8      	adds	r0, r7, r2
   2f6ca:	68d9      	ldr	r1, [r3, #12]
   2f6cc:	691a      	ldr	r2, [r3, #16]
   2f6ce:	695b      	ldr	r3, [r3, #20]
   2f6d0:	4c27      	ldr	r4, [pc, #156]	; (2f770 <MQTTSerialize_connect+0x278>)
   2f6d2:	47a0      	blx	r4
	if (options->willFlag)
   2f6d4:	687b      	ldr	r3, [r7, #4]
   2f6d6:	7edb      	ldrb	r3, [r3, #27]
   2f6d8:	2b00      	cmp	r3, #0
   2f6da:	d00f      	beq.n	2f6fc <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2f6dc:	687b      	ldr	r3, [r7, #4]
   2f6de:	221c      	movs	r2, #28
   2f6e0:	18b8      	adds	r0, r7, r2
   2f6e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2f6e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f6e8:	4c21      	ldr	r4, [pc, #132]	; (2f770 <MQTTSerialize_connect+0x278>)
   2f6ea:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2f6ec:	687b      	ldr	r3, [r7, #4]
   2f6ee:	221c      	movs	r2, #28
   2f6f0:	18b8      	adds	r0, r7, r2
   2f6f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2f6f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f6f8:	4c1d      	ldr	r4, [pc, #116]	; (2f770 <MQTTSerialize_connect+0x278>)
   2f6fa:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2f6fc:	2314      	movs	r3, #20
   2f6fe:	18fb      	adds	r3, r7, r3
   2f700:	781b      	ldrb	r3, [r3, #0]
   2f702:	227f      	movs	r2, #127	; 0x7f
   2f704:	4393      	bics	r3, r2
   2f706:	b2db      	uxtb	r3, r3
   2f708:	2b00      	cmp	r3, #0
   2f70a:	d007      	beq.n	2f71c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2f70c:	687b      	ldr	r3, [r7, #4]
   2f70e:	221c      	movs	r2, #28
   2f710:	18b8      	adds	r0, r7, r2
   2f712:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2f714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f718:	4c15      	ldr	r4, [pc, #84]	; (2f770 <MQTTSerialize_connect+0x278>)
   2f71a:	47a0      	blx	r4
	if (flags.bits.password)
   2f71c:	2314      	movs	r3, #20
   2f71e:	18fb      	adds	r3, r7, r3
   2f720:	781b      	ldrb	r3, [r3, #0]
   2f722:	2240      	movs	r2, #64	; 0x40
   2f724:	4013      	ands	r3, r2
   2f726:	b2db      	uxtb	r3, r3
   2f728:	2b00      	cmp	r3, #0
   2f72a:	d007      	beq.n	2f73c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2f72c:	687b      	ldr	r3, [r7, #4]
   2f72e:	221c      	movs	r2, #28
   2f730:	18b8      	adds	r0, r7, r2
   2f732:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2f734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f738:	4c0d      	ldr	r4, [pc, #52]	; (2f770 <MQTTSerialize_connect+0x278>)
   2f73a:	47a0      	blx	r4

	rc = ptr - buf;
   2f73c:	69fb      	ldr	r3, [r7, #28]
   2f73e:	001a      	movs	r2, r3
   2f740:	68fb      	ldr	r3, [r7, #12]
   2f742:	1ad3      	subs	r3, r2, r3
   2f744:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f748:	0018      	movs	r0, r3
   2f74a:	46bd      	mov	sp, r7
   2f74c:	b00b      	add	sp, #44	; 0x2c
   2f74e:	bd90      	pop	{r4, r7, pc}
   2f750:	0002f431 	.word	0x0002f431
   2f754:	0002fbc5 	.word	0x0002fbc5
   2f758:	0002fce7 	.word	0x0002fce7
   2f75c:	0002facd 	.word	0x0002facd
   2f760:	000390b0 	.word	0x000390b0
   2f764:	0002fd69 	.word	0x0002fd69
   2f768:	000390b8 	.word	0x000390b8
   2f76c:	0002fd11 	.word	0x0002fd11
   2f770:	0002fdb9 	.word	0x0002fdb9

0002f774 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2f774:	b580      	push	{r7, lr}
   2f776:	b08a      	sub	sp, #40	; 0x28
   2f778:	af00      	add	r7, sp, #0
   2f77a:	60f8      	str	r0, [r7, #12]
   2f77c:	60b9      	str	r1, [r7, #8]
   2f77e:	607a      	str	r2, [r7, #4]
   2f780:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f782:	2300      	movs	r3, #0
   2f784:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f786:	687b      	ldr	r3, [r7, #4]
   2f788:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f78a:	2300      	movs	r3, #0
   2f78c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f78e:	2300      	movs	r3, #0
   2f790:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2f792:	2300      	movs	r3, #0
   2f794:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f796:	2318      	movs	r3, #24
   2f798:	18fb      	adds	r3, r7, r3
   2f79a:	0018      	movs	r0, r3
   2f79c:	4b25      	ldr	r3, [pc, #148]	; (2f834 <MQTTDeserialize_connack+0xc0>)
   2f79e:	4798      	blx	r3
   2f7a0:	0003      	movs	r3, r0
   2f7a2:	001a      	movs	r2, r3
   2f7a4:	231c      	movs	r3, #28
   2f7a6:	18fb      	adds	r3, r7, r3
   2f7a8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2f7aa:	231c      	movs	r3, #28
   2f7ac:	18fb      	adds	r3, r7, r3
   2f7ae:	781b      	ldrb	r3, [r3, #0]
   2f7b0:	220f      	movs	r2, #15
   2f7b2:	4393      	bics	r3, r2
   2f7b4:	b2db      	uxtb	r3, r3
   2f7b6:	2b20      	cmp	r3, #32
   2f7b8:	d134      	bne.n	2f824 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f7ba:	69bb      	ldr	r3, [r7, #24]
   2f7bc:	2214      	movs	r2, #20
   2f7be:	18ba      	adds	r2, r7, r2
   2f7c0:	0011      	movs	r1, r2
   2f7c2:	0018      	movs	r0, r3
   2f7c4:	4b1c      	ldr	r3, [pc, #112]	; (2f838 <MQTTDeserialize_connack+0xc4>)
   2f7c6:	4798      	blx	r3
   2f7c8:	0003      	movs	r3, r0
   2f7ca:	627b      	str	r3, [r7, #36]	; 0x24
   2f7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f7ce:	69bb      	ldr	r3, [r7, #24]
   2f7d0:	189b      	adds	r3, r3, r2
   2f7d2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f7d4:	69bb      	ldr	r3, [r7, #24]
   2f7d6:	697a      	ldr	r2, [r7, #20]
   2f7d8:	189b      	adds	r3, r3, r2
   2f7da:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f7dc:	6a3b      	ldr	r3, [r7, #32]
   2f7de:	69ba      	ldr	r2, [r7, #24]
   2f7e0:	1a9b      	subs	r3, r3, r2
   2f7e2:	2b01      	cmp	r3, #1
   2f7e4:	dd20      	ble.n	2f828 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f7e6:	2318      	movs	r3, #24
   2f7e8:	18fb      	adds	r3, r7, r3
   2f7ea:	0018      	movs	r0, r3
   2f7ec:	4b11      	ldr	r3, [pc, #68]	; (2f834 <MQTTDeserialize_connack+0xc0>)
   2f7ee:	4798      	blx	r3
   2f7f0:	0003      	movs	r3, r0
   2f7f2:	001a      	movs	r2, r3
   2f7f4:	2310      	movs	r3, #16
   2f7f6:	18fb      	adds	r3, r7, r3
   2f7f8:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f7fa:	2310      	movs	r3, #16
   2f7fc:	18fb      	adds	r3, r7, r3
   2f7fe:	781b      	ldrb	r3, [r3, #0]
   2f800:	061b      	lsls	r3, r3, #24
   2f802:	0fdb      	lsrs	r3, r3, #31
   2f804:	b2db      	uxtb	r3, r3
   2f806:	001a      	movs	r2, r3
   2f808:	68fb      	ldr	r3, [r7, #12]
   2f80a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f80c:	2318      	movs	r3, #24
   2f80e:	18fb      	adds	r3, r7, r3
   2f810:	0018      	movs	r0, r3
   2f812:	4b08      	ldr	r3, [pc, #32]	; (2f834 <MQTTDeserialize_connack+0xc0>)
   2f814:	4798      	blx	r3
   2f816:	0003      	movs	r3, r0
   2f818:	001a      	movs	r2, r3
   2f81a:	68bb      	ldr	r3, [r7, #8]
   2f81c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f81e:	2301      	movs	r3, #1
   2f820:	627b      	str	r3, [r7, #36]	; 0x24
   2f822:	e002      	b.n	2f82a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f824:	46c0      	nop			; (mov r8, r8)
   2f826:	e000      	b.n	2f82a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f828:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f82c:	0018      	movs	r0, r3
   2f82e:	46bd      	mov	sp, r7
   2f830:	b00a      	add	sp, #40	; 0x28
   2f832:	bd80      	pop	{r7, pc}
   2f834:	0002fcbb 	.word	0x0002fcbb
   2f838:	0002fc55 	.word	0x0002fc55

0002f83c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f83c:	b580      	push	{r7, lr}
   2f83e:	b088      	sub	sp, #32
   2f840:	af00      	add	r7, sp, #0
   2f842:	60f8      	str	r0, [r7, #12]
   2f844:	60b9      	str	r1, [r7, #8]
   2f846:	1dfb      	adds	r3, r7, #7
   2f848:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f84a:	2300      	movs	r3, #0
   2f84c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f84e:	2301      	movs	r3, #1
   2f850:	425b      	negs	r3, r3
   2f852:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f854:	68fb      	ldr	r3, [r7, #12]
   2f856:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f858:	68bb      	ldr	r3, [r7, #8]
   2f85a:	2b01      	cmp	r3, #1
   2f85c:	dc03      	bgt.n	2f866 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f85e:	2302      	movs	r3, #2
   2f860:	425b      	negs	r3, r3
   2f862:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f864:	e029      	b.n	2f8ba <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f866:	2318      	movs	r3, #24
   2f868:	18fb      	adds	r3, r7, r3
   2f86a:	2200      	movs	r2, #0
   2f86c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f86e:	1dfb      	adds	r3, r7, #7
   2f870:	781b      	ldrb	r3, [r3, #0]
   2f872:	220f      	movs	r2, #15
   2f874:	4013      	ands	r3, r2
   2f876:	b2da      	uxtb	r2, r3
   2f878:	2318      	movs	r3, #24
   2f87a:	18fb      	adds	r3, r7, r3
   2f87c:	0110      	lsls	r0, r2, #4
   2f87e:	781a      	ldrb	r2, [r3, #0]
   2f880:	210f      	movs	r1, #15
   2f882:	400a      	ands	r2, r1
   2f884:	1c11      	adds	r1, r2, #0
   2f886:	1c02      	adds	r2, r0, #0
   2f888:	430a      	orrs	r2, r1
   2f88a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f88c:	2318      	movs	r3, #24
   2f88e:	18fb      	adds	r3, r7, r3
   2f890:	781a      	ldrb	r2, [r3, #0]
   2f892:	2314      	movs	r3, #20
   2f894:	18fb      	adds	r3, r7, r3
   2f896:	0011      	movs	r1, r2
   2f898:	0018      	movs	r0, r3
   2f89a:	4b0a      	ldr	r3, [pc, #40]	; (2f8c4 <MQTTSerialize_zero+0x88>)
   2f89c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f89e:	697b      	ldr	r3, [r7, #20]
   2f8a0:	2100      	movs	r1, #0
   2f8a2:	0018      	movs	r0, r3
   2f8a4:	4b08      	ldr	r3, [pc, #32]	; (2f8c8 <MQTTSerialize_zero+0x8c>)
   2f8a6:	4798      	blx	r3
   2f8a8:	0002      	movs	r2, r0
   2f8aa:	697b      	ldr	r3, [r7, #20]
   2f8ac:	189b      	adds	r3, r3, r2
   2f8ae:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f8b0:	697b      	ldr	r3, [r7, #20]
   2f8b2:	001a      	movs	r2, r3
   2f8b4:	68fb      	ldr	r3, [r7, #12]
   2f8b6:	1ad3      	subs	r3, r2, r3
   2f8b8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f8ba:	69fb      	ldr	r3, [r7, #28]
}
   2f8bc:	0018      	movs	r0, r3
   2f8be:	46bd      	mov	sp, r7
   2f8c0:	b008      	add	sp, #32
   2f8c2:	bd80      	pop	{r7, pc}
   2f8c4:	0002fce7 	.word	0x0002fce7
   2f8c8:	0002facd 	.word	0x0002facd

0002f8cc <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f8cc:	b580      	push	{r7, lr}
   2f8ce:	b082      	sub	sp, #8
   2f8d0:	af00      	add	r7, sp, #0
   2f8d2:	6078      	str	r0, [r7, #4]
   2f8d4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f8d6:	6839      	ldr	r1, [r7, #0]
   2f8d8:	687b      	ldr	r3, [r7, #4]
   2f8da:	220e      	movs	r2, #14
   2f8dc:	0018      	movs	r0, r3
   2f8de:	4b03      	ldr	r3, [pc, #12]	; (2f8ec <MQTTSerialize_disconnect+0x20>)
   2f8e0:	4798      	blx	r3
   2f8e2:	0003      	movs	r3, r0
}
   2f8e4:	0018      	movs	r0, r3
   2f8e6:	46bd      	mov	sp, r7
   2f8e8:	b002      	add	sp, #8
   2f8ea:	bd80      	pop	{r7, pc}
   2f8ec:	0002f83d 	.word	0x0002f83d

0002f8f0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f8f0:	b580      	push	{r7, lr}
   2f8f2:	b082      	sub	sp, #8
   2f8f4:	af00      	add	r7, sp, #0
   2f8f6:	6078      	str	r0, [r7, #4]
   2f8f8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f8fa:	6839      	ldr	r1, [r7, #0]
   2f8fc:	687b      	ldr	r3, [r7, #4]
   2f8fe:	220c      	movs	r2, #12
   2f900:	0018      	movs	r0, r3
   2f902:	4b03      	ldr	r3, [pc, #12]	; (2f910 <MQTTSerialize_pingreq+0x20>)
   2f904:	4798      	blx	r3
   2f906:	0003      	movs	r3, r0
}
   2f908:	0018      	movs	r0, r3
   2f90a:	46bd      	mov	sp, r7
   2f90c:	b002      	add	sp, #8
   2f90e:	bd80      	pop	{r7, pc}
   2f910:	0002f83d 	.word	0x0002f83d

0002f914 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f914:	b580      	push	{r7, lr}
   2f916:	b08a      	sub	sp, #40	; 0x28
   2f918:	af00      	add	r7, sp, #0
   2f91a:	60f8      	str	r0, [r7, #12]
   2f91c:	60b9      	str	r1, [r7, #8]
   2f91e:	607a      	str	r2, [r7, #4]
   2f920:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f922:	2300      	movs	r3, #0
   2f924:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f928:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f92a:	2300      	movs	r3, #0
   2f92c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f92e:	2300      	movs	r3, #0
   2f930:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f932:	2300      	movs	r3, #0
   2f934:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f936:	2318      	movs	r3, #24
   2f938:	18fb      	adds	r3, r7, r3
   2f93a:	0018      	movs	r0, r3
   2f93c:	4b32      	ldr	r3, [pc, #200]	; (2fa08 <MQTTDeserialize_publish+0xf4>)
   2f93e:	4798      	blx	r3
   2f940:	0003      	movs	r3, r0
   2f942:	001a      	movs	r2, r3
   2f944:	231c      	movs	r3, #28
   2f946:	18fb      	adds	r3, r7, r3
   2f948:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f94a:	231c      	movs	r3, #28
   2f94c:	18fb      	adds	r3, r7, r3
   2f94e:	781b      	ldrb	r3, [r3, #0]
   2f950:	220f      	movs	r2, #15
   2f952:	4393      	bics	r3, r2
   2f954:	b2db      	uxtb	r3, r3
   2f956:	2b30      	cmp	r3, #48	; 0x30
   2f958:	d150      	bne.n	2f9fc <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f95a:	231c      	movs	r3, #28
   2f95c:	18fb      	adds	r3, r7, r3
   2f95e:	781b      	ldrb	r3, [r3, #0]
   2f960:	071b      	lsls	r3, r3, #28
   2f962:	0fdb      	lsrs	r3, r3, #31
   2f964:	b2db      	uxtb	r3, r3
   2f966:	001a      	movs	r2, r3
   2f968:	68fb      	ldr	r3, [r7, #12]
   2f96a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f96c:	231c      	movs	r3, #28
   2f96e:	18fb      	adds	r3, r7, r3
   2f970:	781b      	ldrb	r3, [r3, #0]
   2f972:	075b      	lsls	r3, r3, #29
   2f974:	0f9b      	lsrs	r3, r3, #30
   2f976:	b2db      	uxtb	r3, r3
   2f978:	001a      	movs	r2, r3
   2f97a:	68bb      	ldr	r3, [r7, #8]
   2f97c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f97e:	231c      	movs	r3, #28
   2f980:	18fb      	adds	r3, r7, r3
   2f982:	781b      	ldrb	r3, [r3, #0]
   2f984:	07db      	lsls	r3, r3, #31
   2f986:	0fdb      	lsrs	r3, r3, #31
   2f988:	b2db      	uxtb	r3, r3
   2f98a:	001a      	movs	r2, r3
   2f98c:	687b      	ldr	r3, [r7, #4]
   2f98e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f990:	69bb      	ldr	r3, [r7, #24]
   2f992:	2214      	movs	r2, #20
   2f994:	18ba      	adds	r2, r7, r2
   2f996:	0011      	movs	r1, r2
   2f998:	0018      	movs	r0, r3
   2f99a:	4b1c      	ldr	r3, [pc, #112]	; (2fa0c <MQTTDeserialize_publish+0xf8>)
   2f99c:	4798      	blx	r3
   2f99e:	0003      	movs	r3, r0
   2f9a0:	627b      	str	r3, [r7, #36]	; 0x24
   2f9a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f9a4:	69bb      	ldr	r3, [r7, #24]
   2f9a6:	189b      	adds	r3, r3, r2
   2f9a8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f9aa:	69bb      	ldr	r3, [r7, #24]
   2f9ac:	697a      	ldr	r2, [r7, #20]
   2f9ae:	189b      	adds	r3, r3, r2
   2f9b0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f9b2:	6a3a      	ldr	r2, [r7, #32]
   2f9b4:	2318      	movs	r3, #24
   2f9b6:	18f9      	adds	r1, r7, r3
   2f9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f9ba:	0018      	movs	r0, r3
   2f9bc:	4b14      	ldr	r3, [pc, #80]	; (2fa10 <MQTTDeserialize_publish+0xfc>)
   2f9be:	4798      	blx	r3
   2f9c0:	1e03      	subs	r3, r0, #0
   2f9c2:	d01c      	beq.n	2f9fe <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f9c4:	6a3b      	ldr	r3, [r7, #32]
   2f9c6:	69ba      	ldr	r2, [r7, #24]
   2f9c8:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f9ca:	d418      	bmi.n	2f9fe <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f9cc:	68bb      	ldr	r3, [r7, #8]
   2f9ce:	681b      	ldr	r3, [r3, #0]
   2f9d0:	2b00      	cmp	r3, #0
   2f9d2:	dd08      	ble.n	2f9e6 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f9d4:	2318      	movs	r3, #24
   2f9d6:	18fb      	adds	r3, r7, r3
   2f9d8:	0018      	movs	r0, r3
   2f9da:	4b0e      	ldr	r3, [pc, #56]	; (2fa14 <MQTTDeserialize_publish+0x100>)
   2f9dc:	4798      	blx	r3
   2f9de:	0003      	movs	r3, r0
   2f9e0:	b29a      	uxth	r2, r3
   2f9e2:	683b      	ldr	r3, [r7, #0]
   2f9e4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f9e6:	6a3b      	ldr	r3, [r7, #32]
   2f9e8:	69ba      	ldr	r2, [r7, #24]
   2f9ea:	1a9a      	subs	r2, r3, r2
   2f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f9ee:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f9f0:	69ba      	ldr	r2, [r7, #24]
   2f9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f9f4:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f9f6:	2301      	movs	r3, #1
   2f9f8:	627b      	str	r3, [r7, #36]	; 0x24
   2f9fa:	e000      	b.n	2f9fe <MQTTDeserialize_publish+0xea>
		goto exit;
   2f9fc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fa00:	0018      	movs	r0, r3
   2fa02:	46bd      	mov	sp, r7
   2fa04:	b00a      	add	sp, #40	; 0x28
   2fa06:	bd80      	pop	{r7, pc}
   2fa08:	0002fcbb 	.word	0x0002fcbb
   2fa0c:	0002fc55 	.word	0x0002fc55
   2fa10:	0002fe39 	.word	0x0002fe39
   2fa14:	0002fc89 	.word	0x0002fc89

0002fa18 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2fa18:	b580      	push	{r7, lr}
   2fa1a:	b08a      	sub	sp, #40	; 0x28
   2fa1c:	af00      	add	r7, sp, #0
   2fa1e:	60f8      	str	r0, [r7, #12]
   2fa20:	60b9      	str	r1, [r7, #8]
   2fa22:	607a      	str	r2, [r7, #4]
   2fa24:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fa26:	2300      	movs	r3, #0
   2fa28:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fa2a:	683b      	ldr	r3, [r7, #0]
   2fa2c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fa2e:	2300      	movs	r3, #0
   2fa30:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fa32:	2300      	movs	r3, #0
   2fa34:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fa36:	2318      	movs	r3, #24
   2fa38:	18fb      	adds	r3, r7, r3
   2fa3a:	0018      	movs	r0, r3
   2fa3c:	4b20      	ldr	r3, [pc, #128]	; (2fac0 <MQTTDeserialize_ack+0xa8>)
   2fa3e:	4798      	blx	r3
   2fa40:	0003      	movs	r3, r0
   2fa42:	001a      	movs	r2, r3
   2fa44:	231c      	movs	r3, #28
   2fa46:	18fb      	adds	r3, r7, r3
   2fa48:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2fa4a:	231c      	movs	r3, #28
   2fa4c:	18fb      	adds	r3, r7, r3
   2fa4e:	781b      	ldrb	r3, [r3, #0]
   2fa50:	071b      	lsls	r3, r3, #28
   2fa52:	0fdb      	lsrs	r3, r3, #31
   2fa54:	b2db      	uxtb	r3, r3
   2fa56:	001a      	movs	r2, r3
   2fa58:	68bb      	ldr	r3, [r7, #8]
   2fa5a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2fa5c:	231c      	movs	r3, #28
   2fa5e:	18fb      	adds	r3, r7, r3
   2fa60:	781b      	ldrb	r3, [r3, #0]
   2fa62:	061b      	lsls	r3, r3, #24
   2fa64:	0f1b      	lsrs	r3, r3, #28
   2fa66:	b2db      	uxtb	r3, r3
   2fa68:	001a      	movs	r2, r3
   2fa6a:	68fb      	ldr	r3, [r7, #12]
   2fa6c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fa6e:	69bb      	ldr	r3, [r7, #24]
   2fa70:	2214      	movs	r2, #20
   2fa72:	18ba      	adds	r2, r7, r2
   2fa74:	0011      	movs	r1, r2
   2fa76:	0018      	movs	r0, r3
   2fa78:	4b12      	ldr	r3, [pc, #72]	; (2fac4 <MQTTDeserialize_ack+0xac>)
   2fa7a:	4798      	blx	r3
   2fa7c:	0003      	movs	r3, r0
   2fa7e:	627b      	str	r3, [r7, #36]	; 0x24
   2fa80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fa82:	69bb      	ldr	r3, [r7, #24]
   2fa84:	189b      	adds	r3, r3, r2
   2fa86:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fa88:	69bb      	ldr	r3, [r7, #24]
   2fa8a:	697a      	ldr	r2, [r7, #20]
   2fa8c:	189b      	adds	r3, r3, r2
   2fa8e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2fa90:	6a3b      	ldr	r3, [r7, #32]
   2fa92:	69ba      	ldr	r2, [r7, #24]
   2fa94:	1a9b      	subs	r3, r3, r2
   2fa96:	2b01      	cmp	r3, #1
   2fa98:	dd0b      	ble.n	2fab2 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2fa9a:	2318      	movs	r3, #24
   2fa9c:	18fb      	adds	r3, r7, r3
   2fa9e:	0018      	movs	r0, r3
   2faa0:	4b09      	ldr	r3, [pc, #36]	; (2fac8 <MQTTDeserialize_ack+0xb0>)
   2faa2:	4798      	blx	r3
   2faa4:	0003      	movs	r3, r0
   2faa6:	b29a      	uxth	r2, r3
   2faa8:	687b      	ldr	r3, [r7, #4]
   2faaa:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2faac:	2301      	movs	r3, #1
   2faae:	627b      	str	r3, [r7, #36]	; 0x24
   2fab0:	e000      	b.n	2fab4 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2fab2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fab6:	0018      	movs	r0, r3
   2fab8:	46bd      	mov	sp, r7
   2faba:	b00a      	add	sp, #40	; 0x28
   2fabc:	bd80      	pop	{r7, pc}
   2fabe:	46c0      	nop			; (mov r8, r8)
   2fac0:	0002fcbb 	.word	0x0002fcbb
   2fac4:	0002fc55 	.word	0x0002fc55
   2fac8:	0002fc89 	.word	0x0002fc89

0002facc <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2facc:	b580      	push	{r7, lr}
   2face:	b084      	sub	sp, #16
   2fad0:	af00      	add	r7, sp, #0
   2fad2:	6078      	str	r0, [r7, #4]
   2fad4:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2fad6:	2300      	movs	r3, #0
   2fad8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2fada:	683b      	ldr	r3, [r7, #0]
   2fadc:	4a17      	ldr	r2, [pc, #92]	; (2fb3c <MQTTPacket_encode+0x70>)
   2fade:	4013      	ands	r3, r2
   2fae0:	d504      	bpl.n	2faec <MQTTPacket_encode+0x20>
   2fae2:	3b01      	subs	r3, #1
   2fae4:	2280      	movs	r2, #128	; 0x80
   2fae6:	4252      	negs	r2, r2
   2fae8:	4313      	orrs	r3, r2
   2faea:	3301      	adds	r3, #1
   2faec:	001a      	movs	r2, r3
   2faee:	230b      	movs	r3, #11
   2faf0:	18fb      	adds	r3, r7, r3
   2faf2:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2faf4:	683b      	ldr	r3, [r7, #0]
   2faf6:	2b00      	cmp	r3, #0
   2faf8:	da00      	bge.n	2fafc <MQTTPacket_encode+0x30>
   2fafa:	337f      	adds	r3, #127	; 0x7f
   2fafc:	11db      	asrs	r3, r3, #7
   2fafe:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2fb00:	683b      	ldr	r3, [r7, #0]
   2fb02:	2b00      	cmp	r3, #0
   2fb04:	dd08      	ble.n	2fb18 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2fb06:	230b      	movs	r3, #11
   2fb08:	18fb      	adds	r3, r7, r3
   2fb0a:	220b      	movs	r2, #11
   2fb0c:	18ba      	adds	r2, r7, r2
   2fb0e:	7812      	ldrb	r2, [r2, #0]
   2fb10:	2180      	movs	r1, #128	; 0x80
   2fb12:	4249      	negs	r1, r1
   2fb14:	430a      	orrs	r2, r1
   2fb16:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2fb18:	68fb      	ldr	r3, [r7, #12]
   2fb1a:	1c5a      	adds	r2, r3, #1
   2fb1c:	60fa      	str	r2, [r7, #12]
   2fb1e:	001a      	movs	r2, r3
   2fb20:	687b      	ldr	r3, [r7, #4]
   2fb22:	189b      	adds	r3, r3, r2
   2fb24:	220b      	movs	r2, #11
   2fb26:	18ba      	adds	r2, r7, r2
   2fb28:	7812      	ldrb	r2, [r2, #0]
   2fb2a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2fb2c:	683b      	ldr	r3, [r7, #0]
   2fb2e:	2b00      	cmp	r3, #0
   2fb30:	dcd3      	bgt.n	2fada <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2fb32:	68fb      	ldr	r3, [r7, #12]
}
   2fb34:	0018      	movs	r0, r3
   2fb36:	46bd      	mov	sp, r7
   2fb38:	b004      	add	sp, #16
   2fb3a:	bd80      	pop	{r7, pc}
   2fb3c:	8000007f 	.word	0x8000007f

0002fb40 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2fb40:	b580      	push	{r7, lr}
   2fb42:	b086      	sub	sp, #24
   2fb44:	af00      	add	r7, sp, #0
   2fb46:	6078      	str	r0, [r7, #4]
   2fb48:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2fb4a:	2301      	movs	r3, #1
   2fb4c:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fb4e:	2300      	movs	r3, #0
   2fb50:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2fb52:	683b      	ldr	r3, [r7, #0]
   2fb54:	2200      	movs	r2, #0
   2fb56:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2fb58:	2301      	movs	r3, #1
   2fb5a:	425b      	negs	r3, r3
   2fb5c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2fb5e:	693b      	ldr	r3, [r7, #16]
   2fb60:	3301      	adds	r3, #1
   2fb62:	613b      	str	r3, [r7, #16]
   2fb64:	693b      	ldr	r3, [r7, #16]
   2fb66:	2b04      	cmp	r3, #4
   2fb68:	dd03      	ble.n	2fb72 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2fb6a:	2301      	movs	r3, #1
   2fb6c:	425b      	negs	r3, r3
   2fb6e:	60fb      	str	r3, [r7, #12]
			goto exit;
   2fb70:	e022      	b.n	2fbb8 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2fb72:	230b      	movs	r3, #11
   2fb74:	18fa      	adds	r2, r7, r3
   2fb76:	687b      	ldr	r3, [r7, #4]
   2fb78:	2101      	movs	r1, #1
   2fb7a:	0010      	movs	r0, r2
   2fb7c:	4798      	blx	r3
   2fb7e:	0003      	movs	r3, r0
   2fb80:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2fb82:	68fb      	ldr	r3, [r7, #12]
   2fb84:	2b01      	cmp	r3, #1
   2fb86:	d116      	bne.n	2fbb6 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2fb88:	683b      	ldr	r3, [r7, #0]
   2fb8a:	681a      	ldr	r2, [r3, #0]
   2fb8c:	230b      	movs	r3, #11
   2fb8e:	18fb      	adds	r3, r7, r3
   2fb90:	781b      	ldrb	r3, [r3, #0]
   2fb92:	0019      	movs	r1, r3
   2fb94:	237f      	movs	r3, #127	; 0x7f
   2fb96:	400b      	ands	r3, r1
   2fb98:	6979      	ldr	r1, [r7, #20]
   2fb9a:	434b      	muls	r3, r1
   2fb9c:	18d2      	adds	r2, r2, r3
   2fb9e:	683b      	ldr	r3, [r7, #0]
   2fba0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2fba2:	697b      	ldr	r3, [r7, #20]
   2fba4:	01db      	lsls	r3, r3, #7
   2fba6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2fba8:	230b      	movs	r3, #11
   2fbaa:	18fb      	adds	r3, r7, r3
   2fbac:	781b      	ldrb	r3, [r3, #0]
   2fbae:	b25b      	sxtb	r3, r3
   2fbb0:	2b00      	cmp	r3, #0
   2fbb2:	dbd1      	blt.n	2fb58 <MQTTPacket_decode+0x18>
   2fbb4:	e000      	b.n	2fbb8 <MQTTPacket_decode+0x78>
			goto exit;
   2fbb6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2fbb8:	693b      	ldr	r3, [r7, #16]
}
   2fbba:	0018      	movs	r0, r3
   2fbbc:	46bd      	mov	sp, r7
   2fbbe:	b006      	add	sp, #24
   2fbc0:	bd80      	pop	{r7, pc}
	...

0002fbc4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2fbc4:	b580      	push	{r7, lr}
   2fbc6:	b082      	sub	sp, #8
   2fbc8:	af00      	add	r7, sp, #0
   2fbca:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2fbcc:	687b      	ldr	r3, [r7, #4]
   2fbce:	3301      	adds	r3, #1
   2fbd0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2fbd2:	687b      	ldr	r3, [r7, #4]
   2fbd4:	2b7f      	cmp	r3, #127	; 0x7f
   2fbd6:	dc03      	bgt.n	2fbe0 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2fbd8:	687b      	ldr	r3, [r7, #4]
   2fbda:	3301      	adds	r3, #1
   2fbdc:	607b      	str	r3, [r7, #4]
   2fbde:	e012      	b.n	2fc06 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2fbe0:	687b      	ldr	r3, [r7, #4]
   2fbe2:	4a0b      	ldr	r2, [pc, #44]	; (2fc10 <MQTTPacket_len+0x4c>)
   2fbe4:	4293      	cmp	r3, r2
   2fbe6:	dc03      	bgt.n	2fbf0 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2fbe8:	687b      	ldr	r3, [r7, #4]
   2fbea:	3302      	adds	r3, #2
   2fbec:	607b      	str	r3, [r7, #4]
   2fbee:	e00a      	b.n	2fc06 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2fbf0:	687b      	ldr	r3, [r7, #4]
   2fbf2:	4a08      	ldr	r2, [pc, #32]	; (2fc14 <MQTTPacket_len+0x50>)
   2fbf4:	4293      	cmp	r3, r2
   2fbf6:	dc03      	bgt.n	2fc00 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2fbf8:	687b      	ldr	r3, [r7, #4]
   2fbfa:	3303      	adds	r3, #3
   2fbfc:	607b      	str	r3, [r7, #4]
   2fbfe:	e002      	b.n	2fc06 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2fc00:	687b      	ldr	r3, [r7, #4]
   2fc02:	3304      	adds	r3, #4
   2fc04:	607b      	str	r3, [r7, #4]
	return rem_len;
   2fc06:	687b      	ldr	r3, [r7, #4]
}
   2fc08:	0018      	movs	r0, r3
   2fc0a:	46bd      	mov	sp, r7
   2fc0c:	b002      	add	sp, #8
   2fc0e:	bd80      	pop	{r7, pc}
   2fc10:	00003fff 	.word	0x00003fff
   2fc14:	001ffffe 	.word	0x001ffffe

0002fc18 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2fc18:	b580      	push	{r7, lr}
   2fc1a:	b084      	sub	sp, #16
   2fc1c:	af00      	add	r7, sp, #0
   2fc1e:	6078      	str	r0, [r7, #4]
   2fc20:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2fc22:	2300      	movs	r3, #0
   2fc24:	60fb      	str	r3, [r7, #12]
   2fc26:	e00a      	b.n	2fc3e <bufchar+0x26>
		*c = *bufptr++;
   2fc28:	4b09      	ldr	r3, [pc, #36]	; (2fc50 <bufchar+0x38>)
   2fc2a:	681b      	ldr	r3, [r3, #0]
   2fc2c:	1c59      	adds	r1, r3, #1
   2fc2e:	4a08      	ldr	r2, [pc, #32]	; (2fc50 <bufchar+0x38>)
   2fc30:	6011      	str	r1, [r2, #0]
   2fc32:	781a      	ldrb	r2, [r3, #0]
   2fc34:	687b      	ldr	r3, [r7, #4]
   2fc36:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2fc38:	68fb      	ldr	r3, [r7, #12]
   2fc3a:	3301      	adds	r3, #1
   2fc3c:	60fb      	str	r3, [r7, #12]
   2fc3e:	68fa      	ldr	r2, [r7, #12]
   2fc40:	683b      	ldr	r3, [r7, #0]
   2fc42:	429a      	cmp	r2, r3
   2fc44:	dbf0      	blt.n	2fc28 <bufchar+0x10>
	return count;
   2fc46:	683b      	ldr	r3, [r7, #0]
}
   2fc48:	0018      	movs	r0, r3
   2fc4a:	46bd      	mov	sp, r7
   2fc4c:	b004      	add	sp, #16
   2fc4e:	bd80      	pop	{r7, pc}
   2fc50:	2000454c 	.word	0x2000454c

0002fc54 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2fc54:	b580      	push	{r7, lr}
   2fc56:	b082      	sub	sp, #8
   2fc58:	af00      	add	r7, sp, #0
   2fc5a:	6078      	str	r0, [r7, #4]
   2fc5c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2fc5e:	4b07      	ldr	r3, [pc, #28]	; (2fc7c <MQTTPacket_decodeBuf+0x28>)
   2fc60:	687a      	ldr	r2, [r7, #4]
   2fc62:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2fc64:	683a      	ldr	r2, [r7, #0]
   2fc66:	4b06      	ldr	r3, [pc, #24]	; (2fc80 <MQTTPacket_decodeBuf+0x2c>)
   2fc68:	0011      	movs	r1, r2
   2fc6a:	0018      	movs	r0, r3
   2fc6c:	4b05      	ldr	r3, [pc, #20]	; (2fc84 <MQTTPacket_decodeBuf+0x30>)
   2fc6e:	4798      	blx	r3
   2fc70:	0003      	movs	r3, r0
}
   2fc72:	0018      	movs	r0, r3
   2fc74:	46bd      	mov	sp, r7
   2fc76:	b002      	add	sp, #8
   2fc78:	bd80      	pop	{r7, pc}
   2fc7a:	46c0      	nop			; (mov r8, r8)
   2fc7c:	2000454c 	.word	0x2000454c
   2fc80:	0002fc19 	.word	0x0002fc19
   2fc84:	0002fb41 	.word	0x0002fb41

0002fc88 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2fc88:	b580      	push	{r7, lr}
   2fc8a:	b084      	sub	sp, #16
   2fc8c:	af00      	add	r7, sp, #0
   2fc8e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2fc90:	687b      	ldr	r3, [r7, #4]
   2fc92:	681b      	ldr	r3, [r3, #0]
   2fc94:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2fc96:	68fb      	ldr	r3, [r7, #12]
   2fc98:	781b      	ldrb	r3, [r3, #0]
   2fc9a:	021b      	lsls	r3, r3, #8
   2fc9c:	68fa      	ldr	r2, [r7, #12]
   2fc9e:	3201      	adds	r2, #1
   2fca0:	7812      	ldrb	r2, [r2, #0]
   2fca2:	189b      	adds	r3, r3, r2
   2fca4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2fca6:	687b      	ldr	r3, [r7, #4]
   2fca8:	681b      	ldr	r3, [r3, #0]
   2fcaa:	1c9a      	adds	r2, r3, #2
   2fcac:	687b      	ldr	r3, [r7, #4]
   2fcae:	601a      	str	r2, [r3, #0]
	return len;
   2fcb0:	68bb      	ldr	r3, [r7, #8]
}
   2fcb2:	0018      	movs	r0, r3
   2fcb4:	46bd      	mov	sp, r7
   2fcb6:	b004      	add	sp, #16
   2fcb8:	bd80      	pop	{r7, pc}

0002fcba <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2fcba:	b580      	push	{r7, lr}
   2fcbc:	b084      	sub	sp, #16
   2fcbe:	af00      	add	r7, sp, #0
   2fcc0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2fcc2:	687b      	ldr	r3, [r7, #4]
   2fcc4:	681a      	ldr	r2, [r3, #0]
   2fcc6:	230f      	movs	r3, #15
   2fcc8:	18fb      	adds	r3, r7, r3
   2fcca:	7812      	ldrb	r2, [r2, #0]
   2fccc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fcce:	687b      	ldr	r3, [r7, #4]
   2fcd0:	681b      	ldr	r3, [r3, #0]
   2fcd2:	1c5a      	adds	r2, r3, #1
   2fcd4:	687b      	ldr	r3, [r7, #4]
   2fcd6:	601a      	str	r2, [r3, #0]
	return c;
   2fcd8:	230f      	movs	r3, #15
   2fcda:	18fb      	adds	r3, r7, r3
   2fcdc:	781b      	ldrb	r3, [r3, #0]
}
   2fcde:	0018      	movs	r0, r3
   2fce0:	46bd      	mov	sp, r7
   2fce2:	b004      	add	sp, #16
   2fce4:	bd80      	pop	{r7, pc}

0002fce6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2fce6:	b580      	push	{r7, lr}
   2fce8:	b082      	sub	sp, #8
   2fcea:	af00      	add	r7, sp, #0
   2fcec:	6078      	str	r0, [r7, #4]
   2fcee:	000a      	movs	r2, r1
   2fcf0:	1cfb      	adds	r3, r7, #3
   2fcf2:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2fcf4:	687b      	ldr	r3, [r7, #4]
   2fcf6:	681b      	ldr	r3, [r3, #0]
   2fcf8:	1cfa      	adds	r2, r7, #3
   2fcfa:	7812      	ldrb	r2, [r2, #0]
   2fcfc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fcfe:	687b      	ldr	r3, [r7, #4]
   2fd00:	681b      	ldr	r3, [r3, #0]
   2fd02:	1c5a      	adds	r2, r3, #1
   2fd04:	687b      	ldr	r3, [r7, #4]
   2fd06:	601a      	str	r2, [r3, #0]
}
   2fd08:	46c0      	nop			; (mov r8, r8)
   2fd0a:	46bd      	mov	sp, r7
   2fd0c:	b002      	add	sp, #8
   2fd0e:	bd80      	pop	{r7, pc}

0002fd10 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2fd10:	b580      	push	{r7, lr}
   2fd12:	b082      	sub	sp, #8
   2fd14:	af00      	add	r7, sp, #0
   2fd16:	6078      	str	r0, [r7, #4]
   2fd18:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2fd1a:	687b      	ldr	r3, [r7, #4]
   2fd1c:	681a      	ldr	r2, [r3, #0]
   2fd1e:	683b      	ldr	r3, [r7, #0]
   2fd20:	2b00      	cmp	r3, #0
   2fd22:	da00      	bge.n	2fd26 <writeInt+0x16>
   2fd24:	33ff      	adds	r3, #255	; 0xff
   2fd26:	121b      	asrs	r3, r3, #8
   2fd28:	b2db      	uxtb	r3, r3
   2fd2a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fd2c:	687b      	ldr	r3, [r7, #4]
   2fd2e:	681b      	ldr	r3, [r3, #0]
   2fd30:	1c5a      	adds	r2, r3, #1
   2fd32:	687b      	ldr	r3, [r7, #4]
   2fd34:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2fd36:	687b      	ldr	r3, [r7, #4]
   2fd38:	681a      	ldr	r2, [r3, #0]
   2fd3a:	683b      	ldr	r3, [r7, #0]
   2fd3c:	4908      	ldr	r1, [pc, #32]	; (2fd60 <writeInt+0x50>)
   2fd3e:	400b      	ands	r3, r1
   2fd40:	d503      	bpl.n	2fd4a <writeInt+0x3a>
   2fd42:	3b01      	subs	r3, #1
   2fd44:	4907      	ldr	r1, [pc, #28]	; (2fd64 <writeInt+0x54>)
   2fd46:	430b      	orrs	r3, r1
   2fd48:	3301      	adds	r3, #1
   2fd4a:	b2db      	uxtb	r3, r3
   2fd4c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fd4e:	687b      	ldr	r3, [r7, #4]
   2fd50:	681b      	ldr	r3, [r3, #0]
   2fd52:	1c5a      	adds	r2, r3, #1
   2fd54:	687b      	ldr	r3, [r7, #4]
   2fd56:	601a      	str	r2, [r3, #0]
}
   2fd58:	46c0      	nop			; (mov r8, r8)
   2fd5a:	46bd      	mov	sp, r7
   2fd5c:	b002      	add	sp, #8
   2fd5e:	bd80      	pop	{r7, pc}
   2fd60:	800000ff 	.word	0x800000ff
   2fd64:	ffffff00 	.word	0xffffff00

0002fd68 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2fd68:	b580      	push	{r7, lr}
   2fd6a:	b084      	sub	sp, #16
   2fd6c:	af00      	add	r7, sp, #0
   2fd6e:	6078      	str	r0, [r7, #4]
   2fd70:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2fd72:	683b      	ldr	r3, [r7, #0]
   2fd74:	0018      	movs	r0, r3
   2fd76:	4b0d      	ldr	r3, [pc, #52]	; (2fdac <writeCString+0x44>)
   2fd78:	4798      	blx	r3
   2fd7a:	0003      	movs	r3, r0
   2fd7c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2fd7e:	68fa      	ldr	r2, [r7, #12]
   2fd80:	687b      	ldr	r3, [r7, #4]
   2fd82:	0011      	movs	r1, r2
   2fd84:	0018      	movs	r0, r3
   2fd86:	4b0a      	ldr	r3, [pc, #40]	; (2fdb0 <writeCString+0x48>)
   2fd88:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2fd8a:	687b      	ldr	r3, [r7, #4]
   2fd8c:	681b      	ldr	r3, [r3, #0]
   2fd8e:	68fa      	ldr	r2, [r7, #12]
   2fd90:	6839      	ldr	r1, [r7, #0]
   2fd92:	0018      	movs	r0, r3
   2fd94:	4b07      	ldr	r3, [pc, #28]	; (2fdb4 <writeCString+0x4c>)
   2fd96:	4798      	blx	r3
	*pptr += len;
   2fd98:	687b      	ldr	r3, [r7, #4]
   2fd9a:	681a      	ldr	r2, [r3, #0]
   2fd9c:	68fb      	ldr	r3, [r7, #12]
   2fd9e:	18d2      	adds	r2, r2, r3
   2fda0:	687b      	ldr	r3, [r7, #4]
   2fda2:	601a      	str	r2, [r3, #0]
}
   2fda4:	46c0      	nop			; (mov r8, r8)
   2fda6:	46bd      	mov	sp, r7
   2fda8:	b004      	add	sp, #16
   2fdaa:	bd80      	pop	{r7, pc}
   2fdac:	000343fb 	.word	0x000343fb
   2fdb0:	0002fd11 	.word	0x0002fd11
   2fdb4:	0003400d 	.word	0x0003400d

0002fdb8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2fdb8:	b580      	push	{r7, lr}
   2fdba:	b084      	sub	sp, #16
   2fdbc:	af00      	add	r7, sp, #0
   2fdbe:	60f8      	str	r0, [r7, #12]
   2fdc0:	0038      	movs	r0, r7
   2fdc2:	6001      	str	r1, [r0, #0]
   2fdc4:	6042      	str	r2, [r0, #4]
   2fdc6:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2fdc8:	003b      	movs	r3, r7
   2fdca:	685b      	ldr	r3, [r3, #4]
   2fdcc:	2b00      	cmp	r3, #0
   2fdce:	dd17      	ble.n	2fe00 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2fdd0:	003b      	movs	r3, r7
   2fdd2:	685a      	ldr	r2, [r3, #4]
   2fdd4:	68fb      	ldr	r3, [r7, #12]
   2fdd6:	0011      	movs	r1, r2
   2fdd8:	0018      	movs	r0, r3
   2fdda:	4b14      	ldr	r3, [pc, #80]	; (2fe2c <writeMQTTString+0x74>)
   2fddc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2fdde:	68fb      	ldr	r3, [r7, #12]
   2fde0:	6818      	ldr	r0, [r3, #0]
   2fde2:	003b      	movs	r3, r7
   2fde4:	6899      	ldr	r1, [r3, #8]
   2fde6:	003b      	movs	r3, r7
   2fde8:	685b      	ldr	r3, [r3, #4]
   2fdea:	001a      	movs	r2, r3
   2fdec:	4b10      	ldr	r3, [pc, #64]	; (2fe30 <writeMQTTString+0x78>)
   2fdee:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2fdf0:	68fb      	ldr	r3, [r7, #12]
   2fdf2:	681a      	ldr	r2, [r3, #0]
   2fdf4:	003b      	movs	r3, r7
   2fdf6:	685b      	ldr	r3, [r3, #4]
   2fdf8:	18d2      	adds	r2, r2, r3
   2fdfa:	68fb      	ldr	r3, [r7, #12]
   2fdfc:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2fdfe:	e010      	b.n	2fe22 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2fe00:	003b      	movs	r3, r7
   2fe02:	681b      	ldr	r3, [r3, #0]
   2fe04:	2b00      	cmp	r3, #0
   2fe06:	d007      	beq.n	2fe18 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2fe08:	003b      	movs	r3, r7
   2fe0a:	681a      	ldr	r2, [r3, #0]
   2fe0c:	68fb      	ldr	r3, [r7, #12]
   2fe0e:	0011      	movs	r1, r2
   2fe10:	0018      	movs	r0, r3
   2fe12:	4b08      	ldr	r3, [pc, #32]	; (2fe34 <writeMQTTString+0x7c>)
   2fe14:	4798      	blx	r3
}
   2fe16:	e004      	b.n	2fe22 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2fe18:	68fb      	ldr	r3, [r7, #12]
   2fe1a:	2100      	movs	r1, #0
   2fe1c:	0018      	movs	r0, r3
   2fe1e:	4b03      	ldr	r3, [pc, #12]	; (2fe2c <writeMQTTString+0x74>)
   2fe20:	4798      	blx	r3
}
   2fe22:	46c0      	nop			; (mov r8, r8)
   2fe24:	46bd      	mov	sp, r7
   2fe26:	b004      	add	sp, #16
   2fe28:	bd80      	pop	{r7, pc}
   2fe2a:	46c0      	nop			; (mov r8, r8)
   2fe2c:	0002fd11 	.word	0x0002fd11
   2fe30:	0003400d 	.word	0x0003400d
   2fe34:	0002fd69 	.word	0x0002fd69

0002fe38 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2fe38:	b580      	push	{r7, lr}
   2fe3a:	b086      	sub	sp, #24
   2fe3c:	af00      	add	r7, sp, #0
   2fe3e:	60f8      	str	r0, [r7, #12]
   2fe40:	60b9      	str	r1, [r7, #8]
   2fe42:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2fe44:	2300      	movs	r3, #0
   2fe46:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2fe48:	687a      	ldr	r2, [r7, #4]
   2fe4a:	68bb      	ldr	r3, [r7, #8]
   2fe4c:	681b      	ldr	r3, [r3, #0]
   2fe4e:	1ad3      	subs	r3, r2, r3
   2fe50:	2b01      	cmp	r3, #1
   2fe52:	dd1b      	ble.n	2fe8c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2fe54:	68bb      	ldr	r3, [r7, #8]
   2fe56:	0018      	movs	r0, r3
   2fe58:	4b10      	ldr	r3, [pc, #64]	; (2fe9c <readMQTTLenString+0x64>)
   2fe5a:	4798      	blx	r3
   2fe5c:	0002      	movs	r2, r0
   2fe5e:	68fb      	ldr	r3, [r7, #12]
   2fe60:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2fe62:	68bb      	ldr	r3, [r7, #8]
   2fe64:	681a      	ldr	r2, [r3, #0]
   2fe66:	68fb      	ldr	r3, [r7, #12]
   2fe68:	685b      	ldr	r3, [r3, #4]
   2fe6a:	18d2      	adds	r2, r2, r3
   2fe6c:	687b      	ldr	r3, [r7, #4]
   2fe6e:	429a      	cmp	r2, r3
   2fe70:	d80c      	bhi.n	2fe8c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2fe72:	68bb      	ldr	r3, [r7, #8]
   2fe74:	681a      	ldr	r2, [r3, #0]
   2fe76:	68fb      	ldr	r3, [r7, #12]
   2fe78:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2fe7a:	68bb      	ldr	r3, [r7, #8]
   2fe7c:	681a      	ldr	r2, [r3, #0]
   2fe7e:	68fb      	ldr	r3, [r7, #12]
   2fe80:	685b      	ldr	r3, [r3, #4]
   2fe82:	18d2      	adds	r2, r2, r3
   2fe84:	68bb      	ldr	r3, [r7, #8]
   2fe86:	601a      	str	r2, [r3, #0]
			rc = 1;
   2fe88:	2301      	movs	r3, #1
   2fe8a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2fe8c:	68fb      	ldr	r3, [r7, #12]
   2fe8e:	2200      	movs	r2, #0
   2fe90:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2fe92:	697b      	ldr	r3, [r7, #20]
}
   2fe94:	0018      	movs	r0, r3
   2fe96:	46bd      	mov	sp, r7
   2fe98:	b006      	add	sp, #24
   2fe9a:	bd80      	pop	{r7, pc}
   2fe9c:	0002fc89 	.word	0x0002fc89

0002fea0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2fea0:	b580      	push	{r7, lr}
   2fea2:	b086      	sub	sp, #24
   2fea4:	af00      	add	r7, sp, #0
   2fea6:	1d3b      	adds	r3, r7, #4
   2fea8:	6018      	str	r0, [r3, #0]
   2feaa:	6059      	str	r1, [r3, #4]
   2feac:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2feae:	2300      	movs	r3, #0
   2feb0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2feb2:	1d3b      	adds	r3, r7, #4
   2feb4:	681b      	ldr	r3, [r3, #0]
   2feb6:	2b00      	cmp	r3, #0
   2feb8:	d007      	beq.n	2feca <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2feba:	1d3b      	adds	r3, r7, #4
   2febc:	681b      	ldr	r3, [r3, #0]
   2febe:	0018      	movs	r0, r3
   2fec0:	4b06      	ldr	r3, [pc, #24]	; (2fedc <MQTTstrlen+0x3c>)
   2fec2:	4798      	blx	r3
   2fec4:	0003      	movs	r3, r0
   2fec6:	617b      	str	r3, [r7, #20]
   2fec8:	e002      	b.n	2fed0 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2feca:	1d3b      	adds	r3, r7, #4
   2fecc:	685b      	ldr	r3, [r3, #4]
   2fece:	617b      	str	r3, [r7, #20]
	return rc;
   2fed0:	697b      	ldr	r3, [r7, #20]
}
   2fed2:	0018      	movs	r0, r3
   2fed4:	46bd      	mov	sp, r7
   2fed6:	b006      	add	sp, #24
   2fed8:	bd80      	pop	{r7, pc}
   2feda:	46c0      	nop			; (mov r8, r8)
   2fedc:	000343fb 	.word	0x000343fb

0002fee0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2fee0:	b580      	push	{r7, lr}
   2fee2:	b086      	sub	sp, #24
   2fee4:	af00      	add	r7, sp, #0
   2fee6:	6078      	str	r0, [r7, #4]
   2fee8:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2feea:	2300      	movs	r3, #0
   2feec:	617b      	str	r3, [r7, #20]
		blen = 0;
   2feee:	2300      	movs	r3, #0
   2fef0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2fef2:	687b      	ldr	r3, [r7, #4]
   2fef4:	681b      	ldr	r3, [r3, #0]
   2fef6:	2b00      	cmp	r3, #0
   2fef8:	d00a      	beq.n	2ff10 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2fefa:	687b      	ldr	r3, [r7, #4]
   2fefc:	681b      	ldr	r3, [r3, #0]
   2fefe:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2ff00:	687b      	ldr	r3, [r7, #4]
   2ff02:	681b      	ldr	r3, [r3, #0]
   2ff04:	0018      	movs	r0, r3
   2ff06:	4b12      	ldr	r3, [pc, #72]	; (2ff50 <MQTTPacket_equals+0x70>)
   2ff08:	4798      	blx	r3
   2ff0a:	0003      	movs	r3, r0
   2ff0c:	617b      	str	r3, [r7, #20]
   2ff0e:	e005      	b.n	2ff1c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2ff10:	687b      	ldr	r3, [r7, #4]
   2ff12:	689b      	ldr	r3, [r3, #8]
   2ff14:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2ff16:	687b      	ldr	r3, [r7, #4]
   2ff18:	685b      	ldr	r3, [r3, #4]
   2ff1a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2ff1c:	683b      	ldr	r3, [r7, #0]
   2ff1e:	0018      	movs	r0, r3
   2ff20:	4b0b      	ldr	r3, [pc, #44]	; (2ff50 <MQTTPacket_equals+0x70>)
   2ff22:	4798      	blx	r3
   2ff24:	0003      	movs	r3, r0
   2ff26:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2ff28:	697a      	ldr	r2, [r7, #20]
   2ff2a:	68fb      	ldr	r3, [r7, #12]
   2ff2c:	429a      	cmp	r2, r3
   2ff2e:	d109      	bne.n	2ff44 <MQTTPacket_equals+0x64>
   2ff30:	697a      	ldr	r2, [r7, #20]
   2ff32:	6839      	ldr	r1, [r7, #0]
   2ff34:	693b      	ldr	r3, [r7, #16]
   2ff36:	0018      	movs	r0, r3
   2ff38:	4b06      	ldr	r3, [pc, #24]	; (2ff54 <MQTTPacket_equals+0x74>)
   2ff3a:	4798      	blx	r3
   2ff3c:	1e03      	subs	r3, r0, #0
   2ff3e:	d101      	bne.n	2ff44 <MQTTPacket_equals+0x64>
   2ff40:	2301      	movs	r3, #1
   2ff42:	e000      	b.n	2ff46 <MQTTPacket_equals+0x66>
   2ff44:	2300      	movs	r3, #0
}
   2ff46:	0018      	movs	r0, r3
   2ff48:	46bd      	mov	sp, r7
   2ff4a:	b006      	add	sp, #24
   2ff4c:	bd80      	pop	{r7, pc}
   2ff4e:	46c0      	nop			; (mov r8, r8)
   2ff50:	000343fb 	.word	0x000343fb
   2ff54:	00034409 	.word	0x00034409

0002ff58 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2ff58:	b580      	push	{r7, lr}
   2ff5a:	b086      	sub	sp, #24
   2ff5c:	af00      	add	r7, sp, #0
   2ff5e:	60f8      	str	r0, [r7, #12]
   2ff60:	0038      	movs	r0, r7
   2ff62:	6001      	str	r1, [r0, #0]
   2ff64:	6042      	str	r2, [r0, #4]
   2ff66:	6083      	str	r3, [r0, #8]
	int len = 0;
   2ff68:	2300      	movs	r3, #0
   2ff6a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2ff6c:	003b      	movs	r3, r7
   2ff6e:	6818      	ldr	r0, [r3, #0]
   2ff70:	6859      	ldr	r1, [r3, #4]
   2ff72:	689a      	ldr	r2, [r3, #8]
   2ff74:	4b09      	ldr	r3, [pc, #36]	; (2ff9c <MQTTSerialize_publishLength+0x44>)
   2ff76:	4798      	blx	r3
   2ff78:	0003      	movs	r3, r0
   2ff7a:	1c9a      	adds	r2, r3, #2
   2ff7c:	6a3b      	ldr	r3, [r7, #32]
   2ff7e:	18d3      	adds	r3, r2, r3
   2ff80:	697a      	ldr	r2, [r7, #20]
   2ff82:	18d3      	adds	r3, r2, r3
   2ff84:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2ff86:	68fb      	ldr	r3, [r7, #12]
   2ff88:	2b00      	cmp	r3, #0
   2ff8a:	dd02      	ble.n	2ff92 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2ff8c:	697b      	ldr	r3, [r7, #20]
   2ff8e:	3302      	adds	r3, #2
   2ff90:	617b      	str	r3, [r7, #20]
	return len;
   2ff92:	697b      	ldr	r3, [r7, #20]
}
   2ff94:	0018      	movs	r0, r3
   2ff96:	46bd      	mov	sp, r7
   2ff98:	b006      	add	sp, #24
   2ff9a:	bd80      	pop	{r7, pc}
   2ff9c:	0002fea1 	.word	0x0002fea1

0002ffa0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2ffa0:	b590      	push	{r4, r7, lr}
   2ffa2:	b08b      	sub	sp, #44	; 0x2c
   2ffa4:	af02      	add	r7, sp, #8
   2ffa6:	60f8      	str	r0, [r7, #12]
   2ffa8:	60b9      	str	r1, [r7, #8]
   2ffaa:	603b      	str	r3, [r7, #0]
   2ffac:	1dfb      	adds	r3, r7, #7
   2ffae:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2ffb0:	68fb      	ldr	r3, [r7, #12]
   2ffb2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2ffb4:	2300      	movs	r3, #0
   2ffb6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2ffb8:	2300      	movs	r3, #0
   2ffba:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2ffbc:	2300      	movs	r3, #0
   2ffbe:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2ffc0:	2308      	movs	r3, #8
   2ffc2:	2230      	movs	r2, #48	; 0x30
   2ffc4:	4694      	mov	ip, r2
   2ffc6:	44bc      	add	ip, r7
   2ffc8:	4463      	add	r3, ip
   2ffca:	6838      	ldr	r0, [r7, #0]
   2ffcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2ffce:	9200      	str	r2, [sp, #0]
   2ffd0:	6819      	ldr	r1, [r3, #0]
   2ffd2:	685a      	ldr	r2, [r3, #4]
   2ffd4:	689b      	ldr	r3, [r3, #8]
   2ffd6:	4c46      	ldr	r4, [pc, #280]	; (300f0 <MQTTSerialize_publish+0x150>)
   2ffd8:	47a0      	blx	r4
   2ffda:	0003      	movs	r3, r0
   2ffdc:	61bb      	str	r3, [r7, #24]
   2ffde:	69bb      	ldr	r3, [r7, #24]
   2ffe0:	0018      	movs	r0, r3
   2ffe2:	4b44      	ldr	r3, [pc, #272]	; (300f4 <MQTTSerialize_publish+0x154>)
   2ffe4:	4798      	blx	r3
   2ffe6:	0002      	movs	r2, r0
   2ffe8:	68bb      	ldr	r3, [r7, #8]
   2ffea:	429a      	cmp	r2, r3
   2ffec:	dd03      	ble.n	2fff6 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ffee:	2302      	movs	r3, #2
   2fff0:	425b      	negs	r3, r3
   2fff2:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fff4:	e077      	b.n	300e6 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2fff6:	2310      	movs	r3, #16
   2fff8:	18fb      	adds	r3, r7, r3
   2fffa:	781a      	ldrb	r2, [r3, #0]
   2fffc:	210f      	movs	r1, #15
   2fffe:	400a      	ands	r2, r1
   30000:	1c11      	adds	r1, r2, #0
   30002:	2230      	movs	r2, #48	; 0x30
   30004:	430a      	orrs	r2, r1
   30006:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30008:	1dfb      	adds	r3, r7, #7
   3000a:	781b      	ldrb	r3, [r3, #0]
   3000c:	2201      	movs	r2, #1
   3000e:	4013      	ands	r3, r2
   30010:	b2da      	uxtb	r2, r3
   30012:	2310      	movs	r3, #16
   30014:	18fb      	adds	r3, r7, r3
   30016:	2101      	movs	r1, #1
   30018:	400a      	ands	r2, r1
   3001a:	00d0      	lsls	r0, r2, #3
   3001c:	781a      	ldrb	r2, [r3, #0]
   3001e:	2108      	movs	r1, #8
   30020:	438a      	bics	r2, r1
   30022:	1c11      	adds	r1, r2, #0
   30024:	1c02      	adds	r2, r0, #0
   30026:	430a      	orrs	r2, r1
   30028:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   3002a:	683b      	ldr	r3, [r7, #0]
   3002c:	b2db      	uxtb	r3, r3
   3002e:	1c1a      	adds	r2, r3, #0
   30030:	2303      	movs	r3, #3
   30032:	4013      	ands	r3, r2
   30034:	b2da      	uxtb	r2, r3
   30036:	2310      	movs	r3, #16
   30038:	18fb      	adds	r3, r7, r3
   3003a:	2103      	movs	r1, #3
   3003c:	400a      	ands	r2, r1
   3003e:	1890      	adds	r0, r2, r2
   30040:	781a      	ldrb	r2, [r3, #0]
   30042:	2106      	movs	r1, #6
   30044:	438a      	bics	r2, r1
   30046:	1c11      	adds	r1, r2, #0
   30048:	1c02      	adds	r2, r0, #0
   3004a:	430a      	orrs	r2, r1
   3004c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3004e:	2330      	movs	r3, #48	; 0x30
   30050:	18fb      	adds	r3, r7, r3
   30052:	781b      	ldrb	r3, [r3, #0]
   30054:	2201      	movs	r2, #1
   30056:	4013      	ands	r3, r2
   30058:	b2da      	uxtb	r2, r3
   3005a:	2310      	movs	r3, #16
   3005c:	18fb      	adds	r3, r7, r3
   3005e:	2101      	movs	r1, #1
   30060:	400a      	ands	r2, r1
   30062:	0010      	movs	r0, r2
   30064:	781a      	ldrb	r2, [r3, #0]
   30066:	2101      	movs	r1, #1
   30068:	438a      	bics	r2, r1
   3006a:	1c11      	adds	r1, r2, #0
   3006c:	1c02      	adds	r2, r0, #0
   3006e:	430a      	orrs	r2, r1
   30070:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30072:	2310      	movs	r3, #16
   30074:	18fb      	adds	r3, r7, r3
   30076:	781a      	ldrb	r2, [r3, #0]
   30078:	2314      	movs	r3, #20
   3007a:	18fb      	adds	r3, r7, r3
   3007c:	0011      	movs	r1, r2
   3007e:	0018      	movs	r0, r3
   30080:	4b1d      	ldr	r3, [pc, #116]	; (300f8 <MQTTSerialize_publish+0x158>)
   30082:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30084:	697b      	ldr	r3, [r7, #20]
   30086:	69ba      	ldr	r2, [r7, #24]
   30088:	0011      	movs	r1, r2
   3008a:	0018      	movs	r0, r3
   3008c:	4b1b      	ldr	r3, [pc, #108]	; (300fc <MQTTSerialize_publish+0x15c>)
   3008e:	4798      	blx	r3
   30090:	0002      	movs	r2, r0
   30092:	697b      	ldr	r3, [r7, #20]
   30094:	189b      	adds	r3, r3, r2
   30096:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30098:	2308      	movs	r3, #8
   3009a:	2230      	movs	r2, #48	; 0x30
   3009c:	4694      	mov	ip, r2
   3009e:	44bc      	add	ip, r7
   300a0:	4463      	add	r3, ip
   300a2:	2214      	movs	r2, #20
   300a4:	18b8      	adds	r0, r7, r2
   300a6:	6819      	ldr	r1, [r3, #0]
   300a8:	685a      	ldr	r2, [r3, #4]
   300aa:	689b      	ldr	r3, [r3, #8]
   300ac:	4c14      	ldr	r4, [pc, #80]	; (30100 <MQTTSerialize_publish+0x160>)
   300ae:	47a0      	blx	r4

	if (qos > 0)
   300b0:	683b      	ldr	r3, [r7, #0]
   300b2:	2b00      	cmp	r3, #0
   300b4:	dd08      	ble.n	300c8 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   300b6:	2334      	movs	r3, #52	; 0x34
   300b8:	18fb      	adds	r3, r7, r3
   300ba:	881a      	ldrh	r2, [r3, #0]
   300bc:	2314      	movs	r3, #20
   300be:	18fb      	adds	r3, r7, r3
   300c0:	0011      	movs	r1, r2
   300c2:	0018      	movs	r0, r3
   300c4:	4b0f      	ldr	r3, [pc, #60]	; (30104 <MQTTSerialize_publish+0x164>)
   300c6:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   300c8:	697b      	ldr	r3, [r7, #20]
   300ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
   300cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
   300ce:	0018      	movs	r0, r3
   300d0:	4b0d      	ldr	r3, [pc, #52]	; (30108 <MQTTSerialize_publish+0x168>)
   300d2:	4798      	blx	r3
	ptr += payloadlen;
   300d4:	697a      	ldr	r2, [r7, #20]
   300d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   300d8:	18d3      	adds	r3, r2, r3
   300da:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   300dc:	697b      	ldr	r3, [r7, #20]
   300de:	001a      	movs	r2, r3
   300e0:	68fb      	ldr	r3, [r7, #12]
   300e2:	1ad3      	subs	r3, r2, r3
   300e4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   300e6:	69fb      	ldr	r3, [r7, #28]
}
   300e8:	0018      	movs	r0, r3
   300ea:	46bd      	mov	sp, r7
   300ec:	b009      	add	sp, #36	; 0x24
   300ee:	bd90      	pop	{r4, r7, pc}
   300f0:	0002ff59 	.word	0x0002ff59
   300f4:	0002fbc5 	.word	0x0002fbc5
   300f8:	0002fce7 	.word	0x0002fce7
   300fc:	0002facd 	.word	0x0002facd
   30100:	0002fdb9 	.word	0x0002fdb9
   30104:	0002fd11 	.word	0x0002fd11
   30108:	0003400d 	.word	0x0003400d

0003010c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3010c:	b580      	push	{r7, lr}
   3010e:	b088      	sub	sp, #32
   30110:	af00      	add	r7, sp, #0
   30112:	60f8      	str	r0, [r7, #12]
   30114:	60b9      	str	r1, [r7, #8]
   30116:	0019      	movs	r1, r3
   30118:	1dfb      	adds	r3, r7, #7
   3011a:	701a      	strb	r2, [r3, #0]
   3011c:	1dbb      	adds	r3, r7, #6
   3011e:	1c0a      	adds	r2, r1, #0
   30120:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30122:	2300      	movs	r3, #0
   30124:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30126:	2300      	movs	r3, #0
   30128:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3012a:	68fb      	ldr	r3, [r7, #12]
   3012c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3012e:	68bb      	ldr	r3, [r7, #8]
   30130:	2b03      	cmp	r3, #3
   30132:	dc03      	bgt.n	3013c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30134:	2302      	movs	r3, #2
   30136:	425b      	negs	r3, r3
   30138:	61fb      	str	r3, [r7, #28]
		goto exit;
   3013a:	e055      	b.n	301e8 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   3013c:	1dfb      	adds	r3, r7, #7
   3013e:	781b      	ldrb	r3, [r3, #0]
   30140:	220f      	movs	r2, #15
   30142:	4013      	ands	r3, r2
   30144:	b2da      	uxtb	r2, r3
   30146:	2318      	movs	r3, #24
   30148:	18fb      	adds	r3, r7, r3
   3014a:	0110      	lsls	r0, r2, #4
   3014c:	781a      	ldrb	r2, [r3, #0]
   3014e:	210f      	movs	r1, #15
   30150:	400a      	ands	r2, r1
   30152:	1c11      	adds	r1, r2, #0
   30154:	1c02      	adds	r2, r0, #0
   30156:	430a      	orrs	r2, r1
   30158:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3015a:	1dbb      	adds	r3, r7, #6
   3015c:	781b      	ldrb	r3, [r3, #0]
   3015e:	2201      	movs	r2, #1
   30160:	4013      	ands	r3, r2
   30162:	b2da      	uxtb	r2, r3
   30164:	2318      	movs	r3, #24
   30166:	18fb      	adds	r3, r7, r3
   30168:	2101      	movs	r1, #1
   3016a:	400a      	ands	r2, r1
   3016c:	00d0      	lsls	r0, r2, #3
   3016e:	781a      	ldrb	r2, [r3, #0]
   30170:	2108      	movs	r1, #8
   30172:	438a      	bics	r2, r1
   30174:	1c11      	adds	r1, r2, #0
   30176:	1c02      	adds	r2, r0, #0
   30178:	430a      	orrs	r2, r1
   3017a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   3017c:	1dfb      	adds	r3, r7, #7
   3017e:	781b      	ldrb	r3, [r3, #0]
   30180:	3b06      	subs	r3, #6
   30182:	425a      	negs	r2, r3
   30184:	4153      	adcs	r3, r2
   30186:	b2db      	uxtb	r3, r3
   30188:	1c1a      	adds	r2, r3, #0
   3018a:	2303      	movs	r3, #3
   3018c:	4013      	ands	r3, r2
   3018e:	b2da      	uxtb	r2, r3
   30190:	2318      	movs	r3, #24
   30192:	18fb      	adds	r3, r7, r3
   30194:	2103      	movs	r1, #3
   30196:	400a      	ands	r2, r1
   30198:	1890      	adds	r0, r2, r2
   3019a:	781a      	ldrb	r2, [r3, #0]
   3019c:	2106      	movs	r1, #6
   3019e:	438a      	bics	r2, r1
   301a0:	1c11      	adds	r1, r2, #0
   301a2:	1c02      	adds	r2, r0, #0
   301a4:	430a      	orrs	r2, r1
   301a6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   301a8:	2318      	movs	r3, #24
   301aa:	18fb      	adds	r3, r7, r3
   301ac:	781a      	ldrb	r2, [r3, #0]
   301ae:	2314      	movs	r3, #20
   301b0:	18fb      	adds	r3, r7, r3
   301b2:	0011      	movs	r1, r2
   301b4:	0018      	movs	r0, r3
   301b6:	4b0f      	ldr	r3, [pc, #60]	; (301f4 <MQTTSerialize_ack+0xe8>)
   301b8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   301ba:	697b      	ldr	r3, [r7, #20]
   301bc:	2102      	movs	r1, #2
   301be:	0018      	movs	r0, r3
   301c0:	4b0d      	ldr	r3, [pc, #52]	; (301f8 <MQTTSerialize_ack+0xec>)
   301c2:	4798      	blx	r3
   301c4:	0002      	movs	r2, r0
   301c6:	697b      	ldr	r3, [r7, #20]
   301c8:	189b      	adds	r3, r3, r2
   301ca:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   301cc:	2328      	movs	r3, #40	; 0x28
   301ce:	18fb      	adds	r3, r7, r3
   301d0:	881a      	ldrh	r2, [r3, #0]
   301d2:	2314      	movs	r3, #20
   301d4:	18fb      	adds	r3, r7, r3
   301d6:	0011      	movs	r1, r2
   301d8:	0018      	movs	r0, r3
   301da:	4b08      	ldr	r3, [pc, #32]	; (301fc <MQTTSerialize_ack+0xf0>)
   301dc:	4798      	blx	r3
	rc = ptr - buf;
   301de:	697b      	ldr	r3, [r7, #20]
   301e0:	001a      	movs	r2, r3
   301e2:	68fb      	ldr	r3, [r7, #12]
   301e4:	1ad3      	subs	r3, r2, r3
   301e6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   301e8:	69fb      	ldr	r3, [r7, #28]
}
   301ea:	0018      	movs	r0, r3
   301ec:	46bd      	mov	sp, r7
   301ee:	b008      	add	sp, #32
   301f0:	bd80      	pop	{r7, pc}
   301f2:	46c0      	nop			; (mov r8, r8)
   301f4:	0002fce7 	.word	0x0002fce7
   301f8:	0002facd 	.word	0x0002facd
   301fc:	0002fd11 	.word	0x0002fd11

00030200 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30200:	b580      	push	{r7, lr}
   30202:	b084      	sub	sp, #16
   30204:	af00      	add	r7, sp, #0
   30206:	6078      	str	r0, [r7, #4]
   30208:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3020a:	2302      	movs	r3, #2
   3020c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3020e:	2300      	movs	r3, #0
   30210:	60fb      	str	r3, [r7, #12]
   30212:	e014      	b.n	3023e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30214:	68fa      	ldr	r2, [r7, #12]
   30216:	0013      	movs	r3, r2
   30218:	005b      	lsls	r3, r3, #1
   3021a:	189b      	adds	r3, r3, r2
   3021c:	009b      	lsls	r3, r3, #2
   3021e:	001a      	movs	r2, r3
   30220:	683b      	ldr	r3, [r7, #0]
   30222:	189b      	adds	r3, r3, r2
   30224:	6818      	ldr	r0, [r3, #0]
   30226:	6859      	ldr	r1, [r3, #4]
   30228:	689a      	ldr	r2, [r3, #8]
   3022a:	4b09      	ldr	r3, [pc, #36]	; (30250 <MQTTSerialize_subscribeLength+0x50>)
   3022c:	4798      	blx	r3
   3022e:	0003      	movs	r3, r0
   30230:	3303      	adds	r3, #3
   30232:	68ba      	ldr	r2, [r7, #8]
   30234:	18d3      	adds	r3, r2, r3
   30236:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30238:	68fb      	ldr	r3, [r7, #12]
   3023a:	3301      	adds	r3, #1
   3023c:	60fb      	str	r3, [r7, #12]
   3023e:	68fa      	ldr	r2, [r7, #12]
   30240:	687b      	ldr	r3, [r7, #4]
   30242:	429a      	cmp	r2, r3
   30244:	dbe6      	blt.n	30214 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30246:	68bb      	ldr	r3, [r7, #8]
}
   30248:	0018      	movs	r0, r3
   3024a:	46bd      	mov	sp, r7
   3024c:	b004      	add	sp, #16
   3024e:	bd80      	pop	{r7, pc}
   30250:	0002fea1 	.word	0x0002fea1

00030254 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30254:	b590      	push	{r4, r7, lr}
   30256:	b08b      	sub	sp, #44	; 0x2c
   30258:	af00      	add	r7, sp, #0
   3025a:	60f8      	str	r0, [r7, #12]
   3025c:	60b9      	str	r1, [r7, #8]
   3025e:	0019      	movs	r1, r3
   30260:	1dfb      	adds	r3, r7, #7
   30262:	701a      	strb	r2, [r3, #0]
   30264:	1d3b      	adds	r3, r7, #4
   30266:	1c0a      	adds	r2, r1, #0
   30268:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   3026a:	68fb      	ldr	r3, [r7, #12]
   3026c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3026e:	2300      	movs	r3, #0
   30270:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   30272:	2300      	movs	r3, #0
   30274:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30276:	2300      	movs	r3, #0
   30278:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   3027a:	2300      	movs	r3, #0
   3027c:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3027e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30282:	0011      	movs	r1, r2
   30284:	0018      	movs	r0, r3
   30286:	4b41      	ldr	r3, [pc, #260]	; (3038c <MQTTSerialize_subscribe+0x138>)
   30288:	4798      	blx	r3
   3028a:	0003      	movs	r3, r0
   3028c:	61fb      	str	r3, [r7, #28]
   3028e:	69fb      	ldr	r3, [r7, #28]
   30290:	0018      	movs	r0, r3
   30292:	4b3f      	ldr	r3, [pc, #252]	; (30390 <MQTTSerialize_subscribe+0x13c>)
   30294:	4798      	blx	r3
   30296:	0002      	movs	r2, r0
   30298:	68bb      	ldr	r3, [r7, #8]
   3029a:	429a      	cmp	r2, r3
   3029c:	dd03      	ble.n	302a6 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3029e:	2302      	movs	r3, #2
   302a0:	425b      	negs	r3, r3
   302a2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   302a4:	e06c      	b.n	30380 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   302a6:	2314      	movs	r3, #20
   302a8:	18fb      	adds	r3, r7, r3
   302aa:	2200      	movs	r2, #0
   302ac:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   302ae:	2314      	movs	r3, #20
   302b0:	18fb      	adds	r3, r7, r3
   302b2:	781a      	ldrb	r2, [r3, #0]
   302b4:	210f      	movs	r1, #15
   302b6:	400a      	ands	r2, r1
   302b8:	1c11      	adds	r1, r2, #0
   302ba:	2280      	movs	r2, #128	; 0x80
   302bc:	4252      	negs	r2, r2
   302be:	430a      	orrs	r2, r1
   302c0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   302c2:	1dfb      	adds	r3, r7, #7
   302c4:	781b      	ldrb	r3, [r3, #0]
   302c6:	2201      	movs	r2, #1
   302c8:	4013      	ands	r3, r2
   302ca:	b2da      	uxtb	r2, r3
   302cc:	2314      	movs	r3, #20
   302ce:	18fb      	adds	r3, r7, r3
   302d0:	2101      	movs	r1, #1
   302d2:	400a      	ands	r2, r1
   302d4:	00d0      	lsls	r0, r2, #3
   302d6:	781a      	ldrb	r2, [r3, #0]
   302d8:	2108      	movs	r1, #8
   302da:	438a      	bics	r2, r1
   302dc:	1c11      	adds	r1, r2, #0
   302de:	1c02      	adds	r2, r0, #0
   302e0:	430a      	orrs	r2, r1
   302e2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   302e4:	2314      	movs	r3, #20
   302e6:	18fb      	adds	r3, r7, r3
   302e8:	781a      	ldrb	r2, [r3, #0]
   302ea:	2106      	movs	r1, #6
   302ec:	438a      	bics	r2, r1
   302ee:	1c11      	adds	r1, r2, #0
   302f0:	2202      	movs	r2, #2
   302f2:	430a      	orrs	r2, r1
   302f4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   302f6:	2314      	movs	r3, #20
   302f8:	18fb      	adds	r3, r7, r3
   302fa:	781a      	ldrb	r2, [r3, #0]
   302fc:	2318      	movs	r3, #24
   302fe:	18fb      	adds	r3, r7, r3
   30300:	0011      	movs	r1, r2
   30302:	0018      	movs	r0, r3
   30304:	4b23      	ldr	r3, [pc, #140]	; (30394 <MQTTSerialize_subscribe+0x140>)
   30306:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30308:	69bb      	ldr	r3, [r7, #24]
   3030a:	69fa      	ldr	r2, [r7, #28]
   3030c:	0011      	movs	r1, r2
   3030e:	0018      	movs	r0, r3
   30310:	4b21      	ldr	r3, [pc, #132]	; (30398 <MQTTSerialize_subscribe+0x144>)
   30312:	4798      	blx	r3
   30314:	0002      	movs	r2, r0
   30316:	69bb      	ldr	r3, [r7, #24]
   30318:	189b      	adds	r3, r3, r2
   3031a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   3031c:	1d3b      	adds	r3, r7, #4
   3031e:	881a      	ldrh	r2, [r3, #0]
   30320:	2318      	movs	r3, #24
   30322:	18fb      	adds	r3, r7, r3
   30324:	0011      	movs	r1, r2
   30326:	0018      	movs	r0, r3
   30328:	4b1c      	ldr	r3, [pc, #112]	; (3039c <MQTTSerialize_subscribe+0x148>)
   3032a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   3032c:	2300      	movs	r3, #0
   3032e:	623b      	str	r3, [r7, #32]
   30330:	e01d      	b.n	3036e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   30332:	6a3a      	ldr	r2, [r7, #32]
   30334:	0013      	movs	r3, r2
   30336:	005b      	lsls	r3, r3, #1
   30338:	189b      	adds	r3, r3, r2
   3033a:	009b      	lsls	r3, r3, #2
   3033c:	001a      	movs	r2, r3
   3033e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30340:	189b      	adds	r3, r3, r2
   30342:	2218      	movs	r2, #24
   30344:	18b8      	adds	r0, r7, r2
   30346:	6819      	ldr	r1, [r3, #0]
   30348:	685a      	ldr	r2, [r3, #4]
   3034a:	689b      	ldr	r3, [r3, #8]
   3034c:	4c14      	ldr	r4, [pc, #80]	; (303a0 <MQTTSerialize_subscribe+0x14c>)
   3034e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   30350:	6a3b      	ldr	r3, [r7, #32]
   30352:	009b      	lsls	r3, r3, #2
   30354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30356:	18d3      	adds	r3, r2, r3
   30358:	681b      	ldr	r3, [r3, #0]
   3035a:	b2da      	uxtb	r2, r3
   3035c:	2318      	movs	r3, #24
   3035e:	18fb      	adds	r3, r7, r3
   30360:	0011      	movs	r1, r2
   30362:	0018      	movs	r0, r3
   30364:	4b0b      	ldr	r3, [pc, #44]	; (30394 <MQTTSerialize_subscribe+0x140>)
   30366:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30368:	6a3b      	ldr	r3, [r7, #32]
   3036a:	3301      	adds	r3, #1
   3036c:	623b      	str	r3, [r7, #32]
   3036e:	6a3a      	ldr	r2, [r7, #32]
   30370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30372:	429a      	cmp	r2, r3
   30374:	dbdd      	blt.n	30332 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30376:	69bb      	ldr	r3, [r7, #24]
   30378:	001a      	movs	r2, r3
   3037a:	68fb      	ldr	r3, [r7, #12]
   3037c:	1ad3      	subs	r3, r2, r3
   3037e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30382:	0018      	movs	r0, r3
   30384:	46bd      	mov	sp, r7
   30386:	b00b      	add	sp, #44	; 0x2c
   30388:	bd90      	pop	{r4, r7, pc}
   3038a:	46c0      	nop			; (mov r8, r8)
   3038c:	00030201 	.word	0x00030201
   30390:	0002fbc5 	.word	0x0002fbc5
   30394:	0002fce7 	.word	0x0002fce7
   30398:	0002facd 	.word	0x0002facd
   3039c:	0002fd11 	.word	0x0002fd11
   303a0:	0002fdb9 	.word	0x0002fdb9

000303a4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   303a4:	b590      	push	{r4, r7, lr}
   303a6:	b08b      	sub	sp, #44	; 0x2c
   303a8:	af00      	add	r7, sp, #0
   303aa:	60f8      	str	r0, [r7, #12]
   303ac:	60b9      	str	r1, [r7, #8]
   303ae:	607a      	str	r2, [r7, #4]
   303b0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   303b2:	2300      	movs	r3, #0
   303b4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   303b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   303b8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   303ba:	2300      	movs	r3, #0
   303bc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   303be:	2300      	movs	r3, #0
   303c0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   303c2:	2318      	movs	r3, #24
   303c4:	18fb      	adds	r3, r7, r3
   303c6:	0018      	movs	r0, r3
   303c8:	4b2c      	ldr	r3, [pc, #176]	; (3047c <MQTTDeserialize_suback+0xd8>)
   303ca:	4798      	blx	r3
   303cc:	0003      	movs	r3, r0
   303ce:	001a      	movs	r2, r3
   303d0:	231c      	movs	r3, #28
   303d2:	18fb      	adds	r3, r7, r3
   303d4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   303d6:	231c      	movs	r3, #28
   303d8:	18fb      	adds	r3, r7, r3
   303da:	781b      	ldrb	r3, [r3, #0]
   303dc:	220f      	movs	r2, #15
   303de:	4393      	bics	r3, r2
   303e0:	b2db      	uxtb	r3, r3
   303e2:	2b90      	cmp	r3, #144	; 0x90
   303e4:	d142      	bne.n	3046c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   303e6:	69bb      	ldr	r3, [r7, #24]
   303e8:	2214      	movs	r2, #20
   303ea:	18ba      	adds	r2, r7, r2
   303ec:	0011      	movs	r1, r2
   303ee:	0018      	movs	r0, r3
   303f0:	4b23      	ldr	r3, [pc, #140]	; (30480 <MQTTDeserialize_suback+0xdc>)
   303f2:	4798      	blx	r3
   303f4:	0003      	movs	r3, r0
   303f6:	627b      	str	r3, [r7, #36]	; 0x24
   303f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   303fa:	69bb      	ldr	r3, [r7, #24]
   303fc:	189b      	adds	r3, r3, r2
   303fe:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30400:	69bb      	ldr	r3, [r7, #24]
   30402:	697a      	ldr	r2, [r7, #20]
   30404:	189b      	adds	r3, r3, r2
   30406:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30408:	6a3b      	ldr	r3, [r7, #32]
   3040a:	69ba      	ldr	r2, [r7, #24]
   3040c:	1a9b      	subs	r3, r3, r2
   3040e:	2b01      	cmp	r3, #1
   30410:	dd2e      	ble.n	30470 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30412:	2318      	movs	r3, #24
   30414:	18fb      	adds	r3, r7, r3
   30416:	0018      	movs	r0, r3
   30418:	4b1a      	ldr	r3, [pc, #104]	; (30484 <MQTTDeserialize_suback+0xe0>)
   3041a:	4798      	blx	r3
   3041c:	0003      	movs	r3, r0
   3041e:	b29a      	uxth	r2, r3
   30420:	68fb      	ldr	r3, [r7, #12]
   30422:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30424:	687b      	ldr	r3, [r7, #4]
   30426:	2200      	movs	r2, #0
   30428:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   3042a:	e018      	b.n	3045e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   3042c:	687b      	ldr	r3, [r7, #4]
   3042e:	681a      	ldr	r2, [r3, #0]
   30430:	68bb      	ldr	r3, [r7, #8]
   30432:	429a      	cmp	r2, r3
   30434:	dd03      	ble.n	3043e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30436:	2301      	movs	r3, #1
   30438:	425b      	negs	r3, r3
   3043a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   3043c:	e019      	b.n	30472 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3043e:	687b      	ldr	r3, [r7, #4]
   30440:	681a      	ldr	r2, [r3, #0]
   30442:	1c51      	adds	r1, r2, #1
   30444:	687b      	ldr	r3, [r7, #4]
   30446:	6019      	str	r1, [r3, #0]
   30448:	0013      	movs	r3, r2
   3044a:	009b      	lsls	r3, r3, #2
   3044c:	683a      	ldr	r2, [r7, #0]
   3044e:	18d4      	adds	r4, r2, r3
   30450:	2318      	movs	r3, #24
   30452:	18fb      	adds	r3, r7, r3
   30454:	0018      	movs	r0, r3
   30456:	4b09      	ldr	r3, [pc, #36]	; (3047c <MQTTDeserialize_suback+0xd8>)
   30458:	4798      	blx	r3
   3045a:	0003      	movs	r3, r0
   3045c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3045e:	69ba      	ldr	r2, [r7, #24]
   30460:	6a3b      	ldr	r3, [r7, #32]
   30462:	429a      	cmp	r2, r3
   30464:	d3e2      	bcc.n	3042c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30466:	2301      	movs	r3, #1
   30468:	627b      	str	r3, [r7, #36]	; 0x24
   3046a:	e002      	b.n	30472 <MQTTDeserialize_suback+0xce>
		goto exit;
   3046c:	46c0      	nop			; (mov r8, r8)
   3046e:	e000      	b.n	30472 <MQTTDeserialize_suback+0xce>
		goto exit;
   30470:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30474:	0018      	movs	r0, r3
   30476:	46bd      	mov	sp, r7
   30478:	b00b      	add	sp, #44	; 0x2c
   3047a:	bd90      	pop	{r4, r7, pc}
   3047c:	0002fcbb 	.word	0x0002fcbb
   30480:	0002fc55 	.word	0x0002fc55
   30484:	0002fc89 	.word	0x0002fc89

00030488 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30488:	b580      	push	{r7, lr}
   3048a:	b082      	sub	sp, #8
   3048c:	af00      	add	r7, sp, #0
   3048e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   30490:	687b      	ldr	r3, [r7, #4]
   30492:	2250      	movs	r2, #80	; 0x50
   30494:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30496:	687b      	ldr	r3, [r7, #4]
   30498:	2200      	movs	r2, #0
   3049a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   3049c:	687b      	ldr	r3, [r7, #4]
   3049e:	4a0b      	ldr	r2, [pc, #44]	; (304cc <http_client_get_config_defaults+0x44>)
   304a0:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   304a2:	687b      	ldr	r3, [r7, #4]
   304a4:	2200      	movs	r2, #0
   304a6:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   304a8:	687b      	ldr	r3, [r7, #4]
   304aa:	2200      	movs	r2, #0
   304ac:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   304ae:	687b      	ldr	r3, [r7, #4]
   304b0:	2280      	movs	r2, #128	; 0x80
   304b2:	0052      	lsls	r2, r2, #1
   304b4:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   304b6:	687b      	ldr	r3, [r7, #4]
   304b8:	2252      	movs	r2, #82	; 0x52
   304ba:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   304bc:	687b      	ldr	r3, [r7, #4]
   304be:	4a04      	ldr	r2, [pc, #16]	; (304d0 <http_client_get_config_defaults+0x48>)
   304c0:	619a      	str	r2, [r3, #24]
}
   304c2:	46c0      	nop			; (mov r8, r8)
   304c4:	46bd      	mov	sp, r7
   304c6:	b002      	add	sp, #8
   304c8:	bd80      	pop	{r7, pc}
   304ca:	46c0      	nop			; (mov r8, r8)
   304cc:	00004e20 	.word	0x00004e20
   304d0:	000390c0 	.word	0x000390c0

000304d4 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   304d4:	b590      	push	{r4, r7, lr}
   304d6:	b083      	sub	sp, #12
   304d8:	af00      	add	r7, sp, #0
   304da:	6078      	str	r0, [r7, #4]
   304dc:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   304de:	687b      	ldr	r3, [r7, #4]
   304e0:	2b00      	cmp	r3, #0
   304e2:	d002      	beq.n	304ea <http_client_init+0x16>
   304e4:	683b      	ldr	r3, [r7, #0]
   304e6:	2b00      	cmp	r3, #0
   304e8:	d102      	bne.n	304f0 <http_client_init+0x1c>
		return -EINVAL;
   304ea:	2316      	movs	r3, #22
   304ec:	425b      	negs	r3, r3
   304ee:	e058      	b.n	305a2 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   304f0:	683b      	ldr	r3, [r7, #0]
   304f2:	691b      	ldr	r3, [r3, #16]
   304f4:	2b00      	cmp	r3, #0
   304f6:	d102      	bne.n	304fe <http_client_init+0x2a>
		return -EINVAL;
   304f8:	2316      	movs	r3, #22
   304fa:	425b      	negs	r3, r3
   304fc:	e051      	b.n	305a2 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   304fe:	683b      	ldr	r3, [r7, #0]
   30500:	685b      	ldr	r3, [r3, #4]
   30502:	2b00      	cmp	r3, #0
   30504:	d102      	bne.n	3050c <http_client_init+0x38>
		return -EINVAL;
   30506:	2316      	movs	r3, #22
   30508:	425b      	negs	r3, r3
   3050a:	e04a      	b.n	305a2 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   3050c:	683b      	ldr	r3, [r7, #0]
   3050e:	695b      	ldr	r3, [r3, #20]
   30510:	2b51      	cmp	r3, #81	; 0x51
   30512:	d802      	bhi.n	3051a <http_client_init+0x46>
		return -EINVAL;
   30514:	2316      	movs	r3, #22
   30516:	425b      	negs	r3, r3
   30518:	e043      	b.n	305a2 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3051a:	687b      	ldr	r3, [r7, #4]
   3051c:	22e8      	movs	r2, #232	; 0xe8
   3051e:	2100      	movs	r1, #0
   30520:	0018      	movs	r0, r3
   30522:	4b22      	ldr	r3, [pc, #136]	; (305ac <http_client_init+0xd8>)
   30524:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   30526:	687b      	ldr	r3, [r7, #4]
   30528:	3350      	adds	r3, #80	; 0x50
   3052a:	6839      	ldr	r1, [r7, #0]
   3052c:	221c      	movs	r2, #28
   3052e:	0018      	movs	r0, r3
   30530:	4b1f      	ldr	r3, [pc, #124]	; (305b0 <http_client_init+0xdc>)
   30532:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   30534:	687b      	ldr	r3, [r7, #4]
   30536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30538:	2b00      	cmp	r3, #0
   3053a:	d115      	bne.n	30568 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   3053c:	683b      	ldr	r3, [r7, #0]
   3053e:	691b      	ldr	r3, [r3, #16]
   30540:	0018      	movs	r0, r3
   30542:	4b1c      	ldr	r3, [pc, #112]	; (305b4 <http_client_init+0xe0>)
   30544:	4798      	blx	r3
   30546:	0003      	movs	r3, r0
   30548:	001a      	movs	r2, r3
   3054a:	687b      	ldr	r3, [r7, #4]
   3054c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   3054e:	687b      	ldr	r3, [r7, #4]
   30550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30552:	2b00      	cmp	r3, #0
   30554:	d102      	bne.n	3055c <http_client_init+0x88>
			return -ENOMEM;
   30556:	230c      	movs	r3, #12
   30558:	425b      	negs	r3, r3
   3055a:	e022      	b.n	305a2 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   3055c:	687b      	ldr	r3, [r7, #4]
   3055e:	2241      	movs	r2, #65	; 0x41
   30560:	5c99      	ldrb	r1, [r3, r2]
   30562:	2004      	movs	r0, #4
   30564:	4301      	orrs	r1, r0
   30566:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30568:	683b      	ldr	r3, [r7, #0]
   3056a:	891b      	ldrh	r3, [r3, #8]
   3056c:	2b00      	cmp	r3, #0
   3056e:	d010      	beq.n	30592 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   30570:	683b      	ldr	r3, [r7, #0]
   30572:	6858      	ldr	r0, [r3, #4]
   30574:	687a      	ldr	r2, [r7, #4]
   30576:	4910      	ldr	r1, [pc, #64]	; (305b8 <http_client_init+0xe4>)
   30578:	2300      	movs	r3, #0
   3057a:	4c10      	ldr	r4, [pc, #64]	; (305bc <http_client_init+0xe8>)
   3057c:	47a0      	blx	r4
   3057e:	0002      	movs	r2, r0
   30580:	687b      	ldr	r3, [r7, #4]
   30582:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30584:	687b      	ldr	r3, [r7, #4]
   30586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30588:	2b00      	cmp	r3, #0
   3058a:	da02      	bge.n	30592 <http_client_init+0xbe>
			return -ENOSPC;
   3058c:	231c      	movs	r3, #28
   3058e:	425b      	negs	r3, r3
   30590:	e007      	b.n	305a2 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   30592:	687b      	ldr	r3, [r7, #4]
   30594:	2200      	movs	r2, #0
   30596:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30598:	687b      	ldr	r3, [r7, #4]
   3059a:	22d8      	movs	r2, #216	; 0xd8
   3059c:	2100      	movs	r1, #0
   3059e:	5099      	str	r1, [r3, r2]

	return 0;
   305a0:	2300      	movs	r3, #0
}
   305a2:	0018      	movs	r0, r3
   305a4:	46bd      	mov	sp, r7
   305a6:	b003      	add	sp, #12
   305a8:	bd90      	pop	{r4, r7, pc}
   305aa:	46c0      	nop			; (mov r8, r8)
   305ac:	00034043 	.word	0x00034043
   305b0:	0003400d 	.word	0x0003400d
   305b4:	00033fe5 	.word	0x00033fe5
   305b8:	00030885 	.word	0x00030885
   305bc:	00031f29 	.word	0x00031f29

000305c0 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   305c0:	b580      	push	{r7, lr}
   305c2:	b082      	sub	sp, #8
   305c4:	af00      	add	r7, sp, #0
   305c6:	6078      	str	r0, [r7, #4]
   305c8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   305ca:	687b      	ldr	r3, [r7, #4]
   305cc:	2b00      	cmp	r3, #0
   305ce:	d102      	bne.n	305d6 <http_client_register_callback+0x16>
		return -EINVAL;
   305d0:	2316      	movs	r3, #22
   305d2:	425b      	negs	r3, r3
   305d4:	e003      	b.n	305de <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   305d6:	687b      	ldr	r3, [r7, #4]
   305d8:	683a      	ldr	r2, [r7, #0]
   305da:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   305dc:	2300      	movs	r3, #0
}
   305de:	0018      	movs	r0, r3
   305e0:	46bd      	mov	sp, r7
   305e2:	b002      	add	sp, #8
   305e4:	bd80      	pop	{r7, pc}
	...

000305e8 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   305e8:	b580      	push	{r7, lr}
   305ea:	b082      	sub	sp, #8
   305ec:	af00      	add	r7, sp, #0
   305ee:	6078      	str	r0, [r7, #4]
	switch (err) {
   305f0:	687b      	ldr	r3, [r7, #4]
   305f2:	330e      	adds	r3, #14
   305f4:	2b0e      	cmp	r3, #14
   305f6:	d825      	bhi.n	30644 <_hwerr_to_stderr+0x5c>
   305f8:	009a      	lsls	r2, r3, #2
   305fa:	4b18      	ldr	r3, [pc, #96]	; (3065c <_hwerr_to_stderr+0x74>)
   305fc:	18d3      	adds	r3, r2, r3
   305fe:	681b      	ldr	r3, [r3, #0]
   30600:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   30602:	2305      	movs	r3, #5
   30604:	425b      	negs	r3, r3
   30606:	e024      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   30608:	2302      	movs	r3, #2
   3060a:	425b      	negs	r3, r3
   3060c:	e021      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   3060e:	2370      	movs	r3, #112	; 0x70
   30610:	425b      	negs	r3, r3
   30612:	e01e      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30614:	230c      	movs	r3, #12
   30616:	425b      	negs	r3, r3
   30618:	e01b      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3061a:	2316      	movs	r3, #22
   3061c:	425b      	negs	r3, r3
   3061e:	e018      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   30620:	230c      	movs	r3, #12
   30622:	425b      	negs	r3, r3
   30624:	e015      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30626:	2305      	movs	r3, #5
   30628:	425b      	negs	r3, r3
   3062a:	e012      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   3062c:	2379      	movs	r3, #121	; 0x79
   3062e:	425b      	negs	r3, r3
   30630:	e00f      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   30632:	2368      	movs	r3, #104	; 0x68
   30634:	425b      	negs	r3, r3
   30636:	e00c      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30638:	230b      	movs	r3, #11
   3063a:	425b      	negs	r3, r3
   3063c:	e009      	b.n	30652 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3063e:	2310      	movs	r3, #16
   30640:	425b      	negs	r3, r3
   30642:	e006      	b.n	30652 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30644:	687b      	ldr	r3, [r7, #4]
   30646:	2b00      	cmp	r3, #0
   30648:	da02      	bge.n	30650 <_hwerr_to_stderr+0x68>
				return -EIO;
   3064a:	2305      	movs	r3, #5
   3064c:	425b      	negs	r3, r3
   3064e:	e000      	b.n	30652 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   30650:	2300      	movs	r3, #0
	}
}
   30652:	0018      	movs	r0, r3
   30654:	46bd      	mov	sp, r7
   30656:	b002      	add	sp, #8
   30658:	bd80      	pop	{r7, pc}
   3065a:	46c0      	nop			; (mov r8, r8)
   3065c:	000391fc 	.word	0x000391fc

00030660 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30660:	b580      	push	{r7, lr}
   30662:	b08a      	sub	sp, #40	; 0x28
   30664:	af00      	add	r7, sp, #0
   30666:	603a      	str	r2, [r7, #0]
   30668:	1dfb      	adds	r3, r7, #7
   3066a:	1c02      	adds	r2, r0, #0
   3066c:	701a      	strb	r2, [r3, #0]
   3066e:	1dbb      	adds	r3, r7, #6
   30670:	1c0a      	adds	r2, r1, #0
   30672:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   30674:	1dfb      	adds	r3, r7, #7
   30676:	2200      	movs	r2, #0
   30678:	569a      	ldrsb	r2, [r3, r2]
   3067a:	4b4b      	ldr	r3, [pc, #300]	; (307a8 <http_client_socket_event_handler+0x148>)
   3067c:	0092      	lsls	r2, r2, #2
   3067e:	58d3      	ldr	r3, [r2, r3]
   30680:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   30682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30684:	2b00      	cmp	r3, #0
   30686:	d100      	bne.n	3068a <http_client_socket_event_handler+0x2a>
   30688:	e08a      	b.n	307a0 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   3068a:	1dbb      	adds	r3, r7, #6
   3068c:	781b      	ldrb	r3, [r3, #0]
   3068e:	2b06      	cmp	r3, #6
   30690:	d040      	beq.n	30714 <http_client_socket_event_handler+0xb4>
   30692:	2b07      	cmp	r3, #7
   30694:	d060      	beq.n	30758 <http_client_socket_event_handler+0xf8>
   30696:	2b05      	cmp	r3, #5
   30698:	d000      	beq.n	3069c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   3069a:	e082      	b.n	307a2 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   3069c:	683b      	ldr	r3, [r7, #0]
   3069e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   306a0:	6a3b      	ldr	r3, [r7, #32]
   306a2:	785b      	ldrb	r3, [r3, #1]
   306a4:	b25b      	sxtb	r3, r3
   306a6:	001a      	movs	r2, r3
   306a8:	230c      	movs	r3, #12
   306aa:	18fb      	adds	r3, r7, r3
   306ac:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   306ae:	6a3b      	ldr	r3, [r7, #32]
   306b0:	785b      	ldrb	r3, [r3, #1]
   306b2:	b25b      	sxtb	r3, r3
   306b4:	2b00      	cmp	r3, #0
   306b6:	da0c      	bge.n	306d2 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   306b8:	6a3b      	ldr	r3, [r7, #32]
   306ba:	785b      	ldrb	r3, [r3, #1]
   306bc:	b25b      	sxtb	r3, r3
   306be:	0018      	movs	r0, r3
   306c0:	4b3a      	ldr	r3, [pc, #232]	; (307ac <http_client_socket_event_handler+0x14c>)
   306c2:	4798      	blx	r3
   306c4:	0002      	movs	r2, r0
   306c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306c8:	0011      	movs	r1, r2
   306ca:	0018      	movs	r0, r3
   306cc:	4b38      	ldr	r3, [pc, #224]	; (307b0 <http_client_socket_event_handler+0x150>)
   306ce:	4798      	blx	r3
    	break;
   306d0:	e067      	b.n	307a2 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   306d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306d6:	2b00      	cmp	r3, #0
   306d8:	d006      	beq.n	306e8 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   306da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306de:	220c      	movs	r2, #12
   306e0:	18ba      	adds	r2, r7, r2
   306e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   306e4:	2100      	movs	r1, #0
   306e6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   306e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306ea:	2203      	movs	r2, #3
   306ec:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   306ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
   306f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306f4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   306f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306f8:	2258      	movs	r2, #88	; 0x58
   306fa:	5a9b      	ldrh	r3, [r3, r2]
   306fc:	001a      	movs	r2, r3
   306fe:	4b2d      	ldr	r3, [pc, #180]	; (307b4 <http_client_socket_event_handler+0x154>)
   30700:	4798      	blx	r3
    		_http_client_recv_packet(module);
   30702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30704:	0018      	movs	r0, r3
   30706:	4b2c      	ldr	r3, [pc, #176]	; (307b8 <http_client_socket_event_handler+0x158>)
   30708:	4798      	blx	r3
			_http_client_request(module);
   3070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3070c:	0018      	movs	r0, r3
   3070e:	4b2b      	ldr	r3, [pc, #172]	; (307bc <http_client_socket_event_handler+0x15c>)
   30710:	4798      	blx	r3
    	break;
   30712:	e046      	b.n	307a2 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30714:	683b      	ldr	r3, [r7, #0]
   30716:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30718:	69fb      	ldr	r3, [r7, #28]
   3071a:	2204      	movs	r2, #4
   3071c:	5e9b      	ldrsh	r3, [r3, r2]
   3071e:	2b00      	cmp	r3, #0
   30720:	dd09      	ble.n	30736 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   30722:	69fb      	ldr	r3, [r7, #28]
   30724:	2204      	movs	r2, #4
   30726:	5e9b      	ldrsh	r3, [r3, r2]
   30728:	001a      	movs	r2, r3
   3072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3072c:	0011      	movs	r1, r2
   3072e:	0018      	movs	r0, r3
   30730:	4b23      	ldr	r3, [pc, #140]	; (307c0 <http_client_socket_event_handler+0x160>)
   30732:	4798      	blx	r3
   30734:	e00b      	b.n	3074e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30736:	69fb      	ldr	r3, [r7, #28]
   30738:	2204      	movs	r2, #4
   3073a:	5e9b      	ldrsh	r3, [r3, r2]
   3073c:	0018      	movs	r0, r3
   3073e:	4b1b      	ldr	r3, [pc, #108]	; (307ac <http_client_socket_event_handler+0x14c>)
   30740:	4798      	blx	r3
   30742:	0002      	movs	r2, r0
   30744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30746:	0011      	movs	r1, r2
   30748:	0018      	movs	r0, r3
   3074a:	4b19      	ldr	r3, [pc, #100]	; (307b0 <http_client_socket_event_handler+0x150>)
   3074c:	4798      	blx	r3
		_http_client_recv_packet(module);
   3074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30750:	0018      	movs	r0, r3
   30752:	4b19      	ldr	r3, [pc, #100]	; (307b8 <http_client_socket_event_handler+0x158>)
   30754:	4798      	blx	r3
		break;
   30756:	e024      	b.n	307a2 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30758:	231a      	movs	r3, #26
   3075a:	18fb      	adds	r3, r7, r3
   3075c:	683a      	ldr	r2, [r7, #0]
   3075e:	8812      	ldrh	r2, [r2, #0]
   30760:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   30762:	231a      	movs	r3, #26
   30764:	18fb      	adds	r3, r7, r3
   30766:	2200      	movs	r2, #0
   30768:	5e9b      	ldrsh	r3, [r3, r2]
   3076a:	2b00      	cmp	r3, #0
   3076c:	da0d      	bge.n	3078a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   3076e:	231a      	movs	r3, #26
   30770:	18fb      	adds	r3, r7, r3
   30772:	2200      	movs	r2, #0
   30774:	5e9b      	ldrsh	r3, [r3, r2]
   30776:	0018      	movs	r0, r3
   30778:	4b0c      	ldr	r3, [pc, #48]	; (307ac <http_client_socket_event_handler+0x14c>)
   3077a:	4798      	blx	r3
   3077c:	0002      	movs	r2, r0
   3077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30780:	0011      	movs	r1, r2
   30782:	0018      	movs	r0, r3
   30784:	4b0a      	ldr	r3, [pc, #40]	; (307b0 <http_client_socket_event_handler+0x150>)
   30786:	4798      	blx	r3
   30788:	e003      	b.n	30792 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   3078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3078c:	0018      	movs	r0, r3
   3078e:	4b0b      	ldr	r3, [pc, #44]	; (307bc <http_client_socket_event_handler+0x15c>)
   30790:	4798      	blx	r3
		module->sending = 0;
   30792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30794:	2241      	movs	r2, #65	; 0x41
   30796:	5c99      	ldrb	r1, [r3, r2]
   30798:	2001      	movs	r0, #1
   3079a:	4381      	bics	r1, r0
   3079c:	5499      	strb	r1, [r3, r2]
    	break;
   3079e:	e000      	b.n	307a2 <http_client_socket_event_handler+0x142>
		return;
   307a0:	46c0      	nop			; (mov r8, r8)
	}

}
   307a2:	46bd      	mov	sp, r7
   307a4:	b00a      	add	sp, #40	; 0x28
   307a6:	bd80      	pop	{r7, pc}
   307a8:	20004550 	.word	0x20004550
   307ac:	000305e9 	.word	0x000305e9
   307b0:	00030c5d 	.word	0x00030c5d
   307b4:	00031fb9 	.word	0x00031fb9
   307b8:	000314e9 	.word	0x000314e9
   307bc:	00030db1 	.word	0x00030db1
   307c0:	0003154d 	.word	0x0003154d

000307c4 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   307c4:	b580      	push	{r7, lr}
   307c6:	b088      	sub	sp, #32
   307c8:	af00      	add	r7, sp, #0
   307ca:	6078      	str	r0, [r7, #4]
   307cc:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   307ce:	2300      	movs	r3, #0
   307d0:	61fb      	str	r3, [r7, #28]
   307d2:	e048      	b.n	30866 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   307d4:	4b27      	ldr	r3, [pc, #156]	; (30874 <http_client_socket_resolve_handler+0xb0>)
   307d6:	69fa      	ldr	r2, [r7, #28]
   307d8:	0092      	lsls	r2, r2, #2
   307da:	58d3      	ldr	r3, [r2, r3]
   307dc:	2b00      	cmp	r3, #0
   307de:	d03f      	beq.n	30860 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   307e0:	4b24      	ldr	r3, [pc, #144]	; (30874 <http_client_socket_resolve_handler+0xb0>)
   307e2:	69fa      	ldr	r2, [r7, #28]
   307e4:	0092      	lsls	r2, r2, #2
   307e6:	58d3      	ldr	r3, [r2, r3]
   307e8:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   307ea:	69bb      	ldr	r3, [r7, #24]
   307ec:	1c5a      	adds	r2, r3, #1
   307ee:	687b      	ldr	r3, [r7, #4]
   307f0:	0011      	movs	r1, r2
   307f2:	0018      	movs	r0, r3
   307f4:	4b20      	ldr	r3, [pc, #128]	; (30878 <http_client_socket_resolve_handler+0xb4>)
   307f6:	4798      	blx	r3
   307f8:	1e03      	subs	r3, r0, #0
   307fa:	d131      	bne.n	30860 <http_client_socket_resolve_handler+0x9c>
   307fc:	69bb      	ldr	r3, [r7, #24]
   307fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30800:	2b01      	cmp	r3, #1
   30802:	d12d      	bne.n	30860 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30804:	683b      	ldr	r3, [r7, #0]
   30806:	2b00      	cmp	r3, #0
   30808:	d107      	bne.n	3081a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   3080a:	2376      	movs	r3, #118	; 0x76
   3080c:	425a      	negs	r2, r3
   3080e:	69bb      	ldr	r3, [r7, #24]
   30810:	0011      	movs	r1, r2
   30812:	0018      	movs	r0, r3
   30814:	4b19      	ldr	r3, [pc, #100]	; (3087c <http_client_socket_resolve_handler+0xb8>)
   30816:	4798      	blx	r3
					return;
   30818:	e028      	b.n	3086c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   3081a:	2308      	movs	r3, #8
   3081c:	18fb      	adds	r3, r7, r3
   3081e:	2202      	movs	r2, #2
   30820:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30822:	69bb      	ldr	r3, [r7, #24]
   30824:	2250      	movs	r2, #80	; 0x50
   30826:	5a9b      	ldrh	r3, [r3, r2]
   30828:	021b      	lsls	r3, r3, #8
   3082a:	b21a      	sxth	r2, r3
   3082c:	69bb      	ldr	r3, [r7, #24]
   3082e:	2150      	movs	r1, #80	; 0x50
   30830:	5a5b      	ldrh	r3, [r3, r1]
   30832:	0a1b      	lsrs	r3, r3, #8
   30834:	b29b      	uxth	r3, r3
   30836:	b21b      	sxth	r3, r3
   30838:	4313      	orrs	r3, r2
   3083a:	b21b      	sxth	r3, r3
   3083c:	b29a      	uxth	r2, r3
   3083e:	2308      	movs	r3, #8
   30840:	18fb      	adds	r3, r7, r3
   30842:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30844:	2308      	movs	r3, #8
   30846:	18fb      	adds	r3, r7, r3
   30848:	683a      	ldr	r2, [r7, #0]
   3084a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3084c:	69bb      	ldr	r3, [r7, #24]
   3084e:	781b      	ldrb	r3, [r3, #0]
   30850:	b25b      	sxtb	r3, r3
   30852:	2208      	movs	r2, #8
   30854:	18b9      	adds	r1, r7, r2
   30856:	2210      	movs	r2, #16
   30858:	0018      	movs	r0, r3
   3085a:	4b09      	ldr	r3, [pc, #36]	; (30880 <http_client_socket_resolve_handler+0xbc>)
   3085c:	4798      	blx	r3
				return;
   3085e:	e005      	b.n	3086c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30860:	69fb      	ldr	r3, [r7, #28]
   30862:	3301      	adds	r3, #1
   30864:	61fb      	str	r3, [r7, #28]
   30866:	69fb      	ldr	r3, [r7, #28]
   30868:	2b06      	cmp	r3, #6
   3086a:	ddb3      	ble.n	307d4 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   3086c:	46bd      	mov	sp, r7
   3086e:	b008      	add	sp, #32
   30870:	bd80      	pop	{r7, pc}
   30872:	46c0      	nop			; (mov r8, r8)
   30874:	20004550 	.word	0x20004550
   30878:	0003439b 	.word	0x0003439b
   3087c:	00030c5d 	.word	0x00030c5d
   30880:	00025181 	.word	0x00025181

00030884 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30884:	b580      	push	{r7, lr}
   30886:	b086      	sub	sp, #24
   30888:	af00      	add	r7, sp, #0
   3088a:	60f8      	str	r0, [r7, #12]
   3088c:	60b9      	str	r1, [r7, #8]
   3088e:	607a      	str	r2, [r7, #4]
   30890:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   30892:	687b      	ldr	r3, [r7, #4]
   30894:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30896:	697b      	ldr	r3, [r7, #20]
   30898:	2b00      	cmp	r3, #0
   3089a:	d007      	beq.n	308ac <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   3089c:	233e      	movs	r3, #62	; 0x3e
   3089e:	425a      	negs	r2, r3
   308a0:	697b      	ldr	r3, [r7, #20]
   308a2:	0011      	movs	r1, r2
   308a4:	0018      	movs	r0, r3
   308a6:	4b03      	ldr	r3, [pc, #12]	; (308b4 <http_client_timer_callback+0x30>)
   308a8:	4798      	blx	r3
   308aa:	e000      	b.n	308ae <http_client_timer_callback+0x2a>
		return;
   308ac:	46c0      	nop			; (mov r8, r8)
}
   308ae:	46bd      	mov	sp, r7
   308b0:	b006      	add	sp, #24
   308b2:	bd80      	pop	{r7, pc}
   308b4:	00030c5d 	.word	0x00030c5d

000308b8 <_is_ip>:

static int _is_ip(const char *host)
{
   308b8:	b580      	push	{r7, lr}
   308ba:	b084      	sub	sp, #16
   308bc:	af00      	add	r7, sp, #0
   308be:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   308c0:	2300      	movs	r3, #0
   308c2:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   308c4:	e03a      	b.n	3093c <_is_ip+0x84>
		ch = *host++;
   308c6:	687b      	ldr	r3, [r7, #4]
   308c8:	1c5a      	adds	r2, r3, #1
   308ca:	607a      	str	r2, [r7, #4]
   308cc:	220b      	movs	r2, #11
   308ce:	18ba      	adds	r2, r7, r2
   308d0:	781b      	ldrb	r3, [r3, #0]
   308d2:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   308d4:	230b      	movs	r3, #11
   308d6:	18fb      	adds	r3, r7, r3
   308d8:	781b      	ldrb	r3, [r3, #0]
   308da:	2b60      	cmp	r3, #96	; 0x60
   308dc:	d904      	bls.n	308e8 <_is_ip+0x30>
   308de:	230b      	movs	r3, #11
   308e0:	18fb      	adds	r3, r7, r3
   308e2:	781b      	ldrb	r3, [r3, #0]
   308e4:	2b66      	cmp	r3, #102	; 0x66
   308e6:	d913      	bls.n	30910 <_is_ip+0x58>
   308e8:	230b      	movs	r3, #11
   308ea:	18fb      	adds	r3, r7, r3
   308ec:	781b      	ldrb	r3, [r3, #0]
   308ee:	2b40      	cmp	r3, #64	; 0x40
   308f0:	d904      	bls.n	308fc <_is_ip+0x44>
   308f2:	230b      	movs	r3, #11
   308f4:	18fb      	adds	r3, r7, r3
   308f6:	781b      	ldrb	r3, [r3, #0]
   308f8:	2b46      	cmp	r3, #70	; 0x46
   308fa:	d909      	bls.n	30910 <_is_ip+0x58>
   308fc:	230b      	movs	r3, #11
   308fe:	18fb      	adds	r3, r7, r3
   30900:	781b      	ldrb	r3, [r3, #0]
   30902:	2b3a      	cmp	r3, #58	; 0x3a
   30904:	d004      	beq.n	30910 <_is_ip+0x58>
   30906:	230b      	movs	r3, #11
   30908:	18fb      	adds	r3, r7, r3
   3090a:	781b      	ldrb	r3, [r3, #0]
   3090c:	2b2f      	cmp	r3, #47	; 0x2f
   3090e:	d102      	bne.n	30916 <_is_ip+0x5e>
			isv6 = 1;
   30910:	2301      	movs	r3, #1
   30912:	60fb      	str	r3, [r7, #12]
   30914:	e012      	b.n	3093c <_is_ip+0x84>
		} else if (ch == '.') {
   30916:	230b      	movs	r3, #11
   30918:	18fb      	adds	r3, r7, r3
   3091a:	781b      	ldrb	r3, [r3, #0]
   3091c:	2b2e      	cmp	r3, #46	; 0x2e
   3091e:	d104      	bne.n	3092a <_is_ip+0x72>
			if (isv6) {
   30920:	68fb      	ldr	r3, [r7, #12]
   30922:	2b00      	cmp	r3, #0
   30924:	d00a      	beq.n	3093c <_is_ip+0x84>
				return 0;
   30926:	2300      	movs	r3, #0
   30928:	e00d      	b.n	30946 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   3092a:	230b      	movs	r3, #11
   3092c:	18fb      	adds	r3, r7, r3
   3092e:	781b      	ldrb	r3, [r3, #0]
   30930:	2230      	movs	r2, #48	; 0x30
   30932:	4013      	ands	r3, r2
   30934:	2b30      	cmp	r3, #48	; 0x30
   30936:	d001      	beq.n	3093c <_is_ip+0x84>
			return 0;
   30938:	2300      	movs	r3, #0
   3093a:	e004      	b.n	30946 <_is_ip+0x8e>
	while (*host != '\0') {
   3093c:	687b      	ldr	r3, [r7, #4]
   3093e:	781b      	ldrb	r3, [r3, #0]
   30940:	2b00      	cmp	r3, #0
   30942:	d1c0      	bne.n	308c6 <_is_ip+0xe>
		}
	}
	return 1;
   30944:	2301      	movs	r3, #1
}
   30946:	0018      	movs	r0, r3
   30948:	46bd      	mov	sp, r7
   3094a:	b004      	add	sp, #16
   3094c:	bd80      	pop	{r7, pc}
	...

00030950 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30950:	b5b0      	push	{r4, r5, r7, lr}
   30952:	b08e      	sub	sp, #56	; 0x38
   30954:	af00      	add	r7, sp, #0
   30956:	60f8      	str	r0, [r7, #12]
   30958:	60b9      	str	r1, [r7, #8]
   3095a:	603b      	str	r3, [r7, #0]
   3095c:	1dfb      	adds	r3, r7, #7
   3095e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   30960:	2337      	movs	r3, #55	; 0x37
   30962:	18fb      	adds	r3, r7, r3
   30964:	2200      	movs	r2, #0
   30966:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30968:	2300      	movs	r3, #0
   3096a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   3096c:	2300      	movs	r3, #0
   3096e:	633b      	str	r3, [r7, #48]	; 0x30
   30970:	2300      	movs	r3, #0
   30972:	62fb      	str	r3, [r7, #44]	; 0x2c
   30974:	2300      	movs	r3, #0
   30976:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30978:	68fb      	ldr	r3, [r7, #12]
   3097a:	2b00      	cmp	r3, #0
   3097c:	d102      	bne.n	30984 <http_client_send_request+0x34>
		return -EINVAL;
   3097e:	2316      	movs	r3, #22
   30980:	425b      	negs	r3, r3
   30982:	e145      	b.n	30c10 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30984:	68fb      	ldr	r3, [r7, #12]
   30986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30988:	2b02      	cmp	r3, #2
   3098a:	d902      	bls.n	30992 <http_client_send_request+0x42>
		return -EBUSY;
   3098c:	2310      	movs	r3, #16
   3098e:	425b      	negs	r3, r3
   30990:	e13e      	b.n	30c10 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   30992:	49a1      	ldr	r1, [pc, #644]	; (30c18 <http_client_send_request+0x2c8>)
   30994:	68bb      	ldr	r3, [r7, #8]
   30996:	2207      	movs	r2, #7
   30998:	0018      	movs	r0, r3
   3099a:	4ba0      	ldr	r3, [pc, #640]	; (30c1c <http_client_send_request+0x2cc>)
   3099c:	4798      	blx	r3
   3099e:	1e03      	subs	r3, r0, #0
   309a0:	d102      	bne.n	309a8 <http_client_send_request+0x58>
		i = 7;
   309a2:	2307      	movs	r3, #7
   309a4:	633b      	str	r3, [r7, #48]	; 0x30
   309a6:	e009      	b.n	309bc <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   309a8:	499d      	ldr	r1, [pc, #628]	; (30c20 <http_client_send_request+0x2d0>)
   309aa:	68bb      	ldr	r3, [r7, #8]
   309ac:	2208      	movs	r2, #8
   309ae:	0018      	movs	r0, r3
   309b0:	4b9a      	ldr	r3, [pc, #616]	; (30c1c <http_client_send_request+0x2cc>)
   309b2:	4798      	blx	r3
   309b4:	1e03      	subs	r3, r0, #0
   309b6:	d101      	bne.n	309bc <http_client_send_request+0x6c>
		i = 8;
   309b8:	2308      	movs	r3, #8
   309ba:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   309bc:	68fb      	ldr	r3, [r7, #12]
   309be:	1c5c      	adds	r4, r3, #1
   309c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309c2:	68ba      	ldr	r2, [r7, #8]
   309c4:	18d5      	adds	r5, r2, r3
   309c6:	68fb      	ldr	r3, [r7, #12]
   309c8:	3301      	adds	r3, #1
   309ca:	0018      	movs	r0, r3
   309cc:	4b95      	ldr	r3, [pc, #596]	; (30c24 <http_client_send_request+0x2d4>)
   309ce:	4798      	blx	r3
   309d0:	0003      	movs	r3, r0
   309d2:	001a      	movs	r2, r3
   309d4:	0029      	movs	r1, r5
   309d6:	0020      	movs	r0, r4
   309d8:	4b90      	ldr	r3, [pc, #576]	; (30c1c <http_client_send_request+0x2cc>)
   309da:	4798      	blx	r3
   309dc:	0003      	movs	r3, r0
   309de:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   309e0:	e00d      	b.n	309fe <http_client_send_request+0xae>
		module->host[j++] = url[i];
   309e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   309e4:	1c5a      	adds	r2, r3, #1
   309e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   309e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   309ea:	68b9      	ldr	r1, [r7, #8]
   309ec:	188a      	adds	r2, r1, r2
   309ee:	7811      	ldrb	r1, [r2, #0]
   309f0:	68fa      	ldr	r2, [r7, #12]
   309f2:	18d3      	adds	r3, r2, r3
   309f4:	1c0a      	adds	r2, r1, #0
   309f6:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   309f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309fa:	3301      	adds	r3, #1
   309fc:	633b      	str	r3, [r7, #48]	; 0x30
   309fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30a00:	68ba      	ldr	r2, [r7, #8]
   30a02:	18d3      	adds	r3, r2, r3
   30a04:	781b      	ldrb	r3, [r3, #0]
   30a06:	2b00      	cmp	r3, #0
   30a08:	d005      	beq.n	30a16 <http_client_send_request+0xc6>
   30a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30a0c:	68ba      	ldr	r2, [r7, #8]
   30a0e:	18d3      	adds	r3, r2, r3
   30a10:	781b      	ldrb	r3, [r3, #0]
   30a12:	2b2f      	cmp	r3, #47	; 0x2f
   30a14:	d1e5      	bne.n	309e2 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30a16:	68fa      	ldr	r2, [r7, #12]
   30a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30a1a:	18d3      	adds	r3, r2, r3
   30a1c:	3301      	adds	r3, #1
   30a1e:	2200      	movs	r2, #0
   30a20:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30a24:	68ba      	ldr	r2, [r7, #8]
   30a26:	18d3      	adds	r3, r2, r3
   30a28:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   30a2a:	68fb      	ldr	r3, [r7, #12]
   30a2c:	3301      	adds	r3, #1
   30a2e:	781b      	ldrb	r3, [r3, #0]
   30a30:	2b00      	cmp	r3, #0
   30a32:	d102      	bne.n	30a3a <http_client_send_request+0xea>
		return -EINVAL;
   30a34:	2316      	movs	r3, #22
   30a36:	425b      	negs	r3, r3
   30a38:	e0ea      	b.n	30c10 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   30a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30a3c:	0018      	movs	r0, r3
   30a3e:	4b79      	ldr	r3, [pc, #484]	; (30c24 <http_client_send_request+0x2d4>)
   30a40:	4798      	blx	r3
   30a42:	0003      	movs	r3, r0
   30a44:	2b3f      	cmp	r3, #63	; 0x3f
   30a46:	d902      	bls.n	30a4e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30a48:	235b      	movs	r3, #91	; 0x5b
   30a4a:	425b      	negs	r3, r3
   30a4c:	e0e0      	b.n	30c10 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   30a4e:	68fb      	ldr	r3, [r7, #12]
   30a50:	22d4      	movs	r2, #212	; 0xd4
   30a52:	589b      	ldr	r3, [r3, r2]
   30a54:	2b00      	cmp	r3, #0
   30a56:	d005      	beq.n	30a64 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30a58:	68fb      	ldr	r3, [r7, #12]
   30a5a:	22d4      	movs	r2, #212	; 0xd4
   30a5c:	589b      	ldr	r3, [r3, r2]
   30a5e:	0018      	movs	r0, r3
   30a60:	4b71      	ldr	r3, [pc, #452]	; (30c28 <http_client_send_request+0x2d8>)
   30a62:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30a66:	2b00      	cmp	r3, #0
   30a68:	d010      	beq.n	30a8c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   30a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30a6c:	0018      	movs	r0, r3
   30a6e:	4b6f      	ldr	r3, [pc, #444]	; (30c2c <http_client_send_request+0x2dc>)
   30a70:	4798      	blx	r3
   30a72:	0003      	movs	r3, r0
   30a74:	0019      	movs	r1, r3
   30a76:	68fb      	ldr	r3, [r7, #12]
   30a78:	22d4      	movs	r2, #212	; 0xd4
   30a7a:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   30a7c:	68fb      	ldr	r3, [r7, #12]
   30a7e:	22d4      	movs	r2, #212	; 0xd4
   30a80:	589b      	ldr	r3, [r3, r2]
   30a82:	2b00      	cmp	r3, #0
   30a84:	d106      	bne.n	30a94 <http_client_send_request+0x144>
			return -ENOMEM;
   30a86:	230c      	movs	r3, #12
   30a88:	425b      	negs	r3, r3
   30a8a:	e0c1      	b.n	30c10 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   30a8c:	68fb      	ldr	r3, [r7, #12]
   30a8e:	22d4      	movs	r2, #212	; 0xd4
   30a90:	2100      	movs	r1, #0
   30a92:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30a94:	68fb      	ldr	r3, [r7, #12]
   30a96:	2241      	movs	r2, #65	; 0x41
   30a98:	5c99      	ldrb	r1, [r3, r2]
   30a9a:	2001      	movs	r0, #1
   30a9c:	4381      	bics	r1, r0
   30a9e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30aa0:	68fb      	ldr	r3, [r7, #12]
   30aa2:	2200      	movs	r2, #0
   30aa4:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30aa8:	781b      	ldrb	r3, [r3, #0]
   30aaa:	2b2f      	cmp	r3, #47	; 0x2f
   30aac:	d107      	bne.n	30abe <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   30aae:	68fb      	ldr	r3, [r7, #12]
   30ab0:	3370      	adds	r3, #112	; 0x70
   30ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30ab4:	0011      	movs	r1, r2
   30ab6:	0018      	movs	r0, r3
   30ab8:	4b5d      	ldr	r3, [pc, #372]	; (30c30 <http_client_send_request+0x2e0>)
   30aba:	4798      	blx	r3
   30abc:	e00f      	b.n	30ade <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   30abe:	68fb      	ldr	r3, [r7, #12]
   30ac0:	2270      	movs	r2, #112	; 0x70
   30ac2:	212f      	movs	r1, #47	; 0x2f
   30ac4:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30ac8:	781b      	ldrb	r3, [r3, #0]
   30aca:	2b00      	cmp	r3, #0
   30acc:	d007      	beq.n	30ade <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   30ace:	68fb      	ldr	r3, [r7, #12]
   30ad0:	3370      	adds	r3, #112	; 0x70
   30ad2:	3301      	adds	r3, #1
   30ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30ad6:	0011      	movs	r1, r2
   30ad8:	0018      	movs	r0, r3
   30ada:	4b55      	ldr	r3, [pc, #340]	; (30c30 <http_client_send_request+0x2e0>)
   30adc:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   30ade:	683b      	ldr	r3, [r7, #0]
   30ae0:	2b00      	cmp	r3, #0
   30ae2:	d007      	beq.n	30af4 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30ae4:	68fb      	ldr	r3, [r7, #12]
   30ae6:	33b0      	adds	r3, #176	; 0xb0
   30ae8:	6839      	ldr	r1, [r7, #0]
   30aea:	2218      	movs	r2, #24
   30aec:	0018      	movs	r0, r3
   30aee:	4b51      	ldr	r3, [pc, #324]	; (30c34 <http_client_send_request+0x2e4>)
   30af0:	4798      	blx	r3
   30af2:	e006      	b.n	30b02 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30af4:	68fb      	ldr	r3, [r7, #12]
   30af6:	33b0      	adds	r3, #176	; 0xb0
   30af8:	2218      	movs	r2, #24
   30afa:	2100      	movs	r1, #0
   30afc:	0018      	movs	r0, r3
   30afe:	4b4e      	ldr	r3, [pc, #312]	; (30c38 <http_client_send_request+0x2e8>)
   30b00:	4798      	blx	r3
	}

	module->req.method = method;
   30b02:	68fb      	ldr	r3, [r7, #12]
   30b04:	1dfa      	adds	r2, r7, #7
   30b06:	21c8      	movs	r1, #200	; 0xc8
   30b08:	7812      	ldrb	r2, [r2, #0]
   30b0a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   30b0c:	68fb      	ldr	r3, [r7, #12]
   30b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30b10:	2b01      	cmp	r3, #1
   30b12:	d003      	beq.n	30b1c <http_client_send_request+0x1cc>
   30b14:	d316      	bcc.n	30b44 <http_client_send_request+0x1f4>
   30b16:	2b02      	cmp	r3, #2
   30b18:	d004      	beq.n	30b24 <http_client_send_request+0x1d4>
   30b1a:	e074      	b.n	30c06 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   30b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b1e:	2b00      	cmp	r3, #0
   30b20:	d100      	bne.n	30b24 <http_client_send_request+0x1d4>
   30b22:	e073      	b.n	30c0c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b26:	2b00      	cmp	r3, #0
   30b28:	d107      	bne.n	30b3a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30b2a:	68fb      	ldr	r3, [r7, #12]
   30b2c:	2203      	movs	r2, #3
   30b2e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30b30:	68fb      	ldr	r3, [r7, #12]
   30b32:	0018      	movs	r0, r3
   30b34:	4b41      	ldr	r3, [pc, #260]	; (30c3c <http_client_send_request+0x2ec>)
   30b36:	4798      	blx	r3
			break;
   30b38:	e069      	b.n	30c0e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30b3a:	68fb      	ldr	r3, [r7, #12]
   30b3c:	2100      	movs	r1, #0
   30b3e:	0018      	movs	r0, r3
   30b40:	4b3f      	ldr	r3, [pc, #252]	; (30c40 <http_client_send_request+0x2f0>)
   30b42:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30b44:	68fb      	ldr	r3, [r7, #12]
   30b46:	2252      	movs	r2, #82	; 0x52
   30b48:	5c9b      	ldrb	r3, [r3, r2]
   30b4a:	2b00      	cmp	r3, #0
   30b4c:	d007      	beq.n	30b5e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   30b4e:	2337      	movs	r3, #55	; 0x37
   30b50:	18fb      	adds	r3, r7, r3
   30b52:	2237      	movs	r2, #55	; 0x37
   30b54:	18ba      	adds	r2, r7, r2
   30b56:	7812      	ldrb	r2, [r2, #0]
   30b58:	2101      	movs	r1, #1
   30b5a:	430a      	orrs	r2, r1
   30b5c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   30b5e:	2337      	movs	r3, #55	; 0x37
   30b60:	18fb      	adds	r3, r7, r3
   30b62:	781b      	ldrb	r3, [r3, #0]
   30b64:	001a      	movs	r2, r3
   30b66:	2101      	movs	r1, #1
   30b68:	2002      	movs	r0, #2
   30b6a:	4b36      	ldr	r3, [pc, #216]	; (30c44 <http_client_send_request+0x2f4>)
   30b6c:	4798      	blx	r3
   30b6e:	0003      	movs	r3, r0
   30b70:	001a      	movs	r2, r3
   30b72:	68fb      	ldr	r3, [r7, #12]
   30b74:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30b76:	68fb      	ldr	r3, [r7, #12]
   30b78:	781b      	ldrb	r3, [r3, #0]
   30b7a:	b25b      	sxtb	r3, r3
   30b7c:	2b00      	cmp	r3, #0
   30b7e:	db3f      	blt.n	30c00 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   30b80:	68fb      	ldr	r3, [r7, #12]
   30b82:	781b      	ldrb	r3, [r3, #0]
   30b84:	b25b      	sxtb	r3, r3
   30b86:	001a      	movs	r2, r3
   30b88:	4b2f      	ldr	r3, [pc, #188]	; (30c48 <http_client_send_request+0x2f8>)
   30b8a:	0092      	lsls	r2, r2, #2
   30b8c:	68f9      	ldr	r1, [r7, #12]
   30b8e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   30b90:	68fb      	ldr	r3, [r7, #12]
   30b92:	3301      	adds	r3, #1
   30b94:	0018      	movs	r0, r3
   30b96:	4b2d      	ldr	r3, [pc, #180]	; (30c4c <http_client_send_request+0x2fc>)
   30b98:	4798      	blx	r3
   30b9a:	1e03      	subs	r3, r0, #0
   30b9c:	d027      	beq.n	30bee <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   30b9e:	2314      	movs	r3, #20
   30ba0:	18fb      	adds	r3, r7, r3
   30ba2:	2202      	movs	r2, #2
   30ba4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30ba6:	68fb      	ldr	r3, [r7, #12]
   30ba8:	2250      	movs	r2, #80	; 0x50
   30baa:	5a9b      	ldrh	r3, [r3, r2]
   30bac:	021b      	lsls	r3, r3, #8
   30bae:	b21a      	sxth	r2, r3
   30bb0:	68fb      	ldr	r3, [r7, #12]
   30bb2:	2150      	movs	r1, #80	; 0x50
   30bb4:	5a5b      	ldrh	r3, [r3, r1]
   30bb6:	0a1b      	lsrs	r3, r3, #8
   30bb8:	b29b      	uxth	r3, r3
   30bba:	b21b      	sxth	r3, r3
   30bbc:	4313      	orrs	r3, r2
   30bbe:	b21b      	sxth	r3, r3
   30bc0:	b29a      	uxth	r2, r3
   30bc2:	2314      	movs	r3, #20
   30bc4:	18fb      	adds	r3, r7, r3
   30bc6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30bc8:	68fb      	ldr	r3, [r7, #12]
   30bca:	3301      	adds	r3, #1
   30bcc:	0018      	movs	r0, r3
   30bce:	4b20      	ldr	r3, [pc, #128]	; (30c50 <http_client_send_request+0x300>)
   30bd0:	4798      	blx	r3
   30bd2:	0002      	movs	r2, r0
   30bd4:	2314      	movs	r3, #20
   30bd6:	18fb      	adds	r3, r7, r3
   30bd8:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30bda:	68fb      	ldr	r3, [r7, #12]
   30bdc:	781b      	ldrb	r3, [r3, #0]
   30bde:	b25b      	sxtb	r3, r3
   30be0:	2214      	movs	r2, #20
   30be2:	18b9      	adds	r1, r7, r2
   30be4:	2210      	movs	r2, #16
   30be6:	0018      	movs	r0, r3
   30be8:	4b1a      	ldr	r3, [pc, #104]	; (30c54 <http_client_send_request+0x304>)
   30bea:	4798      	blx	r3
   30bec:	e004      	b.n	30bf8 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   30bee:	68fb      	ldr	r3, [r7, #12]
   30bf0:	3301      	adds	r3, #1
   30bf2:	0018      	movs	r0, r3
   30bf4:	4b18      	ldr	r3, [pc, #96]	; (30c58 <http_client_send_request+0x308>)
   30bf6:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30bf8:	68fb      	ldr	r3, [r7, #12]
   30bfa:	2201      	movs	r2, #1
   30bfc:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   30bfe:	e006      	b.n	30c0e <http_client_send_request+0x2be>
			return -ENOSPC;
   30c00:	231c      	movs	r3, #28
   30c02:	425b      	negs	r3, r3
   30c04:	e004      	b.n	30c10 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30c06:	230b      	movs	r3, #11
   30c08:	425b      	negs	r3, r3
   30c0a:	e001      	b.n	30c10 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   30c0c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   30c0e:	2300      	movs	r3, #0
}
   30c10:	0018      	movs	r0, r3
   30c12:	46bd      	mov	sp, r7
   30c14:	b00e      	add	sp, #56	; 0x38
   30c16:	bdb0      	pop	{r4, r5, r7, pc}
   30c18:	000390cc 	.word	0x000390cc
   30c1c:	00034409 	.word	0x00034409
   30c20:	000390d4 	.word	0x000390d4
   30c24:	000343fb 	.word	0x000343fb
   30c28:	00033ff9 	.word	0x00033ff9
   30c2c:	000343c1 	.word	0x000343c1
   30c30:	000343af 	.word	0x000343af
   30c34:	0003400d 	.word	0x0003400d
   30c38:	00034043 	.word	0x00034043
   30c3c:	00030db1 	.word	0x00030db1
   30c40:	00030c5d 	.word	0x00030c5d
   30c44:	00024f6d 	.word	0x00024f6d
   30c48:	20004550 	.word	0x20004550
   30c4c:	000308b9 	.word	0x000308b9
   30c50:	000256b9 	.word	0x000256b9
   30c54:	00025181 	.word	0x00025181
   30c58:	000257c1 	.word	0x000257c1

00030c5c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   30c5c:	b580      	push	{r7, lr}
   30c5e:	b086      	sub	sp, #24
   30c60:	af00      	add	r7, sp, #0
   30c62:	6078      	str	r0, [r7, #4]
   30c64:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30c66:	687b      	ldr	r3, [r7, #4]
   30c68:	22c0      	movs	r2, #192	; 0xc0
   30c6a:	589b      	ldr	r3, [r3, r2]
   30c6c:	2b00      	cmp	r3, #0
   30c6e:	d007      	beq.n	30c80 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   30c70:	687b      	ldr	r3, [r7, #4]
   30c72:	22c0      	movs	r2, #192	; 0xc0
   30c74:	589b      	ldr	r3, [r3, r2]
   30c76:	687a      	ldr	r2, [r7, #4]
   30c78:	21c4      	movs	r1, #196	; 0xc4
   30c7a:	5852      	ldr	r2, [r2, r1]
   30c7c:	0010      	movs	r0, r2
   30c7e:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   30c80:	687b      	ldr	r3, [r7, #4]
   30c82:	33b0      	adds	r3, #176	; 0xb0
   30c84:	2218      	movs	r2, #24
   30c86:	2100      	movs	r1, #0
   30c88:	0018      	movs	r0, r3
   30c8a:	4b24      	ldr	r3, [pc, #144]	; (30d1c <_http_client_clear_conn+0xc0>)
   30c8c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   30c8e:	687b      	ldr	r3, [r7, #4]
   30c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30c92:	2b00      	cmp	r3, #0
   30c94:	d005      	beq.n	30ca2 <_http_client_clear_conn+0x46>
		close(module->sock);
   30c96:	687b      	ldr	r3, [r7, #4]
   30c98:	781b      	ldrb	r3, [r3, #0]
   30c9a:	b25b      	sxtb	r3, r3
   30c9c:	0018      	movs	r0, r3
   30c9e:	4b20      	ldr	r3, [pc, #128]	; (30d20 <_http_client_clear_conn+0xc4>)
   30ca0:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30ca2:	687b      	ldr	r3, [r7, #4]
   30ca4:	781b      	ldrb	r3, [r3, #0]
   30ca6:	b25b      	sxtb	r3, r3
   30ca8:	001a      	movs	r2, r3
   30caa:	4b1e      	ldr	r3, [pc, #120]	; (30d24 <_http_client_clear_conn+0xc8>)
   30cac:	0092      	lsls	r2, r2, #2
   30cae:	2100      	movs	r1, #0
   30cb0:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30cb2:	687b      	ldr	r3, [r7, #4]
   30cb4:	336c      	adds	r3, #108	; 0x6c
   30cb6:	226c      	movs	r2, #108	; 0x6c
   30cb8:	2100      	movs	r1, #0
   30cba:	0018      	movs	r0, r3
   30cbc:	4b17      	ldr	r3, [pc, #92]	; (30d1c <_http_client_clear_conn+0xc0>)
   30cbe:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30cc0:	687b      	ldr	r3, [r7, #4]
   30cc2:	33d8      	adds	r3, #216	; 0xd8
   30cc4:	2210      	movs	r2, #16
   30cc6:	2100      	movs	r1, #0
   30cc8:	0018      	movs	r0, r3
   30cca:	4b14      	ldr	r3, [pc, #80]	; (30d1c <_http_client_clear_conn+0xc0>)
   30ccc:	4798      	blx	r3
	module->req.state = STATE_INIT;
   30cce:	687b      	ldr	r3, [r7, #4]
   30cd0:	2200      	movs	r2, #0
   30cd2:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30cd4:	687b      	ldr	r3, [r7, #4]
   30cd6:	22d8      	movs	r2, #216	; 0xd8
   30cd8:	2100      	movs	r1, #0
   30cda:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   30cdc:	687b      	ldr	r3, [r7, #4]
   30cde:	2241      	movs	r2, #65	; 0x41
   30ce0:	5c99      	ldrb	r1, [r3, r2]
   30ce2:	2001      	movs	r0, #1
   30ce4:	4381      	bics	r1, r0
   30ce6:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30ce8:	687b      	ldr	r3, [r7, #4]
   30cea:	2241      	movs	r2, #65	; 0x41
   30cec:	5c99      	ldrb	r1, [r3, r2]
   30cee:	2002      	movs	r0, #2
   30cf0:	4381      	bics	r1, r0
   30cf2:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30cf4:	230c      	movs	r3, #12
   30cf6:	18fb      	adds	r3, r7, r3
   30cf8:	683a      	ldr	r2, [r7, #0]
   30cfa:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   30cfc:	687b      	ldr	r3, [r7, #4]
   30cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d00:	2b00      	cmp	r3, #0
   30d02:	d006      	beq.n	30d12 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30d04:	687b      	ldr	r3, [r7, #4]
   30d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d08:	220c      	movs	r2, #12
   30d0a:	18ba      	adds	r2, r7, r2
   30d0c:	6878      	ldr	r0, [r7, #4]
   30d0e:	2104      	movs	r1, #4
   30d10:	4798      	blx	r3
	}
}
   30d12:	46c0      	nop			; (mov r8, r8)
   30d14:	46bd      	mov	sp, r7
   30d16:	b006      	add	sp, #24
   30d18:	bd80      	pop	{r7, pc}
   30d1a:	46c0      	nop			; (mov r8, r8)
   30d1c:	00034043 	.word	0x00034043
   30d20:	00025579 	.word	0x00025579
   30d24:	20004550 	.word	0x20004550

00030d28 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30d28:	b590      	push	{r4, r7, lr}
   30d2a:	b087      	sub	sp, #28
   30d2c:	af00      	add	r7, sp, #0
   30d2e:	60f8      	str	r0, [r7, #12]
   30d30:	60b9      	str	r1, [r7, #8]
   30d32:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30d34:	68fb      	ldr	r3, [r7, #12]
   30d36:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30d38:	697b      	ldr	r3, [r7, #20]
   30d3a:	2241      	movs	r2, #65	; 0x41
   30d3c:	5c99      	ldrb	r1, [r3, r2]
   30d3e:	2001      	movs	r0, #1
   30d40:	4301      	orrs	r1, r0
   30d42:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30d44:	697b      	ldr	r3, [r7, #20]
   30d46:	2000      	movs	r0, #0
   30d48:	5618      	ldrsb	r0, [r3, r0]
   30d4a:	687b      	ldr	r3, [r7, #4]
   30d4c:	b29a      	uxth	r2, r3
   30d4e:	68b9      	ldr	r1, [r7, #8]
   30d50:	2300      	movs	r3, #0
   30d52:	4c14      	ldr	r4, [pc, #80]	; (30da4 <_http_client_send_wait+0x7c>)
   30d54:	47a0      	blx	r4
   30d56:	0003      	movs	r3, r0
   30d58:	613b      	str	r3, [r7, #16]
   30d5a:	693b      	ldr	r3, [r7, #16]
   30d5c:	2b00      	cmp	r3, #0
   30d5e:	da0f      	bge.n	30d80 <_http_client_send_wait+0x58>
		module->sending = 0;
   30d60:	697b      	ldr	r3, [r7, #20]
   30d62:	2241      	movs	r2, #65	; 0x41
   30d64:	5c99      	ldrb	r1, [r3, r2]
   30d66:	2001      	movs	r0, #1
   30d68:	4381      	bics	r1, r0
   30d6a:	5499      	strb	r1, [r3, r2]
		return result;
   30d6c:	693b      	ldr	r3, [r7, #16]
   30d6e:	e014      	b.n	30d9a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   30d70:	2000      	movs	r0, #0
   30d72:	4b0d      	ldr	r3, [pc, #52]	; (30da8 <_http_client_send_wait+0x80>)
   30d74:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   30d76:	697b      	ldr	r3, [r7, #20]
   30d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30d7a:	0018      	movs	r0, r3
   30d7c:	4b0b      	ldr	r3, [pc, #44]	; (30dac <_http_client_send_wait+0x84>)
   30d7e:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   30d80:	697b      	ldr	r3, [r7, #20]
   30d82:	2241      	movs	r2, #65	; 0x41
   30d84:	5c9b      	ldrb	r3, [r3, r2]
   30d86:	2201      	movs	r2, #1
   30d88:	4013      	ands	r3, r2
   30d8a:	b2db      	uxtb	r3, r3
   30d8c:	2b00      	cmp	r3, #0
   30d8e:	d003      	beq.n	30d98 <_http_client_send_wait+0x70>
   30d90:	697b      	ldr	r3, [r7, #20]
   30d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30d94:	2b02      	cmp	r3, #2
   30d96:	d8eb      	bhi.n	30d70 <_http_client_send_wait+0x48>
	}

	return 0;
   30d98:	2300      	movs	r3, #0
}
   30d9a:	0018      	movs	r0, r3
   30d9c:	46bd      	mov	sp, r7
   30d9e:	b007      	add	sp, #28
   30da0:	bd90      	pop	{r4, r7, pc}
   30da2:	46c0      	nop			; (mov r8, r8)
   30da4:	00025295 	.word	0x00025295
   30da8:	00021941 	.word	0x00021941
   30dac:	00032035 	.word	0x00032035

00030db0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   30db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   30db2:	46c6      	mov	lr, r8
   30db4:	b500      	push	{lr}
   30db6:	b0a0      	sub	sp, #128	; 0x80
   30db8:	af02      	add	r7, sp, #8
   30dba:	61f8      	str	r0, [r7, #28]
   30dbc:	4668      	mov	r0, sp
   30dbe:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   30dc0:	2318      	movs	r3, #24
   30dc2:	2218      	movs	r2, #24
   30dc4:	18ba      	adds	r2, r7, r2
   30dc6:	18d0      	adds	r0, r2, r3
   30dc8:	4bbd      	ldr	r3, [pc, #756]	; (310c0 <_http_client_request+0x310>)
   30dca:	469c      	mov	ip, r3
   30dcc:	4663      	mov	r3, ip
   30dce:	cb16      	ldmia	r3!, {r1, r2, r4}
   30dd0:	c016      	stmia	r0!, {r1, r2, r4}
   30dd2:	469c      	mov	ip, r3
   30dd4:	4663      	mov	r3, ip
   30dd6:	681b      	ldr	r3, [r3, #0]
   30dd8:	469c      	mov	ip, r3
   30dda:	4663      	mov	r3, ip
   30ddc:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   30dde:	69f8      	ldr	r0, [r7, #28]
   30de0:	6e40      	ldr	r0, [r0, #100]	; 0x64
   30de2:	4684      	mov	ip, r0
   30de4:	2301      	movs	r3, #1
   30de6:	425b      	negs	r3, r3
   30de8:	4698      	mov	r8, r3
   30dea:	44c4      	add	ip, r8
   30dec:	4663      	mov	r3, ip
   30dee:	66fb      	str	r3, [r7, #108]	; 0x6c
   30df0:	6038      	str	r0, [r7, #0]
   30df2:	2300      	movs	r3, #0
   30df4:	607b      	str	r3, [r7, #4]
   30df6:	6839      	ldr	r1, [r7, #0]
   30df8:	687a      	ldr	r2, [r7, #4]
   30dfa:	000b      	movs	r3, r1
   30dfc:	0f5b      	lsrs	r3, r3, #29
   30dfe:	469c      	mov	ip, r3
   30e00:	0013      	movs	r3, r2
   30e02:	00db      	lsls	r3, r3, #3
   30e04:	617b      	str	r3, [r7, #20]
   30e06:	4663      	mov	r3, ip
   30e08:	697c      	ldr	r4, [r7, #20]
   30e0a:	431c      	orrs	r4, r3
   30e0c:	617c      	str	r4, [r7, #20]
   30e0e:	000b      	movs	r3, r1
   30e10:	00db      	lsls	r3, r3, #3
   30e12:	613b      	str	r3, [r7, #16]
   30e14:	0005      	movs	r5, r0
   30e16:	2200      	movs	r2, #0
   30e18:	0016      	movs	r6, r2
   30e1a:	0f6a      	lsrs	r2, r5, #29
   30e1c:	00f3      	lsls	r3, r6, #3
   30e1e:	60fb      	str	r3, [r7, #12]
   30e20:	68fb      	ldr	r3, [r7, #12]
   30e22:	4313      	orrs	r3, r2
   30e24:	60fb      	str	r3, [r7, #12]
   30e26:	00eb      	lsls	r3, r5, #3
   30e28:	60bb      	str	r3, [r7, #8]
   30e2a:	1dc3      	adds	r3, r0, #7
   30e2c:	08db      	lsrs	r3, r3, #3
   30e2e:	00db      	lsls	r3, r3, #3
   30e30:	466a      	mov	r2, sp
   30e32:	1ad3      	subs	r3, r2, r3
   30e34:	469d      	mov	sp, r3
   30e36:	ab02      	add	r3, sp, #8
   30e38:	3300      	adds	r3, #0
   30e3a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   30e3c:	69fb      	ldr	r3, [r7, #28]
   30e3e:	2b00      	cmp	r3, #0
   30e40:	d100      	bne.n	30e44 <_http_client_request+0x94>
   30e42:	e346      	b.n	314d2 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30e44:	69fb      	ldr	r3, [r7, #28]
   30e46:	2241      	movs	r2, #65	; 0x41
   30e48:	5c9b      	ldrb	r3, [r3, r2]
   30e4a:	2201      	movs	r2, #1
   30e4c:	4013      	ands	r3, r2
   30e4e:	b2db      	uxtb	r3, r3
   30e50:	2b00      	cmp	r3, #0
   30e52:	d000      	beq.n	30e56 <_http_client_request+0xa6>
   30e54:	e33f      	b.n	314d6 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30e56:	69fb      	ldr	r3, [r7, #28]
   30e58:	33b0      	adds	r3, #176	; 0xb0
   30e5a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   30e5c:	69fb      	ldr	r3, [r7, #28]
   30e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30e60:	2b03      	cmp	r3, #3
   30e62:	d003      	beq.n	30e6c <_http_client_request+0xbc>
   30e64:	2b04      	cmp	r3, #4
   30e66:	d100      	bne.n	30e6a <_http_client_request+0xba>
   30e68:	e1b3      	b.n	311d2 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   30e6a:	e32f      	b.n	314cc <_http_client_request+0x71c>
		module->req.content_length = 0;
   30e6c:	69fb      	ldr	r3, [r7, #28]
   30e6e:	22cc      	movs	r2, #204	; 0xcc
   30e70:	2100      	movs	r1, #0
   30e72:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   30e74:	69fb      	ldr	r3, [r7, #28]
   30e76:	22d0      	movs	r2, #208	; 0xd0
   30e78:	2100      	movs	r1, #0
   30e7a:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   30e7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30e7e:	69fb      	ldr	r3, [r7, #28]
   30e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   30e82:	4c90      	ldr	r4, [pc, #576]	; (310c4 <_http_client_request+0x314>)
   30e84:	2334      	movs	r3, #52	; 0x34
   30e86:	2018      	movs	r0, #24
   30e88:	1838      	adds	r0, r7, r0
   30e8a:	18c0      	adds	r0, r0, r3
   30e8c:	69fb      	ldr	r3, [r7, #28]
   30e8e:	9300      	str	r3, [sp, #0]
   30e90:	0023      	movs	r3, r4
   30e92:	4c8d      	ldr	r4, [pc, #564]	; (310c8 <_http_client_request+0x318>)
   30e94:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   30e96:	69fb      	ldr	r3, [r7, #28]
   30e98:	22c8      	movs	r2, #200	; 0xc8
   30e9a:	5c9b      	ldrb	r3, [r3, r2]
   30e9c:	2b01      	cmp	r3, #1
   30e9e:	d10a      	bne.n	30eb6 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   30ea0:	498a      	ldr	r1, [pc, #552]	; (310cc <_http_client_request+0x31c>)
   30ea2:	2334      	movs	r3, #52	; 0x34
   30ea4:	2218      	movs	r2, #24
   30ea6:	4694      	mov	ip, r2
   30ea8:	44bc      	add	ip, r7
   30eaa:	4463      	add	r3, ip
   30eac:	2204      	movs	r2, #4
   30eae:	0018      	movs	r0, r3
   30eb0:	4b87      	ldr	r3, [pc, #540]	; (310d0 <_http_client_request+0x320>)
   30eb2:	4798      	blx	r3
   30eb4:	e04e      	b.n	30f54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   30eb6:	69fb      	ldr	r3, [r7, #28]
   30eb8:	22c8      	movs	r2, #200	; 0xc8
   30eba:	5c9b      	ldrb	r3, [r3, r2]
   30ebc:	2b02      	cmp	r3, #2
   30ebe:	d10a      	bne.n	30ed6 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   30ec0:	4984      	ldr	r1, [pc, #528]	; (310d4 <_http_client_request+0x324>)
   30ec2:	2334      	movs	r3, #52	; 0x34
   30ec4:	2218      	movs	r2, #24
   30ec6:	4694      	mov	ip, r2
   30ec8:	44bc      	add	ip, r7
   30eca:	4463      	add	r3, ip
   30ecc:	2205      	movs	r2, #5
   30ece:	0018      	movs	r0, r3
   30ed0:	4b7f      	ldr	r3, [pc, #508]	; (310d0 <_http_client_request+0x320>)
   30ed2:	4798      	blx	r3
   30ed4:	e03e      	b.n	30f54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   30ed6:	69fb      	ldr	r3, [r7, #28]
   30ed8:	22c8      	movs	r2, #200	; 0xc8
   30eda:	5c9b      	ldrb	r3, [r3, r2]
   30edc:	2b03      	cmp	r3, #3
   30ede:	d10a      	bne.n	30ef6 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   30ee0:	497d      	ldr	r1, [pc, #500]	; (310d8 <_http_client_request+0x328>)
   30ee2:	2334      	movs	r3, #52	; 0x34
   30ee4:	2218      	movs	r2, #24
   30ee6:	4694      	mov	ip, r2
   30ee8:	44bc      	add	ip, r7
   30eea:	4463      	add	r3, ip
   30eec:	2207      	movs	r2, #7
   30eee:	0018      	movs	r0, r3
   30ef0:	4b77      	ldr	r3, [pc, #476]	; (310d0 <_http_client_request+0x320>)
   30ef2:	4798      	blx	r3
   30ef4:	e02e      	b.n	30f54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   30ef6:	69fb      	ldr	r3, [r7, #28]
   30ef8:	22c8      	movs	r2, #200	; 0xc8
   30efa:	5c9b      	ldrb	r3, [r3, r2]
   30efc:	2b04      	cmp	r3, #4
   30efe:	d10a      	bne.n	30f16 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   30f00:	4976      	ldr	r1, [pc, #472]	; (310dc <_http_client_request+0x32c>)
   30f02:	2334      	movs	r3, #52	; 0x34
   30f04:	2218      	movs	r2, #24
   30f06:	4694      	mov	ip, r2
   30f08:	44bc      	add	ip, r7
   30f0a:	4463      	add	r3, ip
   30f0c:	2204      	movs	r2, #4
   30f0e:	0018      	movs	r0, r3
   30f10:	4b6f      	ldr	r3, [pc, #444]	; (310d0 <_http_client_request+0x320>)
   30f12:	4798      	blx	r3
   30f14:	e01e      	b.n	30f54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   30f16:	69fb      	ldr	r3, [r7, #28]
   30f18:	22c8      	movs	r2, #200	; 0xc8
   30f1a:	5c9b      	ldrb	r3, [r3, r2]
   30f1c:	2b05      	cmp	r3, #5
   30f1e:	d10a      	bne.n	30f36 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   30f20:	496f      	ldr	r1, [pc, #444]	; (310e0 <_http_client_request+0x330>)
   30f22:	2334      	movs	r3, #52	; 0x34
   30f24:	2218      	movs	r2, #24
   30f26:	4694      	mov	ip, r2
   30f28:	44bc      	add	ip, r7
   30f2a:	4463      	add	r3, ip
   30f2c:	2208      	movs	r2, #8
   30f2e:	0018      	movs	r0, r3
   30f30:	4b67      	ldr	r3, [pc, #412]	; (310d0 <_http_client_request+0x320>)
   30f32:	4798      	blx	r3
   30f34:	e00e      	b.n	30f54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30f36:	69fb      	ldr	r3, [r7, #28]
   30f38:	22c8      	movs	r2, #200	; 0xc8
   30f3a:	5c9b      	ldrb	r3, [r3, r2]
   30f3c:	2b06      	cmp	r3, #6
   30f3e:	d109      	bne.n	30f54 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   30f40:	4968      	ldr	r1, [pc, #416]	; (310e4 <_http_client_request+0x334>)
   30f42:	2334      	movs	r3, #52	; 0x34
   30f44:	2218      	movs	r2, #24
   30f46:	4694      	mov	ip, r2
   30f48:	44bc      	add	ip, r7
   30f4a:	4463      	add	r3, ip
   30f4c:	2205      	movs	r2, #5
   30f4e:	0018      	movs	r0, r3
   30f50:	4b5f      	ldr	r3, [pc, #380]	; (310d0 <_http_client_request+0x320>)
   30f52:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30f54:	69fb      	ldr	r3, [r7, #28]
   30f56:	3370      	adds	r3, #112	; 0x70
   30f58:	001c      	movs	r4, r3
   30f5a:	69fb      	ldr	r3, [r7, #28]
   30f5c:	3370      	adds	r3, #112	; 0x70
   30f5e:	0018      	movs	r0, r3
   30f60:	4b61      	ldr	r3, [pc, #388]	; (310e8 <_http_client_request+0x338>)
   30f62:	4798      	blx	r3
   30f64:	0002      	movs	r2, r0
   30f66:	2334      	movs	r3, #52	; 0x34
   30f68:	2118      	movs	r1, #24
   30f6a:	468c      	mov	ip, r1
   30f6c:	44bc      	add	ip, r7
   30f6e:	4463      	add	r3, ip
   30f70:	0021      	movs	r1, r4
   30f72:	0018      	movs	r0, r3
   30f74:	4b56      	ldr	r3, [pc, #344]	; (310d0 <_http_client_request+0x320>)
   30f76:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   30f78:	495c      	ldr	r1, [pc, #368]	; (310ec <_http_client_request+0x33c>)
   30f7a:	2334      	movs	r3, #52	; 0x34
   30f7c:	2218      	movs	r2, #24
   30f7e:	4694      	mov	ip, r2
   30f80:	44bc      	add	ip, r7
   30f82:	4463      	add	r3, ip
   30f84:	220b      	movs	r2, #11
   30f86:	0018      	movs	r0, r3
   30f88:	4b51      	ldr	r3, [pc, #324]	; (310d0 <_http_client_request+0x320>)
   30f8a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   30f8c:	4958      	ldr	r1, [pc, #352]	; (310f0 <_http_client_request+0x340>)
   30f8e:	2334      	movs	r3, #52	; 0x34
   30f90:	2218      	movs	r2, #24
   30f92:	4694      	mov	ip, r2
   30f94:	44bc      	add	ip, r7
   30f96:	4463      	add	r3, ip
   30f98:	220c      	movs	r2, #12
   30f9a:	0018      	movs	r0, r3
   30f9c:	4b4c      	ldr	r3, [pc, #304]	; (310d0 <_http_client_request+0x320>)
   30f9e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   30fa0:	69fb      	ldr	r3, [r7, #28]
   30fa2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   30fa4:	69fb      	ldr	r3, [r7, #28]
   30fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   30fa8:	0018      	movs	r0, r3
   30faa:	4b4f      	ldr	r3, [pc, #316]	; (310e8 <_http_client_request+0x338>)
   30fac:	4798      	blx	r3
   30fae:	0002      	movs	r2, r0
   30fb0:	2334      	movs	r3, #52	; 0x34
   30fb2:	2118      	movs	r1, #24
   30fb4:	468c      	mov	ip, r1
   30fb6:	44bc      	add	ip, r7
   30fb8:	4463      	add	r3, ip
   30fba:	0021      	movs	r1, r4
   30fbc:	0018      	movs	r0, r3
   30fbe:	4b44      	ldr	r3, [pc, #272]	; (310d0 <_http_client_request+0x320>)
   30fc0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30fc2:	494c      	ldr	r1, [pc, #304]	; (310f4 <_http_client_request+0x344>)
   30fc4:	2334      	movs	r3, #52	; 0x34
   30fc6:	2218      	movs	r2, #24
   30fc8:	4694      	mov	ip, r2
   30fca:	44bc      	add	ip, r7
   30fcc:	4463      	add	r3, ip
   30fce:	2202      	movs	r2, #2
   30fd0:	0018      	movs	r0, r3
   30fd2:	4b3f      	ldr	r3, [pc, #252]	; (310d0 <_http_client_request+0x320>)
   30fd4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   30fd6:	4948      	ldr	r1, [pc, #288]	; (310f8 <_http_client_request+0x348>)
   30fd8:	2334      	movs	r3, #52	; 0x34
   30fda:	2218      	movs	r2, #24
   30fdc:	4694      	mov	ip, r2
   30fde:	44bc      	add	ip, r7
   30fe0:	4463      	add	r3, ip
   30fe2:	2206      	movs	r2, #6
   30fe4:	0018      	movs	r0, r3
   30fe6:	4b3a      	ldr	r3, [pc, #232]	; (310d0 <_http_client_request+0x320>)
   30fe8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   30fea:	69fb      	ldr	r3, [r7, #28]
   30fec:	1c5c      	adds	r4, r3, #1
   30fee:	69fb      	ldr	r3, [r7, #28]
   30ff0:	3301      	adds	r3, #1
   30ff2:	0018      	movs	r0, r3
   30ff4:	4b3c      	ldr	r3, [pc, #240]	; (310e8 <_http_client_request+0x338>)
   30ff6:	4798      	blx	r3
   30ff8:	0002      	movs	r2, r0
   30ffa:	2334      	movs	r3, #52	; 0x34
   30ffc:	2118      	movs	r1, #24
   30ffe:	468c      	mov	ip, r1
   31000:	44bc      	add	ip, r7
   31002:	4463      	add	r3, ip
   31004:	0021      	movs	r1, r4
   31006:	0018      	movs	r0, r3
   31008:	4b31      	ldr	r3, [pc, #196]	; (310d0 <_http_client_request+0x320>)
   3100a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3100c:	4939      	ldr	r1, [pc, #228]	; (310f4 <_http_client_request+0x344>)
   3100e:	2334      	movs	r3, #52	; 0x34
   31010:	2218      	movs	r2, #24
   31012:	4694      	mov	ip, r2
   31014:	44bc      	add	ip, r7
   31016:	4463      	add	r3, ip
   31018:	2202      	movs	r2, #2
   3101a:	0018      	movs	r0, r3
   3101c:	4b2c      	ldr	r3, [pc, #176]	; (310d0 <_http_client_request+0x320>)
   3101e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   31020:	4936      	ldr	r1, [pc, #216]	; (310fc <_http_client_request+0x34c>)
   31022:	2334      	movs	r3, #52	; 0x34
   31024:	2218      	movs	r2, #24
   31026:	4694      	mov	ip, r2
   31028:	44bc      	add	ip, r7
   3102a:	4463      	add	r3, ip
   3102c:	2218      	movs	r2, #24
   3102e:	0018      	movs	r0, r3
   31030:	4b27      	ldr	r3, [pc, #156]	; (310d0 <_http_client_request+0x320>)
   31032:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   31034:	4932      	ldr	r1, [pc, #200]	; (31100 <_http_client_request+0x350>)
   31036:	2334      	movs	r3, #52	; 0x34
   31038:	2218      	movs	r2, #24
   3103a:	4694      	mov	ip, r2
   3103c:	44bc      	add	ip, r7
   3103e:	4463      	add	r3, ip
   31040:	2213      	movs	r2, #19
   31042:	0018      	movs	r0, r3
   31044:	4b22      	ldr	r3, [pc, #136]	; (310d0 <_http_client_request+0x320>)
   31046:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   31048:	492e      	ldr	r1, [pc, #184]	; (31104 <_http_client_request+0x354>)
   3104a:	2334      	movs	r3, #52	; 0x34
   3104c:	2218      	movs	r2, #24
   3104e:	4694      	mov	ip, r2
   31050:	44bc      	add	ip, r7
   31052:	4463      	add	r3, ip
   31054:	2217      	movs	r2, #23
   31056:	0018      	movs	r0, r3
   31058:	4b1d      	ldr	r3, [pc, #116]	; (310d0 <_http_client_request+0x320>)
   3105a:	4798      	blx	r3
		if (entity->read != NULL) {
   3105c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3105e:	68db      	ldr	r3, [r3, #12]
   31060:	2b00      	cmp	r3, #0
   31062:	d100      	bne.n	31066 <_http_client_request+0x2b6>
   31064:	e088      	b.n	31178 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31068:	781b      	ldrb	r3, [r3, #0]
   3106a:	2b00      	cmp	r3, #0
   3106c:	d00f      	beq.n	3108e <_http_client_request+0x2de>
				module->req.content_length = -1;
   3106e:	69fb      	ldr	r3, [r7, #28]
   31070:	21cc      	movs	r1, #204	; 0xcc
   31072:	2201      	movs	r2, #1
   31074:	4252      	negs	r2, r2
   31076:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31078:	4923      	ldr	r1, [pc, #140]	; (31108 <_http_client_request+0x358>)
   3107a:	2334      	movs	r3, #52	; 0x34
   3107c:	2218      	movs	r2, #24
   3107e:	4694      	mov	ip, r2
   31080:	44bc      	add	ip, r7
   31082:	4463      	add	r3, ip
   31084:	221c      	movs	r2, #28
   31086:	0018      	movs	r0, r3
   31088:	4b11      	ldr	r3, [pc, #68]	; (310d0 <_http_client_request+0x320>)
   3108a:	4798      	blx	r3
   3108c:	e074      	b.n	31178 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3108e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31090:	689b      	ldr	r3, [r3, #8]
   31092:	2b00      	cmp	r3, #0
   31094:	d070      	beq.n	31178 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31098:	689a      	ldr	r2, [r3, #8]
   3109a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3109c:	695b      	ldr	r3, [r3, #20]
   3109e:	0018      	movs	r0, r3
   310a0:	4790      	blx	r2
   310a2:	0001      	movs	r1, r0
   310a4:	69fb      	ldr	r3, [r7, #28]
   310a6:	22cc      	movs	r2, #204	; 0xcc
   310a8:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   310aa:	69fb      	ldr	r3, [r7, #28]
   310ac:	22cc      	movs	r2, #204	; 0xcc
   310ae:	589b      	ldr	r3, [r3, r2]
   310b0:	2b00      	cmp	r3, #0
   310b2:	da2b      	bge.n	3110c <_http_client_request+0x35c>
					module->req.content_length = 0;
   310b4:	69fb      	ldr	r3, [r7, #28]
   310b6:	22cc      	movs	r2, #204	; 0xcc
   310b8:	2100      	movs	r1, #0
   310ba:	5099      	str	r1, [r3, r2]
   310bc:	e05c      	b.n	31178 <_http_client_request+0x3c8>
   310be:	46c0      	nop			; (mov r8, r8)
   310c0:	000391bc 	.word	0x000391bc
   310c4:	00030d29 	.word	0x00030d29
   310c8:	00031c91 	.word	0x00031c91
   310cc:	000390e0 	.word	0x000390e0
   310d0:	00031d11 	.word	0x00031d11
   310d4:	000390e8 	.word	0x000390e8
   310d8:	000390f0 	.word	0x000390f0
   310dc:	000390f8 	.word	0x000390f8
   310e0:	00039100 	.word	0x00039100
   310e4:	0003910c 	.word	0x0003910c
   310e8:	000343fb 	.word	0x000343fb
   310ec:	00039114 	.word	0x00039114
   310f0:	00039120 	.word	0x00039120
   310f4:	00039130 	.word	0x00039130
   310f8:	00039134 	.word	0x00039134
   310fc:	0003913c 	.word	0x0003913c
   31100:	00039158 	.word	0x00039158
   31104:	0003916c 	.word	0x0003916c
   31108:	00039184 	.word	0x00039184
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3110c:	69fb      	ldr	r3, [r7, #28]
   3110e:	22cc      	movs	r2, #204	; 0xcc
   31110:	589b      	ldr	r3, [r3, r2]
   31112:	001a      	movs	r2, r3
   31114:	49e0      	ldr	r1, [pc, #896]	; (31498 <_http_client_request+0x6e8>)
   31116:	2328      	movs	r3, #40	; 0x28
   31118:	2018      	movs	r0, #24
   3111a:	4684      	mov	ip, r0
   3111c:	44bc      	add	ip, r7
   3111e:	4463      	add	r3, ip
   31120:	0018      	movs	r0, r3
   31122:	4bde      	ldr	r3, [pc, #888]	; (3149c <_http_client_request+0x6ec>)
   31124:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31126:	49de      	ldr	r1, [pc, #888]	; (314a0 <_http_client_request+0x6f0>)
   31128:	2334      	movs	r3, #52	; 0x34
   3112a:	2218      	movs	r2, #24
   3112c:	4694      	mov	ip, r2
   3112e:	44bc      	add	ip, r7
   31130:	4463      	add	r3, ip
   31132:	2210      	movs	r2, #16
   31134:	0018      	movs	r0, r3
   31136:	4bdb      	ldr	r3, [pc, #876]	; (314a4 <_http_client_request+0x6f4>)
   31138:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3113a:	2328      	movs	r3, #40	; 0x28
   3113c:	2218      	movs	r2, #24
   3113e:	4694      	mov	ip, r2
   31140:	44bc      	add	ip, r7
   31142:	4463      	add	r3, ip
   31144:	0018      	movs	r0, r3
   31146:	4bd8      	ldr	r3, [pc, #864]	; (314a8 <_http_client_request+0x6f8>)
   31148:	4798      	blx	r3
   3114a:	0002      	movs	r2, r0
   3114c:	2328      	movs	r3, #40	; 0x28
   3114e:	2118      	movs	r1, #24
   31150:	1879      	adds	r1, r7, r1
   31152:	18c9      	adds	r1, r1, r3
   31154:	2334      	movs	r3, #52	; 0x34
   31156:	2018      	movs	r0, #24
   31158:	4684      	mov	ip, r0
   3115a:	44bc      	add	ip, r7
   3115c:	4463      	add	r3, ip
   3115e:	0018      	movs	r0, r3
   31160:	4bd0      	ldr	r3, [pc, #832]	; (314a4 <_http_client_request+0x6f4>)
   31162:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31164:	49d1      	ldr	r1, [pc, #836]	; (314ac <_http_client_request+0x6fc>)
   31166:	2334      	movs	r3, #52	; 0x34
   31168:	2218      	movs	r2, #24
   3116a:	4694      	mov	ip, r2
   3116c:	44bc      	add	ip, r7
   3116e:	4463      	add	r3, ip
   31170:	2202      	movs	r2, #2
   31172:	0018      	movs	r0, r3
   31174:	4bcb      	ldr	r3, [pc, #812]	; (314a4 <_http_client_request+0x6f4>)
   31176:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31178:	69fb      	ldr	r3, [r7, #28]
   3117a:	22d4      	movs	r2, #212	; 0xd4
   3117c:	589b      	ldr	r3, [r3, r2]
   3117e:	2b00      	cmp	r3, #0
   31180:	d012      	beq.n	311a8 <_http_client_request+0x3f8>
				module->req.ext_header,
   31182:	69fb      	ldr	r3, [r7, #28]
   31184:	22d4      	movs	r2, #212	; 0xd4
   31186:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31188:	69fb      	ldr	r3, [r7, #28]
   3118a:	22d4      	movs	r2, #212	; 0xd4
   3118c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3118e:	0018      	movs	r0, r3
   31190:	4bc5      	ldr	r3, [pc, #788]	; (314a8 <_http_client_request+0x6f8>)
   31192:	4798      	blx	r3
   31194:	0002      	movs	r2, r0
   31196:	2334      	movs	r3, #52	; 0x34
   31198:	2118      	movs	r1, #24
   3119a:	468c      	mov	ip, r1
   3119c:	44bc      	add	ip, r7
   3119e:	4463      	add	r3, ip
   311a0:	0021      	movs	r1, r4
   311a2:	0018      	movs	r0, r3
   311a4:	4bbf      	ldr	r3, [pc, #764]	; (314a4 <_http_client_request+0x6f4>)
   311a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   311a8:	49c0      	ldr	r1, [pc, #768]	; (314ac <_http_client_request+0x6fc>)
   311aa:	2334      	movs	r3, #52	; 0x34
   311ac:	2218      	movs	r2, #24
   311ae:	4694      	mov	ip, r2
   311b0:	44bc      	add	ip, r7
   311b2:	4463      	add	r3, ip
   311b4:	2202      	movs	r2, #2
   311b6:	0018      	movs	r0, r3
   311b8:	4bba      	ldr	r3, [pc, #744]	; (314a4 <_http_client_request+0x6f4>)
   311ba:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   311bc:	2334      	movs	r3, #52	; 0x34
   311be:	2218      	movs	r2, #24
   311c0:	4694      	mov	ip, r2
   311c2:	44bc      	add	ip, r7
   311c4:	4463      	add	r3, ip
   311c6:	0018      	movs	r0, r3
   311c8:	4bb9      	ldr	r3, [pc, #740]	; (314b0 <_http_client_request+0x700>)
   311ca:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   311cc:	69fb      	ldr	r3, [r7, #28]
   311ce:	2204      	movs	r2, #4
   311d0:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   311d2:	69fb      	ldr	r3, [r7, #28]
   311d4:	22cc      	movs	r2, #204	; 0xcc
   311d6:	589b      	ldr	r3, [r3, r2]
   311d8:	2b00      	cmp	r3, #0
   311da:	db00      	blt.n	311de <_http_client_request+0x42e>
   311dc:	e0c6      	b.n	3136c <_http_client_request+0x5bc>
   311de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311e0:	68db      	ldr	r3, [r3, #12]
   311e2:	2b00      	cmp	r3, #0
   311e4:	d100      	bne.n	311e8 <_http_client_request+0x438>
   311e6:	e0c1      	b.n	3136c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311ea:	68dc      	ldr	r4, [r3, #12]
   311ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311ee:	6958      	ldr	r0, [r3, #20]
   311f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   311f2:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   311f4:	69fb      	ldr	r3, [r7, #28]
   311f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311f8:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   311fa:	69fb      	ldr	r3, [r7, #28]
   311fc:	22d0      	movs	r2, #208	; 0xd0
   311fe:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31200:	002a      	movs	r2, r5
   31202:	47a0      	blx	r4
   31204:	0003      	movs	r3, r0
   31206:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3120a:	2b00      	cmp	r3, #0
   3120c:	da01      	bge.n	31212 <_http_client_request+0x462>
				size = 0;
   3120e:	2300      	movs	r3, #0
   31210:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   31212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31214:	220a      	movs	r2, #10
   31216:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3121a:	220d      	movs	r2, #13
   3121c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3121e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31220:	3305      	adds	r3, #5
   31222:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31224:	210d      	movs	r1, #13
   31226:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3122a:	3306      	adds	r3, #6
   3122c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3122e:	210a      	movs	r1, #10
   31230:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   31232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31234:	2b00      	cmp	r3, #0
   31236:	db14      	blt.n	31262 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3123a:	3302      	adds	r3, #2
   3123c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3123e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31240:	4a9c      	ldr	r2, [pc, #624]	; (314b4 <_http_client_request+0x704>)
   31242:	4013      	ands	r3, r2
   31244:	d504      	bpl.n	31250 <_http_client_request+0x4a0>
   31246:	3b01      	subs	r3, #1
   31248:	2210      	movs	r2, #16
   3124a:	4252      	negs	r2, r2
   3124c:	4313      	orrs	r3, r2
   3124e:	3301      	adds	r3, #1
   31250:	001a      	movs	r2, r3
   31252:	2318      	movs	r3, #24
   31254:	2118      	movs	r1, #24
   31256:	468c      	mov	ip, r1
   31258:	44bc      	add	ip, r7
   3125a:	4463      	add	r3, ip
   3125c:	5c9a      	ldrb	r2, [r3, r2]
   3125e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31260:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   31262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31264:	2b0f      	cmp	r3, #15
   31266:	dd19      	ble.n	3129c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3126a:	3301      	adds	r3, #1
   3126c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3126e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31270:	2b00      	cmp	r3, #0
   31272:	da00      	bge.n	31276 <_http_client_request+0x4c6>
   31274:	330f      	adds	r3, #15
   31276:	111b      	asrs	r3, r3, #4
   31278:	001a      	movs	r2, r3
   3127a:	4b8e      	ldr	r3, [pc, #568]	; (314b4 <_http_client_request+0x704>)
   3127c:	4013      	ands	r3, r2
   3127e:	d504      	bpl.n	3128a <_http_client_request+0x4da>
   31280:	3b01      	subs	r3, #1
   31282:	2210      	movs	r2, #16
   31284:	4252      	negs	r2, r2
   31286:	4313      	orrs	r3, r2
   31288:	3301      	adds	r3, #1
   3128a:	001a      	movs	r2, r3
   3128c:	2318      	movs	r3, #24
   3128e:	2118      	movs	r1, #24
   31290:	468c      	mov	ip, r1
   31292:	44bc      	add	ip, r7
   31294:	4463      	add	r3, ip
   31296:	5c9a      	ldrb	r2, [r3, r2]
   31298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3129a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   3129c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3129e:	2bff      	cmp	r3, #255	; 0xff
   312a0:	dd18      	ble.n	312d4 <_http_client_request+0x524>
				ptr = buffer;
   312a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   312a4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   312a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   312a8:	2b00      	cmp	r3, #0
   312aa:	da00      	bge.n	312ae <_http_client_request+0x4fe>
   312ac:	33ff      	adds	r3, #255	; 0xff
   312ae:	121b      	asrs	r3, r3, #8
   312b0:	001a      	movs	r2, r3
   312b2:	4b80      	ldr	r3, [pc, #512]	; (314b4 <_http_client_request+0x704>)
   312b4:	4013      	ands	r3, r2
   312b6:	d504      	bpl.n	312c2 <_http_client_request+0x512>
   312b8:	3b01      	subs	r3, #1
   312ba:	2210      	movs	r2, #16
   312bc:	4252      	negs	r2, r2
   312be:	4313      	orrs	r3, r2
   312c0:	3301      	adds	r3, #1
   312c2:	001a      	movs	r2, r3
   312c4:	2318      	movs	r3, #24
   312c6:	2118      	movs	r1, #24
   312c8:	468c      	mov	ip, r1
   312ca:	44bc      	add	ip, r7
   312cc:	4463      	add	r3, ip
   312ce:	5c9a      	ldrb	r2, [r3, r2]
   312d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   312d2:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   312d4:	69fb      	ldr	r3, [r7, #28]
   312d6:	2000      	movs	r0, #0
   312d8:	5618      	ldrsb	r0, [r3, r0]
   312da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   312dc:	3303      	adds	r3, #3
   312de:	001a      	movs	r2, r3
   312e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   312e2:	1ad3      	subs	r3, r2, r3
   312e4:	b29a      	uxth	r2, r3
   312e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   312e8:	b29b      	uxth	r3, r3
   312ea:	18d3      	adds	r3, r2, r3
   312ec:	b29b      	uxth	r3, r3
   312ee:	3304      	adds	r3, #4
   312f0:	b29a      	uxth	r2, r3
   312f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
   312f4:	2300      	movs	r3, #0
   312f6:	4c70      	ldr	r4, [pc, #448]	; (314b8 <_http_client_request+0x708>)
   312f8:	47a0      	blx	r4
   312fa:	0003      	movs	r3, r0
   312fc:	663b      	str	r3, [r7, #96]	; 0x60
   312fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31300:	2b00      	cmp	r3, #0
   31302:	da07      	bge.n	31314 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   31304:	2305      	movs	r3, #5
   31306:	425a      	negs	r2, r3
   31308:	69fb      	ldr	r3, [r7, #28]
   3130a:	0011      	movs	r1, r2
   3130c:	0018      	movs	r0, r3
   3130e:	4b6b      	ldr	r3, [pc, #428]	; (314bc <_http_client_request+0x70c>)
   31310:	4798      	blx	r3
				return;
   31312:	e0e1      	b.n	314d8 <_http_client_request+0x728>
			module->req.sent_length += size;
   31314:	69fb      	ldr	r3, [r7, #28]
   31316:	22d0      	movs	r2, #208	; 0xd0
   31318:	589a      	ldr	r2, [r3, r2]
   3131a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3131c:	18d2      	adds	r2, r2, r3
   3131e:	69fb      	ldr	r3, [r7, #28]
   31320:	21d0      	movs	r1, #208	; 0xd0
   31322:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31326:	2b00      	cmp	r3, #0
   31328:	d000      	beq.n	3132c <_http_client_request+0x57c>
   3132a:	e0c9      	b.n	314c0 <_http_client_request+0x710>
				if (module->req.entity.close) {
   3132c:	69fb      	ldr	r3, [r7, #28]
   3132e:	22c0      	movs	r2, #192	; 0xc0
   31330:	589b      	ldr	r3, [r3, r2]
   31332:	2b00      	cmp	r3, #0
   31334:	d007      	beq.n	31346 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31336:	69fb      	ldr	r3, [r7, #28]
   31338:	22c0      	movs	r2, #192	; 0xc0
   3133a:	589b      	ldr	r3, [r3, r2]
   3133c:	69fa      	ldr	r2, [r7, #28]
   3133e:	21c4      	movs	r1, #196	; 0xc4
   31340:	5852      	ldr	r2, [r2, r1]
   31342:	0010      	movs	r0, r2
   31344:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31346:	69fb      	ldr	r3, [r7, #28]
   31348:	2202      	movs	r2, #2
   3134a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3134c:	69fb      	ldr	r3, [r7, #28]
   3134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31350:	2b00      	cmp	r3, #0
   31352:	d100      	bne.n	31356 <_http_client_request+0x5a6>
   31354:	e0b5      	b.n	314c2 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31356:	69fb      	ldr	r3, [r7, #28]
   31358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3135a:	220c      	movs	r2, #12
   3135c:	2118      	movs	r1, #24
   3135e:	468c      	mov	ip, r1
   31360:	44bc      	add	ip, r7
   31362:	4462      	add	r2, ip
   31364:	69f8      	ldr	r0, [r7, #28]
   31366:	2101      	movs	r1, #1
   31368:	4798      	blx	r3
				break;
   3136a:	e0aa      	b.n	314c2 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   3136c:	69fb      	ldr	r3, [r7, #28]
   3136e:	22cc      	movs	r2, #204	; 0xcc
   31370:	589b      	ldr	r3, [r3, r2]
   31372:	2b00      	cmp	r3, #0
   31374:	dc00      	bgt.n	31378 <_http_client_request+0x5c8>
   31376:	e07c      	b.n	31472 <_http_client_request+0x6c2>
   31378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3137a:	68db      	ldr	r3, [r3, #12]
   3137c:	2b00      	cmp	r3, #0
   3137e:	d100      	bne.n	31382 <_http_client_request+0x5d2>
   31380:	e077      	b.n	31472 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   31382:	69fb      	ldr	r3, [r7, #28]
   31384:	22d0      	movs	r2, #208	; 0xd0
   31386:	589a      	ldr	r2, [r3, r2]
   31388:	69fb      	ldr	r3, [r7, #28]
   3138a:	21cc      	movs	r1, #204	; 0xcc
   3138c:	585b      	ldr	r3, [r3, r1]
   3138e:	429a      	cmp	r2, r3
   31390:	db1f      	blt.n	313d2 <_http_client_request+0x622>
				if (module->req.entity.close) {
   31392:	69fb      	ldr	r3, [r7, #28]
   31394:	22c0      	movs	r2, #192	; 0xc0
   31396:	589b      	ldr	r3, [r3, r2]
   31398:	2b00      	cmp	r3, #0
   3139a:	d007      	beq.n	313ac <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   3139c:	69fb      	ldr	r3, [r7, #28]
   3139e:	22c0      	movs	r2, #192	; 0xc0
   313a0:	589b      	ldr	r3, [r3, r2]
   313a2:	69fa      	ldr	r2, [r7, #28]
   313a4:	21c4      	movs	r1, #196	; 0xc4
   313a6:	5852      	ldr	r2, [r2, r1]
   313a8:	0010      	movs	r0, r2
   313aa:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   313ac:	69fb      	ldr	r3, [r7, #28]
   313ae:	2202      	movs	r2, #2
   313b0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   313b2:	69fb      	ldr	r3, [r7, #28]
   313b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313b6:	2b00      	cmp	r3, #0
   313b8:	d100      	bne.n	313bc <_http_client_request+0x60c>
   313ba:	e084      	b.n	314c6 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   313bc:	69fb      	ldr	r3, [r7, #28]
   313be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313c0:	220c      	movs	r2, #12
   313c2:	2118      	movs	r1, #24
   313c4:	468c      	mov	ip, r1
   313c6:	44bc      	add	ip, r7
   313c8:	4462      	add	r2, ip
   313ca:	69f8      	ldr	r0, [r7, #28]
   313cc:	2101      	movs	r1, #1
   313ce:	4798      	blx	r3
				break;
   313d0:	e079      	b.n	314c6 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   313d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313d4:	68dc      	ldr	r4, [r3, #12]
   313d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313d8:	6958      	ldr	r0, [r3, #20]
   313da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   313dc:	69fb      	ldr	r3, [r7, #28]
   313de:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   313e0:	69fb      	ldr	r3, [r7, #28]
   313e2:	22d0      	movs	r2, #208	; 0xd0
   313e4:	589b      	ldr	r3, [r3, r2]
   313e6:	002a      	movs	r2, r5
   313e8:	47a0      	blx	r4
   313ea:	0003      	movs	r3, r0
   313ec:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   313ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   313f0:	2b00      	cmp	r3, #0
   313f2:	da0d      	bge.n	31410 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   313f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   313f6:	2b00      	cmp	r3, #0
   313f8:	d102      	bne.n	31400 <_http_client_request+0x650>
   313fa:	234d      	movs	r3, #77	; 0x4d
   313fc:	425b      	negs	r3, r3
   313fe:	e001      	b.n	31404 <_http_client_request+0x654>
   31400:	2305      	movs	r3, #5
   31402:	425b      	negs	r3, r3
   31404:	69fa      	ldr	r2, [r7, #28]
   31406:	0019      	movs	r1, r3
   31408:	0010      	movs	r0, r2
   3140a:	4b2c      	ldr	r3, [pc, #176]	; (314bc <_http_client_request+0x70c>)
   3140c:	4798      	blx	r3
			if (size < 0) {
   3140e:	e057      	b.n	314c0 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   31410:	69fb      	ldr	r3, [r7, #28]
   31412:	22cc      	movs	r2, #204	; 0xcc
   31414:	589a      	ldr	r2, [r3, r2]
   31416:	69fb      	ldr	r3, [r7, #28]
   31418:	21d0      	movs	r1, #208	; 0xd0
   3141a:	585b      	ldr	r3, [r3, r1]
   3141c:	1ad2      	subs	r2, r2, r3
   3141e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31420:	429a      	cmp	r2, r3
   31422:	da07      	bge.n	31434 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31424:	69fb      	ldr	r3, [r7, #28]
   31426:	22cc      	movs	r2, #204	; 0xcc
   31428:	589a      	ldr	r2, [r3, r2]
   3142a:	69fb      	ldr	r3, [r7, #28]
   3142c:	21d0      	movs	r1, #208	; 0xd0
   3142e:	585b      	ldr	r3, [r3, r1]
   31430:	1ad3      	subs	r3, r2, r3
   31432:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31434:	69fb      	ldr	r3, [r7, #28]
   31436:	2000      	movs	r0, #0
   31438:	5618      	ldrsb	r0, [r3, r0]
   3143a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3143c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3143e:	b29a      	uxth	r2, r3
   31440:	2300      	movs	r3, #0
   31442:	4c1d      	ldr	r4, [pc, #116]	; (314b8 <_http_client_request+0x708>)
   31444:	47a0      	blx	r4
   31446:	0003      	movs	r3, r0
   31448:	663b      	str	r3, [r7, #96]	; 0x60
   3144a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   3144c:	2b00      	cmp	r3, #0
   3144e:	da07      	bge.n	31460 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   31450:	2305      	movs	r3, #5
   31452:	425a      	negs	r2, r3
   31454:	69fb      	ldr	r3, [r7, #28]
   31456:	0011      	movs	r1, r2
   31458:	0018      	movs	r0, r3
   3145a:	4b18      	ldr	r3, [pc, #96]	; (314bc <_http_client_request+0x70c>)
   3145c:	4798      	blx	r3
					return;
   3145e:	e03b      	b.n	314d8 <_http_client_request+0x728>
				module->req.sent_length += size;
   31460:	69fb      	ldr	r3, [r7, #28]
   31462:	22d0      	movs	r2, #208	; 0xd0
   31464:	589a      	ldr	r2, [r3, r2]
   31466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31468:	18d2      	adds	r2, r2, r3
   3146a:	69fb      	ldr	r3, [r7, #28]
   3146c:	21d0      	movs	r1, #208	; 0xd0
   3146e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   31470:	e026      	b.n	314c0 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   31472:	69fb      	ldr	r3, [r7, #28]
   31474:	2202      	movs	r2, #2
   31476:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   31478:	69fb      	ldr	r3, [r7, #28]
   3147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3147c:	2b00      	cmp	r3, #0
   3147e:	d024      	beq.n	314ca <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31480:	69fb      	ldr	r3, [r7, #28]
   31482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31484:	220c      	movs	r2, #12
   31486:	2118      	movs	r1, #24
   31488:	468c      	mov	ip, r1
   3148a:	44bc      	add	ip, r7
   3148c:	4462      	add	r2, ip
   3148e:	69f8      	ldr	r0, [r7, #28]
   31490:	2101      	movs	r1, #1
   31492:	4798      	blx	r3
			break;
   31494:	e019      	b.n	314ca <_http_client_request+0x71a>
   31496:	46c0      	nop			; (mov r8, r8)
   31498:	000391a4 	.word	0x000391a4
   3149c:	00034301 	.word	0x00034301
   314a0:	000391a8 	.word	0x000391a8
   314a4:	00031d11 	.word	0x00031d11
   314a8:	000343fb 	.word	0x000343fb
   314ac:	00039130 	.word	0x00039130
   314b0:	00031d4d 	.word	0x00031d4d
   314b4:	8000000f 	.word	0x8000000f
   314b8:	00025295 	.word	0x00025295
   314bc:	00030c5d 	.word	0x00030c5d
		break;
   314c0:	e004      	b.n	314cc <_http_client_request+0x71c>
				break;
   314c2:	46c0      	nop			; (mov r8, r8)
   314c4:	e002      	b.n	314cc <_http_client_request+0x71c>
				break;
   314c6:	46c0      	nop			; (mov r8, r8)
   314c8:	e000      	b.n	314cc <_http_client_request+0x71c>
			break;
   314ca:	46c0      	nop			; (mov r8, r8)
   314cc:	69bb      	ldr	r3, [r7, #24]
   314ce:	469d      	mov	sp, r3
   314d0:	e004      	b.n	314dc <_http_client_request+0x72c>
		return;
   314d2:	46c0      	nop			; (mov r8, r8)
   314d4:	e000      	b.n	314d8 <_http_client_request+0x728>
		return;
   314d6:	46c0      	nop			; (mov r8, r8)
   314d8:	69bb      	ldr	r3, [r7, #24]
   314da:	469d      	mov	sp, r3
	}
}
   314dc:	46bd      	mov	sp, r7
   314de:	b01e      	add	sp, #120	; 0x78
   314e0:	bc04      	pop	{r2}
   314e2:	4690      	mov	r8, r2
   314e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   314e6:	46c0      	nop			; (mov r8, r8)

000314e8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   314e8:	b590      	push	{r4, r7, lr}
   314ea:	b083      	sub	sp, #12
   314ec:	af00      	add	r7, sp, #0
   314ee:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   314f0:	687b      	ldr	r3, [r7, #4]
   314f2:	2b00      	cmp	r3, #0
   314f4:	d021      	beq.n	3153a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   314f6:	687b      	ldr	r3, [r7, #4]
   314f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   314fa:	687b      	ldr	r3, [r7, #4]
   314fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   314fe:	429a      	cmp	r2, r3
   31500:	d307      	bcc.n	31512 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   31502:	238b      	movs	r3, #139	; 0x8b
   31504:	425a      	negs	r2, r3
   31506:	687b      	ldr	r3, [r7, #4]
   31508:	0011      	movs	r1, r2
   3150a:	0018      	movs	r0, r3
   3150c:	4b0d      	ldr	r3, [pc, #52]	; (31544 <_http_client_recv_packet+0x5c>)
   3150e:	4798      	blx	r3
		return;
   31510:	e014      	b.n	3153c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   31512:	687b      	ldr	r3, [r7, #4]
   31514:	2000      	movs	r0, #0
   31516:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   31518:	687b      	ldr	r3, [r7, #4]
   3151a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3151c:	687b      	ldr	r3, [r7, #4]
   3151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31520:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31522:	687b      	ldr	r3, [r7, #4]
   31524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   31526:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31528:	687b      	ldr	r3, [r7, #4]
   3152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   3152c:	b29b      	uxth	r3, r3
   3152e:	1ad3      	subs	r3, r2, r3
   31530:	b29a      	uxth	r2, r3
   31532:	2300      	movs	r3, #0
   31534:	4c04      	ldr	r4, [pc, #16]	; (31548 <_http_client_recv_packet+0x60>)
   31536:	47a0      	blx	r4
   31538:	e000      	b.n	3153c <_http_client_recv_packet+0x54>
		return;
   3153a:	46c0      	nop			; (mov r8, r8)
}
   3153c:	46bd      	mov	sp, r7
   3153e:	b003      	add	sp, #12
   31540:	bd90      	pop	{r4, r7, pc}
   31542:	46c0      	nop			; (mov r8, r8)
   31544:	00030c5d 	.word	0x00030c5d
   31548:	000253f9 	.word	0x000253f9

0003154c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   3154c:	b580      	push	{r7, lr}
   3154e:	b082      	sub	sp, #8
   31550:	af00      	add	r7, sp, #0
   31552:	6078      	str	r0, [r7, #4]
   31554:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   31556:	687b      	ldr	r3, [r7, #4]
   31558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3155a:	683b      	ldr	r3, [r7, #0]
   3155c:	18d2      	adds	r2, r2, r3
   3155e:	687b      	ldr	r3, [r7, #4]
   31560:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   31562:	687b      	ldr	r3, [r7, #4]
   31564:	2258      	movs	r2, #88	; 0x58
   31566:	5a9b      	ldrh	r3, [r3, r2]
   31568:	2b00      	cmp	r3, #0
   3156a:	d007      	beq.n	3157c <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   3156c:	687b      	ldr	r3, [r7, #4]
   3156e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31570:	687b      	ldr	r3, [r7, #4]
   31572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31574:	0019      	movs	r1, r3
   31576:	0010      	movs	r0, r2
   31578:	4b06      	ldr	r3, [pc, #24]	; (31594 <_http_client_recved_packet+0x48>)
   3157a:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   3157c:	46c0      	nop			; (mov r8, r8)
   3157e:	687b      	ldr	r3, [r7, #4]
   31580:	0018      	movs	r0, r3
   31582:	4b05      	ldr	r3, [pc, #20]	; (31598 <_http_client_recved_packet+0x4c>)
   31584:	4798      	blx	r3
   31586:	1e03      	subs	r3, r0, #0
   31588:	d1f9      	bne.n	3157e <_http_client_recved_packet+0x32>
}
   3158a:	46c0      	nop			; (mov r8, r8)
   3158c:	46bd      	mov	sp, r7
   3158e:	b002      	add	sp, #8
   31590:	bd80      	pop	{r7, pc}
   31592:	46c0      	nop			; (mov r8, r8)
   31594:	00032009 	.word	0x00032009
   31598:	0003159d 	.word	0x0003159d

0003159c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   3159c:	b580      	push	{r7, lr}
   3159e:	b082      	sub	sp, #8
   315a0:	af00      	add	r7, sp, #0
   315a2:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   315a4:	687b      	ldr	r3, [r7, #4]
   315a6:	22d8      	movs	r2, #216	; 0xd8
   315a8:	589b      	ldr	r3, [r3, r2]
   315aa:	2b00      	cmp	r3, #0
   315ac:	d002      	beq.n	315b4 <_http_client_handle_response+0x18>
   315ae:	2b01      	cmp	r3, #1
   315b0:	d006      	beq.n	315c0 <_http_client_handle_response+0x24>
   315b2:	e00b      	b.n	315cc <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   315b4:	687b      	ldr	r3, [r7, #4]
   315b6:	0018      	movs	r0, r3
   315b8:	4b07      	ldr	r3, [pc, #28]	; (315d8 <_http_client_handle_response+0x3c>)
   315ba:	4798      	blx	r3
   315bc:	0003      	movs	r3, r0
   315be:	e006      	b.n	315ce <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   315c0:	687b      	ldr	r3, [r7, #4]
   315c2:	0018      	movs	r0, r3
   315c4:	4b05      	ldr	r3, [pc, #20]	; (315dc <_http_client_handle_response+0x40>)
   315c6:	4798      	blx	r3
   315c8:	0003      	movs	r3, r0
   315ca:	e000      	b.n	315ce <_http_client_handle_response+0x32>
	}
	return 0;
   315cc:	2300      	movs	r3, #0
}
   315ce:	0018      	movs	r0, r3
   315d0:	46bd      	mov	sp, r7
   315d2:	b002      	add	sp, #8
   315d4:	bd80      	pop	{r7, pc}
   315d6:	46c0      	nop			; (mov r8, r8)
   315d8:	000315e1 	.word	0x000315e1
   315dc:	00031a99 	.word	0x00031a99

000315e0 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   315e0:	b590      	push	{r4, r7, lr}
   315e2:	b08b      	sub	sp, #44	; 0x2c
   315e4:	af00      	add	r7, sp, #0
   315e6:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   315e8:	687b      	ldr	r3, [r7, #4]
   315ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   315ec:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   315ee:	4b9a      	ldr	r3, [pc, #616]	; (31858 <_http_client_handle_header+0x278>)
   315f0:	681a      	ldr	r2, [r3, #0]
   315f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   315f4:	0011      	movs	r1, r2
   315f6:	0018      	movs	r0, r3
   315f8:	4b98      	ldr	r3, [pc, #608]	; (3185c <_http_client_handle_header+0x27c>)
   315fa:	4798      	blx	r3
   315fc:	0003      	movs	r3, r0
   315fe:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   31600:	69bb      	ldr	r3, [r7, #24]
   31602:	2b00      	cmp	r3, #0
   31604:	d007      	beq.n	31616 <_http_client_handle_header+0x36>
   31606:	687b      	ldr	r3, [r7, #4]
   31608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3160a:	687b      	ldr	r3, [r7, #4]
   3160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3160e:	18d2      	adds	r2, r2, r3
   31610:	69bb      	ldr	r3, [r7, #24]
   31612:	429a      	cmp	r2, r3
   31614:	d807      	bhi.n	31626 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31618:	687b      	ldr	r3, [r7, #4]
   3161a:	0011      	movs	r1, r2
   3161c:	0018      	movs	r0, r3
   3161e:	4b90      	ldr	r3, [pc, #576]	; (31860 <_http_client_handle_header+0x280>)
   31620:	4798      	blx	r3
			return 0;
   31622:	2300      	movs	r3, #0
   31624:	e114      	b.n	31850 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31626:	4b8c      	ldr	r3, [pc, #560]	; (31858 <_http_client_handle_header+0x278>)
   31628:	681c      	ldr	r4, [r3, #0]
   3162a:	4b8b      	ldr	r3, [pc, #556]	; (31858 <_http_client_handle_header+0x278>)
   3162c:	681b      	ldr	r3, [r3, #0]
   3162e:	0018      	movs	r0, r3
   31630:	4b8c      	ldr	r3, [pc, #560]	; (31864 <_http_client_handle_header+0x284>)
   31632:	4798      	blx	r3
   31634:	0002      	movs	r2, r0
   31636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31638:	0021      	movs	r1, r4
   3163a:	0018      	movs	r0, r3
   3163c:	4b8a      	ldr	r3, [pc, #552]	; (31868 <_http_client_handle_header+0x288>)
   3163e:	4798      	blx	r3
   31640:	1e03      	subs	r3, r0, #0
   31642:	d15d      	bne.n	31700 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31644:	4b84      	ldr	r3, [pc, #528]	; (31858 <_http_client_handle_header+0x278>)
   31646:	681b      	ldr	r3, [r3, #0]
   31648:	0018      	movs	r0, r3
   3164a:	4b86      	ldr	r3, [pc, #536]	; (31864 <_http_client_handle_header+0x284>)
   3164c:	4798      	blx	r3
   3164e:	0002      	movs	r2, r0
   31650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31652:	189a      	adds	r2, r3, r2
   31654:	687b      	ldr	r3, [r7, #4]
   31656:	0011      	movs	r1, r2
   31658:	0018      	movs	r0, r3
   3165a:	4b81      	ldr	r3, [pc, #516]	; (31860 <_http_client_handle_header+0x280>)
   3165c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3165e:	687b      	ldr	r3, [r7, #4]
   31660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31662:	2b00      	cmp	r3, #0
   31664:	d046      	beq.n	316f4 <_http_client_handle_header+0x114>
   31666:	687b      	ldr	r3, [r7, #4]
   31668:	22e4      	movs	r2, #228	; 0xe4
   3166a:	5a9b      	ldrh	r3, [r3, r2]
   3166c:	2b00      	cmp	r3, #0
   3166e:	d041      	beq.n	316f4 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   31670:	687b      	ldr	r3, [r7, #4]
   31672:	22dc      	movs	r2, #220	; 0xdc
   31674:	589b      	ldr	r3, [r3, r2]
   31676:	2b00      	cmp	r3, #0
   31678:	da19      	bge.n	316ae <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   3167a:	687b      	ldr	r3, [r7, #4]
   3167c:	22e4      	movs	r2, #228	; 0xe4
   3167e:	5a9a      	ldrh	r2, [r3, r2]
   31680:	230c      	movs	r3, #12
   31682:	18fb      	adds	r3, r7, r3
   31684:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31686:	230c      	movs	r3, #12
   31688:	18fb      	adds	r3, r7, r3
   3168a:	2201      	movs	r2, #1
   3168c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   3168e:	687b      	ldr	r3, [r7, #4]
   31690:	22e0      	movs	r2, #224	; 0xe0
   31692:	2100      	movs	r1, #0
   31694:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31696:	230c      	movs	r3, #12
   31698:	18fb      	adds	r3, r7, r3
   3169a:	2200      	movs	r2, #0
   3169c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3169e:	687b      	ldr	r3, [r7, #4]
   316a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   316a2:	220c      	movs	r2, #12
   316a4:	18ba      	adds	r2, r7, r2
   316a6:	6878      	ldr	r0, [r7, #4]
   316a8:	2102      	movs	r1, #2
   316aa:	4798      	blx	r3
   316ac:	e022      	b.n	316f4 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   316ae:	687b      	ldr	r3, [r7, #4]
   316b0:	22dc      	movs	r2, #220	; 0xdc
   316b2:	589a      	ldr	r2, [r3, r2]
   316b4:	687b      	ldr	r3, [r7, #4]
   316b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   316b8:	429a      	cmp	r2, r3
   316ba:	dd1b      	ble.n	316f4 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   316bc:	687b      	ldr	r3, [r7, #4]
   316be:	22e4      	movs	r2, #228	; 0xe4
   316c0:	5a9a      	ldrh	r2, [r3, r2]
   316c2:	230c      	movs	r3, #12
   316c4:	18fb      	adds	r3, r7, r3
   316c6:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   316c8:	687b      	ldr	r3, [r7, #4]
   316ca:	22dc      	movs	r2, #220	; 0xdc
   316cc:	589b      	ldr	r3, [r3, r2]
   316ce:	001a      	movs	r2, r3
   316d0:	230c      	movs	r3, #12
   316d2:	18fb      	adds	r3, r7, r3
   316d4:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   316d6:	230c      	movs	r3, #12
   316d8:	18fb      	adds	r3, r7, r3
   316da:	2200      	movs	r2, #0
   316dc:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   316de:	687b      	ldr	r3, [r7, #4]
   316e0:	22e0      	movs	r2, #224	; 0xe0
   316e2:	2100      	movs	r1, #0
   316e4:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   316e6:	687b      	ldr	r3, [r7, #4]
   316e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   316ea:	220c      	movs	r2, #12
   316ec:	18ba      	adds	r2, r7, r2
   316ee:	6878      	ldr	r0, [r7, #4]
   316f0:	2102      	movs	r1, #2
   316f2:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   316f4:	687b      	ldr	r3, [r7, #4]
   316f6:	22d8      	movs	r2, #216	; 0xd8
   316f8:	2101      	movs	r1, #1
   316fa:	5099      	str	r1, [r3, r2]
			return 1;
   316fc:	2301      	movs	r3, #1
   316fe:	e0a7      	b.n	31850 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   31700:	495a      	ldr	r1, [pc, #360]	; (3186c <_http_client_handle_header+0x28c>)
   31702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31704:	2210      	movs	r2, #16
   31706:	0018      	movs	r0, r3
   31708:	4b57      	ldr	r3, [pc, #348]	; (31868 <_http_client_handle_header+0x288>)
   3170a:	4798      	blx	r3
   3170c:	1e03      	subs	r3, r0, #0
   3170e:	d109      	bne.n	31724 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   31710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31712:	3310      	adds	r3, #16
   31714:	0018      	movs	r0, r3
   31716:	4b56      	ldr	r3, [pc, #344]	; (31870 <_http_client_handle_header+0x290>)
   31718:	4798      	blx	r3
   3171a:	0001      	movs	r1, r0
   3171c:	687b      	ldr	r3, [r7, #4]
   3171e:	22dc      	movs	r2, #220	; 0xdc
   31720:	5099      	str	r1, [r3, r2]
   31722:	e08b      	b.n	3183c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31724:	4953      	ldr	r1, [pc, #332]	; (31874 <_http_client_handle_header+0x294>)
   31726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31728:	2213      	movs	r2, #19
   3172a:	0018      	movs	r0, r3
   3172c:	4b4e      	ldr	r3, [pc, #312]	; (31868 <_http_client_handle_header+0x288>)
   3172e:	4798      	blx	r3
   31730:	1e03      	subs	r3, r0, #0
   31732:	d127      	bne.n	31784 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31736:	3313      	adds	r3, #19
   31738:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3173a:	e01e      	b.n	3177a <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   3173c:	6a3b      	ldr	r3, [r7, #32]
   3173e:	781b      	ldrb	r3, [r3, #0]
   31740:	2b20      	cmp	r3, #32
   31742:	d103      	bne.n	3174c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31744:	6a3b      	ldr	r3, [r7, #32]
   31746:	3301      	adds	r3, #1
   31748:	623b      	str	r3, [r7, #32]
   3174a:	e016      	b.n	3177a <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   3174c:	6a3b      	ldr	r3, [r7, #32]
   3174e:	781b      	ldrb	r3, [r3, #0]
   31750:	2b43      	cmp	r3, #67	; 0x43
   31752:	d003      	beq.n	3175c <_http_client_handle_header+0x17c>
   31754:	6a3b      	ldr	r3, [r7, #32]
   31756:	781b      	ldrb	r3, [r3, #0]
   31758:	2b63      	cmp	r3, #99	; 0x63
   3175a:	d105      	bne.n	31768 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   3175c:	687b      	ldr	r3, [r7, #4]
   3175e:	21cc      	movs	r1, #204	; 0xcc
   31760:	2201      	movs	r2, #1
   31762:	4252      	negs	r2, r2
   31764:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31766:	e069      	b.n	3183c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31768:	2386      	movs	r3, #134	; 0x86
   3176a:	425a      	negs	r2, r3
   3176c:	687b      	ldr	r3, [r7, #4]
   3176e:	0011      	movs	r1, r2
   31770:	0018      	movs	r0, r3
   31772:	4b41      	ldr	r3, [pc, #260]	; (31878 <_http_client_handle_header+0x298>)
   31774:	4798      	blx	r3
					return 0;
   31776:	2300      	movs	r3, #0
   31778:	e06a      	b.n	31850 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3177a:	69ba      	ldr	r2, [r7, #24]
   3177c:	6a3b      	ldr	r3, [r7, #32]
   3177e:	429a      	cmp	r2, r3
   31780:	d8dc      	bhi.n	3173c <_http_client_handle_header+0x15c>
   31782:	e05b      	b.n	3183c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31784:	493d      	ldr	r1, [pc, #244]	; (3187c <_http_client_handle_header+0x29c>)
   31786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31788:	220c      	movs	r2, #12
   3178a:	0018      	movs	r0, r3
   3178c:	4b36      	ldr	r3, [pc, #216]	; (31868 <_http_client_handle_header+0x288>)
   3178e:	4798      	blx	r3
   31790:	1e03      	subs	r3, r0, #0
   31792:	d126      	bne.n	317e2 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31796:	330c      	adds	r3, #12
   31798:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3179a:	e01d      	b.n	317d8 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   3179c:	69fb      	ldr	r3, [r7, #28]
   3179e:	781b      	ldrb	r3, [r3, #0]
   317a0:	2b20      	cmp	r3, #32
   317a2:	d103      	bne.n	317ac <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   317a4:	69fb      	ldr	r3, [r7, #28]
   317a6:	3301      	adds	r3, #1
   317a8:	61fb      	str	r3, [r7, #28]
   317aa:	e015      	b.n	317d8 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   317ac:	69fb      	ldr	r3, [r7, #28]
   317ae:	781b      	ldrb	r3, [r3, #0]
   317b0:	2b4b      	cmp	r3, #75	; 0x4b
   317b2:	d003      	beq.n	317bc <_http_client_handle_header+0x1dc>
   317b4:	69fb      	ldr	r3, [r7, #28]
   317b6:	781b      	ldrb	r3, [r3, #0]
   317b8:	2b6b      	cmp	r3, #107	; 0x6b
   317ba:	d106      	bne.n	317ca <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   317bc:	687b      	ldr	r3, [r7, #4]
   317be:	2241      	movs	r2, #65	; 0x41
   317c0:	5c99      	ldrb	r1, [r3, r2]
   317c2:	2002      	movs	r0, #2
   317c4:	4301      	orrs	r1, r0
   317c6:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   317c8:	e038      	b.n	3183c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   317ca:	687b      	ldr	r3, [r7, #4]
   317cc:	2241      	movs	r2, #65	; 0x41
   317ce:	5c99      	ldrb	r1, [r3, r2]
   317d0:	2002      	movs	r0, #2
   317d2:	4381      	bics	r1, r0
   317d4:	5499      	strb	r1, [r3, r2]
				break;
   317d6:	e031      	b.n	3183c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   317d8:	69ba      	ldr	r2, [r7, #24]
   317da:	69fb      	ldr	r3, [r7, #28]
   317dc:	429a      	cmp	r2, r3
   317de:	d8dd      	bhi.n	3179c <_http_client_handle_header+0x1bc>
   317e0:	e02c      	b.n	3183c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   317e2:	4927      	ldr	r1, [pc, #156]	; (31880 <_http_client_handle_header+0x2a0>)
   317e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317e6:	2205      	movs	r2, #5
   317e8:	0018      	movs	r0, r3
   317ea:	4b1f      	ldr	r3, [pc, #124]	; (31868 <_http_client_handle_header+0x288>)
   317ec:	4798      	blx	r3
   317ee:	1e03      	subs	r3, r0, #0
   317f0:	d124      	bne.n	3183c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   317f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317f4:	3309      	adds	r3, #9
   317f6:	0018      	movs	r0, r3
   317f8:	4b1d      	ldr	r3, [pc, #116]	; (31870 <_http_client_handle_header+0x290>)
   317fa:	4798      	blx	r3
   317fc:	0003      	movs	r3, r0
   317fe:	b299      	uxth	r1, r3
   31800:	687b      	ldr	r3, [r7, #4]
   31802:	22e4      	movs	r2, #228	; 0xe4
   31804:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31806:	687b      	ldr	r3, [r7, #4]
   31808:	22dc      	movs	r2, #220	; 0xdc
   3180a:	2100      	movs	r1, #0
   3180c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   3180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31810:	3305      	adds	r3, #5
   31812:	781b      	ldrb	r3, [r3, #0]
   31814:	2b31      	cmp	r3, #49	; 0x31
   31816:	d804      	bhi.n	31822 <_http_client_handle_header+0x242>
   31818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3181a:	3307      	adds	r3, #7
   3181c:	781b      	ldrb	r3, [r3, #0]
   3181e:	2b30      	cmp	r3, #48	; 0x30
   31820:	d906      	bls.n	31830 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31822:	687b      	ldr	r3, [r7, #4]
   31824:	2241      	movs	r2, #65	; 0x41
   31826:	5c99      	ldrb	r1, [r3, r2]
   31828:	2002      	movs	r0, #2
   3182a:	4301      	orrs	r1, r0
   3182c:	5499      	strb	r1, [r3, r2]
   3182e:	e005      	b.n	3183c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31830:	687b      	ldr	r3, [r7, #4]
   31832:	2241      	movs	r2, #65	; 0x41
   31834:	5c99      	ldrb	r1, [r3, r2]
   31836:	2002      	movs	r0, #2
   31838:	4381      	bics	r1, r0
   3183a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   3183c:	4b06      	ldr	r3, [pc, #24]	; (31858 <_http_client_handle_header+0x278>)
   3183e:	681b      	ldr	r3, [r3, #0]
   31840:	0018      	movs	r0, r3
   31842:	4b08      	ldr	r3, [pc, #32]	; (31864 <_http_client_handle_header+0x284>)
   31844:	4798      	blx	r3
   31846:	0002      	movs	r2, r0
   31848:	69bb      	ldr	r3, [r7, #24]
   3184a:	189b      	adds	r3, r3, r2
   3184c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3184e:	e6ce      	b.n	315ee <_http_client_handle_header+0xe>
	}
}
   31850:	0018      	movs	r0, r3
   31852:	46bd      	mov	sp, r7
   31854:	b00b      	add	sp, #44	; 0x2c
   31856:	bd90      	pop	{r4, r7, pc}
   31858:	20000114 	.word	0x20000114
   3185c:	00034479 	.word	0x00034479
   31860:	00031c45 	.word	0x00031c45
   31864:	000343fb 	.word	0x000343fb
   31868:	00034409 	.word	0x00034409
   3186c:	000391a8 	.word	0x000391a8
   31870:	00033f91 	.word	0x00033f91
   31874:	000391cc 	.word	0x000391cc
   31878:	00030c5d 	.word	0x00030c5d
   3187c:	000391e0 	.word	0x000391e0
   31880:	000391f0 	.word	0x000391f0

00031884 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31884:	b580      	push	{r7, lr}
   31886:	b088      	sub	sp, #32
   31888:	af00      	add	r7, sp, #0
   3188a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   3188c:	687b      	ldr	r3, [r7, #4]
   3188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31890:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   31892:	2300      	movs	r3, #0
   31894:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31896:	687b      	ldr	r3, [r7, #4]
   31898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3189a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   3189c:	687b      	ldr	r3, [r7, #4]
   3189e:	22e0      	movs	r2, #224	; 0xe0
   318a0:	589b      	ldr	r3, [r3, r2]
   318a2:	2b00      	cmp	r3, #0
   318a4:	db71      	blt.n	3198a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   318a6:	687b      	ldr	r3, [r7, #4]
   318a8:	22e0      	movs	r2, #224	; 0xe0
   318aa:	589b      	ldr	r3, [r3, r2]
   318ac:	2b00      	cmp	r3, #0
   318ae:	d134      	bne.n	3191a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   318b0:	687b      	ldr	r3, [r7, #4]
   318b2:	22d8      	movs	r2, #216	; 0xd8
   318b4:	2100      	movs	r1, #0
   318b6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   318b8:	687b      	ldr	r3, [r7, #4]
   318ba:	22e4      	movs	r2, #228	; 0xe4
   318bc:	2100      	movs	r1, #0
   318be:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   318c0:	2308      	movs	r3, #8
   318c2:	18fb      	adds	r3, r7, r3
   318c4:	2201      	movs	r2, #1
   318c6:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   318c8:	2308      	movs	r3, #8
   318ca:	18fb      	adds	r3, r7, r3
   318cc:	2200      	movs	r2, #0
   318ce:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   318d0:	2308      	movs	r3, #8
   318d2:	18fb      	adds	r3, r7, r3
   318d4:	2200      	movs	r2, #0
   318d6:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   318d8:	687b      	ldr	r3, [r7, #4]
   318da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318dc:	2b00      	cmp	r3, #0
   318de:	d006      	beq.n	318ee <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   318e0:	687b      	ldr	r3, [r7, #4]
   318e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318e4:	2208      	movs	r2, #8
   318e6:	18ba      	adds	r2, r7, r2
   318e8:	6878      	ldr	r0, [r7, #4]
   318ea:	2103      	movs	r1, #3
   318ec:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   318ee:	687b      	ldr	r3, [r7, #4]
   318f0:	2241      	movs	r2, #65	; 0x41
   318f2:	5c9b      	ldrb	r3, [r3, r2]
   318f4:	2202      	movs	r2, #2
   318f6:	4013      	ands	r3, r2
   318f8:	b2db      	uxtb	r3, r3
   318fa:	2b00      	cmp	r3, #0
   318fc:	d105      	bne.n	3190a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   318fe:	687b      	ldr	r3, [r7, #4]
   31900:	2100      	movs	r1, #0
   31902:	0018      	movs	r0, r3
   31904:	4b62      	ldr	r3, [pc, #392]	; (31a90 <_http_client_read_chuked_entity+0x20c>)
   31906:	4798      	blx	r3
					return;
   31908:	e0bf      	b.n	31a8a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3190a:	697b      	ldr	r3, [r7, #20]
   3190c:	1c9a      	adds	r2, r3, #2
   3190e:	687b      	ldr	r3, [r7, #4]
   31910:	0011      	movs	r1, r2
   31912:	0018      	movs	r0, r3
   31914:	4b5f      	ldr	r3, [pc, #380]	; (31a94 <_http_client_read_chuked_entity+0x210>)
   31916:	4798      	blx	r3
   31918:	e0b2      	b.n	31a80 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   3191a:	687b      	ldr	r3, [r7, #4]
   3191c:	22e0      	movs	r2, #224	; 0xe0
   3191e:	589a      	ldr	r2, [r3, r2]
   31920:	69fb      	ldr	r3, [r7, #28]
   31922:	429a      	cmp	r2, r3
   31924:	dd00      	ble.n	31928 <_http_client_read_chuked_entity+0xa4>
   31926:	e0ab      	b.n	31a80 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31928:	687b      	ldr	r3, [r7, #4]
   3192a:	22e0      	movs	r2, #224	; 0xe0
   3192c:	589b      	ldr	r3, [r3, r2]
   3192e:	001a      	movs	r2, r3
   31930:	2308      	movs	r3, #8
   31932:	18fb      	adds	r3, r7, r3
   31934:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31936:	2308      	movs	r3, #8
   31938:	18fb      	adds	r3, r7, r3
   3193a:	697a      	ldr	r2, [r7, #20]
   3193c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3193e:	2308      	movs	r3, #8
   31940:	18fb      	adds	r3, r7, r3
   31942:	2200      	movs	r2, #0
   31944:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31946:	687b      	ldr	r3, [r7, #4]
   31948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3194a:	2b00      	cmp	r3, #0
   3194c:	d006      	beq.n	3195c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3194e:	687b      	ldr	r3, [r7, #4]
   31950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31952:	2208      	movs	r2, #8
   31954:	18ba      	adds	r2, r7, r2
   31956:	6878      	ldr	r0, [r7, #4]
   31958:	2103      	movs	r1, #3
   3195a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   3195c:	687b      	ldr	r3, [r7, #4]
   3195e:	22e0      	movs	r2, #224	; 0xe0
   31960:	589b      	ldr	r3, [r3, r2]
   31962:	3302      	adds	r3, #2
   31964:	697a      	ldr	r2, [r7, #20]
   31966:	18d2      	adds	r2, r2, r3
   31968:	687b      	ldr	r3, [r7, #4]
   3196a:	0011      	movs	r1, r2
   3196c:	0018      	movs	r0, r3
   3196e:	4b49      	ldr	r3, [pc, #292]	; (31a94 <_http_client_read_chuked_entity+0x210>)
   31970:	4798      	blx	r3
				length = (int)module->recved_size;
   31972:	687b      	ldr	r3, [r7, #4]
   31974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31976:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31978:	687b      	ldr	r3, [r7, #4]
   3197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3197c:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3197e:	687b      	ldr	r3, [r7, #4]
   31980:	21e0      	movs	r1, #224	; 0xe0
   31982:	2201      	movs	r2, #1
   31984:	4252      	negs	r2, r2
   31986:	505a      	str	r2, [r3, r1]
   31988:	e07a      	b.n	31a80 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   3198a:	687b      	ldr	r3, [r7, #4]
   3198c:	22e0      	movs	r2, #224	; 0xe0
   3198e:	2100      	movs	r1, #0
   31990:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   31992:	e05a      	b.n	31a4a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31994:	697b      	ldr	r3, [r7, #20]
   31996:	781b      	ldrb	r3, [r3, #0]
   31998:	2b0a      	cmp	r3, #10
   3199a:	d106      	bne.n	319aa <_http_client_read_chuked_entity+0x126>
					buffer++;
   3199c:	697b      	ldr	r3, [r7, #20]
   3199e:	3301      	adds	r3, #1
   319a0:	617b      	str	r3, [r7, #20]
					length--;
   319a2:	69fb      	ldr	r3, [r7, #28]
   319a4:	3b01      	subs	r3, #1
   319a6:	61fb      	str	r3, [r7, #28]
					break;
   319a8:	e052      	b.n	31a50 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   319aa:	69bb      	ldr	r3, [r7, #24]
   319ac:	2b00      	cmp	r3, #0
   319ae:	d145      	bne.n	31a3c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   319b0:	697b      	ldr	r3, [r7, #20]
   319b2:	781b      	ldrb	r3, [r3, #0]
   319b4:	2b2f      	cmp	r3, #47	; 0x2f
   319b6:	d910      	bls.n	319da <_http_client_read_chuked_entity+0x156>
   319b8:	697b      	ldr	r3, [r7, #20]
   319ba:	781b      	ldrb	r3, [r3, #0]
   319bc:	2b39      	cmp	r3, #57	; 0x39
   319be:	d80c      	bhi.n	319da <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   319c0:	687b      	ldr	r3, [r7, #4]
   319c2:	22e0      	movs	r2, #224	; 0xe0
   319c4:	589b      	ldr	r3, [r3, r2]
   319c6:	011b      	lsls	r3, r3, #4
   319c8:	697a      	ldr	r2, [r7, #20]
   319ca:	7812      	ldrb	r2, [r2, #0]
   319cc:	189b      	adds	r3, r3, r2
   319ce:	3b30      	subs	r3, #48	; 0x30
   319d0:	001a      	movs	r2, r3
   319d2:	687b      	ldr	r3, [r7, #4]
   319d4:	21e0      	movs	r1, #224	; 0xe0
   319d6:	505a      	str	r2, [r3, r1]
   319d8:	e031      	b.n	31a3e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   319da:	697b      	ldr	r3, [r7, #20]
   319dc:	781b      	ldrb	r3, [r3, #0]
   319de:	2b60      	cmp	r3, #96	; 0x60
   319e0:	d910      	bls.n	31a04 <_http_client_read_chuked_entity+0x180>
   319e2:	697b      	ldr	r3, [r7, #20]
   319e4:	781b      	ldrb	r3, [r3, #0]
   319e6:	2b66      	cmp	r3, #102	; 0x66
   319e8:	d80c      	bhi.n	31a04 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   319ea:	687b      	ldr	r3, [r7, #4]
   319ec:	22e0      	movs	r2, #224	; 0xe0
   319ee:	589b      	ldr	r3, [r3, r2]
   319f0:	011b      	lsls	r3, r3, #4
   319f2:	697a      	ldr	r2, [r7, #20]
   319f4:	7812      	ldrb	r2, [r2, #0]
   319f6:	189b      	adds	r3, r3, r2
   319f8:	3b61      	subs	r3, #97	; 0x61
   319fa:	001a      	movs	r2, r3
   319fc:	687b      	ldr	r3, [r7, #4]
   319fe:	21e0      	movs	r1, #224	; 0xe0
   31a00:	505a      	str	r2, [r3, r1]
   31a02:	e01c      	b.n	31a3e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31a04:	697b      	ldr	r3, [r7, #20]
   31a06:	781b      	ldrb	r3, [r3, #0]
   31a08:	2b40      	cmp	r3, #64	; 0x40
   31a0a:	d910      	bls.n	31a2e <_http_client_read_chuked_entity+0x1aa>
   31a0c:	697b      	ldr	r3, [r7, #20]
   31a0e:	781b      	ldrb	r3, [r3, #0]
   31a10:	2b46      	cmp	r3, #70	; 0x46
   31a12:	d80c      	bhi.n	31a2e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31a14:	687b      	ldr	r3, [r7, #4]
   31a16:	22e0      	movs	r2, #224	; 0xe0
   31a18:	589b      	ldr	r3, [r3, r2]
   31a1a:	011b      	lsls	r3, r3, #4
   31a1c:	697a      	ldr	r2, [r7, #20]
   31a1e:	7812      	ldrb	r2, [r2, #0]
   31a20:	189b      	adds	r3, r3, r2
   31a22:	3b41      	subs	r3, #65	; 0x41
   31a24:	001a      	movs	r2, r3
   31a26:	687b      	ldr	r3, [r7, #4]
   31a28:	21e0      	movs	r1, #224	; 0xe0
   31a2a:	505a      	str	r2, [r3, r1]
   31a2c:	e007      	b.n	31a3e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   31a2e:	697b      	ldr	r3, [r7, #20]
   31a30:	781b      	ldrb	r3, [r3, #0]
   31a32:	2b3b      	cmp	r3, #59	; 0x3b
   31a34:	d103      	bne.n	31a3e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31a36:	2301      	movs	r3, #1
   31a38:	61bb      	str	r3, [r7, #24]
   31a3a:	e000      	b.n	31a3e <_http_client_read_chuked_entity+0x1ba>
					continue;
   31a3c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   31a3e:	697b      	ldr	r3, [r7, #20]
   31a40:	3301      	adds	r3, #1
   31a42:	617b      	str	r3, [r7, #20]
   31a44:	69fb      	ldr	r3, [r7, #28]
   31a46:	3b01      	subs	r3, #1
   31a48:	61fb      	str	r3, [r7, #28]
   31a4a:	69fb      	ldr	r3, [r7, #28]
   31a4c:	2b00      	cmp	r3, #0
   31a4e:	dca1      	bgt.n	31994 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31a50:	687b      	ldr	r3, [r7, #4]
   31a52:	22e0      	movs	r2, #224	; 0xe0
   31a54:	589a      	ldr	r2, [r3, r2]
   31a56:	687b      	ldr	r3, [r7, #4]
   31a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31a5a:	429a      	cmp	r2, r3
   31a5c:	dd07      	ble.n	31a6e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   31a5e:	238b      	movs	r3, #139	; 0x8b
   31a60:	425a      	negs	r2, r3
   31a62:	687b      	ldr	r3, [r7, #4]
   31a64:	0011      	movs	r1, r2
   31a66:	0018      	movs	r0, r3
   31a68:	4b09      	ldr	r3, [pc, #36]	; (31a90 <_http_client_read_chuked_entity+0x20c>)
   31a6a:	4798      	blx	r3
				return;
   31a6c:	e00d      	b.n	31a8a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   31a6e:	69fb      	ldr	r3, [r7, #28]
   31a70:	2b00      	cmp	r3, #0
   31a72:	d105      	bne.n	31a80 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31a74:	687b      	ldr	r3, [r7, #4]
   31a76:	21e0      	movs	r1, #224	; 0xe0
   31a78:	2201      	movs	r2, #1
   31a7a:	4252      	negs	r2, r2
   31a7c:	505a      	str	r2, [r3, r1]
				return;
   31a7e:	e004      	b.n	31a8a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31a80:	687b      	ldr	r3, [r7, #4]
   31a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31a84:	2b00      	cmp	r3, #0
   31a86:	d000      	beq.n	31a8a <_http_client_read_chuked_entity+0x206>
   31a88:	e708      	b.n	3189c <_http_client_read_chuked_entity+0x18>
}
   31a8a:	46bd      	mov	sp, r7
   31a8c:	b008      	add	sp, #32
   31a8e:	bd80      	pop	{r7, pc}
   31a90:	00030c5d 	.word	0x00030c5d
   31a94:	00031c45 	.word	0x00031c45

00031a98 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31a98:	b580      	push	{r7, lr}
   31a9a:	b086      	sub	sp, #24
   31a9c:	af00      	add	r7, sp, #0
   31a9e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31aa0:	687b      	ldr	r3, [r7, #4]
   31aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31aa4:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31aa6:	687b      	ldr	r3, [r7, #4]
   31aa8:	22dc      	movs	r2, #220	; 0xdc
   31aaa:	589b      	ldr	r3, [r3, r2]
   31aac:	2b00      	cmp	r3, #0
   31aae:	db58      	blt.n	31b62 <_http_client_handle_entity+0xca>
   31ab0:	687b      	ldr	r3, [r7, #4]
   31ab2:	22dc      	movs	r2, #220	; 0xdc
   31ab4:	589a      	ldr	r2, [r3, r2]
   31ab6:	687b      	ldr	r3, [r7, #4]
   31ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31aba:	429a      	cmp	r2, r3
   31abc:	dc51      	bgt.n	31b62 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   31abe:	687b      	ldr	r3, [r7, #4]
   31ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31ac2:	0019      	movs	r1, r3
   31ac4:	687b      	ldr	r3, [r7, #4]
   31ac6:	22dc      	movs	r2, #220	; 0xdc
   31ac8:	589b      	ldr	r3, [r3, r2]
   31aca:	4299      	cmp	r1, r3
   31acc:	da00      	bge.n	31ad0 <_http_client_handle_entity+0x38>
   31ace:	e0a9      	b.n	31c24 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31ad0:	687b      	ldr	r3, [r7, #4]
   31ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ad4:	2b00      	cmp	r3, #0
   31ad6:	d020      	beq.n	31b1a <_http_client_handle_entity+0x82>
   31ad8:	687b      	ldr	r3, [r7, #4]
   31ada:	22e4      	movs	r2, #228	; 0xe4
   31adc:	5a9b      	ldrh	r3, [r3, r2]
   31ade:	2b00      	cmp	r3, #0
   31ae0:	d01b      	beq.n	31b1a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31ae2:	687b      	ldr	r3, [r7, #4]
   31ae4:	22e4      	movs	r2, #228	; 0xe4
   31ae6:	5a9a      	ldrh	r2, [r3, r2]
   31ae8:	2308      	movs	r3, #8
   31aea:	18fb      	adds	r3, r7, r3
   31aec:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   31aee:	2308      	movs	r3, #8
   31af0:	18fb      	adds	r3, r7, r3
   31af2:	2200      	movs	r2, #0
   31af4:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31af6:	687b      	ldr	r3, [r7, #4]
   31af8:	22dc      	movs	r2, #220	; 0xdc
   31afa:	589b      	ldr	r3, [r3, r2]
   31afc:	001a      	movs	r2, r3
   31afe:	2308      	movs	r3, #8
   31b00:	18fb      	adds	r3, r7, r3
   31b02:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31b04:	2308      	movs	r3, #8
   31b06:	18fb      	adds	r3, r7, r3
   31b08:	697a      	ldr	r2, [r7, #20]
   31b0a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31b0c:	687b      	ldr	r3, [r7, #4]
   31b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b10:	2208      	movs	r2, #8
   31b12:	18ba      	adds	r2, r7, r2
   31b14:	6878      	ldr	r0, [r7, #4]
   31b16:	2102      	movs	r1, #2
   31b18:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   31b1a:	687b      	ldr	r3, [r7, #4]
   31b1c:	22d8      	movs	r2, #216	; 0xd8
   31b1e:	2100      	movs	r1, #0
   31b20:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31b22:	687b      	ldr	r3, [r7, #4]
   31b24:	22e4      	movs	r2, #228	; 0xe4
   31b26:	2100      	movs	r1, #0
   31b28:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31b2a:	687b      	ldr	r3, [r7, #4]
   31b2c:	2241      	movs	r2, #65	; 0x41
   31b2e:	5c9b      	ldrb	r3, [r3, r2]
   31b30:	2202      	movs	r2, #2
   31b32:	4013      	ands	r3, r2
   31b34:	b2db      	uxtb	r3, r3
   31b36:	2b00      	cmp	r3, #0
   31b38:	d105      	bne.n	31b46 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31b3a:	687b      	ldr	r3, [r7, #4]
   31b3c:	2100      	movs	r1, #0
   31b3e:	0018      	movs	r0, r3
   31b40:	4b3b      	ldr	r3, [pc, #236]	; (31c30 <_http_client_handle_entity+0x198>)
   31b42:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31b44:	e06e      	b.n	31c24 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31b46:	687b      	ldr	r3, [r7, #4]
   31b48:	22dc      	movs	r2, #220	; 0xdc
   31b4a:	589b      	ldr	r3, [r3, r2]
   31b4c:	001a      	movs	r2, r3
   31b4e:	697b      	ldr	r3, [r7, #20]
   31b50:	189a      	adds	r2, r3, r2
   31b52:	687b      	ldr	r3, [r7, #4]
   31b54:	0011      	movs	r1, r2
   31b56:	0018      	movs	r0, r3
   31b58:	4b36      	ldr	r3, [pc, #216]	; (31c34 <_http_client_handle_entity+0x19c>)
   31b5a:	4798      	blx	r3
				return module->recved_size;
   31b5c:	687b      	ldr	r3, [r7, #4]
   31b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b60:	e061      	b.n	31c26 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31b62:	687b      	ldr	r3, [r7, #4]
   31b64:	22dc      	movs	r2, #220	; 0xdc
   31b66:	589b      	ldr	r3, [r3, r2]
   31b68:	2b00      	cmp	r3, #0
   31b6a:	db57      	blt.n	31c1c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   31b6c:	687b      	ldr	r3, [r7, #4]
   31b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31b70:	2308      	movs	r3, #8
   31b72:	18fb      	adds	r3, r7, r3
   31b74:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31b76:	2308      	movs	r3, #8
   31b78:	18fb      	adds	r3, r7, r3
   31b7a:	697a      	ldr	r2, [r7, #20]
   31b7c:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   31b7e:	687b      	ldr	r3, [r7, #4]
   31b80:	22e0      	movs	r2, #224	; 0xe0
   31b82:	589a      	ldr	r2, [r3, r2]
   31b84:	687b      	ldr	r3, [r7, #4]
   31b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b88:	18d2      	adds	r2, r2, r3
   31b8a:	687b      	ldr	r3, [r7, #4]
   31b8c:	21e0      	movs	r1, #224	; 0xe0
   31b8e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   31b90:	687b      	ldr	r3, [r7, #4]
   31b92:	22dc      	movs	r2, #220	; 0xdc
   31b94:	589a      	ldr	r2, [r3, r2]
   31b96:	687b      	ldr	r3, [r7, #4]
   31b98:	21e0      	movs	r1, #224	; 0xe0
   31b9a:	585b      	ldr	r3, [r3, r1]
   31b9c:	429a      	cmp	r2, r3
   31b9e:	dc0c      	bgt.n	31bba <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31ba0:	687b      	ldr	r3, [r7, #4]
   31ba2:	22d8      	movs	r2, #216	; 0xd8
   31ba4:	2100      	movs	r1, #0
   31ba6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31ba8:	687b      	ldr	r3, [r7, #4]
   31baa:	22e4      	movs	r2, #228	; 0xe4
   31bac:	2100      	movs	r1, #0
   31bae:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31bb0:	2308      	movs	r3, #8
   31bb2:	18fb      	adds	r3, r7, r3
   31bb4:	2201      	movs	r2, #1
   31bb6:	721a      	strb	r2, [r3, #8]
   31bb8:	e003      	b.n	31bc2 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   31bba:	2308      	movs	r3, #8
   31bbc:	18fb      	adds	r3, r7, r3
   31bbe:	2200      	movs	r2, #0
   31bc0:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31bc2:	687b      	ldr	r3, [r7, #4]
   31bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bc6:	2b00      	cmp	r3, #0
   31bc8:	d006      	beq.n	31bd8 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31bca:	687b      	ldr	r3, [r7, #4]
   31bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bce:	2208      	movs	r2, #8
   31bd0:	18ba      	adds	r2, r7, r2
   31bd2:	6878      	ldr	r0, [r7, #4]
   31bd4:	2103      	movs	r1, #3
   31bd6:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31bd8:	2308      	movs	r3, #8
   31bda:	18fb      	adds	r3, r7, r3
   31bdc:	7a1b      	ldrb	r3, [r3, #8]
   31bde:	2b01      	cmp	r3, #1
   31be0:	d112      	bne.n	31c08 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31be2:	687b      	ldr	r3, [r7, #4]
   31be4:	2241      	movs	r2, #65	; 0x41
   31be6:	5c9b      	ldrb	r3, [r3, r2]
   31be8:	2202      	movs	r2, #2
   31bea:	4013      	ands	r3, r2
   31bec:	b2db      	uxtb	r3, r3
   31bee:	2b00      	cmp	r3, #0
   31bf0:	d10a      	bne.n	31c08 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31bf2:	4b11      	ldr	r3, [pc, #68]	; (31c38 <_http_client_handle_entity+0x1a0>)
   31bf4:	0018      	movs	r0, r3
   31bf6:	4b11      	ldr	r3, [pc, #68]	; (31c3c <_http_client_handle_entity+0x1a4>)
   31bf8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   31bfa:	687b      	ldr	r3, [r7, #4]
   31bfc:	2100      	movs	r1, #0
   31bfe:	0018      	movs	r0, r3
   31c00:	4b0b      	ldr	r3, [pc, #44]	; (31c30 <_http_client_handle_entity+0x198>)
   31c02:	4798      	blx	r3
					return 0;
   31c04:	2300      	movs	r3, #0
   31c06:	e00e      	b.n	31c26 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31c08:	687b      	ldr	r3, [r7, #4]
   31c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31c0c:	697a      	ldr	r2, [r7, #20]
   31c0e:	18d2      	adds	r2, r2, r3
   31c10:	687b      	ldr	r3, [r7, #4]
   31c12:	0011      	movs	r1, r2
   31c14:	0018      	movs	r0, r3
   31c16:	4b07      	ldr	r3, [pc, #28]	; (31c34 <_http_client_handle_entity+0x19c>)
   31c18:	4798      	blx	r3
   31c1a:	e003      	b.n	31c24 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   31c1c:	687b      	ldr	r3, [r7, #4]
   31c1e:	0018      	movs	r0, r3
   31c20:	4b07      	ldr	r3, [pc, #28]	; (31c40 <_http_client_handle_entity+0x1a8>)
   31c22:	4798      	blx	r3
		}
	}

	return 0;
   31c24:	2300      	movs	r3, #0
}
   31c26:	0018      	movs	r0, r3
   31c28:	46bd      	mov	sp, r7
   31c2a:	b006      	add	sp, #24
   31c2c:	bd80      	pop	{r7, pc}
   31c2e:	46c0      	nop			; (mov r8, r8)
   31c30:	00030c5d 	.word	0x00030c5d
   31c34:	00031c45 	.word	0x00031c45
   31c38:	000391f8 	.word	0x000391f8
   31c3c:	00034265 	.word	0x00034265
   31c40:	00031885 	.word	0x00031885

00031c44 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31c44:	b580      	push	{r7, lr}
   31c46:	b084      	sub	sp, #16
   31c48:	af00      	add	r7, sp, #0
   31c4a:	6078      	str	r0, [r7, #4]
   31c4c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   31c4e:	687b      	ldr	r3, [r7, #4]
   31c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31c52:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31c54:	687b      	ldr	r3, [r7, #4]
   31c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31c58:	001a      	movs	r2, r3
   31c5a:	683b      	ldr	r3, [r7, #0]
   31c5c:	1ad2      	subs	r2, r2, r3
   31c5e:	68fb      	ldr	r3, [r7, #12]
   31c60:	18d3      	adds	r3, r2, r3
   31c62:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31c64:	68bb      	ldr	r3, [r7, #8]
   31c66:	2b00      	cmp	r3, #0
   31c68:	dd09      	ble.n	31c7e <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   31c6a:	68ba      	ldr	r2, [r7, #8]
   31c6c:	6839      	ldr	r1, [r7, #0]
   31c6e:	68fb      	ldr	r3, [r7, #12]
   31c70:	0018      	movs	r0, r3
   31c72:	4b06      	ldr	r3, [pc, #24]	; (31c8c <_http_client_move_buffer+0x48>)
   31c74:	4798      	blx	r3
		module->recved_size = remain;
   31c76:	68ba      	ldr	r2, [r7, #8]
   31c78:	687b      	ldr	r3, [r7, #4]
   31c7a:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   31c7c:	e002      	b.n	31c84 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   31c7e:	687b      	ldr	r3, [r7, #4]
   31c80:	2200      	movs	r2, #0
   31c82:	645a      	str	r2, [r3, #68]	; 0x44
}
   31c84:	46c0      	nop			; (mov r8, r8)
   31c86:	46bd      	mov	sp, r7
   31c88:	b004      	add	sp, #16
   31c8a:	bd80      	pop	{r7, pc}
   31c8c:	0003401f 	.word	0x0003401f

00031c90 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   31c90:	b580      	push	{r7, lr}
   31c92:	b084      	sub	sp, #16
   31c94:	af00      	add	r7, sp, #0
   31c96:	60f8      	str	r0, [r7, #12]
   31c98:	60b9      	str	r1, [r7, #8]
   31c9a:	607a      	str	r2, [r7, #4]
   31c9c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   31c9e:	68fb      	ldr	r3, [r7, #12]
   31ca0:	687a      	ldr	r2, [r7, #4]
   31ca2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31ca4:	68fb      	ldr	r3, [r7, #12]
   31ca6:	68ba      	ldr	r2, [r7, #8]
   31ca8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   31caa:	68fb      	ldr	r3, [r7, #12]
   31cac:	2200      	movs	r2, #0
   31cae:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31cb0:	68fb      	ldr	r3, [r7, #12]
   31cb2:	683a      	ldr	r2, [r7, #0]
   31cb4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31cb6:	68fb      	ldr	r3, [r7, #12]
   31cb8:	69ba      	ldr	r2, [r7, #24]
   31cba:	60da      	str	r2, [r3, #12]
}
   31cbc:	46c0      	nop			; (mov r8, r8)
   31cbe:	46bd      	mov	sp, r7
   31cc0:	b004      	add	sp, #16
   31cc2:	bd80      	pop	{r7, pc}

00031cc4 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31cc4:	b580      	push	{r7, lr}
   31cc6:	b084      	sub	sp, #16
   31cc8:	af00      	add	r7, sp, #0
   31cca:	6078      	str	r0, [r7, #4]
   31ccc:	000a      	movs	r2, r1
   31cce:	1cfb      	adds	r3, r7, #3
   31cd0:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31cd2:	687b      	ldr	r3, [r7, #4]
   31cd4:	681a      	ldr	r2, [r3, #0]
   31cd6:	687b      	ldr	r3, [r7, #4]
   31cd8:	685b      	ldr	r3, [r3, #4]
   31cda:	1ad3      	subs	r3, r2, r3
   31cdc:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   31cde:	68fb      	ldr	r3, [r7, #12]
   31ce0:	2b00      	cmp	r3, #0
   31ce2:	dc03      	bgt.n	31cec <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31ce4:	687b      	ldr	r3, [r7, #4]
   31ce6:	0018      	movs	r0, r3
   31ce8:	4b08      	ldr	r3, [pc, #32]	; (31d0c <stream_writer_send_8+0x48>)
   31cea:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   31cec:	687b      	ldr	r3, [r7, #4]
   31cee:	6919      	ldr	r1, [r3, #16]
   31cf0:	687b      	ldr	r3, [r7, #4]
   31cf2:	685b      	ldr	r3, [r3, #4]
   31cf4:	1c58      	adds	r0, r3, #1
   31cf6:	687a      	ldr	r2, [r7, #4]
   31cf8:	6050      	str	r0, [r2, #4]
   31cfa:	18cb      	adds	r3, r1, r3
   31cfc:	1cfa      	adds	r2, r7, #3
   31cfe:	7812      	ldrb	r2, [r2, #0]
   31d00:	701a      	strb	r2, [r3, #0]
}
   31d02:	46c0      	nop			; (mov r8, r8)
   31d04:	46bd      	mov	sp, r7
   31d06:	b004      	add	sp, #16
   31d08:	bd80      	pop	{r7, pc}
   31d0a:	46c0      	nop			; (mov r8, r8)
   31d0c:	00031d4d 	.word	0x00031d4d

00031d10 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31d10:	b580      	push	{r7, lr}
   31d12:	b084      	sub	sp, #16
   31d14:	af00      	add	r7, sp, #0
   31d16:	60f8      	str	r0, [r7, #12]
   31d18:	60b9      	str	r1, [r7, #8]
   31d1a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   31d1c:	e00d      	b.n	31d3a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   31d1e:	68bb      	ldr	r3, [r7, #8]
   31d20:	781b      	ldrb	r3, [r3, #0]
   31d22:	b25a      	sxtb	r2, r3
   31d24:	68fb      	ldr	r3, [r7, #12]
   31d26:	0011      	movs	r1, r2
   31d28:	0018      	movs	r0, r3
   31d2a:	4b07      	ldr	r3, [pc, #28]	; (31d48 <stream_writer_send_buffer+0x38>)
   31d2c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   31d2e:	687b      	ldr	r3, [r7, #4]
   31d30:	3b01      	subs	r3, #1
   31d32:	607b      	str	r3, [r7, #4]
   31d34:	68bb      	ldr	r3, [r7, #8]
   31d36:	3301      	adds	r3, #1
   31d38:	60bb      	str	r3, [r7, #8]
   31d3a:	687b      	ldr	r3, [r7, #4]
   31d3c:	2b00      	cmp	r3, #0
   31d3e:	d1ee      	bne.n	31d1e <stream_writer_send_buffer+0xe>
	}
}
   31d40:	46c0      	nop			; (mov r8, r8)
   31d42:	46bd      	mov	sp, r7
   31d44:	b004      	add	sp, #16
   31d46:	bd80      	pop	{r7, pc}
   31d48:	00031cc5 	.word	0x00031cc5

00031d4c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   31d4c:	b590      	push	{r4, r7, lr}
   31d4e:	b083      	sub	sp, #12
   31d50:	af00      	add	r7, sp, #0
   31d52:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31d54:	687b      	ldr	r3, [r7, #4]
   31d56:	685b      	ldr	r3, [r3, #4]
   31d58:	2b00      	cmp	r3, #0
   31d5a:	d00c      	beq.n	31d76 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   31d5c:	687b      	ldr	r3, [r7, #4]
   31d5e:	689c      	ldr	r4, [r3, #8]
   31d60:	687b      	ldr	r3, [r7, #4]
   31d62:	68d8      	ldr	r0, [r3, #12]
   31d64:	687b      	ldr	r3, [r7, #4]
   31d66:	6919      	ldr	r1, [r3, #16]
   31d68:	687b      	ldr	r3, [r7, #4]
   31d6a:	685b      	ldr	r3, [r3, #4]
   31d6c:	001a      	movs	r2, r3
   31d6e:	47a0      	blx	r4
		writer->written = 0;
   31d70:	687b      	ldr	r3, [r7, #4]
   31d72:	2200      	movs	r2, #0
   31d74:	605a      	str	r2, [r3, #4]
	}
}
   31d76:	46c0      	nop			; (mov r8, r8)
   31d78:	46bd      	mov	sp, r7
   31d7a:	b003      	add	sp, #12
   31d7c:	bd90      	pop	{r4, r7, pc}
	...

00031d80 <system_cpu_clock_get_hz>:
{
   31d80:	b580      	push	{r7, lr}
   31d82:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   31d84:	2000      	movs	r0, #0
   31d86:	4b05      	ldr	r3, [pc, #20]	; (31d9c <system_cpu_clock_get_hz+0x1c>)
   31d88:	4798      	blx	r3
   31d8a:	0002      	movs	r2, r0
   31d8c:	4b04      	ldr	r3, [pc, #16]	; (31da0 <system_cpu_clock_get_hz+0x20>)
   31d8e:	7a1b      	ldrb	r3, [r3, #8]
   31d90:	b2db      	uxtb	r3, r3
   31d92:	40da      	lsrs	r2, r3
   31d94:	0013      	movs	r3, r2
}
   31d96:	0018      	movs	r0, r3
   31d98:	46bd      	mov	sp, r7
   31d9a:	bd80      	pop	{r7, pc}
   31d9c:	00029761 	.word	0x00029761
   31da0:	40000400 	.word	0x40000400

00031da4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   31da4:	b580      	push	{r7, lr}
   31da6:	b084      	sub	sp, #16
   31da8:	af00      	add	r7, sp, #0
   31daa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   31dac:	687b      	ldr	r3, [r7, #4]
   31dae:	681b      	ldr	r3, [r3, #0]
   31db0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   31db2:	46c0      	nop			; (mov r8, r8)
   31db4:	68fb      	ldr	r3, [r7, #12]
   31db6:	689b      	ldr	r3, [r3, #8]
   31db8:	2202      	movs	r2, #2
   31dba:	4013      	ands	r3, r2
   31dbc:	d1fa      	bne.n	31db4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   31dbe:	68fb      	ldr	r3, [r7, #12]
   31dc0:	681b      	ldr	r3, [r3, #0]
   31dc2:	2202      	movs	r2, #2
   31dc4:	431a      	orrs	r2, r3
   31dc6:	68fb      	ldr	r3, [r7, #12]
   31dc8:	601a      	str	r2, [r3, #0]
}
   31dca:	46c0      	nop			; (mov r8, r8)
   31dcc:	46bd      	mov	sp, r7
   31dce:	b004      	add	sp, #16
   31dd0:	bd80      	pop	{r7, pc}
	...

00031dd4 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   31dd4:	b580      	push	{r7, lr}
   31dd6:	b082      	sub	sp, #8
   31dd8:	af00      	add	r7, sp, #0
   31dda:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   31ddc:	4b04      	ldr	r3, [pc, #16]	; (31df0 <sw_timer_tcc_callback+0x1c>)
   31dde:	681b      	ldr	r3, [r3, #0]
   31de0:	1c5a      	adds	r2, r3, #1
   31de2:	4b03      	ldr	r3, [pc, #12]	; (31df0 <sw_timer_tcc_callback+0x1c>)
   31de4:	601a      	str	r2, [r3, #0]
}
   31de6:	46c0      	nop			; (mov r8, r8)
   31de8:	46bd      	mov	sp, r7
   31dea:	b002      	add	sp, #8
   31dec:	bd80      	pop	{r7, pc}
   31dee:	46c0      	nop			; (mov r8, r8)
   31df0:	2000456c 	.word	0x2000456c

00031df4 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   31df4:	b580      	push	{r7, lr}
   31df6:	b082      	sub	sp, #8
   31df8:	af00      	add	r7, sp, #0
   31dfa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   31dfc:	687b      	ldr	r3, [r7, #4]
   31dfe:	2264      	movs	r2, #100	; 0x64
   31e00:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   31e02:	687b      	ldr	r3, [r7, #4]
   31e04:	2200      	movs	r2, #0
   31e06:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   31e08:	687b      	ldr	r3, [r7, #4]
   31e0a:	2200      	movs	r2, #0
   31e0c:	705a      	strb	r2, [r3, #1]
}
   31e0e:	46c0      	nop			; (mov r8, r8)
   31e10:	46bd      	mov	sp, r7
   31e12:	b002      	add	sp, #8
   31e14:	bd80      	pop	{r7, pc}
	...

00031e18 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   31e18:	b590      	push	{r4, r7, lr}
   31e1a:	b0b1      	sub	sp, #196	; 0xc4
   31e1c:	af00      	add	r7, sp, #0
   31e1e:	6078      	str	r0, [r7, #4]
   31e20:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   31e22:	230c      	movs	r3, #12
   31e24:	18fb      	adds	r3, r7, r3
   31e26:	4a2e      	ldr	r2, [pc, #184]	; (31ee0 <sw_timer_init+0xc8>)
   31e28:	ca13      	ldmia	r2!, {r0, r1, r4}
   31e2a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   31e2c:	683b      	ldr	r3, [r7, #0]
   31e2e:	885b      	ldrh	r3, [r3, #2]
   31e30:	001a      	movs	r2, r3
   31e32:	687b      	ldr	r3, [r7, #4]
   31e34:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31e36:	687b      	ldr	r3, [r7, #4]
   31e38:	3314      	adds	r3, #20
   31e3a:	22bc      	movs	r2, #188	; 0xbc
   31e3c:	18ba      	adds	r2, r7, r2
   31e3e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   31e40:	683b      	ldr	r3, [r7, #0]
   31e42:	781b      	ldrb	r3, [r3, #0]
   31e44:	001a      	movs	r2, r3
   31e46:	230c      	movs	r3, #12
   31e48:	18fb      	adds	r3, r7, r3
   31e4a:	0092      	lsls	r2, r2, #2
   31e4c:	58d2      	ldr	r2, [r2, r3]
   31e4e:	2318      	movs	r3, #24
   31e50:	18fb      	adds	r3, r7, r3
   31e52:	0011      	movs	r1, r2
   31e54:	0018      	movs	r0, r3
   31e56:	4b23      	ldr	r3, [pc, #140]	; (31ee4 <sw_timer_init+0xcc>)
   31e58:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   31e5a:	4b23      	ldr	r3, [pc, #140]	; (31ee8 <sw_timer_init+0xd0>)
   31e5c:	4798      	blx	r3
   31e5e:	0004      	movs	r4, r0
   31e60:	683b      	ldr	r3, [r7, #0]
   31e62:	885b      	ldrh	r3, [r3, #2]
   31e64:	001a      	movs	r2, r3
   31e66:	4b21      	ldr	r3, [pc, #132]	; (31eec <sw_timer_init+0xd4>)
   31e68:	0011      	movs	r1, r2
   31e6a:	22fa      	movs	r2, #250	; 0xfa
   31e6c:	0210      	lsls	r0, r2, #8
   31e6e:	4798      	blx	r3
   31e70:	0003      	movs	r3, r0
   31e72:	001a      	movs	r2, r3
   31e74:	4b1e      	ldr	r3, [pc, #120]	; (31ef0 <sw_timer_init+0xd8>)
   31e76:	0011      	movs	r1, r2
   31e78:	0020      	movs	r0, r4
   31e7a:	4798      	blx	r3
   31e7c:	0003      	movs	r3, r0
   31e7e:	001a      	movs	r2, r3
   31e80:	2318      	movs	r3, #24
   31e82:	18fb      	adds	r3, r7, r3
   31e84:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   31e86:	2318      	movs	r3, #24
   31e88:	18fb      	adds	r3, r7, r3
   31e8a:	2205      	movs	r2, #5
   31e8c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   31e8e:	683b      	ldr	r3, [r7, #0]
   31e90:	781b      	ldrb	r3, [r3, #0]
   31e92:	001a      	movs	r2, r3
   31e94:	230c      	movs	r3, #12
   31e96:	18fb      	adds	r3, r7, r3
   31e98:	0092      	lsls	r2, r2, #2
   31e9a:	58d1      	ldr	r1, [r2, r3]
   31e9c:	2318      	movs	r3, #24
   31e9e:	18fa      	adds	r2, r7, r3
   31ea0:	23bc      	movs	r3, #188	; 0xbc
   31ea2:	18fb      	adds	r3, r7, r3
   31ea4:	681b      	ldr	r3, [r3, #0]
   31ea6:	0018      	movs	r0, r3
   31ea8:	4b12      	ldr	r3, [pc, #72]	; (31ef4 <sw_timer_init+0xdc>)
   31eaa:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31eac:	683b      	ldr	r3, [r7, #0]
   31eae:	785b      	ldrb	r3, [r3, #1]
   31eb0:	3308      	adds	r3, #8
   31eb2:	b2da      	uxtb	r2, r3
   31eb4:	4910      	ldr	r1, [pc, #64]	; (31ef8 <sw_timer_init+0xe0>)
   31eb6:	23bc      	movs	r3, #188	; 0xbc
   31eb8:	18fb      	adds	r3, r7, r3
   31eba:	681b      	ldr	r3, [r3, #0]
   31ebc:	0018      	movs	r0, r3
   31ebe:	4b0f      	ldr	r3, [pc, #60]	; (31efc <sw_timer_init+0xe4>)
   31ec0:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31ec2:	683b      	ldr	r3, [r7, #0]
   31ec4:	785b      	ldrb	r3, [r3, #1]
   31ec6:	3308      	adds	r3, #8
   31ec8:	b2da      	uxtb	r2, r3
   31eca:	23bc      	movs	r3, #188	; 0xbc
   31ecc:	18fb      	adds	r3, r7, r3
   31ece:	681b      	ldr	r3, [r3, #0]
   31ed0:	0011      	movs	r1, r2
   31ed2:	0018      	movs	r0, r3
   31ed4:	4b0a      	ldr	r3, [pc, #40]	; (31f00 <sw_timer_init+0xe8>)
   31ed6:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   31ed8:	46c0      	nop			; (mov r8, r8)
   31eda:	46bd      	mov	sp, r7
   31edc:	b031      	add	sp, #196	; 0xc4
   31ede:	bd90      	pop	{r4, r7, pc}
   31ee0:	00039238 	.word	0x00039238
   31ee4:	00029cf9 	.word	0x00029cf9
   31ee8:	00031d81 	.word	0x00031d81
   31eec:	0003249d 	.word	0x0003249d
   31ef0:	00032389 	.word	0x00032389
   31ef4:	0002a355 	.word	0x0002a355
   31ef8:	00031dd5 	.word	0x00031dd5
   31efc:	0002a76d 	.word	0x0002a76d
   31f00:	0002a7ad 	.word	0x0002a7ad

00031f04 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   31f04:	b580      	push	{r7, lr}
   31f06:	b084      	sub	sp, #16
   31f08:	af00      	add	r7, sp, #0
   31f0a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   31f0c:	687b      	ldr	r3, [r7, #4]
   31f0e:	3314      	adds	r3, #20
   31f10:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   31f12:	68fb      	ldr	r3, [r7, #12]
   31f14:	0018      	movs	r0, r3
   31f16:	4b03      	ldr	r3, [pc, #12]	; (31f24 <sw_timer_enable+0x20>)
   31f18:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   31f1a:	46c0      	nop			; (mov r8, r8)
   31f1c:	46bd      	mov	sp, r7
   31f1e:	b004      	add	sp, #16
   31f20:	bd80      	pop	{r7, pc}
   31f22:	46c0      	nop			; (mov r8, r8)
   31f24:	00031da5 	.word	0x00031da5

00031f28 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31f28:	b580      	push	{r7, lr}
   31f2a:	b086      	sub	sp, #24
   31f2c:	af00      	add	r7, sp, #0
   31f2e:	60f8      	str	r0, [r7, #12]
   31f30:	60b9      	str	r1, [r7, #8]
   31f32:	607a      	str	r2, [r7, #4]
   31f34:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31f36:	2300      	movs	r3, #0
   31f38:	617b      	str	r3, [r7, #20]
   31f3a:	e032      	b.n	31fa2 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   31f3c:	68f9      	ldr	r1, [r7, #12]
   31f3e:	697a      	ldr	r2, [r7, #20]
   31f40:	0013      	movs	r3, r2
   31f42:	009b      	lsls	r3, r3, #2
   31f44:	189b      	adds	r3, r3, r2
   31f46:	009b      	lsls	r3, r3, #2
   31f48:	5c5b      	ldrb	r3, [r3, r1]
   31f4a:	07db      	lsls	r3, r3, #31
   31f4c:	0fdb      	lsrs	r3, r3, #31
   31f4e:	b2db      	uxtb	r3, r3
   31f50:	2b00      	cmp	r3, #0
   31f52:	d123      	bne.n	31f9c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31f54:	697a      	ldr	r2, [r7, #20]
   31f56:	0013      	movs	r3, r2
   31f58:	009b      	lsls	r3, r3, #2
   31f5a:	189b      	adds	r3, r3, r2
   31f5c:	009b      	lsls	r3, r3, #2
   31f5e:	68fa      	ldr	r2, [r7, #12]
   31f60:	18d3      	adds	r3, r2, r3
   31f62:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   31f64:	693b      	ldr	r3, [r7, #16]
   31f66:	68ba      	ldr	r2, [r7, #8]
   31f68:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   31f6a:	693b      	ldr	r3, [r7, #16]
   31f6c:	781a      	ldrb	r2, [r3, #0]
   31f6e:	2102      	movs	r1, #2
   31f70:	438a      	bics	r2, r1
   31f72:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   31f74:	693b      	ldr	r3, [r7, #16]
   31f76:	687a      	ldr	r2, [r7, #4]
   31f78:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   31f7a:	68fb      	ldr	r3, [r7, #12]
   31f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31f7e:	4b0d      	ldr	r3, [pc, #52]	; (31fb4 <sw_timer_register_callback+0x8c>)
   31f80:	0011      	movs	r1, r2
   31f82:	6838      	ldr	r0, [r7, #0]
   31f84:	4798      	blx	r3
   31f86:	0003      	movs	r3, r0
   31f88:	001a      	movs	r2, r3
   31f8a:	693b      	ldr	r3, [r7, #16]
   31f8c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   31f8e:	693b      	ldr	r3, [r7, #16]
   31f90:	781a      	ldrb	r2, [r3, #0]
   31f92:	2101      	movs	r1, #1
   31f94:	430a      	orrs	r2, r1
   31f96:	701a      	strb	r2, [r3, #0]
			return index;
   31f98:	697b      	ldr	r3, [r7, #20]
   31f9a:	e007      	b.n	31fac <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31f9c:	697b      	ldr	r3, [r7, #20]
   31f9e:	3301      	adds	r3, #1
   31fa0:	617b      	str	r3, [r7, #20]
   31fa2:	697b      	ldr	r3, [r7, #20]
   31fa4:	2b00      	cmp	r3, #0
   31fa6:	ddc9      	ble.n	31f3c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   31fa8:	2301      	movs	r3, #1
   31faa:	425b      	negs	r3, r3
}
   31fac:	0018      	movs	r0, r3
   31fae:	46bd      	mov	sp, r7
   31fb0:	b006      	add	sp, #24
   31fb2:	bd80      	pop	{r7, pc}
   31fb4:	00032389 	.word	0x00032389

00031fb8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   31fb8:	b580      	push	{r7, lr}
   31fba:	b086      	sub	sp, #24
   31fbc:	af00      	add	r7, sp, #0
   31fbe:	60f8      	str	r0, [r7, #12]
   31fc0:	60b9      	str	r1, [r7, #8]
   31fc2:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31fc4:	68ba      	ldr	r2, [r7, #8]
   31fc6:	0013      	movs	r3, r2
   31fc8:	009b      	lsls	r3, r3, #2
   31fca:	189b      	adds	r3, r3, r2
   31fcc:	009b      	lsls	r3, r3, #2
   31fce:	68fa      	ldr	r2, [r7, #12]
   31fd0:	18d3      	adds	r3, r2, r3
   31fd2:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   31fd4:	697b      	ldr	r3, [r7, #20]
   31fd6:	781a      	ldrb	r2, [r3, #0]
   31fd8:	2102      	movs	r1, #2
   31fda:	430a      	orrs	r2, r1
   31fdc:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   31fde:	68fb      	ldr	r3, [r7, #12]
   31fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31fe2:	4b07      	ldr	r3, [pc, #28]	; (32000 <sw_timer_enable_callback+0x48>)
   31fe4:	0011      	movs	r1, r2
   31fe6:	6878      	ldr	r0, [r7, #4]
   31fe8:	4798      	blx	r3
   31fea:	0003      	movs	r3, r0
   31fec:	001a      	movs	r2, r3
   31fee:	4b05      	ldr	r3, [pc, #20]	; (32004 <sw_timer_enable_callback+0x4c>)
   31ff0:	681b      	ldr	r3, [r3, #0]
   31ff2:	18d2      	adds	r2, r2, r3
   31ff4:	697b      	ldr	r3, [r7, #20]
   31ff6:	611a      	str	r2, [r3, #16]
}
   31ff8:	46c0      	nop			; (mov r8, r8)
   31ffa:	46bd      	mov	sp, r7
   31ffc:	b006      	add	sp, #24
   31ffe:	bd80      	pop	{r7, pc}
   32000:	00032389 	.word	0x00032389
   32004:	2000456c 	.word	0x2000456c

00032008 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   32008:	b580      	push	{r7, lr}
   3200a:	b084      	sub	sp, #16
   3200c:	af00      	add	r7, sp, #0
   3200e:	6078      	str	r0, [r7, #4]
   32010:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32012:	683a      	ldr	r2, [r7, #0]
   32014:	0013      	movs	r3, r2
   32016:	009b      	lsls	r3, r3, #2
   32018:	189b      	adds	r3, r3, r2
   3201a:	009b      	lsls	r3, r3, #2
   3201c:	687a      	ldr	r2, [r7, #4]
   3201e:	18d3      	adds	r3, r2, r3
   32020:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   32022:	68fb      	ldr	r3, [r7, #12]
   32024:	781a      	ldrb	r2, [r3, #0]
   32026:	2102      	movs	r1, #2
   32028:	438a      	bics	r2, r1
   3202a:	701a      	strb	r2, [r3, #0]
}
   3202c:	46c0      	nop			; (mov r8, r8)
   3202e:	46bd      	mov	sp, r7
   32030:	b004      	add	sp, #16
   32032:	bd80      	pop	{r7, pc}

00032034 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   32034:	b590      	push	{r4, r7, lr}
   32036:	b085      	sub	sp, #20
   32038:	af00      	add	r7, sp, #0
   3203a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3203c:	2300      	movs	r3, #0
   3203e:	60fb      	str	r3, [r7, #12]
   32040:	e053      	b.n	320ea <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   32042:	6879      	ldr	r1, [r7, #4]
   32044:	68fa      	ldr	r2, [r7, #12]
   32046:	0013      	movs	r3, r2
   32048:	009b      	lsls	r3, r3, #2
   3204a:	189b      	adds	r3, r3, r2
   3204c:	009b      	lsls	r3, r3, #2
   3204e:	5c5b      	ldrb	r3, [r3, r1]
   32050:	07db      	lsls	r3, r3, #31
   32052:	0fdb      	lsrs	r3, r3, #31
   32054:	b2db      	uxtb	r3, r3
   32056:	2b00      	cmp	r3, #0
   32058:	d044      	beq.n	320e4 <sw_timer_task+0xb0>
   3205a:	6879      	ldr	r1, [r7, #4]
   3205c:	68fa      	ldr	r2, [r7, #12]
   3205e:	0013      	movs	r3, r2
   32060:	009b      	lsls	r3, r3, #2
   32062:	189b      	adds	r3, r3, r2
   32064:	009b      	lsls	r3, r3, #2
   32066:	5c5b      	ldrb	r3, [r3, r1]
   32068:	079b      	lsls	r3, r3, #30
   3206a:	0fdb      	lsrs	r3, r3, #31
   3206c:	b2db      	uxtb	r3, r3
   3206e:	2b00      	cmp	r3, #0
   32070:	d038      	beq.n	320e4 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   32072:	68fa      	ldr	r2, [r7, #12]
   32074:	0013      	movs	r3, r2
   32076:	009b      	lsls	r3, r3, #2
   32078:	189b      	adds	r3, r3, r2
   3207a:	009b      	lsls	r3, r3, #2
   3207c:	687a      	ldr	r2, [r7, #4]
   3207e:	18d3      	adds	r3, r2, r3
   32080:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   32082:	68bb      	ldr	r3, [r7, #8]
   32084:	691a      	ldr	r2, [r3, #16]
   32086:	4b1c      	ldr	r3, [pc, #112]	; (320f8 <sw_timer_task+0xc4>)
   32088:	681b      	ldr	r3, [r3, #0]
   3208a:	1ad3      	subs	r3, r2, r3
   3208c:	d52a      	bpl.n	320e4 <sw_timer_task+0xb0>
   3208e:	68bb      	ldr	r3, [r7, #8]
   32090:	781b      	ldrb	r3, [r3, #0]
   32092:	2204      	movs	r2, #4
   32094:	4013      	ands	r3, r2
   32096:	b2db      	uxtb	r3, r3
   32098:	2b00      	cmp	r3, #0
   3209a:	d123      	bne.n	320e4 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   3209c:	68bb      	ldr	r3, [r7, #8]
   3209e:	781a      	ldrb	r2, [r3, #0]
   320a0:	2104      	movs	r1, #4
   320a2:	430a      	orrs	r2, r1
   320a4:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   320a6:	68bb      	ldr	r3, [r7, #8]
   320a8:	68db      	ldr	r3, [r3, #12]
   320aa:	2b00      	cmp	r3, #0
   320ac:	d007      	beq.n	320be <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   320ae:	68bb      	ldr	r3, [r7, #8]
   320b0:	68da      	ldr	r2, [r3, #12]
   320b2:	4b11      	ldr	r3, [pc, #68]	; (320f8 <sw_timer_task+0xc4>)
   320b4:	681b      	ldr	r3, [r3, #0]
   320b6:	18d2      	adds	r2, r2, r3
   320b8:	68bb      	ldr	r3, [r7, #8]
   320ba:	611a      	str	r2, [r3, #16]
   320bc:	e004      	b.n	320c8 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   320be:	68bb      	ldr	r3, [r7, #8]
   320c0:	781a      	ldrb	r2, [r3, #0]
   320c2:	2102      	movs	r1, #2
   320c4:	438a      	bics	r2, r1
   320c6:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   320c8:	68bb      	ldr	r3, [r7, #8]
   320ca:	685c      	ldr	r4, [r3, #4]
   320cc:	68bb      	ldr	r3, [r7, #8]
   320ce:	689a      	ldr	r2, [r3, #8]
   320d0:	68bb      	ldr	r3, [r7, #8]
   320d2:	68db      	ldr	r3, [r3, #12]
   320d4:	68f9      	ldr	r1, [r7, #12]
   320d6:	6878      	ldr	r0, [r7, #4]
   320d8:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   320da:	68bb      	ldr	r3, [r7, #8]
   320dc:	781a      	ldrb	r2, [r3, #0]
   320de:	2104      	movs	r1, #4
   320e0:	438a      	bics	r2, r1
   320e2:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   320e4:	68fb      	ldr	r3, [r7, #12]
   320e6:	3301      	adds	r3, #1
   320e8:	60fb      	str	r3, [r7, #12]
   320ea:	68fb      	ldr	r3, [r7, #12]
   320ec:	2b00      	cmp	r3, #0
   320ee:	dda8      	ble.n	32042 <sw_timer_task+0xe>
			}
		}
	}
}
   320f0:	46c0      	nop			; (mov r8, r8)
   320f2:	46bd      	mov	sp, r7
   320f4:	b005      	add	sp, #20
   320f6:	bd90      	pop	{r4, r7, pc}
   320f8:	2000456c 	.word	0x2000456c

000320fc <port_get_config_defaults>:
{
   320fc:	b580      	push	{r7, lr}
   320fe:	b082      	sub	sp, #8
   32100:	af00      	add	r7, sp, #0
   32102:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   32104:	687b      	ldr	r3, [r7, #4]
   32106:	2200      	movs	r2, #0
   32108:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   3210a:	687b      	ldr	r3, [r7, #4]
   3210c:	2201      	movs	r2, #1
   3210e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   32110:	687b      	ldr	r3, [r7, #4]
   32112:	2200      	movs	r2, #0
   32114:	709a      	strb	r2, [r3, #2]
}
   32116:	46c0      	nop			; (mov r8, r8)
   32118:	46bd      	mov	sp, r7
   3211a:	b002      	add	sp, #8
   3211c:	bd80      	pop	{r7, pc}
	...

00032120 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   32120:	b580      	push	{r7, lr}
   32122:	b082      	sub	sp, #8
   32124:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   32126:	4b0d      	ldr	r3, [pc, #52]	; (3215c <main+0x3c>)
   32128:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   3212a:	4b0d      	ldr	r3, [pc, #52]	; (32160 <main+0x40>)
   3212c:	4798      	blx	r3
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   3212e:	1d3b      	adds	r3, r7, #4
   32130:	0018      	movs	r0, r3
   32132:	4b0c      	ldr	r3, [pc, #48]	; (32164 <main+0x44>)
   32134:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   32136:	1d3b      	adds	r3, r7, #4
   32138:	2201      	movs	r2, #1
   3213a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA11, &config_port_pin);
   3213c:	1d3b      	adds	r3, r7, #4
   3213e:	0019      	movs	r1, r3
   32140:	200b      	movs	r0, #11
   32142:	4b09      	ldr	r3, [pc, #36]	; (32168 <main+0x48>)
   32144:	4798      	blx	r3
// 	port_get_config_defaults(&config_port_pin);
// 	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
// 	port_pin_set_config(PIN_PA23, &config_port_pin);

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32146:	2001      	movs	r0, #1
   32148:	4b08      	ldr	r3, [pc, #32]	; (3216c <main+0x4c>)
   3214a:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3214c:	4b08      	ldr	r3, [pc, #32]	; (32170 <main+0x50>)
   3214e:	4798      	blx	r3

    return 0;  // Will not get here
   32150:	2300      	movs	r3, #0
}
   32152:	0018      	movs	r0, r3
   32154:	46bd      	mov	sp, r7
   32156:	b002      	add	sp, #8
   32158:	bd80      	pop	{r7, pc}
   3215a:	46c0      	nop			; (mov r8, r8)
   3215c:	00029bed 	.word	0x00029bed
   32160:	0001d6f5 	.word	0x0001d6f5
   32164:	000320fd 	.word	0x000320fd
   32168:	000263a9 	.word	0x000263a9
   3216c:	00017dc5 	.word	0x00017dc5
   32170:	0001bd4d 	.word	0x0001bd4d

00032174 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initialized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   32174:	b580      	push	{r7, lr}
   32176:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   32178:	4b0f      	ldr	r3, [pc, #60]	; (321b8 <vApplicationDaemonTaskStartupHook+0x44>)
   3217a:	0018      	movs	r0, r3
   3217c:	4b0f      	ldr	r3, [pc, #60]	; (321bc <vApplicationDaemonTaskStartupHook+0x48>)
   3217e:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   32180:	4b0f      	ldr	r3, [pc, #60]	; (321c0 <vApplicationDaemonTaskStartupHook+0x4c>)
   32182:	0018      	movs	r0, r3
   32184:	4b0d      	ldr	r3, [pc, #52]	; (321bc <vApplicationDaemonTaskStartupHook+0x48>)
   32186:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   32188:	4b0e      	ldr	r3, [pc, #56]	; (321c4 <vApplicationDaemonTaskStartupHook+0x50>)
   3218a:	4798      	blx	r3
   3218c:	1e03      	subs	r3, r0, #0
   3218e:	d004      	beq.n	3219a <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   32190:	4b0d      	ldr	r3, [pc, #52]	; (321c8 <vApplicationDaemonTaskStartupHook+0x54>)
   32192:	0018      	movs	r0, r3
   32194:	4b09      	ldr	r3, [pc, #36]	; (321bc <vApplicationDaemonTaskStartupHook+0x48>)
   32196:	4798      	blx	r3
   32198:	e003      	b.n	321a2 <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   3219a:	4b0c      	ldr	r3, [pc, #48]	; (321cc <vApplicationDaemonTaskStartupHook+0x58>)
   3219c:	0018      	movs	r0, r3
   3219e:	4b07      	ldr	r3, [pc, #28]	; (321bc <vApplicationDaemonTaskStartupHook+0x48>)
   321a0:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   321a2:	4b0b      	ldr	r3, [pc, #44]	; (321d0 <vApplicationDaemonTaskStartupHook+0x5c>)
   321a4:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   321a6:	4b0b      	ldr	r3, [pc, #44]	; (321d4 <vApplicationDaemonTaskStartupHook+0x60>)
   321a8:	681b      	ldr	r3, [r3, #0]
   321aa:	0018      	movs	r0, r3
   321ac:	4b0a      	ldr	r3, [pc, #40]	; (321d8 <vApplicationDaemonTaskStartupHook+0x64>)
   321ae:	4798      	blx	r3
}
   321b0:	46c0      	nop			; (mov r8, r8)
   321b2:	46bd      	mov	sp, r7
   321b4:	bd80      	pop	{r7, pc}
   321b6:	46c0      	nop			; (mov r8, r8)
   321b8:	00039244 	.word	0x00039244
   321bc:	0001d765 	.word	0x0001d765
   321c0:	00039268 	.word	0x00039268
   321c4:	00014da5 	.word	0x00014da5
   321c8:	00039280 	.word	0x00039280
   321cc:	000392a4 	.word	0x000392a4
   321d0:	000321dd 	.word	0x000321dd
   321d4:	20004574 	.word	0x20004574
   321d8:	0001bbf1 	.word	0x0001bbf1

000321dc <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   321dc:	b590      	push	{r4, r7, lr}
   321de:	b083      	sub	sp, #12
   321e0:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   321e2:	4b43      	ldr	r3, [pc, #268]	; (322f0 <StartTasks+0x114>)
   321e4:	4798      	blx	r3
   321e6:	0003      	movs	r3, r0
   321e8:	4a42      	ldr	r2, [pc, #264]	; (322f4 <StartTasks+0x118>)
   321ea:	4843      	ldr	r0, [pc, #268]	; (322f8 <StartTasks+0x11c>)
   321ec:	2140      	movs	r1, #64	; 0x40
   321ee:	4c43      	ldr	r4, [pc, #268]	; (322fc <StartTasks+0x120>)
   321f0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   321f2:	4b41      	ldr	r3, [pc, #260]	; (322f8 <StartTasks+0x11c>)
   321f4:	0018      	movs	r0, r3
   321f6:	4b42      	ldr	r3, [pc, #264]	; (32300 <StartTasks+0x124>)
   321f8:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   321fa:	4942      	ldr	r1, [pc, #264]	; (32304 <StartTasks+0x128>)
   321fc:	4842      	ldr	r0, [pc, #264]	; (32308 <StartTasks+0x12c>)
   321fe:	4b43      	ldr	r3, [pc, #268]	; (3230c <StartTasks+0x130>)
   32200:	9301      	str	r3, [sp, #4]
   32202:	2304      	movs	r3, #4
   32204:	9300      	str	r3, [sp, #0]
   32206:	2300      	movs	r3, #0
   32208:	22c8      	movs	r2, #200	; 0xc8
   3220a:	4c41      	ldr	r4, [pc, #260]	; (32310 <StartTasks+0x134>)
   3220c:	47a0      	blx	r4
   3220e:	0003      	movs	r3, r0
   32210:	2b01      	cmp	r3, #1
   32212:	d003      	beq.n	3221c <StartTasks+0x40>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   32214:	4b3f      	ldr	r3, [pc, #252]	; (32314 <StartTasks+0x138>)
   32216:	0018      	movs	r0, r3
   32218:	4b39      	ldr	r3, [pc, #228]	; (32300 <StartTasks+0x124>)
   3221a:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   3221c:	4b34      	ldr	r3, [pc, #208]	; (322f0 <StartTasks+0x114>)
   3221e:	4798      	blx	r3
   32220:	0003      	movs	r3, r0
   32222:	4a3d      	ldr	r2, [pc, #244]	; (32318 <StartTasks+0x13c>)
   32224:	4834      	ldr	r0, [pc, #208]	; (322f8 <StartTasks+0x11c>)
   32226:	2140      	movs	r1, #64	; 0x40
   32228:	4c34      	ldr	r4, [pc, #208]	; (322fc <StartTasks+0x120>)
   3222a:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3222c:	4b32      	ldr	r3, [pc, #200]	; (322f8 <StartTasks+0x11c>)
   3222e:	0018      	movs	r0, r3
   32230:	4b33      	ldr	r3, [pc, #204]	; (32300 <StartTasks+0x124>)
   32232:	4798      	blx	r3
	

	

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   32234:	23c8      	movs	r3, #200	; 0xc8
   32236:	009a      	lsls	r2, r3, #2
   32238:	4938      	ldr	r1, [pc, #224]	; (3231c <StartTasks+0x140>)
   3223a:	4839      	ldr	r0, [pc, #228]	; (32320 <StartTasks+0x144>)
   3223c:	4b39      	ldr	r3, [pc, #228]	; (32324 <StartTasks+0x148>)
   3223e:	9301      	str	r3, [sp, #4]
   32240:	2303      	movs	r3, #3
   32242:	9300      	str	r3, [sp, #0]
   32244:	2300      	movs	r3, #0
   32246:	4c32      	ldr	r4, [pc, #200]	; (32310 <StartTasks+0x134>)
   32248:	47a0      	blx	r4
   3224a:	0003      	movs	r3, r0
   3224c:	2b01      	cmp	r3, #1
   3224e:	d003      	beq.n	32258 <StartTasks+0x7c>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32250:	4b35      	ldr	r3, [pc, #212]	; (32328 <StartTasks+0x14c>)
   32252:	0018      	movs	r0, r3
   32254:	4b2a      	ldr	r3, [pc, #168]	; (32300 <StartTasks+0x124>)
   32256:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32258:	4b25      	ldr	r3, [pc, #148]	; (322f0 <StartTasks+0x114>)
   3225a:	4798      	blx	r3
   3225c:	0003      	movs	r3, r0
   3225e:	4a33      	ldr	r2, [pc, #204]	; (3232c <StartTasks+0x150>)
   32260:	4825      	ldr	r0, [pc, #148]	; (322f8 <StartTasks+0x11c>)
   32262:	2140      	movs	r1, #64	; 0x40
   32264:	4c25      	ldr	r4, [pc, #148]	; (322fc <StartTasks+0x120>)
   32266:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32268:	4b23      	ldr	r3, [pc, #140]	; (322f8 <StartTasks+0x11c>)
   3226a:	0018      	movs	r0, r3
   3226c:	4b24      	ldr	r3, [pc, #144]	; (32300 <StartTasks+0x124>)
   3226e:	4798      	blx	r3
	
/////////////////////////// SHTC3 TASK ////////////////////////////////////////////////////////////////////////////////////////////////
	if (xTaskCreate(SHTC3Task, "SHTC3 TASK", SHTC3_TASK_SIZE, NULL, SHTC3_PRIORITY, &SHTC3TaskHandle) != pdPASS) {
   32270:	492f      	ldr	r1, [pc, #188]	; (32330 <StartTasks+0x154>)
   32272:	4830      	ldr	r0, [pc, #192]	; (32334 <StartTasks+0x158>)
   32274:	4b30      	ldr	r3, [pc, #192]	; (32338 <StartTasks+0x15c>)
   32276:	9301      	str	r3, [sp, #4]
   32278:	2304      	movs	r3, #4
   3227a:	9300      	str	r3, [sp, #0]
   3227c:	2300      	movs	r3, #0
   3227e:	22c8      	movs	r2, #200	; 0xc8
   32280:	4c23      	ldr	r4, [pc, #140]	; (32310 <StartTasks+0x134>)
   32282:	47a0      	blx	r4
   32284:	0003      	movs	r3, r0
   32286:	2b01      	cmp	r3, #1
   32288:	d003      	beq.n	32292 <StartTasks+0xb6>
			SerialConsoleWriteString("ERR: SHTC3 TASK could not be initialized!\r\n");
   3228a:	4b2c      	ldr	r3, [pc, #176]	; (3233c <StartTasks+0x160>)
   3228c:	0018      	movs	r0, r3
   3228e:	4b1c      	ldr	r3, [pc, #112]	; (32300 <StartTasks+0x124>)
   32290:	4798      	blx	r3
		}
		
		snprintf(bufferPrint, 64, "Heap after starting SHTC3 Task : %d\r\n", xPortGetFreeHeapSize());
   32292:	4b17      	ldr	r3, [pc, #92]	; (322f0 <StartTasks+0x114>)
   32294:	4798      	blx	r3
   32296:	0003      	movs	r3, r0
   32298:	4a29      	ldr	r2, [pc, #164]	; (32340 <StartTasks+0x164>)
   3229a:	4817      	ldr	r0, [pc, #92]	; (322f8 <StartTasks+0x11c>)
   3229c:	2140      	movs	r1, #64	; 0x40
   3229e:	4c17      	ldr	r4, [pc, #92]	; (322fc <StartTasks+0x120>)
   322a0:	47a0      	blx	r4
		SerialConsoleWriteString(bufferPrint);
   322a2:	4b15      	ldr	r3, [pc, #84]	; (322f8 <StartTasks+0x11c>)
   322a4:	0018      	movs	r0, r3
   322a6:	4b16      	ldr	r3, [pc, #88]	; (32300 <StartTasks+0x124>)
   322a8:	4798      	blx	r3
// 		
////////////////////////// SHTC3 TASK ///////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////// HEART RATE TASK //////////////////////////////////////////////////////////////////////////////////////////
	if (xTaskCreate(HeartRateTask, "HEART RATE TASK", HEART_RATE_TASK_SIZE, NULL, HEART_RATE_PRIORITY, &HEART_RATE_TaskHandle) != pdPASS) {
   322aa:	23fa      	movs	r3, #250	; 0xfa
   322ac:	005a      	lsls	r2, r3, #1
   322ae:	4925      	ldr	r1, [pc, #148]	; (32344 <StartTasks+0x168>)
   322b0:	4825      	ldr	r0, [pc, #148]	; (32348 <StartTasks+0x16c>)
   322b2:	4b26      	ldr	r3, [pc, #152]	; (3234c <StartTasks+0x170>)
   322b4:	9301      	str	r3, [sp, #4]
   322b6:	2304      	movs	r3, #4
   322b8:	9300      	str	r3, [sp, #0]
   322ba:	2300      	movs	r3, #0
   322bc:	4c14      	ldr	r4, [pc, #80]	; (32310 <StartTasks+0x134>)
   322be:	47a0      	blx	r4
   322c0:	0003      	movs	r3, r0
   322c2:	2b01      	cmp	r3, #1
   322c4:	d003      	beq.n	322ce <StartTasks+0xf2>
					SerialConsoleWriteString("ERR: HEART RATE TASK could not be initialized!\r\n");
   322c6:	4b22      	ldr	r3, [pc, #136]	; (32350 <StartTasks+0x174>)
   322c8:	0018      	movs	r0, r3
   322ca:	4b0d      	ldr	r3, [pc, #52]	; (32300 <StartTasks+0x124>)
   322cc:	4798      	blx	r3
				}
				
				snprintf(bufferPrint, 64, "Heap after starting HEART RATE Task : %d\r\n", xPortGetFreeHeapSize());
   322ce:	4b08      	ldr	r3, [pc, #32]	; (322f0 <StartTasks+0x114>)
   322d0:	4798      	blx	r3
   322d2:	0003      	movs	r3, r0
   322d4:	4a1f      	ldr	r2, [pc, #124]	; (32354 <StartTasks+0x178>)
   322d6:	4808      	ldr	r0, [pc, #32]	; (322f8 <StartTasks+0x11c>)
   322d8:	2140      	movs	r1, #64	; 0x40
   322da:	4c08      	ldr	r4, [pc, #32]	; (322fc <StartTasks+0x120>)
   322dc:	47a0      	blx	r4
				SerialConsoleWriteString(bufferPrint);
   322de:	4b06      	ldr	r3, [pc, #24]	; (322f8 <StartTasks+0x11c>)
   322e0:	0018      	movs	r0, r3
   322e2:	4b07      	ldr	r3, [pc, #28]	; (32300 <StartTasks+0x124>)
   322e4:	4798      	blx	r3
//     if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
//         SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
//     }
//     snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
//     SerialConsoleWriteString(bufferPrint);
}
   322e6:	46c0      	nop			; (mov r8, r8)
   322e8:	46bd      	mov	sp, r7
   322ea:	b001      	add	sp, #4
   322ec:	bd90      	pop	{r4, r7, pc}
   322ee:	46c0      	nop			; (mov r8, r8)
   322f0:	00019d31 	.word	0x00019d31
   322f4:	000392c0 	.word	0x000392c0
   322f8:	20005b08 	.word	0x20005b08
   322fc:	0003429d 	.word	0x0003429d
   32300:	0001d765 	.word	0x0001d765
   32304:	000392e4 	.word	0x000392e4
   32308:	000136b9 	.word	0x000136b9
   3230c:	20004570 	.word	0x20004570
   32310:	0001b775 	.word	0x0001b775
   32314:	000392f0 	.word	0x000392f0
   32318:	0003931c 	.word	0x0003931c
   3231c:	0003933c 	.word	0x0003933c
   32320:	00016b5d 	.word	0x00016b5d
   32324:	20004578 	.word	0x20004578
   32328:	00039348 	.word	0x00039348
   3232c:	00039374 	.word	0x00039374
   32330:	00039394 	.word	0x00039394
   32334:	00015289 	.word	0x00015289
   32338:	2000457c 	.word	0x2000457c
   3233c:	000393a0 	.word	0x000393a0
   32340:	000393cc 	.word	0x000393cc
   32344:	000393f4 	.word	0x000393f4
   32348:	00014559 	.word	0x00014559
   3234c:	20004580 	.word	0x20004580
   32350:	00039404 	.word	0x00039404
   32354:	00039438 	.word	0x00039438

00032358 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32358:	b580      	push	{r7, lr}
   3235a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   3235c:	4b02      	ldr	r3, [pc, #8]	; (32368 <vApplicationMallocFailedHook+0x10>)
   3235e:	0018      	movs	r0, r3
   32360:	4b02      	ldr	r3, [pc, #8]	; (3236c <vApplicationMallocFailedHook+0x14>)
   32362:	4798      	blx	r3
    while (1)
   32364:	e7fe      	b.n	32364 <vApplicationMallocFailedHook+0xc>
   32366:	46c0      	nop			; (mov r8, r8)
   32368:	00039464 	.word	0x00039464
   3236c:	0001d765 	.word	0x0001d765

00032370 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   32370:	b580      	push	{r7, lr}
   32372:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   32374:	4b02      	ldr	r3, [pc, #8]	; (32380 <vApplicationStackOverflowHook+0x10>)
   32376:	0018      	movs	r0, r3
   32378:	4b02      	ldr	r3, [pc, #8]	; (32384 <vApplicationStackOverflowHook+0x14>)
   3237a:	4798      	blx	r3
    while (1)
   3237c:	e7fe      	b.n	3237c <vApplicationStackOverflowHook+0xc>
   3237e:	46c0      	nop			; (mov r8, r8)
   32380:	00039490 	.word	0x00039490
   32384:	0001d765 	.word	0x0001d765

00032388 <__udivsi3>:
   32388:	2200      	movs	r2, #0
   3238a:	0843      	lsrs	r3, r0, #1
   3238c:	428b      	cmp	r3, r1
   3238e:	d374      	bcc.n	3247a <__udivsi3+0xf2>
   32390:	0903      	lsrs	r3, r0, #4
   32392:	428b      	cmp	r3, r1
   32394:	d35f      	bcc.n	32456 <__udivsi3+0xce>
   32396:	0a03      	lsrs	r3, r0, #8
   32398:	428b      	cmp	r3, r1
   3239a:	d344      	bcc.n	32426 <__udivsi3+0x9e>
   3239c:	0b03      	lsrs	r3, r0, #12
   3239e:	428b      	cmp	r3, r1
   323a0:	d328      	bcc.n	323f4 <__udivsi3+0x6c>
   323a2:	0c03      	lsrs	r3, r0, #16
   323a4:	428b      	cmp	r3, r1
   323a6:	d30d      	bcc.n	323c4 <__udivsi3+0x3c>
   323a8:	22ff      	movs	r2, #255	; 0xff
   323aa:	0209      	lsls	r1, r1, #8
   323ac:	ba12      	rev	r2, r2
   323ae:	0c03      	lsrs	r3, r0, #16
   323b0:	428b      	cmp	r3, r1
   323b2:	d302      	bcc.n	323ba <__udivsi3+0x32>
   323b4:	1212      	asrs	r2, r2, #8
   323b6:	0209      	lsls	r1, r1, #8
   323b8:	d065      	beq.n	32486 <__udivsi3+0xfe>
   323ba:	0b03      	lsrs	r3, r0, #12
   323bc:	428b      	cmp	r3, r1
   323be:	d319      	bcc.n	323f4 <__udivsi3+0x6c>
   323c0:	e000      	b.n	323c4 <__udivsi3+0x3c>
   323c2:	0a09      	lsrs	r1, r1, #8
   323c4:	0bc3      	lsrs	r3, r0, #15
   323c6:	428b      	cmp	r3, r1
   323c8:	d301      	bcc.n	323ce <__udivsi3+0x46>
   323ca:	03cb      	lsls	r3, r1, #15
   323cc:	1ac0      	subs	r0, r0, r3
   323ce:	4152      	adcs	r2, r2
   323d0:	0b83      	lsrs	r3, r0, #14
   323d2:	428b      	cmp	r3, r1
   323d4:	d301      	bcc.n	323da <__udivsi3+0x52>
   323d6:	038b      	lsls	r3, r1, #14
   323d8:	1ac0      	subs	r0, r0, r3
   323da:	4152      	adcs	r2, r2
   323dc:	0b43      	lsrs	r3, r0, #13
   323de:	428b      	cmp	r3, r1
   323e0:	d301      	bcc.n	323e6 <__udivsi3+0x5e>
   323e2:	034b      	lsls	r3, r1, #13
   323e4:	1ac0      	subs	r0, r0, r3
   323e6:	4152      	adcs	r2, r2
   323e8:	0b03      	lsrs	r3, r0, #12
   323ea:	428b      	cmp	r3, r1
   323ec:	d301      	bcc.n	323f2 <__udivsi3+0x6a>
   323ee:	030b      	lsls	r3, r1, #12
   323f0:	1ac0      	subs	r0, r0, r3
   323f2:	4152      	adcs	r2, r2
   323f4:	0ac3      	lsrs	r3, r0, #11
   323f6:	428b      	cmp	r3, r1
   323f8:	d301      	bcc.n	323fe <__udivsi3+0x76>
   323fa:	02cb      	lsls	r3, r1, #11
   323fc:	1ac0      	subs	r0, r0, r3
   323fe:	4152      	adcs	r2, r2
   32400:	0a83      	lsrs	r3, r0, #10
   32402:	428b      	cmp	r3, r1
   32404:	d301      	bcc.n	3240a <__udivsi3+0x82>
   32406:	028b      	lsls	r3, r1, #10
   32408:	1ac0      	subs	r0, r0, r3
   3240a:	4152      	adcs	r2, r2
   3240c:	0a43      	lsrs	r3, r0, #9
   3240e:	428b      	cmp	r3, r1
   32410:	d301      	bcc.n	32416 <__udivsi3+0x8e>
   32412:	024b      	lsls	r3, r1, #9
   32414:	1ac0      	subs	r0, r0, r3
   32416:	4152      	adcs	r2, r2
   32418:	0a03      	lsrs	r3, r0, #8
   3241a:	428b      	cmp	r3, r1
   3241c:	d301      	bcc.n	32422 <__udivsi3+0x9a>
   3241e:	020b      	lsls	r3, r1, #8
   32420:	1ac0      	subs	r0, r0, r3
   32422:	4152      	adcs	r2, r2
   32424:	d2cd      	bcs.n	323c2 <__udivsi3+0x3a>
   32426:	09c3      	lsrs	r3, r0, #7
   32428:	428b      	cmp	r3, r1
   3242a:	d301      	bcc.n	32430 <__udivsi3+0xa8>
   3242c:	01cb      	lsls	r3, r1, #7
   3242e:	1ac0      	subs	r0, r0, r3
   32430:	4152      	adcs	r2, r2
   32432:	0983      	lsrs	r3, r0, #6
   32434:	428b      	cmp	r3, r1
   32436:	d301      	bcc.n	3243c <__udivsi3+0xb4>
   32438:	018b      	lsls	r3, r1, #6
   3243a:	1ac0      	subs	r0, r0, r3
   3243c:	4152      	adcs	r2, r2
   3243e:	0943      	lsrs	r3, r0, #5
   32440:	428b      	cmp	r3, r1
   32442:	d301      	bcc.n	32448 <__udivsi3+0xc0>
   32444:	014b      	lsls	r3, r1, #5
   32446:	1ac0      	subs	r0, r0, r3
   32448:	4152      	adcs	r2, r2
   3244a:	0903      	lsrs	r3, r0, #4
   3244c:	428b      	cmp	r3, r1
   3244e:	d301      	bcc.n	32454 <__udivsi3+0xcc>
   32450:	010b      	lsls	r3, r1, #4
   32452:	1ac0      	subs	r0, r0, r3
   32454:	4152      	adcs	r2, r2
   32456:	08c3      	lsrs	r3, r0, #3
   32458:	428b      	cmp	r3, r1
   3245a:	d301      	bcc.n	32460 <__udivsi3+0xd8>
   3245c:	00cb      	lsls	r3, r1, #3
   3245e:	1ac0      	subs	r0, r0, r3
   32460:	4152      	adcs	r2, r2
   32462:	0883      	lsrs	r3, r0, #2
   32464:	428b      	cmp	r3, r1
   32466:	d301      	bcc.n	3246c <__udivsi3+0xe4>
   32468:	008b      	lsls	r3, r1, #2
   3246a:	1ac0      	subs	r0, r0, r3
   3246c:	4152      	adcs	r2, r2
   3246e:	0843      	lsrs	r3, r0, #1
   32470:	428b      	cmp	r3, r1
   32472:	d301      	bcc.n	32478 <__udivsi3+0xf0>
   32474:	004b      	lsls	r3, r1, #1
   32476:	1ac0      	subs	r0, r0, r3
   32478:	4152      	adcs	r2, r2
   3247a:	1a41      	subs	r1, r0, r1
   3247c:	d200      	bcs.n	32480 <__udivsi3+0xf8>
   3247e:	4601      	mov	r1, r0
   32480:	4152      	adcs	r2, r2
   32482:	4610      	mov	r0, r2
   32484:	4770      	bx	lr
   32486:	e7ff      	b.n	32488 <__udivsi3+0x100>
   32488:	b501      	push	{r0, lr}
   3248a:	2000      	movs	r0, #0
   3248c:	f000 f8f0 	bl	32670 <__aeabi_idiv0>
   32490:	bd02      	pop	{r1, pc}
   32492:	46c0      	nop			; (mov r8, r8)

00032494 <__aeabi_uidivmod>:
   32494:	2900      	cmp	r1, #0
   32496:	d0f7      	beq.n	32488 <__udivsi3+0x100>
   32498:	e776      	b.n	32388 <__udivsi3>
   3249a:	4770      	bx	lr

0003249c <__divsi3>:
   3249c:	4603      	mov	r3, r0
   3249e:	430b      	orrs	r3, r1
   324a0:	d47f      	bmi.n	325a2 <__divsi3+0x106>
   324a2:	2200      	movs	r2, #0
   324a4:	0843      	lsrs	r3, r0, #1
   324a6:	428b      	cmp	r3, r1
   324a8:	d374      	bcc.n	32594 <__divsi3+0xf8>
   324aa:	0903      	lsrs	r3, r0, #4
   324ac:	428b      	cmp	r3, r1
   324ae:	d35f      	bcc.n	32570 <__divsi3+0xd4>
   324b0:	0a03      	lsrs	r3, r0, #8
   324b2:	428b      	cmp	r3, r1
   324b4:	d344      	bcc.n	32540 <__divsi3+0xa4>
   324b6:	0b03      	lsrs	r3, r0, #12
   324b8:	428b      	cmp	r3, r1
   324ba:	d328      	bcc.n	3250e <__divsi3+0x72>
   324bc:	0c03      	lsrs	r3, r0, #16
   324be:	428b      	cmp	r3, r1
   324c0:	d30d      	bcc.n	324de <__divsi3+0x42>
   324c2:	22ff      	movs	r2, #255	; 0xff
   324c4:	0209      	lsls	r1, r1, #8
   324c6:	ba12      	rev	r2, r2
   324c8:	0c03      	lsrs	r3, r0, #16
   324ca:	428b      	cmp	r3, r1
   324cc:	d302      	bcc.n	324d4 <__divsi3+0x38>
   324ce:	1212      	asrs	r2, r2, #8
   324d0:	0209      	lsls	r1, r1, #8
   324d2:	d065      	beq.n	325a0 <__divsi3+0x104>
   324d4:	0b03      	lsrs	r3, r0, #12
   324d6:	428b      	cmp	r3, r1
   324d8:	d319      	bcc.n	3250e <__divsi3+0x72>
   324da:	e000      	b.n	324de <__divsi3+0x42>
   324dc:	0a09      	lsrs	r1, r1, #8
   324de:	0bc3      	lsrs	r3, r0, #15
   324e0:	428b      	cmp	r3, r1
   324e2:	d301      	bcc.n	324e8 <__divsi3+0x4c>
   324e4:	03cb      	lsls	r3, r1, #15
   324e6:	1ac0      	subs	r0, r0, r3
   324e8:	4152      	adcs	r2, r2
   324ea:	0b83      	lsrs	r3, r0, #14
   324ec:	428b      	cmp	r3, r1
   324ee:	d301      	bcc.n	324f4 <__divsi3+0x58>
   324f0:	038b      	lsls	r3, r1, #14
   324f2:	1ac0      	subs	r0, r0, r3
   324f4:	4152      	adcs	r2, r2
   324f6:	0b43      	lsrs	r3, r0, #13
   324f8:	428b      	cmp	r3, r1
   324fa:	d301      	bcc.n	32500 <__divsi3+0x64>
   324fc:	034b      	lsls	r3, r1, #13
   324fe:	1ac0      	subs	r0, r0, r3
   32500:	4152      	adcs	r2, r2
   32502:	0b03      	lsrs	r3, r0, #12
   32504:	428b      	cmp	r3, r1
   32506:	d301      	bcc.n	3250c <__divsi3+0x70>
   32508:	030b      	lsls	r3, r1, #12
   3250a:	1ac0      	subs	r0, r0, r3
   3250c:	4152      	adcs	r2, r2
   3250e:	0ac3      	lsrs	r3, r0, #11
   32510:	428b      	cmp	r3, r1
   32512:	d301      	bcc.n	32518 <__divsi3+0x7c>
   32514:	02cb      	lsls	r3, r1, #11
   32516:	1ac0      	subs	r0, r0, r3
   32518:	4152      	adcs	r2, r2
   3251a:	0a83      	lsrs	r3, r0, #10
   3251c:	428b      	cmp	r3, r1
   3251e:	d301      	bcc.n	32524 <__divsi3+0x88>
   32520:	028b      	lsls	r3, r1, #10
   32522:	1ac0      	subs	r0, r0, r3
   32524:	4152      	adcs	r2, r2
   32526:	0a43      	lsrs	r3, r0, #9
   32528:	428b      	cmp	r3, r1
   3252a:	d301      	bcc.n	32530 <__divsi3+0x94>
   3252c:	024b      	lsls	r3, r1, #9
   3252e:	1ac0      	subs	r0, r0, r3
   32530:	4152      	adcs	r2, r2
   32532:	0a03      	lsrs	r3, r0, #8
   32534:	428b      	cmp	r3, r1
   32536:	d301      	bcc.n	3253c <__divsi3+0xa0>
   32538:	020b      	lsls	r3, r1, #8
   3253a:	1ac0      	subs	r0, r0, r3
   3253c:	4152      	adcs	r2, r2
   3253e:	d2cd      	bcs.n	324dc <__divsi3+0x40>
   32540:	09c3      	lsrs	r3, r0, #7
   32542:	428b      	cmp	r3, r1
   32544:	d301      	bcc.n	3254a <__divsi3+0xae>
   32546:	01cb      	lsls	r3, r1, #7
   32548:	1ac0      	subs	r0, r0, r3
   3254a:	4152      	adcs	r2, r2
   3254c:	0983      	lsrs	r3, r0, #6
   3254e:	428b      	cmp	r3, r1
   32550:	d301      	bcc.n	32556 <__divsi3+0xba>
   32552:	018b      	lsls	r3, r1, #6
   32554:	1ac0      	subs	r0, r0, r3
   32556:	4152      	adcs	r2, r2
   32558:	0943      	lsrs	r3, r0, #5
   3255a:	428b      	cmp	r3, r1
   3255c:	d301      	bcc.n	32562 <__divsi3+0xc6>
   3255e:	014b      	lsls	r3, r1, #5
   32560:	1ac0      	subs	r0, r0, r3
   32562:	4152      	adcs	r2, r2
   32564:	0903      	lsrs	r3, r0, #4
   32566:	428b      	cmp	r3, r1
   32568:	d301      	bcc.n	3256e <__divsi3+0xd2>
   3256a:	010b      	lsls	r3, r1, #4
   3256c:	1ac0      	subs	r0, r0, r3
   3256e:	4152      	adcs	r2, r2
   32570:	08c3      	lsrs	r3, r0, #3
   32572:	428b      	cmp	r3, r1
   32574:	d301      	bcc.n	3257a <__divsi3+0xde>
   32576:	00cb      	lsls	r3, r1, #3
   32578:	1ac0      	subs	r0, r0, r3
   3257a:	4152      	adcs	r2, r2
   3257c:	0883      	lsrs	r3, r0, #2
   3257e:	428b      	cmp	r3, r1
   32580:	d301      	bcc.n	32586 <__divsi3+0xea>
   32582:	008b      	lsls	r3, r1, #2
   32584:	1ac0      	subs	r0, r0, r3
   32586:	4152      	adcs	r2, r2
   32588:	0843      	lsrs	r3, r0, #1
   3258a:	428b      	cmp	r3, r1
   3258c:	d301      	bcc.n	32592 <__divsi3+0xf6>
   3258e:	004b      	lsls	r3, r1, #1
   32590:	1ac0      	subs	r0, r0, r3
   32592:	4152      	adcs	r2, r2
   32594:	1a41      	subs	r1, r0, r1
   32596:	d200      	bcs.n	3259a <__divsi3+0xfe>
   32598:	4601      	mov	r1, r0
   3259a:	4152      	adcs	r2, r2
   3259c:	4610      	mov	r0, r2
   3259e:	4770      	bx	lr
   325a0:	e05d      	b.n	3265e <__divsi3+0x1c2>
   325a2:	0fca      	lsrs	r2, r1, #31
   325a4:	d000      	beq.n	325a8 <__divsi3+0x10c>
   325a6:	4249      	negs	r1, r1
   325a8:	1003      	asrs	r3, r0, #32
   325aa:	d300      	bcc.n	325ae <__divsi3+0x112>
   325ac:	4240      	negs	r0, r0
   325ae:	4053      	eors	r3, r2
   325b0:	2200      	movs	r2, #0
   325b2:	469c      	mov	ip, r3
   325b4:	0903      	lsrs	r3, r0, #4
   325b6:	428b      	cmp	r3, r1
   325b8:	d32d      	bcc.n	32616 <__divsi3+0x17a>
   325ba:	0a03      	lsrs	r3, r0, #8
   325bc:	428b      	cmp	r3, r1
   325be:	d312      	bcc.n	325e6 <__divsi3+0x14a>
   325c0:	22fc      	movs	r2, #252	; 0xfc
   325c2:	0189      	lsls	r1, r1, #6
   325c4:	ba12      	rev	r2, r2
   325c6:	0a03      	lsrs	r3, r0, #8
   325c8:	428b      	cmp	r3, r1
   325ca:	d30c      	bcc.n	325e6 <__divsi3+0x14a>
   325cc:	0189      	lsls	r1, r1, #6
   325ce:	1192      	asrs	r2, r2, #6
   325d0:	428b      	cmp	r3, r1
   325d2:	d308      	bcc.n	325e6 <__divsi3+0x14a>
   325d4:	0189      	lsls	r1, r1, #6
   325d6:	1192      	asrs	r2, r2, #6
   325d8:	428b      	cmp	r3, r1
   325da:	d304      	bcc.n	325e6 <__divsi3+0x14a>
   325dc:	0189      	lsls	r1, r1, #6
   325de:	d03a      	beq.n	32656 <__divsi3+0x1ba>
   325e0:	1192      	asrs	r2, r2, #6
   325e2:	e000      	b.n	325e6 <__divsi3+0x14a>
   325e4:	0989      	lsrs	r1, r1, #6
   325e6:	09c3      	lsrs	r3, r0, #7
   325e8:	428b      	cmp	r3, r1
   325ea:	d301      	bcc.n	325f0 <__divsi3+0x154>
   325ec:	01cb      	lsls	r3, r1, #7
   325ee:	1ac0      	subs	r0, r0, r3
   325f0:	4152      	adcs	r2, r2
   325f2:	0983      	lsrs	r3, r0, #6
   325f4:	428b      	cmp	r3, r1
   325f6:	d301      	bcc.n	325fc <__divsi3+0x160>
   325f8:	018b      	lsls	r3, r1, #6
   325fa:	1ac0      	subs	r0, r0, r3
   325fc:	4152      	adcs	r2, r2
   325fe:	0943      	lsrs	r3, r0, #5
   32600:	428b      	cmp	r3, r1
   32602:	d301      	bcc.n	32608 <__divsi3+0x16c>
   32604:	014b      	lsls	r3, r1, #5
   32606:	1ac0      	subs	r0, r0, r3
   32608:	4152      	adcs	r2, r2
   3260a:	0903      	lsrs	r3, r0, #4
   3260c:	428b      	cmp	r3, r1
   3260e:	d301      	bcc.n	32614 <__divsi3+0x178>
   32610:	010b      	lsls	r3, r1, #4
   32612:	1ac0      	subs	r0, r0, r3
   32614:	4152      	adcs	r2, r2
   32616:	08c3      	lsrs	r3, r0, #3
   32618:	428b      	cmp	r3, r1
   3261a:	d301      	bcc.n	32620 <__divsi3+0x184>
   3261c:	00cb      	lsls	r3, r1, #3
   3261e:	1ac0      	subs	r0, r0, r3
   32620:	4152      	adcs	r2, r2
   32622:	0883      	lsrs	r3, r0, #2
   32624:	428b      	cmp	r3, r1
   32626:	d301      	bcc.n	3262c <__divsi3+0x190>
   32628:	008b      	lsls	r3, r1, #2
   3262a:	1ac0      	subs	r0, r0, r3
   3262c:	4152      	adcs	r2, r2
   3262e:	d2d9      	bcs.n	325e4 <__divsi3+0x148>
   32630:	0843      	lsrs	r3, r0, #1
   32632:	428b      	cmp	r3, r1
   32634:	d301      	bcc.n	3263a <__divsi3+0x19e>
   32636:	004b      	lsls	r3, r1, #1
   32638:	1ac0      	subs	r0, r0, r3
   3263a:	4152      	adcs	r2, r2
   3263c:	1a41      	subs	r1, r0, r1
   3263e:	d200      	bcs.n	32642 <__divsi3+0x1a6>
   32640:	4601      	mov	r1, r0
   32642:	4663      	mov	r3, ip
   32644:	4152      	adcs	r2, r2
   32646:	105b      	asrs	r3, r3, #1
   32648:	4610      	mov	r0, r2
   3264a:	d301      	bcc.n	32650 <__divsi3+0x1b4>
   3264c:	4240      	negs	r0, r0
   3264e:	2b00      	cmp	r3, #0
   32650:	d500      	bpl.n	32654 <__divsi3+0x1b8>
   32652:	4249      	negs	r1, r1
   32654:	4770      	bx	lr
   32656:	4663      	mov	r3, ip
   32658:	105b      	asrs	r3, r3, #1
   3265a:	d300      	bcc.n	3265e <__divsi3+0x1c2>
   3265c:	4240      	negs	r0, r0
   3265e:	b501      	push	{r0, lr}
   32660:	2000      	movs	r0, #0
   32662:	f000 f805 	bl	32670 <__aeabi_idiv0>
   32666:	bd02      	pop	{r1, pc}

00032668 <__aeabi_idivmod>:
   32668:	2900      	cmp	r1, #0
   3266a:	d0f8      	beq.n	3265e <__divsi3+0x1c2>
   3266c:	e716      	b.n	3249c <__divsi3>
   3266e:	4770      	bx	lr

00032670 <__aeabi_idiv0>:
   32670:	4770      	bx	lr
   32672:	46c0      	nop			; (mov r8, r8)

00032674 <__aeabi_lmul>:
   32674:	b5f0      	push	{r4, r5, r6, r7, lr}
   32676:	46ce      	mov	lr, r9
   32678:	4647      	mov	r7, r8
   3267a:	0415      	lsls	r5, r2, #16
   3267c:	0c2d      	lsrs	r5, r5, #16
   3267e:	002e      	movs	r6, r5
   32680:	b580      	push	{r7, lr}
   32682:	0407      	lsls	r7, r0, #16
   32684:	0c14      	lsrs	r4, r2, #16
   32686:	0c3f      	lsrs	r7, r7, #16
   32688:	4699      	mov	r9, r3
   3268a:	0c03      	lsrs	r3, r0, #16
   3268c:	437e      	muls	r6, r7
   3268e:	435d      	muls	r5, r3
   32690:	4367      	muls	r7, r4
   32692:	4363      	muls	r3, r4
   32694:	197f      	adds	r7, r7, r5
   32696:	0c34      	lsrs	r4, r6, #16
   32698:	19e4      	adds	r4, r4, r7
   3269a:	469c      	mov	ip, r3
   3269c:	42a5      	cmp	r5, r4
   3269e:	d903      	bls.n	326a8 <__aeabi_lmul+0x34>
   326a0:	2380      	movs	r3, #128	; 0x80
   326a2:	025b      	lsls	r3, r3, #9
   326a4:	4698      	mov	r8, r3
   326a6:	44c4      	add	ip, r8
   326a8:	464b      	mov	r3, r9
   326aa:	4351      	muls	r1, r2
   326ac:	4343      	muls	r3, r0
   326ae:	0436      	lsls	r6, r6, #16
   326b0:	0c36      	lsrs	r6, r6, #16
   326b2:	0c25      	lsrs	r5, r4, #16
   326b4:	0424      	lsls	r4, r4, #16
   326b6:	4465      	add	r5, ip
   326b8:	19a4      	adds	r4, r4, r6
   326ba:	1859      	adds	r1, r3, r1
   326bc:	1949      	adds	r1, r1, r5
   326be:	0020      	movs	r0, r4
   326c0:	bc0c      	pop	{r2, r3}
   326c2:	4690      	mov	r8, r2
   326c4:	4699      	mov	r9, r3
   326c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000326c8 <__aeabi_dadd>:
   326c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   326ca:	4645      	mov	r5, r8
   326cc:	46de      	mov	lr, fp
   326ce:	4657      	mov	r7, sl
   326d0:	464e      	mov	r6, r9
   326d2:	030c      	lsls	r4, r1, #12
   326d4:	b5e0      	push	{r5, r6, r7, lr}
   326d6:	004e      	lsls	r6, r1, #1
   326d8:	0fc9      	lsrs	r1, r1, #31
   326da:	4688      	mov	r8, r1
   326dc:	000d      	movs	r5, r1
   326de:	0a61      	lsrs	r1, r4, #9
   326e0:	0f44      	lsrs	r4, r0, #29
   326e2:	430c      	orrs	r4, r1
   326e4:	00c7      	lsls	r7, r0, #3
   326e6:	0319      	lsls	r1, r3, #12
   326e8:	0058      	lsls	r0, r3, #1
   326ea:	0fdb      	lsrs	r3, r3, #31
   326ec:	469b      	mov	fp, r3
   326ee:	0a4b      	lsrs	r3, r1, #9
   326f0:	0f51      	lsrs	r1, r2, #29
   326f2:	430b      	orrs	r3, r1
   326f4:	0d76      	lsrs	r6, r6, #21
   326f6:	0d40      	lsrs	r0, r0, #21
   326f8:	0019      	movs	r1, r3
   326fa:	00d2      	lsls	r2, r2, #3
   326fc:	45d8      	cmp	r8, fp
   326fe:	d100      	bne.n	32702 <__aeabi_dadd+0x3a>
   32700:	e0ae      	b.n	32860 <__aeabi_dadd+0x198>
   32702:	1a35      	subs	r5, r6, r0
   32704:	2d00      	cmp	r5, #0
   32706:	dc00      	bgt.n	3270a <__aeabi_dadd+0x42>
   32708:	e0f6      	b.n	328f8 <__aeabi_dadd+0x230>
   3270a:	2800      	cmp	r0, #0
   3270c:	d10f      	bne.n	3272e <__aeabi_dadd+0x66>
   3270e:	4313      	orrs	r3, r2
   32710:	d100      	bne.n	32714 <__aeabi_dadd+0x4c>
   32712:	e0db      	b.n	328cc <__aeabi_dadd+0x204>
   32714:	1e6b      	subs	r3, r5, #1
   32716:	2b00      	cmp	r3, #0
   32718:	d000      	beq.n	3271c <__aeabi_dadd+0x54>
   3271a:	e137      	b.n	3298c <__aeabi_dadd+0x2c4>
   3271c:	1aba      	subs	r2, r7, r2
   3271e:	4297      	cmp	r7, r2
   32720:	41bf      	sbcs	r7, r7
   32722:	1a64      	subs	r4, r4, r1
   32724:	427f      	negs	r7, r7
   32726:	1be4      	subs	r4, r4, r7
   32728:	2601      	movs	r6, #1
   3272a:	0017      	movs	r7, r2
   3272c:	e024      	b.n	32778 <__aeabi_dadd+0xb0>
   3272e:	4bc6      	ldr	r3, [pc, #792]	; (32a48 <__aeabi_dadd+0x380>)
   32730:	429e      	cmp	r6, r3
   32732:	d04d      	beq.n	327d0 <__aeabi_dadd+0x108>
   32734:	2380      	movs	r3, #128	; 0x80
   32736:	041b      	lsls	r3, r3, #16
   32738:	4319      	orrs	r1, r3
   3273a:	2d38      	cmp	r5, #56	; 0x38
   3273c:	dd00      	ble.n	32740 <__aeabi_dadd+0x78>
   3273e:	e107      	b.n	32950 <__aeabi_dadd+0x288>
   32740:	2d1f      	cmp	r5, #31
   32742:	dd00      	ble.n	32746 <__aeabi_dadd+0x7e>
   32744:	e138      	b.n	329b8 <__aeabi_dadd+0x2f0>
   32746:	2020      	movs	r0, #32
   32748:	1b43      	subs	r3, r0, r5
   3274a:	469a      	mov	sl, r3
   3274c:	000b      	movs	r3, r1
   3274e:	4650      	mov	r0, sl
   32750:	4083      	lsls	r3, r0
   32752:	4699      	mov	r9, r3
   32754:	0013      	movs	r3, r2
   32756:	4648      	mov	r0, r9
   32758:	40eb      	lsrs	r3, r5
   3275a:	4318      	orrs	r0, r3
   3275c:	0003      	movs	r3, r0
   3275e:	4650      	mov	r0, sl
   32760:	4082      	lsls	r2, r0
   32762:	1e50      	subs	r0, r2, #1
   32764:	4182      	sbcs	r2, r0
   32766:	40e9      	lsrs	r1, r5
   32768:	431a      	orrs	r2, r3
   3276a:	1aba      	subs	r2, r7, r2
   3276c:	1a61      	subs	r1, r4, r1
   3276e:	4297      	cmp	r7, r2
   32770:	41a4      	sbcs	r4, r4
   32772:	0017      	movs	r7, r2
   32774:	4264      	negs	r4, r4
   32776:	1b0c      	subs	r4, r1, r4
   32778:	0223      	lsls	r3, r4, #8
   3277a:	d562      	bpl.n	32842 <__aeabi_dadd+0x17a>
   3277c:	0264      	lsls	r4, r4, #9
   3277e:	0a65      	lsrs	r5, r4, #9
   32780:	2d00      	cmp	r5, #0
   32782:	d100      	bne.n	32786 <__aeabi_dadd+0xbe>
   32784:	e0df      	b.n	32946 <__aeabi_dadd+0x27e>
   32786:	0028      	movs	r0, r5
   32788:	f001 fbe4 	bl	33f54 <__clzsi2>
   3278c:	0003      	movs	r3, r0
   3278e:	3b08      	subs	r3, #8
   32790:	2b1f      	cmp	r3, #31
   32792:	dd00      	ble.n	32796 <__aeabi_dadd+0xce>
   32794:	e0d2      	b.n	3293c <__aeabi_dadd+0x274>
   32796:	2220      	movs	r2, #32
   32798:	003c      	movs	r4, r7
   3279a:	1ad2      	subs	r2, r2, r3
   3279c:	409d      	lsls	r5, r3
   3279e:	40d4      	lsrs	r4, r2
   327a0:	409f      	lsls	r7, r3
   327a2:	4325      	orrs	r5, r4
   327a4:	429e      	cmp	r6, r3
   327a6:	dd00      	ble.n	327aa <__aeabi_dadd+0xe2>
   327a8:	e0c4      	b.n	32934 <__aeabi_dadd+0x26c>
   327aa:	1b9e      	subs	r6, r3, r6
   327ac:	1c73      	adds	r3, r6, #1
   327ae:	2b1f      	cmp	r3, #31
   327b0:	dd00      	ble.n	327b4 <__aeabi_dadd+0xec>
   327b2:	e0f1      	b.n	32998 <__aeabi_dadd+0x2d0>
   327b4:	2220      	movs	r2, #32
   327b6:	0038      	movs	r0, r7
   327b8:	0029      	movs	r1, r5
   327ba:	1ad2      	subs	r2, r2, r3
   327bc:	40d8      	lsrs	r0, r3
   327be:	4091      	lsls	r1, r2
   327c0:	4097      	lsls	r7, r2
   327c2:	002c      	movs	r4, r5
   327c4:	4301      	orrs	r1, r0
   327c6:	1e78      	subs	r0, r7, #1
   327c8:	4187      	sbcs	r7, r0
   327ca:	40dc      	lsrs	r4, r3
   327cc:	2600      	movs	r6, #0
   327ce:	430f      	orrs	r7, r1
   327d0:	077b      	lsls	r3, r7, #29
   327d2:	d009      	beq.n	327e8 <__aeabi_dadd+0x120>
   327d4:	230f      	movs	r3, #15
   327d6:	403b      	ands	r3, r7
   327d8:	2b04      	cmp	r3, #4
   327da:	d005      	beq.n	327e8 <__aeabi_dadd+0x120>
   327dc:	1d3b      	adds	r3, r7, #4
   327de:	42bb      	cmp	r3, r7
   327e0:	41bf      	sbcs	r7, r7
   327e2:	427f      	negs	r7, r7
   327e4:	19e4      	adds	r4, r4, r7
   327e6:	001f      	movs	r7, r3
   327e8:	0223      	lsls	r3, r4, #8
   327ea:	d52c      	bpl.n	32846 <__aeabi_dadd+0x17e>
   327ec:	4b96      	ldr	r3, [pc, #600]	; (32a48 <__aeabi_dadd+0x380>)
   327ee:	3601      	adds	r6, #1
   327f0:	429e      	cmp	r6, r3
   327f2:	d100      	bne.n	327f6 <__aeabi_dadd+0x12e>
   327f4:	e09a      	b.n	3292c <__aeabi_dadd+0x264>
   327f6:	4645      	mov	r5, r8
   327f8:	4b94      	ldr	r3, [pc, #592]	; (32a4c <__aeabi_dadd+0x384>)
   327fa:	08ff      	lsrs	r7, r7, #3
   327fc:	401c      	ands	r4, r3
   327fe:	0760      	lsls	r0, r4, #29
   32800:	0576      	lsls	r6, r6, #21
   32802:	0264      	lsls	r4, r4, #9
   32804:	4307      	orrs	r7, r0
   32806:	0b24      	lsrs	r4, r4, #12
   32808:	0d76      	lsrs	r6, r6, #21
   3280a:	2100      	movs	r1, #0
   3280c:	0324      	lsls	r4, r4, #12
   3280e:	0b23      	lsrs	r3, r4, #12
   32810:	0d0c      	lsrs	r4, r1, #20
   32812:	4a8f      	ldr	r2, [pc, #572]	; (32a50 <__aeabi_dadd+0x388>)
   32814:	0524      	lsls	r4, r4, #20
   32816:	431c      	orrs	r4, r3
   32818:	4014      	ands	r4, r2
   3281a:	0533      	lsls	r3, r6, #20
   3281c:	4323      	orrs	r3, r4
   3281e:	005b      	lsls	r3, r3, #1
   32820:	07ed      	lsls	r5, r5, #31
   32822:	085b      	lsrs	r3, r3, #1
   32824:	432b      	orrs	r3, r5
   32826:	0038      	movs	r0, r7
   32828:	0019      	movs	r1, r3
   3282a:	bc3c      	pop	{r2, r3, r4, r5}
   3282c:	4690      	mov	r8, r2
   3282e:	4699      	mov	r9, r3
   32830:	46a2      	mov	sl, r4
   32832:	46ab      	mov	fp, r5
   32834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32836:	4664      	mov	r4, ip
   32838:	4304      	orrs	r4, r0
   3283a:	d100      	bne.n	3283e <__aeabi_dadd+0x176>
   3283c:	e211      	b.n	32c62 <__aeabi_dadd+0x59a>
   3283e:	0004      	movs	r4, r0
   32840:	4667      	mov	r7, ip
   32842:	077b      	lsls	r3, r7, #29
   32844:	d1c6      	bne.n	327d4 <__aeabi_dadd+0x10c>
   32846:	4645      	mov	r5, r8
   32848:	0760      	lsls	r0, r4, #29
   3284a:	08ff      	lsrs	r7, r7, #3
   3284c:	4307      	orrs	r7, r0
   3284e:	08e4      	lsrs	r4, r4, #3
   32850:	4b7d      	ldr	r3, [pc, #500]	; (32a48 <__aeabi_dadd+0x380>)
   32852:	429e      	cmp	r6, r3
   32854:	d030      	beq.n	328b8 <__aeabi_dadd+0x1f0>
   32856:	0324      	lsls	r4, r4, #12
   32858:	0576      	lsls	r6, r6, #21
   3285a:	0b24      	lsrs	r4, r4, #12
   3285c:	0d76      	lsrs	r6, r6, #21
   3285e:	e7d4      	b.n	3280a <__aeabi_dadd+0x142>
   32860:	1a33      	subs	r3, r6, r0
   32862:	469a      	mov	sl, r3
   32864:	2b00      	cmp	r3, #0
   32866:	dd78      	ble.n	3295a <__aeabi_dadd+0x292>
   32868:	2800      	cmp	r0, #0
   3286a:	d031      	beq.n	328d0 <__aeabi_dadd+0x208>
   3286c:	4876      	ldr	r0, [pc, #472]	; (32a48 <__aeabi_dadd+0x380>)
   3286e:	4286      	cmp	r6, r0
   32870:	d0ae      	beq.n	327d0 <__aeabi_dadd+0x108>
   32872:	2080      	movs	r0, #128	; 0x80
   32874:	0400      	lsls	r0, r0, #16
   32876:	4301      	orrs	r1, r0
   32878:	4653      	mov	r3, sl
   3287a:	2b38      	cmp	r3, #56	; 0x38
   3287c:	dc00      	bgt.n	32880 <__aeabi_dadd+0x1b8>
   3287e:	e0e9      	b.n	32a54 <__aeabi_dadd+0x38c>
   32880:	430a      	orrs	r2, r1
   32882:	1e51      	subs	r1, r2, #1
   32884:	418a      	sbcs	r2, r1
   32886:	2100      	movs	r1, #0
   32888:	19d2      	adds	r2, r2, r7
   3288a:	42ba      	cmp	r2, r7
   3288c:	41bf      	sbcs	r7, r7
   3288e:	1909      	adds	r1, r1, r4
   32890:	427c      	negs	r4, r7
   32892:	0017      	movs	r7, r2
   32894:	190c      	adds	r4, r1, r4
   32896:	0223      	lsls	r3, r4, #8
   32898:	d5d3      	bpl.n	32842 <__aeabi_dadd+0x17a>
   3289a:	4b6b      	ldr	r3, [pc, #428]	; (32a48 <__aeabi_dadd+0x380>)
   3289c:	3601      	adds	r6, #1
   3289e:	429e      	cmp	r6, r3
   328a0:	d100      	bne.n	328a4 <__aeabi_dadd+0x1dc>
   328a2:	e13a      	b.n	32b1a <__aeabi_dadd+0x452>
   328a4:	2001      	movs	r0, #1
   328a6:	4b69      	ldr	r3, [pc, #420]	; (32a4c <__aeabi_dadd+0x384>)
   328a8:	401c      	ands	r4, r3
   328aa:	087b      	lsrs	r3, r7, #1
   328ac:	4007      	ands	r7, r0
   328ae:	431f      	orrs	r7, r3
   328b0:	07e0      	lsls	r0, r4, #31
   328b2:	4307      	orrs	r7, r0
   328b4:	0864      	lsrs	r4, r4, #1
   328b6:	e78b      	b.n	327d0 <__aeabi_dadd+0x108>
   328b8:	0023      	movs	r3, r4
   328ba:	433b      	orrs	r3, r7
   328bc:	d100      	bne.n	328c0 <__aeabi_dadd+0x1f8>
   328be:	e1cb      	b.n	32c58 <__aeabi_dadd+0x590>
   328c0:	2280      	movs	r2, #128	; 0x80
   328c2:	0312      	lsls	r2, r2, #12
   328c4:	4314      	orrs	r4, r2
   328c6:	0324      	lsls	r4, r4, #12
   328c8:	0b24      	lsrs	r4, r4, #12
   328ca:	e79e      	b.n	3280a <__aeabi_dadd+0x142>
   328cc:	002e      	movs	r6, r5
   328ce:	e77f      	b.n	327d0 <__aeabi_dadd+0x108>
   328d0:	0008      	movs	r0, r1
   328d2:	4310      	orrs	r0, r2
   328d4:	d100      	bne.n	328d8 <__aeabi_dadd+0x210>
   328d6:	e0b4      	b.n	32a42 <__aeabi_dadd+0x37a>
   328d8:	1e58      	subs	r0, r3, #1
   328da:	2800      	cmp	r0, #0
   328dc:	d000      	beq.n	328e0 <__aeabi_dadd+0x218>
   328de:	e0de      	b.n	32a9e <__aeabi_dadd+0x3d6>
   328e0:	18ba      	adds	r2, r7, r2
   328e2:	42ba      	cmp	r2, r7
   328e4:	419b      	sbcs	r3, r3
   328e6:	1864      	adds	r4, r4, r1
   328e8:	425b      	negs	r3, r3
   328ea:	18e4      	adds	r4, r4, r3
   328ec:	0017      	movs	r7, r2
   328ee:	2601      	movs	r6, #1
   328f0:	0223      	lsls	r3, r4, #8
   328f2:	d5a6      	bpl.n	32842 <__aeabi_dadd+0x17a>
   328f4:	2602      	movs	r6, #2
   328f6:	e7d5      	b.n	328a4 <__aeabi_dadd+0x1dc>
   328f8:	2d00      	cmp	r5, #0
   328fa:	d16e      	bne.n	329da <__aeabi_dadd+0x312>
   328fc:	1c70      	adds	r0, r6, #1
   328fe:	0540      	lsls	r0, r0, #21
   32900:	0d40      	lsrs	r0, r0, #21
   32902:	2801      	cmp	r0, #1
   32904:	dc00      	bgt.n	32908 <__aeabi_dadd+0x240>
   32906:	e0f9      	b.n	32afc <__aeabi_dadd+0x434>
   32908:	1ab8      	subs	r0, r7, r2
   3290a:	4684      	mov	ip, r0
   3290c:	4287      	cmp	r7, r0
   3290e:	4180      	sbcs	r0, r0
   32910:	1ae5      	subs	r5, r4, r3
   32912:	4240      	negs	r0, r0
   32914:	1a2d      	subs	r5, r5, r0
   32916:	0228      	lsls	r0, r5, #8
   32918:	d400      	bmi.n	3291c <__aeabi_dadd+0x254>
   3291a:	e089      	b.n	32a30 <__aeabi_dadd+0x368>
   3291c:	1bd7      	subs	r7, r2, r7
   3291e:	42ba      	cmp	r2, r7
   32920:	4192      	sbcs	r2, r2
   32922:	1b1c      	subs	r4, r3, r4
   32924:	4252      	negs	r2, r2
   32926:	1aa5      	subs	r5, r4, r2
   32928:	46d8      	mov	r8, fp
   3292a:	e729      	b.n	32780 <__aeabi_dadd+0xb8>
   3292c:	4645      	mov	r5, r8
   3292e:	2400      	movs	r4, #0
   32930:	2700      	movs	r7, #0
   32932:	e76a      	b.n	3280a <__aeabi_dadd+0x142>
   32934:	4c45      	ldr	r4, [pc, #276]	; (32a4c <__aeabi_dadd+0x384>)
   32936:	1af6      	subs	r6, r6, r3
   32938:	402c      	ands	r4, r5
   3293a:	e749      	b.n	327d0 <__aeabi_dadd+0x108>
   3293c:	003d      	movs	r5, r7
   3293e:	3828      	subs	r0, #40	; 0x28
   32940:	4085      	lsls	r5, r0
   32942:	2700      	movs	r7, #0
   32944:	e72e      	b.n	327a4 <__aeabi_dadd+0xdc>
   32946:	0038      	movs	r0, r7
   32948:	f001 fb04 	bl	33f54 <__clzsi2>
   3294c:	3020      	adds	r0, #32
   3294e:	e71d      	b.n	3278c <__aeabi_dadd+0xc4>
   32950:	430a      	orrs	r2, r1
   32952:	1e51      	subs	r1, r2, #1
   32954:	418a      	sbcs	r2, r1
   32956:	2100      	movs	r1, #0
   32958:	e707      	b.n	3276a <__aeabi_dadd+0xa2>
   3295a:	2b00      	cmp	r3, #0
   3295c:	d000      	beq.n	32960 <__aeabi_dadd+0x298>
   3295e:	e0f3      	b.n	32b48 <__aeabi_dadd+0x480>
   32960:	1c70      	adds	r0, r6, #1
   32962:	0543      	lsls	r3, r0, #21
   32964:	0d5b      	lsrs	r3, r3, #21
   32966:	2b01      	cmp	r3, #1
   32968:	dc00      	bgt.n	3296c <__aeabi_dadd+0x2a4>
   3296a:	e0ad      	b.n	32ac8 <__aeabi_dadd+0x400>
   3296c:	4b36      	ldr	r3, [pc, #216]	; (32a48 <__aeabi_dadd+0x380>)
   3296e:	4298      	cmp	r0, r3
   32970:	d100      	bne.n	32974 <__aeabi_dadd+0x2ac>
   32972:	e0d1      	b.n	32b18 <__aeabi_dadd+0x450>
   32974:	18ba      	adds	r2, r7, r2
   32976:	42ba      	cmp	r2, r7
   32978:	41bf      	sbcs	r7, r7
   3297a:	1864      	adds	r4, r4, r1
   3297c:	427f      	negs	r7, r7
   3297e:	19e4      	adds	r4, r4, r7
   32980:	07e7      	lsls	r7, r4, #31
   32982:	0852      	lsrs	r2, r2, #1
   32984:	4317      	orrs	r7, r2
   32986:	0864      	lsrs	r4, r4, #1
   32988:	0006      	movs	r6, r0
   3298a:	e721      	b.n	327d0 <__aeabi_dadd+0x108>
   3298c:	482e      	ldr	r0, [pc, #184]	; (32a48 <__aeabi_dadd+0x380>)
   3298e:	4285      	cmp	r5, r0
   32990:	d100      	bne.n	32994 <__aeabi_dadd+0x2cc>
   32992:	e093      	b.n	32abc <__aeabi_dadd+0x3f4>
   32994:	001d      	movs	r5, r3
   32996:	e6d0      	b.n	3273a <__aeabi_dadd+0x72>
   32998:	0029      	movs	r1, r5
   3299a:	3e1f      	subs	r6, #31
   3299c:	40f1      	lsrs	r1, r6
   3299e:	2b20      	cmp	r3, #32
   329a0:	d100      	bne.n	329a4 <__aeabi_dadd+0x2dc>
   329a2:	e08d      	b.n	32ac0 <__aeabi_dadd+0x3f8>
   329a4:	2240      	movs	r2, #64	; 0x40
   329a6:	1ad3      	subs	r3, r2, r3
   329a8:	409d      	lsls	r5, r3
   329aa:	432f      	orrs	r7, r5
   329ac:	1e7d      	subs	r5, r7, #1
   329ae:	41af      	sbcs	r7, r5
   329b0:	2400      	movs	r4, #0
   329b2:	430f      	orrs	r7, r1
   329b4:	2600      	movs	r6, #0
   329b6:	e744      	b.n	32842 <__aeabi_dadd+0x17a>
   329b8:	002b      	movs	r3, r5
   329ba:	0008      	movs	r0, r1
   329bc:	3b20      	subs	r3, #32
   329be:	40d8      	lsrs	r0, r3
   329c0:	0003      	movs	r3, r0
   329c2:	2d20      	cmp	r5, #32
   329c4:	d100      	bne.n	329c8 <__aeabi_dadd+0x300>
   329c6:	e07d      	b.n	32ac4 <__aeabi_dadd+0x3fc>
   329c8:	2040      	movs	r0, #64	; 0x40
   329ca:	1b45      	subs	r5, r0, r5
   329cc:	40a9      	lsls	r1, r5
   329ce:	430a      	orrs	r2, r1
   329d0:	1e51      	subs	r1, r2, #1
   329d2:	418a      	sbcs	r2, r1
   329d4:	2100      	movs	r1, #0
   329d6:	431a      	orrs	r2, r3
   329d8:	e6c7      	b.n	3276a <__aeabi_dadd+0xa2>
   329da:	2e00      	cmp	r6, #0
   329dc:	d050      	beq.n	32a80 <__aeabi_dadd+0x3b8>
   329de:	4e1a      	ldr	r6, [pc, #104]	; (32a48 <__aeabi_dadd+0x380>)
   329e0:	42b0      	cmp	r0, r6
   329e2:	d057      	beq.n	32a94 <__aeabi_dadd+0x3cc>
   329e4:	2680      	movs	r6, #128	; 0x80
   329e6:	426b      	negs	r3, r5
   329e8:	4699      	mov	r9, r3
   329ea:	0436      	lsls	r6, r6, #16
   329ec:	4334      	orrs	r4, r6
   329ee:	464b      	mov	r3, r9
   329f0:	2b38      	cmp	r3, #56	; 0x38
   329f2:	dd00      	ble.n	329f6 <__aeabi_dadd+0x32e>
   329f4:	e0d6      	b.n	32ba4 <__aeabi_dadd+0x4dc>
   329f6:	2b1f      	cmp	r3, #31
   329f8:	dd00      	ble.n	329fc <__aeabi_dadd+0x334>
   329fa:	e135      	b.n	32c68 <__aeabi_dadd+0x5a0>
   329fc:	2620      	movs	r6, #32
   329fe:	1af5      	subs	r5, r6, r3
   32a00:	0026      	movs	r6, r4
   32a02:	40ae      	lsls	r6, r5
   32a04:	46b2      	mov	sl, r6
   32a06:	003e      	movs	r6, r7
   32a08:	40de      	lsrs	r6, r3
   32a0a:	46ac      	mov	ip, r5
   32a0c:	0035      	movs	r5, r6
   32a0e:	4656      	mov	r6, sl
   32a10:	432e      	orrs	r6, r5
   32a12:	4665      	mov	r5, ip
   32a14:	40af      	lsls	r7, r5
   32a16:	1e7d      	subs	r5, r7, #1
   32a18:	41af      	sbcs	r7, r5
   32a1a:	40dc      	lsrs	r4, r3
   32a1c:	4337      	orrs	r7, r6
   32a1e:	1bd7      	subs	r7, r2, r7
   32a20:	42ba      	cmp	r2, r7
   32a22:	4192      	sbcs	r2, r2
   32a24:	1b0c      	subs	r4, r1, r4
   32a26:	4252      	negs	r2, r2
   32a28:	1aa4      	subs	r4, r4, r2
   32a2a:	0006      	movs	r6, r0
   32a2c:	46d8      	mov	r8, fp
   32a2e:	e6a3      	b.n	32778 <__aeabi_dadd+0xb0>
   32a30:	4664      	mov	r4, ip
   32a32:	4667      	mov	r7, ip
   32a34:	432c      	orrs	r4, r5
   32a36:	d000      	beq.n	32a3a <__aeabi_dadd+0x372>
   32a38:	e6a2      	b.n	32780 <__aeabi_dadd+0xb8>
   32a3a:	2500      	movs	r5, #0
   32a3c:	2600      	movs	r6, #0
   32a3e:	2700      	movs	r7, #0
   32a40:	e706      	b.n	32850 <__aeabi_dadd+0x188>
   32a42:	001e      	movs	r6, r3
   32a44:	e6c4      	b.n	327d0 <__aeabi_dadd+0x108>
   32a46:	46c0      	nop			; (mov r8, r8)
   32a48:	000007ff 	.word	0x000007ff
   32a4c:	ff7fffff 	.word	0xff7fffff
   32a50:	800fffff 	.word	0x800fffff
   32a54:	2b1f      	cmp	r3, #31
   32a56:	dc63      	bgt.n	32b20 <__aeabi_dadd+0x458>
   32a58:	2020      	movs	r0, #32
   32a5a:	1ac3      	subs	r3, r0, r3
   32a5c:	0008      	movs	r0, r1
   32a5e:	4098      	lsls	r0, r3
   32a60:	469c      	mov	ip, r3
   32a62:	4683      	mov	fp, r0
   32a64:	4653      	mov	r3, sl
   32a66:	0010      	movs	r0, r2
   32a68:	40d8      	lsrs	r0, r3
   32a6a:	0003      	movs	r3, r0
   32a6c:	4658      	mov	r0, fp
   32a6e:	4318      	orrs	r0, r3
   32a70:	4663      	mov	r3, ip
   32a72:	409a      	lsls	r2, r3
   32a74:	1e53      	subs	r3, r2, #1
   32a76:	419a      	sbcs	r2, r3
   32a78:	4653      	mov	r3, sl
   32a7a:	4302      	orrs	r2, r0
   32a7c:	40d9      	lsrs	r1, r3
   32a7e:	e703      	b.n	32888 <__aeabi_dadd+0x1c0>
   32a80:	0026      	movs	r6, r4
   32a82:	433e      	orrs	r6, r7
   32a84:	d006      	beq.n	32a94 <__aeabi_dadd+0x3cc>
   32a86:	43eb      	mvns	r3, r5
   32a88:	4699      	mov	r9, r3
   32a8a:	2b00      	cmp	r3, #0
   32a8c:	d0c7      	beq.n	32a1e <__aeabi_dadd+0x356>
   32a8e:	4e94      	ldr	r6, [pc, #592]	; (32ce0 <__aeabi_dadd+0x618>)
   32a90:	42b0      	cmp	r0, r6
   32a92:	d1ac      	bne.n	329ee <__aeabi_dadd+0x326>
   32a94:	000c      	movs	r4, r1
   32a96:	0017      	movs	r7, r2
   32a98:	0006      	movs	r6, r0
   32a9a:	46d8      	mov	r8, fp
   32a9c:	e698      	b.n	327d0 <__aeabi_dadd+0x108>
   32a9e:	4b90      	ldr	r3, [pc, #576]	; (32ce0 <__aeabi_dadd+0x618>)
   32aa0:	459a      	cmp	sl, r3
   32aa2:	d00b      	beq.n	32abc <__aeabi_dadd+0x3f4>
   32aa4:	4682      	mov	sl, r0
   32aa6:	e6e7      	b.n	32878 <__aeabi_dadd+0x1b0>
   32aa8:	2800      	cmp	r0, #0
   32aaa:	d000      	beq.n	32aae <__aeabi_dadd+0x3e6>
   32aac:	e09e      	b.n	32bec <__aeabi_dadd+0x524>
   32aae:	0018      	movs	r0, r3
   32ab0:	4310      	orrs	r0, r2
   32ab2:	d100      	bne.n	32ab6 <__aeabi_dadd+0x3ee>
   32ab4:	e0e9      	b.n	32c8a <__aeabi_dadd+0x5c2>
   32ab6:	001c      	movs	r4, r3
   32ab8:	0017      	movs	r7, r2
   32aba:	46d8      	mov	r8, fp
   32abc:	4e88      	ldr	r6, [pc, #544]	; (32ce0 <__aeabi_dadd+0x618>)
   32abe:	e687      	b.n	327d0 <__aeabi_dadd+0x108>
   32ac0:	2500      	movs	r5, #0
   32ac2:	e772      	b.n	329aa <__aeabi_dadd+0x2e2>
   32ac4:	2100      	movs	r1, #0
   32ac6:	e782      	b.n	329ce <__aeabi_dadd+0x306>
   32ac8:	0023      	movs	r3, r4
   32aca:	433b      	orrs	r3, r7
   32acc:	2e00      	cmp	r6, #0
   32ace:	d000      	beq.n	32ad2 <__aeabi_dadd+0x40a>
   32ad0:	e0ab      	b.n	32c2a <__aeabi_dadd+0x562>
   32ad2:	2b00      	cmp	r3, #0
   32ad4:	d100      	bne.n	32ad8 <__aeabi_dadd+0x410>
   32ad6:	e0e7      	b.n	32ca8 <__aeabi_dadd+0x5e0>
   32ad8:	000b      	movs	r3, r1
   32ada:	4313      	orrs	r3, r2
   32adc:	d100      	bne.n	32ae0 <__aeabi_dadd+0x418>
   32ade:	e677      	b.n	327d0 <__aeabi_dadd+0x108>
   32ae0:	18ba      	adds	r2, r7, r2
   32ae2:	42ba      	cmp	r2, r7
   32ae4:	41bf      	sbcs	r7, r7
   32ae6:	1864      	adds	r4, r4, r1
   32ae8:	427f      	negs	r7, r7
   32aea:	19e4      	adds	r4, r4, r7
   32aec:	0223      	lsls	r3, r4, #8
   32aee:	d400      	bmi.n	32af2 <__aeabi_dadd+0x42a>
   32af0:	e0f2      	b.n	32cd8 <__aeabi_dadd+0x610>
   32af2:	4b7c      	ldr	r3, [pc, #496]	; (32ce4 <__aeabi_dadd+0x61c>)
   32af4:	0017      	movs	r7, r2
   32af6:	401c      	ands	r4, r3
   32af8:	0006      	movs	r6, r0
   32afa:	e669      	b.n	327d0 <__aeabi_dadd+0x108>
   32afc:	0020      	movs	r0, r4
   32afe:	4338      	orrs	r0, r7
   32b00:	2e00      	cmp	r6, #0
   32b02:	d1d1      	bne.n	32aa8 <__aeabi_dadd+0x3e0>
   32b04:	2800      	cmp	r0, #0
   32b06:	d15b      	bne.n	32bc0 <__aeabi_dadd+0x4f8>
   32b08:	001c      	movs	r4, r3
   32b0a:	4314      	orrs	r4, r2
   32b0c:	d100      	bne.n	32b10 <__aeabi_dadd+0x448>
   32b0e:	e0a8      	b.n	32c62 <__aeabi_dadd+0x59a>
   32b10:	001c      	movs	r4, r3
   32b12:	0017      	movs	r7, r2
   32b14:	46d8      	mov	r8, fp
   32b16:	e65b      	b.n	327d0 <__aeabi_dadd+0x108>
   32b18:	0006      	movs	r6, r0
   32b1a:	2400      	movs	r4, #0
   32b1c:	2700      	movs	r7, #0
   32b1e:	e697      	b.n	32850 <__aeabi_dadd+0x188>
   32b20:	4650      	mov	r0, sl
   32b22:	000b      	movs	r3, r1
   32b24:	3820      	subs	r0, #32
   32b26:	40c3      	lsrs	r3, r0
   32b28:	4699      	mov	r9, r3
   32b2a:	4653      	mov	r3, sl
   32b2c:	2b20      	cmp	r3, #32
   32b2e:	d100      	bne.n	32b32 <__aeabi_dadd+0x46a>
   32b30:	e095      	b.n	32c5e <__aeabi_dadd+0x596>
   32b32:	2340      	movs	r3, #64	; 0x40
   32b34:	4650      	mov	r0, sl
   32b36:	1a1b      	subs	r3, r3, r0
   32b38:	4099      	lsls	r1, r3
   32b3a:	430a      	orrs	r2, r1
   32b3c:	1e51      	subs	r1, r2, #1
   32b3e:	418a      	sbcs	r2, r1
   32b40:	464b      	mov	r3, r9
   32b42:	2100      	movs	r1, #0
   32b44:	431a      	orrs	r2, r3
   32b46:	e69f      	b.n	32888 <__aeabi_dadd+0x1c0>
   32b48:	2e00      	cmp	r6, #0
   32b4a:	d130      	bne.n	32bae <__aeabi_dadd+0x4e6>
   32b4c:	0026      	movs	r6, r4
   32b4e:	433e      	orrs	r6, r7
   32b50:	d067      	beq.n	32c22 <__aeabi_dadd+0x55a>
   32b52:	43db      	mvns	r3, r3
   32b54:	469a      	mov	sl, r3
   32b56:	2b00      	cmp	r3, #0
   32b58:	d01c      	beq.n	32b94 <__aeabi_dadd+0x4cc>
   32b5a:	4e61      	ldr	r6, [pc, #388]	; (32ce0 <__aeabi_dadd+0x618>)
   32b5c:	42b0      	cmp	r0, r6
   32b5e:	d060      	beq.n	32c22 <__aeabi_dadd+0x55a>
   32b60:	4653      	mov	r3, sl
   32b62:	2b38      	cmp	r3, #56	; 0x38
   32b64:	dd00      	ble.n	32b68 <__aeabi_dadd+0x4a0>
   32b66:	e096      	b.n	32c96 <__aeabi_dadd+0x5ce>
   32b68:	2b1f      	cmp	r3, #31
   32b6a:	dd00      	ble.n	32b6e <__aeabi_dadd+0x4a6>
   32b6c:	e09f      	b.n	32cae <__aeabi_dadd+0x5e6>
   32b6e:	2620      	movs	r6, #32
   32b70:	1af3      	subs	r3, r6, r3
   32b72:	0026      	movs	r6, r4
   32b74:	409e      	lsls	r6, r3
   32b76:	469c      	mov	ip, r3
   32b78:	46b3      	mov	fp, r6
   32b7a:	4653      	mov	r3, sl
   32b7c:	003e      	movs	r6, r7
   32b7e:	40de      	lsrs	r6, r3
   32b80:	0033      	movs	r3, r6
   32b82:	465e      	mov	r6, fp
   32b84:	431e      	orrs	r6, r3
   32b86:	4663      	mov	r3, ip
   32b88:	409f      	lsls	r7, r3
   32b8a:	1e7b      	subs	r3, r7, #1
   32b8c:	419f      	sbcs	r7, r3
   32b8e:	4653      	mov	r3, sl
   32b90:	40dc      	lsrs	r4, r3
   32b92:	4337      	orrs	r7, r6
   32b94:	18bf      	adds	r7, r7, r2
   32b96:	4297      	cmp	r7, r2
   32b98:	4192      	sbcs	r2, r2
   32b9a:	1864      	adds	r4, r4, r1
   32b9c:	4252      	negs	r2, r2
   32b9e:	18a4      	adds	r4, r4, r2
   32ba0:	0006      	movs	r6, r0
   32ba2:	e678      	b.n	32896 <__aeabi_dadd+0x1ce>
   32ba4:	4327      	orrs	r7, r4
   32ba6:	1e7c      	subs	r4, r7, #1
   32ba8:	41a7      	sbcs	r7, r4
   32baa:	2400      	movs	r4, #0
   32bac:	e737      	b.n	32a1e <__aeabi_dadd+0x356>
   32bae:	4e4c      	ldr	r6, [pc, #304]	; (32ce0 <__aeabi_dadd+0x618>)
   32bb0:	42b0      	cmp	r0, r6
   32bb2:	d036      	beq.n	32c22 <__aeabi_dadd+0x55a>
   32bb4:	2680      	movs	r6, #128	; 0x80
   32bb6:	425b      	negs	r3, r3
   32bb8:	0436      	lsls	r6, r6, #16
   32bba:	469a      	mov	sl, r3
   32bbc:	4334      	orrs	r4, r6
   32bbe:	e7cf      	b.n	32b60 <__aeabi_dadd+0x498>
   32bc0:	0018      	movs	r0, r3
   32bc2:	4310      	orrs	r0, r2
   32bc4:	d100      	bne.n	32bc8 <__aeabi_dadd+0x500>
   32bc6:	e603      	b.n	327d0 <__aeabi_dadd+0x108>
   32bc8:	1ab8      	subs	r0, r7, r2
   32bca:	4684      	mov	ip, r0
   32bcc:	4567      	cmp	r7, ip
   32bce:	41ad      	sbcs	r5, r5
   32bd0:	1ae0      	subs	r0, r4, r3
   32bd2:	426d      	negs	r5, r5
   32bd4:	1b40      	subs	r0, r0, r5
   32bd6:	0205      	lsls	r5, r0, #8
   32bd8:	d400      	bmi.n	32bdc <__aeabi_dadd+0x514>
   32bda:	e62c      	b.n	32836 <__aeabi_dadd+0x16e>
   32bdc:	1bd7      	subs	r7, r2, r7
   32bde:	42ba      	cmp	r2, r7
   32be0:	4192      	sbcs	r2, r2
   32be2:	1b1c      	subs	r4, r3, r4
   32be4:	4252      	negs	r2, r2
   32be6:	1aa4      	subs	r4, r4, r2
   32be8:	46d8      	mov	r8, fp
   32bea:	e5f1      	b.n	327d0 <__aeabi_dadd+0x108>
   32bec:	0018      	movs	r0, r3
   32bee:	4310      	orrs	r0, r2
   32bf0:	d100      	bne.n	32bf4 <__aeabi_dadd+0x52c>
   32bf2:	e763      	b.n	32abc <__aeabi_dadd+0x3f4>
   32bf4:	08f8      	lsrs	r0, r7, #3
   32bf6:	0767      	lsls	r7, r4, #29
   32bf8:	4307      	orrs	r7, r0
   32bfa:	2080      	movs	r0, #128	; 0x80
   32bfc:	08e4      	lsrs	r4, r4, #3
   32bfe:	0300      	lsls	r0, r0, #12
   32c00:	4204      	tst	r4, r0
   32c02:	d008      	beq.n	32c16 <__aeabi_dadd+0x54e>
   32c04:	08dd      	lsrs	r5, r3, #3
   32c06:	4205      	tst	r5, r0
   32c08:	d105      	bne.n	32c16 <__aeabi_dadd+0x54e>
   32c0a:	08d2      	lsrs	r2, r2, #3
   32c0c:	0759      	lsls	r1, r3, #29
   32c0e:	4311      	orrs	r1, r2
   32c10:	000f      	movs	r7, r1
   32c12:	002c      	movs	r4, r5
   32c14:	46d8      	mov	r8, fp
   32c16:	0f7b      	lsrs	r3, r7, #29
   32c18:	00e4      	lsls	r4, r4, #3
   32c1a:	431c      	orrs	r4, r3
   32c1c:	00ff      	lsls	r7, r7, #3
   32c1e:	4e30      	ldr	r6, [pc, #192]	; (32ce0 <__aeabi_dadd+0x618>)
   32c20:	e5d6      	b.n	327d0 <__aeabi_dadd+0x108>
   32c22:	000c      	movs	r4, r1
   32c24:	0017      	movs	r7, r2
   32c26:	0006      	movs	r6, r0
   32c28:	e5d2      	b.n	327d0 <__aeabi_dadd+0x108>
   32c2a:	2b00      	cmp	r3, #0
   32c2c:	d038      	beq.n	32ca0 <__aeabi_dadd+0x5d8>
   32c2e:	000b      	movs	r3, r1
   32c30:	4313      	orrs	r3, r2
   32c32:	d100      	bne.n	32c36 <__aeabi_dadd+0x56e>
   32c34:	e742      	b.n	32abc <__aeabi_dadd+0x3f4>
   32c36:	08f8      	lsrs	r0, r7, #3
   32c38:	0767      	lsls	r7, r4, #29
   32c3a:	4307      	orrs	r7, r0
   32c3c:	2080      	movs	r0, #128	; 0x80
   32c3e:	08e4      	lsrs	r4, r4, #3
   32c40:	0300      	lsls	r0, r0, #12
   32c42:	4204      	tst	r4, r0
   32c44:	d0e7      	beq.n	32c16 <__aeabi_dadd+0x54e>
   32c46:	08cb      	lsrs	r3, r1, #3
   32c48:	4203      	tst	r3, r0
   32c4a:	d1e4      	bne.n	32c16 <__aeabi_dadd+0x54e>
   32c4c:	08d2      	lsrs	r2, r2, #3
   32c4e:	0749      	lsls	r1, r1, #29
   32c50:	4311      	orrs	r1, r2
   32c52:	000f      	movs	r7, r1
   32c54:	001c      	movs	r4, r3
   32c56:	e7de      	b.n	32c16 <__aeabi_dadd+0x54e>
   32c58:	2700      	movs	r7, #0
   32c5a:	2400      	movs	r4, #0
   32c5c:	e5d5      	b.n	3280a <__aeabi_dadd+0x142>
   32c5e:	2100      	movs	r1, #0
   32c60:	e76b      	b.n	32b3a <__aeabi_dadd+0x472>
   32c62:	2500      	movs	r5, #0
   32c64:	2700      	movs	r7, #0
   32c66:	e5f3      	b.n	32850 <__aeabi_dadd+0x188>
   32c68:	464e      	mov	r6, r9
   32c6a:	0025      	movs	r5, r4
   32c6c:	3e20      	subs	r6, #32
   32c6e:	40f5      	lsrs	r5, r6
   32c70:	464b      	mov	r3, r9
   32c72:	002e      	movs	r6, r5
   32c74:	2b20      	cmp	r3, #32
   32c76:	d02d      	beq.n	32cd4 <__aeabi_dadd+0x60c>
   32c78:	2540      	movs	r5, #64	; 0x40
   32c7a:	1aed      	subs	r5, r5, r3
   32c7c:	40ac      	lsls	r4, r5
   32c7e:	4327      	orrs	r7, r4
   32c80:	1e7c      	subs	r4, r7, #1
   32c82:	41a7      	sbcs	r7, r4
   32c84:	2400      	movs	r4, #0
   32c86:	4337      	orrs	r7, r6
   32c88:	e6c9      	b.n	32a1e <__aeabi_dadd+0x356>
   32c8a:	2480      	movs	r4, #128	; 0x80
   32c8c:	2500      	movs	r5, #0
   32c8e:	0324      	lsls	r4, r4, #12
   32c90:	4e13      	ldr	r6, [pc, #76]	; (32ce0 <__aeabi_dadd+0x618>)
   32c92:	2700      	movs	r7, #0
   32c94:	e5dc      	b.n	32850 <__aeabi_dadd+0x188>
   32c96:	4327      	orrs	r7, r4
   32c98:	1e7c      	subs	r4, r7, #1
   32c9a:	41a7      	sbcs	r7, r4
   32c9c:	2400      	movs	r4, #0
   32c9e:	e779      	b.n	32b94 <__aeabi_dadd+0x4cc>
   32ca0:	000c      	movs	r4, r1
   32ca2:	0017      	movs	r7, r2
   32ca4:	4e0e      	ldr	r6, [pc, #56]	; (32ce0 <__aeabi_dadd+0x618>)
   32ca6:	e593      	b.n	327d0 <__aeabi_dadd+0x108>
   32ca8:	000c      	movs	r4, r1
   32caa:	0017      	movs	r7, r2
   32cac:	e590      	b.n	327d0 <__aeabi_dadd+0x108>
   32cae:	4656      	mov	r6, sl
   32cb0:	0023      	movs	r3, r4
   32cb2:	3e20      	subs	r6, #32
   32cb4:	40f3      	lsrs	r3, r6
   32cb6:	4699      	mov	r9, r3
   32cb8:	4653      	mov	r3, sl
   32cba:	2b20      	cmp	r3, #32
   32cbc:	d00e      	beq.n	32cdc <__aeabi_dadd+0x614>
   32cbe:	2340      	movs	r3, #64	; 0x40
   32cc0:	4656      	mov	r6, sl
   32cc2:	1b9b      	subs	r3, r3, r6
   32cc4:	409c      	lsls	r4, r3
   32cc6:	4327      	orrs	r7, r4
   32cc8:	1e7c      	subs	r4, r7, #1
   32cca:	41a7      	sbcs	r7, r4
   32ccc:	464b      	mov	r3, r9
   32cce:	2400      	movs	r4, #0
   32cd0:	431f      	orrs	r7, r3
   32cd2:	e75f      	b.n	32b94 <__aeabi_dadd+0x4cc>
   32cd4:	2400      	movs	r4, #0
   32cd6:	e7d2      	b.n	32c7e <__aeabi_dadd+0x5b6>
   32cd8:	0017      	movs	r7, r2
   32cda:	e5b2      	b.n	32842 <__aeabi_dadd+0x17a>
   32cdc:	2400      	movs	r4, #0
   32cde:	e7f2      	b.n	32cc6 <__aeabi_dadd+0x5fe>
   32ce0:	000007ff 	.word	0x000007ff
   32ce4:	ff7fffff 	.word	0xff7fffff

00032ce8 <__aeabi_ddiv>:
   32ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   32cea:	4657      	mov	r7, sl
   32cec:	4645      	mov	r5, r8
   32cee:	46de      	mov	lr, fp
   32cf0:	464e      	mov	r6, r9
   32cf2:	b5e0      	push	{r5, r6, r7, lr}
   32cf4:	004c      	lsls	r4, r1, #1
   32cf6:	030e      	lsls	r6, r1, #12
   32cf8:	b087      	sub	sp, #28
   32cfa:	4683      	mov	fp, r0
   32cfc:	4692      	mov	sl, r2
   32cfe:	001d      	movs	r5, r3
   32d00:	4680      	mov	r8, r0
   32d02:	0b36      	lsrs	r6, r6, #12
   32d04:	0d64      	lsrs	r4, r4, #21
   32d06:	0fcf      	lsrs	r7, r1, #31
   32d08:	2c00      	cmp	r4, #0
   32d0a:	d04f      	beq.n	32dac <__aeabi_ddiv+0xc4>
   32d0c:	4b6f      	ldr	r3, [pc, #444]	; (32ecc <__aeabi_ddiv+0x1e4>)
   32d0e:	429c      	cmp	r4, r3
   32d10:	d035      	beq.n	32d7e <__aeabi_ddiv+0x96>
   32d12:	2380      	movs	r3, #128	; 0x80
   32d14:	0f42      	lsrs	r2, r0, #29
   32d16:	041b      	lsls	r3, r3, #16
   32d18:	00f6      	lsls	r6, r6, #3
   32d1a:	4313      	orrs	r3, r2
   32d1c:	4333      	orrs	r3, r6
   32d1e:	4699      	mov	r9, r3
   32d20:	00c3      	lsls	r3, r0, #3
   32d22:	4698      	mov	r8, r3
   32d24:	4b6a      	ldr	r3, [pc, #424]	; (32ed0 <__aeabi_ddiv+0x1e8>)
   32d26:	2600      	movs	r6, #0
   32d28:	469c      	mov	ip, r3
   32d2a:	2300      	movs	r3, #0
   32d2c:	4464      	add	r4, ip
   32d2e:	9303      	str	r3, [sp, #12]
   32d30:	032b      	lsls	r3, r5, #12
   32d32:	0b1b      	lsrs	r3, r3, #12
   32d34:	469b      	mov	fp, r3
   32d36:	006b      	lsls	r3, r5, #1
   32d38:	0fed      	lsrs	r5, r5, #31
   32d3a:	4650      	mov	r0, sl
   32d3c:	0d5b      	lsrs	r3, r3, #21
   32d3e:	9501      	str	r5, [sp, #4]
   32d40:	d05e      	beq.n	32e00 <__aeabi_ddiv+0x118>
   32d42:	4a62      	ldr	r2, [pc, #392]	; (32ecc <__aeabi_ddiv+0x1e4>)
   32d44:	4293      	cmp	r3, r2
   32d46:	d053      	beq.n	32df0 <__aeabi_ddiv+0x108>
   32d48:	465a      	mov	r2, fp
   32d4a:	00d1      	lsls	r1, r2, #3
   32d4c:	2280      	movs	r2, #128	; 0x80
   32d4e:	0f40      	lsrs	r0, r0, #29
   32d50:	0412      	lsls	r2, r2, #16
   32d52:	4302      	orrs	r2, r0
   32d54:	430a      	orrs	r2, r1
   32d56:	4693      	mov	fp, r2
   32d58:	4652      	mov	r2, sl
   32d5a:	00d1      	lsls	r1, r2, #3
   32d5c:	4a5c      	ldr	r2, [pc, #368]	; (32ed0 <__aeabi_ddiv+0x1e8>)
   32d5e:	4694      	mov	ip, r2
   32d60:	2200      	movs	r2, #0
   32d62:	4463      	add	r3, ip
   32d64:	0038      	movs	r0, r7
   32d66:	4068      	eors	r0, r5
   32d68:	4684      	mov	ip, r0
   32d6a:	9002      	str	r0, [sp, #8]
   32d6c:	1ae4      	subs	r4, r4, r3
   32d6e:	4316      	orrs	r6, r2
   32d70:	2e0f      	cmp	r6, #15
   32d72:	d900      	bls.n	32d76 <__aeabi_ddiv+0x8e>
   32d74:	e0b4      	b.n	32ee0 <__aeabi_ddiv+0x1f8>
   32d76:	4b57      	ldr	r3, [pc, #348]	; (32ed4 <__aeabi_ddiv+0x1ec>)
   32d78:	00b6      	lsls	r6, r6, #2
   32d7a:	599b      	ldr	r3, [r3, r6]
   32d7c:	469f      	mov	pc, r3
   32d7e:	0003      	movs	r3, r0
   32d80:	4333      	orrs	r3, r6
   32d82:	4699      	mov	r9, r3
   32d84:	d16c      	bne.n	32e60 <__aeabi_ddiv+0x178>
   32d86:	2300      	movs	r3, #0
   32d88:	4698      	mov	r8, r3
   32d8a:	3302      	adds	r3, #2
   32d8c:	2608      	movs	r6, #8
   32d8e:	9303      	str	r3, [sp, #12]
   32d90:	e7ce      	b.n	32d30 <__aeabi_ddiv+0x48>
   32d92:	46cb      	mov	fp, r9
   32d94:	4641      	mov	r1, r8
   32d96:	9a03      	ldr	r2, [sp, #12]
   32d98:	9701      	str	r7, [sp, #4]
   32d9a:	2a02      	cmp	r2, #2
   32d9c:	d165      	bne.n	32e6a <__aeabi_ddiv+0x182>
   32d9e:	9b01      	ldr	r3, [sp, #4]
   32da0:	4c4a      	ldr	r4, [pc, #296]	; (32ecc <__aeabi_ddiv+0x1e4>)
   32da2:	469c      	mov	ip, r3
   32da4:	2300      	movs	r3, #0
   32da6:	2200      	movs	r2, #0
   32da8:	4698      	mov	r8, r3
   32daa:	e06b      	b.n	32e84 <__aeabi_ddiv+0x19c>
   32dac:	0003      	movs	r3, r0
   32dae:	4333      	orrs	r3, r6
   32db0:	4699      	mov	r9, r3
   32db2:	d04e      	beq.n	32e52 <__aeabi_ddiv+0x16a>
   32db4:	2e00      	cmp	r6, #0
   32db6:	d100      	bne.n	32dba <__aeabi_ddiv+0xd2>
   32db8:	e1bc      	b.n	33134 <__aeabi_ddiv+0x44c>
   32dba:	0030      	movs	r0, r6
   32dbc:	f001 f8ca 	bl	33f54 <__clzsi2>
   32dc0:	0003      	movs	r3, r0
   32dc2:	3b0b      	subs	r3, #11
   32dc4:	2b1c      	cmp	r3, #28
   32dc6:	dd00      	ble.n	32dca <__aeabi_ddiv+0xe2>
   32dc8:	e1ac      	b.n	33124 <__aeabi_ddiv+0x43c>
   32dca:	221d      	movs	r2, #29
   32dcc:	1ad3      	subs	r3, r2, r3
   32dce:	465a      	mov	r2, fp
   32dd0:	0001      	movs	r1, r0
   32dd2:	40da      	lsrs	r2, r3
   32dd4:	3908      	subs	r1, #8
   32dd6:	408e      	lsls	r6, r1
   32dd8:	0013      	movs	r3, r2
   32dda:	4333      	orrs	r3, r6
   32ddc:	4699      	mov	r9, r3
   32dde:	465b      	mov	r3, fp
   32de0:	408b      	lsls	r3, r1
   32de2:	4698      	mov	r8, r3
   32de4:	2300      	movs	r3, #0
   32de6:	4c3c      	ldr	r4, [pc, #240]	; (32ed8 <__aeabi_ddiv+0x1f0>)
   32de8:	2600      	movs	r6, #0
   32dea:	1a24      	subs	r4, r4, r0
   32dec:	9303      	str	r3, [sp, #12]
   32dee:	e79f      	b.n	32d30 <__aeabi_ddiv+0x48>
   32df0:	4651      	mov	r1, sl
   32df2:	465a      	mov	r2, fp
   32df4:	4311      	orrs	r1, r2
   32df6:	d129      	bne.n	32e4c <__aeabi_ddiv+0x164>
   32df8:	2200      	movs	r2, #0
   32dfa:	4693      	mov	fp, r2
   32dfc:	3202      	adds	r2, #2
   32dfe:	e7b1      	b.n	32d64 <__aeabi_ddiv+0x7c>
   32e00:	4659      	mov	r1, fp
   32e02:	4301      	orrs	r1, r0
   32e04:	d01e      	beq.n	32e44 <__aeabi_ddiv+0x15c>
   32e06:	465b      	mov	r3, fp
   32e08:	2b00      	cmp	r3, #0
   32e0a:	d100      	bne.n	32e0e <__aeabi_ddiv+0x126>
   32e0c:	e19e      	b.n	3314c <__aeabi_ddiv+0x464>
   32e0e:	4658      	mov	r0, fp
   32e10:	f001 f8a0 	bl	33f54 <__clzsi2>
   32e14:	0003      	movs	r3, r0
   32e16:	3b0b      	subs	r3, #11
   32e18:	2b1c      	cmp	r3, #28
   32e1a:	dd00      	ble.n	32e1e <__aeabi_ddiv+0x136>
   32e1c:	e18f      	b.n	3313e <__aeabi_ddiv+0x456>
   32e1e:	0002      	movs	r2, r0
   32e20:	4659      	mov	r1, fp
   32e22:	3a08      	subs	r2, #8
   32e24:	4091      	lsls	r1, r2
   32e26:	468b      	mov	fp, r1
   32e28:	211d      	movs	r1, #29
   32e2a:	1acb      	subs	r3, r1, r3
   32e2c:	4651      	mov	r1, sl
   32e2e:	40d9      	lsrs	r1, r3
   32e30:	000b      	movs	r3, r1
   32e32:	4659      	mov	r1, fp
   32e34:	430b      	orrs	r3, r1
   32e36:	4651      	mov	r1, sl
   32e38:	469b      	mov	fp, r3
   32e3a:	4091      	lsls	r1, r2
   32e3c:	4b26      	ldr	r3, [pc, #152]	; (32ed8 <__aeabi_ddiv+0x1f0>)
   32e3e:	2200      	movs	r2, #0
   32e40:	1a1b      	subs	r3, r3, r0
   32e42:	e78f      	b.n	32d64 <__aeabi_ddiv+0x7c>
   32e44:	2300      	movs	r3, #0
   32e46:	2201      	movs	r2, #1
   32e48:	469b      	mov	fp, r3
   32e4a:	e78b      	b.n	32d64 <__aeabi_ddiv+0x7c>
   32e4c:	4651      	mov	r1, sl
   32e4e:	2203      	movs	r2, #3
   32e50:	e788      	b.n	32d64 <__aeabi_ddiv+0x7c>
   32e52:	2300      	movs	r3, #0
   32e54:	4698      	mov	r8, r3
   32e56:	3301      	adds	r3, #1
   32e58:	2604      	movs	r6, #4
   32e5a:	2400      	movs	r4, #0
   32e5c:	9303      	str	r3, [sp, #12]
   32e5e:	e767      	b.n	32d30 <__aeabi_ddiv+0x48>
   32e60:	2303      	movs	r3, #3
   32e62:	46b1      	mov	r9, r6
   32e64:	9303      	str	r3, [sp, #12]
   32e66:	260c      	movs	r6, #12
   32e68:	e762      	b.n	32d30 <__aeabi_ddiv+0x48>
   32e6a:	2a03      	cmp	r2, #3
   32e6c:	d100      	bne.n	32e70 <__aeabi_ddiv+0x188>
   32e6e:	e25c      	b.n	3332a <__aeabi_ddiv+0x642>
   32e70:	9b01      	ldr	r3, [sp, #4]
   32e72:	2a01      	cmp	r2, #1
   32e74:	d000      	beq.n	32e78 <__aeabi_ddiv+0x190>
   32e76:	e1e4      	b.n	33242 <__aeabi_ddiv+0x55a>
   32e78:	4013      	ands	r3, r2
   32e7a:	469c      	mov	ip, r3
   32e7c:	2300      	movs	r3, #0
   32e7e:	2400      	movs	r4, #0
   32e80:	2200      	movs	r2, #0
   32e82:	4698      	mov	r8, r3
   32e84:	2100      	movs	r1, #0
   32e86:	0312      	lsls	r2, r2, #12
   32e88:	0b13      	lsrs	r3, r2, #12
   32e8a:	0d0a      	lsrs	r2, r1, #20
   32e8c:	0512      	lsls	r2, r2, #20
   32e8e:	431a      	orrs	r2, r3
   32e90:	0523      	lsls	r3, r4, #20
   32e92:	4c12      	ldr	r4, [pc, #72]	; (32edc <__aeabi_ddiv+0x1f4>)
   32e94:	4640      	mov	r0, r8
   32e96:	4022      	ands	r2, r4
   32e98:	4313      	orrs	r3, r2
   32e9a:	4662      	mov	r2, ip
   32e9c:	005b      	lsls	r3, r3, #1
   32e9e:	07d2      	lsls	r2, r2, #31
   32ea0:	085b      	lsrs	r3, r3, #1
   32ea2:	4313      	orrs	r3, r2
   32ea4:	0019      	movs	r1, r3
   32ea6:	b007      	add	sp, #28
   32ea8:	bc3c      	pop	{r2, r3, r4, r5}
   32eaa:	4690      	mov	r8, r2
   32eac:	4699      	mov	r9, r3
   32eae:	46a2      	mov	sl, r4
   32eb0:	46ab      	mov	fp, r5
   32eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32eb4:	2300      	movs	r3, #0
   32eb6:	2280      	movs	r2, #128	; 0x80
   32eb8:	469c      	mov	ip, r3
   32eba:	0312      	lsls	r2, r2, #12
   32ebc:	4698      	mov	r8, r3
   32ebe:	4c03      	ldr	r4, [pc, #12]	; (32ecc <__aeabi_ddiv+0x1e4>)
   32ec0:	e7e0      	b.n	32e84 <__aeabi_ddiv+0x19c>
   32ec2:	2300      	movs	r3, #0
   32ec4:	4c01      	ldr	r4, [pc, #4]	; (32ecc <__aeabi_ddiv+0x1e4>)
   32ec6:	2200      	movs	r2, #0
   32ec8:	4698      	mov	r8, r3
   32eca:	e7db      	b.n	32e84 <__aeabi_ddiv+0x19c>
   32ecc:	000007ff 	.word	0x000007ff
   32ed0:	fffffc01 	.word	0xfffffc01
   32ed4:	000394b8 	.word	0x000394b8
   32ed8:	fffffc0d 	.word	0xfffffc0d
   32edc:	800fffff 	.word	0x800fffff
   32ee0:	45d9      	cmp	r9, fp
   32ee2:	d900      	bls.n	32ee6 <__aeabi_ddiv+0x1fe>
   32ee4:	e139      	b.n	3315a <__aeabi_ddiv+0x472>
   32ee6:	d100      	bne.n	32eea <__aeabi_ddiv+0x202>
   32ee8:	e134      	b.n	33154 <__aeabi_ddiv+0x46c>
   32eea:	2300      	movs	r3, #0
   32eec:	4646      	mov	r6, r8
   32eee:	464d      	mov	r5, r9
   32ef0:	469a      	mov	sl, r3
   32ef2:	3c01      	subs	r4, #1
   32ef4:	465b      	mov	r3, fp
   32ef6:	0e0a      	lsrs	r2, r1, #24
   32ef8:	021b      	lsls	r3, r3, #8
   32efa:	431a      	orrs	r2, r3
   32efc:	020b      	lsls	r3, r1, #8
   32efe:	0c17      	lsrs	r7, r2, #16
   32f00:	9303      	str	r3, [sp, #12]
   32f02:	0413      	lsls	r3, r2, #16
   32f04:	0c1b      	lsrs	r3, r3, #16
   32f06:	0039      	movs	r1, r7
   32f08:	0028      	movs	r0, r5
   32f0a:	4690      	mov	r8, r2
   32f0c:	9301      	str	r3, [sp, #4]
   32f0e:	f7ff fa3b 	bl	32388 <__udivsi3>
   32f12:	0002      	movs	r2, r0
   32f14:	9b01      	ldr	r3, [sp, #4]
   32f16:	4683      	mov	fp, r0
   32f18:	435a      	muls	r2, r3
   32f1a:	0028      	movs	r0, r5
   32f1c:	0039      	movs	r1, r7
   32f1e:	4691      	mov	r9, r2
   32f20:	f7ff fab8 	bl	32494 <__aeabi_uidivmod>
   32f24:	0c35      	lsrs	r5, r6, #16
   32f26:	0409      	lsls	r1, r1, #16
   32f28:	430d      	orrs	r5, r1
   32f2a:	45a9      	cmp	r9, r5
   32f2c:	d90d      	bls.n	32f4a <__aeabi_ddiv+0x262>
   32f2e:	465b      	mov	r3, fp
   32f30:	4445      	add	r5, r8
   32f32:	3b01      	subs	r3, #1
   32f34:	45a8      	cmp	r8, r5
   32f36:	d900      	bls.n	32f3a <__aeabi_ddiv+0x252>
   32f38:	e13a      	b.n	331b0 <__aeabi_ddiv+0x4c8>
   32f3a:	45a9      	cmp	r9, r5
   32f3c:	d800      	bhi.n	32f40 <__aeabi_ddiv+0x258>
   32f3e:	e137      	b.n	331b0 <__aeabi_ddiv+0x4c8>
   32f40:	2302      	movs	r3, #2
   32f42:	425b      	negs	r3, r3
   32f44:	469c      	mov	ip, r3
   32f46:	4445      	add	r5, r8
   32f48:	44e3      	add	fp, ip
   32f4a:	464b      	mov	r3, r9
   32f4c:	1aeb      	subs	r3, r5, r3
   32f4e:	0039      	movs	r1, r7
   32f50:	0018      	movs	r0, r3
   32f52:	9304      	str	r3, [sp, #16]
   32f54:	f7ff fa18 	bl	32388 <__udivsi3>
   32f58:	9b01      	ldr	r3, [sp, #4]
   32f5a:	0005      	movs	r5, r0
   32f5c:	4343      	muls	r3, r0
   32f5e:	0039      	movs	r1, r7
   32f60:	9804      	ldr	r0, [sp, #16]
   32f62:	4699      	mov	r9, r3
   32f64:	f7ff fa96 	bl	32494 <__aeabi_uidivmod>
   32f68:	0433      	lsls	r3, r6, #16
   32f6a:	0409      	lsls	r1, r1, #16
   32f6c:	0c1b      	lsrs	r3, r3, #16
   32f6e:	430b      	orrs	r3, r1
   32f70:	4599      	cmp	r9, r3
   32f72:	d909      	bls.n	32f88 <__aeabi_ddiv+0x2a0>
   32f74:	4443      	add	r3, r8
   32f76:	1e6a      	subs	r2, r5, #1
   32f78:	4598      	cmp	r8, r3
   32f7a:	d900      	bls.n	32f7e <__aeabi_ddiv+0x296>
   32f7c:	e11a      	b.n	331b4 <__aeabi_ddiv+0x4cc>
   32f7e:	4599      	cmp	r9, r3
   32f80:	d800      	bhi.n	32f84 <__aeabi_ddiv+0x29c>
   32f82:	e117      	b.n	331b4 <__aeabi_ddiv+0x4cc>
   32f84:	3d02      	subs	r5, #2
   32f86:	4443      	add	r3, r8
   32f88:	464a      	mov	r2, r9
   32f8a:	1a9b      	subs	r3, r3, r2
   32f8c:	465a      	mov	r2, fp
   32f8e:	0412      	lsls	r2, r2, #16
   32f90:	432a      	orrs	r2, r5
   32f92:	9903      	ldr	r1, [sp, #12]
   32f94:	4693      	mov	fp, r2
   32f96:	0c10      	lsrs	r0, r2, #16
   32f98:	0c0a      	lsrs	r2, r1, #16
   32f9a:	4691      	mov	r9, r2
   32f9c:	0409      	lsls	r1, r1, #16
   32f9e:	465a      	mov	r2, fp
   32fa0:	0c09      	lsrs	r1, r1, #16
   32fa2:	464e      	mov	r6, r9
   32fa4:	000d      	movs	r5, r1
   32fa6:	0412      	lsls	r2, r2, #16
   32fa8:	0c12      	lsrs	r2, r2, #16
   32faa:	4345      	muls	r5, r0
   32fac:	9105      	str	r1, [sp, #20]
   32fae:	4351      	muls	r1, r2
   32fb0:	4372      	muls	r2, r6
   32fb2:	4370      	muls	r0, r6
   32fb4:	1952      	adds	r2, r2, r5
   32fb6:	0c0e      	lsrs	r6, r1, #16
   32fb8:	18b2      	adds	r2, r6, r2
   32fba:	4295      	cmp	r5, r2
   32fbc:	d903      	bls.n	32fc6 <__aeabi_ddiv+0x2de>
   32fbe:	2580      	movs	r5, #128	; 0x80
   32fc0:	026d      	lsls	r5, r5, #9
   32fc2:	46ac      	mov	ip, r5
   32fc4:	4460      	add	r0, ip
   32fc6:	0c15      	lsrs	r5, r2, #16
   32fc8:	0409      	lsls	r1, r1, #16
   32fca:	0412      	lsls	r2, r2, #16
   32fcc:	0c09      	lsrs	r1, r1, #16
   32fce:	1828      	adds	r0, r5, r0
   32fd0:	1852      	adds	r2, r2, r1
   32fd2:	4283      	cmp	r3, r0
   32fd4:	d200      	bcs.n	32fd8 <__aeabi_ddiv+0x2f0>
   32fd6:	e0ce      	b.n	33176 <__aeabi_ddiv+0x48e>
   32fd8:	d100      	bne.n	32fdc <__aeabi_ddiv+0x2f4>
   32fda:	e0c8      	b.n	3316e <__aeabi_ddiv+0x486>
   32fdc:	1a1d      	subs	r5, r3, r0
   32fde:	4653      	mov	r3, sl
   32fe0:	1a9e      	subs	r6, r3, r2
   32fe2:	45b2      	cmp	sl, r6
   32fe4:	4192      	sbcs	r2, r2
   32fe6:	4252      	negs	r2, r2
   32fe8:	1aab      	subs	r3, r5, r2
   32fea:	469a      	mov	sl, r3
   32fec:	4598      	cmp	r8, r3
   32fee:	d100      	bne.n	32ff2 <__aeabi_ddiv+0x30a>
   32ff0:	e117      	b.n	33222 <__aeabi_ddiv+0x53a>
   32ff2:	0039      	movs	r1, r7
   32ff4:	0018      	movs	r0, r3
   32ff6:	f7ff f9c7 	bl	32388 <__udivsi3>
   32ffa:	9b01      	ldr	r3, [sp, #4]
   32ffc:	0005      	movs	r5, r0
   32ffe:	4343      	muls	r3, r0
   33000:	0039      	movs	r1, r7
   33002:	4650      	mov	r0, sl
   33004:	9304      	str	r3, [sp, #16]
   33006:	f7ff fa45 	bl	32494 <__aeabi_uidivmod>
   3300a:	9804      	ldr	r0, [sp, #16]
   3300c:	040b      	lsls	r3, r1, #16
   3300e:	0c31      	lsrs	r1, r6, #16
   33010:	4319      	orrs	r1, r3
   33012:	4288      	cmp	r0, r1
   33014:	d909      	bls.n	3302a <__aeabi_ddiv+0x342>
   33016:	4441      	add	r1, r8
   33018:	1e6b      	subs	r3, r5, #1
   3301a:	4588      	cmp	r8, r1
   3301c:	d900      	bls.n	33020 <__aeabi_ddiv+0x338>
   3301e:	e107      	b.n	33230 <__aeabi_ddiv+0x548>
   33020:	4288      	cmp	r0, r1
   33022:	d800      	bhi.n	33026 <__aeabi_ddiv+0x33e>
   33024:	e104      	b.n	33230 <__aeabi_ddiv+0x548>
   33026:	3d02      	subs	r5, #2
   33028:	4441      	add	r1, r8
   3302a:	9b04      	ldr	r3, [sp, #16]
   3302c:	1acb      	subs	r3, r1, r3
   3302e:	0018      	movs	r0, r3
   33030:	0039      	movs	r1, r7
   33032:	9304      	str	r3, [sp, #16]
   33034:	f7ff f9a8 	bl	32388 <__udivsi3>
   33038:	9b01      	ldr	r3, [sp, #4]
   3303a:	4682      	mov	sl, r0
   3303c:	4343      	muls	r3, r0
   3303e:	0039      	movs	r1, r7
   33040:	9804      	ldr	r0, [sp, #16]
   33042:	9301      	str	r3, [sp, #4]
   33044:	f7ff fa26 	bl	32494 <__aeabi_uidivmod>
   33048:	9801      	ldr	r0, [sp, #4]
   3304a:	040b      	lsls	r3, r1, #16
   3304c:	0431      	lsls	r1, r6, #16
   3304e:	0c09      	lsrs	r1, r1, #16
   33050:	4319      	orrs	r1, r3
   33052:	4288      	cmp	r0, r1
   33054:	d90d      	bls.n	33072 <__aeabi_ddiv+0x38a>
   33056:	4653      	mov	r3, sl
   33058:	4441      	add	r1, r8
   3305a:	3b01      	subs	r3, #1
   3305c:	4588      	cmp	r8, r1
   3305e:	d900      	bls.n	33062 <__aeabi_ddiv+0x37a>
   33060:	e0e8      	b.n	33234 <__aeabi_ddiv+0x54c>
   33062:	4288      	cmp	r0, r1
   33064:	d800      	bhi.n	33068 <__aeabi_ddiv+0x380>
   33066:	e0e5      	b.n	33234 <__aeabi_ddiv+0x54c>
   33068:	2302      	movs	r3, #2
   3306a:	425b      	negs	r3, r3
   3306c:	469c      	mov	ip, r3
   3306e:	4441      	add	r1, r8
   33070:	44e2      	add	sl, ip
   33072:	9b01      	ldr	r3, [sp, #4]
   33074:	042d      	lsls	r5, r5, #16
   33076:	1ace      	subs	r6, r1, r3
   33078:	4651      	mov	r1, sl
   3307a:	4329      	orrs	r1, r5
   3307c:	9d05      	ldr	r5, [sp, #20]
   3307e:	464f      	mov	r7, r9
   33080:	002a      	movs	r2, r5
   33082:	040b      	lsls	r3, r1, #16
   33084:	0c08      	lsrs	r0, r1, #16
   33086:	0c1b      	lsrs	r3, r3, #16
   33088:	435a      	muls	r2, r3
   3308a:	4345      	muls	r5, r0
   3308c:	437b      	muls	r3, r7
   3308e:	4378      	muls	r0, r7
   33090:	195b      	adds	r3, r3, r5
   33092:	0c17      	lsrs	r7, r2, #16
   33094:	18fb      	adds	r3, r7, r3
   33096:	429d      	cmp	r5, r3
   33098:	d903      	bls.n	330a2 <__aeabi_ddiv+0x3ba>
   3309a:	2580      	movs	r5, #128	; 0x80
   3309c:	026d      	lsls	r5, r5, #9
   3309e:	46ac      	mov	ip, r5
   330a0:	4460      	add	r0, ip
   330a2:	0c1d      	lsrs	r5, r3, #16
   330a4:	0412      	lsls	r2, r2, #16
   330a6:	041b      	lsls	r3, r3, #16
   330a8:	0c12      	lsrs	r2, r2, #16
   330aa:	1828      	adds	r0, r5, r0
   330ac:	189b      	adds	r3, r3, r2
   330ae:	4286      	cmp	r6, r0
   330b0:	d200      	bcs.n	330b4 <__aeabi_ddiv+0x3cc>
   330b2:	e093      	b.n	331dc <__aeabi_ddiv+0x4f4>
   330b4:	d100      	bne.n	330b8 <__aeabi_ddiv+0x3d0>
   330b6:	e08e      	b.n	331d6 <__aeabi_ddiv+0x4ee>
   330b8:	2301      	movs	r3, #1
   330ba:	4319      	orrs	r1, r3
   330bc:	4ba0      	ldr	r3, [pc, #640]	; (33340 <__aeabi_ddiv+0x658>)
   330be:	18e3      	adds	r3, r4, r3
   330c0:	2b00      	cmp	r3, #0
   330c2:	dc00      	bgt.n	330c6 <__aeabi_ddiv+0x3de>
   330c4:	e099      	b.n	331fa <__aeabi_ddiv+0x512>
   330c6:	074a      	lsls	r2, r1, #29
   330c8:	d000      	beq.n	330cc <__aeabi_ddiv+0x3e4>
   330ca:	e09e      	b.n	3320a <__aeabi_ddiv+0x522>
   330cc:	465a      	mov	r2, fp
   330ce:	01d2      	lsls	r2, r2, #7
   330d0:	d506      	bpl.n	330e0 <__aeabi_ddiv+0x3f8>
   330d2:	465a      	mov	r2, fp
   330d4:	4b9b      	ldr	r3, [pc, #620]	; (33344 <__aeabi_ddiv+0x65c>)
   330d6:	401a      	ands	r2, r3
   330d8:	2380      	movs	r3, #128	; 0x80
   330da:	4693      	mov	fp, r2
   330dc:	00db      	lsls	r3, r3, #3
   330de:	18e3      	adds	r3, r4, r3
   330e0:	4a99      	ldr	r2, [pc, #612]	; (33348 <__aeabi_ddiv+0x660>)
   330e2:	4293      	cmp	r3, r2
   330e4:	dd68      	ble.n	331b8 <__aeabi_ddiv+0x4d0>
   330e6:	2301      	movs	r3, #1
   330e8:	9a02      	ldr	r2, [sp, #8]
   330ea:	4c98      	ldr	r4, [pc, #608]	; (3334c <__aeabi_ddiv+0x664>)
   330ec:	401a      	ands	r2, r3
   330ee:	2300      	movs	r3, #0
   330f0:	4694      	mov	ip, r2
   330f2:	4698      	mov	r8, r3
   330f4:	2200      	movs	r2, #0
   330f6:	e6c5      	b.n	32e84 <__aeabi_ddiv+0x19c>
   330f8:	2280      	movs	r2, #128	; 0x80
   330fa:	464b      	mov	r3, r9
   330fc:	0312      	lsls	r2, r2, #12
   330fe:	4213      	tst	r3, r2
   33100:	d00a      	beq.n	33118 <__aeabi_ddiv+0x430>
   33102:	465b      	mov	r3, fp
   33104:	4213      	tst	r3, r2
   33106:	d106      	bne.n	33116 <__aeabi_ddiv+0x42e>
   33108:	431a      	orrs	r2, r3
   3310a:	0312      	lsls	r2, r2, #12
   3310c:	0b12      	lsrs	r2, r2, #12
   3310e:	46ac      	mov	ip, r5
   33110:	4688      	mov	r8, r1
   33112:	4c8e      	ldr	r4, [pc, #568]	; (3334c <__aeabi_ddiv+0x664>)
   33114:	e6b6      	b.n	32e84 <__aeabi_ddiv+0x19c>
   33116:	464b      	mov	r3, r9
   33118:	431a      	orrs	r2, r3
   3311a:	0312      	lsls	r2, r2, #12
   3311c:	0b12      	lsrs	r2, r2, #12
   3311e:	46bc      	mov	ip, r7
   33120:	4c8a      	ldr	r4, [pc, #552]	; (3334c <__aeabi_ddiv+0x664>)
   33122:	e6af      	b.n	32e84 <__aeabi_ddiv+0x19c>
   33124:	0003      	movs	r3, r0
   33126:	465a      	mov	r2, fp
   33128:	3b28      	subs	r3, #40	; 0x28
   3312a:	409a      	lsls	r2, r3
   3312c:	2300      	movs	r3, #0
   3312e:	4691      	mov	r9, r2
   33130:	4698      	mov	r8, r3
   33132:	e657      	b.n	32de4 <__aeabi_ddiv+0xfc>
   33134:	4658      	mov	r0, fp
   33136:	f000 ff0d 	bl	33f54 <__clzsi2>
   3313a:	3020      	adds	r0, #32
   3313c:	e640      	b.n	32dc0 <__aeabi_ddiv+0xd8>
   3313e:	0003      	movs	r3, r0
   33140:	4652      	mov	r2, sl
   33142:	3b28      	subs	r3, #40	; 0x28
   33144:	409a      	lsls	r2, r3
   33146:	2100      	movs	r1, #0
   33148:	4693      	mov	fp, r2
   3314a:	e677      	b.n	32e3c <__aeabi_ddiv+0x154>
   3314c:	f000 ff02 	bl	33f54 <__clzsi2>
   33150:	3020      	adds	r0, #32
   33152:	e65f      	b.n	32e14 <__aeabi_ddiv+0x12c>
   33154:	4588      	cmp	r8, r1
   33156:	d200      	bcs.n	3315a <__aeabi_ddiv+0x472>
   33158:	e6c7      	b.n	32eea <__aeabi_ddiv+0x202>
   3315a:	464b      	mov	r3, r9
   3315c:	07de      	lsls	r6, r3, #31
   3315e:	085d      	lsrs	r5, r3, #1
   33160:	4643      	mov	r3, r8
   33162:	085b      	lsrs	r3, r3, #1
   33164:	431e      	orrs	r6, r3
   33166:	4643      	mov	r3, r8
   33168:	07db      	lsls	r3, r3, #31
   3316a:	469a      	mov	sl, r3
   3316c:	e6c2      	b.n	32ef4 <__aeabi_ddiv+0x20c>
   3316e:	2500      	movs	r5, #0
   33170:	4592      	cmp	sl, r2
   33172:	d300      	bcc.n	33176 <__aeabi_ddiv+0x48e>
   33174:	e733      	b.n	32fde <__aeabi_ddiv+0x2f6>
   33176:	9e03      	ldr	r6, [sp, #12]
   33178:	4659      	mov	r1, fp
   3317a:	46b4      	mov	ip, r6
   3317c:	44e2      	add	sl, ip
   3317e:	45b2      	cmp	sl, r6
   33180:	41ad      	sbcs	r5, r5
   33182:	426d      	negs	r5, r5
   33184:	4445      	add	r5, r8
   33186:	18eb      	adds	r3, r5, r3
   33188:	3901      	subs	r1, #1
   3318a:	4598      	cmp	r8, r3
   3318c:	d207      	bcs.n	3319e <__aeabi_ddiv+0x4b6>
   3318e:	4298      	cmp	r0, r3
   33190:	d900      	bls.n	33194 <__aeabi_ddiv+0x4ac>
   33192:	e07f      	b.n	33294 <__aeabi_ddiv+0x5ac>
   33194:	d100      	bne.n	33198 <__aeabi_ddiv+0x4b0>
   33196:	e0bc      	b.n	33312 <__aeabi_ddiv+0x62a>
   33198:	1a1d      	subs	r5, r3, r0
   3319a:	468b      	mov	fp, r1
   3319c:	e71f      	b.n	32fde <__aeabi_ddiv+0x2f6>
   3319e:	4598      	cmp	r8, r3
   331a0:	d1fa      	bne.n	33198 <__aeabi_ddiv+0x4b0>
   331a2:	9d03      	ldr	r5, [sp, #12]
   331a4:	4555      	cmp	r5, sl
   331a6:	d9f2      	bls.n	3318e <__aeabi_ddiv+0x4a6>
   331a8:	4643      	mov	r3, r8
   331aa:	468b      	mov	fp, r1
   331ac:	1a1d      	subs	r5, r3, r0
   331ae:	e716      	b.n	32fde <__aeabi_ddiv+0x2f6>
   331b0:	469b      	mov	fp, r3
   331b2:	e6ca      	b.n	32f4a <__aeabi_ddiv+0x262>
   331b4:	0015      	movs	r5, r2
   331b6:	e6e7      	b.n	32f88 <__aeabi_ddiv+0x2a0>
   331b8:	465a      	mov	r2, fp
   331ba:	08c9      	lsrs	r1, r1, #3
   331bc:	0752      	lsls	r2, r2, #29
   331be:	430a      	orrs	r2, r1
   331c0:	055b      	lsls	r3, r3, #21
   331c2:	4690      	mov	r8, r2
   331c4:	0d5c      	lsrs	r4, r3, #21
   331c6:	465a      	mov	r2, fp
   331c8:	2301      	movs	r3, #1
   331ca:	9902      	ldr	r1, [sp, #8]
   331cc:	0252      	lsls	r2, r2, #9
   331ce:	4019      	ands	r1, r3
   331d0:	0b12      	lsrs	r2, r2, #12
   331d2:	468c      	mov	ip, r1
   331d4:	e656      	b.n	32e84 <__aeabi_ddiv+0x19c>
   331d6:	2b00      	cmp	r3, #0
   331d8:	d100      	bne.n	331dc <__aeabi_ddiv+0x4f4>
   331da:	e76f      	b.n	330bc <__aeabi_ddiv+0x3d4>
   331dc:	4446      	add	r6, r8
   331de:	1e4a      	subs	r2, r1, #1
   331e0:	45b0      	cmp	r8, r6
   331e2:	d929      	bls.n	33238 <__aeabi_ddiv+0x550>
   331e4:	0011      	movs	r1, r2
   331e6:	4286      	cmp	r6, r0
   331e8:	d000      	beq.n	331ec <__aeabi_ddiv+0x504>
   331ea:	e765      	b.n	330b8 <__aeabi_ddiv+0x3d0>
   331ec:	9a03      	ldr	r2, [sp, #12]
   331ee:	4293      	cmp	r3, r2
   331f0:	d000      	beq.n	331f4 <__aeabi_ddiv+0x50c>
   331f2:	e761      	b.n	330b8 <__aeabi_ddiv+0x3d0>
   331f4:	e762      	b.n	330bc <__aeabi_ddiv+0x3d4>
   331f6:	2101      	movs	r1, #1
   331f8:	4249      	negs	r1, r1
   331fa:	2001      	movs	r0, #1
   331fc:	1ac2      	subs	r2, r0, r3
   331fe:	2a38      	cmp	r2, #56	; 0x38
   33200:	dd21      	ble.n	33246 <__aeabi_ddiv+0x55e>
   33202:	9b02      	ldr	r3, [sp, #8]
   33204:	4003      	ands	r3, r0
   33206:	469c      	mov	ip, r3
   33208:	e638      	b.n	32e7c <__aeabi_ddiv+0x194>
   3320a:	220f      	movs	r2, #15
   3320c:	400a      	ands	r2, r1
   3320e:	2a04      	cmp	r2, #4
   33210:	d100      	bne.n	33214 <__aeabi_ddiv+0x52c>
   33212:	e75b      	b.n	330cc <__aeabi_ddiv+0x3e4>
   33214:	000a      	movs	r2, r1
   33216:	1d11      	adds	r1, r2, #4
   33218:	4291      	cmp	r1, r2
   3321a:	4192      	sbcs	r2, r2
   3321c:	4252      	negs	r2, r2
   3321e:	4493      	add	fp, r2
   33220:	e754      	b.n	330cc <__aeabi_ddiv+0x3e4>
   33222:	4b47      	ldr	r3, [pc, #284]	; (33340 <__aeabi_ddiv+0x658>)
   33224:	18e3      	adds	r3, r4, r3
   33226:	2b00      	cmp	r3, #0
   33228:	dde5      	ble.n	331f6 <__aeabi_ddiv+0x50e>
   3322a:	2201      	movs	r2, #1
   3322c:	4252      	negs	r2, r2
   3322e:	e7f2      	b.n	33216 <__aeabi_ddiv+0x52e>
   33230:	001d      	movs	r5, r3
   33232:	e6fa      	b.n	3302a <__aeabi_ddiv+0x342>
   33234:	469a      	mov	sl, r3
   33236:	e71c      	b.n	33072 <__aeabi_ddiv+0x38a>
   33238:	42b0      	cmp	r0, r6
   3323a:	d839      	bhi.n	332b0 <__aeabi_ddiv+0x5c8>
   3323c:	d06e      	beq.n	3331c <__aeabi_ddiv+0x634>
   3323e:	0011      	movs	r1, r2
   33240:	e73a      	b.n	330b8 <__aeabi_ddiv+0x3d0>
   33242:	9302      	str	r3, [sp, #8]
   33244:	e73a      	b.n	330bc <__aeabi_ddiv+0x3d4>
   33246:	2a1f      	cmp	r2, #31
   33248:	dc3c      	bgt.n	332c4 <__aeabi_ddiv+0x5dc>
   3324a:	2320      	movs	r3, #32
   3324c:	1a9b      	subs	r3, r3, r2
   3324e:	000c      	movs	r4, r1
   33250:	4658      	mov	r0, fp
   33252:	4099      	lsls	r1, r3
   33254:	4098      	lsls	r0, r3
   33256:	1e4b      	subs	r3, r1, #1
   33258:	4199      	sbcs	r1, r3
   3325a:	465b      	mov	r3, fp
   3325c:	40d4      	lsrs	r4, r2
   3325e:	40d3      	lsrs	r3, r2
   33260:	4320      	orrs	r0, r4
   33262:	4308      	orrs	r0, r1
   33264:	001a      	movs	r2, r3
   33266:	0743      	lsls	r3, r0, #29
   33268:	d009      	beq.n	3327e <__aeabi_ddiv+0x596>
   3326a:	230f      	movs	r3, #15
   3326c:	4003      	ands	r3, r0
   3326e:	2b04      	cmp	r3, #4
   33270:	d005      	beq.n	3327e <__aeabi_ddiv+0x596>
   33272:	0001      	movs	r1, r0
   33274:	1d08      	adds	r0, r1, #4
   33276:	4288      	cmp	r0, r1
   33278:	419b      	sbcs	r3, r3
   3327a:	425b      	negs	r3, r3
   3327c:	18d2      	adds	r2, r2, r3
   3327e:	0213      	lsls	r3, r2, #8
   33280:	d53a      	bpl.n	332f8 <__aeabi_ddiv+0x610>
   33282:	2301      	movs	r3, #1
   33284:	9a02      	ldr	r2, [sp, #8]
   33286:	2401      	movs	r4, #1
   33288:	401a      	ands	r2, r3
   3328a:	2300      	movs	r3, #0
   3328c:	4694      	mov	ip, r2
   3328e:	4698      	mov	r8, r3
   33290:	2200      	movs	r2, #0
   33292:	e5f7      	b.n	32e84 <__aeabi_ddiv+0x19c>
   33294:	2102      	movs	r1, #2
   33296:	4249      	negs	r1, r1
   33298:	468c      	mov	ip, r1
   3329a:	9d03      	ldr	r5, [sp, #12]
   3329c:	44e3      	add	fp, ip
   3329e:	46ac      	mov	ip, r5
   332a0:	44e2      	add	sl, ip
   332a2:	45aa      	cmp	sl, r5
   332a4:	41ad      	sbcs	r5, r5
   332a6:	426d      	negs	r5, r5
   332a8:	4445      	add	r5, r8
   332aa:	18ed      	adds	r5, r5, r3
   332ac:	1a2d      	subs	r5, r5, r0
   332ae:	e696      	b.n	32fde <__aeabi_ddiv+0x2f6>
   332b0:	1e8a      	subs	r2, r1, #2
   332b2:	9903      	ldr	r1, [sp, #12]
   332b4:	004d      	lsls	r5, r1, #1
   332b6:	428d      	cmp	r5, r1
   332b8:	4189      	sbcs	r1, r1
   332ba:	4249      	negs	r1, r1
   332bc:	4441      	add	r1, r8
   332be:	1876      	adds	r6, r6, r1
   332c0:	9503      	str	r5, [sp, #12]
   332c2:	e78f      	b.n	331e4 <__aeabi_ddiv+0x4fc>
   332c4:	201f      	movs	r0, #31
   332c6:	4240      	negs	r0, r0
   332c8:	1ac3      	subs	r3, r0, r3
   332ca:	4658      	mov	r0, fp
   332cc:	40d8      	lsrs	r0, r3
   332ce:	0003      	movs	r3, r0
   332d0:	2a20      	cmp	r2, #32
   332d2:	d028      	beq.n	33326 <__aeabi_ddiv+0x63e>
   332d4:	2040      	movs	r0, #64	; 0x40
   332d6:	465d      	mov	r5, fp
   332d8:	1a82      	subs	r2, r0, r2
   332da:	4095      	lsls	r5, r2
   332dc:	4329      	orrs	r1, r5
   332de:	1e4a      	subs	r2, r1, #1
   332e0:	4191      	sbcs	r1, r2
   332e2:	4319      	orrs	r1, r3
   332e4:	2307      	movs	r3, #7
   332e6:	2200      	movs	r2, #0
   332e8:	400b      	ands	r3, r1
   332ea:	d009      	beq.n	33300 <__aeabi_ddiv+0x618>
   332ec:	230f      	movs	r3, #15
   332ee:	2200      	movs	r2, #0
   332f0:	400b      	ands	r3, r1
   332f2:	0008      	movs	r0, r1
   332f4:	2b04      	cmp	r3, #4
   332f6:	d1bd      	bne.n	33274 <__aeabi_ddiv+0x58c>
   332f8:	0001      	movs	r1, r0
   332fa:	0753      	lsls	r3, r2, #29
   332fc:	0252      	lsls	r2, r2, #9
   332fe:	0b12      	lsrs	r2, r2, #12
   33300:	08c9      	lsrs	r1, r1, #3
   33302:	4319      	orrs	r1, r3
   33304:	2301      	movs	r3, #1
   33306:	4688      	mov	r8, r1
   33308:	9902      	ldr	r1, [sp, #8]
   3330a:	2400      	movs	r4, #0
   3330c:	4019      	ands	r1, r3
   3330e:	468c      	mov	ip, r1
   33310:	e5b8      	b.n	32e84 <__aeabi_ddiv+0x19c>
   33312:	4552      	cmp	r2, sl
   33314:	d8be      	bhi.n	33294 <__aeabi_ddiv+0x5ac>
   33316:	468b      	mov	fp, r1
   33318:	2500      	movs	r5, #0
   3331a:	e660      	b.n	32fde <__aeabi_ddiv+0x2f6>
   3331c:	9d03      	ldr	r5, [sp, #12]
   3331e:	429d      	cmp	r5, r3
   33320:	d3c6      	bcc.n	332b0 <__aeabi_ddiv+0x5c8>
   33322:	0011      	movs	r1, r2
   33324:	e762      	b.n	331ec <__aeabi_ddiv+0x504>
   33326:	2500      	movs	r5, #0
   33328:	e7d8      	b.n	332dc <__aeabi_ddiv+0x5f4>
   3332a:	2280      	movs	r2, #128	; 0x80
   3332c:	465b      	mov	r3, fp
   3332e:	0312      	lsls	r2, r2, #12
   33330:	431a      	orrs	r2, r3
   33332:	9b01      	ldr	r3, [sp, #4]
   33334:	0312      	lsls	r2, r2, #12
   33336:	0b12      	lsrs	r2, r2, #12
   33338:	469c      	mov	ip, r3
   3333a:	4688      	mov	r8, r1
   3333c:	4c03      	ldr	r4, [pc, #12]	; (3334c <__aeabi_ddiv+0x664>)
   3333e:	e5a1      	b.n	32e84 <__aeabi_ddiv+0x19c>
   33340:	000003ff 	.word	0x000003ff
   33344:	feffffff 	.word	0xfeffffff
   33348:	000007fe 	.word	0x000007fe
   3334c:	000007ff 	.word	0x000007ff

00033350 <__aeabi_dmul>:
   33350:	b5f0      	push	{r4, r5, r6, r7, lr}
   33352:	4657      	mov	r7, sl
   33354:	4645      	mov	r5, r8
   33356:	46de      	mov	lr, fp
   33358:	464e      	mov	r6, r9
   3335a:	b5e0      	push	{r5, r6, r7, lr}
   3335c:	030c      	lsls	r4, r1, #12
   3335e:	4698      	mov	r8, r3
   33360:	004e      	lsls	r6, r1, #1
   33362:	0b23      	lsrs	r3, r4, #12
   33364:	b087      	sub	sp, #28
   33366:	0007      	movs	r7, r0
   33368:	4692      	mov	sl, r2
   3336a:	469b      	mov	fp, r3
   3336c:	0d76      	lsrs	r6, r6, #21
   3336e:	0fcd      	lsrs	r5, r1, #31
   33370:	2e00      	cmp	r6, #0
   33372:	d06b      	beq.n	3344c <__aeabi_dmul+0xfc>
   33374:	4b6d      	ldr	r3, [pc, #436]	; (3352c <__aeabi_dmul+0x1dc>)
   33376:	429e      	cmp	r6, r3
   33378:	d035      	beq.n	333e6 <__aeabi_dmul+0x96>
   3337a:	2480      	movs	r4, #128	; 0x80
   3337c:	465b      	mov	r3, fp
   3337e:	0f42      	lsrs	r2, r0, #29
   33380:	0424      	lsls	r4, r4, #16
   33382:	00db      	lsls	r3, r3, #3
   33384:	4314      	orrs	r4, r2
   33386:	431c      	orrs	r4, r3
   33388:	00c3      	lsls	r3, r0, #3
   3338a:	4699      	mov	r9, r3
   3338c:	4b68      	ldr	r3, [pc, #416]	; (33530 <__aeabi_dmul+0x1e0>)
   3338e:	46a3      	mov	fp, r4
   33390:	469c      	mov	ip, r3
   33392:	2300      	movs	r3, #0
   33394:	2700      	movs	r7, #0
   33396:	4466      	add	r6, ip
   33398:	9302      	str	r3, [sp, #8]
   3339a:	4643      	mov	r3, r8
   3339c:	031c      	lsls	r4, r3, #12
   3339e:	005a      	lsls	r2, r3, #1
   333a0:	0fdb      	lsrs	r3, r3, #31
   333a2:	4650      	mov	r0, sl
   333a4:	0b24      	lsrs	r4, r4, #12
   333a6:	0d52      	lsrs	r2, r2, #21
   333a8:	4698      	mov	r8, r3
   333aa:	d100      	bne.n	333ae <__aeabi_dmul+0x5e>
   333ac:	e076      	b.n	3349c <__aeabi_dmul+0x14c>
   333ae:	4b5f      	ldr	r3, [pc, #380]	; (3352c <__aeabi_dmul+0x1dc>)
   333b0:	429a      	cmp	r2, r3
   333b2:	d06d      	beq.n	33490 <__aeabi_dmul+0x140>
   333b4:	2380      	movs	r3, #128	; 0x80
   333b6:	0f41      	lsrs	r1, r0, #29
   333b8:	041b      	lsls	r3, r3, #16
   333ba:	430b      	orrs	r3, r1
   333bc:	495c      	ldr	r1, [pc, #368]	; (33530 <__aeabi_dmul+0x1e0>)
   333be:	00e4      	lsls	r4, r4, #3
   333c0:	468c      	mov	ip, r1
   333c2:	431c      	orrs	r4, r3
   333c4:	00c3      	lsls	r3, r0, #3
   333c6:	2000      	movs	r0, #0
   333c8:	4462      	add	r2, ip
   333ca:	4641      	mov	r1, r8
   333cc:	18b6      	adds	r6, r6, r2
   333ce:	4069      	eors	r1, r5
   333d0:	1c72      	adds	r2, r6, #1
   333d2:	9101      	str	r1, [sp, #4]
   333d4:	4694      	mov	ip, r2
   333d6:	4307      	orrs	r7, r0
   333d8:	2f0f      	cmp	r7, #15
   333da:	d900      	bls.n	333de <__aeabi_dmul+0x8e>
   333dc:	e0b0      	b.n	33540 <__aeabi_dmul+0x1f0>
   333de:	4a55      	ldr	r2, [pc, #340]	; (33534 <__aeabi_dmul+0x1e4>)
   333e0:	00bf      	lsls	r7, r7, #2
   333e2:	59d2      	ldr	r2, [r2, r7]
   333e4:	4697      	mov	pc, r2
   333e6:	465b      	mov	r3, fp
   333e8:	4303      	orrs	r3, r0
   333ea:	4699      	mov	r9, r3
   333ec:	d000      	beq.n	333f0 <__aeabi_dmul+0xa0>
   333ee:	e087      	b.n	33500 <__aeabi_dmul+0x1b0>
   333f0:	2300      	movs	r3, #0
   333f2:	469b      	mov	fp, r3
   333f4:	3302      	adds	r3, #2
   333f6:	2708      	movs	r7, #8
   333f8:	9302      	str	r3, [sp, #8]
   333fa:	e7ce      	b.n	3339a <__aeabi_dmul+0x4a>
   333fc:	4642      	mov	r2, r8
   333fe:	9201      	str	r2, [sp, #4]
   33400:	2802      	cmp	r0, #2
   33402:	d067      	beq.n	334d4 <__aeabi_dmul+0x184>
   33404:	2803      	cmp	r0, #3
   33406:	d100      	bne.n	3340a <__aeabi_dmul+0xba>
   33408:	e20e      	b.n	33828 <__aeabi_dmul+0x4d8>
   3340a:	2801      	cmp	r0, #1
   3340c:	d000      	beq.n	33410 <__aeabi_dmul+0xc0>
   3340e:	e162      	b.n	336d6 <__aeabi_dmul+0x386>
   33410:	2300      	movs	r3, #0
   33412:	2400      	movs	r4, #0
   33414:	2200      	movs	r2, #0
   33416:	4699      	mov	r9, r3
   33418:	9901      	ldr	r1, [sp, #4]
   3341a:	4001      	ands	r1, r0
   3341c:	b2cd      	uxtb	r5, r1
   3341e:	2100      	movs	r1, #0
   33420:	0312      	lsls	r2, r2, #12
   33422:	0d0b      	lsrs	r3, r1, #20
   33424:	0b12      	lsrs	r2, r2, #12
   33426:	051b      	lsls	r3, r3, #20
   33428:	4313      	orrs	r3, r2
   3342a:	4a43      	ldr	r2, [pc, #268]	; (33538 <__aeabi_dmul+0x1e8>)
   3342c:	0524      	lsls	r4, r4, #20
   3342e:	4013      	ands	r3, r2
   33430:	431c      	orrs	r4, r3
   33432:	0064      	lsls	r4, r4, #1
   33434:	07ed      	lsls	r5, r5, #31
   33436:	0864      	lsrs	r4, r4, #1
   33438:	432c      	orrs	r4, r5
   3343a:	4648      	mov	r0, r9
   3343c:	0021      	movs	r1, r4
   3343e:	b007      	add	sp, #28
   33440:	bc3c      	pop	{r2, r3, r4, r5}
   33442:	4690      	mov	r8, r2
   33444:	4699      	mov	r9, r3
   33446:	46a2      	mov	sl, r4
   33448:	46ab      	mov	fp, r5
   3344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3344c:	4303      	orrs	r3, r0
   3344e:	4699      	mov	r9, r3
   33450:	d04f      	beq.n	334f2 <__aeabi_dmul+0x1a2>
   33452:	465b      	mov	r3, fp
   33454:	2b00      	cmp	r3, #0
   33456:	d100      	bne.n	3345a <__aeabi_dmul+0x10a>
   33458:	e189      	b.n	3376e <__aeabi_dmul+0x41e>
   3345a:	4658      	mov	r0, fp
   3345c:	f000 fd7a 	bl	33f54 <__clzsi2>
   33460:	0003      	movs	r3, r0
   33462:	3b0b      	subs	r3, #11
   33464:	2b1c      	cmp	r3, #28
   33466:	dd00      	ble.n	3346a <__aeabi_dmul+0x11a>
   33468:	e17a      	b.n	33760 <__aeabi_dmul+0x410>
   3346a:	221d      	movs	r2, #29
   3346c:	1ad3      	subs	r3, r2, r3
   3346e:	003a      	movs	r2, r7
   33470:	0001      	movs	r1, r0
   33472:	465c      	mov	r4, fp
   33474:	40da      	lsrs	r2, r3
   33476:	3908      	subs	r1, #8
   33478:	408c      	lsls	r4, r1
   3347a:	0013      	movs	r3, r2
   3347c:	408f      	lsls	r7, r1
   3347e:	4323      	orrs	r3, r4
   33480:	469b      	mov	fp, r3
   33482:	46b9      	mov	r9, r7
   33484:	2300      	movs	r3, #0
   33486:	4e2d      	ldr	r6, [pc, #180]	; (3353c <__aeabi_dmul+0x1ec>)
   33488:	2700      	movs	r7, #0
   3348a:	1a36      	subs	r6, r6, r0
   3348c:	9302      	str	r3, [sp, #8]
   3348e:	e784      	b.n	3339a <__aeabi_dmul+0x4a>
   33490:	4653      	mov	r3, sl
   33492:	4323      	orrs	r3, r4
   33494:	d12a      	bne.n	334ec <__aeabi_dmul+0x19c>
   33496:	2400      	movs	r4, #0
   33498:	2002      	movs	r0, #2
   3349a:	e796      	b.n	333ca <__aeabi_dmul+0x7a>
   3349c:	4653      	mov	r3, sl
   3349e:	4323      	orrs	r3, r4
   334a0:	d020      	beq.n	334e4 <__aeabi_dmul+0x194>
   334a2:	2c00      	cmp	r4, #0
   334a4:	d100      	bne.n	334a8 <__aeabi_dmul+0x158>
   334a6:	e157      	b.n	33758 <__aeabi_dmul+0x408>
   334a8:	0020      	movs	r0, r4
   334aa:	f000 fd53 	bl	33f54 <__clzsi2>
   334ae:	0003      	movs	r3, r0
   334b0:	3b0b      	subs	r3, #11
   334b2:	2b1c      	cmp	r3, #28
   334b4:	dd00      	ble.n	334b8 <__aeabi_dmul+0x168>
   334b6:	e149      	b.n	3374c <__aeabi_dmul+0x3fc>
   334b8:	211d      	movs	r1, #29
   334ba:	1acb      	subs	r3, r1, r3
   334bc:	4651      	mov	r1, sl
   334be:	0002      	movs	r2, r0
   334c0:	40d9      	lsrs	r1, r3
   334c2:	4653      	mov	r3, sl
   334c4:	3a08      	subs	r2, #8
   334c6:	4094      	lsls	r4, r2
   334c8:	4093      	lsls	r3, r2
   334ca:	430c      	orrs	r4, r1
   334cc:	4a1b      	ldr	r2, [pc, #108]	; (3353c <__aeabi_dmul+0x1ec>)
   334ce:	1a12      	subs	r2, r2, r0
   334d0:	2000      	movs	r0, #0
   334d2:	e77a      	b.n	333ca <__aeabi_dmul+0x7a>
   334d4:	2501      	movs	r5, #1
   334d6:	9b01      	ldr	r3, [sp, #4]
   334d8:	4c14      	ldr	r4, [pc, #80]	; (3352c <__aeabi_dmul+0x1dc>)
   334da:	401d      	ands	r5, r3
   334dc:	2300      	movs	r3, #0
   334de:	2200      	movs	r2, #0
   334e0:	4699      	mov	r9, r3
   334e2:	e79c      	b.n	3341e <__aeabi_dmul+0xce>
   334e4:	2400      	movs	r4, #0
   334e6:	2200      	movs	r2, #0
   334e8:	2001      	movs	r0, #1
   334ea:	e76e      	b.n	333ca <__aeabi_dmul+0x7a>
   334ec:	4653      	mov	r3, sl
   334ee:	2003      	movs	r0, #3
   334f0:	e76b      	b.n	333ca <__aeabi_dmul+0x7a>
   334f2:	2300      	movs	r3, #0
   334f4:	469b      	mov	fp, r3
   334f6:	3301      	adds	r3, #1
   334f8:	2704      	movs	r7, #4
   334fa:	2600      	movs	r6, #0
   334fc:	9302      	str	r3, [sp, #8]
   334fe:	e74c      	b.n	3339a <__aeabi_dmul+0x4a>
   33500:	2303      	movs	r3, #3
   33502:	4681      	mov	r9, r0
   33504:	270c      	movs	r7, #12
   33506:	9302      	str	r3, [sp, #8]
   33508:	e747      	b.n	3339a <__aeabi_dmul+0x4a>
   3350a:	2280      	movs	r2, #128	; 0x80
   3350c:	2300      	movs	r3, #0
   3350e:	2500      	movs	r5, #0
   33510:	0312      	lsls	r2, r2, #12
   33512:	4699      	mov	r9, r3
   33514:	4c05      	ldr	r4, [pc, #20]	; (3352c <__aeabi_dmul+0x1dc>)
   33516:	e782      	b.n	3341e <__aeabi_dmul+0xce>
   33518:	465c      	mov	r4, fp
   3351a:	464b      	mov	r3, r9
   3351c:	9802      	ldr	r0, [sp, #8]
   3351e:	e76f      	b.n	33400 <__aeabi_dmul+0xb0>
   33520:	465c      	mov	r4, fp
   33522:	464b      	mov	r3, r9
   33524:	9501      	str	r5, [sp, #4]
   33526:	9802      	ldr	r0, [sp, #8]
   33528:	e76a      	b.n	33400 <__aeabi_dmul+0xb0>
   3352a:	46c0      	nop			; (mov r8, r8)
   3352c:	000007ff 	.word	0x000007ff
   33530:	fffffc01 	.word	0xfffffc01
   33534:	000394f8 	.word	0x000394f8
   33538:	800fffff 	.word	0x800fffff
   3353c:	fffffc0d 	.word	0xfffffc0d
   33540:	464a      	mov	r2, r9
   33542:	4649      	mov	r1, r9
   33544:	0c17      	lsrs	r7, r2, #16
   33546:	0c1a      	lsrs	r2, r3, #16
   33548:	041b      	lsls	r3, r3, #16
   3354a:	0c1b      	lsrs	r3, r3, #16
   3354c:	0408      	lsls	r0, r1, #16
   3354e:	0019      	movs	r1, r3
   33550:	0c00      	lsrs	r0, r0, #16
   33552:	4341      	muls	r1, r0
   33554:	0015      	movs	r5, r2
   33556:	4688      	mov	r8, r1
   33558:	0019      	movs	r1, r3
   3355a:	437d      	muls	r5, r7
   3355c:	4379      	muls	r1, r7
   3355e:	9503      	str	r5, [sp, #12]
   33560:	4689      	mov	r9, r1
   33562:	0029      	movs	r1, r5
   33564:	0015      	movs	r5, r2
   33566:	4345      	muls	r5, r0
   33568:	444d      	add	r5, r9
   3356a:	9502      	str	r5, [sp, #8]
   3356c:	4645      	mov	r5, r8
   3356e:	0c2d      	lsrs	r5, r5, #16
   33570:	46aa      	mov	sl, r5
   33572:	9d02      	ldr	r5, [sp, #8]
   33574:	4455      	add	r5, sl
   33576:	45a9      	cmp	r9, r5
   33578:	d906      	bls.n	33588 <__aeabi_dmul+0x238>
   3357a:	468a      	mov	sl, r1
   3357c:	2180      	movs	r1, #128	; 0x80
   3357e:	0249      	lsls	r1, r1, #9
   33580:	4689      	mov	r9, r1
   33582:	44ca      	add	sl, r9
   33584:	4651      	mov	r1, sl
   33586:	9103      	str	r1, [sp, #12]
   33588:	0c29      	lsrs	r1, r5, #16
   3358a:	9104      	str	r1, [sp, #16]
   3358c:	4641      	mov	r1, r8
   3358e:	0409      	lsls	r1, r1, #16
   33590:	042d      	lsls	r5, r5, #16
   33592:	0c09      	lsrs	r1, r1, #16
   33594:	4688      	mov	r8, r1
   33596:	0029      	movs	r1, r5
   33598:	0c25      	lsrs	r5, r4, #16
   3359a:	0424      	lsls	r4, r4, #16
   3359c:	4441      	add	r1, r8
   3359e:	0c24      	lsrs	r4, r4, #16
   335a0:	9105      	str	r1, [sp, #20]
   335a2:	0021      	movs	r1, r4
   335a4:	4341      	muls	r1, r0
   335a6:	4688      	mov	r8, r1
   335a8:	0021      	movs	r1, r4
   335aa:	4379      	muls	r1, r7
   335ac:	468a      	mov	sl, r1
   335ae:	4368      	muls	r0, r5
   335b0:	4641      	mov	r1, r8
   335b2:	4450      	add	r0, sl
   335b4:	4681      	mov	r9, r0
   335b6:	0c08      	lsrs	r0, r1, #16
   335b8:	4448      	add	r0, r9
   335ba:	436f      	muls	r7, r5
   335bc:	4582      	cmp	sl, r0
   335be:	d903      	bls.n	335c8 <__aeabi_dmul+0x278>
   335c0:	2180      	movs	r1, #128	; 0x80
   335c2:	0249      	lsls	r1, r1, #9
   335c4:	4689      	mov	r9, r1
   335c6:	444f      	add	r7, r9
   335c8:	0c01      	lsrs	r1, r0, #16
   335ca:	4689      	mov	r9, r1
   335cc:	0039      	movs	r1, r7
   335ce:	4449      	add	r1, r9
   335d0:	9102      	str	r1, [sp, #8]
   335d2:	4641      	mov	r1, r8
   335d4:	040f      	lsls	r7, r1, #16
   335d6:	9904      	ldr	r1, [sp, #16]
   335d8:	0c3f      	lsrs	r7, r7, #16
   335da:	4688      	mov	r8, r1
   335dc:	0400      	lsls	r0, r0, #16
   335de:	19c0      	adds	r0, r0, r7
   335e0:	4480      	add	r8, r0
   335e2:	4641      	mov	r1, r8
   335e4:	9104      	str	r1, [sp, #16]
   335e6:	4659      	mov	r1, fp
   335e8:	0c0f      	lsrs	r7, r1, #16
   335ea:	0409      	lsls	r1, r1, #16
   335ec:	0c09      	lsrs	r1, r1, #16
   335ee:	4688      	mov	r8, r1
   335f0:	4359      	muls	r1, r3
   335f2:	468a      	mov	sl, r1
   335f4:	0039      	movs	r1, r7
   335f6:	4351      	muls	r1, r2
   335f8:	4689      	mov	r9, r1
   335fa:	4641      	mov	r1, r8
   335fc:	434a      	muls	r2, r1
   335fe:	4651      	mov	r1, sl
   33600:	0c09      	lsrs	r1, r1, #16
   33602:	468b      	mov	fp, r1
   33604:	437b      	muls	r3, r7
   33606:	18d2      	adds	r2, r2, r3
   33608:	445a      	add	r2, fp
   3360a:	4293      	cmp	r3, r2
   3360c:	d903      	bls.n	33616 <__aeabi_dmul+0x2c6>
   3360e:	2380      	movs	r3, #128	; 0x80
   33610:	025b      	lsls	r3, r3, #9
   33612:	469b      	mov	fp, r3
   33614:	44d9      	add	r9, fp
   33616:	4651      	mov	r1, sl
   33618:	0409      	lsls	r1, r1, #16
   3361a:	0c09      	lsrs	r1, r1, #16
   3361c:	468a      	mov	sl, r1
   3361e:	4641      	mov	r1, r8
   33620:	4361      	muls	r1, r4
   33622:	437c      	muls	r4, r7
   33624:	0c13      	lsrs	r3, r2, #16
   33626:	0412      	lsls	r2, r2, #16
   33628:	444b      	add	r3, r9
   3362a:	4452      	add	r2, sl
   3362c:	46a1      	mov	r9, r4
   3362e:	468a      	mov	sl, r1
   33630:	003c      	movs	r4, r7
   33632:	4641      	mov	r1, r8
   33634:	436c      	muls	r4, r5
   33636:	434d      	muls	r5, r1
   33638:	4651      	mov	r1, sl
   3363a:	444d      	add	r5, r9
   3363c:	0c0f      	lsrs	r7, r1, #16
   3363e:	197d      	adds	r5, r7, r5
   33640:	45a9      	cmp	r9, r5
   33642:	d903      	bls.n	3364c <__aeabi_dmul+0x2fc>
   33644:	2180      	movs	r1, #128	; 0x80
   33646:	0249      	lsls	r1, r1, #9
   33648:	4688      	mov	r8, r1
   3364a:	4444      	add	r4, r8
   3364c:	9f04      	ldr	r7, [sp, #16]
   3364e:	9903      	ldr	r1, [sp, #12]
   33650:	46b8      	mov	r8, r7
   33652:	4441      	add	r1, r8
   33654:	468b      	mov	fp, r1
   33656:	4583      	cmp	fp, r0
   33658:	4180      	sbcs	r0, r0
   3365a:	4241      	negs	r1, r0
   3365c:	4688      	mov	r8, r1
   3365e:	4651      	mov	r1, sl
   33660:	0408      	lsls	r0, r1, #16
   33662:	042f      	lsls	r7, r5, #16
   33664:	0c00      	lsrs	r0, r0, #16
   33666:	183f      	adds	r7, r7, r0
   33668:	4658      	mov	r0, fp
   3366a:	9902      	ldr	r1, [sp, #8]
   3366c:	1810      	adds	r0, r2, r0
   3366e:	4689      	mov	r9, r1
   33670:	4290      	cmp	r0, r2
   33672:	4192      	sbcs	r2, r2
   33674:	444f      	add	r7, r9
   33676:	46ba      	mov	sl, r7
   33678:	4252      	negs	r2, r2
   3367a:	4699      	mov	r9, r3
   3367c:	4693      	mov	fp, r2
   3367e:	44c2      	add	sl, r8
   33680:	44d1      	add	r9, sl
   33682:	44cb      	add	fp, r9
   33684:	428f      	cmp	r7, r1
   33686:	41bf      	sbcs	r7, r7
   33688:	45c2      	cmp	sl, r8
   3368a:	4189      	sbcs	r1, r1
   3368c:	4599      	cmp	r9, r3
   3368e:	419b      	sbcs	r3, r3
   33690:	4593      	cmp	fp, r2
   33692:	4192      	sbcs	r2, r2
   33694:	427f      	negs	r7, r7
   33696:	4249      	negs	r1, r1
   33698:	0c2d      	lsrs	r5, r5, #16
   3369a:	4252      	negs	r2, r2
   3369c:	430f      	orrs	r7, r1
   3369e:	425b      	negs	r3, r3
   336a0:	4313      	orrs	r3, r2
   336a2:	197f      	adds	r7, r7, r5
   336a4:	18ff      	adds	r7, r7, r3
   336a6:	465b      	mov	r3, fp
   336a8:	193c      	adds	r4, r7, r4
   336aa:	0ddb      	lsrs	r3, r3, #23
   336ac:	9a05      	ldr	r2, [sp, #20]
   336ae:	0264      	lsls	r4, r4, #9
   336b0:	431c      	orrs	r4, r3
   336b2:	0243      	lsls	r3, r0, #9
   336b4:	4313      	orrs	r3, r2
   336b6:	1e5d      	subs	r5, r3, #1
   336b8:	41ab      	sbcs	r3, r5
   336ba:	465a      	mov	r2, fp
   336bc:	0dc0      	lsrs	r0, r0, #23
   336be:	4303      	orrs	r3, r0
   336c0:	0252      	lsls	r2, r2, #9
   336c2:	4313      	orrs	r3, r2
   336c4:	01e2      	lsls	r2, r4, #7
   336c6:	d556      	bpl.n	33776 <__aeabi_dmul+0x426>
   336c8:	2001      	movs	r0, #1
   336ca:	085a      	lsrs	r2, r3, #1
   336cc:	4003      	ands	r3, r0
   336ce:	4313      	orrs	r3, r2
   336d0:	07e2      	lsls	r2, r4, #31
   336d2:	4313      	orrs	r3, r2
   336d4:	0864      	lsrs	r4, r4, #1
   336d6:	485a      	ldr	r0, [pc, #360]	; (33840 <__aeabi_dmul+0x4f0>)
   336d8:	4460      	add	r0, ip
   336da:	2800      	cmp	r0, #0
   336dc:	dd4d      	ble.n	3377a <__aeabi_dmul+0x42a>
   336de:	075a      	lsls	r2, r3, #29
   336e0:	d009      	beq.n	336f6 <__aeabi_dmul+0x3a6>
   336e2:	220f      	movs	r2, #15
   336e4:	401a      	ands	r2, r3
   336e6:	2a04      	cmp	r2, #4
   336e8:	d005      	beq.n	336f6 <__aeabi_dmul+0x3a6>
   336ea:	1d1a      	adds	r2, r3, #4
   336ec:	429a      	cmp	r2, r3
   336ee:	419b      	sbcs	r3, r3
   336f0:	425b      	negs	r3, r3
   336f2:	18e4      	adds	r4, r4, r3
   336f4:	0013      	movs	r3, r2
   336f6:	01e2      	lsls	r2, r4, #7
   336f8:	d504      	bpl.n	33704 <__aeabi_dmul+0x3b4>
   336fa:	2080      	movs	r0, #128	; 0x80
   336fc:	4a51      	ldr	r2, [pc, #324]	; (33844 <__aeabi_dmul+0x4f4>)
   336fe:	00c0      	lsls	r0, r0, #3
   33700:	4014      	ands	r4, r2
   33702:	4460      	add	r0, ip
   33704:	4a50      	ldr	r2, [pc, #320]	; (33848 <__aeabi_dmul+0x4f8>)
   33706:	4290      	cmp	r0, r2
   33708:	dd00      	ble.n	3370c <__aeabi_dmul+0x3bc>
   3370a:	e6e3      	b.n	334d4 <__aeabi_dmul+0x184>
   3370c:	2501      	movs	r5, #1
   3370e:	08db      	lsrs	r3, r3, #3
   33710:	0762      	lsls	r2, r4, #29
   33712:	431a      	orrs	r2, r3
   33714:	0264      	lsls	r4, r4, #9
   33716:	9b01      	ldr	r3, [sp, #4]
   33718:	4691      	mov	r9, r2
   3371a:	0b22      	lsrs	r2, r4, #12
   3371c:	0544      	lsls	r4, r0, #21
   3371e:	0d64      	lsrs	r4, r4, #21
   33720:	401d      	ands	r5, r3
   33722:	e67c      	b.n	3341e <__aeabi_dmul+0xce>
   33724:	2280      	movs	r2, #128	; 0x80
   33726:	4659      	mov	r1, fp
   33728:	0312      	lsls	r2, r2, #12
   3372a:	4211      	tst	r1, r2
   3372c:	d008      	beq.n	33740 <__aeabi_dmul+0x3f0>
   3372e:	4214      	tst	r4, r2
   33730:	d106      	bne.n	33740 <__aeabi_dmul+0x3f0>
   33732:	4322      	orrs	r2, r4
   33734:	0312      	lsls	r2, r2, #12
   33736:	0b12      	lsrs	r2, r2, #12
   33738:	4645      	mov	r5, r8
   3373a:	4699      	mov	r9, r3
   3373c:	4c43      	ldr	r4, [pc, #268]	; (3384c <__aeabi_dmul+0x4fc>)
   3373e:	e66e      	b.n	3341e <__aeabi_dmul+0xce>
   33740:	465b      	mov	r3, fp
   33742:	431a      	orrs	r2, r3
   33744:	0312      	lsls	r2, r2, #12
   33746:	0b12      	lsrs	r2, r2, #12
   33748:	4c40      	ldr	r4, [pc, #256]	; (3384c <__aeabi_dmul+0x4fc>)
   3374a:	e668      	b.n	3341e <__aeabi_dmul+0xce>
   3374c:	0003      	movs	r3, r0
   3374e:	4654      	mov	r4, sl
   33750:	3b28      	subs	r3, #40	; 0x28
   33752:	409c      	lsls	r4, r3
   33754:	2300      	movs	r3, #0
   33756:	e6b9      	b.n	334cc <__aeabi_dmul+0x17c>
   33758:	f000 fbfc 	bl	33f54 <__clzsi2>
   3375c:	3020      	adds	r0, #32
   3375e:	e6a6      	b.n	334ae <__aeabi_dmul+0x15e>
   33760:	0003      	movs	r3, r0
   33762:	3b28      	subs	r3, #40	; 0x28
   33764:	409f      	lsls	r7, r3
   33766:	2300      	movs	r3, #0
   33768:	46bb      	mov	fp, r7
   3376a:	4699      	mov	r9, r3
   3376c:	e68a      	b.n	33484 <__aeabi_dmul+0x134>
   3376e:	f000 fbf1 	bl	33f54 <__clzsi2>
   33772:	3020      	adds	r0, #32
   33774:	e674      	b.n	33460 <__aeabi_dmul+0x110>
   33776:	46b4      	mov	ip, r6
   33778:	e7ad      	b.n	336d6 <__aeabi_dmul+0x386>
   3377a:	2501      	movs	r5, #1
   3377c:	1a2a      	subs	r2, r5, r0
   3377e:	2a38      	cmp	r2, #56	; 0x38
   33780:	dd06      	ble.n	33790 <__aeabi_dmul+0x440>
   33782:	9b01      	ldr	r3, [sp, #4]
   33784:	2400      	movs	r4, #0
   33786:	401d      	ands	r5, r3
   33788:	2300      	movs	r3, #0
   3378a:	2200      	movs	r2, #0
   3378c:	4699      	mov	r9, r3
   3378e:	e646      	b.n	3341e <__aeabi_dmul+0xce>
   33790:	2a1f      	cmp	r2, #31
   33792:	dc21      	bgt.n	337d8 <__aeabi_dmul+0x488>
   33794:	2520      	movs	r5, #32
   33796:	0020      	movs	r0, r4
   33798:	1aad      	subs	r5, r5, r2
   3379a:	001e      	movs	r6, r3
   3379c:	40ab      	lsls	r3, r5
   3379e:	40a8      	lsls	r0, r5
   337a0:	40d6      	lsrs	r6, r2
   337a2:	1e5d      	subs	r5, r3, #1
   337a4:	41ab      	sbcs	r3, r5
   337a6:	4330      	orrs	r0, r6
   337a8:	4318      	orrs	r0, r3
   337aa:	40d4      	lsrs	r4, r2
   337ac:	0743      	lsls	r3, r0, #29
   337ae:	d009      	beq.n	337c4 <__aeabi_dmul+0x474>
   337b0:	230f      	movs	r3, #15
   337b2:	4003      	ands	r3, r0
   337b4:	2b04      	cmp	r3, #4
   337b6:	d005      	beq.n	337c4 <__aeabi_dmul+0x474>
   337b8:	0003      	movs	r3, r0
   337ba:	1d18      	adds	r0, r3, #4
   337bc:	4298      	cmp	r0, r3
   337be:	419b      	sbcs	r3, r3
   337c0:	425b      	negs	r3, r3
   337c2:	18e4      	adds	r4, r4, r3
   337c4:	0223      	lsls	r3, r4, #8
   337c6:	d521      	bpl.n	3380c <__aeabi_dmul+0x4bc>
   337c8:	2501      	movs	r5, #1
   337ca:	9b01      	ldr	r3, [sp, #4]
   337cc:	2401      	movs	r4, #1
   337ce:	401d      	ands	r5, r3
   337d0:	2300      	movs	r3, #0
   337d2:	2200      	movs	r2, #0
   337d4:	4699      	mov	r9, r3
   337d6:	e622      	b.n	3341e <__aeabi_dmul+0xce>
   337d8:	251f      	movs	r5, #31
   337da:	0021      	movs	r1, r4
   337dc:	426d      	negs	r5, r5
   337de:	1a28      	subs	r0, r5, r0
   337e0:	40c1      	lsrs	r1, r0
   337e2:	0008      	movs	r0, r1
   337e4:	2a20      	cmp	r2, #32
   337e6:	d01d      	beq.n	33824 <__aeabi_dmul+0x4d4>
   337e8:	355f      	adds	r5, #95	; 0x5f
   337ea:	1aaa      	subs	r2, r5, r2
   337ec:	4094      	lsls	r4, r2
   337ee:	4323      	orrs	r3, r4
   337f0:	1e5c      	subs	r4, r3, #1
   337f2:	41a3      	sbcs	r3, r4
   337f4:	2507      	movs	r5, #7
   337f6:	4303      	orrs	r3, r0
   337f8:	401d      	ands	r5, r3
   337fa:	2200      	movs	r2, #0
   337fc:	2d00      	cmp	r5, #0
   337fe:	d009      	beq.n	33814 <__aeabi_dmul+0x4c4>
   33800:	220f      	movs	r2, #15
   33802:	2400      	movs	r4, #0
   33804:	401a      	ands	r2, r3
   33806:	0018      	movs	r0, r3
   33808:	2a04      	cmp	r2, #4
   3380a:	d1d6      	bne.n	337ba <__aeabi_dmul+0x46a>
   3380c:	0003      	movs	r3, r0
   3380e:	0765      	lsls	r5, r4, #29
   33810:	0264      	lsls	r4, r4, #9
   33812:	0b22      	lsrs	r2, r4, #12
   33814:	08db      	lsrs	r3, r3, #3
   33816:	432b      	orrs	r3, r5
   33818:	2501      	movs	r5, #1
   3381a:	4699      	mov	r9, r3
   3381c:	9b01      	ldr	r3, [sp, #4]
   3381e:	2400      	movs	r4, #0
   33820:	401d      	ands	r5, r3
   33822:	e5fc      	b.n	3341e <__aeabi_dmul+0xce>
   33824:	2400      	movs	r4, #0
   33826:	e7e2      	b.n	337ee <__aeabi_dmul+0x49e>
   33828:	2280      	movs	r2, #128	; 0x80
   3382a:	2501      	movs	r5, #1
   3382c:	0312      	lsls	r2, r2, #12
   3382e:	4322      	orrs	r2, r4
   33830:	9901      	ldr	r1, [sp, #4]
   33832:	0312      	lsls	r2, r2, #12
   33834:	0b12      	lsrs	r2, r2, #12
   33836:	400d      	ands	r5, r1
   33838:	4699      	mov	r9, r3
   3383a:	4c04      	ldr	r4, [pc, #16]	; (3384c <__aeabi_dmul+0x4fc>)
   3383c:	e5ef      	b.n	3341e <__aeabi_dmul+0xce>
   3383e:	46c0      	nop			; (mov r8, r8)
   33840:	000003ff 	.word	0x000003ff
   33844:	feffffff 	.word	0xfeffffff
   33848:	000007fe 	.word	0x000007fe
   3384c:	000007ff 	.word	0x000007ff

00033850 <__aeabi_dsub>:
   33850:	b5f0      	push	{r4, r5, r6, r7, lr}
   33852:	4646      	mov	r6, r8
   33854:	46d6      	mov	lr, sl
   33856:	464f      	mov	r7, r9
   33858:	030c      	lsls	r4, r1, #12
   3385a:	b5c0      	push	{r6, r7, lr}
   3385c:	0fcd      	lsrs	r5, r1, #31
   3385e:	004e      	lsls	r6, r1, #1
   33860:	0a61      	lsrs	r1, r4, #9
   33862:	0f44      	lsrs	r4, r0, #29
   33864:	430c      	orrs	r4, r1
   33866:	00c1      	lsls	r1, r0, #3
   33868:	0058      	lsls	r0, r3, #1
   3386a:	0d40      	lsrs	r0, r0, #21
   3386c:	4684      	mov	ip, r0
   3386e:	468a      	mov	sl, r1
   33870:	000f      	movs	r7, r1
   33872:	0319      	lsls	r1, r3, #12
   33874:	0f50      	lsrs	r0, r2, #29
   33876:	0a49      	lsrs	r1, r1, #9
   33878:	4301      	orrs	r1, r0
   3387a:	48c6      	ldr	r0, [pc, #792]	; (33b94 <__aeabi_dsub+0x344>)
   3387c:	0d76      	lsrs	r6, r6, #21
   3387e:	46a8      	mov	r8, r5
   33880:	0fdb      	lsrs	r3, r3, #31
   33882:	00d2      	lsls	r2, r2, #3
   33884:	4584      	cmp	ip, r0
   33886:	d100      	bne.n	3388a <__aeabi_dsub+0x3a>
   33888:	e0d8      	b.n	33a3c <__aeabi_dsub+0x1ec>
   3388a:	2001      	movs	r0, #1
   3388c:	4043      	eors	r3, r0
   3388e:	42ab      	cmp	r3, r5
   33890:	d100      	bne.n	33894 <__aeabi_dsub+0x44>
   33892:	e0a6      	b.n	339e2 <__aeabi_dsub+0x192>
   33894:	4660      	mov	r0, ip
   33896:	1a35      	subs	r5, r6, r0
   33898:	2d00      	cmp	r5, #0
   3389a:	dc00      	bgt.n	3389e <__aeabi_dsub+0x4e>
   3389c:	e105      	b.n	33aaa <__aeabi_dsub+0x25a>
   3389e:	2800      	cmp	r0, #0
   338a0:	d110      	bne.n	338c4 <__aeabi_dsub+0x74>
   338a2:	000b      	movs	r3, r1
   338a4:	4313      	orrs	r3, r2
   338a6:	d100      	bne.n	338aa <__aeabi_dsub+0x5a>
   338a8:	e0d7      	b.n	33a5a <__aeabi_dsub+0x20a>
   338aa:	1e6b      	subs	r3, r5, #1
   338ac:	2b00      	cmp	r3, #0
   338ae:	d000      	beq.n	338b2 <__aeabi_dsub+0x62>
   338b0:	e14b      	b.n	33b4a <__aeabi_dsub+0x2fa>
   338b2:	4653      	mov	r3, sl
   338b4:	1a9f      	subs	r7, r3, r2
   338b6:	45ba      	cmp	sl, r7
   338b8:	4180      	sbcs	r0, r0
   338ba:	1a64      	subs	r4, r4, r1
   338bc:	4240      	negs	r0, r0
   338be:	1a24      	subs	r4, r4, r0
   338c0:	2601      	movs	r6, #1
   338c2:	e01e      	b.n	33902 <__aeabi_dsub+0xb2>
   338c4:	4bb3      	ldr	r3, [pc, #716]	; (33b94 <__aeabi_dsub+0x344>)
   338c6:	429e      	cmp	r6, r3
   338c8:	d048      	beq.n	3395c <__aeabi_dsub+0x10c>
   338ca:	2380      	movs	r3, #128	; 0x80
   338cc:	041b      	lsls	r3, r3, #16
   338ce:	4319      	orrs	r1, r3
   338d0:	2d38      	cmp	r5, #56	; 0x38
   338d2:	dd00      	ble.n	338d6 <__aeabi_dsub+0x86>
   338d4:	e119      	b.n	33b0a <__aeabi_dsub+0x2ba>
   338d6:	2d1f      	cmp	r5, #31
   338d8:	dd00      	ble.n	338dc <__aeabi_dsub+0x8c>
   338da:	e14c      	b.n	33b76 <__aeabi_dsub+0x326>
   338dc:	2320      	movs	r3, #32
   338de:	000f      	movs	r7, r1
   338e0:	1b5b      	subs	r3, r3, r5
   338e2:	0010      	movs	r0, r2
   338e4:	409a      	lsls	r2, r3
   338e6:	409f      	lsls	r7, r3
   338e8:	40e8      	lsrs	r0, r5
   338ea:	1e53      	subs	r3, r2, #1
   338ec:	419a      	sbcs	r2, r3
   338ee:	40e9      	lsrs	r1, r5
   338f0:	4307      	orrs	r7, r0
   338f2:	4317      	orrs	r7, r2
   338f4:	4653      	mov	r3, sl
   338f6:	1bdf      	subs	r7, r3, r7
   338f8:	1a61      	subs	r1, r4, r1
   338fa:	45ba      	cmp	sl, r7
   338fc:	41a4      	sbcs	r4, r4
   338fe:	4264      	negs	r4, r4
   33900:	1b0c      	subs	r4, r1, r4
   33902:	0223      	lsls	r3, r4, #8
   33904:	d400      	bmi.n	33908 <__aeabi_dsub+0xb8>
   33906:	e0c5      	b.n	33a94 <__aeabi_dsub+0x244>
   33908:	0264      	lsls	r4, r4, #9
   3390a:	0a65      	lsrs	r5, r4, #9
   3390c:	2d00      	cmp	r5, #0
   3390e:	d100      	bne.n	33912 <__aeabi_dsub+0xc2>
   33910:	e0f6      	b.n	33b00 <__aeabi_dsub+0x2b0>
   33912:	0028      	movs	r0, r5
   33914:	f000 fb1e 	bl	33f54 <__clzsi2>
   33918:	0003      	movs	r3, r0
   3391a:	3b08      	subs	r3, #8
   3391c:	2b1f      	cmp	r3, #31
   3391e:	dd00      	ble.n	33922 <__aeabi_dsub+0xd2>
   33920:	e0e9      	b.n	33af6 <__aeabi_dsub+0x2a6>
   33922:	2220      	movs	r2, #32
   33924:	003c      	movs	r4, r7
   33926:	1ad2      	subs	r2, r2, r3
   33928:	409d      	lsls	r5, r3
   3392a:	40d4      	lsrs	r4, r2
   3392c:	409f      	lsls	r7, r3
   3392e:	4325      	orrs	r5, r4
   33930:	429e      	cmp	r6, r3
   33932:	dd00      	ble.n	33936 <__aeabi_dsub+0xe6>
   33934:	e0db      	b.n	33aee <__aeabi_dsub+0x29e>
   33936:	1b9e      	subs	r6, r3, r6
   33938:	1c73      	adds	r3, r6, #1
   3393a:	2b1f      	cmp	r3, #31
   3393c:	dd00      	ble.n	33940 <__aeabi_dsub+0xf0>
   3393e:	e10a      	b.n	33b56 <__aeabi_dsub+0x306>
   33940:	2220      	movs	r2, #32
   33942:	0038      	movs	r0, r7
   33944:	1ad2      	subs	r2, r2, r3
   33946:	0029      	movs	r1, r5
   33948:	4097      	lsls	r7, r2
   3394a:	002c      	movs	r4, r5
   3394c:	4091      	lsls	r1, r2
   3394e:	40d8      	lsrs	r0, r3
   33950:	1e7a      	subs	r2, r7, #1
   33952:	4197      	sbcs	r7, r2
   33954:	40dc      	lsrs	r4, r3
   33956:	2600      	movs	r6, #0
   33958:	4301      	orrs	r1, r0
   3395a:	430f      	orrs	r7, r1
   3395c:	077b      	lsls	r3, r7, #29
   3395e:	d009      	beq.n	33974 <__aeabi_dsub+0x124>
   33960:	230f      	movs	r3, #15
   33962:	403b      	ands	r3, r7
   33964:	2b04      	cmp	r3, #4
   33966:	d005      	beq.n	33974 <__aeabi_dsub+0x124>
   33968:	1d3b      	adds	r3, r7, #4
   3396a:	42bb      	cmp	r3, r7
   3396c:	41bf      	sbcs	r7, r7
   3396e:	427f      	negs	r7, r7
   33970:	19e4      	adds	r4, r4, r7
   33972:	001f      	movs	r7, r3
   33974:	0223      	lsls	r3, r4, #8
   33976:	d525      	bpl.n	339c4 <__aeabi_dsub+0x174>
   33978:	4b86      	ldr	r3, [pc, #536]	; (33b94 <__aeabi_dsub+0x344>)
   3397a:	3601      	adds	r6, #1
   3397c:	429e      	cmp	r6, r3
   3397e:	d100      	bne.n	33982 <__aeabi_dsub+0x132>
   33980:	e0af      	b.n	33ae2 <__aeabi_dsub+0x292>
   33982:	4b85      	ldr	r3, [pc, #532]	; (33b98 <__aeabi_dsub+0x348>)
   33984:	2501      	movs	r5, #1
   33986:	401c      	ands	r4, r3
   33988:	4643      	mov	r3, r8
   3398a:	0762      	lsls	r2, r4, #29
   3398c:	08ff      	lsrs	r7, r7, #3
   3398e:	0264      	lsls	r4, r4, #9
   33990:	0576      	lsls	r6, r6, #21
   33992:	4317      	orrs	r7, r2
   33994:	0b24      	lsrs	r4, r4, #12
   33996:	0d76      	lsrs	r6, r6, #21
   33998:	401d      	ands	r5, r3
   3399a:	2100      	movs	r1, #0
   3399c:	0324      	lsls	r4, r4, #12
   3399e:	0b23      	lsrs	r3, r4, #12
   339a0:	0d0c      	lsrs	r4, r1, #20
   339a2:	4a7e      	ldr	r2, [pc, #504]	; (33b9c <__aeabi_dsub+0x34c>)
   339a4:	0524      	lsls	r4, r4, #20
   339a6:	431c      	orrs	r4, r3
   339a8:	4014      	ands	r4, r2
   339aa:	0533      	lsls	r3, r6, #20
   339ac:	4323      	orrs	r3, r4
   339ae:	005b      	lsls	r3, r3, #1
   339b0:	07ed      	lsls	r5, r5, #31
   339b2:	085b      	lsrs	r3, r3, #1
   339b4:	432b      	orrs	r3, r5
   339b6:	0038      	movs	r0, r7
   339b8:	0019      	movs	r1, r3
   339ba:	bc1c      	pop	{r2, r3, r4}
   339bc:	4690      	mov	r8, r2
   339be:	4699      	mov	r9, r3
   339c0:	46a2      	mov	sl, r4
   339c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   339c4:	2501      	movs	r5, #1
   339c6:	4643      	mov	r3, r8
   339c8:	0762      	lsls	r2, r4, #29
   339ca:	08ff      	lsrs	r7, r7, #3
   339cc:	4317      	orrs	r7, r2
   339ce:	08e4      	lsrs	r4, r4, #3
   339d0:	401d      	ands	r5, r3
   339d2:	4b70      	ldr	r3, [pc, #448]	; (33b94 <__aeabi_dsub+0x344>)
   339d4:	429e      	cmp	r6, r3
   339d6:	d036      	beq.n	33a46 <__aeabi_dsub+0x1f6>
   339d8:	0324      	lsls	r4, r4, #12
   339da:	0576      	lsls	r6, r6, #21
   339dc:	0b24      	lsrs	r4, r4, #12
   339de:	0d76      	lsrs	r6, r6, #21
   339e0:	e7db      	b.n	3399a <__aeabi_dsub+0x14a>
   339e2:	4663      	mov	r3, ip
   339e4:	1af3      	subs	r3, r6, r3
   339e6:	2b00      	cmp	r3, #0
   339e8:	dc00      	bgt.n	339ec <__aeabi_dsub+0x19c>
   339ea:	e094      	b.n	33b16 <__aeabi_dsub+0x2c6>
   339ec:	4660      	mov	r0, ip
   339ee:	2800      	cmp	r0, #0
   339f0:	d035      	beq.n	33a5e <__aeabi_dsub+0x20e>
   339f2:	4868      	ldr	r0, [pc, #416]	; (33b94 <__aeabi_dsub+0x344>)
   339f4:	4286      	cmp	r6, r0
   339f6:	d0b1      	beq.n	3395c <__aeabi_dsub+0x10c>
   339f8:	2780      	movs	r7, #128	; 0x80
   339fa:	043f      	lsls	r7, r7, #16
   339fc:	4339      	orrs	r1, r7
   339fe:	2b38      	cmp	r3, #56	; 0x38
   33a00:	dc00      	bgt.n	33a04 <__aeabi_dsub+0x1b4>
   33a02:	e0fd      	b.n	33c00 <__aeabi_dsub+0x3b0>
   33a04:	430a      	orrs	r2, r1
   33a06:	0017      	movs	r7, r2
   33a08:	2100      	movs	r1, #0
   33a0a:	1e7a      	subs	r2, r7, #1
   33a0c:	4197      	sbcs	r7, r2
   33a0e:	4457      	add	r7, sl
   33a10:	4557      	cmp	r7, sl
   33a12:	4180      	sbcs	r0, r0
   33a14:	1909      	adds	r1, r1, r4
   33a16:	4244      	negs	r4, r0
   33a18:	190c      	adds	r4, r1, r4
   33a1a:	0223      	lsls	r3, r4, #8
   33a1c:	d53a      	bpl.n	33a94 <__aeabi_dsub+0x244>
   33a1e:	4b5d      	ldr	r3, [pc, #372]	; (33b94 <__aeabi_dsub+0x344>)
   33a20:	3601      	adds	r6, #1
   33a22:	429e      	cmp	r6, r3
   33a24:	d100      	bne.n	33a28 <__aeabi_dsub+0x1d8>
   33a26:	e14b      	b.n	33cc0 <__aeabi_dsub+0x470>
   33a28:	2201      	movs	r2, #1
   33a2a:	4b5b      	ldr	r3, [pc, #364]	; (33b98 <__aeabi_dsub+0x348>)
   33a2c:	401c      	ands	r4, r3
   33a2e:	087b      	lsrs	r3, r7, #1
   33a30:	4017      	ands	r7, r2
   33a32:	431f      	orrs	r7, r3
   33a34:	07e2      	lsls	r2, r4, #31
   33a36:	4317      	orrs	r7, r2
   33a38:	0864      	lsrs	r4, r4, #1
   33a3a:	e78f      	b.n	3395c <__aeabi_dsub+0x10c>
   33a3c:	0008      	movs	r0, r1
   33a3e:	4310      	orrs	r0, r2
   33a40:	d000      	beq.n	33a44 <__aeabi_dsub+0x1f4>
   33a42:	e724      	b.n	3388e <__aeabi_dsub+0x3e>
   33a44:	e721      	b.n	3388a <__aeabi_dsub+0x3a>
   33a46:	0023      	movs	r3, r4
   33a48:	433b      	orrs	r3, r7
   33a4a:	d100      	bne.n	33a4e <__aeabi_dsub+0x1fe>
   33a4c:	e1b9      	b.n	33dc2 <__aeabi_dsub+0x572>
   33a4e:	2280      	movs	r2, #128	; 0x80
   33a50:	0312      	lsls	r2, r2, #12
   33a52:	4314      	orrs	r4, r2
   33a54:	0324      	lsls	r4, r4, #12
   33a56:	0b24      	lsrs	r4, r4, #12
   33a58:	e79f      	b.n	3399a <__aeabi_dsub+0x14a>
   33a5a:	002e      	movs	r6, r5
   33a5c:	e77e      	b.n	3395c <__aeabi_dsub+0x10c>
   33a5e:	0008      	movs	r0, r1
   33a60:	4310      	orrs	r0, r2
   33a62:	d100      	bne.n	33a66 <__aeabi_dsub+0x216>
   33a64:	e0ca      	b.n	33bfc <__aeabi_dsub+0x3ac>
   33a66:	1e58      	subs	r0, r3, #1
   33a68:	4684      	mov	ip, r0
   33a6a:	2800      	cmp	r0, #0
   33a6c:	d000      	beq.n	33a70 <__aeabi_dsub+0x220>
   33a6e:	e0e7      	b.n	33c40 <__aeabi_dsub+0x3f0>
   33a70:	4452      	add	r2, sl
   33a72:	4552      	cmp	r2, sl
   33a74:	4180      	sbcs	r0, r0
   33a76:	1864      	adds	r4, r4, r1
   33a78:	4240      	negs	r0, r0
   33a7a:	1824      	adds	r4, r4, r0
   33a7c:	0017      	movs	r7, r2
   33a7e:	2601      	movs	r6, #1
   33a80:	0223      	lsls	r3, r4, #8
   33a82:	d507      	bpl.n	33a94 <__aeabi_dsub+0x244>
   33a84:	2602      	movs	r6, #2
   33a86:	e7cf      	b.n	33a28 <__aeabi_dsub+0x1d8>
   33a88:	4664      	mov	r4, ip
   33a8a:	432c      	orrs	r4, r5
   33a8c:	d100      	bne.n	33a90 <__aeabi_dsub+0x240>
   33a8e:	e1b3      	b.n	33df8 <__aeabi_dsub+0x5a8>
   33a90:	002c      	movs	r4, r5
   33a92:	4667      	mov	r7, ip
   33a94:	077b      	lsls	r3, r7, #29
   33a96:	d000      	beq.n	33a9a <__aeabi_dsub+0x24a>
   33a98:	e762      	b.n	33960 <__aeabi_dsub+0x110>
   33a9a:	0763      	lsls	r3, r4, #29
   33a9c:	08ff      	lsrs	r7, r7, #3
   33a9e:	431f      	orrs	r7, r3
   33aa0:	2501      	movs	r5, #1
   33aa2:	4643      	mov	r3, r8
   33aa4:	08e4      	lsrs	r4, r4, #3
   33aa6:	401d      	ands	r5, r3
   33aa8:	e793      	b.n	339d2 <__aeabi_dsub+0x182>
   33aaa:	2d00      	cmp	r5, #0
   33aac:	d178      	bne.n	33ba0 <__aeabi_dsub+0x350>
   33aae:	1c75      	adds	r5, r6, #1
   33ab0:	056d      	lsls	r5, r5, #21
   33ab2:	0d6d      	lsrs	r5, r5, #21
   33ab4:	2d01      	cmp	r5, #1
   33ab6:	dc00      	bgt.n	33aba <__aeabi_dsub+0x26a>
   33ab8:	e0f2      	b.n	33ca0 <__aeabi_dsub+0x450>
   33aba:	4650      	mov	r0, sl
   33abc:	1a80      	subs	r0, r0, r2
   33abe:	4582      	cmp	sl, r0
   33ac0:	41bf      	sbcs	r7, r7
   33ac2:	1a65      	subs	r5, r4, r1
   33ac4:	427f      	negs	r7, r7
   33ac6:	1bed      	subs	r5, r5, r7
   33ac8:	4684      	mov	ip, r0
   33aca:	0228      	lsls	r0, r5, #8
   33acc:	d400      	bmi.n	33ad0 <__aeabi_dsub+0x280>
   33ace:	e08c      	b.n	33bea <__aeabi_dsub+0x39a>
   33ad0:	4650      	mov	r0, sl
   33ad2:	1a17      	subs	r7, r2, r0
   33ad4:	42ba      	cmp	r2, r7
   33ad6:	4192      	sbcs	r2, r2
   33ad8:	1b0c      	subs	r4, r1, r4
   33ada:	4255      	negs	r5, r2
   33adc:	1b65      	subs	r5, r4, r5
   33ade:	4698      	mov	r8, r3
   33ae0:	e714      	b.n	3390c <__aeabi_dsub+0xbc>
   33ae2:	2501      	movs	r5, #1
   33ae4:	4643      	mov	r3, r8
   33ae6:	2400      	movs	r4, #0
   33ae8:	401d      	ands	r5, r3
   33aea:	2700      	movs	r7, #0
   33aec:	e755      	b.n	3399a <__aeabi_dsub+0x14a>
   33aee:	4c2a      	ldr	r4, [pc, #168]	; (33b98 <__aeabi_dsub+0x348>)
   33af0:	1af6      	subs	r6, r6, r3
   33af2:	402c      	ands	r4, r5
   33af4:	e732      	b.n	3395c <__aeabi_dsub+0x10c>
   33af6:	003d      	movs	r5, r7
   33af8:	3828      	subs	r0, #40	; 0x28
   33afa:	4085      	lsls	r5, r0
   33afc:	2700      	movs	r7, #0
   33afe:	e717      	b.n	33930 <__aeabi_dsub+0xe0>
   33b00:	0038      	movs	r0, r7
   33b02:	f000 fa27 	bl	33f54 <__clzsi2>
   33b06:	3020      	adds	r0, #32
   33b08:	e706      	b.n	33918 <__aeabi_dsub+0xc8>
   33b0a:	430a      	orrs	r2, r1
   33b0c:	0017      	movs	r7, r2
   33b0e:	2100      	movs	r1, #0
   33b10:	1e7a      	subs	r2, r7, #1
   33b12:	4197      	sbcs	r7, r2
   33b14:	e6ee      	b.n	338f4 <__aeabi_dsub+0xa4>
   33b16:	2b00      	cmp	r3, #0
   33b18:	d000      	beq.n	33b1c <__aeabi_dsub+0x2cc>
   33b1a:	e0e5      	b.n	33ce8 <__aeabi_dsub+0x498>
   33b1c:	1c73      	adds	r3, r6, #1
   33b1e:	469c      	mov	ip, r3
   33b20:	055b      	lsls	r3, r3, #21
   33b22:	0d5b      	lsrs	r3, r3, #21
   33b24:	2b01      	cmp	r3, #1
   33b26:	dc00      	bgt.n	33b2a <__aeabi_dsub+0x2da>
   33b28:	e09f      	b.n	33c6a <__aeabi_dsub+0x41a>
   33b2a:	4b1a      	ldr	r3, [pc, #104]	; (33b94 <__aeabi_dsub+0x344>)
   33b2c:	459c      	cmp	ip, r3
   33b2e:	d100      	bne.n	33b32 <__aeabi_dsub+0x2e2>
   33b30:	e0c5      	b.n	33cbe <__aeabi_dsub+0x46e>
   33b32:	4452      	add	r2, sl
   33b34:	4552      	cmp	r2, sl
   33b36:	4180      	sbcs	r0, r0
   33b38:	1864      	adds	r4, r4, r1
   33b3a:	4240      	negs	r0, r0
   33b3c:	1824      	adds	r4, r4, r0
   33b3e:	07e7      	lsls	r7, r4, #31
   33b40:	0852      	lsrs	r2, r2, #1
   33b42:	4317      	orrs	r7, r2
   33b44:	0864      	lsrs	r4, r4, #1
   33b46:	4666      	mov	r6, ip
   33b48:	e708      	b.n	3395c <__aeabi_dsub+0x10c>
   33b4a:	4812      	ldr	r0, [pc, #72]	; (33b94 <__aeabi_dsub+0x344>)
   33b4c:	4285      	cmp	r5, r0
   33b4e:	d100      	bne.n	33b52 <__aeabi_dsub+0x302>
   33b50:	e085      	b.n	33c5e <__aeabi_dsub+0x40e>
   33b52:	001d      	movs	r5, r3
   33b54:	e6bc      	b.n	338d0 <__aeabi_dsub+0x80>
   33b56:	0029      	movs	r1, r5
   33b58:	3e1f      	subs	r6, #31
   33b5a:	40f1      	lsrs	r1, r6
   33b5c:	2b20      	cmp	r3, #32
   33b5e:	d100      	bne.n	33b62 <__aeabi_dsub+0x312>
   33b60:	e07f      	b.n	33c62 <__aeabi_dsub+0x412>
   33b62:	2240      	movs	r2, #64	; 0x40
   33b64:	1ad3      	subs	r3, r2, r3
   33b66:	409d      	lsls	r5, r3
   33b68:	432f      	orrs	r7, r5
   33b6a:	1e7d      	subs	r5, r7, #1
   33b6c:	41af      	sbcs	r7, r5
   33b6e:	2400      	movs	r4, #0
   33b70:	430f      	orrs	r7, r1
   33b72:	2600      	movs	r6, #0
   33b74:	e78e      	b.n	33a94 <__aeabi_dsub+0x244>
   33b76:	002b      	movs	r3, r5
   33b78:	000f      	movs	r7, r1
   33b7a:	3b20      	subs	r3, #32
   33b7c:	40df      	lsrs	r7, r3
   33b7e:	2d20      	cmp	r5, #32
   33b80:	d071      	beq.n	33c66 <__aeabi_dsub+0x416>
   33b82:	2340      	movs	r3, #64	; 0x40
   33b84:	1b5d      	subs	r5, r3, r5
   33b86:	40a9      	lsls	r1, r5
   33b88:	430a      	orrs	r2, r1
   33b8a:	1e51      	subs	r1, r2, #1
   33b8c:	418a      	sbcs	r2, r1
   33b8e:	2100      	movs	r1, #0
   33b90:	4317      	orrs	r7, r2
   33b92:	e6af      	b.n	338f4 <__aeabi_dsub+0xa4>
   33b94:	000007ff 	.word	0x000007ff
   33b98:	ff7fffff 	.word	0xff7fffff
   33b9c:	800fffff 	.word	0x800fffff
   33ba0:	2e00      	cmp	r6, #0
   33ba2:	d03e      	beq.n	33c22 <__aeabi_dsub+0x3d2>
   33ba4:	4eb3      	ldr	r6, [pc, #716]	; (33e74 <__aeabi_dsub+0x624>)
   33ba6:	45b4      	cmp	ip, r6
   33ba8:	d045      	beq.n	33c36 <__aeabi_dsub+0x3e6>
   33baa:	2680      	movs	r6, #128	; 0x80
   33bac:	0436      	lsls	r6, r6, #16
   33bae:	426d      	negs	r5, r5
   33bb0:	4334      	orrs	r4, r6
   33bb2:	2d38      	cmp	r5, #56	; 0x38
   33bb4:	dd00      	ble.n	33bb8 <__aeabi_dsub+0x368>
   33bb6:	e0a8      	b.n	33d0a <__aeabi_dsub+0x4ba>
   33bb8:	2d1f      	cmp	r5, #31
   33bba:	dd00      	ble.n	33bbe <__aeabi_dsub+0x36e>
   33bbc:	e11f      	b.n	33dfe <__aeabi_dsub+0x5ae>
   33bbe:	2620      	movs	r6, #32
   33bc0:	0027      	movs	r7, r4
   33bc2:	4650      	mov	r0, sl
   33bc4:	1b76      	subs	r6, r6, r5
   33bc6:	40b7      	lsls	r7, r6
   33bc8:	40e8      	lsrs	r0, r5
   33bca:	4307      	orrs	r7, r0
   33bcc:	4650      	mov	r0, sl
   33bce:	40b0      	lsls	r0, r6
   33bd0:	1e46      	subs	r6, r0, #1
   33bd2:	41b0      	sbcs	r0, r6
   33bd4:	40ec      	lsrs	r4, r5
   33bd6:	4338      	orrs	r0, r7
   33bd8:	1a17      	subs	r7, r2, r0
   33bda:	42ba      	cmp	r2, r7
   33bdc:	4192      	sbcs	r2, r2
   33bde:	1b0c      	subs	r4, r1, r4
   33be0:	4252      	negs	r2, r2
   33be2:	1aa4      	subs	r4, r4, r2
   33be4:	4666      	mov	r6, ip
   33be6:	4698      	mov	r8, r3
   33be8:	e68b      	b.n	33902 <__aeabi_dsub+0xb2>
   33bea:	4664      	mov	r4, ip
   33bec:	4667      	mov	r7, ip
   33bee:	432c      	orrs	r4, r5
   33bf0:	d000      	beq.n	33bf4 <__aeabi_dsub+0x3a4>
   33bf2:	e68b      	b.n	3390c <__aeabi_dsub+0xbc>
   33bf4:	2500      	movs	r5, #0
   33bf6:	2600      	movs	r6, #0
   33bf8:	2700      	movs	r7, #0
   33bfa:	e6ea      	b.n	339d2 <__aeabi_dsub+0x182>
   33bfc:	001e      	movs	r6, r3
   33bfe:	e6ad      	b.n	3395c <__aeabi_dsub+0x10c>
   33c00:	2b1f      	cmp	r3, #31
   33c02:	dc60      	bgt.n	33cc6 <__aeabi_dsub+0x476>
   33c04:	2720      	movs	r7, #32
   33c06:	1af8      	subs	r0, r7, r3
   33c08:	000f      	movs	r7, r1
   33c0a:	4684      	mov	ip, r0
   33c0c:	4087      	lsls	r7, r0
   33c0e:	0010      	movs	r0, r2
   33c10:	40d8      	lsrs	r0, r3
   33c12:	4307      	orrs	r7, r0
   33c14:	4660      	mov	r0, ip
   33c16:	4082      	lsls	r2, r0
   33c18:	1e50      	subs	r0, r2, #1
   33c1a:	4182      	sbcs	r2, r0
   33c1c:	40d9      	lsrs	r1, r3
   33c1e:	4317      	orrs	r7, r2
   33c20:	e6f5      	b.n	33a0e <__aeabi_dsub+0x1be>
   33c22:	0026      	movs	r6, r4
   33c24:	4650      	mov	r0, sl
   33c26:	4306      	orrs	r6, r0
   33c28:	d005      	beq.n	33c36 <__aeabi_dsub+0x3e6>
   33c2a:	43ed      	mvns	r5, r5
   33c2c:	2d00      	cmp	r5, #0
   33c2e:	d0d3      	beq.n	33bd8 <__aeabi_dsub+0x388>
   33c30:	4e90      	ldr	r6, [pc, #576]	; (33e74 <__aeabi_dsub+0x624>)
   33c32:	45b4      	cmp	ip, r6
   33c34:	d1bd      	bne.n	33bb2 <__aeabi_dsub+0x362>
   33c36:	000c      	movs	r4, r1
   33c38:	0017      	movs	r7, r2
   33c3a:	4666      	mov	r6, ip
   33c3c:	4698      	mov	r8, r3
   33c3e:	e68d      	b.n	3395c <__aeabi_dsub+0x10c>
   33c40:	488c      	ldr	r0, [pc, #560]	; (33e74 <__aeabi_dsub+0x624>)
   33c42:	4283      	cmp	r3, r0
   33c44:	d00b      	beq.n	33c5e <__aeabi_dsub+0x40e>
   33c46:	4663      	mov	r3, ip
   33c48:	e6d9      	b.n	339fe <__aeabi_dsub+0x1ae>
   33c4a:	2d00      	cmp	r5, #0
   33c4c:	d000      	beq.n	33c50 <__aeabi_dsub+0x400>
   33c4e:	e096      	b.n	33d7e <__aeabi_dsub+0x52e>
   33c50:	0008      	movs	r0, r1
   33c52:	4310      	orrs	r0, r2
   33c54:	d100      	bne.n	33c58 <__aeabi_dsub+0x408>
   33c56:	e0e2      	b.n	33e1e <__aeabi_dsub+0x5ce>
   33c58:	000c      	movs	r4, r1
   33c5a:	0017      	movs	r7, r2
   33c5c:	4698      	mov	r8, r3
   33c5e:	4e85      	ldr	r6, [pc, #532]	; (33e74 <__aeabi_dsub+0x624>)
   33c60:	e67c      	b.n	3395c <__aeabi_dsub+0x10c>
   33c62:	2500      	movs	r5, #0
   33c64:	e780      	b.n	33b68 <__aeabi_dsub+0x318>
   33c66:	2100      	movs	r1, #0
   33c68:	e78e      	b.n	33b88 <__aeabi_dsub+0x338>
   33c6a:	0023      	movs	r3, r4
   33c6c:	4650      	mov	r0, sl
   33c6e:	4303      	orrs	r3, r0
   33c70:	2e00      	cmp	r6, #0
   33c72:	d000      	beq.n	33c76 <__aeabi_dsub+0x426>
   33c74:	e0a8      	b.n	33dc8 <__aeabi_dsub+0x578>
   33c76:	2b00      	cmp	r3, #0
   33c78:	d100      	bne.n	33c7c <__aeabi_dsub+0x42c>
   33c7a:	e0de      	b.n	33e3a <__aeabi_dsub+0x5ea>
   33c7c:	000b      	movs	r3, r1
   33c7e:	4313      	orrs	r3, r2
   33c80:	d100      	bne.n	33c84 <__aeabi_dsub+0x434>
   33c82:	e66b      	b.n	3395c <__aeabi_dsub+0x10c>
   33c84:	4452      	add	r2, sl
   33c86:	4552      	cmp	r2, sl
   33c88:	4180      	sbcs	r0, r0
   33c8a:	1864      	adds	r4, r4, r1
   33c8c:	4240      	negs	r0, r0
   33c8e:	1824      	adds	r4, r4, r0
   33c90:	0017      	movs	r7, r2
   33c92:	0223      	lsls	r3, r4, #8
   33c94:	d400      	bmi.n	33c98 <__aeabi_dsub+0x448>
   33c96:	e6fd      	b.n	33a94 <__aeabi_dsub+0x244>
   33c98:	4b77      	ldr	r3, [pc, #476]	; (33e78 <__aeabi_dsub+0x628>)
   33c9a:	4666      	mov	r6, ip
   33c9c:	401c      	ands	r4, r3
   33c9e:	e65d      	b.n	3395c <__aeabi_dsub+0x10c>
   33ca0:	0025      	movs	r5, r4
   33ca2:	4650      	mov	r0, sl
   33ca4:	4305      	orrs	r5, r0
   33ca6:	2e00      	cmp	r6, #0
   33ca8:	d1cf      	bne.n	33c4a <__aeabi_dsub+0x3fa>
   33caa:	2d00      	cmp	r5, #0
   33cac:	d14f      	bne.n	33d4e <__aeabi_dsub+0x4fe>
   33cae:	000c      	movs	r4, r1
   33cb0:	4314      	orrs	r4, r2
   33cb2:	d100      	bne.n	33cb6 <__aeabi_dsub+0x466>
   33cb4:	e0a0      	b.n	33df8 <__aeabi_dsub+0x5a8>
   33cb6:	000c      	movs	r4, r1
   33cb8:	0017      	movs	r7, r2
   33cba:	4698      	mov	r8, r3
   33cbc:	e64e      	b.n	3395c <__aeabi_dsub+0x10c>
   33cbe:	4666      	mov	r6, ip
   33cc0:	2400      	movs	r4, #0
   33cc2:	2700      	movs	r7, #0
   33cc4:	e685      	b.n	339d2 <__aeabi_dsub+0x182>
   33cc6:	001f      	movs	r7, r3
   33cc8:	0008      	movs	r0, r1
   33cca:	3f20      	subs	r7, #32
   33ccc:	40f8      	lsrs	r0, r7
   33cce:	0007      	movs	r7, r0
   33cd0:	2b20      	cmp	r3, #32
   33cd2:	d100      	bne.n	33cd6 <__aeabi_dsub+0x486>
   33cd4:	e08e      	b.n	33df4 <__aeabi_dsub+0x5a4>
   33cd6:	2040      	movs	r0, #64	; 0x40
   33cd8:	1ac3      	subs	r3, r0, r3
   33cda:	4099      	lsls	r1, r3
   33cdc:	430a      	orrs	r2, r1
   33cde:	1e51      	subs	r1, r2, #1
   33ce0:	418a      	sbcs	r2, r1
   33ce2:	2100      	movs	r1, #0
   33ce4:	4317      	orrs	r7, r2
   33ce6:	e692      	b.n	33a0e <__aeabi_dsub+0x1be>
   33ce8:	2e00      	cmp	r6, #0
   33cea:	d114      	bne.n	33d16 <__aeabi_dsub+0x4c6>
   33cec:	0026      	movs	r6, r4
   33cee:	4650      	mov	r0, sl
   33cf0:	4306      	orrs	r6, r0
   33cf2:	d062      	beq.n	33dba <__aeabi_dsub+0x56a>
   33cf4:	43db      	mvns	r3, r3
   33cf6:	2b00      	cmp	r3, #0
   33cf8:	d15c      	bne.n	33db4 <__aeabi_dsub+0x564>
   33cfa:	1887      	adds	r7, r0, r2
   33cfc:	4297      	cmp	r7, r2
   33cfe:	4192      	sbcs	r2, r2
   33d00:	1864      	adds	r4, r4, r1
   33d02:	4252      	negs	r2, r2
   33d04:	18a4      	adds	r4, r4, r2
   33d06:	4666      	mov	r6, ip
   33d08:	e687      	b.n	33a1a <__aeabi_dsub+0x1ca>
   33d0a:	4650      	mov	r0, sl
   33d0c:	4320      	orrs	r0, r4
   33d0e:	1e44      	subs	r4, r0, #1
   33d10:	41a0      	sbcs	r0, r4
   33d12:	2400      	movs	r4, #0
   33d14:	e760      	b.n	33bd8 <__aeabi_dsub+0x388>
   33d16:	4e57      	ldr	r6, [pc, #348]	; (33e74 <__aeabi_dsub+0x624>)
   33d18:	45b4      	cmp	ip, r6
   33d1a:	d04e      	beq.n	33dba <__aeabi_dsub+0x56a>
   33d1c:	2680      	movs	r6, #128	; 0x80
   33d1e:	0436      	lsls	r6, r6, #16
   33d20:	425b      	negs	r3, r3
   33d22:	4334      	orrs	r4, r6
   33d24:	2b38      	cmp	r3, #56	; 0x38
   33d26:	dd00      	ble.n	33d2a <__aeabi_dsub+0x4da>
   33d28:	e07f      	b.n	33e2a <__aeabi_dsub+0x5da>
   33d2a:	2b1f      	cmp	r3, #31
   33d2c:	dd00      	ble.n	33d30 <__aeabi_dsub+0x4e0>
   33d2e:	e08b      	b.n	33e48 <__aeabi_dsub+0x5f8>
   33d30:	2620      	movs	r6, #32
   33d32:	0027      	movs	r7, r4
   33d34:	4650      	mov	r0, sl
   33d36:	1af6      	subs	r6, r6, r3
   33d38:	40b7      	lsls	r7, r6
   33d3a:	40d8      	lsrs	r0, r3
   33d3c:	4307      	orrs	r7, r0
   33d3e:	4650      	mov	r0, sl
   33d40:	40b0      	lsls	r0, r6
   33d42:	1e46      	subs	r6, r0, #1
   33d44:	41b0      	sbcs	r0, r6
   33d46:	4307      	orrs	r7, r0
   33d48:	40dc      	lsrs	r4, r3
   33d4a:	18bf      	adds	r7, r7, r2
   33d4c:	e7d6      	b.n	33cfc <__aeabi_dsub+0x4ac>
   33d4e:	000d      	movs	r5, r1
   33d50:	4315      	orrs	r5, r2
   33d52:	d100      	bne.n	33d56 <__aeabi_dsub+0x506>
   33d54:	e602      	b.n	3395c <__aeabi_dsub+0x10c>
   33d56:	4650      	mov	r0, sl
   33d58:	1a80      	subs	r0, r0, r2
   33d5a:	4582      	cmp	sl, r0
   33d5c:	41bf      	sbcs	r7, r7
   33d5e:	1a65      	subs	r5, r4, r1
   33d60:	427f      	negs	r7, r7
   33d62:	1bed      	subs	r5, r5, r7
   33d64:	4684      	mov	ip, r0
   33d66:	0228      	lsls	r0, r5, #8
   33d68:	d400      	bmi.n	33d6c <__aeabi_dsub+0x51c>
   33d6a:	e68d      	b.n	33a88 <__aeabi_dsub+0x238>
   33d6c:	4650      	mov	r0, sl
   33d6e:	1a17      	subs	r7, r2, r0
   33d70:	42ba      	cmp	r2, r7
   33d72:	4192      	sbcs	r2, r2
   33d74:	1b0c      	subs	r4, r1, r4
   33d76:	4252      	negs	r2, r2
   33d78:	1aa4      	subs	r4, r4, r2
   33d7a:	4698      	mov	r8, r3
   33d7c:	e5ee      	b.n	3395c <__aeabi_dsub+0x10c>
   33d7e:	000d      	movs	r5, r1
   33d80:	4315      	orrs	r5, r2
   33d82:	d100      	bne.n	33d86 <__aeabi_dsub+0x536>
   33d84:	e76b      	b.n	33c5e <__aeabi_dsub+0x40e>
   33d86:	4650      	mov	r0, sl
   33d88:	0767      	lsls	r7, r4, #29
   33d8a:	08c0      	lsrs	r0, r0, #3
   33d8c:	4307      	orrs	r7, r0
   33d8e:	2080      	movs	r0, #128	; 0x80
   33d90:	08e4      	lsrs	r4, r4, #3
   33d92:	0300      	lsls	r0, r0, #12
   33d94:	4204      	tst	r4, r0
   33d96:	d007      	beq.n	33da8 <__aeabi_dsub+0x558>
   33d98:	08cd      	lsrs	r5, r1, #3
   33d9a:	4205      	tst	r5, r0
   33d9c:	d104      	bne.n	33da8 <__aeabi_dsub+0x558>
   33d9e:	002c      	movs	r4, r5
   33da0:	4698      	mov	r8, r3
   33da2:	08d7      	lsrs	r7, r2, #3
   33da4:	0749      	lsls	r1, r1, #29
   33da6:	430f      	orrs	r7, r1
   33da8:	0f7b      	lsrs	r3, r7, #29
   33daa:	00e4      	lsls	r4, r4, #3
   33dac:	431c      	orrs	r4, r3
   33dae:	00ff      	lsls	r7, r7, #3
   33db0:	4e30      	ldr	r6, [pc, #192]	; (33e74 <__aeabi_dsub+0x624>)
   33db2:	e5d3      	b.n	3395c <__aeabi_dsub+0x10c>
   33db4:	4e2f      	ldr	r6, [pc, #188]	; (33e74 <__aeabi_dsub+0x624>)
   33db6:	45b4      	cmp	ip, r6
   33db8:	d1b4      	bne.n	33d24 <__aeabi_dsub+0x4d4>
   33dba:	000c      	movs	r4, r1
   33dbc:	0017      	movs	r7, r2
   33dbe:	4666      	mov	r6, ip
   33dc0:	e5cc      	b.n	3395c <__aeabi_dsub+0x10c>
   33dc2:	2700      	movs	r7, #0
   33dc4:	2400      	movs	r4, #0
   33dc6:	e5e8      	b.n	3399a <__aeabi_dsub+0x14a>
   33dc8:	2b00      	cmp	r3, #0
   33dca:	d039      	beq.n	33e40 <__aeabi_dsub+0x5f0>
   33dcc:	000b      	movs	r3, r1
   33dce:	4313      	orrs	r3, r2
   33dd0:	d100      	bne.n	33dd4 <__aeabi_dsub+0x584>
   33dd2:	e744      	b.n	33c5e <__aeabi_dsub+0x40e>
   33dd4:	08c0      	lsrs	r0, r0, #3
   33dd6:	0767      	lsls	r7, r4, #29
   33dd8:	4307      	orrs	r7, r0
   33dda:	2080      	movs	r0, #128	; 0x80
   33ddc:	08e4      	lsrs	r4, r4, #3
   33dde:	0300      	lsls	r0, r0, #12
   33de0:	4204      	tst	r4, r0
   33de2:	d0e1      	beq.n	33da8 <__aeabi_dsub+0x558>
   33de4:	08cb      	lsrs	r3, r1, #3
   33de6:	4203      	tst	r3, r0
   33de8:	d1de      	bne.n	33da8 <__aeabi_dsub+0x558>
   33dea:	08d7      	lsrs	r7, r2, #3
   33dec:	0749      	lsls	r1, r1, #29
   33dee:	430f      	orrs	r7, r1
   33df0:	001c      	movs	r4, r3
   33df2:	e7d9      	b.n	33da8 <__aeabi_dsub+0x558>
   33df4:	2100      	movs	r1, #0
   33df6:	e771      	b.n	33cdc <__aeabi_dsub+0x48c>
   33df8:	2500      	movs	r5, #0
   33dfa:	2700      	movs	r7, #0
   33dfc:	e5e9      	b.n	339d2 <__aeabi_dsub+0x182>
   33dfe:	002e      	movs	r6, r5
   33e00:	0027      	movs	r7, r4
   33e02:	3e20      	subs	r6, #32
   33e04:	40f7      	lsrs	r7, r6
   33e06:	2d20      	cmp	r5, #32
   33e08:	d02f      	beq.n	33e6a <__aeabi_dsub+0x61a>
   33e0a:	2640      	movs	r6, #64	; 0x40
   33e0c:	1b75      	subs	r5, r6, r5
   33e0e:	40ac      	lsls	r4, r5
   33e10:	4650      	mov	r0, sl
   33e12:	4320      	orrs	r0, r4
   33e14:	1e44      	subs	r4, r0, #1
   33e16:	41a0      	sbcs	r0, r4
   33e18:	2400      	movs	r4, #0
   33e1a:	4338      	orrs	r0, r7
   33e1c:	e6dc      	b.n	33bd8 <__aeabi_dsub+0x388>
   33e1e:	2480      	movs	r4, #128	; 0x80
   33e20:	2500      	movs	r5, #0
   33e22:	0324      	lsls	r4, r4, #12
   33e24:	4e13      	ldr	r6, [pc, #76]	; (33e74 <__aeabi_dsub+0x624>)
   33e26:	2700      	movs	r7, #0
   33e28:	e5d3      	b.n	339d2 <__aeabi_dsub+0x182>
   33e2a:	4650      	mov	r0, sl
   33e2c:	4320      	orrs	r0, r4
   33e2e:	0007      	movs	r7, r0
   33e30:	1e78      	subs	r0, r7, #1
   33e32:	4187      	sbcs	r7, r0
   33e34:	2400      	movs	r4, #0
   33e36:	18bf      	adds	r7, r7, r2
   33e38:	e760      	b.n	33cfc <__aeabi_dsub+0x4ac>
   33e3a:	000c      	movs	r4, r1
   33e3c:	0017      	movs	r7, r2
   33e3e:	e58d      	b.n	3395c <__aeabi_dsub+0x10c>
   33e40:	000c      	movs	r4, r1
   33e42:	0017      	movs	r7, r2
   33e44:	4e0b      	ldr	r6, [pc, #44]	; (33e74 <__aeabi_dsub+0x624>)
   33e46:	e589      	b.n	3395c <__aeabi_dsub+0x10c>
   33e48:	001e      	movs	r6, r3
   33e4a:	0027      	movs	r7, r4
   33e4c:	3e20      	subs	r6, #32
   33e4e:	40f7      	lsrs	r7, r6
   33e50:	2b20      	cmp	r3, #32
   33e52:	d00c      	beq.n	33e6e <__aeabi_dsub+0x61e>
   33e54:	2640      	movs	r6, #64	; 0x40
   33e56:	1af3      	subs	r3, r6, r3
   33e58:	409c      	lsls	r4, r3
   33e5a:	4650      	mov	r0, sl
   33e5c:	4320      	orrs	r0, r4
   33e5e:	1e44      	subs	r4, r0, #1
   33e60:	41a0      	sbcs	r0, r4
   33e62:	4307      	orrs	r7, r0
   33e64:	2400      	movs	r4, #0
   33e66:	18bf      	adds	r7, r7, r2
   33e68:	e748      	b.n	33cfc <__aeabi_dsub+0x4ac>
   33e6a:	2400      	movs	r4, #0
   33e6c:	e7d0      	b.n	33e10 <__aeabi_dsub+0x5c0>
   33e6e:	2400      	movs	r4, #0
   33e70:	e7f3      	b.n	33e5a <__aeabi_dsub+0x60a>
   33e72:	46c0      	nop			; (mov r8, r8)
   33e74:	000007ff 	.word	0x000007ff
   33e78:	ff7fffff 	.word	0xff7fffff

00033e7c <__aeabi_d2iz>:
   33e7c:	b530      	push	{r4, r5, lr}
   33e7e:	4d13      	ldr	r5, [pc, #76]	; (33ecc <__aeabi_d2iz+0x50>)
   33e80:	030a      	lsls	r2, r1, #12
   33e82:	004b      	lsls	r3, r1, #1
   33e84:	0b12      	lsrs	r2, r2, #12
   33e86:	0d5b      	lsrs	r3, r3, #21
   33e88:	0fc9      	lsrs	r1, r1, #31
   33e8a:	2400      	movs	r4, #0
   33e8c:	42ab      	cmp	r3, r5
   33e8e:	dd10      	ble.n	33eb2 <__aeabi_d2iz+0x36>
   33e90:	4c0f      	ldr	r4, [pc, #60]	; (33ed0 <__aeabi_d2iz+0x54>)
   33e92:	42a3      	cmp	r3, r4
   33e94:	dc0f      	bgt.n	33eb6 <__aeabi_d2iz+0x3a>
   33e96:	2480      	movs	r4, #128	; 0x80
   33e98:	4d0e      	ldr	r5, [pc, #56]	; (33ed4 <__aeabi_d2iz+0x58>)
   33e9a:	0364      	lsls	r4, r4, #13
   33e9c:	4322      	orrs	r2, r4
   33e9e:	1aed      	subs	r5, r5, r3
   33ea0:	2d1f      	cmp	r5, #31
   33ea2:	dd0b      	ble.n	33ebc <__aeabi_d2iz+0x40>
   33ea4:	480c      	ldr	r0, [pc, #48]	; (33ed8 <__aeabi_d2iz+0x5c>)
   33ea6:	1ac3      	subs	r3, r0, r3
   33ea8:	40da      	lsrs	r2, r3
   33eaa:	4254      	negs	r4, r2
   33eac:	2900      	cmp	r1, #0
   33eae:	d100      	bne.n	33eb2 <__aeabi_d2iz+0x36>
   33eb0:	0014      	movs	r4, r2
   33eb2:	0020      	movs	r0, r4
   33eb4:	bd30      	pop	{r4, r5, pc}
   33eb6:	4b09      	ldr	r3, [pc, #36]	; (33edc <__aeabi_d2iz+0x60>)
   33eb8:	18cc      	adds	r4, r1, r3
   33eba:	e7fa      	b.n	33eb2 <__aeabi_d2iz+0x36>
   33ebc:	4c08      	ldr	r4, [pc, #32]	; (33ee0 <__aeabi_d2iz+0x64>)
   33ebe:	40e8      	lsrs	r0, r5
   33ec0:	46a4      	mov	ip, r4
   33ec2:	4463      	add	r3, ip
   33ec4:	409a      	lsls	r2, r3
   33ec6:	4302      	orrs	r2, r0
   33ec8:	e7ef      	b.n	33eaa <__aeabi_d2iz+0x2e>
   33eca:	46c0      	nop			; (mov r8, r8)
   33ecc:	000003fe 	.word	0x000003fe
   33ed0:	0000041d 	.word	0x0000041d
   33ed4:	00000433 	.word	0x00000433
   33ed8:	00000413 	.word	0x00000413
   33edc:	7fffffff 	.word	0x7fffffff
   33ee0:	fffffbed 	.word	0xfffffbed

00033ee4 <__aeabi_ui2d>:
   33ee4:	b510      	push	{r4, lr}
   33ee6:	1e04      	subs	r4, r0, #0
   33ee8:	d028      	beq.n	33f3c <__aeabi_ui2d+0x58>
   33eea:	f000 f833 	bl	33f54 <__clzsi2>
   33eee:	4b15      	ldr	r3, [pc, #84]	; (33f44 <__aeabi_ui2d+0x60>)
   33ef0:	4a15      	ldr	r2, [pc, #84]	; (33f48 <__aeabi_ui2d+0x64>)
   33ef2:	1a1b      	subs	r3, r3, r0
   33ef4:	1ad2      	subs	r2, r2, r3
   33ef6:	2a1f      	cmp	r2, #31
   33ef8:	dd15      	ble.n	33f26 <__aeabi_ui2d+0x42>
   33efa:	4a14      	ldr	r2, [pc, #80]	; (33f4c <__aeabi_ui2d+0x68>)
   33efc:	1ad2      	subs	r2, r2, r3
   33efe:	4094      	lsls	r4, r2
   33f00:	2200      	movs	r2, #0
   33f02:	0324      	lsls	r4, r4, #12
   33f04:	055b      	lsls	r3, r3, #21
   33f06:	0b24      	lsrs	r4, r4, #12
   33f08:	0d5b      	lsrs	r3, r3, #21
   33f0a:	2100      	movs	r1, #0
   33f0c:	0010      	movs	r0, r2
   33f0e:	0324      	lsls	r4, r4, #12
   33f10:	0d0a      	lsrs	r2, r1, #20
   33f12:	0b24      	lsrs	r4, r4, #12
   33f14:	0512      	lsls	r2, r2, #20
   33f16:	4322      	orrs	r2, r4
   33f18:	4c0d      	ldr	r4, [pc, #52]	; (33f50 <__aeabi_ui2d+0x6c>)
   33f1a:	051b      	lsls	r3, r3, #20
   33f1c:	4022      	ands	r2, r4
   33f1e:	4313      	orrs	r3, r2
   33f20:	005b      	lsls	r3, r3, #1
   33f22:	0859      	lsrs	r1, r3, #1
   33f24:	bd10      	pop	{r4, pc}
   33f26:	0021      	movs	r1, r4
   33f28:	4091      	lsls	r1, r2
   33f2a:	000a      	movs	r2, r1
   33f2c:	210b      	movs	r1, #11
   33f2e:	1a08      	subs	r0, r1, r0
   33f30:	40c4      	lsrs	r4, r0
   33f32:	055b      	lsls	r3, r3, #21
   33f34:	0324      	lsls	r4, r4, #12
   33f36:	0b24      	lsrs	r4, r4, #12
   33f38:	0d5b      	lsrs	r3, r3, #21
   33f3a:	e7e6      	b.n	33f0a <__aeabi_ui2d+0x26>
   33f3c:	2300      	movs	r3, #0
   33f3e:	2400      	movs	r4, #0
   33f40:	2200      	movs	r2, #0
   33f42:	e7e2      	b.n	33f0a <__aeabi_ui2d+0x26>
   33f44:	0000041e 	.word	0x0000041e
   33f48:	00000433 	.word	0x00000433
   33f4c:	00000413 	.word	0x00000413
   33f50:	800fffff 	.word	0x800fffff

00033f54 <__clzsi2>:
   33f54:	211c      	movs	r1, #28
   33f56:	2301      	movs	r3, #1
   33f58:	041b      	lsls	r3, r3, #16
   33f5a:	4298      	cmp	r0, r3
   33f5c:	d301      	bcc.n	33f62 <__clzsi2+0xe>
   33f5e:	0c00      	lsrs	r0, r0, #16
   33f60:	3910      	subs	r1, #16
   33f62:	0a1b      	lsrs	r3, r3, #8
   33f64:	4298      	cmp	r0, r3
   33f66:	d301      	bcc.n	33f6c <__clzsi2+0x18>
   33f68:	0a00      	lsrs	r0, r0, #8
   33f6a:	3908      	subs	r1, #8
   33f6c:	091b      	lsrs	r3, r3, #4
   33f6e:	4298      	cmp	r0, r3
   33f70:	d301      	bcc.n	33f76 <__clzsi2+0x22>
   33f72:	0900      	lsrs	r0, r0, #4
   33f74:	3904      	subs	r1, #4
   33f76:	a202      	add	r2, pc, #8	; (adr r2, 33f80 <__clzsi2+0x2c>)
   33f78:	5c10      	ldrb	r0, [r2, r0]
   33f7a:	1840      	adds	r0, r0, r1
   33f7c:	4770      	bx	lr
   33f7e:	46c0      	nop			; (mov r8, r8)
   33f80:	02020304 	.word	0x02020304
   33f84:	01010101 	.word	0x01010101
	...

00033f90 <atoi>:
   33f90:	b510      	push	{r4, lr}
   33f92:	220a      	movs	r2, #10
   33f94:	2100      	movs	r1, #0
   33f96:	f000 fb0d 	bl	345b4 <strtol>
   33f9a:	bd10      	pop	{r4, pc}

00033f9c <__libc_init_array>:
   33f9c:	b570      	push	{r4, r5, r6, lr}
   33f9e:	2600      	movs	r6, #0
   33fa0:	4d0c      	ldr	r5, [pc, #48]	; (33fd4 <__libc_init_array+0x38>)
   33fa2:	4c0d      	ldr	r4, [pc, #52]	; (33fd8 <__libc_init_array+0x3c>)
   33fa4:	1b64      	subs	r4, r4, r5
   33fa6:	10a4      	asrs	r4, r4, #2
   33fa8:	42a6      	cmp	r6, r4
   33faa:	d109      	bne.n	33fc0 <__libc_init_array+0x24>
   33fac:	2600      	movs	r6, #0
   33fae:	f005 fb95 	bl	396dc <_init>
   33fb2:	4d0a      	ldr	r5, [pc, #40]	; (33fdc <__libc_init_array+0x40>)
   33fb4:	4c0a      	ldr	r4, [pc, #40]	; (33fe0 <__libc_init_array+0x44>)
   33fb6:	1b64      	subs	r4, r4, r5
   33fb8:	10a4      	asrs	r4, r4, #2
   33fba:	42a6      	cmp	r6, r4
   33fbc:	d105      	bne.n	33fca <__libc_init_array+0x2e>
   33fbe:	bd70      	pop	{r4, r5, r6, pc}
   33fc0:	00b3      	lsls	r3, r6, #2
   33fc2:	58eb      	ldr	r3, [r5, r3]
   33fc4:	4798      	blx	r3
   33fc6:	3601      	adds	r6, #1
   33fc8:	e7ee      	b.n	33fa8 <__libc_init_array+0xc>
   33fca:	00b3      	lsls	r3, r6, #2
   33fcc:	58eb      	ldr	r3, [r5, r3]
   33fce:	4798      	blx	r3
   33fd0:	3601      	adds	r6, #1
   33fd2:	e7f2      	b.n	33fba <__libc_init_array+0x1e>
   33fd4:	000396e8 	.word	0x000396e8
   33fd8:	000396e8 	.word	0x000396e8
   33fdc:	000396e8 	.word	0x000396e8
   33fe0:	000396ec 	.word	0x000396ec

00033fe4 <malloc>:
   33fe4:	b510      	push	{r4, lr}
   33fe6:	4b03      	ldr	r3, [pc, #12]	; (33ff4 <malloc+0x10>)
   33fe8:	0001      	movs	r1, r0
   33fea:	6818      	ldr	r0, [r3, #0]
   33fec:	f000 f87c 	bl	340e8 <_malloc_r>
   33ff0:	bd10      	pop	{r4, pc}
   33ff2:	46c0      	nop			; (mov r8, r8)
   33ff4:	20000118 	.word	0x20000118

00033ff8 <free>:
   33ff8:	b510      	push	{r4, lr}
   33ffa:	4b03      	ldr	r3, [pc, #12]	; (34008 <free+0x10>)
   33ffc:	0001      	movs	r1, r0
   33ffe:	6818      	ldr	r0, [r3, #0]
   34000:	f000 f828 	bl	34054 <_free_r>
   34004:	bd10      	pop	{r4, pc}
   34006:	46c0      	nop			; (mov r8, r8)
   34008:	20000118 	.word	0x20000118

0003400c <memcpy>:
   3400c:	2300      	movs	r3, #0
   3400e:	b510      	push	{r4, lr}
   34010:	429a      	cmp	r2, r3
   34012:	d100      	bne.n	34016 <memcpy+0xa>
   34014:	bd10      	pop	{r4, pc}
   34016:	5ccc      	ldrb	r4, [r1, r3]
   34018:	54c4      	strb	r4, [r0, r3]
   3401a:	3301      	adds	r3, #1
   3401c:	e7f8      	b.n	34010 <memcpy+0x4>

0003401e <memmove>:
   3401e:	b510      	push	{r4, lr}
   34020:	4288      	cmp	r0, r1
   34022:	d902      	bls.n	3402a <memmove+0xc>
   34024:	188b      	adds	r3, r1, r2
   34026:	4298      	cmp	r0, r3
   34028:	d308      	bcc.n	3403c <memmove+0x1e>
   3402a:	2300      	movs	r3, #0
   3402c:	429a      	cmp	r2, r3
   3402e:	d007      	beq.n	34040 <memmove+0x22>
   34030:	5ccc      	ldrb	r4, [r1, r3]
   34032:	54c4      	strb	r4, [r0, r3]
   34034:	3301      	adds	r3, #1
   34036:	e7f9      	b.n	3402c <memmove+0xe>
   34038:	5c8b      	ldrb	r3, [r1, r2]
   3403a:	5483      	strb	r3, [r0, r2]
   3403c:	3a01      	subs	r2, #1
   3403e:	d2fb      	bcs.n	34038 <memmove+0x1a>
   34040:	bd10      	pop	{r4, pc}

00034042 <memset>:
   34042:	0003      	movs	r3, r0
   34044:	1882      	adds	r2, r0, r2
   34046:	4293      	cmp	r3, r2
   34048:	d100      	bne.n	3404c <memset+0xa>
   3404a:	4770      	bx	lr
   3404c:	7019      	strb	r1, [r3, #0]
   3404e:	3301      	adds	r3, #1
   34050:	e7f9      	b.n	34046 <memset+0x4>
	...

00034054 <_free_r>:
   34054:	b570      	push	{r4, r5, r6, lr}
   34056:	0005      	movs	r5, r0
   34058:	2900      	cmp	r1, #0
   3405a:	d010      	beq.n	3407e <_free_r+0x2a>
   3405c:	1f0c      	subs	r4, r1, #4
   3405e:	6823      	ldr	r3, [r4, #0]
   34060:	2b00      	cmp	r3, #0
   34062:	da00      	bge.n	34066 <_free_r+0x12>
   34064:	18e4      	adds	r4, r4, r3
   34066:	0028      	movs	r0, r5
   34068:	f000 fdd8 	bl	34c1c <__malloc_lock>
   3406c:	4a1d      	ldr	r2, [pc, #116]	; (340e4 <_free_r+0x90>)
   3406e:	6813      	ldr	r3, [r2, #0]
   34070:	2b00      	cmp	r3, #0
   34072:	d105      	bne.n	34080 <_free_r+0x2c>
   34074:	6063      	str	r3, [r4, #4]
   34076:	6014      	str	r4, [r2, #0]
   34078:	0028      	movs	r0, r5
   3407a:	f000 fdd0 	bl	34c1e <__malloc_unlock>
   3407e:	bd70      	pop	{r4, r5, r6, pc}
   34080:	42a3      	cmp	r3, r4
   34082:	d909      	bls.n	34098 <_free_r+0x44>
   34084:	6821      	ldr	r1, [r4, #0]
   34086:	1860      	adds	r0, r4, r1
   34088:	4283      	cmp	r3, r0
   3408a:	d1f3      	bne.n	34074 <_free_r+0x20>
   3408c:	6818      	ldr	r0, [r3, #0]
   3408e:	685b      	ldr	r3, [r3, #4]
   34090:	1841      	adds	r1, r0, r1
   34092:	6021      	str	r1, [r4, #0]
   34094:	e7ee      	b.n	34074 <_free_r+0x20>
   34096:	0013      	movs	r3, r2
   34098:	685a      	ldr	r2, [r3, #4]
   3409a:	2a00      	cmp	r2, #0
   3409c:	d001      	beq.n	340a2 <_free_r+0x4e>
   3409e:	42a2      	cmp	r2, r4
   340a0:	d9f9      	bls.n	34096 <_free_r+0x42>
   340a2:	6819      	ldr	r1, [r3, #0]
   340a4:	1858      	adds	r0, r3, r1
   340a6:	42a0      	cmp	r0, r4
   340a8:	d10b      	bne.n	340c2 <_free_r+0x6e>
   340aa:	6820      	ldr	r0, [r4, #0]
   340ac:	1809      	adds	r1, r1, r0
   340ae:	1858      	adds	r0, r3, r1
   340b0:	6019      	str	r1, [r3, #0]
   340b2:	4282      	cmp	r2, r0
   340b4:	d1e0      	bne.n	34078 <_free_r+0x24>
   340b6:	6810      	ldr	r0, [r2, #0]
   340b8:	6852      	ldr	r2, [r2, #4]
   340ba:	1841      	adds	r1, r0, r1
   340bc:	6019      	str	r1, [r3, #0]
   340be:	605a      	str	r2, [r3, #4]
   340c0:	e7da      	b.n	34078 <_free_r+0x24>
   340c2:	42a0      	cmp	r0, r4
   340c4:	d902      	bls.n	340cc <_free_r+0x78>
   340c6:	230c      	movs	r3, #12
   340c8:	602b      	str	r3, [r5, #0]
   340ca:	e7d5      	b.n	34078 <_free_r+0x24>
   340cc:	6821      	ldr	r1, [r4, #0]
   340ce:	1860      	adds	r0, r4, r1
   340d0:	4282      	cmp	r2, r0
   340d2:	d103      	bne.n	340dc <_free_r+0x88>
   340d4:	6810      	ldr	r0, [r2, #0]
   340d6:	6852      	ldr	r2, [r2, #4]
   340d8:	1841      	adds	r1, r0, r1
   340da:	6021      	str	r1, [r4, #0]
   340dc:	6062      	str	r2, [r4, #4]
   340de:	605c      	str	r4, [r3, #4]
   340e0:	e7ca      	b.n	34078 <_free_r+0x24>
   340e2:	46c0      	nop			; (mov r8, r8)
   340e4:	20004584 	.word	0x20004584

000340e8 <_malloc_r>:
   340e8:	2303      	movs	r3, #3
   340ea:	b570      	push	{r4, r5, r6, lr}
   340ec:	1ccd      	adds	r5, r1, #3
   340ee:	439d      	bics	r5, r3
   340f0:	3508      	adds	r5, #8
   340f2:	0006      	movs	r6, r0
   340f4:	2d0c      	cmp	r5, #12
   340f6:	d21e      	bcs.n	34136 <_malloc_r+0x4e>
   340f8:	250c      	movs	r5, #12
   340fa:	42a9      	cmp	r1, r5
   340fc:	d81d      	bhi.n	3413a <_malloc_r+0x52>
   340fe:	0030      	movs	r0, r6
   34100:	f000 fd8c 	bl	34c1c <__malloc_lock>
   34104:	4a25      	ldr	r2, [pc, #148]	; (3419c <_malloc_r+0xb4>)
   34106:	6814      	ldr	r4, [r2, #0]
   34108:	0021      	movs	r1, r4
   3410a:	2900      	cmp	r1, #0
   3410c:	d119      	bne.n	34142 <_malloc_r+0x5a>
   3410e:	4c24      	ldr	r4, [pc, #144]	; (341a0 <_malloc_r+0xb8>)
   34110:	6823      	ldr	r3, [r4, #0]
   34112:	2b00      	cmp	r3, #0
   34114:	d103      	bne.n	3411e <_malloc_r+0x36>
   34116:	0030      	movs	r0, r6
   34118:	f000 f8ae 	bl	34278 <_sbrk_r>
   3411c:	6020      	str	r0, [r4, #0]
   3411e:	0029      	movs	r1, r5
   34120:	0030      	movs	r0, r6
   34122:	f000 f8a9 	bl	34278 <_sbrk_r>
   34126:	1c43      	adds	r3, r0, #1
   34128:	d12c      	bne.n	34184 <_malloc_r+0x9c>
   3412a:	230c      	movs	r3, #12
   3412c:	0030      	movs	r0, r6
   3412e:	6033      	str	r3, [r6, #0]
   34130:	f000 fd75 	bl	34c1e <__malloc_unlock>
   34134:	e003      	b.n	3413e <_malloc_r+0x56>
   34136:	2d00      	cmp	r5, #0
   34138:	dadf      	bge.n	340fa <_malloc_r+0x12>
   3413a:	230c      	movs	r3, #12
   3413c:	6033      	str	r3, [r6, #0]
   3413e:	2000      	movs	r0, #0
   34140:	bd70      	pop	{r4, r5, r6, pc}
   34142:	680b      	ldr	r3, [r1, #0]
   34144:	1b5b      	subs	r3, r3, r5
   34146:	d41a      	bmi.n	3417e <_malloc_r+0x96>
   34148:	2b0b      	cmp	r3, #11
   3414a:	d903      	bls.n	34154 <_malloc_r+0x6c>
   3414c:	600b      	str	r3, [r1, #0]
   3414e:	18cc      	adds	r4, r1, r3
   34150:	6025      	str	r5, [r4, #0]
   34152:	e003      	b.n	3415c <_malloc_r+0x74>
   34154:	428c      	cmp	r4, r1
   34156:	d10e      	bne.n	34176 <_malloc_r+0x8e>
   34158:	6863      	ldr	r3, [r4, #4]
   3415a:	6013      	str	r3, [r2, #0]
   3415c:	0030      	movs	r0, r6
   3415e:	f000 fd5e 	bl	34c1e <__malloc_unlock>
   34162:	0020      	movs	r0, r4
   34164:	2207      	movs	r2, #7
   34166:	300b      	adds	r0, #11
   34168:	1d23      	adds	r3, r4, #4
   3416a:	4390      	bics	r0, r2
   3416c:	1ac3      	subs	r3, r0, r3
   3416e:	d0e7      	beq.n	34140 <_malloc_r+0x58>
   34170:	425a      	negs	r2, r3
   34172:	50e2      	str	r2, [r4, r3]
   34174:	e7e4      	b.n	34140 <_malloc_r+0x58>
   34176:	684b      	ldr	r3, [r1, #4]
   34178:	6063      	str	r3, [r4, #4]
   3417a:	000c      	movs	r4, r1
   3417c:	e7ee      	b.n	3415c <_malloc_r+0x74>
   3417e:	000c      	movs	r4, r1
   34180:	6849      	ldr	r1, [r1, #4]
   34182:	e7c2      	b.n	3410a <_malloc_r+0x22>
   34184:	2303      	movs	r3, #3
   34186:	1cc4      	adds	r4, r0, #3
   34188:	439c      	bics	r4, r3
   3418a:	42a0      	cmp	r0, r4
   3418c:	d0e0      	beq.n	34150 <_malloc_r+0x68>
   3418e:	1a21      	subs	r1, r4, r0
   34190:	0030      	movs	r0, r6
   34192:	f000 f871 	bl	34278 <_sbrk_r>
   34196:	1c43      	adds	r3, r0, #1
   34198:	d1da      	bne.n	34150 <_malloc_r+0x68>
   3419a:	e7c6      	b.n	3412a <_malloc_r+0x42>
   3419c:	20004584 	.word	0x20004584
   341a0:	20004588 	.word	0x20004588

000341a4 <_puts_r>:
   341a4:	b570      	push	{r4, r5, r6, lr}
   341a6:	0005      	movs	r5, r0
   341a8:	000e      	movs	r6, r1
   341aa:	2800      	cmp	r0, #0
   341ac:	d004      	beq.n	341b8 <_puts_r+0x14>
   341ae:	6983      	ldr	r3, [r0, #24]
   341b0:	2b00      	cmp	r3, #0
   341b2:	d101      	bne.n	341b8 <_puts_r+0x14>
   341b4:	f000 fc0e 	bl	349d4 <__sinit>
   341b8:	69ab      	ldr	r3, [r5, #24]
   341ba:	68ac      	ldr	r4, [r5, #8]
   341bc:	2b00      	cmp	r3, #0
   341be:	d102      	bne.n	341c6 <_puts_r+0x22>
   341c0:	0028      	movs	r0, r5
   341c2:	f000 fc07 	bl	349d4 <__sinit>
   341c6:	4b24      	ldr	r3, [pc, #144]	; (34258 <_puts_r+0xb4>)
   341c8:	429c      	cmp	r4, r3
   341ca:	d10f      	bne.n	341ec <_puts_r+0x48>
   341cc:	686c      	ldr	r4, [r5, #4]
   341ce:	89a3      	ldrh	r3, [r4, #12]
   341d0:	071b      	lsls	r3, r3, #28
   341d2:	d502      	bpl.n	341da <_puts_r+0x36>
   341d4:	6923      	ldr	r3, [r4, #16]
   341d6:	2b00      	cmp	r3, #0
   341d8:	d120      	bne.n	3421c <_puts_r+0x78>
   341da:	0021      	movs	r1, r4
   341dc:	0028      	movs	r0, r5
   341de:	f000 fa8b 	bl	346f8 <__swsetup_r>
   341e2:	2800      	cmp	r0, #0
   341e4:	d01a      	beq.n	3421c <_puts_r+0x78>
   341e6:	2001      	movs	r0, #1
   341e8:	4240      	negs	r0, r0
   341ea:	bd70      	pop	{r4, r5, r6, pc}
   341ec:	4b1b      	ldr	r3, [pc, #108]	; (3425c <_puts_r+0xb8>)
   341ee:	429c      	cmp	r4, r3
   341f0:	d101      	bne.n	341f6 <_puts_r+0x52>
   341f2:	68ac      	ldr	r4, [r5, #8]
   341f4:	e7eb      	b.n	341ce <_puts_r+0x2a>
   341f6:	4b1a      	ldr	r3, [pc, #104]	; (34260 <_puts_r+0xbc>)
   341f8:	429c      	cmp	r4, r3
   341fa:	d1e8      	bne.n	341ce <_puts_r+0x2a>
   341fc:	68ec      	ldr	r4, [r5, #12]
   341fe:	e7e6      	b.n	341ce <_puts_r+0x2a>
   34200:	3b01      	subs	r3, #1
   34202:	3601      	adds	r6, #1
   34204:	60a3      	str	r3, [r4, #8]
   34206:	2b00      	cmp	r3, #0
   34208:	da04      	bge.n	34214 <_puts_r+0x70>
   3420a:	69a2      	ldr	r2, [r4, #24]
   3420c:	4293      	cmp	r3, r2
   3420e:	db16      	blt.n	3423e <_puts_r+0x9a>
   34210:	290a      	cmp	r1, #10
   34212:	d014      	beq.n	3423e <_puts_r+0x9a>
   34214:	6823      	ldr	r3, [r4, #0]
   34216:	1c5a      	adds	r2, r3, #1
   34218:	6022      	str	r2, [r4, #0]
   3421a:	7019      	strb	r1, [r3, #0]
   3421c:	7831      	ldrb	r1, [r6, #0]
   3421e:	68a3      	ldr	r3, [r4, #8]
   34220:	2900      	cmp	r1, #0
   34222:	d1ed      	bne.n	34200 <_puts_r+0x5c>
   34224:	3b01      	subs	r3, #1
   34226:	60a3      	str	r3, [r4, #8]
   34228:	2b00      	cmp	r3, #0
   3422a:	da0f      	bge.n	3424c <_puts_r+0xa8>
   3422c:	0022      	movs	r2, r4
   3422e:	310a      	adds	r1, #10
   34230:	0028      	movs	r0, r5
   34232:	f000 fa0b 	bl	3464c <__swbuf_r>
   34236:	1c43      	adds	r3, r0, #1
   34238:	d0d5      	beq.n	341e6 <_puts_r+0x42>
   3423a:	200a      	movs	r0, #10
   3423c:	e7d5      	b.n	341ea <_puts_r+0x46>
   3423e:	0022      	movs	r2, r4
   34240:	0028      	movs	r0, r5
   34242:	f000 fa03 	bl	3464c <__swbuf_r>
   34246:	1c43      	adds	r3, r0, #1
   34248:	d1e8      	bne.n	3421c <_puts_r+0x78>
   3424a:	e7cc      	b.n	341e6 <_puts_r+0x42>
   3424c:	200a      	movs	r0, #10
   3424e:	6823      	ldr	r3, [r4, #0]
   34250:	1c5a      	adds	r2, r3, #1
   34252:	6022      	str	r2, [r4, #0]
   34254:	7018      	strb	r0, [r3, #0]
   34256:	e7c8      	b.n	341ea <_puts_r+0x46>
   34258:	0003955c 	.word	0x0003955c
   3425c:	0003957c 	.word	0x0003957c
   34260:	0003953c 	.word	0x0003953c

00034264 <puts>:
   34264:	b510      	push	{r4, lr}
   34266:	4b03      	ldr	r3, [pc, #12]	; (34274 <puts+0x10>)
   34268:	0001      	movs	r1, r0
   3426a:	6818      	ldr	r0, [r3, #0]
   3426c:	f7ff ff9a 	bl	341a4 <_puts_r>
   34270:	bd10      	pop	{r4, pc}
   34272:	46c0      	nop			; (mov r8, r8)
   34274:	20000118 	.word	0x20000118

00034278 <_sbrk_r>:
   34278:	2300      	movs	r3, #0
   3427a:	b570      	push	{r4, r5, r6, lr}
   3427c:	4c06      	ldr	r4, [pc, #24]	; (34298 <_sbrk_r+0x20>)
   3427e:	0005      	movs	r5, r0
   34280:	0008      	movs	r0, r1
   34282:	6023      	str	r3, [r4, #0]
   34284:	f7f6 fc4e 	bl	2ab24 <_sbrk>
   34288:	1c43      	adds	r3, r0, #1
   3428a:	d103      	bne.n	34294 <_sbrk_r+0x1c>
   3428c:	6823      	ldr	r3, [r4, #0]
   3428e:	2b00      	cmp	r3, #0
   34290:	d000      	beq.n	34294 <_sbrk_r+0x1c>
   34292:	602b      	str	r3, [r5, #0]
   34294:	bd70      	pop	{r4, r5, r6, pc}
   34296:	46c0      	nop			; (mov r8, r8)
   34298:	20005b48 	.word	0x20005b48

0003429c <sniprintf>:
   3429c:	b40c      	push	{r2, r3}
   3429e:	b530      	push	{r4, r5, lr}
   342a0:	4b16      	ldr	r3, [pc, #88]	; (342fc <sniprintf+0x60>)
   342a2:	b09d      	sub	sp, #116	; 0x74
   342a4:	1e0c      	subs	r4, r1, #0
   342a6:	681d      	ldr	r5, [r3, #0]
   342a8:	da08      	bge.n	342bc <sniprintf+0x20>
   342aa:	238b      	movs	r3, #139	; 0x8b
   342ac:	2001      	movs	r0, #1
   342ae:	602b      	str	r3, [r5, #0]
   342b0:	4240      	negs	r0, r0
   342b2:	b01d      	add	sp, #116	; 0x74
   342b4:	bc30      	pop	{r4, r5}
   342b6:	bc08      	pop	{r3}
   342b8:	b002      	add	sp, #8
   342ba:	4718      	bx	r3
   342bc:	2382      	movs	r3, #130	; 0x82
   342be:	a902      	add	r1, sp, #8
   342c0:	009b      	lsls	r3, r3, #2
   342c2:	818b      	strh	r3, [r1, #12]
   342c4:	2300      	movs	r3, #0
   342c6:	9002      	str	r0, [sp, #8]
   342c8:	6108      	str	r0, [r1, #16]
   342ca:	429c      	cmp	r4, r3
   342cc:	d000      	beq.n	342d0 <sniprintf+0x34>
   342ce:	1e63      	subs	r3, r4, #1
   342d0:	608b      	str	r3, [r1, #8]
   342d2:	614b      	str	r3, [r1, #20]
   342d4:	2301      	movs	r3, #1
   342d6:	425b      	negs	r3, r3
   342d8:	81cb      	strh	r3, [r1, #14]
   342da:	9a20      	ldr	r2, [sp, #128]	; 0x80
   342dc:	ab21      	add	r3, sp, #132	; 0x84
   342de:	0028      	movs	r0, r5
   342e0:	9301      	str	r3, [sp, #4]
   342e2:	f000 fcff 	bl	34ce4 <_svfiprintf_r>
   342e6:	1c43      	adds	r3, r0, #1
   342e8:	da01      	bge.n	342ee <sniprintf+0x52>
   342ea:	238b      	movs	r3, #139	; 0x8b
   342ec:	602b      	str	r3, [r5, #0]
   342ee:	2c00      	cmp	r4, #0
   342f0:	d0df      	beq.n	342b2 <sniprintf+0x16>
   342f2:	2300      	movs	r3, #0
   342f4:	9a02      	ldr	r2, [sp, #8]
   342f6:	7013      	strb	r3, [r2, #0]
   342f8:	e7db      	b.n	342b2 <sniprintf+0x16>
   342fa:	46c0      	nop			; (mov r8, r8)
   342fc:	20000118 	.word	0x20000118

00034300 <siprintf>:
   34300:	b40e      	push	{r1, r2, r3}
   34302:	b510      	push	{r4, lr}
   34304:	b09d      	sub	sp, #116	; 0x74
   34306:	a902      	add	r1, sp, #8
   34308:	9002      	str	r0, [sp, #8]
   3430a:	6108      	str	r0, [r1, #16]
   3430c:	480b      	ldr	r0, [pc, #44]	; (3433c <siprintf+0x3c>)
   3430e:	2482      	movs	r4, #130	; 0x82
   34310:	6088      	str	r0, [r1, #8]
   34312:	6148      	str	r0, [r1, #20]
   34314:	2001      	movs	r0, #1
   34316:	4240      	negs	r0, r0
   34318:	ab1f      	add	r3, sp, #124	; 0x7c
   3431a:	81c8      	strh	r0, [r1, #14]
   3431c:	4808      	ldr	r0, [pc, #32]	; (34340 <siprintf+0x40>)
   3431e:	cb04      	ldmia	r3!, {r2}
   34320:	00a4      	lsls	r4, r4, #2
   34322:	6800      	ldr	r0, [r0, #0]
   34324:	9301      	str	r3, [sp, #4]
   34326:	818c      	strh	r4, [r1, #12]
   34328:	f000 fcdc 	bl	34ce4 <_svfiprintf_r>
   3432c:	2300      	movs	r3, #0
   3432e:	9a02      	ldr	r2, [sp, #8]
   34330:	7013      	strb	r3, [r2, #0]
   34332:	b01d      	add	sp, #116	; 0x74
   34334:	bc10      	pop	{r4}
   34336:	bc08      	pop	{r3}
   34338:	b003      	add	sp, #12
   3433a:	4718      	bx	r3
   3433c:	7fffffff 	.word	0x7fffffff
   34340:	20000118 	.word	0x20000118

00034344 <strcasecmp>:
   34344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34346:	0007      	movs	r7, r0
   34348:	000e      	movs	r6, r1
   3434a:	783c      	ldrb	r4, [r7, #0]
   3434c:	f000 fbda 	bl	34b04 <__locale_ctype_ptr>
   34350:	2203      	movs	r2, #3
   34352:	1900      	adds	r0, r0, r4
   34354:	7843      	ldrb	r3, [r0, #1]
   34356:	4013      	ands	r3, r2
   34358:	2b01      	cmp	r3, #1
   3435a:	d100      	bne.n	3435e <strcasecmp+0x1a>
   3435c:	3420      	adds	r4, #32
   3435e:	7835      	ldrb	r5, [r6, #0]
   34360:	f000 fbd0 	bl	34b04 <__locale_ctype_ptr>
   34364:	2203      	movs	r2, #3
   34366:	1940      	adds	r0, r0, r5
   34368:	7843      	ldrb	r3, [r0, #1]
   3436a:	4013      	ands	r3, r2
   3436c:	2b01      	cmp	r3, #1
   3436e:	d100      	bne.n	34372 <strcasecmp+0x2e>
   34370:	3520      	adds	r5, #32
   34372:	1b60      	subs	r0, r4, r5
   34374:	d103      	bne.n	3437e <strcasecmp+0x3a>
   34376:	3701      	adds	r7, #1
   34378:	3601      	adds	r6, #1
   3437a:	2d00      	cmp	r5, #0
   3437c:	d1e5      	bne.n	3434a <strcasecmp+0x6>
   3437e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034380 <strcat>:
   34380:	0002      	movs	r2, r0
   34382:	b510      	push	{r4, lr}
   34384:	7813      	ldrb	r3, [r2, #0]
   34386:	2b00      	cmp	r3, #0
   34388:	d105      	bne.n	34396 <strcat+0x16>
   3438a:	5ccc      	ldrb	r4, [r1, r3]
   3438c:	54d4      	strb	r4, [r2, r3]
   3438e:	3301      	adds	r3, #1
   34390:	2c00      	cmp	r4, #0
   34392:	d1fa      	bne.n	3438a <strcat+0xa>
   34394:	bd10      	pop	{r4, pc}
   34396:	3201      	adds	r2, #1
   34398:	e7f4      	b.n	34384 <strcat+0x4>

0003439a <strcmp>:
   3439a:	7802      	ldrb	r2, [r0, #0]
   3439c:	780b      	ldrb	r3, [r1, #0]
   3439e:	2a00      	cmp	r2, #0
   343a0:	d003      	beq.n	343aa <strcmp+0x10>
   343a2:	3001      	adds	r0, #1
   343a4:	3101      	adds	r1, #1
   343a6:	429a      	cmp	r2, r3
   343a8:	d0f7      	beq.n	3439a <strcmp>
   343aa:	1ad0      	subs	r0, r2, r3
   343ac:	4770      	bx	lr

000343ae <strcpy>:
   343ae:	1c03      	adds	r3, r0, #0
   343b0:	780a      	ldrb	r2, [r1, #0]
   343b2:	3101      	adds	r1, #1
   343b4:	701a      	strb	r2, [r3, #0]
   343b6:	3301      	adds	r3, #1
   343b8:	2a00      	cmp	r2, #0
   343ba:	d1f9      	bne.n	343b0 <strcpy+0x2>
   343bc:	4770      	bx	lr
	...

000343c0 <strdup>:
   343c0:	b510      	push	{r4, lr}
   343c2:	4b03      	ldr	r3, [pc, #12]	; (343d0 <strdup+0x10>)
   343c4:	0001      	movs	r1, r0
   343c6:	6818      	ldr	r0, [r3, #0]
   343c8:	f000 f804 	bl	343d4 <_strdup_r>
   343cc:	bd10      	pop	{r4, pc}
   343ce:	46c0      	nop			; (mov r8, r8)
   343d0:	20000118 	.word	0x20000118

000343d4 <_strdup_r>:
   343d4:	b570      	push	{r4, r5, r6, lr}
   343d6:	0005      	movs	r5, r0
   343d8:	0008      	movs	r0, r1
   343da:	000e      	movs	r6, r1
   343dc:	f000 f80d 	bl	343fa <strlen>
   343e0:	1c44      	adds	r4, r0, #1
   343e2:	0021      	movs	r1, r4
   343e4:	0028      	movs	r0, r5
   343e6:	f7ff fe7f 	bl	340e8 <_malloc_r>
   343ea:	1e05      	subs	r5, r0, #0
   343ec:	d003      	beq.n	343f6 <_strdup_r+0x22>
   343ee:	0022      	movs	r2, r4
   343f0:	0031      	movs	r1, r6
   343f2:	f7ff fe0b 	bl	3400c <memcpy>
   343f6:	0028      	movs	r0, r5
   343f8:	bd70      	pop	{r4, r5, r6, pc}

000343fa <strlen>:
   343fa:	2300      	movs	r3, #0
   343fc:	5cc2      	ldrb	r2, [r0, r3]
   343fe:	3301      	adds	r3, #1
   34400:	2a00      	cmp	r2, #0
   34402:	d1fb      	bne.n	343fc <strlen+0x2>
   34404:	1e58      	subs	r0, r3, #1
   34406:	4770      	bx	lr

00034408 <strncmp>:
   34408:	2300      	movs	r3, #0
   3440a:	b530      	push	{r4, r5, lr}
   3440c:	429a      	cmp	r2, r3
   3440e:	d00a      	beq.n	34426 <strncmp+0x1e>
   34410:	3a01      	subs	r2, #1
   34412:	5cc4      	ldrb	r4, [r0, r3]
   34414:	5ccd      	ldrb	r5, [r1, r3]
   34416:	42ac      	cmp	r4, r5
   34418:	d104      	bne.n	34424 <strncmp+0x1c>
   3441a:	429a      	cmp	r2, r3
   3441c:	d002      	beq.n	34424 <strncmp+0x1c>
   3441e:	3301      	adds	r3, #1
   34420:	2c00      	cmp	r4, #0
   34422:	d1f6      	bne.n	34412 <strncmp+0xa>
   34424:	1b63      	subs	r3, r4, r5
   34426:	0018      	movs	r0, r3
   34428:	bd30      	pop	{r4, r5, pc}

0003442a <strncpy>:
   3442a:	b570      	push	{r4, r5, r6, lr}
   3442c:	0004      	movs	r4, r0
   3442e:	2a00      	cmp	r2, #0
   34430:	d100      	bne.n	34434 <strncpy+0xa>
   34432:	bd70      	pop	{r4, r5, r6, pc}
   34434:	780d      	ldrb	r5, [r1, #0]
   34436:	1e56      	subs	r6, r2, #1
   34438:	1c63      	adds	r3, r4, #1
   3443a:	7025      	strb	r5, [r4, #0]
   3443c:	3101      	adds	r1, #1
   3443e:	2d00      	cmp	r5, #0
   34440:	d105      	bne.n	3444e <strncpy+0x24>
   34442:	18a4      	adds	r4, r4, r2
   34444:	429c      	cmp	r4, r3
   34446:	d0f4      	beq.n	34432 <strncpy+0x8>
   34448:	701d      	strb	r5, [r3, #0]
   3444a:	3301      	adds	r3, #1
   3444c:	e7fa      	b.n	34444 <strncpy+0x1a>
   3444e:	001c      	movs	r4, r3
   34450:	0032      	movs	r2, r6
   34452:	e7ec      	b.n	3442e <strncpy+0x4>

00034454 <strrchr>:
   34454:	b570      	push	{r4, r5, r6, lr}
   34456:	000d      	movs	r5, r1
   34458:	2400      	movs	r4, #0
   3445a:	2900      	cmp	r1, #0
   3445c:	d105      	bne.n	3446a <strrchr+0x16>
   3445e:	f000 ff19 	bl	35294 <strchr>
   34462:	0004      	movs	r4, r0
   34464:	e006      	b.n	34474 <strrchr+0x20>
   34466:	001c      	movs	r4, r3
   34468:	1c58      	adds	r0, r3, #1
   3446a:	0029      	movs	r1, r5
   3446c:	f000 ff12 	bl	35294 <strchr>
   34470:	1e03      	subs	r3, r0, #0
   34472:	d1f8      	bne.n	34466 <strrchr+0x12>
   34474:	0020      	movs	r0, r4
   34476:	bd70      	pop	{r4, r5, r6, pc}

00034478 <strstr>:
   34478:	b510      	push	{r4, lr}
   3447a:	0002      	movs	r2, r0
   3447c:	7800      	ldrb	r0, [r0, #0]
   3447e:	2800      	cmp	r0, #0
   34480:	d104      	bne.n	3448c <strstr+0x14>
   34482:	7809      	ldrb	r1, [r1, #0]
   34484:	2900      	cmp	r1, #0
   34486:	d00d      	beq.n	344a4 <strstr+0x2c>
   34488:	bd10      	pop	{r4, pc}
   3448a:	3201      	adds	r2, #1
   3448c:	7810      	ldrb	r0, [r2, #0]
   3448e:	2800      	cmp	r0, #0
   34490:	d0fa      	beq.n	34488 <strstr+0x10>
   34492:	2300      	movs	r3, #0
   34494:	5cc8      	ldrb	r0, [r1, r3]
   34496:	2800      	cmp	r0, #0
   34498:	d004      	beq.n	344a4 <strstr+0x2c>
   3449a:	5cd4      	ldrb	r4, [r2, r3]
   3449c:	4284      	cmp	r4, r0
   3449e:	d1f4      	bne.n	3448a <strstr+0x12>
   344a0:	3301      	adds	r3, #1
   344a2:	e7f7      	b.n	34494 <strstr+0x1c>
   344a4:	0010      	movs	r0, r2
   344a6:	e7ef      	b.n	34488 <strstr+0x10>

000344a8 <_strtol_l.isra.0>:
   344a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   344aa:	001f      	movs	r7, r3
   344ac:	000e      	movs	r6, r1
   344ae:	b087      	sub	sp, #28
   344b0:	9005      	str	r0, [sp, #20]
   344b2:	9103      	str	r1, [sp, #12]
   344b4:	9202      	str	r2, [sp, #8]
   344b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   344b8:	7834      	ldrb	r4, [r6, #0]
   344ba:	f000 fb20 	bl	34afe <__locale_ctype_ptr_l>
   344be:	2208      	movs	r2, #8
   344c0:	1900      	adds	r0, r0, r4
   344c2:	7843      	ldrb	r3, [r0, #1]
   344c4:	1c75      	adds	r5, r6, #1
   344c6:	4013      	ands	r3, r2
   344c8:	d10c      	bne.n	344e4 <_strtol_l.isra.0+0x3c>
   344ca:	2c2d      	cmp	r4, #45	; 0x2d
   344cc:	d10c      	bne.n	344e8 <_strtol_l.isra.0+0x40>
   344ce:	3301      	adds	r3, #1
   344d0:	782c      	ldrb	r4, [r5, #0]
   344d2:	9301      	str	r3, [sp, #4]
   344d4:	1cb5      	adds	r5, r6, #2
   344d6:	2f00      	cmp	r7, #0
   344d8:	d00c      	beq.n	344f4 <_strtol_l.isra.0+0x4c>
   344da:	2f10      	cmp	r7, #16
   344dc:	d114      	bne.n	34508 <_strtol_l.isra.0+0x60>
   344de:	2c30      	cmp	r4, #48	; 0x30
   344e0:	d00a      	beq.n	344f8 <_strtol_l.isra.0+0x50>
   344e2:	e011      	b.n	34508 <_strtol_l.isra.0+0x60>
   344e4:	002e      	movs	r6, r5
   344e6:	e7e6      	b.n	344b6 <_strtol_l.isra.0+0xe>
   344e8:	9301      	str	r3, [sp, #4]
   344ea:	2c2b      	cmp	r4, #43	; 0x2b
   344ec:	d1f3      	bne.n	344d6 <_strtol_l.isra.0+0x2e>
   344ee:	782c      	ldrb	r4, [r5, #0]
   344f0:	1cb5      	adds	r5, r6, #2
   344f2:	e7f0      	b.n	344d6 <_strtol_l.isra.0+0x2e>
   344f4:	2c30      	cmp	r4, #48	; 0x30
   344f6:	d12f      	bne.n	34558 <_strtol_l.isra.0+0xb0>
   344f8:	2220      	movs	r2, #32
   344fa:	782b      	ldrb	r3, [r5, #0]
   344fc:	4393      	bics	r3, r2
   344fe:	2b58      	cmp	r3, #88	; 0x58
   34500:	d151      	bne.n	345a6 <_strtol_l.isra.0+0xfe>
   34502:	2710      	movs	r7, #16
   34504:	786c      	ldrb	r4, [r5, #1]
   34506:	3502      	adds	r5, #2
   34508:	9b01      	ldr	r3, [sp, #4]
   3450a:	4a29      	ldr	r2, [pc, #164]	; (345b0 <_strtol_l.isra.0+0x108>)
   3450c:	0039      	movs	r1, r7
   3450e:	189e      	adds	r6, r3, r2
   34510:	0030      	movs	r0, r6
   34512:	f7fd ffbf 	bl	32494 <__aeabi_uidivmod>
   34516:	0030      	movs	r0, r6
   34518:	9104      	str	r1, [sp, #16]
   3451a:	0039      	movs	r1, r7
   3451c:	f7fd ff34 	bl	32388 <__udivsi3>
   34520:	2101      	movs	r1, #1
   34522:	2300      	movs	r3, #0
   34524:	4249      	negs	r1, r1
   34526:	0002      	movs	r2, r0
   34528:	468c      	mov	ip, r1
   3452a:	0018      	movs	r0, r3
   3452c:	0021      	movs	r1, r4
   3452e:	3930      	subs	r1, #48	; 0x30
   34530:	2909      	cmp	r1, #9
   34532:	d813      	bhi.n	3455c <_strtol_l.isra.0+0xb4>
   34534:	000c      	movs	r4, r1
   34536:	42a7      	cmp	r7, r4
   34538:	dd1c      	ble.n	34574 <_strtol_l.isra.0+0xcc>
   3453a:	1c59      	adds	r1, r3, #1
   3453c:	d009      	beq.n	34552 <_strtol_l.isra.0+0xaa>
   3453e:	4663      	mov	r3, ip
   34540:	4282      	cmp	r2, r0
   34542:	d306      	bcc.n	34552 <_strtol_l.isra.0+0xaa>
   34544:	d102      	bne.n	3454c <_strtol_l.isra.0+0xa4>
   34546:	9904      	ldr	r1, [sp, #16]
   34548:	42a1      	cmp	r1, r4
   3454a:	db02      	blt.n	34552 <_strtol_l.isra.0+0xaa>
   3454c:	2301      	movs	r3, #1
   3454e:	4378      	muls	r0, r7
   34550:	1820      	adds	r0, r4, r0
   34552:	782c      	ldrb	r4, [r5, #0]
   34554:	3501      	adds	r5, #1
   34556:	e7e9      	b.n	3452c <_strtol_l.isra.0+0x84>
   34558:	270a      	movs	r7, #10
   3455a:	e7d5      	b.n	34508 <_strtol_l.isra.0+0x60>
   3455c:	0021      	movs	r1, r4
   3455e:	3941      	subs	r1, #65	; 0x41
   34560:	2919      	cmp	r1, #25
   34562:	d801      	bhi.n	34568 <_strtol_l.isra.0+0xc0>
   34564:	3c37      	subs	r4, #55	; 0x37
   34566:	e7e6      	b.n	34536 <_strtol_l.isra.0+0x8e>
   34568:	0021      	movs	r1, r4
   3456a:	3961      	subs	r1, #97	; 0x61
   3456c:	2919      	cmp	r1, #25
   3456e:	d801      	bhi.n	34574 <_strtol_l.isra.0+0xcc>
   34570:	3c57      	subs	r4, #87	; 0x57
   34572:	e7e0      	b.n	34536 <_strtol_l.isra.0+0x8e>
   34574:	1c5a      	adds	r2, r3, #1
   34576:	d108      	bne.n	3458a <_strtol_l.isra.0+0xe2>
   34578:	9a05      	ldr	r2, [sp, #20]
   3457a:	3323      	adds	r3, #35	; 0x23
   3457c:	6013      	str	r3, [r2, #0]
   3457e:	9b02      	ldr	r3, [sp, #8]
   34580:	0030      	movs	r0, r6
   34582:	2b00      	cmp	r3, #0
   34584:	d10b      	bne.n	3459e <_strtol_l.isra.0+0xf6>
   34586:	b007      	add	sp, #28
   34588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3458a:	9a01      	ldr	r2, [sp, #4]
   3458c:	2a00      	cmp	r2, #0
   3458e:	d000      	beq.n	34592 <_strtol_l.isra.0+0xea>
   34590:	4240      	negs	r0, r0
   34592:	9a02      	ldr	r2, [sp, #8]
   34594:	2a00      	cmp	r2, #0
   34596:	d0f6      	beq.n	34586 <_strtol_l.isra.0+0xde>
   34598:	9a03      	ldr	r2, [sp, #12]
   3459a:	2b00      	cmp	r3, #0
   3459c:	d000      	beq.n	345a0 <_strtol_l.isra.0+0xf8>
   3459e:	1e6a      	subs	r2, r5, #1
   345a0:	9b02      	ldr	r3, [sp, #8]
   345a2:	601a      	str	r2, [r3, #0]
   345a4:	e7ef      	b.n	34586 <_strtol_l.isra.0+0xde>
   345a6:	2430      	movs	r4, #48	; 0x30
   345a8:	2f00      	cmp	r7, #0
   345aa:	d1ad      	bne.n	34508 <_strtol_l.isra.0+0x60>
   345ac:	3708      	adds	r7, #8
   345ae:	e7ab      	b.n	34508 <_strtol_l.isra.0+0x60>
   345b0:	7fffffff 	.word	0x7fffffff

000345b4 <strtol>:
   345b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   345b6:	0013      	movs	r3, r2
   345b8:	4a06      	ldr	r2, [pc, #24]	; (345d4 <strtol+0x20>)
   345ba:	0005      	movs	r5, r0
   345bc:	6810      	ldr	r0, [r2, #0]
   345be:	6a04      	ldr	r4, [r0, #32]
   345c0:	2c00      	cmp	r4, #0
   345c2:	d100      	bne.n	345c6 <strtol+0x12>
   345c4:	4c04      	ldr	r4, [pc, #16]	; (345d8 <strtol+0x24>)
   345c6:	000a      	movs	r2, r1
   345c8:	9400      	str	r4, [sp, #0]
   345ca:	0029      	movs	r1, r5
   345cc:	f7ff ff6c 	bl	344a8 <_strtol_l.isra.0>
   345d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   345d2:	46c0      	nop			; (mov r8, r8)
   345d4:	20000118 	.word	0x20000118
   345d8:	2000017c 	.word	0x2000017c

000345dc <_vsniprintf_r>:
   345dc:	b530      	push	{r4, r5, lr}
   345de:	0014      	movs	r4, r2
   345e0:	b09b      	sub	sp, #108	; 0x6c
   345e2:	0005      	movs	r5, r0
   345e4:	001a      	movs	r2, r3
   345e6:	2c00      	cmp	r4, #0
   345e8:	da05      	bge.n	345f6 <_vsniprintf_r+0x1a>
   345ea:	238b      	movs	r3, #139	; 0x8b
   345ec:	6003      	str	r3, [r0, #0]
   345ee:	2001      	movs	r0, #1
   345f0:	4240      	negs	r0, r0
   345f2:	b01b      	add	sp, #108	; 0x6c
   345f4:	bd30      	pop	{r4, r5, pc}
   345f6:	2382      	movs	r3, #130	; 0x82
   345f8:	4668      	mov	r0, sp
   345fa:	009b      	lsls	r3, r3, #2
   345fc:	8183      	strh	r3, [r0, #12]
   345fe:	2300      	movs	r3, #0
   34600:	9100      	str	r1, [sp, #0]
   34602:	9104      	str	r1, [sp, #16]
   34604:	429c      	cmp	r4, r3
   34606:	d000      	beq.n	3460a <_vsniprintf_r+0x2e>
   34608:	1e63      	subs	r3, r4, #1
   3460a:	9302      	str	r3, [sp, #8]
   3460c:	9305      	str	r3, [sp, #20]
   3460e:	2301      	movs	r3, #1
   34610:	4669      	mov	r1, sp
   34612:	425b      	negs	r3, r3
   34614:	81cb      	strh	r3, [r1, #14]
   34616:	0028      	movs	r0, r5
   34618:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3461a:	f000 fb63 	bl	34ce4 <_svfiprintf_r>
   3461e:	1c43      	adds	r3, r0, #1
   34620:	da01      	bge.n	34626 <_vsniprintf_r+0x4a>
   34622:	238b      	movs	r3, #139	; 0x8b
   34624:	602b      	str	r3, [r5, #0]
   34626:	2c00      	cmp	r4, #0
   34628:	d0e3      	beq.n	345f2 <_vsniprintf_r+0x16>
   3462a:	2300      	movs	r3, #0
   3462c:	9a00      	ldr	r2, [sp, #0]
   3462e:	7013      	strb	r3, [r2, #0]
   34630:	e7df      	b.n	345f2 <_vsniprintf_r+0x16>
	...

00034634 <vsniprintf>:
   34634:	b507      	push	{r0, r1, r2, lr}
   34636:	9300      	str	r3, [sp, #0]
   34638:	0013      	movs	r3, r2
   3463a:	000a      	movs	r2, r1
   3463c:	0001      	movs	r1, r0
   3463e:	4802      	ldr	r0, [pc, #8]	; (34648 <vsniprintf+0x14>)
   34640:	6800      	ldr	r0, [r0, #0]
   34642:	f7ff ffcb 	bl	345dc <_vsniprintf_r>
   34646:	bd0e      	pop	{r1, r2, r3, pc}
   34648:	20000118 	.word	0x20000118

0003464c <__swbuf_r>:
   3464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3464e:	0005      	movs	r5, r0
   34650:	000e      	movs	r6, r1
   34652:	0014      	movs	r4, r2
   34654:	2800      	cmp	r0, #0
   34656:	d004      	beq.n	34662 <__swbuf_r+0x16>
   34658:	6983      	ldr	r3, [r0, #24]
   3465a:	2b00      	cmp	r3, #0
   3465c:	d101      	bne.n	34662 <__swbuf_r+0x16>
   3465e:	f000 f9b9 	bl	349d4 <__sinit>
   34662:	4b22      	ldr	r3, [pc, #136]	; (346ec <__swbuf_r+0xa0>)
   34664:	429c      	cmp	r4, r3
   34666:	d12d      	bne.n	346c4 <__swbuf_r+0x78>
   34668:	686c      	ldr	r4, [r5, #4]
   3466a:	69a3      	ldr	r3, [r4, #24]
   3466c:	60a3      	str	r3, [r4, #8]
   3466e:	89a3      	ldrh	r3, [r4, #12]
   34670:	071b      	lsls	r3, r3, #28
   34672:	d531      	bpl.n	346d8 <__swbuf_r+0x8c>
   34674:	6923      	ldr	r3, [r4, #16]
   34676:	2b00      	cmp	r3, #0
   34678:	d02e      	beq.n	346d8 <__swbuf_r+0x8c>
   3467a:	6823      	ldr	r3, [r4, #0]
   3467c:	6922      	ldr	r2, [r4, #16]
   3467e:	b2f7      	uxtb	r7, r6
   34680:	1a98      	subs	r0, r3, r2
   34682:	6963      	ldr	r3, [r4, #20]
   34684:	b2f6      	uxtb	r6, r6
   34686:	4298      	cmp	r0, r3
   34688:	db05      	blt.n	34696 <__swbuf_r+0x4a>
   3468a:	0021      	movs	r1, r4
   3468c:	0028      	movs	r0, r5
   3468e:	f000 f933 	bl	348f8 <_fflush_r>
   34692:	2800      	cmp	r0, #0
   34694:	d126      	bne.n	346e4 <__swbuf_r+0x98>
   34696:	68a3      	ldr	r3, [r4, #8]
   34698:	3001      	adds	r0, #1
   3469a:	3b01      	subs	r3, #1
   3469c:	60a3      	str	r3, [r4, #8]
   3469e:	6823      	ldr	r3, [r4, #0]
   346a0:	1c5a      	adds	r2, r3, #1
   346a2:	6022      	str	r2, [r4, #0]
   346a4:	701f      	strb	r7, [r3, #0]
   346a6:	6963      	ldr	r3, [r4, #20]
   346a8:	4298      	cmp	r0, r3
   346aa:	d004      	beq.n	346b6 <__swbuf_r+0x6a>
   346ac:	89a3      	ldrh	r3, [r4, #12]
   346ae:	07db      	lsls	r3, r3, #31
   346b0:	d51a      	bpl.n	346e8 <__swbuf_r+0x9c>
   346b2:	2e0a      	cmp	r6, #10
   346b4:	d118      	bne.n	346e8 <__swbuf_r+0x9c>
   346b6:	0021      	movs	r1, r4
   346b8:	0028      	movs	r0, r5
   346ba:	f000 f91d 	bl	348f8 <_fflush_r>
   346be:	2800      	cmp	r0, #0
   346c0:	d012      	beq.n	346e8 <__swbuf_r+0x9c>
   346c2:	e00f      	b.n	346e4 <__swbuf_r+0x98>
   346c4:	4b0a      	ldr	r3, [pc, #40]	; (346f0 <__swbuf_r+0xa4>)
   346c6:	429c      	cmp	r4, r3
   346c8:	d101      	bne.n	346ce <__swbuf_r+0x82>
   346ca:	68ac      	ldr	r4, [r5, #8]
   346cc:	e7cd      	b.n	3466a <__swbuf_r+0x1e>
   346ce:	4b09      	ldr	r3, [pc, #36]	; (346f4 <__swbuf_r+0xa8>)
   346d0:	429c      	cmp	r4, r3
   346d2:	d1ca      	bne.n	3466a <__swbuf_r+0x1e>
   346d4:	68ec      	ldr	r4, [r5, #12]
   346d6:	e7c8      	b.n	3466a <__swbuf_r+0x1e>
   346d8:	0021      	movs	r1, r4
   346da:	0028      	movs	r0, r5
   346dc:	f000 f80c 	bl	346f8 <__swsetup_r>
   346e0:	2800      	cmp	r0, #0
   346e2:	d0ca      	beq.n	3467a <__swbuf_r+0x2e>
   346e4:	2601      	movs	r6, #1
   346e6:	4276      	negs	r6, r6
   346e8:	0030      	movs	r0, r6
   346ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   346ec:	0003955c 	.word	0x0003955c
   346f0:	0003957c 	.word	0x0003957c
   346f4:	0003953c 	.word	0x0003953c

000346f8 <__swsetup_r>:
   346f8:	4b36      	ldr	r3, [pc, #216]	; (347d4 <__swsetup_r+0xdc>)
   346fa:	b570      	push	{r4, r5, r6, lr}
   346fc:	681d      	ldr	r5, [r3, #0]
   346fe:	0006      	movs	r6, r0
   34700:	000c      	movs	r4, r1
   34702:	2d00      	cmp	r5, #0
   34704:	d005      	beq.n	34712 <__swsetup_r+0x1a>
   34706:	69ab      	ldr	r3, [r5, #24]
   34708:	2b00      	cmp	r3, #0
   3470a:	d102      	bne.n	34712 <__swsetup_r+0x1a>
   3470c:	0028      	movs	r0, r5
   3470e:	f000 f961 	bl	349d4 <__sinit>
   34712:	4b31      	ldr	r3, [pc, #196]	; (347d8 <__swsetup_r+0xe0>)
   34714:	429c      	cmp	r4, r3
   34716:	d10f      	bne.n	34738 <__swsetup_r+0x40>
   34718:	686c      	ldr	r4, [r5, #4]
   3471a:	230c      	movs	r3, #12
   3471c:	5ee2      	ldrsh	r2, [r4, r3]
   3471e:	b293      	uxth	r3, r2
   34720:	0719      	lsls	r1, r3, #28
   34722:	d42d      	bmi.n	34780 <__swsetup_r+0x88>
   34724:	06d9      	lsls	r1, r3, #27
   34726:	d411      	bmi.n	3474c <__swsetup_r+0x54>
   34728:	2309      	movs	r3, #9
   3472a:	2001      	movs	r0, #1
   3472c:	6033      	str	r3, [r6, #0]
   3472e:	3337      	adds	r3, #55	; 0x37
   34730:	4313      	orrs	r3, r2
   34732:	81a3      	strh	r3, [r4, #12]
   34734:	4240      	negs	r0, r0
   34736:	bd70      	pop	{r4, r5, r6, pc}
   34738:	4b28      	ldr	r3, [pc, #160]	; (347dc <__swsetup_r+0xe4>)
   3473a:	429c      	cmp	r4, r3
   3473c:	d101      	bne.n	34742 <__swsetup_r+0x4a>
   3473e:	68ac      	ldr	r4, [r5, #8]
   34740:	e7eb      	b.n	3471a <__swsetup_r+0x22>
   34742:	4b27      	ldr	r3, [pc, #156]	; (347e0 <__swsetup_r+0xe8>)
   34744:	429c      	cmp	r4, r3
   34746:	d1e8      	bne.n	3471a <__swsetup_r+0x22>
   34748:	68ec      	ldr	r4, [r5, #12]
   3474a:	e7e6      	b.n	3471a <__swsetup_r+0x22>
   3474c:	075b      	lsls	r3, r3, #29
   3474e:	d513      	bpl.n	34778 <__swsetup_r+0x80>
   34750:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34752:	2900      	cmp	r1, #0
   34754:	d008      	beq.n	34768 <__swsetup_r+0x70>
   34756:	0023      	movs	r3, r4
   34758:	3344      	adds	r3, #68	; 0x44
   3475a:	4299      	cmp	r1, r3
   3475c:	d002      	beq.n	34764 <__swsetup_r+0x6c>
   3475e:	0030      	movs	r0, r6
   34760:	f7ff fc78 	bl	34054 <_free_r>
   34764:	2300      	movs	r3, #0
   34766:	6363      	str	r3, [r4, #52]	; 0x34
   34768:	2224      	movs	r2, #36	; 0x24
   3476a:	89a3      	ldrh	r3, [r4, #12]
   3476c:	4393      	bics	r3, r2
   3476e:	81a3      	strh	r3, [r4, #12]
   34770:	2300      	movs	r3, #0
   34772:	6063      	str	r3, [r4, #4]
   34774:	6923      	ldr	r3, [r4, #16]
   34776:	6023      	str	r3, [r4, #0]
   34778:	2308      	movs	r3, #8
   3477a:	89a2      	ldrh	r2, [r4, #12]
   3477c:	4313      	orrs	r3, r2
   3477e:	81a3      	strh	r3, [r4, #12]
   34780:	6923      	ldr	r3, [r4, #16]
   34782:	2b00      	cmp	r3, #0
   34784:	d10b      	bne.n	3479e <__swsetup_r+0xa6>
   34786:	21a0      	movs	r1, #160	; 0xa0
   34788:	2280      	movs	r2, #128	; 0x80
   3478a:	89a3      	ldrh	r3, [r4, #12]
   3478c:	0089      	lsls	r1, r1, #2
   3478e:	0092      	lsls	r2, r2, #2
   34790:	400b      	ands	r3, r1
   34792:	4293      	cmp	r3, r2
   34794:	d003      	beq.n	3479e <__swsetup_r+0xa6>
   34796:	0021      	movs	r1, r4
   34798:	0030      	movs	r0, r6
   3479a:	f000 f9e9 	bl	34b70 <__smakebuf_r>
   3479e:	2301      	movs	r3, #1
   347a0:	89a2      	ldrh	r2, [r4, #12]
   347a2:	4013      	ands	r3, r2
   347a4:	d011      	beq.n	347ca <__swsetup_r+0xd2>
   347a6:	2300      	movs	r3, #0
   347a8:	60a3      	str	r3, [r4, #8]
   347aa:	6963      	ldr	r3, [r4, #20]
   347ac:	425b      	negs	r3, r3
   347ae:	61a3      	str	r3, [r4, #24]
   347b0:	2000      	movs	r0, #0
   347b2:	6923      	ldr	r3, [r4, #16]
   347b4:	4283      	cmp	r3, r0
   347b6:	d1be      	bne.n	34736 <__swsetup_r+0x3e>
   347b8:	230c      	movs	r3, #12
   347ba:	5ee2      	ldrsh	r2, [r4, r3]
   347bc:	0613      	lsls	r3, r2, #24
   347be:	d5ba      	bpl.n	34736 <__swsetup_r+0x3e>
   347c0:	2340      	movs	r3, #64	; 0x40
   347c2:	4313      	orrs	r3, r2
   347c4:	81a3      	strh	r3, [r4, #12]
   347c6:	3801      	subs	r0, #1
   347c8:	e7b5      	b.n	34736 <__swsetup_r+0x3e>
   347ca:	0792      	lsls	r2, r2, #30
   347cc:	d400      	bmi.n	347d0 <__swsetup_r+0xd8>
   347ce:	6963      	ldr	r3, [r4, #20]
   347d0:	60a3      	str	r3, [r4, #8]
   347d2:	e7ed      	b.n	347b0 <__swsetup_r+0xb8>
   347d4:	20000118 	.word	0x20000118
   347d8:	0003955c 	.word	0x0003955c
   347dc:	0003957c 	.word	0x0003957c
   347e0:	0003953c 	.word	0x0003953c

000347e4 <__sflush_r>:
   347e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   347e6:	898a      	ldrh	r2, [r1, #12]
   347e8:	0005      	movs	r5, r0
   347ea:	000c      	movs	r4, r1
   347ec:	0713      	lsls	r3, r2, #28
   347ee:	d460      	bmi.n	348b2 <__sflush_r+0xce>
   347f0:	684b      	ldr	r3, [r1, #4]
   347f2:	2b00      	cmp	r3, #0
   347f4:	dc04      	bgt.n	34800 <__sflush_r+0x1c>
   347f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   347f8:	2b00      	cmp	r3, #0
   347fa:	dc01      	bgt.n	34800 <__sflush_r+0x1c>
   347fc:	2000      	movs	r0, #0
   347fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34800:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34802:	2f00      	cmp	r7, #0
   34804:	d0fa      	beq.n	347fc <__sflush_r+0x18>
   34806:	2300      	movs	r3, #0
   34808:	682e      	ldr	r6, [r5, #0]
   3480a:	602b      	str	r3, [r5, #0]
   3480c:	2380      	movs	r3, #128	; 0x80
   3480e:	015b      	lsls	r3, r3, #5
   34810:	401a      	ands	r2, r3
   34812:	d034      	beq.n	3487e <__sflush_r+0x9a>
   34814:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34816:	89a3      	ldrh	r3, [r4, #12]
   34818:	075b      	lsls	r3, r3, #29
   3481a:	d506      	bpl.n	3482a <__sflush_r+0x46>
   3481c:	6863      	ldr	r3, [r4, #4]
   3481e:	1ac0      	subs	r0, r0, r3
   34820:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34822:	2b00      	cmp	r3, #0
   34824:	d001      	beq.n	3482a <__sflush_r+0x46>
   34826:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34828:	1ac0      	subs	r0, r0, r3
   3482a:	0002      	movs	r2, r0
   3482c:	6a21      	ldr	r1, [r4, #32]
   3482e:	2300      	movs	r3, #0
   34830:	0028      	movs	r0, r5
   34832:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34834:	47b8      	blx	r7
   34836:	89a1      	ldrh	r1, [r4, #12]
   34838:	1c43      	adds	r3, r0, #1
   3483a:	d106      	bne.n	3484a <__sflush_r+0x66>
   3483c:	682b      	ldr	r3, [r5, #0]
   3483e:	2b1d      	cmp	r3, #29
   34840:	d831      	bhi.n	348a6 <__sflush_r+0xc2>
   34842:	4a2c      	ldr	r2, [pc, #176]	; (348f4 <__sflush_r+0x110>)
   34844:	40da      	lsrs	r2, r3
   34846:	07d3      	lsls	r3, r2, #31
   34848:	d52d      	bpl.n	348a6 <__sflush_r+0xc2>
   3484a:	2300      	movs	r3, #0
   3484c:	6063      	str	r3, [r4, #4]
   3484e:	6923      	ldr	r3, [r4, #16]
   34850:	6023      	str	r3, [r4, #0]
   34852:	04cb      	lsls	r3, r1, #19
   34854:	d505      	bpl.n	34862 <__sflush_r+0x7e>
   34856:	1c43      	adds	r3, r0, #1
   34858:	d102      	bne.n	34860 <__sflush_r+0x7c>
   3485a:	682b      	ldr	r3, [r5, #0]
   3485c:	2b00      	cmp	r3, #0
   3485e:	d100      	bne.n	34862 <__sflush_r+0x7e>
   34860:	6560      	str	r0, [r4, #84]	; 0x54
   34862:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34864:	602e      	str	r6, [r5, #0]
   34866:	2900      	cmp	r1, #0
   34868:	d0c8      	beq.n	347fc <__sflush_r+0x18>
   3486a:	0023      	movs	r3, r4
   3486c:	3344      	adds	r3, #68	; 0x44
   3486e:	4299      	cmp	r1, r3
   34870:	d002      	beq.n	34878 <__sflush_r+0x94>
   34872:	0028      	movs	r0, r5
   34874:	f7ff fbee 	bl	34054 <_free_r>
   34878:	2000      	movs	r0, #0
   3487a:	6360      	str	r0, [r4, #52]	; 0x34
   3487c:	e7bf      	b.n	347fe <__sflush_r+0x1a>
   3487e:	2301      	movs	r3, #1
   34880:	6a21      	ldr	r1, [r4, #32]
   34882:	0028      	movs	r0, r5
   34884:	47b8      	blx	r7
   34886:	1c43      	adds	r3, r0, #1
   34888:	d1c5      	bne.n	34816 <__sflush_r+0x32>
   3488a:	682b      	ldr	r3, [r5, #0]
   3488c:	2b00      	cmp	r3, #0
   3488e:	d0c2      	beq.n	34816 <__sflush_r+0x32>
   34890:	2b1d      	cmp	r3, #29
   34892:	d001      	beq.n	34898 <__sflush_r+0xb4>
   34894:	2b16      	cmp	r3, #22
   34896:	d101      	bne.n	3489c <__sflush_r+0xb8>
   34898:	602e      	str	r6, [r5, #0]
   3489a:	e7af      	b.n	347fc <__sflush_r+0x18>
   3489c:	2340      	movs	r3, #64	; 0x40
   3489e:	89a2      	ldrh	r2, [r4, #12]
   348a0:	4313      	orrs	r3, r2
   348a2:	81a3      	strh	r3, [r4, #12]
   348a4:	e7ab      	b.n	347fe <__sflush_r+0x1a>
   348a6:	2340      	movs	r3, #64	; 0x40
   348a8:	430b      	orrs	r3, r1
   348aa:	2001      	movs	r0, #1
   348ac:	81a3      	strh	r3, [r4, #12]
   348ae:	4240      	negs	r0, r0
   348b0:	e7a5      	b.n	347fe <__sflush_r+0x1a>
   348b2:	690f      	ldr	r7, [r1, #16]
   348b4:	2f00      	cmp	r7, #0
   348b6:	d0a1      	beq.n	347fc <__sflush_r+0x18>
   348b8:	680b      	ldr	r3, [r1, #0]
   348ba:	600f      	str	r7, [r1, #0]
   348bc:	1bdb      	subs	r3, r3, r7
   348be:	9301      	str	r3, [sp, #4]
   348c0:	2300      	movs	r3, #0
   348c2:	0792      	lsls	r2, r2, #30
   348c4:	d100      	bne.n	348c8 <__sflush_r+0xe4>
   348c6:	694b      	ldr	r3, [r1, #20]
   348c8:	60a3      	str	r3, [r4, #8]
   348ca:	9b01      	ldr	r3, [sp, #4]
   348cc:	2b00      	cmp	r3, #0
   348ce:	dc00      	bgt.n	348d2 <__sflush_r+0xee>
   348d0:	e794      	b.n	347fc <__sflush_r+0x18>
   348d2:	9b01      	ldr	r3, [sp, #4]
   348d4:	003a      	movs	r2, r7
   348d6:	6a21      	ldr	r1, [r4, #32]
   348d8:	0028      	movs	r0, r5
   348da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   348dc:	47b0      	blx	r6
   348de:	2800      	cmp	r0, #0
   348e0:	dc03      	bgt.n	348ea <__sflush_r+0x106>
   348e2:	2340      	movs	r3, #64	; 0x40
   348e4:	89a2      	ldrh	r2, [r4, #12]
   348e6:	4313      	orrs	r3, r2
   348e8:	e7df      	b.n	348aa <__sflush_r+0xc6>
   348ea:	9b01      	ldr	r3, [sp, #4]
   348ec:	183f      	adds	r7, r7, r0
   348ee:	1a1b      	subs	r3, r3, r0
   348f0:	9301      	str	r3, [sp, #4]
   348f2:	e7ea      	b.n	348ca <__sflush_r+0xe6>
   348f4:	20400001 	.word	0x20400001

000348f8 <_fflush_r>:
   348f8:	690b      	ldr	r3, [r1, #16]
   348fa:	b570      	push	{r4, r5, r6, lr}
   348fc:	0005      	movs	r5, r0
   348fe:	000c      	movs	r4, r1
   34900:	2b00      	cmp	r3, #0
   34902:	d101      	bne.n	34908 <_fflush_r+0x10>
   34904:	2000      	movs	r0, #0
   34906:	bd70      	pop	{r4, r5, r6, pc}
   34908:	2800      	cmp	r0, #0
   3490a:	d004      	beq.n	34916 <_fflush_r+0x1e>
   3490c:	6983      	ldr	r3, [r0, #24]
   3490e:	2b00      	cmp	r3, #0
   34910:	d101      	bne.n	34916 <_fflush_r+0x1e>
   34912:	f000 f85f 	bl	349d4 <__sinit>
   34916:	4b0b      	ldr	r3, [pc, #44]	; (34944 <_fflush_r+0x4c>)
   34918:	429c      	cmp	r4, r3
   3491a:	d109      	bne.n	34930 <_fflush_r+0x38>
   3491c:	686c      	ldr	r4, [r5, #4]
   3491e:	220c      	movs	r2, #12
   34920:	5ea3      	ldrsh	r3, [r4, r2]
   34922:	2b00      	cmp	r3, #0
   34924:	d0ee      	beq.n	34904 <_fflush_r+0xc>
   34926:	0021      	movs	r1, r4
   34928:	0028      	movs	r0, r5
   3492a:	f7ff ff5b 	bl	347e4 <__sflush_r>
   3492e:	e7ea      	b.n	34906 <_fflush_r+0xe>
   34930:	4b05      	ldr	r3, [pc, #20]	; (34948 <_fflush_r+0x50>)
   34932:	429c      	cmp	r4, r3
   34934:	d101      	bne.n	3493a <_fflush_r+0x42>
   34936:	68ac      	ldr	r4, [r5, #8]
   34938:	e7f1      	b.n	3491e <_fflush_r+0x26>
   3493a:	4b04      	ldr	r3, [pc, #16]	; (3494c <_fflush_r+0x54>)
   3493c:	429c      	cmp	r4, r3
   3493e:	d1ee      	bne.n	3491e <_fflush_r+0x26>
   34940:	68ec      	ldr	r4, [r5, #12]
   34942:	e7ec      	b.n	3491e <_fflush_r+0x26>
   34944:	0003955c 	.word	0x0003955c
   34948:	0003957c 	.word	0x0003957c
   3494c:	0003953c 	.word	0x0003953c

00034950 <_cleanup_r>:
   34950:	b510      	push	{r4, lr}
   34952:	4902      	ldr	r1, [pc, #8]	; (3495c <_cleanup_r+0xc>)
   34954:	f000 f8b2 	bl	34abc <_fwalk_reent>
   34958:	bd10      	pop	{r4, pc}
   3495a:	46c0      	nop			; (mov r8, r8)
   3495c:	000348f9 	.word	0x000348f9

00034960 <std.isra.0>:
   34960:	2300      	movs	r3, #0
   34962:	b510      	push	{r4, lr}
   34964:	0004      	movs	r4, r0
   34966:	6003      	str	r3, [r0, #0]
   34968:	6043      	str	r3, [r0, #4]
   3496a:	6083      	str	r3, [r0, #8]
   3496c:	8181      	strh	r1, [r0, #12]
   3496e:	6643      	str	r3, [r0, #100]	; 0x64
   34970:	81c2      	strh	r2, [r0, #14]
   34972:	6103      	str	r3, [r0, #16]
   34974:	6143      	str	r3, [r0, #20]
   34976:	6183      	str	r3, [r0, #24]
   34978:	0019      	movs	r1, r3
   3497a:	2208      	movs	r2, #8
   3497c:	305c      	adds	r0, #92	; 0x5c
   3497e:	f7ff fb60 	bl	34042 <memset>
   34982:	4b05      	ldr	r3, [pc, #20]	; (34998 <std.isra.0+0x38>)
   34984:	6224      	str	r4, [r4, #32]
   34986:	6263      	str	r3, [r4, #36]	; 0x24
   34988:	4b04      	ldr	r3, [pc, #16]	; (3499c <std.isra.0+0x3c>)
   3498a:	62a3      	str	r3, [r4, #40]	; 0x28
   3498c:	4b04      	ldr	r3, [pc, #16]	; (349a0 <std.isra.0+0x40>)
   3498e:	62e3      	str	r3, [r4, #44]	; 0x2c
   34990:	4b04      	ldr	r3, [pc, #16]	; (349a4 <std.isra.0+0x44>)
   34992:	6323      	str	r3, [r4, #48]	; 0x30
   34994:	bd10      	pop	{r4, pc}
   34996:	46c0      	nop			; (mov r8, r8)
   34998:	000351fd 	.word	0x000351fd
   3499c:	00035225 	.word	0x00035225
   349a0:	0003525d 	.word	0x0003525d
   349a4:	00035289 	.word	0x00035289

000349a8 <__sfmoreglue>:
   349a8:	b570      	push	{r4, r5, r6, lr}
   349aa:	2568      	movs	r5, #104	; 0x68
   349ac:	1e4a      	subs	r2, r1, #1
   349ae:	4355      	muls	r5, r2
   349b0:	000e      	movs	r6, r1
   349b2:	0029      	movs	r1, r5
   349b4:	3174      	adds	r1, #116	; 0x74
   349b6:	f7ff fb97 	bl	340e8 <_malloc_r>
   349ba:	1e04      	subs	r4, r0, #0
   349bc:	d008      	beq.n	349d0 <__sfmoreglue+0x28>
   349be:	2100      	movs	r1, #0
   349c0:	002a      	movs	r2, r5
   349c2:	6001      	str	r1, [r0, #0]
   349c4:	6046      	str	r6, [r0, #4]
   349c6:	300c      	adds	r0, #12
   349c8:	60a0      	str	r0, [r4, #8]
   349ca:	3268      	adds	r2, #104	; 0x68
   349cc:	f7ff fb39 	bl	34042 <memset>
   349d0:	0020      	movs	r0, r4
   349d2:	bd70      	pop	{r4, r5, r6, pc}

000349d4 <__sinit>:
   349d4:	6983      	ldr	r3, [r0, #24]
   349d6:	b513      	push	{r0, r1, r4, lr}
   349d8:	0004      	movs	r4, r0
   349da:	2b00      	cmp	r3, #0
   349dc:	d128      	bne.n	34a30 <__sinit+0x5c>
   349de:	6483      	str	r3, [r0, #72]	; 0x48
   349e0:	64c3      	str	r3, [r0, #76]	; 0x4c
   349e2:	6503      	str	r3, [r0, #80]	; 0x50
   349e4:	4b13      	ldr	r3, [pc, #76]	; (34a34 <__sinit+0x60>)
   349e6:	4a14      	ldr	r2, [pc, #80]	; (34a38 <__sinit+0x64>)
   349e8:	681b      	ldr	r3, [r3, #0]
   349ea:	6282      	str	r2, [r0, #40]	; 0x28
   349ec:	9301      	str	r3, [sp, #4]
   349ee:	4298      	cmp	r0, r3
   349f0:	d101      	bne.n	349f6 <__sinit+0x22>
   349f2:	2301      	movs	r3, #1
   349f4:	6183      	str	r3, [r0, #24]
   349f6:	0020      	movs	r0, r4
   349f8:	f000 f820 	bl	34a3c <__sfp>
   349fc:	6060      	str	r0, [r4, #4]
   349fe:	0020      	movs	r0, r4
   34a00:	f000 f81c 	bl	34a3c <__sfp>
   34a04:	60a0      	str	r0, [r4, #8]
   34a06:	0020      	movs	r0, r4
   34a08:	f000 f818 	bl	34a3c <__sfp>
   34a0c:	2200      	movs	r2, #0
   34a0e:	60e0      	str	r0, [r4, #12]
   34a10:	2104      	movs	r1, #4
   34a12:	6860      	ldr	r0, [r4, #4]
   34a14:	f7ff ffa4 	bl	34960 <std.isra.0>
   34a18:	2201      	movs	r2, #1
   34a1a:	2109      	movs	r1, #9
   34a1c:	68a0      	ldr	r0, [r4, #8]
   34a1e:	f7ff ff9f 	bl	34960 <std.isra.0>
   34a22:	2202      	movs	r2, #2
   34a24:	2112      	movs	r1, #18
   34a26:	68e0      	ldr	r0, [r4, #12]
   34a28:	f7ff ff9a 	bl	34960 <std.isra.0>
   34a2c:	2301      	movs	r3, #1
   34a2e:	61a3      	str	r3, [r4, #24]
   34a30:	bd13      	pop	{r0, r1, r4, pc}
   34a32:	46c0      	nop			; (mov r8, r8)
   34a34:	00039538 	.word	0x00039538
   34a38:	00034951 	.word	0x00034951

00034a3c <__sfp>:
   34a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34a3e:	4b1e      	ldr	r3, [pc, #120]	; (34ab8 <__sfp+0x7c>)
   34a40:	0007      	movs	r7, r0
   34a42:	681e      	ldr	r6, [r3, #0]
   34a44:	69b3      	ldr	r3, [r6, #24]
   34a46:	2b00      	cmp	r3, #0
   34a48:	d102      	bne.n	34a50 <__sfp+0x14>
   34a4a:	0030      	movs	r0, r6
   34a4c:	f7ff ffc2 	bl	349d4 <__sinit>
   34a50:	3648      	adds	r6, #72	; 0x48
   34a52:	68b4      	ldr	r4, [r6, #8]
   34a54:	6873      	ldr	r3, [r6, #4]
   34a56:	3b01      	subs	r3, #1
   34a58:	d504      	bpl.n	34a64 <__sfp+0x28>
   34a5a:	6833      	ldr	r3, [r6, #0]
   34a5c:	2b00      	cmp	r3, #0
   34a5e:	d007      	beq.n	34a70 <__sfp+0x34>
   34a60:	6836      	ldr	r6, [r6, #0]
   34a62:	e7f6      	b.n	34a52 <__sfp+0x16>
   34a64:	220c      	movs	r2, #12
   34a66:	5ea5      	ldrsh	r5, [r4, r2]
   34a68:	2d00      	cmp	r5, #0
   34a6a:	d00d      	beq.n	34a88 <__sfp+0x4c>
   34a6c:	3468      	adds	r4, #104	; 0x68
   34a6e:	e7f2      	b.n	34a56 <__sfp+0x1a>
   34a70:	2104      	movs	r1, #4
   34a72:	0038      	movs	r0, r7
   34a74:	f7ff ff98 	bl	349a8 <__sfmoreglue>
   34a78:	6030      	str	r0, [r6, #0]
   34a7a:	2800      	cmp	r0, #0
   34a7c:	d1f0      	bne.n	34a60 <__sfp+0x24>
   34a7e:	230c      	movs	r3, #12
   34a80:	0004      	movs	r4, r0
   34a82:	603b      	str	r3, [r7, #0]
   34a84:	0020      	movs	r0, r4
   34a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34a88:	2301      	movs	r3, #1
   34a8a:	0020      	movs	r0, r4
   34a8c:	425b      	negs	r3, r3
   34a8e:	81e3      	strh	r3, [r4, #14]
   34a90:	3302      	adds	r3, #2
   34a92:	81a3      	strh	r3, [r4, #12]
   34a94:	6665      	str	r5, [r4, #100]	; 0x64
   34a96:	6025      	str	r5, [r4, #0]
   34a98:	60a5      	str	r5, [r4, #8]
   34a9a:	6065      	str	r5, [r4, #4]
   34a9c:	6125      	str	r5, [r4, #16]
   34a9e:	6165      	str	r5, [r4, #20]
   34aa0:	61a5      	str	r5, [r4, #24]
   34aa2:	2208      	movs	r2, #8
   34aa4:	0029      	movs	r1, r5
   34aa6:	305c      	adds	r0, #92	; 0x5c
   34aa8:	f7ff facb 	bl	34042 <memset>
   34aac:	6365      	str	r5, [r4, #52]	; 0x34
   34aae:	63a5      	str	r5, [r4, #56]	; 0x38
   34ab0:	64a5      	str	r5, [r4, #72]	; 0x48
   34ab2:	64e5      	str	r5, [r4, #76]	; 0x4c
   34ab4:	e7e6      	b.n	34a84 <__sfp+0x48>
   34ab6:	46c0      	nop			; (mov r8, r8)
   34ab8:	00039538 	.word	0x00039538

00034abc <_fwalk_reent>:
   34abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34abe:	0004      	movs	r4, r0
   34ac0:	0007      	movs	r7, r0
   34ac2:	2600      	movs	r6, #0
   34ac4:	9101      	str	r1, [sp, #4]
   34ac6:	3448      	adds	r4, #72	; 0x48
   34ac8:	2c00      	cmp	r4, #0
   34aca:	d101      	bne.n	34ad0 <_fwalk_reent+0x14>
   34acc:	0030      	movs	r0, r6
   34ace:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34ad0:	6863      	ldr	r3, [r4, #4]
   34ad2:	68a5      	ldr	r5, [r4, #8]
   34ad4:	9300      	str	r3, [sp, #0]
   34ad6:	9b00      	ldr	r3, [sp, #0]
   34ad8:	3b01      	subs	r3, #1
   34ada:	9300      	str	r3, [sp, #0]
   34adc:	d501      	bpl.n	34ae2 <_fwalk_reent+0x26>
   34ade:	6824      	ldr	r4, [r4, #0]
   34ae0:	e7f2      	b.n	34ac8 <_fwalk_reent+0xc>
   34ae2:	89ab      	ldrh	r3, [r5, #12]
   34ae4:	2b01      	cmp	r3, #1
   34ae6:	d908      	bls.n	34afa <_fwalk_reent+0x3e>
   34ae8:	220e      	movs	r2, #14
   34aea:	5eab      	ldrsh	r3, [r5, r2]
   34aec:	3301      	adds	r3, #1
   34aee:	d004      	beq.n	34afa <_fwalk_reent+0x3e>
   34af0:	0029      	movs	r1, r5
   34af2:	0038      	movs	r0, r7
   34af4:	9b01      	ldr	r3, [sp, #4]
   34af6:	4798      	blx	r3
   34af8:	4306      	orrs	r6, r0
   34afa:	3568      	adds	r5, #104	; 0x68
   34afc:	e7eb      	b.n	34ad6 <_fwalk_reent+0x1a>

00034afe <__locale_ctype_ptr_l>:
   34afe:	30ec      	adds	r0, #236	; 0xec
   34b00:	6800      	ldr	r0, [r0, #0]
   34b02:	4770      	bx	lr

00034b04 <__locale_ctype_ptr>:
   34b04:	4b04      	ldr	r3, [pc, #16]	; (34b18 <__locale_ctype_ptr+0x14>)
   34b06:	681b      	ldr	r3, [r3, #0]
   34b08:	6a1b      	ldr	r3, [r3, #32]
   34b0a:	2b00      	cmp	r3, #0
   34b0c:	d100      	bne.n	34b10 <__locale_ctype_ptr+0xc>
   34b0e:	4b03      	ldr	r3, [pc, #12]	; (34b1c <__locale_ctype_ptr+0x18>)
   34b10:	33ec      	adds	r3, #236	; 0xec
   34b12:	6818      	ldr	r0, [r3, #0]
   34b14:	4770      	bx	lr
   34b16:	46c0      	nop			; (mov r8, r8)
   34b18:	20000118 	.word	0x20000118
   34b1c:	2000017c 	.word	0x2000017c

00034b20 <__swhatbuf_r>:
   34b20:	b570      	push	{r4, r5, r6, lr}
   34b22:	000e      	movs	r6, r1
   34b24:	001d      	movs	r5, r3
   34b26:	230e      	movs	r3, #14
   34b28:	5ec9      	ldrsh	r1, [r1, r3]
   34b2a:	b090      	sub	sp, #64	; 0x40
   34b2c:	0014      	movs	r4, r2
   34b2e:	2900      	cmp	r1, #0
   34b30:	da07      	bge.n	34b42 <__swhatbuf_r+0x22>
   34b32:	2300      	movs	r3, #0
   34b34:	602b      	str	r3, [r5, #0]
   34b36:	89b3      	ldrh	r3, [r6, #12]
   34b38:	061b      	lsls	r3, r3, #24
   34b3a:	d411      	bmi.n	34b60 <__swhatbuf_r+0x40>
   34b3c:	2380      	movs	r3, #128	; 0x80
   34b3e:	00db      	lsls	r3, r3, #3
   34b40:	e00f      	b.n	34b62 <__swhatbuf_r+0x42>
   34b42:	aa01      	add	r2, sp, #4
   34b44:	f000 fbe6 	bl	35314 <_fstat_r>
   34b48:	2800      	cmp	r0, #0
   34b4a:	dbf2      	blt.n	34b32 <__swhatbuf_r+0x12>
   34b4c:	22f0      	movs	r2, #240	; 0xf0
   34b4e:	9b02      	ldr	r3, [sp, #8]
   34b50:	0212      	lsls	r2, r2, #8
   34b52:	4013      	ands	r3, r2
   34b54:	4a05      	ldr	r2, [pc, #20]	; (34b6c <__swhatbuf_r+0x4c>)
   34b56:	189b      	adds	r3, r3, r2
   34b58:	425a      	negs	r2, r3
   34b5a:	4153      	adcs	r3, r2
   34b5c:	602b      	str	r3, [r5, #0]
   34b5e:	e7ed      	b.n	34b3c <__swhatbuf_r+0x1c>
   34b60:	2340      	movs	r3, #64	; 0x40
   34b62:	2000      	movs	r0, #0
   34b64:	6023      	str	r3, [r4, #0]
   34b66:	b010      	add	sp, #64	; 0x40
   34b68:	bd70      	pop	{r4, r5, r6, pc}
   34b6a:	46c0      	nop			; (mov r8, r8)
   34b6c:	ffffe000 	.word	0xffffe000

00034b70 <__smakebuf_r>:
   34b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34b72:	2602      	movs	r6, #2
   34b74:	898b      	ldrh	r3, [r1, #12]
   34b76:	0005      	movs	r5, r0
   34b78:	000c      	movs	r4, r1
   34b7a:	4233      	tst	r3, r6
   34b7c:	d006      	beq.n	34b8c <__smakebuf_r+0x1c>
   34b7e:	0023      	movs	r3, r4
   34b80:	3347      	adds	r3, #71	; 0x47
   34b82:	6023      	str	r3, [r4, #0]
   34b84:	6123      	str	r3, [r4, #16]
   34b86:	2301      	movs	r3, #1
   34b88:	6163      	str	r3, [r4, #20]
   34b8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   34b8c:	ab01      	add	r3, sp, #4
   34b8e:	466a      	mov	r2, sp
   34b90:	f7ff ffc6 	bl	34b20 <__swhatbuf_r>
   34b94:	9900      	ldr	r1, [sp, #0]
   34b96:	0007      	movs	r7, r0
   34b98:	0028      	movs	r0, r5
   34b9a:	f7ff faa5 	bl	340e8 <_malloc_r>
   34b9e:	2800      	cmp	r0, #0
   34ba0:	d108      	bne.n	34bb4 <__smakebuf_r+0x44>
   34ba2:	220c      	movs	r2, #12
   34ba4:	5ea3      	ldrsh	r3, [r4, r2]
   34ba6:	059a      	lsls	r2, r3, #22
   34ba8:	d4ef      	bmi.n	34b8a <__smakebuf_r+0x1a>
   34baa:	2203      	movs	r2, #3
   34bac:	4393      	bics	r3, r2
   34bae:	431e      	orrs	r6, r3
   34bb0:	81a6      	strh	r6, [r4, #12]
   34bb2:	e7e4      	b.n	34b7e <__smakebuf_r+0xe>
   34bb4:	4b0f      	ldr	r3, [pc, #60]	; (34bf4 <__smakebuf_r+0x84>)
   34bb6:	62ab      	str	r3, [r5, #40]	; 0x28
   34bb8:	2380      	movs	r3, #128	; 0x80
   34bba:	89a2      	ldrh	r2, [r4, #12]
   34bbc:	6020      	str	r0, [r4, #0]
   34bbe:	4313      	orrs	r3, r2
   34bc0:	81a3      	strh	r3, [r4, #12]
   34bc2:	9b00      	ldr	r3, [sp, #0]
   34bc4:	6120      	str	r0, [r4, #16]
   34bc6:	6163      	str	r3, [r4, #20]
   34bc8:	9b01      	ldr	r3, [sp, #4]
   34bca:	2b00      	cmp	r3, #0
   34bcc:	d00d      	beq.n	34bea <__smakebuf_r+0x7a>
   34bce:	230e      	movs	r3, #14
   34bd0:	5ee1      	ldrsh	r1, [r4, r3]
   34bd2:	0028      	movs	r0, r5
   34bd4:	f000 fbb0 	bl	35338 <_isatty_r>
   34bd8:	2800      	cmp	r0, #0
   34bda:	d006      	beq.n	34bea <__smakebuf_r+0x7a>
   34bdc:	2203      	movs	r2, #3
   34bde:	89a3      	ldrh	r3, [r4, #12]
   34be0:	4393      	bics	r3, r2
   34be2:	001a      	movs	r2, r3
   34be4:	2301      	movs	r3, #1
   34be6:	4313      	orrs	r3, r2
   34be8:	81a3      	strh	r3, [r4, #12]
   34bea:	89a0      	ldrh	r0, [r4, #12]
   34bec:	4338      	orrs	r0, r7
   34bee:	81a0      	strh	r0, [r4, #12]
   34bf0:	e7cb      	b.n	34b8a <__smakebuf_r+0x1a>
   34bf2:	46c0      	nop			; (mov r8, r8)
   34bf4:	00034951 	.word	0x00034951

00034bf8 <__ascii_mbtowc>:
   34bf8:	b082      	sub	sp, #8
   34bfa:	2900      	cmp	r1, #0
   34bfc:	d100      	bne.n	34c00 <__ascii_mbtowc+0x8>
   34bfe:	a901      	add	r1, sp, #4
   34c00:	1e10      	subs	r0, r2, #0
   34c02:	d006      	beq.n	34c12 <__ascii_mbtowc+0x1a>
   34c04:	2b00      	cmp	r3, #0
   34c06:	d006      	beq.n	34c16 <__ascii_mbtowc+0x1e>
   34c08:	7813      	ldrb	r3, [r2, #0]
   34c0a:	600b      	str	r3, [r1, #0]
   34c0c:	7810      	ldrb	r0, [r2, #0]
   34c0e:	1e43      	subs	r3, r0, #1
   34c10:	4198      	sbcs	r0, r3
   34c12:	b002      	add	sp, #8
   34c14:	4770      	bx	lr
   34c16:	2002      	movs	r0, #2
   34c18:	4240      	negs	r0, r0
   34c1a:	e7fa      	b.n	34c12 <__ascii_mbtowc+0x1a>

00034c1c <__malloc_lock>:
   34c1c:	4770      	bx	lr

00034c1e <__malloc_unlock>:
   34c1e:	4770      	bx	lr

00034c20 <__ssputs_r>:
   34c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   34c22:	688e      	ldr	r6, [r1, #8]
   34c24:	b085      	sub	sp, #20
   34c26:	0007      	movs	r7, r0
   34c28:	000c      	movs	r4, r1
   34c2a:	9203      	str	r2, [sp, #12]
   34c2c:	9301      	str	r3, [sp, #4]
   34c2e:	429e      	cmp	r6, r3
   34c30:	d839      	bhi.n	34ca6 <__ssputs_r+0x86>
   34c32:	2390      	movs	r3, #144	; 0x90
   34c34:	898a      	ldrh	r2, [r1, #12]
   34c36:	00db      	lsls	r3, r3, #3
   34c38:	421a      	tst	r2, r3
   34c3a:	d034      	beq.n	34ca6 <__ssputs_r+0x86>
   34c3c:	2503      	movs	r5, #3
   34c3e:	6909      	ldr	r1, [r1, #16]
   34c40:	6823      	ldr	r3, [r4, #0]
   34c42:	1a5b      	subs	r3, r3, r1
   34c44:	9302      	str	r3, [sp, #8]
   34c46:	6963      	ldr	r3, [r4, #20]
   34c48:	9802      	ldr	r0, [sp, #8]
   34c4a:	435d      	muls	r5, r3
   34c4c:	0feb      	lsrs	r3, r5, #31
   34c4e:	195d      	adds	r5, r3, r5
   34c50:	9b01      	ldr	r3, [sp, #4]
   34c52:	106d      	asrs	r5, r5, #1
   34c54:	3301      	adds	r3, #1
   34c56:	181b      	adds	r3, r3, r0
   34c58:	42ab      	cmp	r3, r5
   34c5a:	d900      	bls.n	34c5e <__ssputs_r+0x3e>
   34c5c:	001d      	movs	r5, r3
   34c5e:	0553      	lsls	r3, r2, #21
   34c60:	d532      	bpl.n	34cc8 <__ssputs_r+0xa8>
   34c62:	0029      	movs	r1, r5
   34c64:	0038      	movs	r0, r7
   34c66:	f7ff fa3f 	bl	340e8 <_malloc_r>
   34c6a:	1e06      	subs	r6, r0, #0
   34c6c:	d109      	bne.n	34c82 <__ssputs_r+0x62>
   34c6e:	230c      	movs	r3, #12
   34c70:	603b      	str	r3, [r7, #0]
   34c72:	2340      	movs	r3, #64	; 0x40
   34c74:	2001      	movs	r0, #1
   34c76:	89a2      	ldrh	r2, [r4, #12]
   34c78:	4240      	negs	r0, r0
   34c7a:	4313      	orrs	r3, r2
   34c7c:	81a3      	strh	r3, [r4, #12]
   34c7e:	b005      	add	sp, #20
   34c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34c82:	9a02      	ldr	r2, [sp, #8]
   34c84:	6921      	ldr	r1, [r4, #16]
   34c86:	f7ff f9c1 	bl	3400c <memcpy>
   34c8a:	89a3      	ldrh	r3, [r4, #12]
   34c8c:	4a14      	ldr	r2, [pc, #80]	; (34ce0 <__ssputs_r+0xc0>)
   34c8e:	401a      	ands	r2, r3
   34c90:	2380      	movs	r3, #128	; 0x80
   34c92:	4313      	orrs	r3, r2
   34c94:	81a3      	strh	r3, [r4, #12]
   34c96:	9b02      	ldr	r3, [sp, #8]
   34c98:	6126      	str	r6, [r4, #16]
   34c9a:	18f6      	adds	r6, r6, r3
   34c9c:	6026      	str	r6, [r4, #0]
   34c9e:	6165      	str	r5, [r4, #20]
   34ca0:	9e01      	ldr	r6, [sp, #4]
   34ca2:	1aed      	subs	r5, r5, r3
   34ca4:	60a5      	str	r5, [r4, #8]
   34ca6:	9b01      	ldr	r3, [sp, #4]
   34ca8:	42b3      	cmp	r3, r6
   34caa:	d200      	bcs.n	34cae <__ssputs_r+0x8e>
   34cac:	001e      	movs	r6, r3
   34cae:	0032      	movs	r2, r6
   34cb0:	9903      	ldr	r1, [sp, #12]
   34cb2:	6820      	ldr	r0, [r4, #0]
   34cb4:	f7ff f9b3 	bl	3401e <memmove>
   34cb8:	68a3      	ldr	r3, [r4, #8]
   34cba:	2000      	movs	r0, #0
   34cbc:	1b9b      	subs	r3, r3, r6
   34cbe:	60a3      	str	r3, [r4, #8]
   34cc0:	6823      	ldr	r3, [r4, #0]
   34cc2:	199e      	adds	r6, r3, r6
   34cc4:	6026      	str	r6, [r4, #0]
   34cc6:	e7da      	b.n	34c7e <__ssputs_r+0x5e>
   34cc8:	002a      	movs	r2, r5
   34cca:	0038      	movs	r0, r7
   34ccc:	f000 fb65 	bl	3539a <_realloc_r>
   34cd0:	1e06      	subs	r6, r0, #0
   34cd2:	d1e0      	bne.n	34c96 <__ssputs_r+0x76>
   34cd4:	6921      	ldr	r1, [r4, #16]
   34cd6:	0038      	movs	r0, r7
   34cd8:	f7ff f9bc 	bl	34054 <_free_r>
   34cdc:	e7c7      	b.n	34c6e <__ssputs_r+0x4e>
   34cde:	46c0      	nop			; (mov r8, r8)
   34ce0:	fffffb7f 	.word	0xfffffb7f

00034ce4 <_svfiprintf_r>:
   34ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   34ce6:	b09f      	sub	sp, #124	; 0x7c
   34ce8:	9002      	str	r0, [sp, #8]
   34cea:	9305      	str	r3, [sp, #20]
   34cec:	898b      	ldrh	r3, [r1, #12]
   34cee:	000f      	movs	r7, r1
   34cf0:	0016      	movs	r6, r2
   34cf2:	061b      	lsls	r3, r3, #24
   34cf4:	d511      	bpl.n	34d1a <_svfiprintf_r+0x36>
   34cf6:	690b      	ldr	r3, [r1, #16]
   34cf8:	2b00      	cmp	r3, #0
   34cfa:	d10e      	bne.n	34d1a <_svfiprintf_r+0x36>
   34cfc:	2140      	movs	r1, #64	; 0x40
   34cfe:	f7ff f9f3 	bl	340e8 <_malloc_r>
   34d02:	6038      	str	r0, [r7, #0]
   34d04:	6138      	str	r0, [r7, #16]
   34d06:	2800      	cmp	r0, #0
   34d08:	d105      	bne.n	34d16 <_svfiprintf_r+0x32>
   34d0a:	230c      	movs	r3, #12
   34d0c:	9a02      	ldr	r2, [sp, #8]
   34d0e:	3801      	subs	r0, #1
   34d10:	6013      	str	r3, [r2, #0]
   34d12:	b01f      	add	sp, #124	; 0x7c
   34d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34d16:	2340      	movs	r3, #64	; 0x40
   34d18:	617b      	str	r3, [r7, #20]
   34d1a:	2300      	movs	r3, #0
   34d1c:	ad06      	add	r5, sp, #24
   34d1e:	616b      	str	r3, [r5, #20]
   34d20:	3320      	adds	r3, #32
   34d22:	766b      	strb	r3, [r5, #25]
   34d24:	3310      	adds	r3, #16
   34d26:	76ab      	strb	r3, [r5, #26]
   34d28:	0034      	movs	r4, r6
   34d2a:	7823      	ldrb	r3, [r4, #0]
   34d2c:	2b00      	cmp	r3, #0
   34d2e:	d147      	bne.n	34dc0 <_svfiprintf_r+0xdc>
   34d30:	1ba3      	subs	r3, r4, r6
   34d32:	9304      	str	r3, [sp, #16]
   34d34:	d00d      	beq.n	34d52 <_svfiprintf_r+0x6e>
   34d36:	1ba3      	subs	r3, r4, r6
   34d38:	0032      	movs	r2, r6
   34d3a:	0039      	movs	r1, r7
   34d3c:	9802      	ldr	r0, [sp, #8]
   34d3e:	f7ff ff6f 	bl	34c20 <__ssputs_r>
   34d42:	1c43      	adds	r3, r0, #1
   34d44:	d100      	bne.n	34d48 <_svfiprintf_r+0x64>
   34d46:	e0b5      	b.n	34eb4 <_svfiprintf_r+0x1d0>
   34d48:	696a      	ldr	r2, [r5, #20]
   34d4a:	9b04      	ldr	r3, [sp, #16]
   34d4c:	4694      	mov	ip, r2
   34d4e:	4463      	add	r3, ip
   34d50:	616b      	str	r3, [r5, #20]
   34d52:	7823      	ldrb	r3, [r4, #0]
   34d54:	2b00      	cmp	r3, #0
   34d56:	d100      	bne.n	34d5a <_svfiprintf_r+0x76>
   34d58:	e0ac      	b.n	34eb4 <_svfiprintf_r+0x1d0>
   34d5a:	2201      	movs	r2, #1
   34d5c:	2300      	movs	r3, #0
   34d5e:	4252      	negs	r2, r2
   34d60:	606a      	str	r2, [r5, #4]
   34d62:	a902      	add	r1, sp, #8
   34d64:	3254      	adds	r2, #84	; 0x54
   34d66:	1852      	adds	r2, r2, r1
   34d68:	3401      	adds	r4, #1
   34d6a:	602b      	str	r3, [r5, #0]
   34d6c:	60eb      	str	r3, [r5, #12]
   34d6e:	60ab      	str	r3, [r5, #8]
   34d70:	7013      	strb	r3, [r2, #0]
   34d72:	65ab      	str	r3, [r5, #88]	; 0x58
   34d74:	4e58      	ldr	r6, [pc, #352]	; (34ed8 <_svfiprintf_r+0x1f4>)
   34d76:	2205      	movs	r2, #5
   34d78:	7821      	ldrb	r1, [r4, #0]
   34d7a:	0030      	movs	r0, r6
   34d7c:	f000 fb02 	bl	35384 <memchr>
   34d80:	1c62      	adds	r2, r4, #1
   34d82:	2800      	cmp	r0, #0
   34d84:	d120      	bne.n	34dc8 <_svfiprintf_r+0xe4>
   34d86:	6829      	ldr	r1, [r5, #0]
   34d88:	06cb      	lsls	r3, r1, #27
   34d8a:	d504      	bpl.n	34d96 <_svfiprintf_r+0xb2>
   34d8c:	2353      	movs	r3, #83	; 0x53
   34d8e:	ae02      	add	r6, sp, #8
   34d90:	3020      	adds	r0, #32
   34d92:	199b      	adds	r3, r3, r6
   34d94:	7018      	strb	r0, [r3, #0]
   34d96:	070b      	lsls	r3, r1, #28
   34d98:	d504      	bpl.n	34da4 <_svfiprintf_r+0xc0>
   34d9a:	2353      	movs	r3, #83	; 0x53
   34d9c:	202b      	movs	r0, #43	; 0x2b
   34d9e:	ae02      	add	r6, sp, #8
   34da0:	199b      	adds	r3, r3, r6
   34da2:	7018      	strb	r0, [r3, #0]
   34da4:	7823      	ldrb	r3, [r4, #0]
   34da6:	2b2a      	cmp	r3, #42	; 0x2a
   34da8:	d016      	beq.n	34dd8 <_svfiprintf_r+0xf4>
   34daa:	2000      	movs	r0, #0
   34dac:	210a      	movs	r1, #10
   34dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34db0:	7822      	ldrb	r2, [r4, #0]
   34db2:	3a30      	subs	r2, #48	; 0x30
   34db4:	2a09      	cmp	r2, #9
   34db6:	d955      	bls.n	34e64 <_svfiprintf_r+0x180>
   34db8:	2800      	cmp	r0, #0
   34dba:	d015      	beq.n	34de8 <_svfiprintf_r+0x104>
   34dbc:	9309      	str	r3, [sp, #36]	; 0x24
   34dbe:	e013      	b.n	34de8 <_svfiprintf_r+0x104>
   34dc0:	2b25      	cmp	r3, #37	; 0x25
   34dc2:	d0b5      	beq.n	34d30 <_svfiprintf_r+0x4c>
   34dc4:	3401      	adds	r4, #1
   34dc6:	e7b0      	b.n	34d2a <_svfiprintf_r+0x46>
   34dc8:	2301      	movs	r3, #1
   34dca:	1b80      	subs	r0, r0, r6
   34dcc:	4083      	lsls	r3, r0
   34dce:	6829      	ldr	r1, [r5, #0]
   34dd0:	0014      	movs	r4, r2
   34dd2:	430b      	orrs	r3, r1
   34dd4:	602b      	str	r3, [r5, #0]
   34dd6:	e7cd      	b.n	34d74 <_svfiprintf_r+0x90>
   34dd8:	9b05      	ldr	r3, [sp, #20]
   34dda:	1d18      	adds	r0, r3, #4
   34ddc:	681b      	ldr	r3, [r3, #0]
   34dde:	9005      	str	r0, [sp, #20]
   34de0:	2b00      	cmp	r3, #0
   34de2:	db39      	blt.n	34e58 <_svfiprintf_r+0x174>
   34de4:	9309      	str	r3, [sp, #36]	; 0x24
   34de6:	0014      	movs	r4, r2
   34de8:	7823      	ldrb	r3, [r4, #0]
   34dea:	2b2e      	cmp	r3, #46	; 0x2e
   34dec:	d10b      	bne.n	34e06 <_svfiprintf_r+0x122>
   34dee:	7863      	ldrb	r3, [r4, #1]
   34df0:	1c62      	adds	r2, r4, #1
   34df2:	2b2a      	cmp	r3, #42	; 0x2a
   34df4:	d13e      	bne.n	34e74 <_svfiprintf_r+0x190>
   34df6:	9b05      	ldr	r3, [sp, #20]
   34df8:	3402      	adds	r4, #2
   34dfa:	1d1a      	adds	r2, r3, #4
   34dfc:	681b      	ldr	r3, [r3, #0]
   34dfe:	9205      	str	r2, [sp, #20]
   34e00:	2b00      	cmp	r3, #0
   34e02:	db34      	blt.n	34e6e <_svfiprintf_r+0x18a>
   34e04:	9307      	str	r3, [sp, #28]
   34e06:	4e35      	ldr	r6, [pc, #212]	; (34edc <_svfiprintf_r+0x1f8>)
   34e08:	7821      	ldrb	r1, [r4, #0]
   34e0a:	2203      	movs	r2, #3
   34e0c:	0030      	movs	r0, r6
   34e0e:	f000 fab9 	bl	35384 <memchr>
   34e12:	2800      	cmp	r0, #0
   34e14:	d006      	beq.n	34e24 <_svfiprintf_r+0x140>
   34e16:	2340      	movs	r3, #64	; 0x40
   34e18:	1b80      	subs	r0, r0, r6
   34e1a:	4083      	lsls	r3, r0
   34e1c:	682a      	ldr	r2, [r5, #0]
   34e1e:	3401      	adds	r4, #1
   34e20:	4313      	orrs	r3, r2
   34e22:	602b      	str	r3, [r5, #0]
   34e24:	7821      	ldrb	r1, [r4, #0]
   34e26:	2206      	movs	r2, #6
   34e28:	482d      	ldr	r0, [pc, #180]	; (34ee0 <_svfiprintf_r+0x1fc>)
   34e2a:	1c66      	adds	r6, r4, #1
   34e2c:	7629      	strb	r1, [r5, #24]
   34e2e:	f000 faa9 	bl	35384 <memchr>
   34e32:	2800      	cmp	r0, #0
   34e34:	d046      	beq.n	34ec4 <_svfiprintf_r+0x1e0>
   34e36:	4b2b      	ldr	r3, [pc, #172]	; (34ee4 <_svfiprintf_r+0x200>)
   34e38:	2b00      	cmp	r3, #0
   34e3a:	d12f      	bne.n	34e9c <_svfiprintf_r+0x1b8>
   34e3c:	6829      	ldr	r1, [r5, #0]
   34e3e:	9b05      	ldr	r3, [sp, #20]
   34e40:	2207      	movs	r2, #7
   34e42:	05c9      	lsls	r1, r1, #23
   34e44:	d528      	bpl.n	34e98 <_svfiprintf_r+0x1b4>
   34e46:	189b      	adds	r3, r3, r2
   34e48:	4393      	bics	r3, r2
   34e4a:	3308      	adds	r3, #8
   34e4c:	9305      	str	r3, [sp, #20]
   34e4e:	696b      	ldr	r3, [r5, #20]
   34e50:	9a03      	ldr	r2, [sp, #12]
   34e52:	189b      	adds	r3, r3, r2
   34e54:	616b      	str	r3, [r5, #20]
   34e56:	e767      	b.n	34d28 <_svfiprintf_r+0x44>
   34e58:	425b      	negs	r3, r3
   34e5a:	60eb      	str	r3, [r5, #12]
   34e5c:	2302      	movs	r3, #2
   34e5e:	430b      	orrs	r3, r1
   34e60:	602b      	str	r3, [r5, #0]
   34e62:	e7c0      	b.n	34de6 <_svfiprintf_r+0x102>
   34e64:	434b      	muls	r3, r1
   34e66:	3401      	adds	r4, #1
   34e68:	189b      	adds	r3, r3, r2
   34e6a:	2001      	movs	r0, #1
   34e6c:	e7a0      	b.n	34db0 <_svfiprintf_r+0xcc>
   34e6e:	2301      	movs	r3, #1
   34e70:	425b      	negs	r3, r3
   34e72:	e7c7      	b.n	34e04 <_svfiprintf_r+0x120>
   34e74:	2300      	movs	r3, #0
   34e76:	0014      	movs	r4, r2
   34e78:	200a      	movs	r0, #10
   34e7a:	001a      	movs	r2, r3
   34e7c:	606b      	str	r3, [r5, #4]
   34e7e:	7821      	ldrb	r1, [r4, #0]
   34e80:	3930      	subs	r1, #48	; 0x30
   34e82:	2909      	cmp	r1, #9
   34e84:	d903      	bls.n	34e8e <_svfiprintf_r+0x1aa>
   34e86:	2b00      	cmp	r3, #0
   34e88:	d0bd      	beq.n	34e06 <_svfiprintf_r+0x122>
   34e8a:	9207      	str	r2, [sp, #28]
   34e8c:	e7bb      	b.n	34e06 <_svfiprintf_r+0x122>
   34e8e:	4342      	muls	r2, r0
   34e90:	3401      	adds	r4, #1
   34e92:	1852      	adds	r2, r2, r1
   34e94:	2301      	movs	r3, #1
   34e96:	e7f2      	b.n	34e7e <_svfiprintf_r+0x19a>
   34e98:	3307      	adds	r3, #7
   34e9a:	e7d5      	b.n	34e48 <_svfiprintf_r+0x164>
   34e9c:	ab05      	add	r3, sp, #20
   34e9e:	9300      	str	r3, [sp, #0]
   34ea0:	003a      	movs	r2, r7
   34ea2:	4b11      	ldr	r3, [pc, #68]	; (34ee8 <_svfiprintf_r+0x204>)
   34ea4:	0029      	movs	r1, r5
   34ea6:	9802      	ldr	r0, [sp, #8]
   34ea8:	e000      	b.n	34eac <_svfiprintf_r+0x1c8>
   34eaa:	bf00      	nop
   34eac:	9003      	str	r0, [sp, #12]
   34eae:	9b03      	ldr	r3, [sp, #12]
   34eb0:	3301      	adds	r3, #1
   34eb2:	d1cc      	bne.n	34e4e <_svfiprintf_r+0x16a>
   34eb4:	89bb      	ldrh	r3, [r7, #12]
   34eb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   34eb8:	065b      	lsls	r3, r3, #25
   34eba:	d400      	bmi.n	34ebe <_svfiprintf_r+0x1da>
   34ebc:	e729      	b.n	34d12 <_svfiprintf_r+0x2e>
   34ebe:	2001      	movs	r0, #1
   34ec0:	4240      	negs	r0, r0
   34ec2:	e726      	b.n	34d12 <_svfiprintf_r+0x2e>
   34ec4:	ab05      	add	r3, sp, #20
   34ec6:	9300      	str	r3, [sp, #0]
   34ec8:	003a      	movs	r2, r7
   34eca:	4b07      	ldr	r3, [pc, #28]	; (34ee8 <_svfiprintf_r+0x204>)
   34ecc:	0029      	movs	r1, r5
   34ece:	9802      	ldr	r0, [sp, #8]
   34ed0:	f000 f87a 	bl	34fc8 <_printf_i>
   34ed4:	e7ea      	b.n	34eac <_svfiprintf_r+0x1c8>
   34ed6:	46c0      	nop			; (mov r8, r8)
   34ed8:	000395a6 	.word	0x000395a6
   34edc:	000395ac 	.word	0x000395ac
   34ee0:	000395b0 	.word	0x000395b0
   34ee4:	00000000 	.word	0x00000000
   34ee8:	00034c21 	.word	0x00034c21

00034eec <_printf_common>:
   34eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34eee:	0015      	movs	r5, r2
   34ef0:	9301      	str	r3, [sp, #4]
   34ef2:	688a      	ldr	r2, [r1, #8]
   34ef4:	690b      	ldr	r3, [r1, #16]
   34ef6:	9000      	str	r0, [sp, #0]
   34ef8:	000c      	movs	r4, r1
   34efa:	4293      	cmp	r3, r2
   34efc:	da00      	bge.n	34f00 <_printf_common+0x14>
   34efe:	0013      	movs	r3, r2
   34f00:	0022      	movs	r2, r4
   34f02:	602b      	str	r3, [r5, #0]
   34f04:	3243      	adds	r2, #67	; 0x43
   34f06:	7812      	ldrb	r2, [r2, #0]
   34f08:	2a00      	cmp	r2, #0
   34f0a:	d001      	beq.n	34f10 <_printf_common+0x24>
   34f0c:	3301      	adds	r3, #1
   34f0e:	602b      	str	r3, [r5, #0]
   34f10:	6823      	ldr	r3, [r4, #0]
   34f12:	069b      	lsls	r3, r3, #26
   34f14:	d502      	bpl.n	34f1c <_printf_common+0x30>
   34f16:	682b      	ldr	r3, [r5, #0]
   34f18:	3302      	adds	r3, #2
   34f1a:	602b      	str	r3, [r5, #0]
   34f1c:	2706      	movs	r7, #6
   34f1e:	6823      	ldr	r3, [r4, #0]
   34f20:	401f      	ands	r7, r3
   34f22:	d027      	beq.n	34f74 <_printf_common+0x88>
   34f24:	0023      	movs	r3, r4
   34f26:	3343      	adds	r3, #67	; 0x43
   34f28:	781b      	ldrb	r3, [r3, #0]
   34f2a:	1e5a      	subs	r2, r3, #1
   34f2c:	4193      	sbcs	r3, r2
   34f2e:	6822      	ldr	r2, [r4, #0]
   34f30:	0692      	lsls	r2, r2, #26
   34f32:	d430      	bmi.n	34f96 <_printf_common+0xaa>
   34f34:	0022      	movs	r2, r4
   34f36:	9901      	ldr	r1, [sp, #4]
   34f38:	3243      	adds	r2, #67	; 0x43
   34f3a:	9800      	ldr	r0, [sp, #0]
   34f3c:	9e08      	ldr	r6, [sp, #32]
   34f3e:	47b0      	blx	r6
   34f40:	1c43      	adds	r3, r0, #1
   34f42:	d025      	beq.n	34f90 <_printf_common+0xa4>
   34f44:	2306      	movs	r3, #6
   34f46:	6820      	ldr	r0, [r4, #0]
   34f48:	682a      	ldr	r2, [r5, #0]
   34f4a:	68e1      	ldr	r1, [r4, #12]
   34f4c:	4003      	ands	r3, r0
   34f4e:	2500      	movs	r5, #0
   34f50:	2b04      	cmp	r3, #4
   34f52:	d103      	bne.n	34f5c <_printf_common+0x70>
   34f54:	1a8d      	subs	r5, r1, r2
   34f56:	43eb      	mvns	r3, r5
   34f58:	17db      	asrs	r3, r3, #31
   34f5a:	401d      	ands	r5, r3
   34f5c:	68a3      	ldr	r3, [r4, #8]
   34f5e:	6922      	ldr	r2, [r4, #16]
   34f60:	4293      	cmp	r3, r2
   34f62:	dd01      	ble.n	34f68 <_printf_common+0x7c>
   34f64:	1a9b      	subs	r3, r3, r2
   34f66:	18ed      	adds	r5, r5, r3
   34f68:	2700      	movs	r7, #0
   34f6a:	42bd      	cmp	r5, r7
   34f6c:	d120      	bne.n	34fb0 <_printf_common+0xc4>
   34f6e:	2000      	movs	r0, #0
   34f70:	e010      	b.n	34f94 <_printf_common+0xa8>
   34f72:	3701      	adds	r7, #1
   34f74:	68e3      	ldr	r3, [r4, #12]
   34f76:	682a      	ldr	r2, [r5, #0]
   34f78:	1a9b      	subs	r3, r3, r2
   34f7a:	429f      	cmp	r7, r3
   34f7c:	dad2      	bge.n	34f24 <_printf_common+0x38>
   34f7e:	0022      	movs	r2, r4
   34f80:	2301      	movs	r3, #1
   34f82:	3219      	adds	r2, #25
   34f84:	9901      	ldr	r1, [sp, #4]
   34f86:	9800      	ldr	r0, [sp, #0]
   34f88:	9e08      	ldr	r6, [sp, #32]
   34f8a:	47b0      	blx	r6
   34f8c:	1c43      	adds	r3, r0, #1
   34f8e:	d1f0      	bne.n	34f72 <_printf_common+0x86>
   34f90:	2001      	movs	r0, #1
   34f92:	4240      	negs	r0, r0
   34f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34f96:	2030      	movs	r0, #48	; 0x30
   34f98:	18e1      	adds	r1, r4, r3
   34f9a:	3143      	adds	r1, #67	; 0x43
   34f9c:	7008      	strb	r0, [r1, #0]
   34f9e:	0021      	movs	r1, r4
   34fa0:	1c5a      	adds	r2, r3, #1
   34fa2:	3145      	adds	r1, #69	; 0x45
   34fa4:	7809      	ldrb	r1, [r1, #0]
   34fa6:	18a2      	adds	r2, r4, r2
   34fa8:	3243      	adds	r2, #67	; 0x43
   34faa:	3302      	adds	r3, #2
   34fac:	7011      	strb	r1, [r2, #0]
   34fae:	e7c1      	b.n	34f34 <_printf_common+0x48>
   34fb0:	0022      	movs	r2, r4
   34fb2:	2301      	movs	r3, #1
   34fb4:	321a      	adds	r2, #26
   34fb6:	9901      	ldr	r1, [sp, #4]
   34fb8:	9800      	ldr	r0, [sp, #0]
   34fba:	9e08      	ldr	r6, [sp, #32]
   34fbc:	47b0      	blx	r6
   34fbe:	1c43      	adds	r3, r0, #1
   34fc0:	d0e6      	beq.n	34f90 <_printf_common+0xa4>
   34fc2:	3701      	adds	r7, #1
   34fc4:	e7d1      	b.n	34f6a <_printf_common+0x7e>
	...

00034fc8 <_printf_i>:
   34fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   34fca:	b08b      	sub	sp, #44	; 0x2c
   34fcc:	9206      	str	r2, [sp, #24]
   34fce:	000a      	movs	r2, r1
   34fd0:	3243      	adds	r2, #67	; 0x43
   34fd2:	9307      	str	r3, [sp, #28]
   34fd4:	9005      	str	r0, [sp, #20]
   34fd6:	9204      	str	r2, [sp, #16]
   34fd8:	7e0a      	ldrb	r2, [r1, #24]
   34fda:	000c      	movs	r4, r1
   34fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   34fde:	2a6e      	cmp	r2, #110	; 0x6e
   34fe0:	d100      	bne.n	34fe4 <_printf_i+0x1c>
   34fe2:	e08f      	b.n	35104 <_printf_i+0x13c>
   34fe4:	d817      	bhi.n	35016 <_printf_i+0x4e>
   34fe6:	2a63      	cmp	r2, #99	; 0x63
   34fe8:	d02c      	beq.n	35044 <_printf_i+0x7c>
   34fea:	d808      	bhi.n	34ffe <_printf_i+0x36>
   34fec:	2a00      	cmp	r2, #0
   34fee:	d100      	bne.n	34ff2 <_printf_i+0x2a>
   34ff0:	e099      	b.n	35126 <_printf_i+0x15e>
   34ff2:	2a58      	cmp	r2, #88	; 0x58
   34ff4:	d054      	beq.n	350a0 <_printf_i+0xd8>
   34ff6:	0026      	movs	r6, r4
   34ff8:	3642      	adds	r6, #66	; 0x42
   34ffa:	7032      	strb	r2, [r6, #0]
   34ffc:	e029      	b.n	35052 <_printf_i+0x8a>
   34ffe:	2a64      	cmp	r2, #100	; 0x64
   35000:	d001      	beq.n	35006 <_printf_i+0x3e>
   35002:	2a69      	cmp	r2, #105	; 0x69
   35004:	d1f7      	bne.n	34ff6 <_printf_i+0x2e>
   35006:	6821      	ldr	r1, [r4, #0]
   35008:	681a      	ldr	r2, [r3, #0]
   3500a:	0608      	lsls	r0, r1, #24
   3500c:	d523      	bpl.n	35056 <_printf_i+0x8e>
   3500e:	1d11      	adds	r1, r2, #4
   35010:	6019      	str	r1, [r3, #0]
   35012:	6815      	ldr	r5, [r2, #0]
   35014:	e025      	b.n	35062 <_printf_i+0x9a>
   35016:	2a73      	cmp	r2, #115	; 0x73
   35018:	d100      	bne.n	3501c <_printf_i+0x54>
   3501a:	e088      	b.n	3512e <_printf_i+0x166>
   3501c:	d808      	bhi.n	35030 <_printf_i+0x68>
   3501e:	2a6f      	cmp	r2, #111	; 0x6f
   35020:	d029      	beq.n	35076 <_printf_i+0xae>
   35022:	2a70      	cmp	r2, #112	; 0x70
   35024:	d1e7      	bne.n	34ff6 <_printf_i+0x2e>
   35026:	2220      	movs	r2, #32
   35028:	6809      	ldr	r1, [r1, #0]
   3502a:	430a      	orrs	r2, r1
   3502c:	6022      	str	r2, [r4, #0]
   3502e:	e003      	b.n	35038 <_printf_i+0x70>
   35030:	2a75      	cmp	r2, #117	; 0x75
   35032:	d020      	beq.n	35076 <_printf_i+0xae>
   35034:	2a78      	cmp	r2, #120	; 0x78
   35036:	d1de      	bne.n	34ff6 <_printf_i+0x2e>
   35038:	0022      	movs	r2, r4
   3503a:	2178      	movs	r1, #120	; 0x78
   3503c:	3245      	adds	r2, #69	; 0x45
   3503e:	7011      	strb	r1, [r2, #0]
   35040:	4a6c      	ldr	r2, [pc, #432]	; (351f4 <_printf_i+0x22c>)
   35042:	e030      	b.n	350a6 <_printf_i+0xde>
   35044:	000e      	movs	r6, r1
   35046:	681a      	ldr	r2, [r3, #0]
   35048:	3642      	adds	r6, #66	; 0x42
   3504a:	1d11      	adds	r1, r2, #4
   3504c:	6019      	str	r1, [r3, #0]
   3504e:	6813      	ldr	r3, [r2, #0]
   35050:	7033      	strb	r3, [r6, #0]
   35052:	2301      	movs	r3, #1
   35054:	e079      	b.n	3514a <_printf_i+0x182>
   35056:	0649      	lsls	r1, r1, #25
   35058:	d5d9      	bpl.n	3500e <_printf_i+0x46>
   3505a:	1d11      	adds	r1, r2, #4
   3505c:	6019      	str	r1, [r3, #0]
   3505e:	2300      	movs	r3, #0
   35060:	5ed5      	ldrsh	r5, [r2, r3]
   35062:	2d00      	cmp	r5, #0
   35064:	da03      	bge.n	3506e <_printf_i+0xa6>
   35066:	232d      	movs	r3, #45	; 0x2d
   35068:	9a04      	ldr	r2, [sp, #16]
   3506a:	426d      	negs	r5, r5
   3506c:	7013      	strb	r3, [r2, #0]
   3506e:	4b62      	ldr	r3, [pc, #392]	; (351f8 <_printf_i+0x230>)
   35070:	270a      	movs	r7, #10
   35072:	9303      	str	r3, [sp, #12]
   35074:	e02f      	b.n	350d6 <_printf_i+0x10e>
   35076:	6820      	ldr	r0, [r4, #0]
   35078:	6819      	ldr	r1, [r3, #0]
   3507a:	0605      	lsls	r5, r0, #24
   3507c:	d503      	bpl.n	35086 <_printf_i+0xbe>
   3507e:	1d08      	adds	r0, r1, #4
   35080:	6018      	str	r0, [r3, #0]
   35082:	680d      	ldr	r5, [r1, #0]
   35084:	e005      	b.n	35092 <_printf_i+0xca>
   35086:	0640      	lsls	r0, r0, #25
   35088:	d5f9      	bpl.n	3507e <_printf_i+0xb6>
   3508a:	680d      	ldr	r5, [r1, #0]
   3508c:	1d08      	adds	r0, r1, #4
   3508e:	6018      	str	r0, [r3, #0]
   35090:	b2ad      	uxth	r5, r5
   35092:	4b59      	ldr	r3, [pc, #356]	; (351f8 <_printf_i+0x230>)
   35094:	2708      	movs	r7, #8
   35096:	9303      	str	r3, [sp, #12]
   35098:	2a6f      	cmp	r2, #111	; 0x6f
   3509a:	d018      	beq.n	350ce <_printf_i+0x106>
   3509c:	270a      	movs	r7, #10
   3509e:	e016      	b.n	350ce <_printf_i+0x106>
   350a0:	3145      	adds	r1, #69	; 0x45
   350a2:	700a      	strb	r2, [r1, #0]
   350a4:	4a54      	ldr	r2, [pc, #336]	; (351f8 <_printf_i+0x230>)
   350a6:	9203      	str	r2, [sp, #12]
   350a8:	681a      	ldr	r2, [r3, #0]
   350aa:	6821      	ldr	r1, [r4, #0]
   350ac:	1d10      	adds	r0, r2, #4
   350ae:	6018      	str	r0, [r3, #0]
   350b0:	6815      	ldr	r5, [r2, #0]
   350b2:	0608      	lsls	r0, r1, #24
   350b4:	d522      	bpl.n	350fc <_printf_i+0x134>
   350b6:	07cb      	lsls	r3, r1, #31
   350b8:	d502      	bpl.n	350c0 <_printf_i+0xf8>
   350ba:	2320      	movs	r3, #32
   350bc:	4319      	orrs	r1, r3
   350be:	6021      	str	r1, [r4, #0]
   350c0:	2710      	movs	r7, #16
   350c2:	2d00      	cmp	r5, #0
   350c4:	d103      	bne.n	350ce <_printf_i+0x106>
   350c6:	2320      	movs	r3, #32
   350c8:	6822      	ldr	r2, [r4, #0]
   350ca:	439a      	bics	r2, r3
   350cc:	6022      	str	r2, [r4, #0]
   350ce:	0023      	movs	r3, r4
   350d0:	2200      	movs	r2, #0
   350d2:	3343      	adds	r3, #67	; 0x43
   350d4:	701a      	strb	r2, [r3, #0]
   350d6:	6863      	ldr	r3, [r4, #4]
   350d8:	60a3      	str	r3, [r4, #8]
   350da:	2b00      	cmp	r3, #0
   350dc:	db5c      	blt.n	35198 <_printf_i+0x1d0>
   350de:	2204      	movs	r2, #4
   350e0:	6821      	ldr	r1, [r4, #0]
   350e2:	4391      	bics	r1, r2
   350e4:	6021      	str	r1, [r4, #0]
   350e6:	2d00      	cmp	r5, #0
   350e8:	d158      	bne.n	3519c <_printf_i+0x1d4>
   350ea:	9e04      	ldr	r6, [sp, #16]
   350ec:	2b00      	cmp	r3, #0
   350ee:	d064      	beq.n	351ba <_printf_i+0x1f2>
   350f0:	0026      	movs	r6, r4
   350f2:	9b03      	ldr	r3, [sp, #12]
   350f4:	3642      	adds	r6, #66	; 0x42
   350f6:	781b      	ldrb	r3, [r3, #0]
   350f8:	7033      	strb	r3, [r6, #0]
   350fa:	e05e      	b.n	351ba <_printf_i+0x1f2>
   350fc:	0648      	lsls	r0, r1, #25
   350fe:	d5da      	bpl.n	350b6 <_printf_i+0xee>
   35100:	b2ad      	uxth	r5, r5
   35102:	e7d8      	b.n	350b6 <_printf_i+0xee>
   35104:	6809      	ldr	r1, [r1, #0]
   35106:	681a      	ldr	r2, [r3, #0]
   35108:	0608      	lsls	r0, r1, #24
   3510a:	d505      	bpl.n	35118 <_printf_i+0x150>
   3510c:	1d11      	adds	r1, r2, #4
   3510e:	6019      	str	r1, [r3, #0]
   35110:	6813      	ldr	r3, [r2, #0]
   35112:	6962      	ldr	r2, [r4, #20]
   35114:	601a      	str	r2, [r3, #0]
   35116:	e006      	b.n	35126 <_printf_i+0x15e>
   35118:	0649      	lsls	r1, r1, #25
   3511a:	d5f7      	bpl.n	3510c <_printf_i+0x144>
   3511c:	1d11      	adds	r1, r2, #4
   3511e:	6019      	str	r1, [r3, #0]
   35120:	6813      	ldr	r3, [r2, #0]
   35122:	8aa2      	ldrh	r2, [r4, #20]
   35124:	801a      	strh	r2, [r3, #0]
   35126:	2300      	movs	r3, #0
   35128:	9e04      	ldr	r6, [sp, #16]
   3512a:	6123      	str	r3, [r4, #16]
   3512c:	e054      	b.n	351d8 <_printf_i+0x210>
   3512e:	681a      	ldr	r2, [r3, #0]
   35130:	1d11      	adds	r1, r2, #4
   35132:	6019      	str	r1, [r3, #0]
   35134:	6816      	ldr	r6, [r2, #0]
   35136:	2100      	movs	r1, #0
   35138:	6862      	ldr	r2, [r4, #4]
   3513a:	0030      	movs	r0, r6
   3513c:	f000 f922 	bl	35384 <memchr>
   35140:	2800      	cmp	r0, #0
   35142:	d001      	beq.n	35148 <_printf_i+0x180>
   35144:	1b80      	subs	r0, r0, r6
   35146:	6060      	str	r0, [r4, #4]
   35148:	6863      	ldr	r3, [r4, #4]
   3514a:	6123      	str	r3, [r4, #16]
   3514c:	2300      	movs	r3, #0
   3514e:	9a04      	ldr	r2, [sp, #16]
   35150:	7013      	strb	r3, [r2, #0]
   35152:	e041      	b.n	351d8 <_printf_i+0x210>
   35154:	6923      	ldr	r3, [r4, #16]
   35156:	0032      	movs	r2, r6
   35158:	9906      	ldr	r1, [sp, #24]
   3515a:	9805      	ldr	r0, [sp, #20]
   3515c:	9d07      	ldr	r5, [sp, #28]
   3515e:	47a8      	blx	r5
   35160:	1c43      	adds	r3, r0, #1
   35162:	d043      	beq.n	351ec <_printf_i+0x224>
   35164:	6823      	ldr	r3, [r4, #0]
   35166:	2500      	movs	r5, #0
   35168:	079b      	lsls	r3, r3, #30
   3516a:	d40f      	bmi.n	3518c <_printf_i+0x1c4>
   3516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3516e:	68e0      	ldr	r0, [r4, #12]
   35170:	4298      	cmp	r0, r3
   35172:	da3d      	bge.n	351f0 <_printf_i+0x228>
   35174:	0018      	movs	r0, r3
   35176:	e03b      	b.n	351f0 <_printf_i+0x228>
   35178:	0022      	movs	r2, r4
   3517a:	2301      	movs	r3, #1
   3517c:	3219      	adds	r2, #25
   3517e:	9906      	ldr	r1, [sp, #24]
   35180:	9805      	ldr	r0, [sp, #20]
   35182:	9e07      	ldr	r6, [sp, #28]
   35184:	47b0      	blx	r6
   35186:	1c43      	adds	r3, r0, #1
   35188:	d030      	beq.n	351ec <_printf_i+0x224>
   3518a:	3501      	adds	r5, #1
   3518c:	68e3      	ldr	r3, [r4, #12]
   3518e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35190:	1a9b      	subs	r3, r3, r2
   35192:	429d      	cmp	r5, r3
   35194:	dbf0      	blt.n	35178 <_printf_i+0x1b0>
   35196:	e7e9      	b.n	3516c <_printf_i+0x1a4>
   35198:	2d00      	cmp	r5, #0
   3519a:	d0a9      	beq.n	350f0 <_printf_i+0x128>
   3519c:	9e04      	ldr	r6, [sp, #16]
   3519e:	0028      	movs	r0, r5
   351a0:	0039      	movs	r1, r7
   351a2:	f7fd f977 	bl	32494 <__aeabi_uidivmod>
   351a6:	9b03      	ldr	r3, [sp, #12]
   351a8:	3e01      	subs	r6, #1
   351aa:	5c5b      	ldrb	r3, [r3, r1]
   351ac:	0028      	movs	r0, r5
   351ae:	7033      	strb	r3, [r6, #0]
   351b0:	0039      	movs	r1, r7
   351b2:	f7fd f8e9 	bl	32388 <__udivsi3>
   351b6:	1e05      	subs	r5, r0, #0
   351b8:	d1f1      	bne.n	3519e <_printf_i+0x1d6>
   351ba:	2f08      	cmp	r7, #8
   351bc:	d109      	bne.n	351d2 <_printf_i+0x20a>
   351be:	6823      	ldr	r3, [r4, #0]
   351c0:	07db      	lsls	r3, r3, #31
   351c2:	d506      	bpl.n	351d2 <_printf_i+0x20a>
   351c4:	6863      	ldr	r3, [r4, #4]
   351c6:	6922      	ldr	r2, [r4, #16]
   351c8:	4293      	cmp	r3, r2
   351ca:	dc02      	bgt.n	351d2 <_printf_i+0x20a>
   351cc:	2330      	movs	r3, #48	; 0x30
   351ce:	3e01      	subs	r6, #1
   351d0:	7033      	strb	r3, [r6, #0]
   351d2:	9b04      	ldr	r3, [sp, #16]
   351d4:	1b9b      	subs	r3, r3, r6
   351d6:	6123      	str	r3, [r4, #16]
   351d8:	9b07      	ldr	r3, [sp, #28]
   351da:	aa09      	add	r2, sp, #36	; 0x24
   351dc:	9300      	str	r3, [sp, #0]
   351de:	0021      	movs	r1, r4
   351e0:	9b06      	ldr	r3, [sp, #24]
   351e2:	9805      	ldr	r0, [sp, #20]
   351e4:	f7ff fe82 	bl	34eec <_printf_common>
   351e8:	1c43      	adds	r3, r0, #1
   351ea:	d1b3      	bne.n	35154 <_printf_i+0x18c>
   351ec:	2001      	movs	r0, #1
   351ee:	4240      	negs	r0, r0
   351f0:	b00b      	add	sp, #44	; 0x2c
   351f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   351f4:	000395c8 	.word	0x000395c8
   351f8:	000395b7 	.word	0x000395b7

000351fc <__sread>:
   351fc:	b570      	push	{r4, r5, r6, lr}
   351fe:	000c      	movs	r4, r1
   35200:	250e      	movs	r5, #14
   35202:	5f49      	ldrsh	r1, [r1, r5]
   35204:	f000 f8f0 	bl	353e8 <_read_r>
   35208:	2800      	cmp	r0, #0
   3520a:	db03      	blt.n	35214 <__sread+0x18>
   3520c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3520e:	181b      	adds	r3, r3, r0
   35210:	6563      	str	r3, [r4, #84]	; 0x54
   35212:	bd70      	pop	{r4, r5, r6, pc}
   35214:	89a3      	ldrh	r3, [r4, #12]
   35216:	4a02      	ldr	r2, [pc, #8]	; (35220 <__sread+0x24>)
   35218:	4013      	ands	r3, r2
   3521a:	81a3      	strh	r3, [r4, #12]
   3521c:	e7f9      	b.n	35212 <__sread+0x16>
   3521e:	46c0      	nop			; (mov r8, r8)
   35220:	ffffefff 	.word	0xffffefff

00035224 <__swrite>:
   35224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35226:	001f      	movs	r7, r3
   35228:	898b      	ldrh	r3, [r1, #12]
   3522a:	0005      	movs	r5, r0
   3522c:	000c      	movs	r4, r1
   3522e:	0016      	movs	r6, r2
   35230:	05db      	lsls	r3, r3, #23
   35232:	d505      	bpl.n	35240 <__swrite+0x1c>
   35234:	230e      	movs	r3, #14
   35236:	5ec9      	ldrsh	r1, [r1, r3]
   35238:	2200      	movs	r2, #0
   3523a:	2302      	movs	r3, #2
   3523c:	f000 f88e 	bl	3535c <_lseek_r>
   35240:	89a3      	ldrh	r3, [r4, #12]
   35242:	4a05      	ldr	r2, [pc, #20]	; (35258 <__swrite+0x34>)
   35244:	0028      	movs	r0, r5
   35246:	4013      	ands	r3, r2
   35248:	81a3      	strh	r3, [r4, #12]
   3524a:	0032      	movs	r2, r6
   3524c:	230e      	movs	r3, #14
   3524e:	5ee1      	ldrsh	r1, [r4, r3]
   35250:	003b      	movs	r3, r7
   35252:	f000 f839 	bl	352c8 <_write_r>
   35256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35258:	ffffefff 	.word	0xffffefff

0003525c <__sseek>:
   3525c:	b570      	push	{r4, r5, r6, lr}
   3525e:	000c      	movs	r4, r1
   35260:	250e      	movs	r5, #14
   35262:	5f49      	ldrsh	r1, [r1, r5]
   35264:	f000 f87a 	bl	3535c <_lseek_r>
   35268:	89a3      	ldrh	r3, [r4, #12]
   3526a:	1c42      	adds	r2, r0, #1
   3526c:	d103      	bne.n	35276 <__sseek+0x1a>
   3526e:	4a05      	ldr	r2, [pc, #20]	; (35284 <__sseek+0x28>)
   35270:	4013      	ands	r3, r2
   35272:	81a3      	strh	r3, [r4, #12]
   35274:	bd70      	pop	{r4, r5, r6, pc}
   35276:	2280      	movs	r2, #128	; 0x80
   35278:	0152      	lsls	r2, r2, #5
   3527a:	4313      	orrs	r3, r2
   3527c:	81a3      	strh	r3, [r4, #12]
   3527e:	6560      	str	r0, [r4, #84]	; 0x54
   35280:	e7f8      	b.n	35274 <__sseek+0x18>
   35282:	46c0      	nop			; (mov r8, r8)
   35284:	ffffefff 	.word	0xffffefff

00035288 <__sclose>:
   35288:	b510      	push	{r4, lr}
   3528a:	230e      	movs	r3, #14
   3528c:	5ec9      	ldrsh	r1, [r1, r3]
   3528e:	f000 f82f 	bl	352f0 <_close_r>
   35292:	bd10      	pop	{r4, pc}

00035294 <strchr>:
   35294:	b2c9      	uxtb	r1, r1
   35296:	7803      	ldrb	r3, [r0, #0]
   35298:	2b00      	cmp	r3, #0
   3529a:	d004      	beq.n	352a6 <strchr+0x12>
   3529c:	4299      	cmp	r1, r3
   3529e:	d100      	bne.n	352a2 <strchr+0xe>
   352a0:	4770      	bx	lr
   352a2:	3001      	adds	r0, #1
   352a4:	e7f7      	b.n	35296 <strchr+0x2>
   352a6:	424b      	negs	r3, r1
   352a8:	4159      	adcs	r1, r3
   352aa:	4249      	negs	r1, r1
   352ac:	4008      	ands	r0, r1
   352ae:	e7f7      	b.n	352a0 <strchr+0xc>

000352b0 <__ascii_wctomb>:
   352b0:	1e0b      	subs	r3, r1, #0
   352b2:	d004      	beq.n	352be <__ascii_wctomb+0xe>
   352b4:	2aff      	cmp	r2, #255	; 0xff
   352b6:	d904      	bls.n	352c2 <__ascii_wctomb+0x12>
   352b8:	238a      	movs	r3, #138	; 0x8a
   352ba:	6003      	str	r3, [r0, #0]
   352bc:	3b8b      	subs	r3, #139	; 0x8b
   352be:	0018      	movs	r0, r3
   352c0:	4770      	bx	lr
   352c2:	700a      	strb	r2, [r1, #0]
   352c4:	2301      	movs	r3, #1
   352c6:	e7fa      	b.n	352be <__ascii_wctomb+0xe>

000352c8 <_write_r>:
   352c8:	b570      	push	{r4, r5, r6, lr}
   352ca:	0005      	movs	r5, r0
   352cc:	0008      	movs	r0, r1
   352ce:	0011      	movs	r1, r2
   352d0:	2200      	movs	r2, #0
   352d2:	4c06      	ldr	r4, [pc, #24]	; (352ec <_write_r+0x24>)
   352d4:	6022      	str	r2, [r4, #0]
   352d6:	001a      	movs	r2, r3
   352d8:	f7f5 fbee 	bl	2aab8 <_write>
   352dc:	1c43      	adds	r3, r0, #1
   352de:	d103      	bne.n	352e8 <_write_r+0x20>
   352e0:	6823      	ldr	r3, [r4, #0]
   352e2:	2b00      	cmp	r3, #0
   352e4:	d000      	beq.n	352e8 <_write_r+0x20>
   352e6:	602b      	str	r3, [r5, #0]
   352e8:	bd70      	pop	{r4, r5, r6, pc}
   352ea:	46c0      	nop			; (mov r8, r8)
   352ec:	20005b48 	.word	0x20005b48

000352f0 <_close_r>:
   352f0:	2300      	movs	r3, #0
   352f2:	b570      	push	{r4, r5, r6, lr}
   352f4:	4c06      	ldr	r4, [pc, #24]	; (35310 <_close_r+0x20>)
   352f6:	0005      	movs	r5, r0
   352f8:	0008      	movs	r0, r1
   352fa:	6023      	str	r3, [r4, #0]
   352fc:	f7f5 fc30 	bl	2ab60 <_close>
   35300:	1c43      	adds	r3, r0, #1
   35302:	d103      	bne.n	3530c <_close_r+0x1c>
   35304:	6823      	ldr	r3, [r4, #0]
   35306:	2b00      	cmp	r3, #0
   35308:	d000      	beq.n	3530c <_close_r+0x1c>
   3530a:	602b      	str	r3, [r5, #0]
   3530c:	bd70      	pop	{r4, r5, r6, pc}
   3530e:	46c0      	nop			; (mov r8, r8)
   35310:	20005b48 	.word	0x20005b48

00035314 <_fstat_r>:
   35314:	2300      	movs	r3, #0
   35316:	b570      	push	{r4, r5, r6, lr}
   35318:	4c06      	ldr	r4, [pc, #24]	; (35334 <_fstat_r+0x20>)
   3531a:	0005      	movs	r5, r0
   3531c:	0008      	movs	r0, r1
   3531e:	0011      	movs	r1, r2
   35320:	6023      	str	r3, [r4, #0]
   35322:	f7f5 fc27 	bl	2ab74 <_fstat>
   35326:	1c43      	adds	r3, r0, #1
   35328:	d103      	bne.n	35332 <_fstat_r+0x1e>
   3532a:	6823      	ldr	r3, [r4, #0]
   3532c:	2b00      	cmp	r3, #0
   3532e:	d000      	beq.n	35332 <_fstat_r+0x1e>
   35330:	602b      	str	r3, [r5, #0]
   35332:	bd70      	pop	{r4, r5, r6, pc}
   35334:	20005b48 	.word	0x20005b48

00035338 <_isatty_r>:
   35338:	2300      	movs	r3, #0
   3533a:	b570      	push	{r4, r5, r6, lr}
   3533c:	4c06      	ldr	r4, [pc, #24]	; (35358 <_isatty_r+0x20>)
   3533e:	0005      	movs	r5, r0
   35340:	0008      	movs	r0, r1
   35342:	6023      	str	r3, [r4, #0]
   35344:	f7f5 fc24 	bl	2ab90 <_isatty>
   35348:	1c43      	adds	r3, r0, #1
   3534a:	d103      	bne.n	35354 <_isatty_r+0x1c>
   3534c:	6823      	ldr	r3, [r4, #0]
   3534e:	2b00      	cmp	r3, #0
   35350:	d000      	beq.n	35354 <_isatty_r+0x1c>
   35352:	602b      	str	r3, [r5, #0]
   35354:	bd70      	pop	{r4, r5, r6, pc}
   35356:	46c0      	nop			; (mov r8, r8)
   35358:	20005b48 	.word	0x20005b48

0003535c <_lseek_r>:
   3535c:	b570      	push	{r4, r5, r6, lr}
   3535e:	0005      	movs	r5, r0
   35360:	0008      	movs	r0, r1
   35362:	0011      	movs	r1, r2
   35364:	2200      	movs	r2, #0
   35366:	4c06      	ldr	r4, [pc, #24]	; (35380 <_lseek_r+0x24>)
   35368:	6022      	str	r2, [r4, #0]
   3536a:	001a      	movs	r2, r3
   3536c:	f7f5 fc19 	bl	2aba2 <_lseek>
   35370:	1c43      	adds	r3, r0, #1
   35372:	d103      	bne.n	3537c <_lseek_r+0x20>
   35374:	6823      	ldr	r3, [r4, #0]
   35376:	2b00      	cmp	r3, #0
   35378:	d000      	beq.n	3537c <_lseek_r+0x20>
   3537a:	602b      	str	r3, [r5, #0]
   3537c:	bd70      	pop	{r4, r5, r6, pc}
   3537e:	46c0      	nop			; (mov r8, r8)
   35380:	20005b48 	.word	0x20005b48

00035384 <memchr>:
   35384:	b2c9      	uxtb	r1, r1
   35386:	1882      	adds	r2, r0, r2
   35388:	4290      	cmp	r0, r2
   3538a:	d101      	bne.n	35390 <memchr+0xc>
   3538c:	2000      	movs	r0, #0
   3538e:	4770      	bx	lr
   35390:	7803      	ldrb	r3, [r0, #0]
   35392:	428b      	cmp	r3, r1
   35394:	d0fb      	beq.n	3538e <memchr+0xa>
   35396:	3001      	adds	r0, #1
   35398:	e7f6      	b.n	35388 <memchr+0x4>

0003539a <_realloc_r>:
   3539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3539c:	0007      	movs	r7, r0
   3539e:	000d      	movs	r5, r1
   353a0:	0016      	movs	r6, r2
   353a2:	2900      	cmp	r1, #0
   353a4:	d105      	bne.n	353b2 <_realloc_r+0x18>
   353a6:	0011      	movs	r1, r2
   353a8:	f7fe fe9e 	bl	340e8 <_malloc_r>
   353ac:	0004      	movs	r4, r0
   353ae:	0020      	movs	r0, r4
   353b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   353b2:	2a00      	cmp	r2, #0
   353b4:	d103      	bne.n	353be <_realloc_r+0x24>
   353b6:	f7fe fe4d 	bl	34054 <_free_r>
   353ba:	0034      	movs	r4, r6
   353bc:	e7f7      	b.n	353ae <_realloc_r+0x14>
   353be:	f000 f827 	bl	35410 <_malloc_usable_size_r>
   353c2:	002c      	movs	r4, r5
   353c4:	4286      	cmp	r6, r0
   353c6:	d9f2      	bls.n	353ae <_realloc_r+0x14>
   353c8:	0031      	movs	r1, r6
   353ca:	0038      	movs	r0, r7
   353cc:	f7fe fe8c 	bl	340e8 <_malloc_r>
   353d0:	1e04      	subs	r4, r0, #0
   353d2:	d0ec      	beq.n	353ae <_realloc_r+0x14>
   353d4:	0029      	movs	r1, r5
   353d6:	0032      	movs	r2, r6
   353d8:	f7fe fe18 	bl	3400c <memcpy>
   353dc:	0029      	movs	r1, r5
   353de:	0038      	movs	r0, r7
   353e0:	f7fe fe38 	bl	34054 <_free_r>
   353e4:	e7e3      	b.n	353ae <_realloc_r+0x14>
	...

000353e8 <_read_r>:
   353e8:	b570      	push	{r4, r5, r6, lr}
   353ea:	0005      	movs	r5, r0
   353ec:	0008      	movs	r0, r1
   353ee:	0011      	movs	r1, r2
   353f0:	2200      	movs	r2, #0
   353f2:	4c06      	ldr	r4, [pc, #24]	; (3540c <_read_r+0x24>)
   353f4:	6022      	str	r2, [r4, #0]
   353f6:	001a      	movs	r2, r3
   353f8:	f7f5 fb34 	bl	2aa64 <_read>
   353fc:	1c43      	adds	r3, r0, #1
   353fe:	d103      	bne.n	35408 <_read_r+0x20>
   35400:	6823      	ldr	r3, [r4, #0]
   35402:	2b00      	cmp	r3, #0
   35404:	d000      	beq.n	35408 <_read_r+0x20>
   35406:	602b      	str	r3, [r5, #0]
   35408:	bd70      	pop	{r4, r5, r6, pc}
   3540a:	46c0      	nop			; (mov r8, r8)
   3540c:	20005b48 	.word	0x20005b48

00035410 <_malloc_usable_size_r>:
   35410:	1f0b      	subs	r3, r1, #4
   35412:	681b      	ldr	r3, [r3, #0]
   35414:	1f18      	subs	r0, r3, #4
   35416:	2b00      	cmp	r3, #0
   35418:	da01      	bge.n	3541e <_malloc_usable_size_r+0xe>
   3541a:	580b      	ldr	r3, [r1, r0]
   3541c:	18c0      	adds	r0, r0, r3
   3541e:	4770      	bx	lr
   35420:	00000002 	.word	0x00000002
   35424:	00000003 	.word	0x00000003
   35428:	00000028 	.word	0x00000028
   3542c:	00000029 	.word	0x00000029
   35430:	00000004 	.word	0x00000004
   35434:	00000005 	.word	0x00000005
   35438:	00000006 	.word	0x00000006
   3543c:	00000007 	.word	0x00000007
   35440:	0000ffff 	.word	0x0000ffff
   35444:	0000ffff 	.word	0x0000ffff
   35448:	00000022 	.word	0x00000022
   3544c:	00000023 	.word	0x00000023
   35450:	0000ffff 	.word	0x0000ffff
   35454:	0000ffff 	.word	0x0000ffff
   35458:	0000ffff 	.word	0x0000ffff
   3545c:	0000ffff 	.word	0x0000ffff
   35460:	00000008 	.word	0x00000008
   35464:	00000009 	.word	0x00000009
   35468:	0000000a 	.word	0x0000000a
   3546c:	0000000b 	.word	0x0000000b
   35470:	000124da 	.word	0x000124da
   35474:	000124e0 	.word	0x000124e0
   35478:	000124e0 	.word	0x000124e0
   3547c:	000124e0 	.word	0x000124e0
   35480:	000124e0 	.word	0x000124e0
   35484:	000124e0 	.word	0x000124e0
   35488:	000124e0 	.word	0x000124e0
   3548c:	000124e0 	.word	0x000124e0
   35490:	000124e0 	.word	0x000124e0
   35494:	000124e0 	.word	0x000124e0
   35498:	000124e0 	.word	0x000124e0
   3549c:	000124e0 	.word	0x000124e0
   354a0:	000124e0 	.word	0x000124e0
   354a4:	000124e0 	.word	0x000124e0
   354a8:	000124e0 	.word	0x000124e0
   354ac:	000124e0 	.word	0x000124e0
   354b0:	000124b8 	.word	0x000124b8
   354b4:	000124e0 	.word	0x000124e0
   354b8:	000124e0 	.word	0x000124e0
   354bc:	000124e0 	.word	0x000124e0
   354c0:	000124e0 	.word	0x000124e0
   354c4:	000124e0 	.word	0x000124e0
   354c8:	000124e0 	.word	0x000124e0
   354cc:	000124e0 	.word	0x000124e0
   354d0:	000124e0 	.word	0x000124e0
   354d4:	000124e0 	.word	0x000124e0
   354d8:	000124e0 	.word	0x000124e0
   354dc:	000124e0 	.word	0x000124e0
   354e0:	000124e0 	.word	0x000124e0
   354e4:	000124e0 	.word	0x000124e0
   354e8:	000124e0 	.word	0x000124e0
   354ec:	000124e0 	.word	0x000124e0
   354f0:	000124d4 	.word	0x000124d4
   354f4:	000124e0 	.word	0x000124e0
   354f8:	000124e0 	.word	0x000124e0
   354fc:	000124e0 	.word	0x000124e0
   35500:	000124e0 	.word	0x000124e0
   35504:	000124e0 	.word	0x000124e0
   35508:	000124e0 	.word	0x000124e0
   3550c:	000124e0 	.word	0x000124e0
   35510:	000124e0 	.word	0x000124e0
   35514:	000124e0 	.word	0x000124e0
   35518:	000124e0 	.word	0x000124e0
   3551c:	000124e0 	.word	0x000124e0
   35520:	000124e0 	.word	0x000124e0
   35524:	000124e0 	.word	0x000124e0
   35528:	000124e0 	.word	0x000124e0
   3552c:	000124e0 	.word	0x000124e0
   35530:	000124ce 	.word	0x000124ce
   35534:	00012476 	.word	0x00012476
   35538:	0001248c 	.word	0x0001248c
   3553c:	000124a2 	.word	0x000124a2
   35540:	0001245c 	.word	0x0001245c

00035544 <pcWelcomeMessage>:
   35544:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   35554:	20657079 706c6548 206f7420 77656976     ype Help to view
   35564:	6c206120 20747369 7220666f 73696765      a list of regis
   35574:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   35584:	0000000a 00007766 203a7766 6e776f44     ....fw..fw: Down
   35594:	64616f6c 66206120 20656c69 20646e61     load a file and 
   355a4:	66726570 206d726f 46206e61 70752057     perform an FW up
   355b4:	65746164 00000a0d 65736572 00000074     date....reset...
   355c4:	65736572 52203a74 74657365 68742073     reset: Resets th
   355d4:	65642065 65636976 00000a0d 74746567     e device....gett
   355e4:	00706d65 74746567 3a706d65 74655220     emp.gettemp: Ret
   355f4:	736e7275 65687420 6d657420 61726570     urns the tempera
   35604:	65727574 6f726620 6874206d 48532065     ture from the SH
   35614:	20334354 736e6553 0d2e726f 0000000a     TC3 Sensor......
   35624:	00633269 3a633269 61635320 4920736e     i2c.i2c: Scans I
   35634:	62204332 0a0d7375 00000000 00736c63     2C bus......cls.
   35644:	3a736c63 656c4320 20737261 20656874     cls: Clears the 
   35654:	6d726574 6c616e69 72637320 0d6e6565     terminal screen.
   35664:	0000000a 6c756f43 6f6e2064 6c612074     ....Could not al
   35674:	61636f6c 73206574 70616d65 65726f68     locate semaphore
   35684:	00000a0d 00000a0d 0000616f 325b6325     ........oa..%c[2
   35694:	003e0d4b 00082008 325b6325 0000004a     K.>.. ..%c[2J...
   356a4:	74617453 6f207375 61772066 7075656b     Status of wakeup
   356b4:	25203a20 000a0d64 74617453 6f207375      : %d...Status o
   356c4:	65722066 63206461 3a20646d 0d642520     f read cmd : %d.
   356d4:	0000000a 706d6554 25203a20 000a0d64     ....Temp : %d...
   356e4:	31202030 20322020 20203320 35202034     0  1  2  3  4  5
   356f4:	20362020 20203720 39202038 20612020       6  7  8  9  a 
   35704:	20206220 64202063 20652020 0a0d6620      b  c  d  e  f..
   35714:	00000000 78323025 0000203a 78323025     ....%02x: ..%02x
   35724:	00000020                                 ...

00035728 <xOTAUCommand>:
   35728:	00035588 0003558c 00013a69 00000000     .U...U..i:......

00035738 <xResetCommand>:
   35738:	000355bc 000355c4 00013aa1 00000000     .U...U...:......

00035748 <xTemperatureSensorGetTemperature>:
   35748:	000355e0 000355e8 00013ac1 00000000     .U...U...:......

00035758 <xI2cScan>:
   35758:	00035624 00035628 00013b99 00000000     $V..(V...;......

00035768 <xClearScreen>:
   35768:	00035640 00035644 00013a21 00000000     @V..DV..!:......
   35778:	43544853 00000033 74617453 6f207375     SHTC3...Status o
   35788:	61772066 7075656b 25203a20 000a0d64     f wakeup : %d...
   35798:	00001735 6f727245 65722072 6e696461     5...Error readin
   357a8:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   357b8:	6e2f722f 00000000 00006678              /r/n....xf..

000357c4 <main_mqtt_broker>:
   357c4:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   357d4:	0000006d 64333025 00000000 72617473     m...%03d....star
   357e4:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   357f4:	726f7473 20656761 20746f6e 64616572     storage not read
   35804:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   35814:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   35824:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   35834:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   35844:	203a6461 75716572 20747365 73207369     ad: request is s
   35854:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   35864:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   35874:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   35884:	726c6120 79646165 000a0d2e 72617473      already....star
   35894:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   358a4:	20676e69 50545448 71657220 74736575     ing HTTP request
   358b4:	0d2e2e2e 0000000a 70747468 372f2f3a     ........http://7
   358c4:	33322e34 38362e35 2f32362e 35455345     4.235.68.62/ESE5
   358d4:	4d5f3631 5f4e4941 622e5746 00006e69     16_MAIN_FW.bin..
   358e4:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   358f4:	65203a74 7974706d 74616420 0a0d2e61     t: empty data...
   35904:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   35914:	656b6361 66203a74 20656c69 656d616e     acket: file name
   35924:	20736920 61766e69 2e64696c 776f4420      is invalid. Dow
   35934:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   35944:	0000000a 726f7473 69665f65 705f656c     ....store_file_p
   35954:	656b6361 63203a74 74616572 20676e69     acket: creating 
   35964:	656c6966 73255b20 000a0d5d 726f7473     file [%s]...stor
   35974:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   35984:	20656c69 61657263 6e6f6974 72726520     ile creation err
   35994:	2021726f 3a746572 0a0d6425 00000000     or! ret:%d......
   359a4:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   359b4:	66203a74 20656c69 74697277 72652065     t: file write er
   359c4:	2c726f72 776f6420 616f6c6e 61632064     ror, download ca
   359d4:	6c65636e 0d2e6465 0000000a 726f7473     nceled......stor
   359e4:	69665f65 705f656c 656b6361 72203a74     e_file_packet: r
   359f4:	69656365 5b646576 5d756c25 6966202c     eceived[%lu], fi
   35a04:	7320656c 5b657a69 5d756c25 00000a0d     le size[%lu]....
   35a14:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35a24:	66203a74 20656c69 6e776f64 64616f6c     t: file download
   35a34:	73206465 65636375 75667373 2e796c6c     ed successfully.
   35a44:	00000a0d 70747468 696c635f 5f746e65     ....http_client_
   35a54:	6c6c6163 6b636162 5448203a 63205054     callback: HTTP c
   35a64:	6e65696c 6f732074 74656b63 6e6f6320     lient socket con
   35a74:	7463656e 0d2e6465 0000000a 70747468     nected......http
   35a84:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   35a94:	6572203a 73657571 6f632074 656c706d     : request comple
   35aa4:	2e646574 00000a0d 70747468 696c635f     ted.....http_cli
   35ab4:	5f746e65 6c6c6163 6b636162 6572203a     ent_callback: re
   35ac4:	76696563 72206465 6f707365 2065736e     ceived response 
   35ad4:	64207525 20617461 657a6973 0d752520     %u data size %u.
   35ae4:	0000000a 70747468 696c635f 5f746e65     ....http_client_
   35af4:	6c6c6163 6b636162 6964203a 6e6f6373     callback: discon
   35b04:	7463656e 206e6f69 73616572 253a6e6f     nection reason:%
   35b14:	000a0d64 6f736572 5f65766c 203a6263     d...resolve_cb: 
   35b24:	49207325 64612050 73657264 73692073     %s IP address is
   35b34:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
   35b44:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   35b54:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
   35b64:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   35b74:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
   35b84:	0a0d4445 00000000 6863616d 33323161     ED......macha123
   35b94:	00000000 6863616d 00000061 69666977     ....macha...wifi
   35ba4:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   35bb4:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   35bc4:	00000000 6f727245 6f632072 63656e6e     ....Error connec
   35bd4:	676e6974 206f7420 5454514d 6f724220     ting to MQTT Bro
   35be4:	2172656b 00000a0d 74696e69 6f74735f     ker!....init_sto
   35bf4:	65676172 6c70203a 65736165 756c7020     rage: please plu
   35c04:	6e612067 2f445320 20434d4d 64726163     g an SD/MMC card
   35c14:	206e6920 746f6c73 0d2e2e2e 0000000a      in slot........
   35c24:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   35c34:	72614320 6e692064 6c617473 6166206c      Card install fa
   35c44:	64656c69 000a0d2e 74696e69 6f74735f     iled....init_sto
   35c54:	65676172 7274203a 6e752079 67756c70     rage: try unplug
   35c64:	646e6120 2d657220 67756c70 65687420      and re-plug the
   35c74:	72616320 0a0d2e64 00000000 74696e69      card.......init
   35c84:	6f74735f 65676172 6f6d203a 69746e75     _storage: mounti
   35c94:	5320676e 61632044 2e2e6472 000a0d2e     ng SD card......
   35ca4:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   35cb4:	72616320 6f6d2064 20746e75 6c696166      card mount fail
   35cc4:	20216465 73657228 29642520 00000a0d     ed! (res %d)....
   35cd4:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   35ce4:	72616320 6f6d2064 20746e75 0d2e4b4f      card mount OK..
   35cf4:	0000000a 666e6f63 72756769 74685f65     ....configure_ht
   35d04:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   35d14:	65696c63 6920746e 6974696e 7a696c61     client initializ
   35d24:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   35d34:	25207365 0a0d2964 00000000 25200a0d     es %d)........ %
   35d44:	00732a2e 28626772 00000000 47520a0d     .*s.rgb(......RG
   35d54:	64252042 20642520 0a0d6425 00000000     B %d %d %d......
   35d64:	6167227b 3a22656d 0000005b 61470a0d     {"game":[.....Ga
   35d74:	6d20656d 61737365 72206567 69656365     me message recei
   35d84:	21646576 00000a0d 732a2e25 00000000     ved!....%.*s....
   35d94:	61500a0d 64657372 6d6f4320 646e616d     ..Parsed Command
   35da4:	0000203a 002c6425 65530a0d 7020746e     : ..%d,...Sent p
   35db4:	2079616c 63206f74 72746e6f 0d216c6f     lay to control!.
   35dc4:	0000000a 61470a0d 6d20656d 61737365     ......Game messa
   35dd4:	72206567 69656365 20646576 20747562     ge received but 
   35de4:	20746f6e 65646e75 6f747372 0d21646f     not understood!.
   35df4:	0000000a 42200a0d 6f747475 6f74206e     ...... Button to
   35e04:	20636970 65636572 64657669 000a0d21     pic received!...
   35e14:	706d6554 25203a20 000a0d73 00000031     Temp : %s...1...
   35e24:	00000032 56206f4e 00006c61 69440a0d     2...No Val....Di
   35e34:	6e617473 74206563 6369706f 63657220     stance topic rec
   35e44:	65766965 0a0d2164 00000000 61440a0d     eived!........Da
   35e54:	73206174 20746e65 0d3a6f74 0000000a     ta sent to:.....
   35e64:	2e250a0d 0a0d732a 00000000 203e3e20     ..%.*s...... >> 
   35e74:	00000000 4c5f3250 455f4445 31354553     ....P2_LED_ESE51
   35e84:	32545f36 00000000 736c6166 00000065     6_T2....false...
   35e94:	65757274 00000000 6f430a0d 63656e6e     true......Connec
   35ea4:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   35eb4:	0000002e 69766f43 31636564 00003332     ....Covidec123..
   35ec4:	69766f43 00636564 5454514d 72452020     Covidec.MQTT  Er
   35ed4:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   35ee4:	20646574 62206f74 656b6f72 000a0d72     ted to broker...
   35ef4:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   35f04:	7262206f 72656b6f 00000a0d 6e6e6f43     o broker....Conn
   35f14:	20746365 6c696166 206f7420 76726573     ect fail to serv
   35f24:	25287265 20212973 72746572 74692079     er(%s)! retry it
   35f34:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   35f44:	0000000a 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   35f54:	545f3631 00000032 495f3250 455f554d     16_T2...P2_IMU_E
   35f64:	31354553 32545f36 00000000 5454514d     SE516_T2....MQTT
   35f74:	6e6f4320 7463656e 0a0d6465 00000000      Connected......
   35f84:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
   35f94:	20656e69 72756f79 63636120 21737365     ine your access!
   35fa4:	72726520 6320726f 2065646f 0a0d6425      error code %d..
   35fb4:	00000000 5454514d 73696420 6e6e6f63     ....MQTT disconn
   35fc4:	65746365 000a0d64 5454514d 696e6920     ected...MQTT ini
   35fd4:	6c616974 74617a69 206e6f69 6c696166     tialization fail
   35fe4:	202e6465 6f727245 6f632072 69206564     ed. Error code i
   35ff4:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
   36004:	67657220 65747369 61632072 61626c6c      register callba
   36014:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
   36024:	646f6320 73692065 64252820 000a0d29      code is (%d)...
   36034:	2264227b 74227b3a 22706d65 7d64253a     {"d":{"temp":%d}
   36044:	0000007d 4941465b 72205d4c 25207365     }...[FAIL] res %
   36054:	000a0d64 67616c46 78742e41 64612074     d...FlagA.txt ad
   36064:	21646564 00000a0d 6c463a30 2e416761     ded!....0:FlagA.
   36074:	00747874 6e6e6f43 65746365 6f742064     txt.Connected to
   36084:	54514d20 72422054 72656b6f 000a0d21      MQTT Broker!...
   36094:	6d69227b 3a227875 202c6425 756d6922     {"imux":%d, "imu
   360a4:	203a2279 202c6425 756d6922 203a227a     y": %d, "imuz": 
   360b4:	007d6425 00006425 69766f63 65645f64     %d}.%d..covid_de
   360c4:	74636574 2f73726f 706d6574 74617265     tectors/temperat
   360d4:	00657275 69766f63 65645f64 74636574     ure.covid_detect
   360e4:	2f73726f 72616568 74617274 00000065     ors/heartrate...
   360f4:	00007d5d 00000a0d 475f3150 5f454d41     ]}......P1_GAME_
   36104:	35455345 545f3631 00000032 4f525245     ESE516_T2...ERRO
   36114:	6e492052 61697469 697a696c 5720676e     R Initializing W
   36124:	20696669 61746144 65757120 21736575     ifi Data queues!
   36134:	00000a0d 35455345 2d203631 66695720     ....ESE516 - Wif
   36144:	6e492069 43207469 0d65646f 0000000a     i Init Code.....
   36154:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   36164:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   36174:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
   36184:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
   36194:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
   361a4:	5454514d 6e657320 73252064 00000a0d     MQTT send %s....
   361b4:	00015ba4 00015bb0 00015bc2 00015c18     .[...[...[...\..
   361c4:	00015c38 706c6568 00000000 65680a0d     8\..help......he
   361d4:	0d3a706c 694c200a 20737473 206c6c61     lp:.. Lists all 
   361e4:	20656874 69676572 72657473 63206465     the registered c
   361f4:	616d6d6f 0d73646e 000a0d0a 6f636e49     ommands.....Inco
   36204:	63657272 6f632074 6e616d6d 61702064     rrect command pa
   36214:	656d6172 28726574 202e2973 746e4520     rameter(s).  Ent
   36224:	22207265 706c6568 6f742022 65697620     er "help" to vie
   36234:	20612077 7473696c 20666f20 69617661     w a list of avai
   36244:	6c62616c 6f632065 6e616d6d 0d2e7364     lable commands..
   36254:	000a0d0a 6d6d6f43 20646e61 20746f6e     ....Command not 
   36264:	6f636572 73696e67 202e6465 746e4520     recognised.  Ent
   36274:	27207265 706c6568 6f742027 65697620     er 'help' to vie
   36284:	20612077 7473696c 20666f20 69617661     w a list of avai
   36294:	6c62616c 6f632065 6e616d6d 0d2e7364     lable commands..
   362a4:	000a0d0a                                ....

000362a8 <xHelpCommand>:
   362a8:	000361c8 000361d0 000179d9 00000000     .a...a...y......
   362b8:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   362c8:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   362d8:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   362e8:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   362f8:	78656e55 74636570 61206465 6d756772     Unexpected argum
   36308:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   36318:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   36328:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   36338:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   36348:	2073656c 6e69202d 61657263 54206573     les - increase T
   36358:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   36368:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   36378:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   36388:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   36398:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   363a8:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   363b8:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   363c8:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   363d8:	6e616820 73656c64 69202d20 6572636e      handles - incre
   363e8:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   363f8:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   36408:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   36418:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   36428:	6e616820 73656c64 69202d20 6572636e      handles - incre
   36438:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   36448:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   36458:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   36468:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   36478:	73656c64 69202d20 6572636e 20657361     dles - increase 
   36488:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   36498:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   364a8:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   364b8:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   364c8:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   364d8:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   364e8:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   364f8:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   36508:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   36518:	202d2073 72636e69 65736165 43525420     s - increase TRC
   36528:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   36538:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   36548:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   36558:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   36568:	646e6168 2073656c 6e69202d 61657263     handles - increa
   36578:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   36588:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   36598:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   365a8:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   365b8:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   365c8:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   365d8:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   365e8:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   365f8:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   36608:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   36618:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   36628:	63746365 7373616c 00000021 000180fe     ectclass!.......
   36638:	000180f6 000180fa 000180ee 000180f2     ................
   36648:	00018102 00018106 0001810a 0001810e     ................
   36658:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   36668:	64726f63 6e207265 6920746f 6974696e     corder not initi
   36678:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   36688:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   36698:	00216461 61747328 70757472 00000029     ad!.(startup)...
   366a8:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   366b8:	64726f63 6e207265 6920746f 6974696e     corder not initi
   366c8:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   366d8:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   366e8:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   366f8:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   36708:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   36718:	61762064 2065756c 20726f66 646e6168     d value for hand
   36728:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   36738:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   36748:	7265706f 73656974 616e203a 3d20656d     operties: name =
   36758:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   36768:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   36778:	64726f63 62207265 21797375 65655320     corder busy! See
   36788:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   36798:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   367a8:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   367b8:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   367c8:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   367d8:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   367e8:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   367f8:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   36808:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   36818:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   36828:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   36838:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   36848:	6f636572 72656472 73756220 53202179     recorder busy! S
   36858:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   36868:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   36878:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   36888:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   36898:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   368a8:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   368b8:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   368c8:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   368d8:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   368e8:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   368f8:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   36908:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   36918:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   36928:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   36938:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   36948:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   36958:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   36968:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   36978:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   36988:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   36998:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   369a8:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   369b8:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   369c8:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   369d8:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   369e8:	72657473 69727453 203a676e 6562616c     sterString: labe
   369f8:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   36a08:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36a18:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   36a28:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   36a38:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   36a48:	72656472 73756220 202d2079 68676968     rder busy - high
   36a58:	69727020 7469726f 53492079 73752052      priority ISR us
   36a68:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   36a78:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36a88:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   36a98:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   36aa8:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   36ab8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36ac8:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36ad8:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   36ae8:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36af8:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   36b08:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   36b18:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   36b28:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   36b38:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36b48:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36b58:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   36b68:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   36b78:	00000072 6f636552 72656472 73756220     r...Recorder bus
   36b88:	202d2079 68676968 69727020 7469726f     y - high priorit
   36b98:	53492079 73752052 20676e69 63737973     y ISR using sysc
   36ba8:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   36bb8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36bc8:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36bd8:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   36be8:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   36bf8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36c08:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36c18:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   36c28:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   36c38:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   36c48:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36c58:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36c68:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   36c78:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   36c88:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   36c98:	72656472 73756220 202d2079 68676968     rder busy - high
   36ca8:	69727020 7469726f 53492079 73752052      priority ISR us
   36cb8:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   36cc8:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36cd8:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   36ce8:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   36cf8:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   36d08:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36d18:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   36d28:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   36d38:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   36d48:	76206469 65756c61 726f6620 74766520     id value for evt
   36d58:	65646f63 00000000 6f636552 72656472     code....Recorder
   36d68:	73756220 202d2079 68676968 69727020      busy - high pri
   36d78:	7469726f 53492079 73752052 20676e69     ority ISR using 
   36d88:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   36d98:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36da8:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   36db8:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   36dc8:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   36dd8:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   36de8:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   36df8:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   36e08:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   36e18:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   36e28:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   36e38:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36e48:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   36e58:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   36e68:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   36e78:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   36e88:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   36e98:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   36ea8:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   36eb8:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   36ec8:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   36ed8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36ee8:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   36ef8:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   36f08:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   36f18:	6c617620 66206575 6820726f 6c646e61      value for handl
   36f28:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   36f38:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   36f48:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   36f58:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   36f68:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   36f78:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36f88:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   36f98:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   36fa8:	76206469 65756c61 726f6620 00646920     id value for id.
   36fb8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36fc8:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   36fd8:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   36fe8:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   36ff8:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   37008:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37018:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   37028:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   37038:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   37048:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37058:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   37068:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   37078:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   37088:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37098:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   370a8:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   370b8:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   370c8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   370d8:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   370e8:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   370f8:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   37108:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37118:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   37128:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   37138:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   37148:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37158:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   37168:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   37178:	76206469 65756c61 726f6620 6e616820     id value for han
   37188:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   37198:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   371a8:	69206f74 7865646e 74756f20 65646973     to index outside
   371b8:	65766520 6220746e 65666675 00002172      event buffer!..
   371c8:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   371d8:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   371e8:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   371f8:	6a626f20 63746365 7373616c 00000000      objectclass....
   37208:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   37218:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   37228:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   37238:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   37248:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   37258:	2070756b 68746977 766e6920 64696c61     kup with invalid
   37268:	6a626f20 20746365 646e6168 6f20656c      object handle o
   37278:	626f2072 7463656a 616c6320 00217373     r object class!.
   37288:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37298:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   372a8:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   372b8:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   372c8:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   372d8:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   372e8:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   372f8:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   37308:	626f2072 7463656a 73616c63 00000073     r objectclass...
   37318:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37328:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   37338:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   37348:	756c6176 6f662065 61682072 656c646e     value for handle
   37358:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   37368:	20656572 65726f6d 6e616820 73656c64     ree more handles
   37378:	61687420 6c61206e 61636f6c 21646574      than allocated!
   37388:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   37398:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   373a8:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   373b8:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   373c8:	656a626f 63207463 7373616c 206e6920     object class in 
   373d8:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   373e8:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   373f8:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   37408:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   37418:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   37428:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   37438:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   37448:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   37458:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   37468:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   37478:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   37488:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   37498:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   374a8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   374b8:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   374c8:	696c6176 61762064 2065756c 20726f66     valid value for 
   374d8:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   374e8:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   374f8:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   37508:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   37518:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   37528:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   37538:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   37548:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37558:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   37568:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   37578:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   37588:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   37598:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   375a8:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   375b8:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   375c8:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   375d8:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   375e8:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   375f8:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   37608:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   37618:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   37628:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   37638:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   37648:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   37658:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   37668:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   37678:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   37688:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   37698:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   376a8:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   376b8:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   376c8:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   376d8:	00000000 20726d54 00637653 0001d198     ....Tmr Svc.....
   376e8:	0001d198 0001d198 0001d226 0001d1f0     ........&.......
   376f8:	0001d21a 0001d198 0001d198 0001d226     ............&...
   37708:	0001d1f0                                ....

0003770c <sd_mmc_trans_units>:
   3770c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00037728 <sd_trans_multipliers>:
   37728:	00000000 0000000a 0000000c 0000000d     ................
   37738:	0000000f 00000014 00000019 0000001e     ................
   37748:	00000023 00000028 0000002d 00000032     #...(...-...2...
   37758:	00000037 0000003c 00000046 00000050     7...<...F...P...

00037768 <mmc_trans_multipliers>:
   37768:	00000000 0000000a 0000000c 0000000d     ................
   37778:	0000000f 00000014 0000001a 0000001e     ................
   37788:	00000023 00000028 0000002d 00000034     #...(...-...4...
   37798:	00000037 0000003c 00000046 00000050     7...<...F...P...
   377a8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   377b8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   377c8:	6320746c 000a646d 0000000d              lt cmd......

000377d4 <__FUNCTION__.17099>:
   377d4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   377e4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   377f4:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   37804:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   37814:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   37824:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   37834:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   37844:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   37854:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   37864:	66696828 64612029 73657264 75622073     (hif) address bu
   37874:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   37884:	70757272 20646574 6b636170 53207465     rrupted packet S
   37894:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   378a4:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   378b4:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   378c4:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   378d4:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   378e4:	63207465 626c6c61 206b6361 6e207369     et callback is n
   378f4:	7220746f 73696765 65726574 00000a64     ot registered...
   37904:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   37914:	20746f6e 69676572 72657473 000a6465     not registered..
   37924:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   37934:	6e207369 7220746f 73696765 65726574     is not registere
   37944:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   37954:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   37964:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   37974:	696c6176 72672064 2070756f 000a4449     valid group ID..
   37984:	66696828 6f682029 61207473 64207070     (hif) host app d
   37994:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   379a4:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   379b4:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   379c4:	66696828 61462029 2065736c 65746e69     (hif) False inte
   379d4:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   379e4:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   379f4:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   37a04:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   37a14:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   37a24:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   37a34:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   37a44:	696c6176 72612064 656d7567 000a746e     valid argument..
   37a54:	20505041 75716552 65747365 69532064     APP Requested Si
   37a64:	6920657a 616c2073 72656772 61687420     ze is larger tha
   37a74:	6874206e 65722065 65766963 75622064     n the recived bu
   37a84:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   37a94:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   37aa4:	65747365 64412064 73657264 65622073     ested Address be
   37ab4:	646e6f79 65687420 63657220 64657669     yond the recived
   37ac4:	66756220 20726566 72646461 20737365      buffer address 
   37ad4:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   37ae4:	6425203f 0000000a 00021338 00021308     ? %d....8.......
   37af4:	00021300 00021318 00021310 00021330     ............0...
   37b04:	00021320 00021328                        ...(...

00037b0c <__FUNCTION__.17967>:
   37b0c:	5f666968 646e6573 00000000              hif_send....

00037b18 <__FUNCTION__.17977>:
   37b18:	5f666968 00727369                       hif_isr.

00037b20 <__FUNCTION__.17986>:
   37b20:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00037b30 <__FUNCTION__.17998>:
   37b30:	5f666968 65636572 00657669              hif_receive.

00037b3c <__FUNCTION__.18014>:
   37b3c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   37b4c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   37b5c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   37b6c:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   37b7c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37b8c:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   37b9c:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   37bac:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   37bbc:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   37bcc:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   37bdc:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   37bec:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   37bfc:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   37c0c:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   37c1c:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   37c2c:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   37c3c:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   37c4c:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   37c5c:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   37c6c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   37c7c:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   37c8c:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   37c9c:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   37cac:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   37cbc:	73747365 72657020 61637320 6c73206e     ests per scan sl
   37ccc:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   37cdc:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   37cec:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   37cfc:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   37d0c:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   37d1c:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   37d2c:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   37d3c:	6e694d20 69726420 20726576 20726576      Min driver ver 
   37d4c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   37d5c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   37d6c:	0000000a 303a3931 32353a34 00000000     ....19:04:52....
   37d7c:	2079614d 32203920 00333230 76697244     May  9 2023.Driv
   37d8c:	62207265 746c6975 20746120 25097325     er built at %s.%
   37d9c:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   37dac:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   37dbc:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   37dcc:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   37ddc:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   37dec:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   37dfc:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   37e0c:	2079656b 65646e69 64252078 0000000a     key index %d....
   37e1c:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   37e2c:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   37e3c:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   37e4c:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   37e5c:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   37e6c:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   37e7c:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   37e8c:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   37e9c:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   37eac:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   37ebc:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   37ecc:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   37edc:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   37eec:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   37efc:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   37f0c:	66754220 0a726566 00000000               Buffer.....

00037f18 <__FUNCTION__.17949>:
   37f18:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00037f24 <__FUNCTION__.17978>:
   37f24:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00037f34 <__FUNCTION__.18009>:
   37f34:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   37f44:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   37f54:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   37f64:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   37f74:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   37f84:	2070756b 20656874 70696863 0000000a     kup the chip....
   37f94:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   37fa4:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   37fb4:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   37fc4:	696e692d 6c616974 0a657a69 00000000     -initialize.....

00037fd4 <__FUNCTION__.17806>:
   37fd4:	70696863 6b61775f 00000065              chip_wake...

00037fe0 <__FUNCTION__.17855>:
   37fe0:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   37ff0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   38000:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   38010:	6e69206c 62207469 000a7375 0000000d     l init bus......
   38020:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   38030:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   38040:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   38050:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   38060:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   38070:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   38080:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   38090:	69642068 6c626173 61662065 000a6c69     h disable fail..
   380a0:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   380b0:	696e6920 75622074 00000a73               init bus...

000380bc <__FUNCTION__.17853>:
   380bc:	645f6d6e 695f7672 0074696e              nm_drv_init.

000380c8 <__FUNCTION__.17860>:
   380c8:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

000380d8 <crc7_syndrome_table>:
   380d8:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   380e8:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   380f8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   38108:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   38118:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   38128:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   38138:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   38148:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   38158:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   38168:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   38178:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   38188:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   38198:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   381a8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   381b8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   381c8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   381d8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   381e8:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   381f8:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   38208:	73756220 72726520 2e2e726f 00000a2e      bus error......
   38218:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38228:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   38238:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38248:	656c6961 61642064 72206174 6f707365     ailed data respo
   38258:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   38268:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   38278:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   38288:	72206573 2c646165 73756220 72726520     se read, bus err
   38298:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   382a8:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   382b8:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   382c8:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   382d8:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   382e8:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   382f8:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   38308:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38318:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   38328:	70736572 65736e6f 61747320 28206574     response state (
   38338:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   38348:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   38358:	20646165 70736572 65736e6f 30252820     ead response (%0
   38368:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   38378:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   38388:	6877206e 72206e65 69646165 6420676e     n when reading d
   38398:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   383a8:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   383b8:	6877206e 72206e65 69646165 6320676e     n when reading c
   383c8:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   383d8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   383e8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   383f8:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   38408:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   38418:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   38428:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   38438:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38448:	656c6961 61642064 72206174 6f707365     ailed data respo
   38458:	2065736e 64616572 7562202c 72652073     nse read, bus er
   38468:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   38478:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   38488:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   38498:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   384a8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   384b8:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   384c8:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   384d8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   384e8:	61642064 62206174 6b636f6c 69727720     d data block wri
   384f8:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   38508:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38518:	656c6961 61642064 62206174 6b636f6c     ailed data block
   38528:	63726320 69727720 202c6574 20737562      crc write, bus 
   38538:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   38548:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   38558:	77202c64 65746972 67657220 30252820     d, write reg (%0
   38568:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   38578:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   38588:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   38598:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   385a8:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   385b8:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   385c8:	656c6961 6c622064 206b636f 61746164     ailed block data
   385d8:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   385e8:	6e612074 65722064 20797274 25206425     t and retry %d %
   385f8:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   38608:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   38618:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   38628:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   38638:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   38648:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   38658:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   38668:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   38678:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38688:	6e726574 72206c61 20646165 746f7270     ternal read prot
   38698:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   386a8:	6572202c 69727974 7720676e 20687469     , retyring with 
   386b8:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   386c8:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   386d8:	6e726574 72206c61 20646165 746f7270     ternal read prot
   386e8:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   386f8:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38708:	6e726574 77206c61 65746972 6f727020     ternal write pro
   38718:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   38728:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   38738:	20646d63 64616572 69686320 64692070     cmd read chip id
   38748:	0a2e2e2e 00000000 00022f60 00022f60     ........`/..`/..
   38758:	00022ff0 00022eb4 00022efa 00022f1c     ./.........../..
   38768:	00022fa2 00022fa2 0002305c 00022e88     ./.../..\0......
   38778:	000230b6 000230b6 000230b6 000230b6     .0...0...0...0..
   38788:	00022f3e 000234c0 000234c0 00023548     >/...4...4..H5..
   38798:	00023424 00023466 00023484 000234fe     $4..f4...4...4..
   387a8:	000234fe 000235aa 000233fc 000235fa     .4...5...3...5..
   387b8:	000235fa 000235fa 000235fa 000234a2     .5...5...5...4..

000387c8 <__FUNCTION__.17128>:
   387c8:	5f697073 00646d63                       spi_cmd.

000387d0 <__FUNCTION__.17135>:
   387d0:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000387e0 <__FUNCTION__.17144>:
   387e0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000387ec <__FUNCTION__.17177>:
   387ec:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   387fc:	00000000                                ....

00038800 <__FUNCTION__.17223>:
   38800:	5f697073 61746164 6972775f 00006574     spi_data_write..

00038810 <__FUNCTION__.17235>:
   38810:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00038820 <__FUNCTION__.17246>:
   38820:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00038830 <__FUNCTION__.17258>:
   38830:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00038840 <__FUNCTION__.17269>:
   38840:	735f6d6e 725f6970 00646165              nm_spi_read.

0003884c <__FUNCTION__.17290>:
   3884c:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   3885c:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   3886c:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   3887c:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   3888c:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   3889c:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   388ac:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   388bc:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   388cc:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   388dc:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   388ec:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   388fc:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   3890c:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   3891c:	22302074 00000000                       t 0"....

00038924 <lun_desc>:
   38924:	0001ebbd 0001ec15 0001ec61 0001ecad     ........a.......
   38934:	0001ecdd 0001ed61 0001edf1 0003890c     ....a...........
   38944:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   38954:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   38964:	00028ede 00028f58 00028f58 00028efc     ....X...X.......
   38974:	00028ef6 00028f02 00028ee4 00028f08     ................
   38984:	00028f3e 00029140 00029190 00029190     >...@...........
   38994:	0002918c 00029132 00029152 00029122     ....2...R..."...
   389a4:	00029164 00029176 000291de 0002920c     d...v...........
   389b4:	0002920c 00029208 000291d8 000291e4     ................
   389c4:	000291d2 000291ea 000291f0              ............

000389d0 <tcc_modules>:
   389d0:	42002000 42002400 42002800              . .B.$.B.(.B

000389dc <_tcc_gclk_ids>:
   389dc:	001b1a1a                                ....

000389e0 <_tcc_apbcmasks>:
   389e0:	00000100 00000200 00000400              ............

000389ec <_tcc_maxs>:
   389ec:	00ffffff 00ffffff 0000ffff              ............

000389f8 <_tcc_cc_nums>:
   389f8:	00020204                                ....

000389fc <_tcc_ow_nums>:
   389fc:	00020408                                ....

00038a00 <_tcc_intflag>:
   38a00:	00000001 00000002 00000004 00000008     ................
   38a10:	00001000 00002000 00004000 00008000     ..... ...@......
   38a20:	00010000 00020000 00040000 00080000     ................

00038a30 <LfnOfs>:
   38a30:	07050301 12100e09 1c181614 0000001e     ................
   38a40:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   38a50:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   38a60:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   38a70:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   38a80:	20205441 00202020                       AT     .

00038a88 <excvt.4558>:
   38a88:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   38a98:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   38aa8:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   38ab8:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   38ac8:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   38ad8:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   38ae8:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   38af8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00038b08 <Tbl>:
   38b08:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   38b18:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   38b28:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   38b38:	00d600ff 00f800dc 00d800a3 019200d7     ................
   38b48:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   38b58:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   38b68:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   38b78:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   38b88:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   38b98:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   38ba8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   38bb8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   38bc8:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   38bd8:	00da00de 00d900db 00dd00fd 00b400af     ................
   38be8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   38bf8:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00038c08 <tbl_lower.4308>:
   38c08:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   38c18:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   38c28:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   38c38:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   38c48:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   38c58:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   38c68:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   38c78:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   38c88:	01050103 01090107 010d010b 0111010f     ................
   38c98:	01150113 01190117 011d011b 0121011f     ..............!.
   38ca8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   38cb8:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   38cc8:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   38cd8:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   38ce8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   38cf8:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   38d08:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   38d18:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   38d28:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   38d38:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   38d48:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   38d58:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   38d68:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   38d78:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   38d88:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   38d98:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   38da8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   38db8:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   38dc8:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   38dd8:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00038de8 <tbl_upper.4309>:
   38de8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   38df8:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   38e08:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   38e18:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   38e28:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   38e38:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   38e48:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   38e58:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   38e68:	01040102 01080106 010c010a 0110010e     ................
   38e78:	01140112 01180116 011c011a 0120011e     .............. .
   38e88:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   38e98:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   38ea8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   38eb8:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   38ec8:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   38ed8:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   38ee8:	03940393 03960395 03980397 039a0399     ................
   38ef8:	039c039b 039e039d 03a0039f 03a303a1     ................
   38f08:	03a503a4 03a703a6 03a903a8 041003aa     ................
   38f18:	04120411 04140413 04160415 04180417     ................
   38f28:	041a0419 041c041b 041e041d 0420041f     .............. .
   38f38:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   38f48:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   38f58:	04030402 04050404 04070406 04090408     ................
   38f68:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   38f78:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   38f88:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   38f98:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   38fa8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   38fb8:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   38fc8:	0002e54a 0002e54a 0002e54a 0002e3d8     J...J...J.......
   38fd8:	0002e54a 0002e4c2 0002e54a 0002e54a     J.......J...J...
   38fe8:	0002e54a 0002e54a 0002e54a 0002e54a     J...J...J...J...
   38ff8:	0002e54a 0002e53c 4354514d 00000000     J...<...MQTC....
   39008:	00000004 00000000 00000000 00000000     ................
   39018:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   39058:	4354514d 00000000 00000004 00000000     MQTC............
	...
   39070:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   390b0:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   390c0:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   390d0:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   390e0:	20544547 00000000 54534f50 00000020     GET ....POST ...
   390f0:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   39100:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   39110:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   39120:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   39130:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   39140:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   39150:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   39160:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   39170:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   39180:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   39190:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   391a0:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   391b0:	676e654c 203a6874 00000000 33323130     Length: ....0123
   391c0:	37363534 62613938 66656463 6e617254     456789abcdefTran
   391d0:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   391e0:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   391f0:	50545448 0000002f 00000d31 0003063e     HTTP/...1...>...
   39200:	00030638 00030632 0003062c 00030644     8...2...,...D...
   39210:	00030626 00030644 00030620 0003061a     &...D... .......
   39220:	00030644 00030614 00030614 0003060e     D...............
   39230:	00030608 00030602 42002000 42002400     ......... .B.$.B
   39240:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   39250:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   39260:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   39270:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   39280:	6f727245 6e692072 61697469 697a696c     Error initializi
   39290:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   392a0:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   392b0:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   392c0:	70616548 66656220 2065726f 72617473     Heap before star
   392d0:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   392e0:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   392f0:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   39300:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   39310:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   39320:	74666120 73207265 74726174 20676e69      after starting 
   39330:	3a494c43 0d642520 0000000a 49464957     CLI: %d.....WIFI
   39340:	5341545f 0000004b 3a525245 46495720     _TASK...ERR: WIF
   39350:	61742049 63206b73 646c756f 746f6e20     I task could not
   39360:	20656220 74696e69 696c6169 2164657a      be initialized!
   39370:	00000a0d 70616548 74666120 73207265     ....Heap after s
   39380:	74726174 20676e69 49464957 6425203a     tarting WIFI: %d
   39390:	00000a0d 43544853 41542033 00004b53     ....SHTC3 TASK..
   393a0:	3a525245 54485320 54203343 204b5341     ERR: SHTC3 TASK 
   393b0:	6c756f63 6f6e2064 65622074 696e6920     could not be ini
   393c0:	6c616974 64657a69 000a0d21 70616548     tialized!...Heap
   393d0:	74666120 73207265 74726174 20676e69      after starting 
   393e0:	43544853 61542033 3a206b73 0d642520     SHTC3 Task : %d.
   393f0:	0000000a 52414548 41522054 54204554     ....HEART RATE T
   39400:	004b5341 3a525245 41454820 52205452     ASK.ERR: HEART R
   39410:	20455441 4b534154 756f6320 6e20646c     ATE TASK could n
   39420:	6220746f 6e692065 61697469 657a696c     ot be initialize
   39430:	0a0d2164 00000000 70616548 74666120     d!......Heap aft
   39440:	73207265 74726174 20676e69 52414548     er starting HEAR
   39450:	41522054 54204554 206b7361 6425203a     T RATE Task : %d
   39460:	00000a0d 6f727245 6e6f2072 6d656d20     ....Error on mem
   39470:	2079726f 6f6c6c61 69746163 6f206e6f     ory allocation o
   39480:	5246206e 54524545 0d21534f 0000000a     n FREERTOS!.....
   39490:	6f727245 6e6f2072 61747320 6f206b63     Error on stack o
   394a0:	66726576 20776f6c 46206e6f 52454552     verflow on FREER
   394b0:	21534f54 00000a0d 00032ee0 00032ec2     TOS!............
   394c0:	00032e7c 00032d9a 00032e7c 00032eb4     |....-..|.......
   394d0:	00032e7c 00032d9a 00032ec2 00032ec2     |....-..........
   394e0:	00032eb4 00032d9a 00032d92 00032d92     .....-...-...-..
   394f0:	00032d92 000330f8 00033540 00033400     .-...0..@5...4..
   39500:	00033400 000333fc 00033518 00033518     .4...3...5...5..
   39510:	0003350a 000333fc 00033518 0003350a     .5...3...5...5..
   39520:	00033518 000333fc 00033520 00033520     .5...3.. 5.. 5..
   39530:	00033520 00033724                        5..$7..

00039538 <_global_impure_ptr>:
   39538:	2000011c                                ... 

0003953c <__sf_fake_stderr>:
	...

0003955c <__sf_fake_stdin>:
	...

0003957c <__sf_fake_stdout>:
	...
   3959c:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   395ac:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   395bc:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   395cc:	37363534 62613938 66656463 20200000              456789abcdef.

000395d9 <_ctype_>:
   395d9:	20202000 20202020 28282020 20282828     .         ((((( 
   395e9:	20202020 20202020 20202020 20202020                     
   395f9:	10108820 10101010 10101010 10101010      ...............
   39609:	04040410 04040404 10040404 10101010     ................
   39619:	41411010 41414141 01010101 01010101     ..AAAAAA........
   39629:	01010101 01010101 01010101 10101010     ................
   39639:	42421010 42424242 02020202 02020202     ..BBBBBB........
   39649:	02020202 02020202 02020202 10101010     ................
   39659:	00000020 00000000 00000000 00000000      ...............
	...

000396dc <_init>:
   396dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   396de:	46c0      	nop			; (mov r8, r8)
   396e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   396e2:	bc08      	pop	{r3}
   396e4:	469e      	mov	lr, r3
   396e6:	4770      	bx	lr

000396e8 <__init_array_start>:
   396e8:	000120dd 	.word	0x000120dd

000396ec <_fini>:
   396ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   396ee:	46c0      	nop			; (mov r8, r8)
   396f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   396f2:	bc08      	pop	{r3}
   396f4:	469e      	mov	lr, r3
   396f6:	4770      	bx	lr

000396f8 <__fini_array_start>:
   396f8:	000120b5 	.word	0x000120b5
