
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007cb8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d0  20000000  00007cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c2c  200000d0  00007d88  000200d0  2**2
                  ALLOC
  3 .stack        00002004  20000cfc  000089b4  000200d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004887e  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006c11  00000000  00000000  000689cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010aad  00000000  00000000  0006f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  0008008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001140  00000000  00000000  00080c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020e2e  00000000  00000000  00081d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017beb  00000000  00000000  000a2b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093ab1  00000000  00000000  000ba766  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000025dc  00000000  00000000  0014e218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 2d 00 20 a9 35 00 00 a5 35 00 00 a5 35 00 00     .-. .5...5...5..
	...
      2c:	a5 35 00 00 00 00 00 00 00 00 00 00 a5 35 00 00     .5...........5..
      3c:	8d 01 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .....5...5...5..
      4c:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
      5c:	a5 35 00 00 a5 35 00 00 fd 1f 00 00 0d 20 00 00     .5...5....... ..
      6c:	1d 20 00 00 2d 20 00 00 3d 20 00 00 4d 20 00 00     . ..- ..= ..M ..
      7c:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
      8c:	a5 35 00 00 a5 35 00 00 00 00 00 00 00 00 00 00     .5...5..........
      9c:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
      ac:	a5 35 00 00 00 00 00 00                             .5......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000d0 	.word	0x200000d0
      d4:	00000000 	.word	0x00000000
      d8:	00007cb8 	.word	0x00007cb8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000d4 	.word	0x200000d4
     108:	00007cb8 	.word	0x00007cb8
     10c:	00007cb8 	.word	0x00007cb8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003335 	.word	0x00003335
     140:	00005f3d 	.word	0x00005f3d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <GetSystick>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
	return ul_tickcount;
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <GetSystick+0x8>)
     182:	6818      	ldr	r0, [r3, #0]
}
     184:	4770      	bx	lr
     186:	46c0      	nop			; (mov r8, r8)
     188:	200000ec 	.word	0x200000ec

0000018c <SysTick_Handler>:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
	
	ul_tickcount++;
     18c:	4a02      	ldr	r2, [pc, #8]	; (198 <SysTick_Handler+0xc>)
     18e:	6813      	ldr	r3, [r2, #0]
     190:	3301      	adds	r3, #1
     192:	6013      	str	r3, [r2, #0]
}
     194:	4770      	bx	lr
     196:	46c0      	nop			; (mov r8, r8)
     198:	200000ec 	.word	0x200000ec

0000019c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1a0:	ac01      	add	r4, sp, #4
     1a2:	2501      	movs	r5, #1
     1a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1a6:	2700      	movs	r7, #0
     1a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1ac:	0021      	movs	r1, r4
     1ae:	2017      	movs	r0, #23
     1b0:	4e06      	ldr	r6, [pc, #24]	; (1cc <system_board_init+0x30>)
     1b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1b4:	2280      	movs	r2, #128	; 0x80
     1b6:	0412      	lsls	r2, r2, #16
     1b8:	4b05      	ldr	r3, [pc, #20]	; (1d0 <system_board_init+0x34>)
     1ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1c0:	0021      	movs	r1, r4
     1c2:	2037      	movs	r0, #55	; 0x37
     1c4:	47b0      	blx	r6
}
     1c6:	b003      	add	sp, #12
     1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	00001a1d 	.word	0x00001a1d
     1d0:	41004400 	.word	0x41004400

000001d4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     1d4:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1d6:	4a1e      	ldr	r2, [pc, #120]	; (250 <nvm_set_config+0x7c>)
     1d8:	69d3      	ldr	r3, [r2, #28]
     1da:	2104      	movs	r1, #4
     1dc:	430b      	orrs	r3, r1
     1de:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     1e0:	4b1c      	ldr	r3, [pc, #112]	; (254 <nvm_set_config+0x80>)
     1e2:	2220      	movs	r2, #32
     1e4:	32ff      	adds	r2, #255	; 0xff
     1e6:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     1e8:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     1ea:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     1ec:	07d2      	lsls	r2, r2, #31
     1ee:	d401      	bmi.n	1f4 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     1f0:	0018      	movs	r0, r3
     1f2:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     1f4:	7803      	ldrb	r3, [r0, #0]
     1f6:	021b      	lsls	r3, r3, #8
     1f8:	22c0      	movs	r2, #192	; 0xc0
     1fa:	0092      	lsls	r2, r2, #2
     1fc:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     1fe:	7841      	ldrb	r1, [r0, #1]
     200:	01c9      	lsls	r1, r1, #7
     202:	22ff      	movs	r2, #255	; 0xff
     204:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     206:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     208:	7881      	ldrb	r1, [r0, #2]
     20a:	0049      	lsls	r1, r1, #1
     20c:	221e      	movs	r2, #30
     20e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     210:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     212:	78c2      	ldrb	r2, [r0, #3]
     214:	0492      	lsls	r2, r2, #18
     216:	2180      	movs	r1, #128	; 0x80
     218:	02c9      	lsls	r1, r1, #11
     21a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     21c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     21e:	7902      	ldrb	r2, [r0, #4]
     220:	0412      	lsls	r2, r2, #16
     222:	21c0      	movs	r1, #192	; 0xc0
     224:	0289      	lsls	r1, r1, #10
     226:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     228:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     22a:	4a0a      	ldr	r2, [pc, #40]	; (254 <nvm_set_config+0x80>)
     22c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     22e:	6893      	ldr	r3, [r2, #8]
     230:	035b      	lsls	r3, r3, #13
     232:	0f5b      	lsrs	r3, r3, #29
     234:	4908      	ldr	r1, [pc, #32]	; (258 <nvm_set_config+0x84>)
     236:	2408      	movs	r4, #8
     238:	409c      	lsls	r4, r3
     23a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     23c:	6893      	ldr	r3, [r2, #8]
     23e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     240:	7843      	ldrb	r3, [r0, #1]
     242:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     244:	8b13      	ldrh	r3, [r2, #24]
     246:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     248:	0fdb      	lsrs	r3, r3, #31
     24a:	011b      	lsls	r3, r3, #4
     24c:	e7d0      	b.n	1f0 <nvm_set_config+0x1c>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	40000400 	.word	0x40000400
     254:	41004000 	.word	0x41004000
     258:	200000f0 	.word	0x200000f0

0000025c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     25c:	b530      	push	{r4, r5, lr}
     25e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     260:	4a22      	ldr	r2, [pc, #136]	; (2ec <nvm_execute_command+0x90>)
     262:	8810      	ldrh	r0, [r2, #0]
     264:	8853      	ldrh	r3, [r2, #2]
     266:	4343      	muls	r3, r0
     268:	428b      	cmp	r3, r1
     26a:	d206      	bcs.n	27a <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     270:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     272:	4b1f      	ldr	r3, [pc, #124]	; (2f0 <nvm_execute_command+0x94>)
     274:	18cb      	adds	r3, r1, r3
     276:	4293      	cmp	r3, r2
     278:	d80e      	bhi.n	298 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     27a:	4b1e      	ldr	r3, [pc, #120]	; (2f4 <nvm_execute_command+0x98>)
     27c:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     27e:	2280      	movs	r2, #128	; 0x80
     280:	02d2      	lsls	r2, r2, #11
     282:	432a      	orrs	r2, r5
     284:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     286:	2220      	movs	r2, #32
     288:	32ff      	adds	r2, #255	; 0xff
     28a:	831a      	strh	r2, [r3, #24]
     28c:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     28e:	07db      	lsls	r3, r3, #31
     290:	d403      	bmi.n	29a <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     292:	4b18      	ldr	r3, [pc, #96]	; (2f4 <nvm_execute_command+0x98>)
     294:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     296:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     298:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     29a:	2c45      	cmp	r4, #69	; 0x45
     29c:	d822      	bhi.n	2e4 <nvm_execute_command+0x88>
     29e:	00a3      	lsls	r3, r4, #2
     2a0:	4a15      	ldr	r2, [pc, #84]	; (2f8 <nvm_execute_command+0x9c>)
     2a2:	58d3      	ldr	r3, [r2, r3]
     2a4:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     2a6:	4b13      	ldr	r3, [pc, #76]	; (2f4 <nvm_execute_command+0x98>)
     2a8:	8b1b      	ldrh	r3, [r3, #24]
     2aa:	05db      	lsls	r3, r3, #23
     2ac:	d503      	bpl.n	2b6 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     2ae:	4b11      	ldr	r3, [pc, #68]	; (2f4 <nvm_execute_command+0x98>)
     2b0:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     2b2:	2010      	movs	r0, #16
     2b4:	e7f0      	b.n	298 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2b6:	0889      	lsrs	r1, r1, #2
     2b8:	0049      	lsls	r1, r1, #1
     2ba:	4b0e      	ldr	r3, [pc, #56]	; (2f4 <nvm_execute_command+0x98>)
     2bc:	61d9      	str	r1, [r3, #28]
			break;
     2be:	e003      	b.n	2c8 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2c0:	0889      	lsrs	r1, r1, #2
     2c2:	0049      	lsls	r1, r1, #1
     2c4:	4b0b      	ldr	r3, [pc, #44]	; (2f4 <nvm_execute_command+0x98>)
     2c6:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     2c8:	20a5      	movs	r0, #165	; 0xa5
     2ca:	0200      	lsls	r0, r0, #8
     2cc:	4304      	orrs	r4, r0
     2ce:	4b09      	ldr	r3, [pc, #36]	; (2f4 <nvm_execute_command+0x98>)
     2d0:	801c      	strh	r4, [r3, #0]
     2d2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     2d4:	2201      	movs	r2, #1
     2d6:	7d0b      	ldrb	r3, [r1, #20]
     2d8:	4213      	tst	r3, r2
     2da:	d0fc      	beq.n	2d6 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     2dc:	4b05      	ldr	r3, [pc, #20]	; (2f4 <nvm_execute_command+0x98>)
     2de:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     2e0:	2000      	movs	r0, #0
     2e2:	e7d9      	b.n	298 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     2e4:	4b03      	ldr	r3, [pc, #12]	; (2f4 <nvm_execute_command+0x98>)
     2e6:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     2e8:	2017      	movs	r0, #23
     2ea:	e7d5      	b.n	298 <nvm_execute_command+0x3c>
     2ec:	200000f0 	.word	0x200000f0
     2f0:	ff7fc000 	.word	0xff7fc000
     2f4:	41004000 	.word	0x41004000
     2f8:	00007188 	.word	0x00007188

000002fc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     2fe:	4b25      	ldr	r3, [pc, #148]	; (394 <nvm_write_buffer+0x98>)
     300:	881d      	ldrh	r5, [r3, #0]
     302:	885b      	ldrh	r3, [r3, #2]
     304:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     306:	2418      	movs	r4, #24
	if (destination_address >
     308:	4283      	cmp	r3, r0
     30a:	d201      	bcs.n	310 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     30c:	0020      	movs	r0, r4
     30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     310:	1e6b      	subs	r3, r5, #1
     312:	4218      	tst	r0, r3
     314:	d1fa      	bne.n	30c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     316:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     318:	4295      	cmp	r5, r2
     31a:	d3f7      	bcc.n	30c <nvm_write_buffer+0x10>
     31c:	4b1e      	ldr	r3, [pc, #120]	; (398 <nvm_write_buffer+0x9c>)
     31e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     320:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     322:	07db      	lsls	r3, r3, #31
     324:	d5f2      	bpl.n	30c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     326:	4c1d      	ldr	r4, [pc, #116]	; (39c <nvm_write_buffer+0xa0>)
     328:	4b1b      	ldr	r3, [pc, #108]	; (398 <nvm_write_buffer+0x9c>)
     32a:	801c      	strh	r4, [r3, #0]
     32c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     32e:	2401      	movs	r4, #1
     330:	7d2b      	ldrb	r3, [r5, #20]
     332:	4223      	tst	r3, r4
     334:	d0fc      	beq.n	330 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     336:	2420      	movs	r4, #32
     338:	34ff      	adds	r4, #255	; 0xff
     33a:	4b17      	ldr	r3, [pc, #92]	; (398 <nvm_write_buffer+0x9c>)
     33c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     33e:	2a00      	cmp	r2, #0
     340:	d022      	beq.n	388 <nvm_write_buffer+0x8c>
     342:	2301      	movs	r3, #1
     344:	0005      	movs	r5, r0
     346:	439d      	bics	r5, r3
     348:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     34a:	1e57      	subs	r7, r2, #1
     34c:	e009      	b.n	362 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     34e:	18ce      	adds	r6, r1, r3
     350:	7876      	ldrb	r6, [r6, #1]
     352:	0236      	lsls	r6, r6, #8
     354:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     356:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     358:	3302      	adds	r3, #2
     35a:	b29b      	uxth	r3, r3
     35c:	3502      	adds	r5, #2
     35e:	429a      	cmp	r2, r3
     360:	d904      	bls.n	36c <nvm_write_buffer+0x70>
		data = buffer[i];
     362:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     364:	42bb      	cmp	r3, r7
     366:	dbf2      	blt.n	34e <nvm_write_buffer+0x52>
		data = buffer[i];
     368:	b2a4      	uxth	r4, r4
     36a:	e7f4      	b.n	356 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     36c:	4b09      	ldr	r3, [pc, #36]	; (394 <nvm_write_buffer+0x98>)
     36e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     370:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     372:	2b00      	cmp	r3, #0
     374:	d1ca      	bne.n	30c <nvm_write_buffer+0x10>
     376:	2a3f      	cmp	r2, #63	; 0x3f
     378:	d8c8      	bhi.n	30c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     37a:	2200      	movs	r2, #0
     37c:	0001      	movs	r1, r0
     37e:	2004      	movs	r0, #4
     380:	4b07      	ldr	r3, [pc, #28]	; (3a0 <nvm_write_buffer+0xa4>)
     382:	4798      	blx	r3
     384:	0004      	movs	r4, r0
     386:	e7c1      	b.n	30c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     388:	4b02      	ldr	r3, [pc, #8]	; (394 <nvm_write_buffer+0x98>)
     38a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     38c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     38e:	2b00      	cmp	r3, #0
     390:	d0f3      	beq.n	37a <nvm_write_buffer+0x7e>
     392:	e7bb      	b.n	30c <nvm_write_buffer+0x10>
     394:	200000f0 	.word	0x200000f0
     398:	41004000 	.word	0x41004000
     39c:	ffffa544 	.word	0xffffa544
     3a0:	0000025d 	.word	0x0000025d

000003a4 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     3a4:	4b13      	ldr	r3, [pc, #76]	; (3f4 <nvm_erase_row+0x50>)
     3a6:	881a      	ldrh	r2, [r3, #0]
     3a8:	885b      	ldrh	r3, [r3, #2]
     3aa:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     3ac:	2118      	movs	r1, #24
	if (row_address >
     3ae:	4283      	cmp	r3, r0
     3b0:	d201      	bcs.n	3b6 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     3b2:	0008      	movs	r0, r1
     3b4:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     3b6:	0092      	lsls	r2, r2, #2
     3b8:	3a01      	subs	r2, #1
     3ba:	4210      	tst	r0, r2
     3bc:	d1f9      	bne.n	3b2 <nvm_erase_row+0xe>
     3be:	4b0e      	ldr	r3, [pc, #56]	; (3f8 <nvm_erase_row+0x54>)
     3c0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     3c2:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     3c4:	07db      	lsls	r3, r3, #31
     3c6:	d5f4      	bpl.n	3b2 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3c8:	4b0b      	ldr	r3, [pc, #44]	; (3f8 <nvm_erase_row+0x54>)
     3ca:	2220      	movs	r2, #32
     3cc:	32ff      	adds	r2, #255	; 0xff
     3ce:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     3d0:	0880      	lsrs	r0, r0, #2
     3d2:	0040      	lsls	r0, r0, #1
     3d4:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     3d6:	4a09      	ldr	r2, [pc, #36]	; (3fc <nvm_erase_row+0x58>)
     3d8:	801a      	strh	r2, [r3, #0]
     3da:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     3dc:	2201      	movs	r2, #1
     3de:	7d0b      	ldrb	r3, [r1, #20]
     3e0:	4213      	tst	r3, r2
     3e2:	d0fc      	beq.n	3de <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     3e4:	4b04      	ldr	r3, [pc, #16]	; (3f8 <nvm_erase_row+0x54>)
     3e6:	8b19      	ldrh	r1, [r3, #24]
     3e8:	201c      	movs	r0, #28
     3ea:	4001      	ands	r1, r0
	return STATUS_OK;
     3ec:	1e48      	subs	r0, r1, #1
     3ee:	4181      	sbcs	r1, r0
     3f0:	0089      	lsls	r1, r1, #2
     3f2:	e7de      	b.n	3b2 <nvm_erase_row+0xe>
     3f4:	200000f0 	.word	0x200000f0
     3f8:	41004000 	.word	0x41004000
     3fc:	ffffa502 	.word	0xffffa502

00000400 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     400:	4b13      	ldr	r3, [pc, #76]	; (450 <nvm_get_parameters+0x50>)
     402:	2220      	movs	r2, #32
     404:	32ff      	adds	r2, #255	; 0xff
     406:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     408:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     40a:	034a      	lsls	r2, r1, #13
     40c:	0f52      	lsrs	r2, r2, #29
     40e:	2308      	movs	r3, #8
     410:	4093      	lsls	r3, r2
	parameters->page_size =
     412:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     414:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     416:	4b0f      	ldr	r3, [pc, #60]	; (454 <nvm_get_parameters+0x54>)
     418:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     41a:	065b      	lsls	r3, r3, #25
     41c:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     41e:	2b07      	cmp	r3, #7
     420:	d010      	beq.n	444 <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     422:	2206      	movs	r2, #6
     424:	1ad2      	subs	r2, r2, r3
     426:	2304      	movs	r3, #4
     428:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     42a:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     42c:	4b09      	ldr	r3, [pc, #36]	; (454 <nvm_get_parameters+0x54>)
     42e:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     430:	2207      	movs	r2, #7
     432:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     434:	2b07      	cmp	r3, #7
     436:	d008      	beq.n	44a <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     438:	2207      	movs	r2, #7
     43a:	1ad2      	subs	r2, r2, r3
     43c:	2304      	movs	r3, #4
     43e:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     440:	6083      	str	r3, [r0, #8]
	}
}
     442:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     444:	2300      	movs	r3, #0
     446:	6043      	str	r3, [r0, #4]
     448:	e7f0      	b.n	42c <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
     44a:	2300      	movs	r3, #0
     44c:	6083      	str	r3, [r0, #8]
     44e:	e7f8      	b.n	442 <nvm_get_parameters+0x42>
     450:	41004000 	.word	0x41004000
     454:	00804000 	.word	0x00804000

00000458 <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     45a:	4b11      	ldr	r3, [pc, #68]	; (4a0 <SdCard_Initiate+0x48>)
     45c:	4798      	blx	r3
     45e:	0006      	movs	r6, r0

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     460:	4f10      	ldr	r7, [pc, #64]	; (4a4 <SdCard_Initiate+0x4c>)
	if (CTRL_FAIL == status) {
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     462:	4d11      	ldr	r5, [pc, #68]	; (4a8 <SdCard_Initiate+0x50>)
     464:	e00a      	b.n	47c <SdCard_Initiate+0x24>
     466:	2000      	movs	r0, #0
     468:	47a8      	blx	r5
     46a:	2802      	cmp	r0, #2
     46c:	d1fb      	bne.n	466 <SdCard_Initiate+0xe>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     46e:	4b0c      	ldr	r3, [pc, #48]	; (4a0 <SdCard_Initiate+0x48>)
     470:	4798      	blx	r3
     472:	1b80      	subs	r0, r0, r6
     474:	23fa      	movs	r3, #250	; 0xfa
     476:	005b      	lsls	r3, r3, #1
     478:	4298      	cmp	r0, r3
     47a:	d80d      	bhi.n	498 <SdCard_Initiate+0x40>
	status = sd_mmc_test_unit_ready(0);
     47c:	2000      	movs	r0, #0
     47e:	47b8      	blx	r7
     480:	0004      	movs	r4, r0
	if (CTRL_FAIL == status) {
     482:	2801      	cmp	r0, #1
     484:	d0ef      	beq.n	466 <SdCard_Initiate+0xe>
	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     486:	4b06      	ldr	r3, [pc, #24]	; (4a0 <SdCard_Initiate+0x48>)
     488:	4798      	blx	r3
     48a:	1b80      	subs	r0, r0, r6
     48c:	23fa      	movs	r3, #250	; 0xfa
     48e:	005b      	lsls	r3, r3, #1
     490:	4298      	cmp	r0, r3
     492:	d803      	bhi.n	49c <SdCard_Initiate+0x44>
	{
		status = CTRL_FAIL;
		break;
	}
} while (CTRL_GOOD != status );
     494:	2c00      	cmp	r4, #0
     496:	d1f1      	bne.n	47c <SdCard_Initiate+0x24>

return status;
}
     498:	0020      	movs	r0, r4
     49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = CTRL_FAIL;
     49c:	2401      	movs	r4, #1
     49e:	e7fb      	b.n	498 <SdCard_Initiate+0x40>
     4a0:	00000181 	.word	0x00000181
     4a4:	000010a1 	.word	0x000010a1
     4a8:	0000098d 	.word	0x0000098d

000004ac <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     4ac:	b510      	push	{r4, lr}
     4ae:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     4b0:	7c03      	ldrb	r3, [r0, #16]
     4b2:	2b00      	cmp	r3, #0
     4b4:	d005      	beq.n	4c2 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     4b6:	6883      	ldr	r3, [r0, #8]
     4b8:	1c58      	adds	r0, r3, #1
     4ba:	68e1      	ldr	r1, [r4, #12]
     4bc:	4b07      	ldr	r3, [pc, #28]	; (4dc <advance_pointer+0x30>)
     4be:	4798      	blx	r3
     4c0:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     4c2:	6863      	ldr	r3, [r4, #4]
     4c4:	1c58      	adds	r0, r3, #1
     4c6:	68e1      	ldr	r1, [r4, #12]
     4c8:	4b04      	ldr	r3, [pc, #16]	; (4dc <advance_pointer+0x30>)
     4ca:	4798      	blx	r3
     4cc:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     4ce:	68a3      	ldr	r3, [r4, #8]
     4d0:	1a59      	subs	r1, r3, r1
     4d2:	424a      	negs	r2, r1
     4d4:	414a      	adcs	r2, r1
     4d6:	7422      	strb	r2, [r4, #16]
 }
     4d8:	bd10      	pop	{r4, pc}
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	00006049 	.word	0x00006049

000004e0 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	0005      	movs	r5, r0
     4e4:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     4e6:	2014      	movs	r0, #20
     4e8:	4b04      	ldr	r3, [pc, #16]	; (4fc <circular_buf_init+0x1c>)
     4ea:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     4ec:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     4ee:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     4f0:	2300      	movs	r3, #0
     4f2:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     4f4:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     4f6:	7403      	strb	r3, [r0, #16]
 }
     4f8:	bd70      	pop	{r4, r5, r6, pc}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	000062c5 	.word	0x000062c5

00000500 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     500:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     502:	6803      	ldr	r3, [r0, #0]
     504:	6842      	ldr	r2, [r0, #4]
     506:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     508:	4b01      	ldr	r3, [pc, #4]	; (510 <circular_buf_put+0x10>)
     50a:	4798      	blx	r3
 }
     50c:	bd10      	pop	{r4, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	000004ad 	.word	0x000004ad

00000514 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     514:	7c02      	ldrb	r2, [r0, #16]
     516:	2300      	movs	r3, #0
     518:	2a00      	cmp	r2, #0
     51a:	d105      	bne.n	528 <circular_buf_empty+0x14>
     51c:	6843      	ldr	r3, [r0, #4]
     51e:	6880      	ldr	r0, [r0, #8]
     520:	1a1b      	subs	r3, r3, r0
     522:	4258      	negs	r0, r3
     524:	4143      	adcs	r3, r0
     526:	b2db      	uxtb	r3, r3
     528:	0018      	movs	r0, r3
 }
     52a:	4770      	bx	lr

0000052c <circular_buf_get>:
 {
     52c:	b570      	push	{r4, r5, r6, lr}
     52e:	0004      	movs	r4, r0
     530:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     532:	4b0a      	ldr	r3, [pc, #40]	; (55c <circular_buf_get+0x30>)
     534:	4798      	blx	r3
     536:	2800      	cmp	r0, #0
     538:	d10d      	bne.n	556 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     53a:	6823      	ldr	r3, [r4, #0]
     53c:	68a2      	ldr	r2, [r4, #8]
     53e:	5c9b      	ldrb	r3, [r3, r2]
     540:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     542:	2300      	movs	r3, #0
     544:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     546:	68a3      	ldr	r3, [r4, #8]
     548:	1c58      	adds	r0, r3, #1
     54a:	68e1      	ldr	r1, [r4, #12]
     54c:	4b04      	ldr	r3, [pc, #16]	; (560 <circular_buf_get+0x34>)
     54e:	4798      	blx	r3
     550:	60a1      	str	r1, [r4, #8]
		 r = 0;
     552:	2000      	movs	r0, #0
 }
     554:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     556:	2001      	movs	r0, #1
     558:	4240      	negs	r0, r0
	 return r;
     55a:	e7fb      	b.n	554 <circular_buf_get+0x28>
     55c:	00000515 	.word	0x00000515
     560:	00006049 	.word	0x00006049

00000564 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     564:	b570      	push	{r4, r5, r6, lr}
     566:	b082      	sub	sp, #8
     568:	0005      	movs	r5, r0
     56a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     56c:	2200      	movs	r2, #0
     56e:	466b      	mov	r3, sp
     570:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     572:	4c06      	ldr	r4, [pc, #24]	; (58c <usart_serial_getchar+0x28>)
     574:	466b      	mov	r3, sp
     576:	1d99      	adds	r1, r3, #6
     578:	0028      	movs	r0, r5
     57a:	47a0      	blx	r4
     57c:	2800      	cmp	r0, #0
     57e:	d1f9      	bne.n	574 <usart_serial_getchar+0x10>

	*c = temp;
     580:	466b      	mov	r3, sp
     582:	3306      	adds	r3, #6
     584:	881b      	ldrh	r3, [r3, #0]
     586:	7033      	strb	r3, [r6, #0]
}
     588:	b002      	add	sp, #8
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	00002b0d 	.word	0x00002b0d

00000590 <usart_serial_putchar>:
{
     590:	b570      	push	{r4, r5, r6, lr}
     592:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     594:	b28c      	uxth	r4, r1
     596:	4e03      	ldr	r6, [pc, #12]	; (5a4 <usart_serial_putchar+0x14>)
     598:	0021      	movs	r1, r4
     59a:	0028      	movs	r0, r5
     59c:	47b0      	blx	r6
     59e:	2800      	cmp	r0, #0
     5a0:	d1fa      	bne.n	598 <usart_serial_putchar+0x8>
}
     5a2:	bd70      	pop	{r4, r5, r6, pc}
     5a4:	00002ae1 	.word	0x00002ae1

000005a8 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     5a8:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     5aa:	4b06      	ldr	r3, [pc, #24]	; (5c4 <usart_write_callback+0x1c>)
     5ac:	6818      	ldr	r0, [r3, #0]
     5ae:	4906      	ldr	r1, [pc, #24]	; (5c8 <usart_write_callback+0x20>)
     5b0:	4b06      	ldr	r3, [pc, #24]	; (5cc <usart_write_callback+0x24>)
     5b2:	4798      	blx	r3
     5b4:	1c43      	adds	r3, r0, #1
     5b6:	d004      	beq.n	5c2 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     5b8:	2201      	movs	r2, #1
     5ba:	4903      	ldr	r1, [pc, #12]	; (5c8 <usart_write_callback+0x20>)
     5bc:	4804      	ldr	r0, [pc, #16]	; (5d0 <usart_write_callback+0x28>)
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <usart_write_callback+0x2c>)
     5c0:	4798      	blx	r3
	}
	
}
     5c2:	bd10      	pop	{r4, pc}
     5c4:	20000a2c 	.word	0x20000a2c
     5c8:	20000a28 	.word	0x20000a28
     5cc:	0000052d 	.word	0x0000052d
     5d0:	200001ec 	.word	0x200001ec
     5d4:	00002c21 	.word	0x00002c21

000005d8 <InitializeSerialConsole>:
{
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     5dc:	2580      	movs	r5, #128	; 0x80
     5de:	00ed      	lsls	r5, r5, #3
     5e0:	0029      	movs	r1, r5
     5e2:	483f      	ldr	r0, [pc, #252]	; (6e0 <InitializeSerialConsole+0x108>)
     5e4:	4c3f      	ldr	r4, [pc, #252]	; (6e4 <InitializeSerialConsole+0x10c>)
     5e6:	47a0      	blx	r4
     5e8:	4b3f      	ldr	r3, [pc, #252]	; (6e8 <InitializeSerialConsole+0x110>)
     5ea:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     5ec:	0029      	movs	r1, r5
     5ee:	483f      	ldr	r0, [pc, #252]	; (6ec <InitializeSerialConsole+0x114>)
     5f0:	47a0      	blx	r4
     5f2:	4b3f      	ldr	r3, [pc, #252]	; (6f0 <InitializeSerialConsole+0x118>)
     5f4:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     5f6:	2380      	movs	r3, #128	; 0x80
     5f8:	05db      	lsls	r3, r3, #23
     5fa:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     5fc:	2300      	movs	r3, #0
     5fe:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     600:	22ff      	movs	r2, #255	; 0xff
     602:	4669      	mov	r1, sp
     604:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     606:	2200      	movs	r2, #0
     608:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     60a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     60c:	2101      	movs	r1, #1
     60e:	2024      	movs	r0, #36	; 0x24
     610:	466c      	mov	r4, sp
     612:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     614:	3001      	adds	r0, #1
     616:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     618:	3125      	adds	r1, #37	; 0x25
     61a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     61c:	3101      	adds	r1, #1
     61e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     620:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     622:	3105      	adds	r1, #5
     624:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     626:	3101      	adds	r1, #1
     628:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     62a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     62c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     62e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     630:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     632:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     634:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     636:	2313      	movs	r3, #19
     638:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     63a:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     63c:	23e1      	movs	r3, #225	; 0xe1
     63e:	025b      	lsls	r3, r3, #9
     640:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     642:	23c4      	movs	r3, #196	; 0xc4
     644:	039b      	lsls	r3, r3, #14
     646:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     648:	2301      	movs	r3, #1
     64a:	425b      	negs	r3, r3
     64c:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     64e:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     650:	4b28      	ldr	r3, [pc, #160]	; (6f4 <InitializeSerialConsole+0x11c>)
     652:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     654:	4b28      	ldr	r3, [pc, #160]	; (6f8 <InitializeSerialConsole+0x120>)
     656:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     658:	4d28      	ldr	r5, [pc, #160]	; (6fc <InitializeSerialConsole+0x124>)
     65a:	4c29      	ldr	r4, [pc, #164]	; (700 <InitializeSerialConsole+0x128>)
     65c:	466a      	mov	r2, sp
     65e:	4929      	ldr	r1, [pc, #164]	; (704 <InitializeSerialConsole+0x12c>)
     660:	0028      	movs	r0, r5
     662:	47a0      	blx	r4
     664:	2800      	cmp	r0, #0
     666:	d1f9      	bne.n	65c <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     668:	4d24      	ldr	r5, [pc, #144]	; (6fc <InitializeSerialConsole+0x124>)
     66a:	4b27      	ldr	r3, [pc, #156]	; (708 <InitializeSerialConsole+0x130>)
     66c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     66e:	4a27      	ldr	r2, [pc, #156]	; (70c <InitializeSerialConsole+0x134>)
     670:	4b27      	ldr	r3, [pc, #156]	; (710 <InitializeSerialConsole+0x138>)
     672:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     674:	4a27      	ldr	r2, [pc, #156]	; (714 <InitializeSerialConsole+0x13c>)
     676:	4b28      	ldr	r3, [pc, #160]	; (718 <InitializeSerialConsole+0x140>)
     678:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     67a:	4e28      	ldr	r6, [pc, #160]	; (71c <InitializeSerialConsole+0x144>)
     67c:	6833      	ldr	r3, [r6, #0]
     67e:	6898      	ldr	r0, [r3, #8]
     680:	2100      	movs	r1, #0
     682:	4c27      	ldr	r4, [pc, #156]	; (720 <InitializeSerialConsole+0x148>)
     684:	47a0      	blx	r4
	setbuf(stdin, NULL);
     686:	6833      	ldr	r3, [r6, #0]
     688:	6858      	ldr	r0, [r3, #4]
     68a:	2100      	movs	r1, #0
     68c:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     68e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     690:	0020      	movs	r0, r4
     692:	4b24      	ldr	r3, [pc, #144]	; (724 <InitializeSerialConsole+0x14c>)
     694:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     696:	231f      	movs	r3, #31
     698:	4018      	ands	r0, r3
     69a:	3b1e      	subs	r3, #30
     69c:	4083      	lsls	r3, r0
     69e:	4a22      	ldr	r2, [pc, #136]	; (728 <InitializeSerialConsole+0x150>)
     6a0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6a2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     6a4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6a6:	2b00      	cmp	r3, #0
     6a8:	d1fc      	bne.n	6a4 <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     6aa:	6823      	ldr	r3, [r4, #0]
     6ac:	2202      	movs	r2, #2
     6ae:	4313      	orrs	r3, r2
     6b0:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     6b2:	4c12      	ldr	r4, [pc, #72]	; (6fc <InitializeSerialConsole+0x124>)
     6b4:	2200      	movs	r2, #0
     6b6:	491d      	ldr	r1, [pc, #116]	; (72c <InitializeSerialConsole+0x154>)
     6b8:	0020      	movs	r0, r4
     6ba:	4d1d      	ldr	r5, [pc, #116]	; (730 <InitializeSerialConsole+0x158>)
     6bc:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     6be:	2201      	movs	r2, #1
     6c0:	491c      	ldr	r1, [pc, #112]	; (734 <InitializeSerialConsole+0x15c>)
     6c2:	0020      	movs	r0, r4
     6c4:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6c6:	2231      	movs	r2, #49	; 0x31
     6c8:	5ca3      	ldrb	r3, [r4, r2]
     6ca:	2103      	movs	r1, #3
     6cc:	430b      	orrs	r3, r1
     6ce:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     6d0:	3a30      	subs	r2, #48	; 0x30
     6d2:	4919      	ldr	r1, [pc, #100]	; (738 <InitializeSerialConsole+0x160>)
     6d4:	0020      	movs	r0, r4
     6d6:	4b19      	ldr	r3, [pc, #100]	; (73c <InitializeSerialConsole+0x164>)
     6d8:	4798      	blx	r3
}
     6da:	b010      	add	sp, #64	; 0x40
     6dc:	bd70      	pop	{r4, r5, r6, pc}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	20000628 	.word	0x20000628
     6e4:	000004e1 	.word	0x000004e1
     6e8:	20000220 	.word	0x20000220
     6ec:	20000228 	.word	0x20000228
     6f0:	20000a2c 	.word	0x20000a2c
     6f4:	002a0003 	.word	0x002a0003
     6f8:	002b0003 	.word	0x002b0003
     6fc:	200001ec 	.word	0x200001ec
     700:	0000279d 	.word	0x0000279d
     704:	42001800 	.word	0x42001800
     708:	20000a58 	.word	0x20000a58
     70c:	00000591 	.word	0x00000591
     710:	20000a54 	.word	0x20000a54
     714:	00000565 	.word	0x00000565
     718:	20000a50 	.word	0x20000a50
     71c:	2000006c 	.word	0x2000006c
     720:	0000645d 	.word	0x0000645d
     724:	00001fcd 	.word	0x00001fcd
     728:	e000e100 	.word	0xe000e100
     72c:	000005a9 	.word	0x000005a9
     730:	00002c09 	.word	0x00002c09
     734:	000007ed 	.word	0x000007ed
     738:	20000224 	.word	0x20000224
     73c:	00002c41 	.word	0x00002c41

00000740 <DeinitializeSerialConsole>:
{
     740:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     742:	4d0a      	ldr	r5, [pc, #40]	; (76c <DeinitializeSerialConsole+0x2c>)
     744:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     746:	0020      	movs	r0, r4
     748:	4b09      	ldr	r3, [pc, #36]	; (770 <DeinitializeSerialConsole+0x30>)
     74a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     74c:	231f      	movs	r3, #31
     74e:	4018      	ands	r0, r3
     750:	3b1e      	subs	r3, #30
     752:	4083      	lsls	r3, r0
     754:	2280      	movs	r2, #128	; 0x80
     756:	4907      	ldr	r1, [pc, #28]	; (774 <DeinitializeSerialConsole+0x34>)
     758:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     75a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     75c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     75e:	2b00      	cmp	r3, #0
     760:	d1fc      	bne.n	75c <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     762:	6823      	ldr	r3, [r4, #0]
     764:	2202      	movs	r2, #2
     766:	4393      	bics	r3, r2
     768:	6023      	str	r3, [r4, #0]
}
     76a:	bd70      	pop	{r4, r5, r6, pc}
     76c:	200001ec 	.word	0x200001ec
     770:	00001fcd 	.word	0x00001fcd
     774:	e000e100 	.word	0xe000e100

00000778 <SerialConsoleWriteString>:
{
     778:	b5f0      	push	{r4, r5, r6, r7, lr}
     77a:	46c6      	mov	lr, r8
     77c:	b500      	push	{lr}
     77e:	0005      	movs	r5, r0
     780:	2400      	movs	r4, #0
	if(string != NULL)
     782:	2800      	cmp	r0, #0
     784:	d012      	beq.n	7ac <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     786:	4e11      	ldr	r6, [pc, #68]	; (7cc <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     788:	4f11      	ldr	r7, [pc, #68]	; (7d0 <SerialConsoleWriteString+0x58>)
     78a:	4b12      	ldr	r3, [pc, #72]	; (7d4 <SerialConsoleWriteString+0x5c>)
     78c:	4698      	mov	r8, r3
     78e:	e003      	b.n	798 <SerialConsoleWriteString+0x20>
     790:	5d29      	ldrb	r1, [r5, r4]
     792:	6838      	ldr	r0, [r7, #0]
     794:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     796:	3401      	adds	r4, #1
     798:	0028      	movs	r0, r5
     79a:	47b0      	blx	r6
     79c:	4284      	cmp	r4, r0
     79e:	d3f7      	bcc.n	790 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     7a0:	2101      	movs	r1, #1
     7a2:	480d      	ldr	r0, [pc, #52]	; (7d8 <SerialConsoleWriteString+0x60>)
     7a4:	4b0d      	ldr	r3, [pc, #52]	; (7dc <SerialConsoleWriteString+0x64>)
     7a6:	4798      	blx	r3
     7a8:	2800      	cmp	r0, #0
     7aa:	d002      	beq.n	7b2 <SerialConsoleWriteString+0x3a>
}
     7ac:	bc04      	pop	{r2}
     7ae:	4690      	mov	r8, r2
     7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     7b2:	4c0b      	ldr	r4, [pc, #44]	; (7e0 <SerialConsoleWriteString+0x68>)
     7b4:	4b06      	ldr	r3, [pc, #24]	; (7d0 <SerialConsoleWriteString+0x58>)
     7b6:	6818      	ldr	r0, [r3, #0]
     7b8:	0021      	movs	r1, r4
     7ba:	4b0a      	ldr	r3, [pc, #40]	; (7e4 <SerialConsoleWriteString+0x6c>)
     7bc:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     7be:	2201      	movs	r2, #1
     7c0:	0021      	movs	r1, r4
     7c2:	4805      	ldr	r0, [pc, #20]	; (7d8 <SerialConsoleWriteString+0x60>)
     7c4:	4b08      	ldr	r3, [pc, #32]	; (7e8 <SerialConsoleWriteString+0x70>)
     7c6:	4798      	blx	r3
}
     7c8:	e7f0      	b.n	7ac <SerialConsoleWriteString+0x34>
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	0000662d 	.word	0x0000662d
     7d0:	20000a2c 	.word	0x20000a2c
     7d4:	00000501 	.word	0x00000501
     7d8:	200001ec 	.word	0x200001ec
     7dc:	00002c61 	.word	0x00002c61
     7e0:	20000a28 	.word	0x20000a28
     7e4:	0000052d 	.word	0x0000052d
     7e8:	00002c21 	.word	0x00002c21

000007ec <usart_read_callback>:
{
     7ec:	b510      	push	{r4, lr}
     7ee:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     7f0:	4c0d      	ldr	r4, [pc, #52]	; (828 <usart_read_callback+0x3c>)
     7f2:	0020      	movs	r0, r4
     7f4:	4b0d      	ldr	r3, [pc, #52]	; (82c <usart_read_callback+0x40>)
     7f6:	4798      	blx	r3
	if(latestRx == 0x08)
     7f8:	7823      	ldrb	r3, [r4, #0]
     7fa:	2b08      	cmp	r3, #8
     7fc:	d00c      	beq.n	818 <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     7fe:	4c0a      	ldr	r4, [pc, #40]	; (828 <usart_read_callback+0x3c>)
     800:	7821      	ldrb	r1, [r4, #0]
     802:	4b0b      	ldr	r3, [pc, #44]	; (830 <usart_read_callback+0x44>)
     804:	6818      	ldr	r0, [r3, #0]
     806:	4b0b      	ldr	r3, [pc, #44]	; (834 <usart_read_callback+0x48>)
     808:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     80a:	2201      	movs	r2, #1
     80c:	0021      	movs	r1, r4
     80e:	480a      	ldr	r0, [pc, #40]	; (838 <usart_read_callback+0x4c>)
     810:	4b0a      	ldr	r3, [pc, #40]	; (83c <usart_read_callback+0x50>)
     812:	4798      	blx	r3
}
     814:	b002      	add	sp, #8
     816:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     818:	a801      	add	r0, sp, #4
     81a:	3318      	adds	r3, #24
     81c:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     81e:	3b18      	subs	r3, #24
     820:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString((const char*)&a);
     822:	4b02      	ldr	r3, [pc, #8]	; (82c <usart_read_callback+0x40>)
     824:	4798      	blx	r3
     826:	e7ea      	b.n	7fe <usart_read_callback+0x12>
     828:	20000224 	.word	0x20000224
     82c:	00000779 	.word	0x00000779
     830:	20000220 	.word	0x20000220
     834:	00000501 	.word	0x00000501
     838:	200001ec 	.word	0x200001ec
     83c:	00002c41 	.word	0x00002c41

00000840 <LogMessage>:
{
     840:	b40e      	push	{r1, r2, r3}
};
     842:	b003      	add	sp, #12
     844:	4770      	bx	lr
	...

00000848 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     848:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     84a:	4b06      	ldr	r3, [pc, #24]	; (864 <sd_mmc_configure_slot+0x1c>)
     84c:	6819      	ldr	r1, [r3, #0]
     84e:	7f8b      	ldrb	r3, [r1, #30]
     850:	1e5a      	subs	r2, r3, #1
     852:	4193      	sbcs	r3, r2
     854:	b2db      	uxtb	r3, r3
     856:	7b4a      	ldrb	r2, [r1, #13]
     858:	6809      	ldr	r1, [r1, #0]
     85a:	4803      	ldr	r0, [pc, #12]	; (868 <sd_mmc_configure_slot+0x20>)
     85c:	7800      	ldrb	r0, [r0, #0]
     85e:	4c03      	ldr	r4, [pc, #12]	; (86c <sd_mmc_configure_slot+0x24>)
     860:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     862:	bd10      	pop	{r4, pc}
     864:	200000f8 	.word	0x200000f8
     868:	20000120 	.word	0x20000120
     86c:	00001505 	.word	0x00001505

00000870 <sd_mmc_select_slot>:
{
     870:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     872:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     874:	2800      	cmp	r0, #0
     876:	d001      	beq.n	87c <sd_mmc_select_slot+0xc>
}
     878:	0018      	movs	r0, r3
     87a:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     87c:	4b0e      	ldr	r3, [pc, #56]	; (8b8 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     87e:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     880:	3b03      	subs	r3, #3
     882:	2b01      	cmp	r3, #1
     884:	d90d      	bls.n	8a2 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     886:	2200      	movs	r2, #0
     888:	4b0c      	ldr	r3, [pc, #48]	; (8bc <sd_mmc_select_slot+0x4c>)
     88a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     88c:	4c0a      	ldr	r4, [pc, #40]	; (8b8 <sd_mmc_select_slot+0x48>)
     88e:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <sd_mmc_select_slot+0x50>)
     890:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     892:	4b0c      	ldr	r3, [pc, #48]	; (8c4 <sd_mmc_select_slot+0x54>)
     894:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     896:	7aa3      	ldrb	r3, [r4, #10]
     898:	3b02      	subs	r3, #2
     89a:	4258      	negs	r0, r3
     89c:	4143      	adcs	r3, r0
     89e:	b2db      	uxtb	r3, r3
     8a0:	e7ea      	b.n	878 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     8a2:	4b05      	ldr	r3, [pc, #20]	; (8b8 <sd_mmc_select_slot+0x48>)
     8a4:	2202      	movs	r2, #2
     8a6:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     8a8:	4a07      	ldr	r2, [pc, #28]	; (8c8 <sd_mmc_select_slot+0x58>)
     8aa:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     8ac:	2201      	movs	r2, #1
     8ae:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     8b0:	2200      	movs	r2, #0
     8b2:	779a      	strb	r2, [r3, #30]
     8b4:	e7e7      	b.n	886 <sd_mmc_select_slot+0x16>
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	200000fc 	.word	0x200000fc
     8bc:	20000120 	.word	0x20000120
     8c0:	200000f8 	.word	0x200000f8
     8c4:	00000849 	.word	0x00000849
     8c8:	00061a80 	.word	0x00061a80

000008cc <sd_mmc_cmd13>:
{
     8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ce:	4d09      	ldr	r5, [pc, #36]	; (8f4 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8d0:	4f09      	ldr	r7, [pc, #36]	; (8f8 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     8d2:	4e0a      	ldr	r6, [pc, #40]	; (8fc <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8d4:	2100      	movs	r1, #0
     8d6:	480a      	ldr	r0, [pc, #40]	; (900 <sd_mmc_cmd13+0x34>)
     8d8:	47b8      	blx	r7
     8da:	1e04      	subs	r4, r0, #0
     8dc:	d007      	beq.n	8ee <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     8de:	47b0      	blx	r6
     8e0:	23ff      	movs	r3, #255	; 0xff
     8e2:	4203      	tst	r3, r0
     8e4:	d003      	beq.n	8ee <sd_mmc_cmd13+0x22>
     8e6:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     8e8:	2d00      	cmp	r5, #0
     8ea:	d1f3      	bne.n	8d4 <sd_mmc_cmd13+0x8>
			return false;
     8ec:	2400      	movs	r4, #0
}
     8ee:	0020      	movs	r0, r4
     8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	00030d41 	.word	0x00030d41
     8f8:	00001749 	.word	0x00001749
     8fc:	00001761 	.word	0x00001761
     900:	00001b0d 	.word	0x00001b0d

00000904 <sd_mmc_cmd9_spi>:
{
     904:	b510      	push	{r4, lr}
     906:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     908:	4b0c      	ldr	r3, [pc, #48]	; (93c <sd_mmc_cmd9_spi+0x38>)
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	8919      	ldrh	r1, [r3, #8]
     90e:	0409      	lsls	r1, r1, #16
     910:	2301      	movs	r3, #1
     912:	9300      	str	r3, [sp, #0]
     914:	2210      	movs	r2, #16
     916:	480a      	ldr	r0, [pc, #40]	; (940 <sd_mmc_cmd9_spi+0x3c>)
     918:	4c0a      	ldr	r4, [pc, #40]	; (944 <sd_mmc_cmd9_spi+0x40>)
     91a:	47a0      	blx	r4
     91c:	2800      	cmp	r0, #0
     91e:	d101      	bne.n	924 <sd_mmc_cmd9_spi+0x20>
}
     920:	b002      	add	sp, #8
     922:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     924:	4b05      	ldr	r3, [pc, #20]	; (93c <sd_mmc_cmd9_spi+0x38>)
     926:	6818      	ldr	r0, [r3, #0]
     928:	300e      	adds	r0, #14
     92a:	2101      	movs	r1, #1
     92c:	4b06      	ldr	r3, [pc, #24]	; (948 <sd_mmc_cmd9_spi+0x44>)
     92e:	4798      	blx	r3
     930:	2800      	cmp	r0, #0
     932:	d0f5      	beq.n	920 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     934:	4b05      	ldr	r3, [pc, #20]	; (94c <sd_mmc_cmd9_spi+0x48>)
     936:	4798      	blx	r3
     938:	e7f2      	b.n	920 <sd_mmc_cmd9_spi+0x1c>
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	200000f8 	.word	0x200000f8
     940:	00081109 	.word	0x00081109
     944:	000015b9 	.word	0x000015b9
     948:	000017e5 	.word	0x000017e5
     94c:	00001871 	.word	0x00001871

00000950 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     950:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     952:	4b04      	ldr	r3, [pc, #16]	; (964 <sd_mmc_deselect_slot+0x14>)
     954:	781b      	ldrb	r3, [r3, #0]
     956:	2b00      	cmp	r3, #0
     958:	d000      	beq.n	95c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     95a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     95c:	2000      	movs	r0, #0
     95e:	4b02      	ldr	r3, [pc, #8]	; (968 <sd_mmc_deselect_slot+0x18>)
     960:	4798      	blx	r3
}
     962:	e7fa      	b.n	95a <sd_mmc_deselect_slot+0xa>
     964:	20000120 	.word	0x20000120
     968:	00001559 	.word	0x00001559

0000096c <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     96c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     96e:	2204      	movs	r2, #4
     970:	4b03      	ldr	r3, [pc, #12]	; (980 <sd_mmc_init+0x14>)
     972:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     974:	32fb      	adds	r2, #251	; 0xfb
     976:	4b03      	ldr	r3, [pc, #12]	; (984 <sd_mmc_init+0x18>)
     978:	701a      	strb	r2, [r3, #0]
	driver_init();
     97a:	4b03      	ldr	r3, [pc, #12]	; (988 <sd_mmc_init+0x1c>)
     97c:	4798      	blx	r3
}
     97e:	bd10      	pop	{r4, pc}
     980:	200000fc 	.word	0x200000fc
     984:	20000120 	.word	0x20000120
     988:	00001405 	.word	0x00001405

0000098c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     98c:	b5f0      	push	{r4, r5, r6, r7, lr}
     98e:	46c6      	mov	lr, r8
     990:	b500      	push	{lr}
     992:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     994:	4bcb      	ldr	r3, [pc, #812]	; (cc4 <sd_mmc_check+0x338>)
     996:	4798      	blx	r3
     998:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     99a:	2801      	cmp	r0, #1
     99c:	d006      	beq.n	9ac <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     99e:	4bca      	ldr	r3, [pc, #808]	; (cc8 <sd_mmc_check+0x33c>)
     9a0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     9a2:	0020      	movs	r0, r4
     9a4:	b008      	add	sp, #32
     9a6:	bc04      	pop	{r2}
     9a8:	4690      	mov	r8, r2
     9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     9ac:	4bc7      	ldr	r3, [pc, #796]	; (ccc <sd_mmc_check+0x340>)
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	2201      	movs	r2, #1
     9b2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     9b4:	2200      	movs	r2, #0
     9b6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     9b8:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     9ba:	4bc5      	ldr	r3, [pc, #788]	; (cd0 <sd_mmc_check+0x344>)
     9bc:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     9be:	2100      	movs	r1, #0
     9c0:	2088      	movs	r0, #136	; 0x88
     9c2:	0140      	lsls	r0, r0, #5
     9c4:	4bc3      	ldr	r3, [pc, #780]	; (cd4 <sd_mmc_check+0x348>)
     9c6:	4798      	blx	r3
     9c8:	2800      	cmp	r0, #0
     9ca:	d107      	bne.n	9dc <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     9cc:	4bbf      	ldr	r3, [pc, #764]	; (ccc <sd_mmc_check+0x340>)
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	2203      	movs	r2, #3
     9d2:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     9d4:	4bbc      	ldr	r3, [pc, #752]	; (cc8 <sd_mmc_check+0x33c>)
     9d6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     9d8:	2403      	movs	r4, #3
     9da:	e7e2      	b.n	9a2 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     9dc:	21d5      	movs	r1, #213	; 0xd5
     9de:	0049      	lsls	r1, r1, #1
     9e0:	48bd      	ldr	r0, [pc, #756]	; (cd8 <sd_mmc_check+0x34c>)
     9e2:	4bbc      	ldr	r3, [pc, #752]	; (cd4 <sd_mmc_check+0x348>)
     9e4:	4798      	blx	r3
	*v2 = 0;
     9e6:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     9e8:	2800      	cmp	r0, #0
     9ea:	d125      	bne.n	a38 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     9ec:	4bb7      	ldr	r3, [pc, #732]	; (ccc <sd_mmc_check+0x340>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	7adb      	ldrb	r3, [r3, #11]
     9f2:	07db      	lsls	r3, r3, #31
     9f4:	d500      	bpl.n	9f8 <sd_mmc_check+0x6c>
     9f6:	e1eb      	b.n	dd0 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     9f8:	4bb4      	ldr	r3, [pc, #720]	; (ccc <sd_mmc_check+0x340>)
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	7ada      	ldrb	r2, [r3, #11]
     9fe:	2309      	movs	r3, #9
     a00:	4013      	ands	r3, r2
     a02:	2b01      	cmp	r3, #1
     a04:	d10f      	bne.n	a26 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     a06:	2180      	movs	r1, #128	; 0x80
     a08:	0089      	lsls	r1, r1, #2
     a0a:	48b4      	ldr	r0, [pc, #720]	; (cdc <sd_mmc_check+0x350>)
     a0c:	4bb1      	ldr	r3, [pc, #708]	; (cd4 <sd_mmc_check+0x348>)
     a0e:	4798      	blx	r3
     a10:	2800      	cmp	r0, #0
     a12:	d0db      	beq.n	9cc <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a14:	4bad      	ldr	r3, [pc, #692]	; (ccc <sd_mmc_check+0x340>)
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	7adb      	ldrb	r3, [r3, #11]
     a1a:	07db      	lsls	r3, r3, #31
     a1c:	d503      	bpl.n	a26 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     a1e:	4bb0      	ldr	r3, [pc, #704]	; (ce0 <sd_mmc_check+0x354>)
     a20:	4798      	blx	r3
     a22:	2800      	cmp	r0, #0
     a24:	d0d2      	beq.n	9cc <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     a26:	4baf      	ldr	r3, [pc, #700]	; (ce4 <sd_mmc_check+0x358>)
     a28:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     a2a:	4ba8      	ldr	r3, [pc, #672]	; (ccc <sd_mmc_check+0x340>)
     a2c:	681b      	ldr	r3, [r3, #0]
     a2e:	2200      	movs	r2, #0
     a30:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     a32:	4ba5      	ldr	r3, [pc, #660]	; (cc8 <sd_mmc_check+0x33c>)
     a34:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     a36:	e7b4      	b.n	9a2 <sd_mmc_check+0x16>
	resp = driver_get_response();
     a38:	4bab      	ldr	r3, [pc, #684]	; (ce8 <sd_mmc_check+0x35c>)
     a3a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     a3c:	1c43      	adds	r3, r0, #1
     a3e:	d100      	bne.n	a42 <sd_mmc_check+0xb6>
     a40:	e1c4      	b.n	dcc <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a42:	0500      	lsls	r0, r0, #20
     a44:	0d00      	lsrs	r0, r0, #20
     a46:	23d5      	movs	r3, #213	; 0xd5
     a48:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     a4a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a4c:	4298      	cmp	r0, r3
     a4e:	d1bd      	bne.n	9cc <sd_mmc_check+0x40>
     a50:	e7cc      	b.n	9ec <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     a52:	2100      	movs	r1, #0
     a54:	48a5      	ldr	r0, [pc, #660]	; (cec <sd_mmc_check+0x360>)
     a56:	4b9f      	ldr	r3, [pc, #636]	; (cd4 <sd_mmc_check+0x348>)
     a58:	4798      	blx	r3
     a5a:	2800      	cmp	r0, #0
     a5c:	d119      	bne.n	a92 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     a5e:	4b9b      	ldr	r3, [pc, #620]	; (ccc <sd_mmc_check+0x340>)
     a60:	681b      	ldr	r3, [r3, #0]
     a62:	2202      	movs	r2, #2
     a64:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     a66:	2100      	movs	r1, #0
     a68:	2088      	movs	r0, #136	; 0x88
     a6a:	0140      	lsls	r0, r0, #5
     a6c:	4b99      	ldr	r3, [pc, #612]	; (cd4 <sd_mmc_check+0x348>)
     a6e:	4798      	blx	r3
     a70:	2800      	cmp	r0, #0
     a72:	d0ab      	beq.n	9cc <sd_mmc_check+0x40>
     a74:	4d9e      	ldr	r5, [pc, #632]	; (cf0 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a76:	4f97      	ldr	r7, [pc, #604]	; (cd4 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     a78:	4e9b      	ldr	r6, [pc, #620]	; (ce8 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a7a:	2100      	movs	r1, #0
     a7c:	489d      	ldr	r0, [pc, #628]	; (cf4 <sd_mmc_check+0x368>)
     a7e:	47b8      	blx	r7
     a80:	2800      	cmp	r0, #0
     a82:	d0a3      	beq.n	9cc <sd_mmc_check+0x40>
		resp = driver_get_response();
     a84:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     a86:	07c3      	lsls	r3, r0, #31
     a88:	d57d      	bpl.n	b86 <sd_mmc_check+0x1fa>
     a8a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     a8c:	2d00      	cmp	r5, #0
     a8e:	d1f4      	bne.n	a7a <sd_mmc_check+0xee>
     a90:	e79c      	b.n	9cc <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     a92:	4b95      	ldr	r3, [pc, #596]	; (ce8 <sd_mmc_check+0x35c>)
     a94:	4798      	blx	r3
     a96:	0043      	lsls	r3, r0, #1
     a98:	d505      	bpl.n	aa6 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     a9a:	4b8c      	ldr	r3, [pc, #560]	; (ccc <sd_mmc_check+0x340>)
     a9c:	681a      	ldr	r2, [r3, #0]
     a9e:	7ad3      	ldrb	r3, [r2, #11]
     aa0:	2108      	movs	r1, #8
     aa2:	430b      	orrs	r3, r1
     aa4:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     aa6:	2100      	movs	r1, #0
     aa8:	4893      	ldr	r0, [pc, #588]	; (cf8 <sd_mmc_check+0x36c>)
     aaa:	4b8a      	ldr	r3, [pc, #552]	; (cd4 <sd_mmc_check+0x348>)
     aac:	4798      	blx	r3
     aae:	2800      	cmp	r0, #0
     ab0:	d08c      	beq.n	9cc <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ab2:	4b86      	ldr	r3, [pc, #536]	; (ccc <sd_mmc_check+0x340>)
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	7adb      	ldrb	r3, [r3, #11]
     ab8:	07da      	lsls	r2, r3, #31
     aba:	d400      	bmi.n	abe <sd_mmc_check+0x132>
     abc:	e1a4      	b.n	e08 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     abe:	4b8f      	ldr	r3, [pc, #572]	; (cfc <sd_mmc_check+0x370>)
     ac0:	4798      	blx	r3
     ac2:	2800      	cmp	r0, #0
     ac4:	d082      	beq.n	9cc <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     ac6:	4b81      	ldr	r3, [pc, #516]	; (ccc <sd_mmc_check+0x340>)
     ac8:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     aca:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     acc:	2107      	movs	r1, #7
     ace:	4019      	ands	r1, r3
     ad0:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     ad2:	488b      	ldr	r0, [pc, #556]	; (d00 <sd_mmc_check+0x374>)
     ad4:	5808      	ldr	r0, [r1, r0]
     ad6:	21fa      	movs	r1, #250	; 0xfa
     ad8:	0089      	lsls	r1, r1, #2
     ada:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     adc:	065b      	lsls	r3, r3, #25
     ade:	0f1b      	lsrs	r3, r3, #28
     ae0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     ae2:	4888      	ldr	r0, [pc, #544]	; (d04 <sd_mmc_check+0x378>)
     ae4:	581b      	ldr	r3, [r3, r0]
     ae6:	434b      	muls	r3, r1
     ae8:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     aea:	7b93      	ldrb	r3, [r2, #14]
     aec:	099b      	lsrs	r3, r3, #6
     aee:	d000      	beq.n	af2 <sd_mmc_check+0x166>
     af0:	e13c      	b.n	d6c <sd_mmc_check+0x3e0>
     af2:	7d91      	ldrb	r1, [r2, #22]
     af4:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     af6:	7d53      	ldrb	r3, [r2, #21]
     af8:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     afa:	7d10      	ldrb	r0, [r2, #20]
     afc:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     afe:	4303      	orrs	r3, r0
     b00:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b02:	7e10      	ldrb	r0, [r2, #24]
     b04:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b06:	7dd1      	ldrb	r1, [r2, #23]
     b08:	0049      	lsls	r1, r1, #1
     b0a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     b0c:	051b      	lsls	r3, r3, #20
     b0e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b10:	3301      	adds	r3, #1
     b12:	2107      	movs	r1, #7
     b14:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     b16:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b18:	408b      	lsls	r3, r1
     b1a:	7cd0      	ldrb	r0, [r2, #19]
     b1c:	210f      	movs	r1, #15
     b1e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     b20:	408b      	lsls	r3, r1
				/ 1024;
     b22:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     b24:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     b26:	8911      	ldrh	r1, [r2, #8]
     b28:	0409      	lsls	r1, r1, #16
     b2a:	4877      	ldr	r0, [pc, #476]	; (d08 <sd_mmc_check+0x37c>)
     b2c:	4b69      	ldr	r3, [pc, #420]	; (cd4 <sd_mmc_check+0x348>)
     b2e:	4798      	blx	r3
     b30:	2800      	cmp	r0, #0
     b32:	d100      	bne.n	b36 <sd_mmc_check+0x1aa>
     b34:	e74a      	b.n	9cc <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     b36:	2301      	movs	r3, #1
     b38:	9300      	str	r3, [sp, #0]
     b3a:	2208      	movs	r2, #8
     b3c:	2100      	movs	r1, #0
     b3e:	4873      	ldr	r0, [pc, #460]	; (d0c <sd_mmc_check+0x380>)
     b40:	4d73      	ldr	r5, [pc, #460]	; (d10 <sd_mmc_check+0x384>)
     b42:	47a8      	blx	r5
     b44:	2800      	cmp	r0, #0
     b46:	d100      	bne.n	b4a <sd_mmc_check+0x1be>
     b48:	e740      	b.n	9cc <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     b4a:	2101      	movs	r1, #1
     b4c:	a806      	add	r0, sp, #24
     b4e:	4b71      	ldr	r3, [pc, #452]	; (d14 <sd_mmc_check+0x388>)
     b50:	4798      	blx	r3
     b52:	2800      	cmp	r0, #0
     b54:	d100      	bne.n	b58 <sd_mmc_check+0x1cc>
     b56:	e739      	b.n	9cc <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     b58:	4b6f      	ldr	r3, [pc, #444]	; (d18 <sd_mmc_check+0x38c>)
     b5a:	4798      	blx	r3
     b5c:	2800      	cmp	r0, #0
     b5e:	d100      	bne.n	b62 <sd_mmc_check+0x1d6>
     b60:	e734      	b.n	9cc <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b62:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     b64:	781b      	ldrb	r3, [r3, #0]
     b66:	220f      	movs	r2, #15
     b68:	4013      	ands	r3, r2
     b6a:	2b01      	cmp	r3, #1
     b6c:	d100      	bne.n	b70 <sd_mmc_check+0x1e4>
     b6e:	e119      	b.n	da4 <sd_mmc_check+0x418>
     b70:	2b00      	cmp	r3, #0
     b72:	d100      	bne.n	b76 <sd_mmc_check+0x1ea>
     b74:	e109      	b.n	d8a <sd_mmc_check+0x3fe>
     b76:	2b02      	cmp	r3, #2
     b78:	d100      	bne.n	b7c <sd_mmc_check+0x1f0>
     b7a:	e118      	b.n	dae <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     b7c:	4b53      	ldr	r3, [pc, #332]	; (ccc <sd_mmc_check+0x340>)
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	2210      	movs	r2, #16
     b82:	731a      	strb	r2, [r3, #12]
     b84:	e105      	b.n	d92 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     b86:	2100      	movs	r1, #0
     b88:	4858      	ldr	r0, [pc, #352]	; (cec <sd_mmc_check+0x360>)
     b8a:	4b52      	ldr	r3, [pc, #328]	; (cd4 <sd_mmc_check+0x348>)
     b8c:	4798      	blx	r3
     b8e:	2800      	cmp	r0, #0
     b90:	d100      	bne.n	b94 <sd_mmc_check+0x208>
     b92:	e71b      	b.n	9cc <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     b94:	4b54      	ldr	r3, [pc, #336]	; (ce8 <sd_mmc_check+0x35c>)
     b96:	4798      	blx	r3
     b98:	23c0      	movs	r3, #192	; 0xc0
     b9a:	05db      	lsls	r3, r3, #23
     b9c:	4018      	ands	r0, r3
     b9e:	2380      	movs	r3, #128	; 0x80
     ba0:	05db      	lsls	r3, r3, #23
     ba2:	4298      	cmp	r0, r3
     ba4:	d105      	bne.n	bb2 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     ba6:	4b49      	ldr	r3, [pc, #292]	; (ccc <sd_mmc_check+0x340>)
     ba8:	681a      	ldr	r2, [r3, #0]
     baa:	7ad1      	ldrb	r1, [r2, #11]
     bac:	2308      	movs	r3, #8
     bae:	430b      	orrs	r3, r1
     bb0:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     bb2:	2100      	movs	r1, #0
     bb4:	4850      	ldr	r0, [pc, #320]	; (cf8 <sd_mmc_check+0x36c>)
     bb6:	4b47      	ldr	r3, [pc, #284]	; (cd4 <sd_mmc_check+0x348>)
     bb8:	4798      	blx	r3
     bba:	2800      	cmp	r0, #0
     bbc:	d100      	bne.n	bc0 <sd_mmc_check+0x234>
     bbe:	e705      	b.n	9cc <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     bc0:	4b4e      	ldr	r3, [pc, #312]	; (cfc <sd_mmc_check+0x370>)
     bc2:	4798      	blx	r3
     bc4:	2800      	cmp	r0, #0
     bc6:	d100      	bne.n	bca <sd_mmc_check+0x23e>
     bc8:	e700      	b.n	9cc <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     bca:	4b40      	ldr	r3, [pc, #256]	; (ccc <sd_mmc_check+0x340>)
     bcc:	681a      	ldr	r2, [r3, #0]
     bce:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     bd0:	069b      	lsls	r3, r3, #26
     bd2:	0f1b      	lsrs	r3, r3, #28
     bd4:	2b02      	cmp	r3, #2
     bd6:	d100      	bne.n	bda <sd_mmc_check+0x24e>
     bd8:	e0a8      	b.n	d2c <sd_mmc_check+0x3a0>
     bda:	d907      	bls.n	bec <sd_mmc_check+0x260>
     bdc:	2b03      	cmp	r3, #3
     bde:	d100      	bne.n	be2 <sd_mmc_check+0x256>
     be0:	e0a7      	b.n	d32 <sd_mmc_check+0x3a6>
     be2:	2b04      	cmp	r3, #4
     be4:	d104      	bne.n	bf0 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     be6:	2340      	movs	r3, #64	; 0x40
     be8:	7313      	strb	r3, [r2, #12]
     bea:	e003      	b.n	bf4 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     bec:	2b01      	cmp	r3, #1
     bee:	d066      	beq.n	cbe <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     bf0:	2312      	movs	r3, #18
     bf2:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     bf4:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     bf6:	0659      	lsls	r1, r3, #25
     bf8:	0f09      	lsrs	r1, r1, #28
     bfa:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     bfc:	2007      	movs	r0, #7
     bfe:	4003      	ands	r3, r0
     c00:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c02:	483f      	ldr	r0, [pc, #252]	; (d00 <sd_mmc_check+0x374>)
     c04:	5818      	ldr	r0, [r3, r0]
     c06:	23fa      	movs	r3, #250	; 0xfa
     c08:	009b      	lsls	r3, r3, #2
     c0a:	4343      	muls	r3, r0
     c0c:	4843      	ldr	r0, [pc, #268]	; (d1c <sd_mmc_check+0x390>)
     c0e:	5809      	ldr	r1, [r1, r0]
     c10:	434b      	muls	r3, r1
     c12:	6013      	str	r3, [r2, #0]
     c14:	7d91      	ldrb	r1, [r2, #22]
     c16:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c18:	7d53      	ldrb	r3, [r2, #21]
     c1a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c1c:	7d10      	ldrb	r0, [r2, #20]
     c1e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c20:	4303      	orrs	r3, r0
     c22:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     c24:	051b      	lsls	r3, r3, #20
     c26:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     c28:	493d      	ldr	r1, [pc, #244]	; (d20 <sd_mmc_check+0x394>)
     c2a:	428b      	cmp	r3, r1
     c2c:	d00f      	beq.n	c4e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c2e:	7e10      	ldrb	r0, [r2, #24]
     c30:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c32:	7dd1      	ldrb	r1, [r2, #23]
     c34:	0049      	lsls	r1, r1, #1
     c36:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c38:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     c3a:	2007      	movs	r0, #7
     c3c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     c3e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c40:	408b      	lsls	r3, r1
     c42:	7cd1      	ldrb	r1, [r2, #19]
     c44:	3008      	adds	r0, #8
     c46:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     c48:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     c4a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     c4c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     c4e:	7b13      	ldrb	r3, [r2, #12]
     c50:	2b3f      	cmp	r3, #63	; 0x3f
     c52:	d97b      	bls.n	d4c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     c54:	2100      	movs	r1, #0
     c56:	9100      	str	r1, [sp, #0]
     c58:	2301      	movs	r3, #1
     c5a:	2280      	movs	r2, #128	; 0x80
     c5c:	0092      	lsls	r2, r2, #2
     c5e:	4831      	ldr	r0, [pc, #196]	; (d24 <sd_mmc_check+0x398>)
     c60:	4d2b      	ldr	r5, [pc, #172]	; (d10 <sd_mmc_check+0x384>)
     c62:	47a8      	blx	r5
     c64:	2800      	cmp	r0, #0
     c66:	d100      	bne.n	c6a <sd_mmc_check+0x2de>
     c68:	e6b0      	b.n	9cc <sd_mmc_check+0x40>
     c6a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     c6c:	4e2e      	ldr	r6, [pc, #184]	; (d28 <sd_mmc_check+0x39c>)
     c6e:	a805      	add	r0, sp, #20
     c70:	47b0      	blx	r6
     c72:	2800      	cmp	r0, #0
     c74:	d100      	bne.n	c78 <sd_mmc_check+0x2ec>
     c76:	e6a9      	b.n	9cc <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     c78:	3501      	adds	r5, #1
     c7a:	b2ad      	uxth	r5, r5
     c7c:	2d32      	cmp	r5, #50	; 0x32
     c7e:	d1f6      	bne.n	c6e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     c80:	4b12      	ldr	r3, [pc, #72]	; (ccc <sd_mmc_check+0x340>)
     c82:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c84:	7d8a      	ldrb	r2, [r1, #22]
     c86:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c88:	7d4b      	ldrb	r3, [r1, #21]
     c8a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c8c:	7d09      	ldrb	r1, [r1, #20]
     c8e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c90:	430b      	orrs	r3, r1
     c92:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     c94:	051b      	lsls	r3, r3, #20
     c96:	0d1b      	lsrs	r3, r3, #20
     c98:	4a21      	ldr	r2, [pc, #132]	; (d20 <sd_mmc_check+0x394>)
     c9a:	4293      	cmp	r3, r2
     c9c:	d154      	bne.n	d48 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     c9e:	4e22      	ldr	r6, [pc, #136]	; (d28 <sd_mmc_check+0x39c>)
     ca0:	a806      	add	r0, sp, #24
     ca2:	47b0      	blx	r6
     ca4:	2800      	cmp	r0, #0
     ca6:	d100      	bne.n	caa <sd_mmc_check+0x31e>
     ca8:	e690      	b.n	9cc <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     caa:	3501      	adds	r5, #1
     cac:	b2ad      	uxth	r5, r5
     cae:	2d35      	cmp	r5, #53	; 0x35
     cb0:	d9f6      	bls.n	ca0 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     cb2:	4b06      	ldr	r3, [pc, #24]	; (ccc <sd_mmc_check+0x340>)
     cb4:	681a      	ldr	r2, [r3, #0]
     cb6:	9b06      	ldr	r3, [sp, #24]
     cb8:	085b      	lsrs	r3, r3, #1
     cba:	6053      	str	r3, [r2, #4]
     cbc:	e044      	b.n	d48 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     cbe:	2314      	movs	r3, #20
     cc0:	7313      	strb	r3, [r2, #12]
     cc2:	e797      	b.n	bf4 <sd_mmc_check+0x268>
     cc4:	00000871 	.word	0x00000871
     cc8:	00000951 	.word	0x00000951
     ccc:	200000f8 	.word	0x200000f8
     cd0:	00001581 	.word	0x00001581
     cd4:	00001749 	.word	0x00001749
     cd8:	00005508 	.word	0x00005508
     cdc:	00001110 	.word	0x00001110
     ce0:	000008cd 	.word	0x000008cd
     ce4:	00000849 	.word	0x00000849
     ce8:	00001761 	.word	0x00001761
     cec:	0000053a 	.word	0x0000053a
     cf0:	00001bef 	.word	0x00001bef
     cf4:	00001101 	.word	0x00001101
     cf8:	0000113b 	.word	0x0000113b
     cfc:	00000905 	.word	0x00000905
     d00:	000072e0 	.word	0x000072e0
     d04:	000072fc 	.word	0x000072fc
     d08:	00001137 	.word	0x00001137
     d0c:	00081133 	.word	0x00081133
     d10:	000015b9 	.word	0x000015b9
     d14:	000017e5 	.word	0x000017e5
     d18:	00001871 	.word	0x00001871
     d1c:	000072a0 	.word	0x000072a0
     d20:	00000fff 	.word	0x00000fff
     d24:	00081108 	.word	0x00081108
     d28:	0000176d 	.word	0x0000176d
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     d2c:	2322      	movs	r3, #34	; 0x22
     d2e:	7313      	strb	r3, [r2, #12]
     d30:	e760      	b.n	bf4 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     d32:	2330      	movs	r3, #48	; 0x30
     d34:	7313      	strb	r3, [r2, #12]
     d36:	e75d      	b.n	bf4 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     d38:	a806      	add	r0, sp, #24
     d3a:	4b36      	ldr	r3, [pc, #216]	; (e14 <sd_mmc_check+0x488>)
     d3c:	4798      	blx	r3
     d3e:	2800      	cmp	r0, #0
     d40:	d100      	bne.n	d44 <sd_mmc_check+0x3b8>
     d42:	e643      	b.n	9cc <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     d44:	3501      	adds	r5, #1
     d46:	b2ad      	uxth	r5, r5
     d48:	2d7f      	cmp	r5, #127	; 0x7f
     d4a:	d9f5      	bls.n	d38 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     d4c:	2180      	movs	r1, #128	; 0x80
     d4e:	0089      	lsls	r1, r1, #2
     d50:	4831      	ldr	r0, [pc, #196]	; (e18 <sd_mmc_check+0x48c>)
     d52:	4b32      	ldr	r3, [pc, #200]	; (e1c <sd_mmc_check+0x490>)
     d54:	4798      	blx	r3
     d56:	2800      	cmp	r0, #0
     d58:	d100      	bne.n	d5c <sd_mmc_check+0x3d0>
     d5a:	e637      	b.n	9cc <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     d5c:	4b30      	ldr	r3, [pc, #192]	; (e20 <sd_mmc_check+0x494>)
     d5e:	4798      	blx	r3
     d60:	2800      	cmp	r0, #0
     d62:	d100      	bne.n	d66 <sd_mmc_check+0x3da>
     d64:	e632      	b.n	9cc <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     d66:	4b2f      	ldr	r3, [pc, #188]	; (e24 <sd_mmc_check+0x498>)
     d68:	4798      	blx	r3
     d6a:	e65e      	b.n	a2a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d6c:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d6e:	7d93      	ldrb	r3, [r2, #22]
     d70:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d72:	7d51      	ldrb	r1, [r2, #21]
     d74:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d76:	430b      	orrs	r3, r1
     d78:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     d7a:	029b      	lsls	r3, r3, #10
				* 512;
     d7c:	085b      	lsrs	r3, r3, #1
     d7e:	2180      	movs	r1, #128	; 0x80
     d80:	0089      	lsls	r1, r1, #2
     d82:	468c      	mov	ip, r1
     d84:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     d86:	6053      	str	r3, [r2, #4]
     d88:	e6cd      	b.n	b26 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     d8a:	4b27      	ldr	r3, [pc, #156]	; (e28 <sd_mmc_check+0x49c>)
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	2210      	movs	r2, #16
     d90:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     d92:	4b25      	ldr	r3, [pc, #148]	; (e28 <sd_mmc_check+0x49c>)
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	7adb      	ldrb	r3, [r3, #11]
     d98:	2209      	movs	r2, #9
     d9a:	4013      	ands	r3, r2
     d9c:	2b01      	cmp	r3, #1
     d9e:	d000      	beq.n	da2 <sd_mmc_check+0x416>
     da0:	e638      	b.n	a14 <sd_mmc_check+0x88>
     da2:	e630      	b.n	a06 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     da4:	4b20      	ldr	r3, [pc, #128]	; (e28 <sd_mmc_check+0x49c>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	221a      	movs	r2, #26
     daa:	731a      	strb	r2, [r3, #12]
     dac:	e7f1      	b.n	d92 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dae:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     db0:	789b      	ldrb	r3, [r3, #2]
     db2:	09db      	lsrs	r3, r3, #7
     db4:	2b01      	cmp	r3, #1
     db6:	d104      	bne.n	dc2 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     db8:	4b1b      	ldr	r3, [pc, #108]	; (e28 <sd_mmc_check+0x49c>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	2230      	movs	r2, #48	; 0x30
     dbe:	731a      	strb	r2, [r3, #12]
     dc0:	e7e7      	b.n	d92 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     dc2:	4b19      	ldr	r3, [pc, #100]	; (e28 <sd_mmc_check+0x49c>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	2220      	movs	r2, #32
     dc8:	731a      	strb	r2, [r3, #12]
     dca:	e7e2      	b.n	d92 <sd_mmc_check+0x406>
	*v2 = 0;
     dcc:	2600      	movs	r6, #0
     dce:	e60d      	b.n	9ec <sd_mmc_check+0x60>
     dd0:	1e73      	subs	r3, r6, #1
     dd2:	419e      	sbcs	r6, r3
     dd4:	07b3      	lsls	r3, r6, #30
     dd6:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     dd8:	4d14      	ldr	r5, [pc, #80]	; (e2c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     dda:	4f10      	ldr	r7, [pc, #64]	; (e1c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     ddc:	46b8      	mov	r8, r7
		resp = driver_get_response();
     dde:	4e14      	ldr	r6, [pc, #80]	; (e30 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     de0:	2100      	movs	r1, #0
     de2:	4814      	ldr	r0, [pc, #80]	; (e34 <sd_mmc_check+0x4a8>)
     de4:	47b8      	blx	r7
     de6:	2800      	cmp	r0, #0
     de8:	d100      	bne.n	dec <sd_mmc_check+0x460>
     dea:	e638      	b.n	a5e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     dec:	9903      	ldr	r1, [sp, #12]
     dee:	4812      	ldr	r0, [pc, #72]	; (e38 <sd_mmc_check+0x4ac>)
     df0:	47c0      	blx	r8
     df2:	2800      	cmp	r0, #0
     df4:	d100      	bne.n	df8 <sd_mmc_check+0x46c>
     df6:	e632      	b.n	a5e <sd_mmc_check+0xd2>
		resp = driver_get_response();
     df8:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     dfa:	07c3      	lsls	r3, r0, #31
     dfc:	d400      	bmi.n	e00 <sd_mmc_check+0x474>
     dfe:	e628      	b.n	a52 <sd_mmc_check+0xc6>
     e00:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     e02:	2d00      	cmp	r5, #0
     e04:	d1ec      	bne.n	de0 <sd_mmc_check+0x454>
     e06:	e62a      	b.n	a5e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     e08:	2209      	movs	r2, #9
     e0a:	4013      	ands	r3, r2
     e0c:	2b01      	cmp	r3, #1
     e0e:	d000      	beq.n	e12 <sd_mmc_check+0x486>
     e10:	e609      	b.n	a26 <sd_mmc_check+0x9a>
     e12:	e5f8      	b.n	a06 <sd_mmc_check+0x7a>
     e14:	0000176d 	.word	0x0000176d
     e18:	00001110 	.word	0x00001110
     e1c:	00001749 	.word	0x00001749
     e20:	000008cd 	.word	0x000008cd
     e24:	00000849 	.word	0x00000849
     e28:	200000f8 	.word	0x200000f8
     e2c:	00001bef 	.word	0x00001bef
     e30:	00001761 	.word	0x00001761
     e34:	00001137 	.word	0x00001137
     e38:	00001129 	.word	0x00001129

00000e3c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     e3c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e3e:	4b06      	ldr	r3, [pc, #24]	; (e58 <sd_mmc_get_type+0x1c>)
     e40:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     e42:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e44:	2800      	cmp	r0, #0
     e46:	d001      	beq.n	e4c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     e48:	0018      	movs	r0, r3
     e4a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e4c:	4b03      	ldr	r3, [pc, #12]	; (e5c <sd_mmc_get_type+0x20>)
     e4e:	4798      	blx	r3
	return sd_mmc_card->type;
     e50:	4b03      	ldr	r3, [pc, #12]	; (e60 <sd_mmc_get_type+0x24>)
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	7adb      	ldrb	r3, [r3, #11]
     e56:	e7f7      	b.n	e48 <sd_mmc_get_type+0xc>
     e58:	00000871 	.word	0x00000871
     e5c:	00000951 	.word	0x00000951
     e60:	200000f8 	.word	0x200000f8

00000e64 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     e64:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e66:	4b06      	ldr	r3, [pc, #24]	; (e80 <sd_mmc_get_capacity+0x1c>)
     e68:	4798      	blx	r3
		return 0;
     e6a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e6c:	2800      	cmp	r0, #0
     e6e:	d001      	beq.n	e74 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     e70:	0018      	movs	r0, r3
     e72:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e74:	4b03      	ldr	r3, [pc, #12]	; (e84 <sd_mmc_get_capacity+0x20>)
     e76:	4798      	blx	r3
	return sd_mmc_card->capacity;
     e78:	4b03      	ldr	r3, [pc, #12]	; (e88 <sd_mmc_get_capacity+0x24>)
     e7a:	681b      	ldr	r3, [r3, #0]
     e7c:	685b      	ldr	r3, [r3, #4]
     e7e:	e7f7      	b.n	e70 <sd_mmc_get_capacity+0xc>
     e80:	00000871 	.word	0x00000871
     e84:	00000951 	.word	0x00000951
     e88:	200000f8 	.word	0x200000f8

00000e8c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     e8c:	2000      	movs	r0, #0
     e8e:	4770      	bx	lr

00000e90 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	b082      	sub	sp, #8
     e94:	000e      	movs	r6, r1
     e96:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     e98:	4b16      	ldr	r3, [pc, #88]	; (ef4 <sd_mmc_init_read_blocks+0x64>)
     e9a:	4798      	blx	r3
     e9c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     e9e:	d002      	beq.n	ea6 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     ea0:	0020      	movs	r0, r4
     ea2:	b002      	add	sp, #8
     ea4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     ea6:	4b14      	ldr	r3, [pc, #80]	; (ef8 <sd_mmc_init_read_blocks+0x68>)
     ea8:	4798      	blx	r3
     eaa:	2800      	cmp	r0, #0
     eac:	d017      	beq.n	ede <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     eae:	2d01      	cmp	r5, #1
     eb0:	d919      	bls.n	ee6 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     eb2:	4812      	ldr	r0, [pc, #72]	; (efc <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     eb4:	4b12      	ldr	r3, [pc, #72]	; (f00 <sd_mmc_init_read_blocks+0x70>)
     eb6:	681b      	ldr	r3, [r3, #0]
     eb8:	7adb      	ldrb	r3, [r3, #11]
     eba:	071b      	lsls	r3, r3, #28
     ebc:	d400      	bmi.n	ec0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     ebe:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ec0:	2301      	movs	r3, #1
     ec2:	9300      	str	r3, [sp, #0]
     ec4:	002b      	movs	r3, r5
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	0092      	lsls	r2, r2, #2
     eca:	0031      	movs	r1, r6
     ecc:	4e0d      	ldr	r6, [pc, #52]	; (f04 <sd_mmc_init_read_blocks+0x74>)
     ece:	47b0      	blx	r6
     ed0:	2800      	cmp	r0, #0
     ed2:	d00a      	beq.n	eea <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     ed4:	4b0c      	ldr	r3, [pc, #48]	; (f08 <sd_mmc_init_read_blocks+0x78>)
     ed6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     ed8:	4b0c      	ldr	r3, [pc, #48]	; (f0c <sd_mmc_init_read_blocks+0x7c>)
     eda:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     edc:	e7e0      	b.n	ea0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     ede:	4b0c      	ldr	r3, [pc, #48]	; (f10 <sd_mmc_init_read_blocks+0x80>)
     ee0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ee2:	3405      	adds	r4, #5
     ee4:	e7dc      	b.n	ea0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     ee6:	480b      	ldr	r0, [pc, #44]	; (f14 <sd_mmc_init_read_blocks+0x84>)
     ee8:	e7e4      	b.n	eb4 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     eea:	4b09      	ldr	r3, [pc, #36]	; (f10 <sd_mmc_init_read_blocks+0x80>)
     eec:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     eee:	2405      	movs	r4, #5
     ef0:	e7d6      	b.n	ea0 <sd_mmc_init_read_blocks+0x10>
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	00000871 	.word	0x00000871
     ef8:	000008cd 	.word	0x000008cd
     efc:	00101112 	.word	0x00101112
     f00:	200000f8 	.word	0x200000f8
     f04:	000015b9 	.word	0x000015b9
     f08:	2000011c 	.word	0x2000011c
     f0c:	2000011e 	.word	0x2000011e
     f10:	00000951 	.word	0x00000951
     f14:	00081111 	.word	0x00081111

00000f18 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     f18:	b510      	push	{r4, lr}
     f1a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     f1c:	4b07      	ldr	r3, [pc, #28]	; (f3c <sd_mmc_start_read_blocks+0x24>)
     f1e:	4798      	blx	r3
     f20:	2800      	cmp	r0, #0
     f22:	d104      	bne.n	f2e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     f24:	2200      	movs	r2, #0
     f26:	4b06      	ldr	r3, [pc, #24]	; (f40 <sd_mmc_start_read_blocks+0x28>)
     f28:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     f2a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     f2c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     f2e:	4a04      	ldr	r2, [pc, #16]	; (f40 <sd_mmc_start_read_blocks+0x28>)
     f30:	8813      	ldrh	r3, [r2, #0]
     f32:	1b1c      	subs	r4, r3, r4
     f34:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     f36:	2000      	movs	r0, #0
     f38:	e7f8      	b.n	f2c <sd_mmc_start_read_blocks+0x14>
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	000017e5 	.word	0x000017e5
     f40:	2000011c 	.word	0x2000011c

00000f44 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     f44:	b510      	push	{r4, lr}
     f46:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     f48:	4b14      	ldr	r3, [pc, #80]	; (f9c <sd_mmc_wait_end_of_read_blocks+0x58>)
     f4a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f4c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     f4e:	2800      	cmp	r0, #0
     f50:	d101      	bne.n	f56 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     f52:	0018      	movs	r0, r3
     f54:	bd10      	pop	{r4, pc}
	if (abort) {
     f56:	2c00      	cmp	r4, #0
     f58:	d010      	beq.n	f7c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     f5a:	2200      	movs	r2, #0
     f5c:	4b10      	ldr	r3, [pc, #64]	; (fa0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f5e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     f60:	4b10      	ldr	r3, [pc, #64]	; (fa4 <sd_mmc_wait_end_of_read_blocks+0x60>)
     f62:	881b      	ldrh	r3, [r3, #0]
     f64:	2b01      	cmp	r3, #1
     f66:	d00f      	beq.n	f88 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     f68:	2100      	movs	r1, #0
     f6a:	480f      	ldr	r0, [pc, #60]	; (fa8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     f6c:	4b0f      	ldr	r3, [pc, #60]	; (fac <sd_mmc_wait_end_of_read_blocks+0x68>)
     f6e:	4798      	blx	r3
     f70:	2800      	cmp	r0, #0
     f72:	d00d      	beq.n	f90 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     f74:	4b0e      	ldr	r3, [pc, #56]	; (fb0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f76:	4798      	blx	r3
	return SD_MMC_OK;
     f78:	2300      	movs	r3, #0
     f7a:	e7ea      	b.n	f52 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     f7c:	4b08      	ldr	r3, [pc, #32]	; (fa0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f7e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     f80:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     f82:	2a00      	cmp	r2, #0
     f84:	d0ec      	beq.n	f60 <sd_mmc_wait_end_of_read_blocks+0x1c>
     f86:	e7e4      	b.n	f52 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     f88:	4b09      	ldr	r3, [pc, #36]	; (fb0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f8a:	4798      	blx	r3
		return SD_MMC_OK;
     f8c:	2300      	movs	r3, #0
     f8e:	e7e0      	b.n	f52 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     f90:	2100      	movs	r1, #0
     f92:	4805      	ldr	r0, [pc, #20]	; (fa8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     f94:	4b05      	ldr	r3, [pc, #20]	; (fac <sd_mmc_wait_end_of_read_blocks+0x68>)
     f96:	4798      	blx	r3
     f98:	e7ec      	b.n	f74 <sd_mmc_wait_end_of_read_blocks+0x30>
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	00001871 	.word	0x00001871
     fa0:	2000011c 	.word	0x2000011c
     fa4:	2000011e 	.word	0x2000011e
     fa8:	0000310c 	.word	0x0000310c
     fac:	00001749 	.word	0x00001749
     fb0:	00000951 	.word	0x00000951

00000fb4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     fb4:	b570      	push	{r4, r5, r6, lr}
     fb6:	b082      	sub	sp, #8
     fb8:	000e      	movs	r6, r1
     fba:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     fbc:	4b11      	ldr	r3, [pc, #68]	; (1004 <sd_mmc_init_write_blocks+0x50>)
     fbe:	4798      	blx	r3
     fc0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     fc2:	d116      	bne.n	ff2 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     fc4:	2d01      	cmp	r5, #1
     fc6:	d917      	bls.n	ff8 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     fc8:	480f      	ldr	r0, [pc, #60]	; (1008 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     fca:	4b10      	ldr	r3, [pc, #64]	; (100c <sd_mmc_init_write_blocks+0x58>)
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	7adb      	ldrb	r3, [r3, #11]
     fd0:	071b      	lsls	r3, r3, #28
     fd2:	d400      	bmi.n	fd6 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     fd4:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     fd6:	2301      	movs	r3, #1
     fd8:	9300      	str	r3, [sp, #0]
     fda:	002b      	movs	r3, r5
     fdc:	2280      	movs	r2, #128	; 0x80
     fde:	0092      	lsls	r2, r2, #2
     fe0:	0031      	movs	r1, r6
     fe2:	4e0b      	ldr	r6, [pc, #44]	; (1010 <sd_mmc_init_write_blocks+0x5c>)
     fe4:	47b0      	blx	r6
     fe6:	2800      	cmp	r0, #0
     fe8:	d008      	beq.n	ffc <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     fea:	4b0a      	ldr	r3, [pc, #40]	; (1014 <sd_mmc_init_write_blocks+0x60>)
     fec:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     fee:	4b0a      	ldr	r3, [pc, #40]	; (1018 <sd_mmc_init_write_blocks+0x64>)
     ff0:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     ff2:	0020      	movs	r0, r4
     ff4:	b002      	add	sp, #8
     ff6:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     ff8:	4808      	ldr	r0, [pc, #32]	; (101c <sd_mmc_init_write_blocks+0x68>)
     ffa:	e7e6      	b.n	fca <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     ffc:	4b08      	ldr	r3, [pc, #32]	; (1020 <sd_mmc_init_write_blocks+0x6c>)
     ffe:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1000:	2405      	movs	r4, #5
    1002:	e7f6      	b.n	ff2 <sd_mmc_init_write_blocks+0x3e>
    1004:	00000871 	.word	0x00000871
    1008:	00109119 	.word	0x00109119
    100c:	200000f8 	.word	0x200000f8
    1010:	000015b9 	.word	0x000015b9
    1014:	2000011c 	.word	0x2000011c
    1018:	2000011e 	.word	0x2000011e
    101c:	00089118 	.word	0x00089118
    1020:	00000951 	.word	0x00000951

00001024 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1024:	b510      	push	{r4, lr}
    1026:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1028:	4b07      	ldr	r3, [pc, #28]	; (1048 <sd_mmc_start_write_blocks+0x24>)
    102a:	4798      	blx	r3
    102c:	2800      	cmp	r0, #0
    102e:	d104      	bne.n	103a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1030:	2200      	movs	r2, #0
    1032:	4b06      	ldr	r3, [pc, #24]	; (104c <sd_mmc_start_write_blocks+0x28>)
    1034:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1036:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1038:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    103a:	4a04      	ldr	r2, [pc, #16]	; (104c <sd_mmc_start_write_blocks+0x28>)
    103c:	8813      	ldrh	r3, [r2, #0]
    103e:	1b1c      	subs	r4, r3, r4
    1040:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1042:	2000      	movs	r0, #0
    1044:	e7f8      	b.n	1038 <sd_mmc_start_write_blocks+0x14>
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	00001875 	.word	0x00001875
    104c:	2000011c 	.word	0x2000011c

00001050 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1050:	b510      	push	{r4, lr}
    1052:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1054:	4b0e      	ldr	r3, [pc, #56]	; (1090 <sd_mmc_wait_end_of_write_blocks+0x40>)
    1056:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1058:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    105a:	2800      	cmp	r0, #0
    105c:	d101      	bne.n	1062 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    105e:	0018      	movs	r0, r3
    1060:	bd10      	pop	{r4, pc}
	if (abort) {
    1062:	2c00      	cmp	r4, #0
    1064:	d00a      	beq.n	107c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1066:	2200      	movs	r2, #0
    1068:	4b0a      	ldr	r3, [pc, #40]	; (1094 <sd_mmc_wait_end_of_write_blocks+0x44>)
    106a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    106c:	4b0a      	ldr	r3, [pc, #40]	; (1098 <sd_mmc_wait_end_of_write_blocks+0x48>)
    106e:	881b      	ldrh	r3, [r3, #0]
    1070:	2b01      	cmp	r3, #1
    1072:	d009      	beq.n	1088 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1074:	4b09      	ldr	r3, [pc, #36]	; (109c <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1076:	4798      	blx	r3
	return SD_MMC_OK;
    1078:	2300      	movs	r3, #0
    107a:	e7f0      	b.n	105e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    107c:	4b05      	ldr	r3, [pc, #20]	; (1094 <sd_mmc_wait_end_of_write_blocks+0x44>)
    107e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1080:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    1082:	2a00      	cmp	r2, #0
    1084:	d0f2      	beq.n	106c <sd_mmc_wait_end_of_write_blocks+0x1c>
    1086:	e7ea      	b.n	105e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1088:	4b04      	ldr	r3, [pc, #16]	; (109c <sd_mmc_wait_end_of_write_blocks+0x4c>)
    108a:	4798      	blx	r3
		return SD_MMC_OK;
    108c:	2300      	movs	r3, #0
    108e:	e7e6      	b.n	105e <sd_mmc_wait_end_of_write_blocks+0xe>
    1090:	000018f5 	.word	0x000018f5
    1094:	2000011c 	.word	0x2000011c
    1098:	2000011e 	.word	0x2000011e
    109c:	00000951 	.word	0x00000951

000010a0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    10a0:	b510      	push	{r4, lr}
    10a2:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    10a4:	4b0f      	ldr	r3, [pc, #60]	; (10e4 <sd_mmc_test_unit_ready+0x44>)
    10a6:	4798      	blx	r3
    10a8:	2801      	cmp	r0, #1
    10aa:	d019      	beq.n	10e0 <sd_mmc_test_unit_ready+0x40>
    10ac:	2800      	cmp	r0, #0
    10ae:	d003      	beq.n	10b8 <sd_mmc_test_unit_ready+0x18>
    10b0:	2802      	cmp	r0, #2
    10b2:	d010      	beq.n	10d6 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    10b4:	2001      	movs	r0, #1
	}
}
    10b6:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    10b8:	4b0b      	ldr	r3, [pc, #44]	; (10e8 <sd_mmc_test_unit_ready+0x48>)
    10ba:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    10bc:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    10be:	2b00      	cmp	r3, #0
    10c0:	d1f9      	bne.n	10b6 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    10c2:	0020      	movs	r0, r4
    10c4:	4b09      	ldr	r3, [pc, #36]	; (10ec <sd_mmc_test_unit_ready+0x4c>)
    10c6:	4798      	blx	r3
    10c8:	0003      	movs	r3, r0
    10ca:	2003      	movs	r0, #3
    10cc:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    10ce:	4243      	negs	r3, r0
    10d0:	4158      	adcs	r0, r3
    10d2:	0040      	lsls	r0, r0, #1
    10d4:	e7ef      	b.n	10b6 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    10d6:	2200      	movs	r2, #0
    10d8:	4b03      	ldr	r3, [pc, #12]	; (10e8 <sd_mmc_test_unit_ready+0x48>)
    10da:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    10dc:	2002      	movs	r0, #2
    10de:	e7ea      	b.n	10b6 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    10e0:	2003      	movs	r0, #3
    10e2:	e7e8      	b.n	10b6 <sd_mmc_test_unit_ready+0x16>
    10e4:	0000098d 	.word	0x0000098d
    10e8:	20000124 	.word	0x20000124
    10ec:	00000e3d 	.word	0x00000e3d

000010f0 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    10f0:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    10f2:	2000      	movs	r0, #0
    10f4:	4b01      	ldr	r3, [pc, #4]	; (10fc <sd_mmc_test_unit_ready_0+0xc>)
    10f6:	4798      	blx	r3
}
    10f8:	bd10      	pop	{r4, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	000010a1 	.word	0x000010a1

00001100 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1100:	b570      	push	{r4, r5, r6, lr}
    1102:	0004      	movs	r4, r0
    1104:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1106:	4b04      	ldr	r3, [pc, #16]	; (1118 <sd_mmc_read_capacity+0x18>)
    1108:	4798      	blx	r3
    110a:	0040      	lsls	r0, r0, #1
    110c:	3801      	subs	r0, #1
    110e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    1110:	0020      	movs	r0, r4
    1112:	4b02      	ldr	r3, [pc, #8]	; (111c <sd_mmc_read_capacity+0x1c>)
    1114:	4798      	blx	r3
}
    1116:	bd70      	pop	{r4, r5, r6, pc}
    1118:	00000e65 	.word	0x00000e65
    111c:	000010a1 	.word	0x000010a1

00001120 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1120:	b510      	push	{r4, lr}
    1122:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    1124:	2000      	movs	r0, #0
    1126:	4b01      	ldr	r3, [pc, #4]	; (112c <sd_mmc_read_capacity_0+0xc>)
    1128:	4798      	blx	r3
}
    112a:	bd10      	pop	{r4, pc}
    112c:	00001101 	.word	0x00001101

00001130 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    1130:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    1132:	2000      	movs	r0, #0
    1134:	4b01      	ldr	r3, [pc, #4]	; (113c <sd_mmc_wr_protect_0+0xc>)
    1136:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    1138:	bd10      	pop	{r4, pc}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	00000e8d 	.word	0x00000e8d

00001140 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1140:	b510      	push	{r4, lr}
    1142:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    1144:	2201      	movs	r2, #1
    1146:	4b0c      	ldr	r3, [pc, #48]	; (1178 <sd_mmc_mem_2_ram+0x38>)
    1148:	4798      	blx	r3
    114a:	2800      	cmp	r0, #0
    114c:	d004      	beq.n	1158 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    114e:	3802      	subs	r0, #2
    1150:	4243      	negs	r3, r0
    1152:	4158      	adcs	r0, r3
    1154:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    1156:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1158:	2101      	movs	r1, #1
    115a:	0020      	movs	r0, r4
    115c:	4b07      	ldr	r3, [pc, #28]	; (117c <sd_mmc_mem_2_ram+0x3c>)
    115e:	4798      	blx	r3
    1160:	0003      	movs	r3, r0
		return CTRL_FAIL;
    1162:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1164:	2b00      	cmp	r3, #0
    1166:	d1f6      	bne.n	1156 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    1168:	2000      	movs	r0, #0
    116a:	4b05      	ldr	r3, [pc, #20]	; (1180 <sd_mmc_mem_2_ram+0x40>)
    116c:	4798      	blx	r3
    116e:	1e43      	subs	r3, r0, #1
    1170:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    1172:	b2c0      	uxtb	r0, r0
    1174:	e7ef      	b.n	1156 <sd_mmc_mem_2_ram+0x16>
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00000e91 	.word	0x00000e91
    117c:	00000f19 	.word	0x00000f19
    1180:	00000f45 	.word	0x00000f45

00001184 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1184:	b510      	push	{r4, lr}
    1186:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    1188:	0001      	movs	r1, r0
    118a:	2000      	movs	r0, #0
    118c:	4b01      	ldr	r3, [pc, #4]	; (1194 <sd_mmc_mem_2_ram_0+0x10>)
    118e:	4798      	blx	r3
}
    1190:	bd10      	pop	{r4, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	00001141 	.word	0x00001141

00001198 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1198:	b510      	push	{r4, lr}
    119a:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    119c:	2201      	movs	r2, #1
    119e:	4b0c      	ldr	r3, [pc, #48]	; (11d0 <sd_mmc_ram_2_mem+0x38>)
    11a0:	4798      	blx	r3
    11a2:	2800      	cmp	r0, #0
    11a4:	d004      	beq.n	11b0 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    11a6:	3802      	subs	r0, #2
    11a8:	4243      	negs	r3, r0
    11aa:	4158      	adcs	r0, r3
    11ac:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    11ae:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    11b0:	2101      	movs	r1, #1
    11b2:	0020      	movs	r0, r4
    11b4:	4b07      	ldr	r3, [pc, #28]	; (11d4 <sd_mmc_ram_2_mem+0x3c>)
    11b6:	4798      	blx	r3
    11b8:	0003      	movs	r3, r0
		return CTRL_FAIL;
    11ba:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    11bc:	2b00      	cmp	r3, #0
    11be:	d1f6      	bne.n	11ae <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    11c0:	2000      	movs	r0, #0
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <sd_mmc_ram_2_mem+0x40>)
    11c4:	4798      	blx	r3
    11c6:	1e43      	subs	r3, r0, #1
    11c8:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    11ca:	b2c0      	uxtb	r0, r0
    11cc:	e7ef      	b.n	11ae <sd_mmc_ram_2_mem+0x16>
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	00000fb5 	.word	0x00000fb5
    11d4:	00001025 	.word	0x00001025
    11d8:	00001051 	.word	0x00001051

000011dc <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    11dc:	b510      	push	{r4, lr}
    11de:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    11e0:	0001      	movs	r1, r0
    11e2:	2000      	movs	r0, #0
    11e4:	4b01      	ldr	r3, [pc, #4]	; (11ec <sd_mmc_ram_2_mem_0+0x10>)
    11e6:	4798      	blx	r3
}
    11e8:	bd10      	pop	{r4, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	00001199 	.word	0x00001199

000011f0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    11f0:	b500      	push	{lr}
    11f2:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    11f4:	466b      	mov	r3, sp
    11f6:	1dd9      	adds	r1, r3, #7
    11f8:	23ff      	movs	r3, #255	; 0xff
    11fa:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    11fc:	2201      	movs	r2, #1
    11fe:	480b      	ldr	r0, [pc, #44]	; (122c <sd_mmc_spi_start_write_block+0x3c>)
    1200:	4b0b      	ldr	r3, [pc, #44]	; (1230 <sd_mmc_spi_start_write_block+0x40>)
    1202:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    1204:	4b0b      	ldr	r3, [pc, #44]	; (1234 <sd_mmc_spi_start_write_block+0x44>)
    1206:	881b      	ldrh	r3, [r3, #0]
    1208:	2b01      	cmp	r3, #1
    120a:	d00a      	beq.n	1222 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    120c:	22fc      	movs	r2, #252	; 0xfc
    120e:	466b      	mov	r3, sp
    1210:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    1212:	2201      	movs	r2, #1
    1214:	466b      	mov	r3, sp
    1216:	1d99      	adds	r1, r3, #6
    1218:	4804      	ldr	r0, [pc, #16]	; (122c <sd_mmc_spi_start_write_block+0x3c>)
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <sd_mmc_spi_start_write_block+0x40>)
    121c:	4798      	blx	r3
}
    121e:	b003      	add	sp, #12
    1220:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    1222:	22fe      	movs	r2, #254	; 0xfe
    1224:	466b      	mov	r3, sp
    1226:	719a      	strb	r2, [r3, #6]
    1228:	e7f3      	b.n	1212 <sd_mmc_spi_start_write_block+0x22>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	20000128 	.word	0x20000128
    1230:	00002501 	.word	0x00002501
    1234:	2000016c 	.word	0x2000016c

00001238 <sd_mmc_spi_wait_busy>:
{
    1238:	b5f0      	push	{r4, r5, r6, r7, lr}
    123a:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    123c:	466b      	mov	r3, sp
    123e:	1ddc      	adds	r4, r3, #7
    1240:	23ff      	movs	r3, #255	; 0xff
    1242:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1244:	4e12      	ldr	r6, [pc, #72]	; (1290 <sd_mmc_spi_wait_busy+0x58>)
    1246:	2201      	movs	r2, #1
    1248:	0021      	movs	r1, r4
    124a:	0030      	movs	r0, r6
    124c:	4d11      	ldr	r5, [pc, #68]	; (1294 <sd_mmc_spi_wait_busy+0x5c>)
    124e:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1250:	23ff      	movs	r3, #255	; 0xff
    1252:	2201      	movs	r2, #1
    1254:	0021      	movs	r1, r4
    1256:	0030      	movs	r0, r6
    1258:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    125a:	23ff      	movs	r3, #255	; 0xff
    125c:	2201      	movs	r2, #1
    125e:	0021      	movs	r1, r4
    1260:	0030      	movs	r0, r6
    1262:	47a8      	blx	r5
    1264:	4c0c      	ldr	r4, [pc, #48]	; (1298 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    1266:	466b      	mov	r3, sp
    1268:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    126a:	4e09      	ldr	r6, [pc, #36]	; (1290 <sd_mmc_spi_wait_busy+0x58>)
    126c:	4f09      	ldr	r7, [pc, #36]	; (1294 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    126e:	782b      	ldrb	r3, [r5, #0]
    1270:	2bff      	cmp	r3, #255	; 0xff
    1272:	d009      	beq.n	1288 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1274:	23ff      	movs	r3, #255	; 0xff
    1276:	2201      	movs	r2, #1
    1278:	0029      	movs	r1, r5
    127a:	0030      	movs	r0, r6
    127c:	47b8      	blx	r7
    127e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    1280:	2c00      	cmp	r4, #0
    1282:	d1f4      	bne.n	126e <sd_mmc_spi_wait_busy+0x36>
			return false;
    1284:	2000      	movs	r0, #0
    1286:	e000      	b.n	128a <sd_mmc_spi_wait_busy+0x52>
	return true;
    1288:	2001      	movs	r0, #1
}
    128a:	b003      	add	sp, #12
    128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	20000128 	.word	0x20000128
    1294:	00002339 	.word	0x00002339
    1298:	00030d40 	.word	0x00030d40

0000129c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    129c:	b570      	push	{r4, r5, r6, lr}
    129e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    12a0:	4b14      	ldr	r3, [pc, #80]	; (12f4 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    12a2:	881c      	ldrh	r4, [r3, #0]
    12a4:	2c01      	cmp	r4, #1
    12a6:	d023      	beq.n	12f0 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    12a8:	4b13      	ldr	r3, [pc, #76]	; (12f8 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    12aa:	8819      	ldrh	r1, [r3, #0]
    12ac:	4b13      	ldr	r3, [pc, #76]	; (12fc <sd_mmc_spi_stop_multiwrite_block+0x60>)
    12ae:	6818      	ldr	r0, [r3, #0]
    12b0:	4b13      	ldr	r3, [pc, #76]	; (1300 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    12b2:	4798      	blx	r3
		return true; // It is not the End of multi write
    12b4:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    12b6:	4284      	cmp	r4, r0
    12b8:	d902      	bls.n	12c0 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    12ba:	0018      	movs	r0, r3
    12bc:	b002      	add	sp, #8
    12be:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    12c0:	466b      	mov	r3, sp
    12c2:	1ddc      	adds	r4, r3, #7
    12c4:	23ff      	movs	r3, #255	; 0xff
    12c6:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    12c8:	4e0e      	ldr	r6, [pc, #56]	; (1304 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    12ca:	2201      	movs	r2, #1
    12cc:	0021      	movs	r1, r4
    12ce:	0030      	movs	r0, r6
    12d0:	4d0d      	ldr	r5, [pc, #52]	; (1308 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    12d2:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    12d4:	23fd      	movs	r3, #253	; 0xfd
    12d6:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    12d8:	2201      	movs	r2, #1
    12da:	0021      	movs	r1, r4
    12dc:	0030      	movs	r0, r6
    12de:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    12e0:	4b0a      	ldr	r3, [pc, #40]	; (130c <sd_mmc_spi_stop_multiwrite_block+0x70>)
    12e2:	4798      	blx	r3
    12e4:	1e03      	subs	r3, r0, #0
    12e6:	d1e8      	bne.n	12ba <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    12e8:	2105      	movs	r1, #5
    12ea:	4a09      	ldr	r2, [pc, #36]	; (1310 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    12ec:	7011      	strb	r1, [r2, #0]
		return false;
    12ee:	e7e4      	b.n	12ba <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    12f0:	2301      	movs	r3, #1
    12f2:	e7e2      	b.n	12ba <sd_mmc_spi_stop_multiwrite_block+0x1e>
    12f4:	2000016c 	.word	0x2000016c
    12f8:	20000164 	.word	0x20000164
    12fc:	20000174 	.word	0x20000174
    1300:	00005f3d 	.word	0x00005f3d
    1304:	20000128 	.word	0x20000128
    1308:	00002501 	.word	0x00002501
    130c:	00001239 	.word	0x00001239
    1310:	2000016b 	.word	0x2000016b

00001314 <sd_mmc_spi_start_read_block>:
{
    1314:	b5f0      	push	{r4, r5, r6, r7, lr}
    1316:	b083      	sub	sp, #12
	token = 0;
    1318:	2200      	movs	r2, #0
    131a:	466b      	mov	r3, sp
    131c:	71da      	strb	r2, [r3, #7]
    131e:	4c14      	ldr	r4, [pc, #80]	; (1370 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    1320:	466b      	mov	r3, sp
    1322:	1ddd      	adds	r5, r3, #7
    1324:	4e13      	ldr	r6, [pc, #76]	; (1374 <sd_mmc_spi_start_read_block+0x60>)
    1326:	4f14      	ldr	r7, [pc, #80]	; (1378 <sd_mmc_spi_start_read_block+0x64>)
    1328:	23ff      	movs	r3, #255	; 0xff
    132a:	2201      	movs	r2, #1
    132c:	0029      	movs	r1, r5
    132e:	0030      	movs	r0, r6
    1330:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    1332:	782b      	ldrb	r3, [r5, #0]
    1334:	220f      	movs	r2, #15
    1336:	0019      	movs	r1, r3
    1338:	4391      	bics	r1, r2
    133a:	1e0a      	subs	r2, r1, #0
    133c:	d009      	beq.n	1352 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    133e:	2bfe      	cmp	r3, #254	; 0xfe
    1340:	d013      	beq.n	136a <sd_mmc_spi_start_read_block+0x56>
    1342:	3c01      	subs	r4, #1
		if (i-- == 0) {
    1344:	2c00      	cmp	r4, #0
    1346:	d1ef      	bne.n	1328 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    1348:	2204      	movs	r2, #4
    134a:	4b0c      	ldr	r3, [pc, #48]	; (137c <sd_mmc_spi_start_read_block+0x68>)
    134c:	701a      	strb	r2, [r3, #0]
			return false;
    134e:	2000      	movs	r0, #0
    1350:	e00c      	b.n	136c <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    1352:	075b      	lsls	r3, r3, #29
    1354:	d004      	beq.n	1360 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    1356:	3207      	adds	r2, #7
    1358:	4b08      	ldr	r3, [pc, #32]	; (137c <sd_mmc_spi_start_read_block+0x68>)
    135a:	701a      	strb	r2, [r3, #0]
			return false;
    135c:	2000      	movs	r0, #0
    135e:	e005      	b.n	136c <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    1360:	220b      	movs	r2, #11
    1362:	4b06      	ldr	r3, [pc, #24]	; (137c <sd_mmc_spi_start_read_block+0x68>)
    1364:	701a      	strb	r2, [r3, #0]
			return false;
    1366:	2000      	movs	r0, #0
    1368:	e000      	b.n	136c <sd_mmc_spi_start_read_block+0x58>
	return true;
    136a:	2001      	movs	r0, #1
}
    136c:	b003      	add	sp, #12
    136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1370:	0007a120 	.word	0x0007a120
    1374:	20000128 	.word	0x20000128
    1378:	00002339 	.word	0x00002339
    137c:	2000016b 	.word	0x2000016b

00001380 <sd_mmc_spi_stop_write_block>:
{
    1380:	b530      	push	{r4, r5, lr}
    1382:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    1384:	a901      	add	r1, sp, #4
    1386:	2301      	movs	r3, #1
    1388:	425b      	negs	r3, r3
    138a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    138c:	4d14      	ldr	r5, [pc, #80]	; (13e0 <sd_mmc_spi_stop_write_block+0x60>)
    138e:	2202      	movs	r2, #2
    1390:	0028      	movs	r0, r5
    1392:	4b14      	ldr	r3, [pc, #80]	; (13e4 <sd_mmc_spi_stop_write_block+0x64>)
    1394:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    1396:	466b      	mov	r3, sp
    1398:	1ddc      	adds	r4, r3, #7
    139a:	23ff      	movs	r3, #255	; 0xff
    139c:	2201      	movs	r2, #1
    139e:	0021      	movs	r1, r4
    13a0:	0028      	movs	r0, r5
    13a2:	4d11      	ldr	r5, [pc, #68]	; (13e8 <sd_mmc_spi_stop_write_block+0x68>)
    13a4:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    13a6:	7822      	ldrb	r2, [r4, #0]
    13a8:	2311      	movs	r3, #17
    13aa:	4013      	ands	r3, r2
    13ac:	2b01      	cmp	r3, #1
    13ae:	d005      	beq.n	13bc <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    13b0:	2201      	movs	r2, #1
    13b2:	4b0e      	ldr	r3, [pc, #56]	; (13ec <sd_mmc_spi_stop_write_block+0x6c>)
    13b4:	701a      	strb	r2, [r3, #0]
		return false;
    13b6:	2000      	movs	r0, #0
}
    13b8:	b003      	add	sp, #12
    13ba:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    13bc:	231e      	movs	r3, #30
    13be:	401a      	ands	r2, r3
    13c0:	2a04      	cmp	r2, #4
    13c2:	d00b      	beq.n	13dc <sd_mmc_spi_stop_write_block+0x5c>
    13c4:	2a0a      	cmp	r2, #10
    13c6:	d104      	bne.n	13d2 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    13c8:	3a02      	subs	r2, #2
    13ca:	4b08      	ldr	r3, [pc, #32]	; (13ec <sd_mmc_spi_stop_write_block+0x6c>)
    13cc:	701a      	strb	r2, [r3, #0]
		return false;
    13ce:	2000      	movs	r0, #0
    13d0:	e7f2      	b.n	13b8 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    13d2:	220a      	movs	r2, #10
    13d4:	4b05      	ldr	r3, [pc, #20]	; (13ec <sd_mmc_spi_stop_write_block+0x6c>)
    13d6:	701a      	strb	r2, [r3, #0]
		return false;
    13d8:	2000      	movs	r0, #0
    13da:	e7ed      	b.n	13b8 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    13dc:	2001      	movs	r0, #1
    13de:	e7eb      	b.n	13b8 <sd_mmc_spi_stop_write_block+0x38>
    13e0:	20000128 	.word	0x20000128
    13e4:	00002501 	.word	0x00002501
    13e8:	00002339 	.word	0x00002339
    13ec:	2000016b 	.word	0x2000016b

000013f0 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    13f0:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    13f2:	4802      	ldr	r0, [pc, #8]	; (13fc <sd_mmc_deinit+0xc>)
    13f4:	4b02      	ldr	r3, [pc, #8]	; (1400 <sd_mmc_deinit+0x10>)
    13f6:	4798      	blx	r3
}
    13f8:	bd10      	pop	{r4, pc}
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	20000128 	.word	0x20000128
    1400:	0000205d 	.word	0x0000205d

00001404 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1408:	2300      	movs	r3, #0
    140a:	4a2d      	ldr	r2, [pc, #180]	; (14c0 <sd_mmc_spi_init+0xbc>)
    140c:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    140e:	ac02      	add	r4, sp, #8
    1410:	2501      	movs	r5, #1
    1412:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1414:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1416:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1418:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    141a:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    141c:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    141e:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1420:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1422:	2224      	movs	r2, #36	; 0x24
    1424:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1426:	3a18      	subs	r2, #24
    1428:	2100      	movs	r1, #0
    142a:	a808      	add	r0, sp, #32
    142c:	4b25      	ldr	r3, [pc, #148]	; (14c4 <sd_mmc_spi_init+0xc0>)
    142e:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    1430:	2380      	movs	r3, #128	; 0x80
    1432:	025b      	lsls	r3, r3, #9
    1434:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    1436:	4b24      	ldr	r3, [pc, #144]	; (14c8 <sd_mmc_spi_init+0xc4>)
    1438:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    143a:	4b24      	ldr	r3, [pc, #144]	; (14cc <sd_mmc_spi_init+0xc8>)
    143c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    143e:	4b24      	ldr	r3, [pc, #144]	; (14d0 <sd_mmc_spi_init+0xcc>)
    1440:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    1442:	4b24      	ldr	r3, [pc, #144]	; (14d4 <sd_mmc_spi_init+0xd0>)
    1444:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    1446:	4b24      	ldr	r3, [pc, #144]	; (14d8 <sd_mmc_spi_init+0xd4>)
    1448:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    144a:	4e24      	ldr	r6, [pc, #144]	; (14dc <sd_mmc_spi_init+0xd8>)
    144c:	0022      	movs	r2, r4
    144e:	4924      	ldr	r1, [pc, #144]	; (14e0 <sd_mmc_spi_init+0xdc>)
    1450:	0030      	movs	r0, r6
    1452:	4b24      	ldr	r3, [pc, #144]	; (14e4 <sd_mmc_spi_init+0xe0>)
    1454:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1456:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1458:	0020      	movs	r0, r4
    145a:	4b23      	ldr	r3, [pc, #140]	; (14e8 <sd_mmc_spi_init+0xe4>)
    145c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    145e:	231f      	movs	r3, #31
    1460:	4018      	ands	r0, r3
    1462:	4085      	lsls	r5, r0
    1464:	4b21      	ldr	r3, [pc, #132]	; (14ec <sd_mmc_spi_init+0xe8>)
    1466:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1468:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    146a:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    146c:	2b00      	cmp	r3, #0
    146e:	d1fc      	bne.n	146a <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1470:	6823      	ldr	r3, [r4, #0]
    1472:	2202      	movs	r2, #2
    1474:	4313      	orrs	r3, r2
    1476:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    1478:	4a1d      	ldr	r2, [pc, #116]	; (14f0 <sd_mmc_spi_init+0xec>)
    147a:	2300      	movs	r3, #0
    147c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    147e:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    1480:	491c      	ldr	r1, [pc, #112]	; (14f4 <sd_mmc_spi_init+0xf0>)
    1482:	7808      	ldrb	r0, [r1, #0]
    1484:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1486:	4c1c      	ldr	r4, [pc, #112]	; (14f8 <sd_mmc_spi_init+0xf4>)
    1488:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    148a:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    148c:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    148e:	a901      	add	r1, sp, #4
    1490:	2201      	movs	r2, #1
    1492:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1494:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1496:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1498:	4b18      	ldr	r3, [pc, #96]	; (14fc <sd_mmc_spi_init+0xf8>)
    149a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    149c:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    149e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14a0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14a2:	2900      	cmp	r1, #0
    14a4:	d104      	bne.n	14b0 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    14a6:	0953      	lsrs	r3, r2, #5
    14a8:	01db      	lsls	r3, r3, #7
    14aa:	4915      	ldr	r1, [pc, #84]	; (1500 <sd_mmc_spi_init+0xfc>)
    14ac:	468c      	mov	ip, r1
    14ae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14b0:	211f      	movs	r1, #31
    14b2:	4011      	ands	r1, r2
    14b4:	2201      	movs	r2, #1
    14b6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    14b8:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    14ba:	b010      	add	sp, #64	; 0x40
    14bc:	bd70      	pop	{r4, r5, r6, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	2000016b 	.word	0x2000016b
    14c4:	000062d9 	.word	0x000062d9
    14c8:	00100002 	.word	0x00100002
    14cc:	00110002 	.word	0x00110002
    14d0:	00120002 	.word	0x00120002
    14d4:	00130002 	.word	0x00130002
    14d8:	00061a80 	.word	0x00061a80
    14dc:	20000128 	.word	0x20000128
    14e0:	42000c00 	.word	0x42000c00
    14e4:	00002161 	.word	0x00002161
    14e8:	00001fcd 	.word	0x00001fcd
    14ec:	e000e100 	.word	0xe000e100
    14f0:	20000178 	.word	0x20000178
    14f4:	20000008 	.word	0x20000008
    14f8:	20000168 	.word	0x20000168
    14fc:	00001a1d 	.word	0x00001a1d
    1500:	41004400 	.word	0x41004400

00001504 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    1504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1506:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1508:	2200      	movs	r2, #0
    150a:	4b0d      	ldr	r3, [pc, #52]	; (1540 <sd_mmc_spi_select_device+0x3c>)
    150c:	701a      	strb	r2, [r3, #0]
    150e:	000c      	movs	r4, r1
    1510:	4b0c      	ldr	r3, [pc, #48]	; (1544 <sd_mmc_spi_select_device+0x40>)
    1512:	4299      	cmp	r1, r3
    1514:	d900      	bls.n	1518 <sd_mmc_spi_select_device+0x14>
    1516:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1518:	4d0b      	ldr	r5, [pc, #44]	; (1548 <sd_mmc_spi_select_device+0x44>)
    151a:	4e0c      	ldr	r6, [pc, #48]	; (154c <sd_mmc_spi_select_device+0x48>)
    151c:	e001      	b.n	1522 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    151e:	08e3      	lsrs	r3, r4, #3
    1520:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1522:	0021      	movs	r1, r4
    1524:	0028      	movs	r0, r5
    1526:	47b0      	blx	r6
    1528:	2817      	cmp	r0, #23
    152a:	d0f8      	beq.n	151e <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    152c:	0079      	lsls	r1, r7, #1
    152e:	19cf      	adds	r7, r1, r7
    1530:	4907      	ldr	r1, [pc, #28]	; (1550 <sd_mmc_spi_select_device+0x4c>)
    1532:	19c9      	adds	r1, r1, r7
    1534:	2201      	movs	r2, #1
    1536:	4804      	ldr	r0, [pc, #16]	; (1548 <sd_mmc_spi_select_device+0x44>)
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <sd_mmc_spi_select_device+0x50>)
    153a:	4798      	blx	r3
}
    153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	2000016b 	.word	0x2000016b
    1544:	00989680 	.word	0x00989680
    1548:	20000128 	.word	0x20000128
    154c:	000020a9 	.word	0x000020a9
    1550:	20000168 	.word	0x20000168
    1554:	0000240d 	.word	0x0000240d

00001558 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    1558:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    155a:	2200      	movs	r2, #0
    155c:	4b04      	ldr	r3, [pc, #16]	; (1570 <sd_mmc_spi_deselect_device+0x18>)
    155e:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    1560:	0041      	lsls	r1, r0, #1
    1562:	1808      	adds	r0, r1, r0
    1564:	4903      	ldr	r1, [pc, #12]	; (1574 <sd_mmc_spi_deselect_device+0x1c>)
    1566:	1809      	adds	r1, r1, r0
    1568:	4803      	ldr	r0, [pc, #12]	; (1578 <sd_mmc_spi_deselect_device+0x20>)
    156a:	4b04      	ldr	r3, [pc, #16]	; (157c <sd_mmc_spi_deselect_device+0x24>)
    156c:	4798      	blx	r3
}
    156e:	bd10      	pop	{r4, pc}
    1570:	2000016b 	.word	0x2000016b
    1574:	20000168 	.word	0x20000168
    1578:	20000128 	.word	0x20000128
    157c:	0000240d 	.word	0x0000240d

00001580 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    1580:	b570      	push	{r4, r5, r6, lr}
    1582:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1584:	22ff      	movs	r2, #255	; 0xff
    1586:	466b      	mov	r3, sp
    1588:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    158a:	2200      	movs	r2, #0
    158c:	4b07      	ldr	r3, [pc, #28]	; (15ac <sd_mmc_spi_send_clock+0x2c>)
    158e:	701a      	strb	r2, [r3, #0]
    1590:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    1592:	4e07      	ldr	r6, [pc, #28]	; (15b0 <sd_mmc_spi_send_clock+0x30>)
    1594:	4d07      	ldr	r5, [pc, #28]	; (15b4 <sd_mmc_spi_send_clock+0x34>)
    1596:	2201      	movs	r2, #1
    1598:	466b      	mov	r3, sp
    159a:	1dd9      	adds	r1, r3, #7
    159c:	0030      	movs	r0, r6
    159e:	47a8      	blx	r5
    15a0:	3c01      	subs	r4, #1
    15a2:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    15a4:	2c00      	cmp	r4, #0
    15a6:	d1f6      	bne.n	1596 <sd_mmc_spi_send_clock+0x16>
	}
}
    15a8:	b002      	add	sp, #8
    15aa:	bd70      	pop	{r4, r5, r6, pc}
    15ac:	2000016b 	.word	0x2000016b
    15b0:	20000128 	.word	0x20000128
    15b4:	00002501 	.word	0x00002501

000015b8 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    15b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ba:	46c6      	mov	lr, r8
    15bc:	b500      	push	{lr}
    15be:	b086      	sub	sp, #24
    15c0:	4680      	mov	r8, r0
    15c2:	9200      	str	r2, [sp, #0]
    15c4:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    15c6:	22ff      	movs	r2, #255	; 0xff
    15c8:	230f      	movs	r3, #15
    15ca:	a802      	add	r0, sp, #8
    15cc:	4684      	mov	ip, r0
    15ce:	4463      	add	r3, ip
    15d0:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15d2:	2200      	movs	r2, #0
    15d4:	4b53      	ldr	r3, [pc, #332]	; (1724 <sd_mmc_spi_adtc_start+0x16c>)
    15d6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    15d8:	ab04      	add	r3, sp, #16
    15da:	323f      	adds	r2, #63	; 0x3f
    15dc:	4640      	mov	r0, r8
    15de:	4002      	ands	r2, r0
    15e0:	2040      	movs	r0, #64	; 0x40
    15e2:	4302      	orrs	r2, r0
    15e4:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    15e6:	0e0a      	lsrs	r2, r1, #24
    15e8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    15ea:	0c0a      	lsrs	r2, r1, #16
    15ec:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    15ee:	0a0a      	lsrs	r2, r1, #8
    15f0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    15f2:	7119      	strb	r1, [r3, #4]
    15f4:	2700      	movs	r7, #0
	crc = 0;
    15f6:	2300      	movs	r3, #0
		value = *buf++;
    15f8:	a904      	add	r1, sp, #16
    15fa:	2208      	movs	r2, #8
				crc ^= 0x09;
    15fc:	2409      	movs	r4, #9
    15fe:	e011      	b.n	1624 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    1600:	0076      	lsls	r6, r6, #1
    1602:	b2f6      	uxtb	r6, r6
    1604:	3801      	subs	r0, #1
    1606:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    1608:	2800      	cmp	r0, #0
    160a:	d008      	beq.n	161e <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    160c:	005b      	lsls	r3, r3, #1
    160e:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    1610:	001d      	movs	r5, r3
    1612:	4075      	eors	r5, r6
    1614:	062d      	lsls	r5, r5, #24
    1616:	d5f3      	bpl.n	1600 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    1618:	4063      	eors	r3, r4
    161a:	b2db      	uxtb	r3, r3
    161c:	e7f0      	b.n	1600 <sd_mmc_spi_adtc_start+0x48>
    161e:	3701      	adds	r7, #1
	while (size--) {
    1620:	2f05      	cmp	r7, #5
    1622:	d002      	beq.n	162a <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    1624:	5c7e      	ldrb	r6, [r7, r1]
    1626:	0010      	movs	r0, r2
    1628:	e7f0      	b.n	160c <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    162a:	005b      	lsls	r3, r3, #1
    162c:	2201      	movs	r2, #1
    162e:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    1630:	ac04      	add	r4, sp, #16
    1632:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    1634:	4e3c      	ldr	r6, [pc, #240]	; (1728 <sd_mmc_spi_adtc_start+0x170>)
    1636:	2201      	movs	r2, #1
    1638:	210f      	movs	r1, #15
    163a:	ab02      	add	r3, sp, #8
    163c:	469c      	mov	ip, r3
    163e:	4461      	add	r1, ip
    1640:	0030      	movs	r0, r6
    1642:	4f3a      	ldr	r7, [pc, #232]	; (172c <sd_mmc_spi_adtc_start+0x174>)
    1644:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    1646:	2206      	movs	r2, #6
    1648:	0021      	movs	r1, r4
    164a:	0030      	movs	r0, r6
    164c:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    164e:	ab02      	add	r3, sp, #8
    1650:	1dd9      	adds	r1, r3, #7
    1652:	23ff      	movs	r3, #255	; 0xff
    1654:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1656:	2201      	movs	r2, #1
    1658:	0030      	movs	r0, r6
    165a:	4e35      	ldr	r6, [pc, #212]	; (1730 <sd_mmc_spi_adtc_start+0x178>)
    165c:	47b0      	blx	r6
    165e:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1660:	ab02      	add	r3, sp, #8
    1662:	1dde      	adds	r6, r3, #7
    1664:	4f30      	ldr	r7, [pc, #192]	; (1728 <sd_mmc_spi_adtc_start+0x170>)
    1666:	4d32      	ldr	r5, [pc, #200]	; (1730 <sd_mmc_spi_adtc_start+0x178>)
    1668:	23ff      	movs	r3, #255	; 0xff
    166a:	2201      	movs	r2, #1
    166c:	0031      	movs	r1, r6
    166e:	0038      	movs	r0, r7
    1670:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    1672:	7833      	ldrb	r3, [r6, #0]
    1674:	b25a      	sxtb	r2, r3
    1676:	2a00      	cmp	r2, #0
    1678:	da0b      	bge.n	1692 <sd_mmc_spi_adtc_start+0xda>
    167a:	3c01      	subs	r4, #1
    167c:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    167e:	2c00      	cmp	r4, #0
    1680:	d1f2      	bne.n	1668 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    1682:	2202      	movs	r2, #2
    1684:	4b27      	ldr	r3, [pc, #156]	; (1724 <sd_mmc_spi_adtc_start+0x16c>)
    1686:	701a      	strb	r2, [r3, #0]
			return false;
    1688:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    168a:	b006      	add	sp, #24
    168c:	bc04      	pop	{r2}
    168e:	4690      	mov	r8, r2
    1690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    1692:	4a28      	ldr	r2, [pc, #160]	; (1734 <sd_mmc_spi_adtc_start+0x17c>)
    1694:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    1696:	071a      	lsls	r2, r3, #28
    1698:	d41a      	bmi.n	16d0 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    169a:	075a      	lsls	r2, r3, #29
    169c:	d41d      	bmi.n	16da <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    169e:	2201      	movs	r2, #1
    16a0:	4393      	bics	r3, r2
    16a2:	d11f      	bne.n	16e4 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    16a4:	4643      	mov	r3, r8
    16a6:	049b      	lsls	r3, r3, #18
    16a8:	d420      	bmi.n	16ec <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    16aa:	4643      	mov	r3, r8
    16ac:	059b      	lsls	r3, r3, #22
    16ae:	d425      	bmi.n	16fc <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    16b0:	4643      	mov	r3, r8
    16b2:	055b      	lsls	r3, r3, #21
    16b4:	d42b      	bmi.n	170e <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    16b6:	4b20      	ldr	r3, [pc, #128]	; (1738 <sd_mmc_spi_adtc_start+0x180>)
    16b8:	466a      	mov	r2, sp
    16ba:	8812      	ldrh	r2, [r2, #0]
    16bc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    16be:	4b1f      	ldr	r3, [pc, #124]	; (173c <sd_mmc_spi_adtc_start+0x184>)
    16c0:	466a      	mov	r2, sp
    16c2:	8892      	ldrh	r2, [r2, #4]
    16c4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    16c6:	2200      	movs	r2, #0
    16c8:	4b1d      	ldr	r3, [pc, #116]	; (1740 <sd_mmc_spi_adtc_start+0x188>)
    16ca:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    16cc:	2001      	movs	r0, #1
    16ce:	e7dc      	b.n	168a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    16d0:	2206      	movs	r2, #6
    16d2:	4b14      	ldr	r3, [pc, #80]	; (1724 <sd_mmc_spi_adtc_start+0x16c>)
    16d4:	701a      	strb	r2, [r3, #0]
		return false;
    16d6:	2000      	movs	r0, #0
    16d8:	e7d7      	b.n	168a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    16da:	2209      	movs	r2, #9
    16dc:	4b11      	ldr	r3, [pc, #68]	; (1724 <sd_mmc_spi_adtc_start+0x16c>)
    16de:	701a      	strb	r2, [r3, #0]
		return false;
    16e0:	2000      	movs	r0, #0
    16e2:	e7d2      	b.n	168a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    16e4:	4b0f      	ldr	r3, [pc, #60]	; (1724 <sd_mmc_spi_adtc_start+0x16c>)
    16e6:	701a      	strb	r2, [r3, #0]
		return false;
    16e8:	2000      	movs	r0, #0
    16ea:	e7ce      	b.n	168a <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    16ec:	4b15      	ldr	r3, [pc, #84]	; (1744 <sd_mmc_spi_adtc_start+0x18c>)
    16ee:	4798      	blx	r3
    16f0:	2800      	cmp	r0, #0
    16f2:	d1da      	bne.n	16aa <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    16f4:	2203      	movs	r2, #3
    16f6:	4b0b      	ldr	r3, [pc, #44]	; (1724 <sd_mmc_spi_adtc_start+0x16c>)
    16f8:	701a      	strb	r2, [r3, #0]
			return false;
    16fa:	e7c6      	b.n	168a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    16fc:	490d      	ldr	r1, [pc, #52]	; (1734 <sd_mmc_spi_adtc_start+0x17c>)
    16fe:	2300      	movs	r3, #0
    1700:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    1702:	33ff      	adds	r3, #255	; 0xff
    1704:	2201      	movs	r2, #1
    1706:	4808      	ldr	r0, [pc, #32]	; (1728 <sd_mmc_spi_adtc_start+0x170>)
    1708:	4e09      	ldr	r6, [pc, #36]	; (1730 <sd_mmc_spi_adtc_start+0x178>)
    170a:	47b0      	blx	r6
    170c:	e7d0      	b.n	16b0 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    170e:	4e09      	ldr	r6, [pc, #36]	; (1734 <sd_mmc_spi_adtc_start+0x17c>)
    1710:	23ff      	movs	r3, #255	; 0xff
    1712:	2204      	movs	r2, #4
    1714:	0031      	movs	r1, r6
    1716:	4804      	ldr	r0, [pc, #16]	; (1728 <sd_mmc_spi_adtc_start+0x170>)
    1718:	4f05      	ldr	r7, [pc, #20]	; (1730 <sd_mmc_spi_adtc_start+0x178>)
    171a:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    171c:	6833      	ldr	r3, [r6, #0]
    171e:	ba1b      	rev	r3, r3
    1720:	6033      	str	r3, [r6, #0]
    1722:	e7c8      	b.n	16b6 <sd_mmc_spi_adtc_start+0xfe>
    1724:	2000016b 	.word	0x2000016b
    1728:	20000128 	.word	0x20000128
    172c:	00002501 	.word	0x00002501
    1730:	00002339 	.word	0x00002339
    1734:	20000170 	.word	0x20000170
    1738:	20000164 	.word	0x20000164
    173c:	2000016c 	.word	0x2000016c
    1740:	20000174 	.word	0x20000174
    1744:	00001239 	.word	0x00001239

00001748 <sd_mmc_spi_send_cmd>:
{
    1748:	b510      	push	{r4, lr}
    174a:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    174c:	2300      	movs	r3, #0
    174e:	9300      	str	r3, [sp, #0]
    1750:	2200      	movs	r2, #0
    1752:	4c02      	ldr	r4, [pc, #8]	; (175c <sd_mmc_spi_send_cmd+0x14>)
    1754:	47a0      	blx	r4
}
    1756:	b002      	add	sp, #8
    1758:	bd10      	pop	{r4, pc}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	000015b9 	.word	0x000015b9

00001760 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    1760:	4b01      	ldr	r3, [pc, #4]	; (1768 <sd_mmc_spi_get_response+0x8>)
    1762:	6818      	ldr	r0, [r3, #0]
}
    1764:	4770      	bx	lr
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	20000170 	.word	0x20000170

0000176c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    176c:	b510      	push	{r4, lr}
    176e:	b084      	sub	sp, #16
    1770:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1772:	2200      	movs	r2, #0
    1774:	4b14      	ldr	r3, [pc, #80]	; (17c8 <sd_mmc_spi_read_word+0x5c>)
    1776:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1778:	4b14      	ldr	r3, [pc, #80]	; (17cc <sd_mmc_spi_read_word+0x60>)
    177a:	8819      	ldrh	r1, [r3, #0]
    177c:	4b14      	ldr	r3, [pc, #80]	; (17d0 <sd_mmc_spi_read_word+0x64>)
    177e:	6818      	ldr	r0, [r3, #0]
    1780:	4b14      	ldr	r3, [pc, #80]	; (17d4 <sd_mmc_spi_read_word+0x68>)
    1782:	4798      	blx	r3
    1784:	2900      	cmp	r1, #0
    1786:	d103      	bne.n	1790 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1788:	4b13      	ldr	r3, [pc, #76]	; (17d8 <sd_mmc_spi_read_word+0x6c>)
    178a:	4798      	blx	r3
    178c:	2800      	cmp	r0, #0
    178e:	d010      	beq.n	17b2 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    1790:	23ff      	movs	r3, #255	; 0xff
    1792:	2204      	movs	r2, #4
    1794:	a901      	add	r1, sp, #4
    1796:	4811      	ldr	r0, [pc, #68]	; (17dc <sd_mmc_spi_read_word+0x70>)
    1798:	4c11      	ldr	r4, [pc, #68]	; (17e0 <sd_mmc_spi_read_word+0x74>)
    179a:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    179c:	4b0c      	ldr	r3, [pc, #48]	; (17d0 <sd_mmc_spi_read_word+0x64>)
    179e:	681a      	ldr	r2, [r3, #0]
    17a0:	1d10      	adds	r0, r2, #4
    17a2:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    17a4:	4b09      	ldr	r3, [pc, #36]	; (17cc <sd_mmc_spi_read_word+0x60>)
    17a6:	8819      	ldrh	r1, [r3, #0]
    17a8:	4b0a      	ldr	r3, [pc, #40]	; (17d4 <sd_mmc_spi_read_word+0x68>)
    17aa:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    17ac:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    17ae:	2900      	cmp	r1, #0
    17b0:	d001      	beq.n	17b6 <sd_mmc_spi_read_word+0x4a>
}
    17b2:	b004      	add	sp, #16
    17b4:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    17b6:	23ff      	movs	r3, #255	; 0xff
    17b8:	2202      	movs	r2, #2
    17ba:	a903      	add	r1, sp, #12
    17bc:	4807      	ldr	r0, [pc, #28]	; (17dc <sd_mmc_spi_read_word+0x70>)
    17be:	4c08      	ldr	r4, [pc, #32]	; (17e0 <sd_mmc_spi_read_word+0x74>)
    17c0:	47a0      	blx	r4
	return true;
    17c2:	2001      	movs	r0, #1
    17c4:	e7f5      	b.n	17b2 <sd_mmc_spi_read_word+0x46>
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	2000016b 	.word	0x2000016b
    17cc:	20000164 	.word	0x20000164
    17d0:	20000174 	.word	0x20000174
    17d4:	00006049 	.word	0x00006049
    17d8:	00001315 	.word	0x00001315
    17dc:	20000128 	.word	0x20000128
    17e0:	00002339 	.word	0x00002339

000017e4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    17e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e6:	46de      	mov	lr, fp
    17e8:	4657      	mov	r7, sl
    17ea:	4646      	mov	r6, r8
    17ec:	b5c0      	push	{r6, r7, lr}
    17ee:	b082      	sub	sp, #8
    17f0:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    17f2:	2200      	movs	r2, #0
    17f4:	4b17      	ldr	r3, [pc, #92]	; (1854 <sd_mmc_spi_start_read_blocks+0x70>)
    17f6:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    17f8:	1e4c      	subs	r4, r1, #1
    17fa:	b2a4      	uxth	r4, r4
    17fc:	2900      	cmp	r1, #0
    17fe:	d026      	beq.n	184e <sd_mmc_spi_start_read_blocks+0x6a>
    1800:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    1802:	4b15      	ldr	r3, [pc, #84]	; (1858 <sd_mmc_spi_start_read_blocks+0x74>)
    1804:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1806:	4f15      	ldr	r7, [pc, #84]	; (185c <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1808:	47d0      	blx	sl
    180a:	4680      	mov	r8, r0
    180c:	2800      	cmp	r0, #0
    180e:	d017      	beq.n	1840 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1810:	883a      	ldrh	r2, [r7, #0]
    1812:	465b      	mov	r3, fp
    1814:	1999      	adds	r1, r3, r6
    1816:	23ff      	movs	r3, #255	; 0xff
    1818:	4811      	ldr	r0, [pc, #68]	; (1860 <sd_mmc_spi_start_read_blocks+0x7c>)
    181a:	4d12      	ldr	r5, [pc, #72]	; (1864 <sd_mmc_spi_start_read_blocks+0x80>)
    181c:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    181e:	883b      	ldrh	r3, [r7, #0]
    1820:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1822:	4a11      	ldr	r2, [pc, #68]	; (1868 <sd_mmc_spi_start_read_blocks+0x84>)
    1824:	6811      	ldr	r1, [r2, #0]
    1826:	468c      	mov	ip, r1
    1828:	4463      	add	r3, ip
    182a:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    182c:	23ff      	movs	r3, #255	; 0xff
    182e:	2202      	movs	r2, #2
    1830:	a901      	add	r1, sp, #4
    1832:	480b      	ldr	r0, [pc, #44]	; (1860 <sd_mmc_spi_start_read_blocks+0x7c>)
    1834:	47a8      	blx	r5
	while (nb_block--) {
    1836:	3c01      	subs	r4, #1
    1838:	b2a4      	uxth	r4, r4
    183a:	4b0c      	ldr	r3, [pc, #48]	; (186c <sd_mmc_spi_start_read_blocks+0x88>)
    183c:	429c      	cmp	r4, r3
    183e:	d1e3      	bne.n	1808 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    1840:	4640      	mov	r0, r8
    1842:	b002      	add	sp, #8
    1844:	bc1c      	pop	{r2, r3, r4}
    1846:	4690      	mov	r8, r2
    1848:	469a      	mov	sl, r3
    184a:	46a3      	mov	fp, r4
    184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    184e:	2301      	movs	r3, #1
    1850:	4698      	mov	r8, r3
    1852:	e7f5      	b.n	1840 <sd_mmc_spi_start_read_blocks+0x5c>
    1854:	2000016b 	.word	0x2000016b
    1858:	00001315 	.word	0x00001315
    185c:	20000164 	.word	0x20000164
    1860:	20000128 	.word	0x20000128
    1864:	00002339 	.word	0x00002339
    1868:	20000174 	.word	0x20000174
    186c:	0000ffff 	.word	0x0000ffff

00001870 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    1870:	2001      	movs	r0, #1
    1872:	4770      	bx	lr

00001874 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1874:	b5f0      	push	{r4, r5, r6, r7, lr}
    1876:	46c6      	mov	lr, r8
    1878:	b500      	push	{lr}
    187a:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    187c:	2200      	movs	r2, #0
    187e:	4b15      	ldr	r3, [pc, #84]	; (18d4 <sd_mmc_spi_start_write_blocks+0x60>)
    1880:	701a      	strb	r2, [r3, #0]
	pos = 0;
    1882:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1884:	4f14      	ldr	r7, [pc, #80]	; (18d8 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1886:	4e15      	ldr	r6, [pc, #84]	; (18dc <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1888:	e000      	b.n	188c <sd_mmc_spi_start_write_blocks+0x18>
{
    188a:	0021      	movs	r1, r4
	while (nb_block--) {
    188c:	1e4c      	subs	r4, r1, #1
    188e:	b2a4      	uxth	r4, r4
    1890:	2900      	cmp	r1, #0
    1892:	d01b      	beq.n	18cc <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1894:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1896:	8832      	ldrh	r2, [r6, #0]
    1898:	4643      	mov	r3, r8
    189a:	1959      	adds	r1, r3, r5
    189c:	4810      	ldr	r0, [pc, #64]	; (18e0 <sd_mmc_spi_start_write_blocks+0x6c>)
    189e:	4b11      	ldr	r3, [pc, #68]	; (18e4 <sd_mmc_spi_start_write_blocks+0x70>)
    18a0:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    18a2:	8833      	ldrh	r3, [r6, #0]
    18a4:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    18a6:	4a10      	ldr	r2, [pc, #64]	; (18e8 <sd_mmc_spi_start_write_blocks+0x74>)
    18a8:	6811      	ldr	r1, [r2, #0]
    18aa:	468c      	mov	ip, r1
    18ac:	4463      	add	r3, ip
    18ae:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    18b0:	4b0e      	ldr	r3, [pc, #56]	; (18ec <sd_mmc_spi_start_write_blocks+0x78>)
    18b2:	4798      	blx	r3
    18b4:	2800      	cmp	r0, #0
    18b6:	d00a      	beq.n	18ce <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    18b8:	2c00      	cmp	r4, #0
    18ba:	d0e6      	beq.n	188a <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    18bc:	4b0c      	ldr	r3, [pc, #48]	; (18f0 <sd_mmc_spi_start_write_blocks+0x7c>)
    18be:	4798      	blx	r3
    18c0:	2800      	cmp	r0, #0
    18c2:	d1e2      	bne.n	188a <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    18c4:	2205      	movs	r2, #5
    18c6:	4b03      	ldr	r3, [pc, #12]	; (18d4 <sd_mmc_spi_start_write_blocks+0x60>)
    18c8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    18ca:	e000      	b.n	18ce <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    18cc:	2001      	movs	r0, #1
}
    18ce:	bc04      	pop	{r2}
    18d0:	4690      	mov	r8, r2
    18d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18d4:	2000016b 	.word	0x2000016b
    18d8:	000011f1 	.word	0x000011f1
    18dc:	20000164 	.word	0x20000164
    18e0:	20000128 	.word	0x20000128
    18e4:	00002501 	.word	0x00002501
    18e8:	20000174 	.word	0x20000174
    18ec:	00001381 	.word	0x00001381
    18f0:	00001239 	.word	0x00001239

000018f4 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    18f4:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    18f6:	4b05      	ldr	r3, [pc, #20]	; (190c <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    18f8:	4798      	blx	r3
    18fa:	2800      	cmp	r0, #0
    18fc:	d103      	bne.n	1906 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    18fe:	2205      	movs	r2, #5
    1900:	4b03      	ldr	r3, [pc, #12]	; (1910 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    1902:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1904:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1906:	4b03      	ldr	r3, [pc, #12]	; (1914 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1908:	4798      	blx	r3
    190a:	e7fb      	b.n	1904 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    190c:	00001239 	.word	0x00001239
    1910:	2000016b 	.word	0x2000016b
    1914:	0000129d 	.word	0x0000129d

00001918 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    1918:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    191a:	2301      	movs	r3, #1
    191c:	2800      	cmp	r0, #0
    191e:	d001      	beq.n	1924 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1920:	0018      	movs	r0, r3
    1922:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1924:	4b01      	ldr	r3, [pc, #4]	; (192c <mem_test_unit_ready+0x14>)
    1926:	4798      	blx	r3
    1928:	0003      	movs	r3, r0
    192a:	e7f9      	b.n	1920 <mem_test_unit_ready+0x8>
    192c:	000010f1 	.word	0x000010f1

00001930 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    1930:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1932:	2301      	movs	r3, #1
    1934:	2800      	cmp	r0, #0
    1936:	d001      	beq.n	193c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1938:	0018      	movs	r0, r3
    193a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    193c:	0008      	movs	r0, r1
    193e:	4b02      	ldr	r3, [pc, #8]	; (1948 <mem_read_capacity+0x18>)
    1940:	4798      	blx	r3
    1942:	0003      	movs	r3, r0
    1944:	e7f8      	b.n	1938 <mem_read_capacity+0x8>
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	00001121 	.word	0x00001121

0000194c <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    194c:	4243      	negs	r3, r0
    194e:	4158      	adcs	r0, r3
    1950:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    1952:	4770      	bx	lr

00001954 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    1954:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1956:	2301      	movs	r3, #1
    1958:	2800      	cmp	r0, #0
    195a:	d001      	beq.n	1960 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    195c:	0018      	movs	r0, r3
    195e:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1960:	4b01      	ldr	r3, [pc, #4]	; (1968 <mem_wr_protect+0x14>)
    1962:	4798      	blx	r3
    1964:	0003      	movs	r3, r0
    1966:	e7f9      	b.n	195c <mem_wr_protect+0x8>
    1968:	00001131 	.word	0x00001131

0000196c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    196c:	b510      	push	{r4, lr}
    196e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1970:	2301      	movs	r3, #1
    1972:	2800      	cmp	r0, #0
    1974:	d001      	beq.n	197a <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    1976:	0018      	movs	r0, r3
    1978:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    197a:	0011      	movs	r1, r2
    197c:	0020      	movs	r0, r4
    197e:	4b02      	ldr	r3, [pc, #8]	; (1988 <memory_2_ram+0x1c>)
    1980:	4798      	blx	r3
    1982:	0003      	movs	r3, r0
    1984:	e7f7      	b.n	1976 <memory_2_ram+0xa>
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	00001185 	.word	0x00001185

0000198c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    198c:	b510      	push	{r4, lr}
    198e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1990:	2301      	movs	r3, #1
    1992:	2800      	cmp	r0, #0
    1994:	d001      	beq.n	199a <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    1996:	0018      	movs	r0, r3
    1998:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    199a:	0011      	movs	r1, r2
    199c:	0020      	movs	r0, r4
    199e:	4b02      	ldr	r3, [pc, #8]	; (19a8 <ram_2_memory+0x1c>)
    19a0:	4798      	blx	r3
    19a2:	0003      	movs	r3, r0
    19a4:	e7f7      	b.n	1996 <ram_2_memory+0xa>
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	000011dd 	.word	0x000011dd

000019ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    19ac:	4b0c      	ldr	r3, [pc, #48]	; (19e0 <cpu_irq_enter_critical+0x34>)
    19ae:	681b      	ldr	r3, [r3, #0]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d106      	bne.n	19c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    19b8:	2b00      	cmp	r3, #0
    19ba:	d007      	beq.n	19cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    19bc:	2200      	movs	r2, #0
    19be:	4b09      	ldr	r3, [pc, #36]	; (19e4 <cpu_irq_enter_critical+0x38>)
    19c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    19c2:	4a07      	ldr	r2, [pc, #28]	; (19e0 <cpu_irq_enter_critical+0x34>)
    19c4:	6813      	ldr	r3, [r2, #0]
    19c6:	3301      	adds	r3, #1
    19c8:	6013      	str	r3, [r2, #0]
}
    19ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    19cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    19ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    19d2:	2200      	movs	r2, #0
    19d4:	4b04      	ldr	r3, [pc, #16]	; (19e8 <cpu_irq_enter_critical+0x3c>)
    19d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    19d8:	3201      	adds	r2, #1
    19da:	4b02      	ldr	r3, [pc, #8]	; (19e4 <cpu_irq_enter_critical+0x38>)
    19dc:	701a      	strb	r2, [r3, #0]
    19de:	e7f0      	b.n	19c2 <cpu_irq_enter_critical+0x16>
    19e0:	2000017c 	.word	0x2000017c
    19e4:	20000180 	.word	0x20000180
    19e8:	20000009 	.word	0x20000009

000019ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    19ec:	4b08      	ldr	r3, [pc, #32]	; (1a10 <cpu_irq_leave_critical+0x24>)
    19ee:	681a      	ldr	r2, [r3, #0]
    19f0:	3a01      	subs	r2, #1
    19f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d109      	bne.n	1a0e <cpu_irq_leave_critical+0x22>
    19fa:	4b06      	ldr	r3, [pc, #24]	; (1a14 <cpu_irq_leave_critical+0x28>)
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	2b00      	cmp	r3, #0
    1a00:	d005      	beq.n	1a0e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1a02:	2201      	movs	r2, #1
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <cpu_irq_leave_critical+0x2c>)
    1a06:	701a      	strb	r2, [r3, #0]
    1a08:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1a0c:	b662      	cpsie	i
	}
}
    1a0e:	4770      	bx	lr
    1a10:	2000017c 	.word	0x2000017c
    1a14:	20000180 	.word	0x20000180
    1a18:	20000009 	.word	0x20000009

00001a1c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1a1c:	b500      	push	{lr}
    1a1e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a20:	ab01      	add	r3, sp, #4
    1a22:	2280      	movs	r2, #128	; 0x80
    1a24:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1a26:	780a      	ldrb	r2, [r1, #0]
    1a28:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1a2a:	784a      	ldrb	r2, [r1, #1]
    1a2c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1a2e:	788a      	ldrb	r2, [r1, #2]
    1a30:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1a32:	0019      	movs	r1, r3
    1a34:	4b01      	ldr	r3, [pc, #4]	; (1a3c <port_pin_set_config+0x20>)
    1a36:	4798      	blx	r3
}
    1a38:	b003      	add	sp, #12
    1a3a:	bd00      	pop	{pc}
    1a3c:	00003545 	.word	0x00003545

00001a40 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a40:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a42:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a44:	b25b      	sxtb	r3, r3
    1a46:	2b00      	cmp	r3, #0
    1a48:	dbfb      	blt.n	1a42 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1a4a:	8813      	ldrh	r3, [r2, #0]
    1a4c:	2102      	movs	r1, #2
    1a4e:	430b      	orrs	r3, r1
    1a50:	8013      	strh	r3, [r2, #0]
}
    1a52:	4770      	bx	lr

00001a54 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a54:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a56:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a58:	b25b      	sxtb	r3, r3
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	dbfb      	blt.n	1a56 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1a5e:	23c1      	movs	r3, #193	; 0xc1
    1a60:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1a62:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1a64:	8813      	ldrh	r3, [r2, #0]
    1a66:	2102      	movs	r1, #2
    1a68:	438b      	bics	r3, r1
    1a6a:	8013      	strh	r3, [r2, #0]
}
    1a6c:	4770      	bx	lr
	...

00001a70 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1a70:	b570      	push	{r4, r5, r6, lr}
    1a72:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a74:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1a76:	4b06      	ldr	r3, [pc, #24]	; (1a90 <rtc_calendar_reset+0x20>)
    1a78:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1a7a:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a7c:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a7e:	b25b      	sxtb	r3, r3
    1a80:	2b00      	cmp	r3, #0
    1a82:	dbfb      	blt.n	1a7c <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1a84:	882b      	ldrh	r3, [r5, #0]
    1a86:	2201      	movs	r2, #1
    1a88:	4313      	orrs	r3, r2
    1a8a:	802b      	strh	r3, [r5, #0]
}
    1a8c:	bd70      	pop	{r4, r5, r6, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	00001a55 	.word	0x00001a55

00001a94 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1a94:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1a96:	88cb      	ldrh	r3, [r1, #6]
    1a98:	88c2      	ldrh	r2, [r0, #6]
    1a9a:	1a9a      	subs	r2, r3, r2
    1a9c:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1a9e:	794b      	ldrb	r3, [r1, #5]
    1aa0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1aa2:	790c      	ldrb	r4, [r1, #4]
    1aa4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1aa6:	4323      	orrs	r3, r4
    1aa8:	788c      	ldrb	r4, [r1, #2]
    1aaa:	0324      	lsls	r4, r4, #12
    1aac:	4323      	orrs	r3, r4
    1aae:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1ab0:	7902      	ldrb	r2, [r0, #4]
    1ab2:	2a00      	cmp	r2, #0
    1ab4:	d105      	bne.n	1ac2 <rtc_calendar_time_to_register_value+0x2e>
    1ab6:	78ca      	ldrb	r2, [r1, #3]
    1ab8:	2a00      	cmp	r2, #0
    1aba:	d002      	beq.n	1ac2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1abc:	2280      	movs	r2, #128	; 0x80
    1abe:	0252      	lsls	r2, r2, #9
    1ac0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1ac2:	7848      	ldrb	r0, [r1, #1]
    1ac4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1ac6:	780a      	ldrb	r2, [r1, #0]
    1ac8:	4310      	orrs	r0, r2
    1aca:	4318      	orrs	r0, r3

	return register_value;
}
    1acc:	bd10      	pop	{r4, pc}

00001ace <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1ace:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1ad0:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1ad2:	88c4      	ldrh	r4, [r0, #6]
    1ad4:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1ad6:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1ad8:	018b      	lsls	r3, r1, #6
    1ada:	0f1b      	lsrs	r3, r3, #28
    1adc:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1ade:	028b      	lsls	r3, r1, #10
    1ae0:	0edb      	lsrs	r3, r3, #27
    1ae2:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1ae4:	7903      	ldrb	r3, [r0, #4]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d10c      	bne.n	1b04 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1aea:	040b      	lsls	r3, r1, #16
    1aec:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1aee:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1af0:	03cb      	lsls	r3, r1, #15
    1af2:	0fdb      	lsrs	r3, r3, #31
    1af4:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1af6:	0988      	lsrs	r0, r1, #6
    1af8:	233f      	movs	r3, #63	; 0x3f
    1afa:	4018      	ands	r0, r3
    1afc:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1afe:	4019      	ands	r1, r3
    1b00:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1b02:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1b04:	03cb      	lsls	r3, r1, #15
    1b06:	0edb      	lsrs	r3, r3, #27
    1b08:	7093      	strb	r3, [r2, #2]
    1b0a:	e7f4      	b.n	1af6 <rtc_calendar_register_value_to_time+0x28>

00001b0c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1b0c:	b510      	push	{r4, lr}
    1b0e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b10:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1b12:	7941      	ldrb	r1, [r0, #5]
    1b14:	2900      	cmp	r1, #0
    1b16:	d006      	beq.n	1b26 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1b18:	8859      	ldrh	r1, [r3, #2]
    1b1a:	0449      	lsls	r1, r1, #17
    1b1c:	d50b      	bpl.n	1b36 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1b1e:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1b20:	4b0a      	ldr	r3, [pc, #40]	; (1b4c <rtc_calendar_get_time+0x40>)
    1b22:	4798      	blx	r3
}
    1b24:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1b26:	490a      	ldr	r1, [pc, #40]	; (1b50 <rtc_calendar_get_time+0x44>)
    1b28:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1b2a:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b2c:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1b2e:	b249      	sxtb	r1, r1
    1b30:	2900      	cmp	r1, #0
    1b32:	dbfb      	blt.n	1b2c <rtc_calendar_get_time+0x20>
    1b34:	e7f3      	b.n	1b1e <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1b36:	8859      	ldrh	r1, [r3, #2]
    1b38:	24c0      	movs	r4, #192	; 0xc0
    1b3a:	0224      	lsls	r4, r4, #8
    1b3c:	4321      	orrs	r1, r4
    1b3e:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1b40:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b42:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1b44:	b249      	sxtb	r1, r1
    1b46:	2900      	cmp	r1, #0
    1b48:	dbfb      	blt.n	1b42 <rtc_calendar_get_time+0x36>
    1b4a:	e7e8      	b.n	1b1e <rtc_calendar_get_time+0x12>
    1b4c:	00001acf 	.word	0x00001acf
    1b50:	ffff8000 	.word	0xffff8000

00001b54 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1b54:	b570      	push	{r4, r5, r6, lr}
    1b56:	000d      	movs	r5, r1
    1b58:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1b5a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1b5c:	2a01      	cmp	r2, #1
    1b5e:	d901      	bls.n	1b64 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1b60:	0018      	movs	r0, r3
    1b62:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1b64:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1b66:	4b06      	ldr	r3, [pc, #24]	; (1b80 <rtc_calendar_set_alarm+0x2c>)
    1b68:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b6a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1b6c:	b25b      	sxtb	r3, r3
    1b6e:	2b00      	cmp	r3, #0
    1b70:	dbfb      	blt.n	1b6a <rtc_calendar_set_alarm+0x16>
    1b72:	00e4      	lsls	r4, r4, #3
    1b74:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1b76:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1b78:	7a2b      	ldrb	r3, [r5, #8]
    1b7a:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1b7c:	2300      	movs	r3, #0
    1b7e:	e7ef      	b.n	1b60 <rtc_calendar_set_alarm+0xc>
    1b80:	00001a95 	.word	0x00001a95

00001b84 <rtc_calendar_init>:
{
    1b84:	b530      	push	{r4, r5, lr}
    1b86:	b083      	sub	sp, #12
    1b88:	0005      	movs	r5, r0
    1b8a:	0014      	movs	r4, r2
	module->hw = hw;
    1b8c:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1b8e:	4a1c      	ldr	r2, [pc, #112]	; (1c00 <rtc_calendar_init+0x7c>)
    1b90:	6993      	ldr	r3, [r2, #24]
    1b92:	2120      	movs	r1, #32
    1b94:	430b      	orrs	r3, r1
    1b96:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1b98:	a901      	add	r1, sp, #4
    1b9a:	2302      	movs	r3, #2
    1b9c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1b9e:	2004      	movs	r0, #4
    1ba0:	4b18      	ldr	r3, [pc, #96]	; (1c04 <rtc_calendar_init+0x80>)
    1ba2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1ba4:	2004      	movs	r0, #4
    1ba6:	4b18      	ldr	r3, [pc, #96]	; (1c08 <rtc_calendar_init+0x84>)
    1ba8:	4798      	blx	r3
	rtc_calendar_reset(module);
    1baa:	0028      	movs	r0, r5
    1bac:	4b17      	ldr	r3, [pc, #92]	; (1c0c <rtc_calendar_init+0x88>)
    1bae:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1bb0:	7923      	ldrb	r3, [r4, #4]
    1bb2:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1bb4:	78e3      	ldrb	r3, [r4, #3]
    1bb6:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1bb8:	88e3      	ldrh	r3, [r4, #6]
    1bba:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1bbc:	4b14      	ldr	r3, [pc, #80]	; (1c10 <rtc_calendar_init+0x8c>)
    1bbe:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1bc0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bc2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1bc4:	7921      	ldrb	r1, [r4, #4]
    1bc6:	2900      	cmp	r1, #0
    1bc8:	d017      	beq.n	1bfa <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bca:	2108      	movs	r1, #8
    1bcc:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1bce:	78a1      	ldrb	r1, [r4, #2]
    1bd0:	2900      	cmp	r1, #0
    1bd2:	d001      	beq.n	1bd8 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1bd4:	2180      	movs	r1, #128	; 0x80
    1bd6:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1bd8:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1bda:	78e3      	ldrb	r3, [r4, #3]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d004      	beq.n	1bea <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1be0:	8853      	ldrh	r3, [r2, #2]
    1be2:	2180      	movs	r1, #128	; 0x80
    1be4:	01c9      	lsls	r1, r1, #7
    1be6:	430b      	orrs	r3, r1
    1be8:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1bea:	0021      	movs	r1, r4
    1bec:	3108      	adds	r1, #8
    1bee:	2200      	movs	r2, #0
    1bf0:	0028      	movs	r0, r5
    1bf2:	4b08      	ldr	r3, [pc, #32]	; (1c14 <rtc_calendar_init+0x90>)
    1bf4:	4798      	blx	r3
}
    1bf6:	b003      	add	sp, #12
    1bf8:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1bfa:	2148      	movs	r1, #72	; 0x48
    1bfc:	430b      	orrs	r3, r1
    1bfe:	e7e6      	b.n	1bce <rtc_calendar_init+0x4a>
    1c00:	40000400 	.word	0x40000400
    1c04:	0000344d 	.word	0x0000344d
    1c08:	000033c1 	.word	0x000033c1
    1c0c:	00001a71 	.word	0x00001a71
    1c10:	20000a30 	.word	0x20000a30
    1c14:	00001b55 	.word	0x00001b55

00001c18 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c1a:	46de      	mov	lr, fp
    1c1c:	4657      	mov	r7, sl
    1c1e:	464e      	mov	r6, r9
    1c20:	4645      	mov	r5, r8
    1c22:	b5e0      	push	{r5, r6, r7, lr}
    1c24:	b087      	sub	sp, #28
    1c26:	4680      	mov	r8, r0
    1c28:	9104      	str	r1, [sp, #16]
    1c2a:	0016      	movs	r6, r2
    1c2c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1c2e:	2200      	movs	r2, #0
    1c30:	2300      	movs	r3, #0
    1c32:	2100      	movs	r1, #0
    1c34:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1c36:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1c38:	2001      	movs	r0, #1
    1c3a:	0021      	movs	r1, r4
    1c3c:	9600      	str	r6, [sp, #0]
    1c3e:	9701      	str	r7, [sp, #4]
    1c40:	465c      	mov	r4, fp
    1c42:	9403      	str	r4, [sp, #12]
    1c44:	4644      	mov	r4, r8
    1c46:	9405      	str	r4, [sp, #20]
    1c48:	e013      	b.n	1c72 <long_division+0x5a>
    1c4a:	2420      	movs	r4, #32
    1c4c:	1a64      	subs	r4, r4, r1
    1c4e:	0005      	movs	r5, r0
    1c50:	40e5      	lsrs	r5, r4
    1c52:	46a8      	mov	r8, r5
    1c54:	e014      	b.n	1c80 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1c56:	9c00      	ldr	r4, [sp, #0]
    1c58:	9d01      	ldr	r5, [sp, #4]
    1c5a:	1b12      	subs	r2, r2, r4
    1c5c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1c5e:	465c      	mov	r4, fp
    1c60:	464d      	mov	r5, r9
    1c62:	432c      	orrs	r4, r5
    1c64:	46a3      	mov	fp, r4
    1c66:	9c03      	ldr	r4, [sp, #12]
    1c68:	4645      	mov	r5, r8
    1c6a:	432c      	orrs	r4, r5
    1c6c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1c6e:	3901      	subs	r1, #1
    1c70:	d325      	bcc.n	1cbe <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1c72:	2420      	movs	r4, #32
    1c74:	4264      	negs	r4, r4
    1c76:	190c      	adds	r4, r1, r4
    1c78:	d4e7      	bmi.n	1c4a <long_division+0x32>
    1c7a:	0005      	movs	r5, r0
    1c7c:	40a5      	lsls	r5, r4
    1c7e:	46a8      	mov	r8, r5
    1c80:	0004      	movs	r4, r0
    1c82:	408c      	lsls	r4, r1
    1c84:	46a1      	mov	r9, r4
		r = r << 1;
    1c86:	1892      	adds	r2, r2, r2
    1c88:	415b      	adcs	r3, r3
    1c8a:	0014      	movs	r4, r2
    1c8c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1c8e:	9e05      	ldr	r6, [sp, #20]
    1c90:	464f      	mov	r7, r9
    1c92:	403e      	ands	r6, r7
    1c94:	46b4      	mov	ip, r6
    1c96:	9e04      	ldr	r6, [sp, #16]
    1c98:	4647      	mov	r7, r8
    1c9a:	403e      	ands	r6, r7
    1c9c:	46b2      	mov	sl, r6
    1c9e:	4666      	mov	r6, ip
    1ca0:	4657      	mov	r7, sl
    1ca2:	433e      	orrs	r6, r7
    1ca4:	d003      	beq.n	1cae <long_division+0x96>
			r |= 0x01;
    1ca6:	0006      	movs	r6, r0
    1ca8:	4326      	orrs	r6, r4
    1caa:	0032      	movs	r2, r6
    1cac:	002b      	movs	r3, r5
		if (r >= d) {
    1cae:	9c00      	ldr	r4, [sp, #0]
    1cb0:	9d01      	ldr	r5, [sp, #4]
    1cb2:	429d      	cmp	r5, r3
    1cb4:	d8db      	bhi.n	1c6e <long_division+0x56>
    1cb6:	d1ce      	bne.n	1c56 <long_division+0x3e>
    1cb8:	4294      	cmp	r4, r2
    1cba:	d8d8      	bhi.n	1c6e <long_division+0x56>
    1cbc:	e7cb      	b.n	1c56 <long_division+0x3e>
    1cbe:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1cc0:	4658      	mov	r0, fp
    1cc2:	0019      	movs	r1, r3
    1cc4:	b007      	add	sp, #28
    1cc6:	bc3c      	pop	{r2, r3, r4, r5}
    1cc8:	4690      	mov	r8, r2
    1cca:	4699      	mov	r9, r3
    1ccc:	46a2      	mov	sl, r4
    1cce:	46ab      	mov	fp, r5
    1cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001cd2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1cd2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1cd4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1cd6:	2340      	movs	r3, #64	; 0x40
    1cd8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1cda:	4281      	cmp	r1, r0
    1cdc:	d202      	bcs.n	1ce4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1cde:	0018      	movs	r0, r3
    1ce0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1ce2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1ce4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1ce6:	1c63      	adds	r3, r4, #1
    1ce8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1cea:	4288      	cmp	r0, r1
    1cec:	d9f9      	bls.n	1ce2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1cee:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1cf0:	2cff      	cmp	r4, #255	; 0xff
    1cf2:	d8f4      	bhi.n	1cde <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1cf4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1cf6:	2300      	movs	r3, #0
    1cf8:	e7f1      	b.n	1cde <_sercom_get_sync_baud_val+0xc>
	...

00001cfc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfe:	b083      	sub	sp, #12
    1d00:	000f      	movs	r7, r1
    1d02:	0016      	movs	r6, r2
    1d04:	aa08      	add	r2, sp, #32
    1d06:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1d08:	0004      	movs	r4, r0
    1d0a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d0c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1d0e:	42bc      	cmp	r4, r7
    1d10:	d902      	bls.n	1d18 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1d12:	0010      	movs	r0, r2
    1d14:	b003      	add	sp, #12
    1d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d114      	bne.n	1d46 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1d1c:	0002      	movs	r2, r0
    1d1e:	0008      	movs	r0, r1
    1d20:	2100      	movs	r1, #0
    1d22:	4c19      	ldr	r4, [pc, #100]	; (1d88 <_sercom_get_async_baud_val+0x8c>)
    1d24:	47a0      	blx	r4
    1d26:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1d28:	003a      	movs	r2, r7
    1d2a:	2300      	movs	r3, #0
    1d2c:	2000      	movs	r0, #0
    1d2e:	4c17      	ldr	r4, [pc, #92]	; (1d8c <_sercom_get_async_baud_val+0x90>)
    1d30:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1d32:	2200      	movs	r2, #0
    1d34:	2301      	movs	r3, #1
    1d36:	1a12      	subs	r2, r2, r0
    1d38:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1d3a:	0c12      	lsrs	r2, r2, #16
    1d3c:	041b      	lsls	r3, r3, #16
    1d3e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1d40:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1d42:	2200      	movs	r2, #0
    1d44:	e7e5      	b.n	1d12 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1d46:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1d48:	2b01      	cmp	r3, #1
    1d4a:	d1f9      	bne.n	1d40 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1d4c:	000a      	movs	r2, r1
    1d4e:	2300      	movs	r3, #0
    1d50:	2100      	movs	r1, #0
    1d52:	4c0d      	ldr	r4, [pc, #52]	; (1d88 <_sercom_get_async_baud_val+0x8c>)
    1d54:	47a0      	blx	r4
    1d56:	0002      	movs	r2, r0
    1d58:	000b      	movs	r3, r1
    1d5a:	9200      	str	r2, [sp, #0]
    1d5c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1d5e:	0038      	movs	r0, r7
    1d60:	2100      	movs	r1, #0
    1d62:	4c0a      	ldr	r4, [pc, #40]	; (1d8c <_sercom_get_async_baud_val+0x90>)
    1d64:	47a0      	blx	r4
    1d66:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1d68:	2380      	movs	r3, #128	; 0x80
    1d6a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d6c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1d6e:	4298      	cmp	r0, r3
    1d70:	d8cf      	bhi.n	1d12 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1d72:	0f79      	lsrs	r1, r7, #29
    1d74:	00f8      	lsls	r0, r7, #3
    1d76:	9a00      	ldr	r2, [sp, #0]
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1d7c:	00ea      	lsls	r2, r5, #3
    1d7e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1d80:	b2d2      	uxtb	r2, r2
    1d82:	0352      	lsls	r2, r2, #13
    1d84:	432a      	orrs	r2, r5
    1d86:	e7db      	b.n	1d40 <_sercom_get_async_baud_val+0x44>
    1d88:	00006229 	.word	0x00006229
    1d8c:	00001c19 	.word	0x00001c19

00001d90 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1d90:	b510      	push	{r4, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1d96:	4b0e      	ldr	r3, [pc, #56]	; (1dd0 <sercom_set_gclk_generator+0x40>)
    1d98:	781b      	ldrb	r3, [r3, #0]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d007      	beq.n	1dae <sercom_set_gclk_generator+0x1e>
    1d9e:	2900      	cmp	r1, #0
    1da0:	d105      	bne.n	1dae <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1da2:	4b0b      	ldr	r3, [pc, #44]	; (1dd0 <sercom_set_gclk_generator+0x40>)
    1da4:	785b      	ldrb	r3, [r3, #1]
    1da6:	4283      	cmp	r3, r0
    1da8:	d010      	beq.n	1dcc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1daa:	201d      	movs	r0, #29
    1dac:	e00c      	b.n	1dc8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1dae:	a901      	add	r1, sp, #4
    1db0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1db2:	2013      	movs	r0, #19
    1db4:	4b07      	ldr	r3, [pc, #28]	; (1dd4 <sercom_set_gclk_generator+0x44>)
    1db6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1db8:	2013      	movs	r0, #19
    1dba:	4b07      	ldr	r3, [pc, #28]	; (1dd8 <sercom_set_gclk_generator+0x48>)
    1dbc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1dbe:	4b04      	ldr	r3, [pc, #16]	; (1dd0 <sercom_set_gclk_generator+0x40>)
    1dc0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1dc2:	2201      	movs	r2, #1
    1dc4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1dc6:	2000      	movs	r0, #0
}
    1dc8:	b002      	add	sp, #8
    1dca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1dcc:	2000      	movs	r0, #0
    1dce:	e7fb      	b.n	1dc8 <sercom_set_gclk_generator+0x38>
    1dd0:	20000184 	.word	0x20000184
    1dd4:	0000344d 	.word	0x0000344d
    1dd8:	000033c1 	.word	0x000033c1

00001ddc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1ddc:	4b40      	ldr	r3, [pc, #256]	; (1ee0 <_sercom_get_default_pad+0x104>)
    1dde:	4298      	cmp	r0, r3
    1de0:	d031      	beq.n	1e46 <_sercom_get_default_pad+0x6a>
    1de2:	d90a      	bls.n	1dfa <_sercom_get_default_pad+0x1e>
    1de4:	4b3f      	ldr	r3, [pc, #252]	; (1ee4 <_sercom_get_default_pad+0x108>)
    1de6:	4298      	cmp	r0, r3
    1de8:	d04d      	beq.n	1e86 <_sercom_get_default_pad+0xaa>
    1dea:	4b3f      	ldr	r3, [pc, #252]	; (1ee8 <_sercom_get_default_pad+0x10c>)
    1dec:	4298      	cmp	r0, r3
    1dee:	d05a      	beq.n	1ea6 <_sercom_get_default_pad+0xca>
    1df0:	4b3e      	ldr	r3, [pc, #248]	; (1eec <_sercom_get_default_pad+0x110>)
    1df2:	4298      	cmp	r0, r3
    1df4:	d037      	beq.n	1e66 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1df6:	2000      	movs	r0, #0
}
    1df8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1dfa:	4b3d      	ldr	r3, [pc, #244]	; (1ef0 <_sercom_get_default_pad+0x114>)
    1dfc:	4298      	cmp	r0, r3
    1dfe:	d00c      	beq.n	1e1a <_sercom_get_default_pad+0x3e>
    1e00:	4b3c      	ldr	r3, [pc, #240]	; (1ef4 <_sercom_get_default_pad+0x118>)
    1e02:	4298      	cmp	r0, r3
    1e04:	d1f7      	bne.n	1df6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e06:	2901      	cmp	r1, #1
    1e08:	d017      	beq.n	1e3a <_sercom_get_default_pad+0x5e>
    1e0a:	2900      	cmp	r1, #0
    1e0c:	d05d      	beq.n	1eca <_sercom_get_default_pad+0xee>
    1e0e:	2902      	cmp	r1, #2
    1e10:	d015      	beq.n	1e3e <_sercom_get_default_pad+0x62>
    1e12:	2903      	cmp	r1, #3
    1e14:	d015      	beq.n	1e42 <_sercom_get_default_pad+0x66>
	return 0;
    1e16:	2000      	movs	r0, #0
    1e18:	e7ee      	b.n	1df8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e1a:	2901      	cmp	r1, #1
    1e1c:	d007      	beq.n	1e2e <_sercom_get_default_pad+0x52>
    1e1e:	2900      	cmp	r1, #0
    1e20:	d051      	beq.n	1ec6 <_sercom_get_default_pad+0xea>
    1e22:	2902      	cmp	r1, #2
    1e24:	d005      	beq.n	1e32 <_sercom_get_default_pad+0x56>
    1e26:	2903      	cmp	r1, #3
    1e28:	d005      	beq.n	1e36 <_sercom_get_default_pad+0x5a>
	return 0;
    1e2a:	2000      	movs	r0, #0
    1e2c:	e7e4      	b.n	1df8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e2e:	4832      	ldr	r0, [pc, #200]	; (1ef8 <_sercom_get_default_pad+0x11c>)
    1e30:	e7e2      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e32:	4832      	ldr	r0, [pc, #200]	; (1efc <_sercom_get_default_pad+0x120>)
    1e34:	e7e0      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e36:	4832      	ldr	r0, [pc, #200]	; (1f00 <_sercom_get_default_pad+0x124>)
    1e38:	e7de      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e3a:	4832      	ldr	r0, [pc, #200]	; (1f04 <_sercom_get_default_pad+0x128>)
    1e3c:	e7dc      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e3e:	4832      	ldr	r0, [pc, #200]	; (1f08 <_sercom_get_default_pad+0x12c>)
    1e40:	e7da      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e42:	4832      	ldr	r0, [pc, #200]	; (1f0c <_sercom_get_default_pad+0x130>)
    1e44:	e7d8      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e46:	2901      	cmp	r1, #1
    1e48:	d007      	beq.n	1e5a <_sercom_get_default_pad+0x7e>
    1e4a:	2900      	cmp	r1, #0
    1e4c:	d03f      	beq.n	1ece <_sercom_get_default_pad+0xf2>
    1e4e:	2902      	cmp	r1, #2
    1e50:	d005      	beq.n	1e5e <_sercom_get_default_pad+0x82>
    1e52:	2903      	cmp	r1, #3
    1e54:	d005      	beq.n	1e62 <_sercom_get_default_pad+0x86>
	return 0;
    1e56:	2000      	movs	r0, #0
    1e58:	e7ce      	b.n	1df8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e5a:	482d      	ldr	r0, [pc, #180]	; (1f10 <_sercom_get_default_pad+0x134>)
    1e5c:	e7cc      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e5e:	482d      	ldr	r0, [pc, #180]	; (1f14 <_sercom_get_default_pad+0x138>)
    1e60:	e7ca      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e62:	482d      	ldr	r0, [pc, #180]	; (1f18 <_sercom_get_default_pad+0x13c>)
    1e64:	e7c8      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e66:	2901      	cmp	r1, #1
    1e68:	d007      	beq.n	1e7a <_sercom_get_default_pad+0x9e>
    1e6a:	2900      	cmp	r1, #0
    1e6c:	d031      	beq.n	1ed2 <_sercom_get_default_pad+0xf6>
    1e6e:	2902      	cmp	r1, #2
    1e70:	d005      	beq.n	1e7e <_sercom_get_default_pad+0xa2>
    1e72:	2903      	cmp	r1, #3
    1e74:	d005      	beq.n	1e82 <_sercom_get_default_pad+0xa6>
	return 0;
    1e76:	2000      	movs	r0, #0
    1e78:	e7be      	b.n	1df8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e7a:	4828      	ldr	r0, [pc, #160]	; (1f1c <_sercom_get_default_pad+0x140>)
    1e7c:	e7bc      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e7e:	4828      	ldr	r0, [pc, #160]	; (1f20 <_sercom_get_default_pad+0x144>)
    1e80:	e7ba      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e82:	4828      	ldr	r0, [pc, #160]	; (1f24 <_sercom_get_default_pad+0x148>)
    1e84:	e7b8      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e86:	2901      	cmp	r1, #1
    1e88:	d007      	beq.n	1e9a <_sercom_get_default_pad+0xbe>
    1e8a:	2900      	cmp	r1, #0
    1e8c:	d023      	beq.n	1ed6 <_sercom_get_default_pad+0xfa>
    1e8e:	2902      	cmp	r1, #2
    1e90:	d005      	beq.n	1e9e <_sercom_get_default_pad+0xc2>
    1e92:	2903      	cmp	r1, #3
    1e94:	d005      	beq.n	1ea2 <_sercom_get_default_pad+0xc6>
	return 0;
    1e96:	2000      	movs	r0, #0
    1e98:	e7ae      	b.n	1df8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e9a:	4823      	ldr	r0, [pc, #140]	; (1f28 <_sercom_get_default_pad+0x14c>)
    1e9c:	e7ac      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1e9e:	4823      	ldr	r0, [pc, #140]	; (1f2c <_sercom_get_default_pad+0x150>)
    1ea0:	e7aa      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ea2:	4823      	ldr	r0, [pc, #140]	; (1f30 <_sercom_get_default_pad+0x154>)
    1ea4:	e7a8      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ea6:	2901      	cmp	r1, #1
    1ea8:	d007      	beq.n	1eba <_sercom_get_default_pad+0xde>
    1eaa:	2900      	cmp	r1, #0
    1eac:	d015      	beq.n	1eda <_sercom_get_default_pad+0xfe>
    1eae:	2902      	cmp	r1, #2
    1eb0:	d005      	beq.n	1ebe <_sercom_get_default_pad+0xe2>
    1eb2:	2903      	cmp	r1, #3
    1eb4:	d005      	beq.n	1ec2 <_sercom_get_default_pad+0xe6>
	return 0;
    1eb6:	2000      	movs	r0, #0
    1eb8:	e79e      	b.n	1df8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eba:	481e      	ldr	r0, [pc, #120]	; (1f34 <_sercom_get_default_pad+0x158>)
    1ebc:	e79c      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ebe:	481e      	ldr	r0, [pc, #120]	; (1f38 <_sercom_get_default_pad+0x15c>)
    1ec0:	e79a      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ec2:	481e      	ldr	r0, [pc, #120]	; (1f3c <_sercom_get_default_pad+0x160>)
    1ec4:	e798      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ec6:	481e      	ldr	r0, [pc, #120]	; (1f40 <_sercom_get_default_pad+0x164>)
    1ec8:	e796      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1eca:	2003      	movs	r0, #3
    1ecc:	e794      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ece:	481d      	ldr	r0, [pc, #116]	; (1f44 <_sercom_get_default_pad+0x168>)
    1ed0:	e792      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ed2:	481d      	ldr	r0, [pc, #116]	; (1f48 <_sercom_get_default_pad+0x16c>)
    1ed4:	e790      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ed6:	481d      	ldr	r0, [pc, #116]	; (1f4c <_sercom_get_default_pad+0x170>)
    1ed8:	e78e      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1eda:	481d      	ldr	r0, [pc, #116]	; (1f50 <_sercom_get_default_pad+0x174>)
    1edc:	e78c      	b.n	1df8 <_sercom_get_default_pad+0x1c>
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	42001000 	.word	0x42001000
    1ee4:	42001800 	.word	0x42001800
    1ee8:	42001c00 	.word	0x42001c00
    1eec:	42001400 	.word	0x42001400
    1ef0:	42000800 	.word	0x42000800
    1ef4:	42000c00 	.word	0x42000c00
    1ef8:	00050003 	.word	0x00050003
    1efc:	00060003 	.word	0x00060003
    1f00:	00070003 	.word	0x00070003
    1f04:	00010003 	.word	0x00010003
    1f08:	001e0003 	.word	0x001e0003
    1f0c:	001f0003 	.word	0x001f0003
    1f10:	00090003 	.word	0x00090003
    1f14:	000a0003 	.word	0x000a0003
    1f18:	000b0003 	.word	0x000b0003
    1f1c:	00110003 	.word	0x00110003
    1f20:	00120003 	.word	0x00120003
    1f24:	00130003 	.word	0x00130003
    1f28:	000d0003 	.word	0x000d0003
    1f2c:	000e0003 	.word	0x000e0003
    1f30:	000f0003 	.word	0x000f0003
    1f34:	00170003 	.word	0x00170003
    1f38:	00180003 	.word	0x00180003
    1f3c:	00190003 	.word	0x00190003
    1f40:	00040003 	.word	0x00040003
    1f44:	00080003 	.word	0x00080003
    1f48:	00100003 	.word	0x00100003
    1f4c:	000c0003 	.word	0x000c0003
    1f50:	00160003 	.word	0x00160003

00001f54 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f54:	b530      	push	{r4, r5, lr}
    1f56:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f58:	4b0b      	ldr	r3, [pc, #44]	; (1f88 <_sercom_get_sercom_inst_index+0x34>)
    1f5a:	466a      	mov	r2, sp
    1f5c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f5e:	c232      	stmia	r2!, {r1, r4, r5}
    1f60:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f62:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1f64:	9b00      	ldr	r3, [sp, #0]
    1f66:	4283      	cmp	r3, r0
    1f68:	d00b      	beq.n	1f82 <_sercom_get_sercom_inst_index+0x2e>
    1f6a:	2301      	movs	r3, #1
    1f6c:	009a      	lsls	r2, r3, #2
    1f6e:	4669      	mov	r1, sp
    1f70:	5852      	ldr	r2, [r2, r1]
    1f72:	4282      	cmp	r2, r0
    1f74:	d006      	beq.n	1f84 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f76:	3301      	adds	r3, #1
    1f78:	2b06      	cmp	r3, #6
    1f7a:	d1f7      	bne.n	1f6c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1f7c:	2000      	movs	r0, #0
}
    1f7e:	b007      	add	sp, #28
    1f80:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f82:	2300      	movs	r3, #0
			return i;
    1f84:	b2d8      	uxtb	r0, r3
    1f86:	e7fa      	b.n	1f7e <_sercom_get_sercom_inst_index+0x2a>
    1f88:	0000733c 	.word	0x0000733c

00001f8c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1f8c:	4770      	bx	lr
	...

00001f90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1f92:	4b0a      	ldr	r3, [pc, #40]	; (1fbc <_sercom_set_handler+0x2c>)
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d10c      	bne.n	1fb4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f9a:	4f09      	ldr	r7, [pc, #36]	; (1fc0 <_sercom_set_handler+0x30>)
    1f9c:	4e09      	ldr	r6, [pc, #36]	; (1fc4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1f9e:	4d0a      	ldr	r5, [pc, #40]	; (1fc8 <_sercom_set_handler+0x38>)
    1fa0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1fa2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1fa4:	195a      	adds	r2, r3, r5
    1fa6:	6014      	str	r4, [r2, #0]
    1fa8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1faa:	2b18      	cmp	r3, #24
    1fac:	d1f9      	bne.n	1fa2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1fae:	2201      	movs	r2, #1
    1fb0:	4b02      	ldr	r3, [pc, #8]	; (1fbc <_sercom_set_handler+0x2c>)
    1fb2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1fb4:	0080      	lsls	r0, r0, #2
    1fb6:	4b02      	ldr	r3, [pc, #8]	; (1fc0 <_sercom_set_handler+0x30>)
    1fb8:	50c1      	str	r1, [r0, r3]
}
    1fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fbc:	20000186 	.word	0x20000186
    1fc0:	20000188 	.word	0x20000188
    1fc4:	00001f8d 	.word	0x00001f8d
    1fc8:	20000a34 	.word	0x20000a34

00001fcc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1fcc:	b500      	push	{lr}
    1fce:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1fd0:	2309      	movs	r3, #9
    1fd2:	466a      	mov	r2, sp
    1fd4:	7013      	strb	r3, [r2, #0]
    1fd6:	3301      	adds	r3, #1
    1fd8:	7053      	strb	r3, [r2, #1]
    1fda:	3301      	adds	r3, #1
    1fdc:	7093      	strb	r3, [r2, #2]
    1fde:	3301      	adds	r3, #1
    1fe0:	70d3      	strb	r3, [r2, #3]
    1fe2:	3301      	adds	r3, #1
    1fe4:	7113      	strb	r3, [r2, #4]
    1fe6:	3301      	adds	r3, #1
    1fe8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1fea:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <_sercom_get_interrupt_vector+0x2c>)
    1fec:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1fee:	466b      	mov	r3, sp
    1ff0:	5618      	ldrsb	r0, [r3, r0]
}
    1ff2:	b003      	add	sp, #12
    1ff4:	bd00      	pop	{pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	00001f55 	.word	0x00001f55

00001ffc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ffc:	b510      	push	{r4, lr}
    1ffe:	4b02      	ldr	r3, [pc, #8]	; (2008 <STACK_SIZE+0x8>)
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	2000      	movs	r0, #0
    2004:	4798      	blx	r3
    2006:	bd10      	pop	{r4, pc}
    2008:	20000188 	.word	0x20000188

0000200c <SERCOM1_Handler>:
    200c:	b510      	push	{r4, lr}
    200e:	4b02      	ldr	r3, [pc, #8]	; (2018 <SERCOM1_Handler+0xc>)
    2010:	685b      	ldr	r3, [r3, #4]
    2012:	2001      	movs	r0, #1
    2014:	4798      	blx	r3
    2016:	bd10      	pop	{r4, pc}
    2018:	20000188 	.word	0x20000188

0000201c <SERCOM2_Handler>:
    201c:	b510      	push	{r4, lr}
    201e:	4b02      	ldr	r3, [pc, #8]	; (2028 <SERCOM2_Handler+0xc>)
    2020:	689b      	ldr	r3, [r3, #8]
    2022:	2002      	movs	r0, #2
    2024:	4798      	blx	r3
    2026:	bd10      	pop	{r4, pc}
    2028:	20000188 	.word	0x20000188

0000202c <SERCOM3_Handler>:
    202c:	b510      	push	{r4, lr}
    202e:	4b02      	ldr	r3, [pc, #8]	; (2038 <SERCOM3_Handler+0xc>)
    2030:	68db      	ldr	r3, [r3, #12]
    2032:	2003      	movs	r0, #3
    2034:	4798      	blx	r3
    2036:	bd10      	pop	{r4, pc}
    2038:	20000188 	.word	0x20000188

0000203c <SERCOM4_Handler>:
    203c:	b510      	push	{r4, lr}
    203e:	4b02      	ldr	r3, [pc, #8]	; (2048 <SERCOM4_Handler+0xc>)
    2040:	691b      	ldr	r3, [r3, #16]
    2042:	2004      	movs	r0, #4
    2044:	4798      	blx	r3
    2046:	bd10      	pop	{r4, pc}
    2048:	20000188 	.word	0x20000188

0000204c <SERCOM5_Handler>:
    204c:	b510      	push	{r4, lr}
    204e:	4b02      	ldr	r3, [pc, #8]	; (2058 <SERCOM5_Handler+0xc>)
    2050:	695b      	ldr	r3, [r3, #20]
    2052:	2005      	movs	r0, #5
    2054:	4798      	blx	r3
    2056:	bd10      	pop	{r4, pc}
    2058:	20000188 	.word	0x20000188

0000205c <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    205c:	b570      	push	{r4, r5, r6, lr}
    205e:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2060:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2062:	0020      	movs	r0, r4
    2064:	4b0e      	ldr	r3, [pc, #56]	; (20a0 <spi_reset+0x44>)
    2066:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2068:	231f      	movs	r3, #31
    206a:	4018      	ands	r0, r3
    206c:	3b1e      	subs	r3, #30
    206e:	4083      	lsls	r3, r0
    2070:	2280      	movs	r2, #128	; 0x80
    2072:	490c      	ldr	r1, [pc, #48]	; (20a4 <spi_reset+0x48>)
    2074:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2076:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2078:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    207a:	2b00      	cmp	r3, #0
    207c:	d1fc      	bne.n	2078 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    207e:	338f      	adds	r3, #143	; 0x8f
    2080:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2082:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2084:	6823      	ldr	r3, [r4, #0]
    2086:	2202      	movs	r2, #2
    2088:	4393      	bics	r3, r2
    208a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    208c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    208e:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    2090:	2b00      	cmp	r3, #0
    2092:	d1fc      	bne.n	208e <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    2094:	6823      	ldr	r3, [r4, #0]
    2096:	2201      	movs	r2, #1
    2098:	4313      	orrs	r3, r2
    209a:	6023      	str	r3, [r4, #0]
}
    209c:	bd70      	pop	{r4, r5, r6, pc}
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	00001fcd 	.word	0x00001fcd
    20a4:	e000e100 	.word	0xe000e100

000020a8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    20a8:	b570      	push	{r4, r5, r6, lr}
    20aa:	b082      	sub	sp, #8
    20ac:	0005      	movs	r5, r0
    20ae:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    20b0:	2200      	movs	r2, #0
    20b2:	466b      	mov	r3, sp
    20b4:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    20b6:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    20b8:	0030      	movs	r0, r6
    20ba:	4b24      	ldr	r3, [pc, #144]	; (214c <spi_set_baudrate+0xa4>)
    20bc:	4798      	blx	r3
    20be:	231f      	movs	r3, #31
    20c0:	4018      	ands	r0, r3
    20c2:	3b1e      	subs	r3, #30
    20c4:	4083      	lsls	r3, r0
    20c6:	2280      	movs	r2, #128	; 0x80
    20c8:	4921      	ldr	r1, [pc, #132]	; (2150 <spi_set_baudrate+0xa8>)
    20ca:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20cc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20ce:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    20d0:	2b00      	cmp	r3, #0
    20d2:	d1fc      	bne.n	20ce <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    20d4:	338f      	adds	r3, #143	; 0x8f
    20d6:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    20d8:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    20da:	6833      	ldr	r3, [r6, #0]
    20dc:	2202      	movs	r2, #2
    20de:	4393      	bics	r3, r2
    20e0:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20e2:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20e4:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    20e6:	2b00      	cmp	r3, #0
    20e8:	d1fc      	bne.n	20e4 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20ea:	4b1a      	ldr	r3, [pc, #104]	; (2154 <spi_set_baudrate+0xac>)
    20ec:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20ee:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    20f0:	b2c0      	uxtb	r0, r0
    20f2:	4b19      	ldr	r3, [pc, #100]	; (2158 <spi_set_baudrate+0xb0>)
    20f4:	4798      	blx	r3
    20f6:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    20f8:	466b      	mov	r3, sp
    20fa:	1d9a      	adds	r2, r3, #6
    20fc:	0020      	movs	r0, r4
    20fe:	4b17      	ldr	r3, [pc, #92]	; (215c <spi_set_baudrate+0xb4>)
    2100:	4798      	blx	r3
    2102:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    2104:	d003      	beq.n	210e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    2106:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    2108:	0020      	movs	r0, r4
    210a:	b002      	add	sp, #8
    210c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    210e:	466b      	mov	r3, sp
    2110:	3306      	adds	r3, #6
    2112:	781b      	ldrb	r3, [r3, #0]
    2114:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2116:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2118:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    211a:	2b00      	cmp	r3, #0
    211c:	d1fc      	bne.n	2118 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    211e:	0030      	movs	r0, r6
    2120:	4b0a      	ldr	r3, [pc, #40]	; (214c <spi_set_baudrate+0xa4>)
    2122:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2124:	231f      	movs	r3, #31
    2126:	4018      	ands	r0, r3
    2128:	3b1e      	subs	r3, #30
    212a:	4083      	lsls	r3, r0
    212c:	4a08      	ldr	r2, [pc, #32]	; (2150 <spi_set_baudrate+0xa8>)
    212e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2130:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2132:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2134:	2b00      	cmp	r3, #0
    2136:	d1fc      	bne.n	2132 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2138:	6833      	ldr	r3, [r6, #0]
    213a:	2202      	movs	r2, #2
    213c:	4313      	orrs	r3, r2
    213e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2140:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2142:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2144:	2b00      	cmp	r3, #0
    2146:	d1fc      	bne.n	2142 <spi_set_baudrate+0x9a>
    2148:	e7de      	b.n	2108 <spi_set_baudrate+0x60>
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	00001fcd 	.word	0x00001fcd
    2150:	e000e100 	.word	0xe000e100
    2154:	00001f55 	.word	0x00001f55
    2158:	00003469 	.word	0x00003469
    215c:	00001cd3 	.word	0x00001cd3

00002160 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2160:	b5f0      	push	{r4, r5, r6, r7, lr}
    2162:	b08b      	sub	sp, #44	; 0x2c
    2164:	0005      	movs	r5, r0
    2166:	000c      	movs	r4, r1
    2168:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    216a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    216c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    216e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2170:	079b      	lsls	r3, r3, #30
    2172:	d501      	bpl.n	2178 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2174:	b00b      	add	sp, #44	; 0x2c
    2176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2178:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    217a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    217c:	07db      	lsls	r3, r3, #31
    217e:	d4f9      	bmi.n	2174 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2180:	0008      	movs	r0, r1
    2182:	4b60      	ldr	r3, [pc, #384]	; (2304 <spi_init+0x1a4>)
    2184:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2186:	4a60      	ldr	r2, [pc, #384]	; (2308 <spi_init+0x1a8>)
    2188:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    218a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    218c:	2301      	movs	r3, #1
    218e:	40bb      	lsls	r3, r7
    2190:	430b      	orrs	r3, r1
    2192:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2194:	a909      	add	r1, sp, #36	; 0x24
    2196:	2724      	movs	r7, #36	; 0x24
    2198:	5df3      	ldrb	r3, [r6, r7]
    219a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    219c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    219e:	b2c3      	uxtb	r3, r0
    21a0:	9301      	str	r3, [sp, #4]
    21a2:	0018      	movs	r0, r3
    21a4:	4b59      	ldr	r3, [pc, #356]	; (230c <spi_init+0x1ac>)
    21a6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    21a8:	9801      	ldr	r0, [sp, #4]
    21aa:	4b59      	ldr	r3, [pc, #356]	; (2310 <spi_init+0x1b0>)
    21ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    21ae:	5df0      	ldrb	r0, [r6, r7]
    21b0:	2100      	movs	r1, #0
    21b2:	4b58      	ldr	r3, [pc, #352]	; (2314 <spi_init+0x1b4>)
    21b4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    21b6:	7833      	ldrb	r3, [r6, #0]
    21b8:	2b01      	cmp	r3, #1
    21ba:	d038      	beq.n	222e <spi_init+0xce>
    21bc:	002b      	movs	r3, r5
    21be:	330c      	adds	r3, #12
    21c0:	0029      	movs	r1, r5
    21c2:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    21c4:	2200      	movs	r2, #0
    21c6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    21c8:	428b      	cmp	r3, r1
    21ca:	d1fc      	bne.n	21c6 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    21cc:	2300      	movs	r3, #0
    21ce:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    21d0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    21d2:	2400      	movs	r4, #0
    21d4:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    21d6:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    21d8:	3336      	adds	r3, #54	; 0x36
    21da:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    21dc:	3301      	adds	r3, #1
    21de:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    21e0:	3301      	adds	r3, #1
    21e2:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    21e4:	3b35      	subs	r3, #53	; 0x35
    21e6:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    21e8:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    21ea:	6828      	ldr	r0, [r5, #0]
    21ec:	4b45      	ldr	r3, [pc, #276]	; (2304 <spi_init+0x1a4>)
    21ee:	4798      	blx	r3
    21f0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    21f2:	4949      	ldr	r1, [pc, #292]	; (2318 <spi_init+0x1b8>)
    21f4:	4b49      	ldr	r3, [pc, #292]	; (231c <spi_init+0x1bc>)
    21f6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    21f8:	00bf      	lsls	r7, r7, #2
    21fa:	4b49      	ldr	r3, [pc, #292]	; (2320 <spi_init+0x1c0>)
    21fc:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21fe:	682f      	ldr	r7, [r5, #0]
    2200:	ab04      	add	r3, sp, #16
    2202:	2280      	movs	r2, #128	; 0x80
    2204:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2206:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2208:	3a7f      	subs	r2, #127	; 0x7f
    220a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    220c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    220e:	7833      	ldrb	r3, [r6, #0]
    2210:	2b00      	cmp	r3, #0
    2212:	d102      	bne.n	221a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2214:	2200      	movs	r2, #0
    2216:	ab04      	add	r3, sp, #16
    2218:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    221a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    221c:	9305      	str	r3, [sp, #20]
    221e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2220:	9306      	str	r3, [sp, #24]
    2222:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2224:	9307      	str	r3, [sp, #28]
    2226:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2228:	9308      	str	r3, [sp, #32]
    222a:	2400      	movs	r4, #0
    222c:	e00b      	b.n	2246 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    222e:	6823      	ldr	r3, [r4, #0]
    2230:	220c      	movs	r2, #12
    2232:	4313      	orrs	r3, r2
    2234:	6023      	str	r3, [r4, #0]
    2236:	e7c1      	b.n	21bc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2238:	0038      	movs	r0, r7
    223a:	4b3a      	ldr	r3, [pc, #232]	; (2324 <spi_init+0x1c4>)
    223c:	4798      	blx	r3
    223e:	e00a      	b.n	2256 <spi_init+0xf6>
    2240:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2242:	2c04      	cmp	r4, #4
    2244:	d010      	beq.n	2268 <spi_init+0x108>
    2246:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2248:	00a3      	lsls	r3, r4, #2
    224a:	aa02      	add	r2, sp, #8
    224c:	200c      	movs	r0, #12
    224e:	1812      	adds	r2, r2, r0
    2250:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2252:	2800      	cmp	r0, #0
    2254:	d0f0      	beq.n	2238 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    2256:	1c43      	adds	r3, r0, #1
    2258:	d0f2      	beq.n	2240 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    225a:	a904      	add	r1, sp, #16
    225c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    225e:	0c00      	lsrs	r0, r0, #16
    2260:	b2c0      	uxtb	r0, r0
    2262:	4b31      	ldr	r3, [pc, #196]	; (2328 <spi_init+0x1c8>)
    2264:	4798      	blx	r3
    2266:	e7eb      	b.n	2240 <spi_init+0xe0>
	module->mode             = config->mode;
    2268:	7833      	ldrb	r3, [r6, #0]
    226a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    226c:	7c33      	ldrb	r3, [r6, #16]
    226e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    2270:	7cb3      	ldrb	r3, [r6, #18]
    2272:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2274:	7d33      	ldrb	r3, [r6, #20]
    2276:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    2278:	2200      	movs	r2, #0
    227a:	ab02      	add	r3, sp, #8
    227c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    227e:	7833      	ldrb	r3, [r6, #0]
    2280:	2b01      	cmp	r3, #1
    2282:	d028      	beq.n	22d6 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    2284:	6873      	ldr	r3, [r6, #4]
    2286:	68b2      	ldr	r2, [r6, #8]
    2288:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    228a:	68f2      	ldr	r2, [r6, #12]
    228c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    228e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2290:	7c72      	ldrb	r2, [r6, #17]
    2292:	2a00      	cmp	r2, #0
    2294:	d103      	bne.n	229e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2296:	4a25      	ldr	r2, [pc, #148]	; (232c <spi_init+0x1cc>)
    2298:	7892      	ldrb	r2, [r2, #2]
    229a:	0792      	lsls	r2, r2, #30
    229c:	d501      	bpl.n	22a2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    229e:	2280      	movs	r2, #128	; 0x80
    22a0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    22a2:	7cb2      	ldrb	r2, [r6, #18]
    22a4:	2a00      	cmp	r2, #0
    22a6:	d002      	beq.n	22ae <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    22a8:	2280      	movs	r2, #128	; 0x80
    22aa:	0292      	lsls	r2, r2, #10
    22ac:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    22ae:	7cf2      	ldrb	r2, [r6, #19]
    22b0:	2a00      	cmp	r2, #0
    22b2:	d002      	beq.n	22ba <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    22b4:	2280      	movs	r2, #128	; 0x80
    22b6:	0092      	lsls	r2, r2, #2
    22b8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    22ba:	7d32      	ldrb	r2, [r6, #20]
    22bc:	2a00      	cmp	r2, #0
    22be:	d002      	beq.n	22c6 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    22c0:	2280      	movs	r2, #128	; 0x80
    22c2:	0192      	lsls	r2, r2, #6
    22c4:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    22c6:	683a      	ldr	r2, [r7, #0]
    22c8:	4313      	orrs	r3, r2
    22ca:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    22cc:	687b      	ldr	r3, [r7, #4]
    22ce:	430b      	orrs	r3, r1
    22d0:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    22d2:	2000      	movs	r0, #0
    22d4:	e74e      	b.n	2174 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22d6:	6828      	ldr	r0, [r5, #0]
    22d8:	4b0a      	ldr	r3, [pc, #40]	; (2304 <spi_init+0x1a4>)
    22da:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22dc:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    22de:	b2c0      	uxtb	r0, r0
    22e0:	4b13      	ldr	r3, [pc, #76]	; (2330 <spi_init+0x1d0>)
    22e2:	4798      	blx	r3
    22e4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    22e6:	ab02      	add	r3, sp, #8
    22e8:	1d9a      	adds	r2, r3, #6
    22ea:	69b0      	ldr	r0, [r6, #24]
    22ec:	4b11      	ldr	r3, [pc, #68]	; (2334 <spi_init+0x1d4>)
    22ee:	4798      	blx	r3
    22f0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    22f2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    22f4:	2b00      	cmp	r3, #0
    22f6:	d000      	beq.n	22fa <spi_init+0x19a>
    22f8:	e73c      	b.n	2174 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    22fa:	ab02      	add	r3, sp, #8
    22fc:	3306      	adds	r3, #6
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	733b      	strb	r3, [r7, #12]
    2302:	e7bf      	b.n	2284 <spi_init+0x124>
    2304:	00001f55 	.word	0x00001f55
    2308:	40000400 	.word	0x40000400
    230c:	0000344d 	.word	0x0000344d
    2310:	000033c1 	.word	0x000033c1
    2314:	00001d91 	.word	0x00001d91
    2318:	000025cd 	.word	0x000025cd
    231c:	00001f91 	.word	0x00001f91
    2320:	20000a34 	.word	0x20000a34
    2324:	00001ddd 	.word	0x00001ddd
    2328:	00003545 	.word	0x00003545
    232c:	41002000 	.word	0x41002000
    2330:	00003469 	.word	0x00003469
    2334:	00001cd3 	.word	0x00001cd3

00002338 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2338:	b5f0      	push	{r4, r5, r6, r7, lr}
    233a:	46d6      	mov	lr, sl
    233c:	4647      	mov	r7, r8
    233e:	b580      	push	{r7, lr}
    2340:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2342:	2438      	movs	r4, #56	; 0x38
    2344:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2346:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2348:	2d05      	cmp	r5, #5
    234a:	d002      	beq.n	2352 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    234c:	3412      	adds	r4, #18
	if (length == 0) {
    234e:	2a00      	cmp	r2, #0
    2350:	d105      	bne.n	235e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2352:	0020      	movs	r0, r4
    2354:	b003      	add	sp, #12
    2356:	bc0c      	pop	{r2, r3}
    2358:	4690      	mov	r8, r2
    235a:	469a      	mov	sl, r3
    235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    235e:	79c4      	ldrb	r4, [r0, #7]
    2360:	2c00      	cmp	r4, #0
    2362:	d144      	bne.n	23ee <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    2364:	341c      	adds	r4, #28
    2366:	e7f4      	b.n	2352 <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2368:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    236a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    236c:	423c      	tst	r4, r7
    236e:	d0fc      	beq.n	236a <spi_read_buffer_wait+0x32>
    2370:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2372:	423c      	tst	r4, r7
    2374:	d01a      	beq.n	23ac <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2376:	4644      	mov	r4, r8
    2378:	62ac      	str	r4, [r5, #40]	; 0x28
    237a:	e017      	b.n	23ac <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    237c:	7984      	ldrb	r4, [r0, #6]
    237e:	2c01      	cmp	r4, #1
    2380:	d026      	beq.n	23d0 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2382:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2384:	b2ec      	uxtb	r4, r5
    2386:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    2388:	9c01      	ldr	r4, [sp, #4]
    238a:	2c00      	cmp	r4, #0
    238c:	d13a      	bne.n	2404 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    238e:	1c75      	adds	r5, r6, #1
    2390:	b2ad      	uxth	r5, r5
    2392:	4664      	mov	r4, ip
    2394:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2396:	7984      	ldrb	r4, [r0, #6]
    2398:	2c01      	cmp	r4, #1
    239a:	d01e      	beq.n	23da <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    239c:	002e      	movs	r6, r5
	while (length--) {
    239e:	3a01      	subs	r2, #1
    23a0:	b292      	uxth	r2, r2
    23a2:	4552      	cmp	r2, sl
    23a4:	d01f      	beq.n	23e6 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    23a6:	7944      	ldrb	r4, [r0, #5]
    23a8:	2c01      	cmp	r4, #1
    23aa:	d0dd      	beq.n	2368 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    23ac:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    23ae:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    23b0:	421c      	tst	r4, r3
    23b2:	d0fc      	beq.n	23ae <spi_read_buffer_wait+0x76>
    23b4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    23b6:	421c      	tst	r4, r3
    23b8:	d017      	beq.n	23ea <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23ba:	8b6c      	ldrh	r4, [r5, #26]
    23bc:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    23be:	2400      	movs	r4, #0
    23c0:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23c2:	4664      	mov	r4, ip
    23c4:	421c      	tst	r4, r3
    23c6:	d0d9      	beq.n	237c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    23c8:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    23ca:	241e      	movs	r4, #30
    23cc:	9401      	str	r4, [sp, #4]
    23ce:	e7d5      	b.n	237c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    23d0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    23d2:	05e4      	lsls	r4, r4, #23
    23d4:	0de4      	lsrs	r4, r4, #23
    23d6:	46a4      	mov	ip, r4
    23d8:	e7d6      	b.n	2388 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    23da:	3602      	adds	r6, #2
    23dc:	b2b6      	uxth	r6, r6
    23de:	4664      	mov	r4, ip
    23e0:	0a24      	lsrs	r4, r4, #8
    23e2:	554c      	strb	r4, [r1, r5]
    23e4:	e7db      	b.n	239e <spi_read_buffer_wait+0x66>
    23e6:	9c01      	ldr	r4, [sp, #4]
    23e8:	e7b3      	b.n	2352 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    23ea:	2410      	movs	r4, #16
    23ec:	e7b1      	b.n	2352 <spi_read_buffer_wait+0x1a>
	while (length--) {
    23ee:	3a01      	subs	r2, #1
    23f0:	b292      	uxth	r2, r2
    23f2:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    23f4:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    23f6:	05db      	lsls	r3, r3, #23
    23f8:	0ddb      	lsrs	r3, r3, #23
    23fa:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    23fc:	2304      	movs	r3, #4
	while (length--) {
    23fe:	4c02      	ldr	r4, [pc, #8]	; (2408 <spi_read_buffer_wait+0xd0>)
    2400:	46a2      	mov	sl, r4
    2402:	e7d0      	b.n	23a6 <spi_read_buffer_wait+0x6e>
    2404:	9c01      	ldr	r4, [sp, #4]
    2406:	e7a4      	b.n	2352 <spi_read_buffer_wait+0x1a>
    2408:	0000ffff 	.word	0x0000ffff

0000240c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    240c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    240e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2410:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2412:	2c01      	cmp	r4, #1
    2414:	d001      	beq.n	241a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2416:	0018      	movs	r0, r3
    2418:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    241a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    241c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    241e:	2c00      	cmp	r4, #0
    2420:	d1f9      	bne.n	2416 <spi_select_slave+0xa>
		if (select) {
    2422:	2a00      	cmp	r2, #0
    2424:	d058      	beq.n	24d8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    2426:	784b      	ldrb	r3, [r1, #1]
    2428:	2b00      	cmp	r3, #0
    242a:	d044      	beq.n	24b6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    242c:	6803      	ldr	r3, [r0, #0]
    242e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2430:	07db      	lsls	r3, r3, #31
    2432:	d410      	bmi.n	2456 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2434:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2436:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2438:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    243a:	2900      	cmp	r1, #0
    243c:	d104      	bne.n	2448 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    243e:	0953      	lsrs	r3, r2, #5
    2440:	01db      	lsls	r3, r3, #7
    2442:	492e      	ldr	r1, [pc, #184]	; (24fc <spi_select_slave+0xf0>)
    2444:	468c      	mov	ip, r1
    2446:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2448:	211f      	movs	r1, #31
    244a:	4011      	ands	r1, r2
    244c:	2201      	movs	r2, #1
    244e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2450:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2452:	2305      	movs	r3, #5
    2454:	e7df      	b.n	2416 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2456:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2458:	09d4      	lsrs	r4, r2, #7
		return NULL;
    245a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    245c:	2c00      	cmp	r4, #0
    245e:	d104      	bne.n	246a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2460:	0953      	lsrs	r3, r2, #5
    2462:	01db      	lsls	r3, r3, #7
    2464:	4c25      	ldr	r4, [pc, #148]	; (24fc <spi_select_slave+0xf0>)
    2466:	46a4      	mov	ip, r4
    2468:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    246a:	241f      	movs	r4, #31
    246c:	4014      	ands	r4, r2
    246e:	2201      	movs	r2, #1
    2470:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2472:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2474:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2476:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2478:	07d2      	lsls	r2, r2, #31
    247a:	d501      	bpl.n	2480 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    247c:	788a      	ldrb	r2, [r1, #2]
    247e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2480:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2482:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2484:	2a00      	cmp	r2, #0
    2486:	d1c6      	bne.n	2416 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2488:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    248a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    248c:	7e13      	ldrb	r3, [r2, #24]
    248e:	420b      	tst	r3, r1
    2490:	d0fc      	beq.n	248c <spi_select_slave+0x80>
    2492:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2494:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    2496:	0749      	lsls	r1, r1, #29
    2498:	d5bd      	bpl.n	2416 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    249a:	8b53      	ldrh	r3, [r2, #26]
    249c:	075b      	lsls	r3, r3, #29
    249e:	d501      	bpl.n	24a4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    24a0:	2304      	movs	r3, #4
    24a2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24a4:	7983      	ldrb	r3, [r0, #6]
    24a6:	2b01      	cmp	r3, #1
    24a8:	d002      	beq.n	24b0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24ac:	2300      	movs	r3, #0
    24ae:	e7b2      	b.n	2416 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    24b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24b2:	2300      	movs	r3, #0
    24b4:	e7af      	b.n	2416 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    24b6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24b8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24bc:	2900      	cmp	r1, #0
    24be:	d104      	bne.n	24ca <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    24c0:	0953      	lsrs	r3, r2, #5
    24c2:	01db      	lsls	r3, r3, #7
    24c4:	490d      	ldr	r1, [pc, #52]	; (24fc <spi_select_slave+0xf0>)
    24c6:	468c      	mov	ip, r1
    24c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24ca:	211f      	movs	r1, #31
    24cc:	4011      	ands	r1, r2
    24ce:	2201      	movs	r2, #1
    24d0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    24d2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    24d4:	2300      	movs	r3, #0
    24d6:	e79e      	b.n	2416 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    24d8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24da:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24de:	2900      	cmp	r1, #0
    24e0:	d104      	bne.n	24ec <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    24e2:	0953      	lsrs	r3, r2, #5
    24e4:	01db      	lsls	r3, r3, #7
    24e6:	4905      	ldr	r1, [pc, #20]	; (24fc <spi_select_slave+0xf0>)
    24e8:	468c      	mov	ip, r1
    24ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24ec:	211f      	movs	r1, #31
    24ee:	4011      	ands	r1, r2
    24f0:	2201      	movs	r2, #1
    24f2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    24f4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    24f6:	2300      	movs	r3, #0
    24f8:	e78d      	b.n	2416 <spi_select_slave+0xa>
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	41004400 	.word	0x41004400

00002500 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2500:	b5f0      	push	{r4, r5, r6, r7, lr}
    2502:	46de      	mov	lr, fp
    2504:	4657      	mov	r7, sl
    2506:	464e      	mov	r6, r9
    2508:	4645      	mov	r5, r8
    250a:	b5e0      	push	{r5, r6, r7, lr}
    250c:	b083      	sub	sp, #12
    250e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2510:	2338      	movs	r3, #56	; 0x38
    2512:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2514:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2516:	2c05      	cmp	r4, #5
    2518:	d002      	beq.n	2520 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    251a:	3312      	adds	r3, #18
	if (length == 0) {
    251c:	2a00      	cmp	r2, #0
    251e:	d14b      	bne.n	25b8 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    2520:	0018      	movs	r0, r3
    2522:	b003      	add	sp, #12
    2524:	bc3c      	pop	{r2, r3, r4, r5}
    2526:	4690      	mov	r8, r2
    2528:	4699      	mov	r9, r3
    252a:	46a2      	mov	sl, r4
    252c:	46ab      	mov	fp, r5
    252e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    2530:	3702      	adds	r7, #2
    2532:	b2bf      	uxth	r7, r7
    2534:	4641      	mov	r1, r8
    2536:	4653      	mov	r3, sl
    2538:	5c59      	ldrb	r1, [r3, r1]
    253a:	0209      	lsls	r1, r1, #8
    253c:	465b      	mov	r3, fp
    253e:	430b      	orrs	r3, r1
    2540:	e018      	b.n	2574 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2542:	7983      	ldrb	r3, [r0, #6]
    2544:	2b01      	cmp	r3, #1
    2546:	d02a      	beq.n	259e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2548:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    254a:	3e01      	subs	r6, #1
    254c:	b2b6      	uxth	r6, r6
    254e:	4566      	cmp	r6, ip
    2550:	d027      	beq.n	25a2 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2552:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2554:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    2556:	4223      	tst	r3, r4
    2558:	d0fc      	beq.n	2554 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    255a:	1c7b      	adds	r3, r7, #1
    255c:	b29b      	uxth	r3, r3
    255e:	4698      	mov	r8, r3
    2560:	4653      	mov	r3, sl
    2562:	5ddb      	ldrb	r3, [r3, r7]
    2564:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2566:	7981      	ldrb	r1, [r0, #6]
    2568:	2901      	cmp	r1, #1
    256a:	d0e1      	beq.n	2530 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    256c:	4669      	mov	r1, sp
    256e:	80cb      	strh	r3, [r1, #6]
    2570:	88cb      	ldrh	r3, [r1, #6]
    2572:	4647      	mov	r7, r8
    2574:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    2576:	4221      	tst	r1, r4
    2578:	d002      	beq.n	2580 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    257a:	05db      	lsls	r3, r3, #23
    257c:	0ddb      	lsrs	r3, r3, #23
    257e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    2580:	79c3      	ldrb	r3, [r0, #7]
    2582:	2b00      	cmp	r3, #0
    2584:	d0e1      	beq.n	254a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2586:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2588:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    258a:	422b      	tst	r3, r5
    258c:	d0fc      	beq.n	2588 <spi_write_buffer_wait+0x88>
    258e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    2590:	422b      	tst	r3, r5
    2592:	d0da      	beq.n	254a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2594:	8b53      	ldrh	r3, [r2, #26]
    2596:	422b      	tst	r3, r5
    2598:	d0d3      	beq.n	2542 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    259a:	8355      	strh	r5, [r2, #26]
    259c:	e7d1      	b.n	2542 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    259e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    25a0:	e7d3      	b.n	254a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    25a2:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    25a4:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    25a6:	2a01      	cmp	r2, #1
    25a8:	d1ba      	bne.n	2520 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25aa:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    25ac:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    25ae:	7e0b      	ldrb	r3, [r1, #24]
    25b0:	4213      	tst	r3, r2
    25b2:	d0fc      	beq.n	25ae <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    25b4:	2300      	movs	r3, #0
    25b6:	e7b3      	b.n	2520 <spi_write_buffer_wait+0x20>
	while (length--) {
    25b8:	3a01      	subs	r2, #1
    25ba:	b296      	uxth	r6, r2
    25bc:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    25be:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    25c0:	2504      	movs	r5, #4
	while (length--) {
    25c2:	4b01      	ldr	r3, [pc, #4]	; (25c8 <spi_write_buffer_wait+0xc8>)
    25c4:	469c      	mov	ip, r3
    25c6:	e7c4      	b.n	2552 <spi_write_buffer_wait+0x52>
    25c8:	0000ffff 	.word	0x0000ffff

000025cc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    25cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    25ce:	0080      	lsls	r0, r0, #2
    25d0:	4b70      	ldr	r3, [pc, #448]	; (2794 <_spi_interrupt_handler+0x1c8>)
    25d2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    25d4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    25d6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    25d8:	5ce7      	ldrb	r7, [r4, r3]
    25da:	2236      	movs	r2, #54	; 0x36
    25dc:	5ca2      	ldrb	r2, [r4, r2]
    25de:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    25e0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    25e2:	7db5      	ldrb	r5, [r6, #22]
    25e4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    25e6:	07eb      	lsls	r3, r5, #31
    25e8:	d502      	bpl.n	25f0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    25ea:	7963      	ldrb	r3, [r4, #5]
    25ec:	2b01      	cmp	r3, #1
    25ee:	d01e      	beq.n	262e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    25f0:	076b      	lsls	r3, r5, #29
    25f2:	d511      	bpl.n	2618 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25f4:	8b73      	ldrh	r3, [r6, #26]
    25f6:	075b      	lsls	r3, r3, #29
    25f8:	d55a      	bpl.n	26b0 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    25fa:	7a63      	ldrb	r3, [r4, #9]
    25fc:	2b01      	cmp	r3, #1
    25fe:	d008      	beq.n	2612 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2600:	221e      	movs	r2, #30
    2602:	2338      	movs	r3, #56	; 0x38
    2604:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2606:	3b35      	subs	r3, #53	; 0x35
    2608:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    260a:	3302      	adds	r3, #2
    260c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    260e:	073b      	lsls	r3, r7, #28
    2610:	d44a      	bmi.n	26a8 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2612:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2614:	2304      	movs	r3, #4
    2616:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2618:	07ab      	lsls	r3, r5, #30
    261a:	d503      	bpl.n	2624 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    261c:	7963      	ldrb	r3, [r4, #5]
    261e:	2b01      	cmp	r3, #1
    2620:	d100      	bne.n	2624 <_spi_interrupt_handler+0x58>
    2622:	e097      	b.n	2754 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2624:	b26d      	sxtb	r5, r5
    2626:	2d00      	cmp	r5, #0
    2628:	da00      	bge.n	262c <_spi_interrupt_handler+0x60>
    262a:	e0a9      	b.n	2780 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    262e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2630:	2b00      	cmp	r3, #0
    2632:	d022      	beq.n	267a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    2634:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2636:	2b00      	cmp	r3, #0
    2638:	d0da      	beq.n	25f0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    263a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    263c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    263e:	7813      	ldrb	r3, [r2, #0]
    2640:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    2642:	1c50      	adds	r0, r2, #1
    2644:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2646:	79a0      	ldrb	r0, [r4, #6]
    2648:	2801      	cmp	r0, #1
    264a:	d027      	beq.n	269c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    264c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    264e:	05db      	lsls	r3, r3, #23
    2650:	0ddb      	lsrs	r3, r3, #23
    2652:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    2654:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2656:	3b01      	subs	r3, #1
    2658:	b29b      	uxth	r3, r3
    265a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    265c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    265e:	b29b      	uxth	r3, r3
    2660:	2b00      	cmp	r3, #0
    2662:	d1c5      	bne.n	25f0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2664:	3301      	adds	r3, #1
    2666:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    2668:	7a63      	ldrb	r3, [r4, #9]
    266a:	2b01      	cmp	r3, #1
    266c:	d1c0      	bne.n	25f0 <_spi_interrupt_handler+0x24>
    266e:	79e3      	ldrb	r3, [r4, #7]
    2670:	2b00      	cmp	r3, #0
    2672:	d1bd      	bne.n	25f0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2674:	3302      	adds	r3, #2
    2676:	75b3      	strb	r3, [r6, #22]
    2678:	e7ba      	b.n	25f0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    267a:	4b47      	ldr	r3, [pc, #284]	; (2798 <_spi_interrupt_handler+0x1cc>)
    267c:	881b      	ldrh	r3, [r3, #0]
    267e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2680:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2682:	3b01      	subs	r3, #1
    2684:	b29b      	uxth	r3, r3
    2686:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2688:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    268a:	b29b      	uxth	r3, r3
    268c:	2b00      	cmp	r3, #0
    268e:	d101      	bne.n	2694 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2690:	3301      	adds	r3, #1
    2692:	7533      	strb	r3, [r6, #20]
		if (0
    2694:	7963      	ldrb	r3, [r4, #5]
    2696:	2b01      	cmp	r3, #1
    2698:	d0cc      	beq.n	2634 <_spi_interrupt_handler+0x68>
    269a:	e7a9      	b.n	25f0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    269c:	7850      	ldrb	r0, [r2, #1]
    269e:	0200      	lsls	r0, r0, #8
    26a0:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    26a2:	3202      	adds	r2, #2
    26a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    26a6:	e7d2      	b.n	264e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    26a8:	0020      	movs	r0, r4
    26aa:	69a3      	ldr	r3, [r4, #24]
    26ac:	4798      	blx	r3
    26ae:	e7b0      	b.n	2612 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    26b0:	7a63      	ldrb	r3, [r4, #9]
    26b2:	2b01      	cmp	r3, #1
    26b4:	d028      	beq.n	2708 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    26b6:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    26b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26ba:	05db      	lsls	r3, r3, #23
    26bc:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    26be:	b2da      	uxtb	r2, r3
    26c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    26c2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    26c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    26c6:	1c51      	adds	r1, r2, #1
    26c8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26ca:	79a1      	ldrb	r1, [r4, #6]
    26cc:	2901      	cmp	r1, #1
    26ce:	d034      	beq.n	273a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    26d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26d2:	3b01      	subs	r3, #1
    26d4:	b29b      	uxth	r3, r3
    26d6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    26d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26da:	b29b      	uxth	r3, r3
    26dc:	2b00      	cmp	r3, #0
    26de:	d000      	beq.n	26e2 <_spi_interrupt_handler+0x116>
    26e0:	e79a      	b.n	2618 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    26e2:	2200      	movs	r2, #0
    26e4:	3338      	adds	r3, #56	; 0x38
    26e6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    26e8:	3b34      	subs	r3, #52	; 0x34
    26ea:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    26ec:	7a63      	ldrb	r3, [r4, #9]
    26ee:	2b02      	cmp	r3, #2
    26f0:	d029      	beq.n	2746 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    26f2:	7a63      	ldrb	r3, [r4, #9]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d000      	beq.n	26fa <_spi_interrupt_handler+0x12e>
    26f8:	e78e      	b.n	2618 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    26fa:	07bb      	lsls	r3, r7, #30
    26fc:	d400      	bmi.n	2700 <_spi_interrupt_handler+0x134>
    26fe:	e78b      	b.n	2618 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2700:	0020      	movs	r0, r4
    2702:	6923      	ldr	r3, [r4, #16]
    2704:	4798      	blx	r3
    2706:	e787      	b.n	2618 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2708:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    270c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    270e:	3b01      	subs	r3, #1
    2710:	b29b      	uxth	r3, r3
    2712:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    2714:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2716:	b29b      	uxth	r3, r3
    2718:	2b00      	cmp	r3, #0
    271a:	d000      	beq.n	271e <_spi_interrupt_handler+0x152>
    271c:	e77c      	b.n	2618 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    271e:	3304      	adds	r3, #4
    2720:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    2722:	2200      	movs	r2, #0
    2724:	3334      	adds	r3, #52	; 0x34
    2726:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2728:	3b35      	subs	r3, #53	; 0x35
    272a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    272c:	07fb      	lsls	r3, r7, #31
    272e:	d400      	bmi.n	2732 <_spi_interrupt_handler+0x166>
    2730:	e772      	b.n	2618 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2732:	0020      	movs	r0, r4
    2734:	68e3      	ldr	r3, [r4, #12]
    2736:	4798      	blx	r3
    2738:	e76e      	b.n	2618 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    273a:	0a1b      	lsrs	r3, r3, #8
    273c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    273e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2740:	3301      	adds	r3, #1
    2742:	62a3      	str	r3, [r4, #40]	; 0x28
    2744:	e7c4      	b.n	26d0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2746:	077b      	lsls	r3, r7, #29
    2748:	d400      	bmi.n	274c <_spi_interrupt_handler+0x180>
    274a:	e765      	b.n	2618 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    274c:	0020      	movs	r0, r4
    274e:	6963      	ldr	r3, [r4, #20]
    2750:	4798      	blx	r3
    2752:	e761      	b.n	2618 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2754:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2756:	2b01      	cmp	r3, #1
    2758:	d000      	beq.n	275c <_spi_interrupt_handler+0x190>
    275a:	e763      	b.n	2624 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    275c:	79e3      	ldrb	r3, [r4, #7]
    275e:	2b00      	cmp	r3, #0
    2760:	d000      	beq.n	2764 <_spi_interrupt_handler+0x198>
    2762:	e75f      	b.n	2624 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2764:	3302      	adds	r3, #2
    2766:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    2768:	3301      	adds	r3, #1
    276a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    276c:	2200      	movs	r2, #0
    276e:	3335      	adds	r3, #53	; 0x35
    2770:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2772:	07fb      	lsls	r3, r7, #31
    2774:	d400      	bmi.n	2778 <_spi_interrupt_handler+0x1ac>
    2776:	e755      	b.n	2624 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2778:	0020      	movs	r0, r4
    277a:	68e3      	ldr	r3, [r4, #12]
    277c:	4798      	blx	r3
    277e:	e751      	b.n	2624 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2780:	2380      	movs	r3, #128	; 0x80
    2782:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2784:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2786:	067b      	lsls	r3, r7, #25
    2788:	d400      	bmi.n	278c <_spi_interrupt_handler+0x1c0>
    278a:	e74f      	b.n	262c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    278c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    278e:	0020      	movs	r0, r4
    2790:	4798      	blx	r3
}
    2792:	e74b      	b.n	262c <_spi_interrupt_handler+0x60>
    2794:	20000a34 	.word	0x20000a34
    2798:	20000a4c 	.word	0x20000a4c

0000279c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    279c:	b5f0      	push	{r4, r5, r6, r7, lr}
    279e:	46de      	mov	lr, fp
    27a0:	4657      	mov	r7, sl
    27a2:	464e      	mov	r6, r9
    27a4:	4645      	mov	r5, r8
    27a6:	b5e0      	push	{r5, r6, r7, lr}
    27a8:	b091      	sub	sp, #68	; 0x44
    27aa:	0005      	movs	r5, r0
    27ac:	000c      	movs	r4, r1
    27ae:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    27b0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27b2:	0008      	movs	r0, r1
    27b4:	4bbc      	ldr	r3, [pc, #752]	; (2aa8 <usart_init+0x30c>)
    27b6:	4798      	blx	r3
    27b8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27ba:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    27bc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27be:	07db      	lsls	r3, r3, #31
    27c0:	d506      	bpl.n	27d0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    27c2:	b011      	add	sp, #68	; 0x44
    27c4:	bc3c      	pop	{r2, r3, r4, r5}
    27c6:	4690      	mov	r8, r2
    27c8:	4699      	mov	r9, r3
    27ca:	46a2      	mov	sl, r4
    27cc:	46ab      	mov	fp, r5
    27ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    27d0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    27d2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    27d4:	079b      	lsls	r3, r3, #30
    27d6:	d4f4      	bmi.n	27c2 <usart_init+0x26>
    27d8:	49b4      	ldr	r1, [pc, #720]	; (2aac <usart_init+0x310>)
    27da:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    27dc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    27de:	2301      	movs	r3, #1
    27e0:	40bb      	lsls	r3, r7
    27e2:	4303      	orrs	r3, r0
    27e4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    27e6:	a90f      	add	r1, sp, #60	; 0x3c
    27e8:	272d      	movs	r7, #45	; 0x2d
    27ea:	5df3      	ldrb	r3, [r6, r7]
    27ec:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27ee:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    27f0:	b2d3      	uxtb	r3, r2
    27f2:	9302      	str	r3, [sp, #8]
    27f4:	0018      	movs	r0, r3
    27f6:	4bae      	ldr	r3, [pc, #696]	; (2ab0 <usart_init+0x314>)
    27f8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    27fa:	9802      	ldr	r0, [sp, #8]
    27fc:	4bad      	ldr	r3, [pc, #692]	; (2ab4 <usart_init+0x318>)
    27fe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2800:	5df0      	ldrb	r0, [r6, r7]
    2802:	2100      	movs	r1, #0
    2804:	4bac      	ldr	r3, [pc, #688]	; (2ab8 <usart_init+0x31c>)
    2806:	4798      	blx	r3
	module->character_size = config->character_size;
    2808:	7af3      	ldrb	r3, [r6, #11]
    280a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    280c:	2324      	movs	r3, #36	; 0x24
    280e:	5cf3      	ldrb	r3, [r6, r3]
    2810:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2812:	2325      	movs	r3, #37	; 0x25
    2814:	5cf3      	ldrb	r3, [r6, r3]
    2816:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2818:	7ef3      	ldrb	r3, [r6, #27]
    281a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    281c:	7f33      	ldrb	r3, [r6, #28]
    281e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2820:	682b      	ldr	r3, [r5, #0]
    2822:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2824:	0018      	movs	r0, r3
    2826:	4ba0      	ldr	r3, [pc, #640]	; (2aa8 <usart_init+0x30c>)
    2828:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    282a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    282c:	2200      	movs	r2, #0
    282e:	230e      	movs	r3, #14
    2830:	a906      	add	r1, sp, #24
    2832:	468c      	mov	ip, r1
    2834:	4463      	add	r3, ip
    2836:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2838:	8a32      	ldrh	r2, [r6, #16]
    283a:	9202      	str	r2, [sp, #8]
    283c:	2380      	movs	r3, #128	; 0x80
    283e:	01db      	lsls	r3, r3, #7
    2840:	429a      	cmp	r2, r3
    2842:	d100      	bne.n	2846 <usart_init+0xaa>
    2844:	e09e      	b.n	2984 <usart_init+0x1e8>
    2846:	d90f      	bls.n	2868 <usart_init+0xcc>
    2848:	23c0      	movs	r3, #192	; 0xc0
    284a:	01db      	lsls	r3, r3, #7
    284c:	9a02      	ldr	r2, [sp, #8]
    284e:	429a      	cmp	r2, r3
    2850:	d100      	bne.n	2854 <usart_init+0xb8>
    2852:	e092      	b.n	297a <usart_init+0x1de>
    2854:	2380      	movs	r3, #128	; 0x80
    2856:	021b      	lsls	r3, r3, #8
    2858:	429a      	cmp	r2, r3
    285a:	d000      	beq.n	285e <usart_init+0xc2>
    285c:	e11f      	b.n	2a9e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    285e:	2303      	movs	r3, #3
    2860:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2862:	2300      	movs	r3, #0
    2864:	9307      	str	r3, [sp, #28]
    2866:	e008      	b.n	287a <usart_init+0xde>
	switch (config->sample_rate) {
    2868:	2380      	movs	r3, #128	; 0x80
    286a:	019b      	lsls	r3, r3, #6
    286c:	429a      	cmp	r2, r3
    286e:	d000      	beq.n	2872 <usart_init+0xd6>
    2870:	e115      	b.n	2a9e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2872:	2310      	movs	r3, #16
    2874:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2876:	3b0f      	subs	r3, #15
    2878:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    287a:	6833      	ldr	r3, [r6, #0]
    287c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    287e:	68f3      	ldr	r3, [r6, #12]
    2880:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2882:	6973      	ldr	r3, [r6, #20]
    2884:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2886:	7e33      	ldrb	r3, [r6, #24]
    2888:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    288a:	2326      	movs	r3, #38	; 0x26
    288c:	5cf3      	ldrb	r3, [r6, r3]
    288e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2890:	6873      	ldr	r3, [r6, #4]
    2892:	4699      	mov	r9, r3
	switch (transfer_mode)
    2894:	2b00      	cmp	r3, #0
    2896:	d100      	bne.n	289a <usart_init+0xfe>
    2898:	e0a0      	b.n	29dc <usart_init+0x240>
    289a:	2380      	movs	r3, #128	; 0x80
    289c:	055b      	lsls	r3, r3, #21
    289e:	4599      	cmp	r9, r3
    28a0:	d100      	bne.n	28a4 <usart_init+0x108>
    28a2:	e084      	b.n	29ae <usart_init+0x212>
	if(config->encoding_format_enable) {
    28a4:	7e73      	ldrb	r3, [r6, #25]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d002      	beq.n	28b0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    28aa:	7eb3      	ldrb	r3, [r6, #26]
    28ac:	4642      	mov	r2, r8
    28ae:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28b0:	682a      	ldr	r2, [r5, #0]
    28b2:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    28b4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28b6:	2b00      	cmp	r3, #0
    28b8:	d1fc      	bne.n	28b4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    28ba:	330e      	adds	r3, #14
    28bc:	aa06      	add	r2, sp, #24
    28be:	4694      	mov	ip, r2
    28c0:	4463      	add	r3, ip
    28c2:	881b      	ldrh	r3, [r3, #0]
    28c4:	4642      	mov	r2, r8
    28c6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    28c8:	9b05      	ldr	r3, [sp, #20]
    28ca:	9a03      	ldr	r2, [sp, #12]
    28cc:	4313      	orrs	r3, r2
    28ce:	9a04      	ldr	r2, [sp, #16]
    28d0:	4313      	orrs	r3, r2
    28d2:	464a      	mov	r2, r9
    28d4:	4313      	orrs	r3, r2
    28d6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    28d8:	465b      	mov	r3, fp
    28da:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    28dc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    28de:	4653      	mov	r3, sl
    28e0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    28e2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    28e4:	2327      	movs	r3, #39	; 0x27
    28e6:	5cf3      	ldrb	r3, [r6, r3]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d101      	bne.n	28f0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    28ec:	3304      	adds	r3, #4
    28ee:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    28f0:	7e73      	ldrb	r3, [r6, #25]
    28f2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    28f4:	7f32      	ldrb	r2, [r6, #28]
    28f6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    28f8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    28fa:	7f72      	ldrb	r2, [r6, #29]
    28fc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    28fe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2900:	2224      	movs	r2, #36	; 0x24
    2902:	5cb2      	ldrb	r2, [r6, r2]
    2904:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2906:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2908:	2225      	movs	r2, #37	; 0x25
    290a:	5cb2      	ldrb	r2, [r6, r2]
    290c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    290e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2910:	7ab1      	ldrb	r1, [r6, #10]
    2912:	7af2      	ldrb	r2, [r6, #11]
    2914:	4311      	orrs	r1, r2
    2916:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2918:	8933      	ldrh	r3, [r6, #8]
    291a:	2bff      	cmp	r3, #255	; 0xff
    291c:	d100      	bne.n	2920 <usart_init+0x184>
    291e:	e081      	b.n	2a24 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2920:	2280      	movs	r2, #128	; 0x80
    2922:	0452      	lsls	r2, r2, #17
    2924:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2926:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2928:	232c      	movs	r3, #44	; 0x2c
    292a:	5cf3      	ldrb	r3, [r6, r3]
    292c:	2b00      	cmp	r3, #0
    292e:	d103      	bne.n	2938 <usart_init+0x19c>
    2930:	4b62      	ldr	r3, [pc, #392]	; (2abc <usart_init+0x320>)
    2932:	789b      	ldrb	r3, [r3, #2]
    2934:	079b      	lsls	r3, r3, #30
    2936:	d501      	bpl.n	293c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2938:	2380      	movs	r3, #128	; 0x80
    293a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    293c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    293e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2940:	2b00      	cmp	r3, #0
    2942:	d1fc      	bne.n	293e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2944:	4643      	mov	r3, r8
    2946:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2948:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    294a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    294c:	2b00      	cmp	r3, #0
    294e:	d1fc      	bne.n	294a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2950:	4643      	mov	r3, r8
    2952:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2954:	ab0e      	add	r3, sp, #56	; 0x38
    2956:	2280      	movs	r2, #128	; 0x80
    2958:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    295a:	2200      	movs	r2, #0
    295c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    295e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2960:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2962:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2964:	930a      	str	r3, [sp, #40]	; 0x28
    2966:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2968:	930b      	str	r3, [sp, #44]	; 0x2c
    296a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    296c:	930c      	str	r3, [sp, #48]	; 0x30
    296e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2970:	9302      	str	r3, [sp, #8]
    2972:	930d      	str	r3, [sp, #52]	; 0x34
    2974:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2976:	ae0a      	add	r6, sp, #40	; 0x28
    2978:	e063      	b.n	2a42 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    297a:	2308      	movs	r3, #8
    297c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    297e:	3b07      	subs	r3, #7
    2980:	9307      	str	r3, [sp, #28]
    2982:	e77a      	b.n	287a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2984:	6833      	ldr	r3, [r6, #0]
    2986:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2988:	68f3      	ldr	r3, [r6, #12]
    298a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    298c:	6973      	ldr	r3, [r6, #20]
    298e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2990:	7e33      	ldrb	r3, [r6, #24]
    2992:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2994:	2326      	movs	r3, #38	; 0x26
    2996:	5cf3      	ldrb	r3, [r6, r3]
    2998:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    299a:	6873      	ldr	r3, [r6, #4]
    299c:	4699      	mov	r9, r3
	switch (transfer_mode)
    299e:	2b00      	cmp	r3, #0
    29a0:	d018      	beq.n	29d4 <usart_init+0x238>
    29a2:	2380      	movs	r3, #128	; 0x80
    29a4:	055b      	lsls	r3, r3, #21
    29a6:	4599      	cmp	r9, r3
    29a8:	d001      	beq.n	29ae <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    29aa:	2000      	movs	r0, #0
    29ac:	e025      	b.n	29fa <usart_init+0x25e>
			if (!config->use_external_clock) {
    29ae:	2327      	movs	r3, #39	; 0x27
    29b0:	5cf3      	ldrb	r3, [r6, r3]
    29b2:	2b00      	cmp	r3, #0
    29b4:	d000      	beq.n	29b8 <usart_init+0x21c>
    29b6:	e775      	b.n	28a4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    29b8:	6a33      	ldr	r3, [r6, #32]
    29ba:	001f      	movs	r7, r3
    29bc:	b2c0      	uxtb	r0, r0
    29be:	4b40      	ldr	r3, [pc, #256]	; (2ac0 <usart_init+0x324>)
    29c0:	4798      	blx	r3
    29c2:	0001      	movs	r1, r0
    29c4:	220e      	movs	r2, #14
    29c6:	ab06      	add	r3, sp, #24
    29c8:	469c      	mov	ip, r3
    29ca:	4462      	add	r2, ip
    29cc:	0038      	movs	r0, r7
    29ce:	4b3d      	ldr	r3, [pc, #244]	; (2ac4 <usart_init+0x328>)
    29d0:	4798      	blx	r3
    29d2:	e012      	b.n	29fa <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    29d4:	2308      	movs	r3, #8
    29d6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    29d8:	2300      	movs	r3, #0
    29da:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    29dc:	2327      	movs	r3, #39	; 0x27
    29de:	5cf3      	ldrb	r3, [r6, r3]
    29e0:	2b00      	cmp	r3, #0
    29e2:	d00e      	beq.n	2a02 <usart_init+0x266>
				status_code =
    29e4:	9b06      	ldr	r3, [sp, #24]
    29e6:	9300      	str	r3, [sp, #0]
    29e8:	9b07      	ldr	r3, [sp, #28]
    29ea:	220e      	movs	r2, #14
    29ec:	a906      	add	r1, sp, #24
    29ee:	468c      	mov	ip, r1
    29f0:	4462      	add	r2, ip
    29f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    29f4:	6a30      	ldr	r0, [r6, #32]
    29f6:	4f34      	ldr	r7, [pc, #208]	; (2ac8 <usart_init+0x32c>)
    29f8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    29fa:	2800      	cmp	r0, #0
    29fc:	d000      	beq.n	2a00 <usart_init+0x264>
    29fe:	e6e0      	b.n	27c2 <usart_init+0x26>
    2a00:	e750      	b.n	28a4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2a02:	6a33      	ldr	r3, [r6, #32]
    2a04:	001f      	movs	r7, r3
    2a06:	b2c0      	uxtb	r0, r0
    2a08:	4b2d      	ldr	r3, [pc, #180]	; (2ac0 <usart_init+0x324>)
    2a0a:	4798      	blx	r3
    2a0c:	0001      	movs	r1, r0
				status_code =
    2a0e:	9b06      	ldr	r3, [sp, #24]
    2a10:	9300      	str	r3, [sp, #0]
    2a12:	9b07      	ldr	r3, [sp, #28]
    2a14:	220e      	movs	r2, #14
    2a16:	a806      	add	r0, sp, #24
    2a18:	4684      	mov	ip, r0
    2a1a:	4462      	add	r2, ip
    2a1c:	0038      	movs	r0, r7
    2a1e:	4f2a      	ldr	r7, [pc, #168]	; (2ac8 <usart_init+0x32c>)
    2a20:	47b8      	blx	r7
    2a22:	e7ea      	b.n	29fa <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2a24:	7ef3      	ldrb	r3, [r6, #27]
    2a26:	2b00      	cmp	r3, #0
    2a28:	d100      	bne.n	2a2c <usart_init+0x290>
    2a2a:	e77d      	b.n	2928 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2a2c:	2380      	movs	r3, #128	; 0x80
    2a2e:	04db      	lsls	r3, r3, #19
    2a30:	431f      	orrs	r7, r3
    2a32:	e779      	b.n	2928 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2a34:	0020      	movs	r0, r4
    2a36:	4b25      	ldr	r3, [pc, #148]	; (2acc <usart_init+0x330>)
    2a38:	4798      	blx	r3
    2a3a:	e007      	b.n	2a4c <usart_init+0x2b0>
    2a3c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2a3e:	2f04      	cmp	r7, #4
    2a40:	d00d      	beq.n	2a5e <usart_init+0x2c2>
    2a42:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a44:	00bb      	lsls	r3, r7, #2
    2a46:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2a48:	2800      	cmp	r0, #0
    2a4a:	d0f3      	beq.n	2a34 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2a4c:	1c43      	adds	r3, r0, #1
    2a4e:	d0f5      	beq.n	2a3c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2a50:	a90e      	add	r1, sp, #56	; 0x38
    2a52:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2a54:	0c00      	lsrs	r0, r0, #16
    2a56:	b2c0      	uxtb	r0, r0
    2a58:	4b1d      	ldr	r3, [pc, #116]	; (2ad0 <usart_init+0x334>)
    2a5a:	4798      	blx	r3
    2a5c:	e7ee      	b.n	2a3c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2a5e:	2300      	movs	r3, #0
    2a60:	60eb      	str	r3, [r5, #12]
    2a62:	612b      	str	r3, [r5, #16]
    2a64:	616b      	str	r3, [r5, #20]
    2a66:	61ab      	str	r3, [r5, #24]
    2a68:	61eb      	str	r3, [r5, #28]
    2a6a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2a6c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2a6e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2a70:	2200      	movs	r2, #0
    2a72:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2a74:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2a76:	3330      	adds	r3, #48	; 0x30
    2a78:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2a7a:	3301      	adds	r3, #1
    2a7c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2a7e:	3301      	adds	r3, #1
    2a80:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2a82:	3301      	adds	r3, #1
    2a84:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2a86:	6828      	ldr	r0, [r5, #0]
    2a88:	4b07      	ldr	r3, [pc, #28]	; (2aa8 <usart_init+0x30c>)
    2a8a:	4798      	blx	r3
    2a8c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2a8e:	4911      	ldr	r1, [pc, #68]	; (2ad4 <usart_init+0x338>)
    2a90:	4b11      	ldr	r3, [pc, #68]	; (2ad8 <usart_init+0x33c>)
    2a92:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2a94:	00a4      	lsls	r4, r4, #2
    2a96:	4b11      	ldr	r3, [pc, #68]	; (2adc <usart_init+0x340>)
    2a98:	50e5      	str	r5, [r4, r3]
	return status_code;
    2a9a:	2000      	movs	r0, #0
    2a9c:	e691      	b.n	27c2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2a9e:	2310      	movs	r3, #16
    2aa0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2aa2:	2300      	movs	r3, #0
    2aa4:	9307      	str	r3, [sp, #28]
    2aa6:	e6e8      	b.n	287a <usart_init+0xde>
    2aa8:	00001f55 	.word	0x00001f55
    2aac:	40000400 	.word	0x40000400
    2ab0:	0000344d 	.word	0x0000344d
    2ab4:	000033c1 	.word	0x000033c1
    2ab8:	00001d91 	.word	0x00001d91
    2abc:	41002000 	.word	0x41002000
    2ac0:	00003469 	.word	0x00003469
    2ac4:	00001cd3 	.word	0x00001cd3
    2ac8:	00001cfd 	.word	0x00001cfd
    2acc:	00001ddd 	.word	0x00001ddd
    2ad0:	00003545 	.word	0x00003545
    2ad4:	00002c7d 	.word	0x00002c7d
    2ad8:	00001f91 	.word	0x00001f91
    2adc:	20000a34 	.word	0x20000a34

00002ae0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2ae0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2ae2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2ae4:	2a00      	cmp	r2, #0
    2ae6:	d101      	bne.n	2aec <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2ae8:	0018      	movs	r0, r3
    2aea:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2aec:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2aee:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2af0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2af2:	2a00      	cmp	r2, #0
    2af4:	d1f8      	bne.n	2ae8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2af6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2af8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2afa:	2a00      	cmp	r2, #0
    2afc:	d1fc      	bne.n	2af8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2afe:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2b00:	2102      	movs	r1, #2
    2b02:	7e1a      	ldrb	r2, [r3, #24]
    2b04:	420a      	tst	r2, r1
    2b06:	d0fc      	beq.n	2b02 <usart_write_wait+0x22>
	return STATUS_OK;
    2b08:	2300      	movs	r3, #0
    2b0a:	e7ed      	b.n	2ae8 <usart_write_wait+0x8>

00002b0c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2b0c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2b0e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2b10:	2a00      	cmp	r2, #0
    2b12:	d101      	bne.n	2b18 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2b14:	0018      	movs	r0, r3
    2b16:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2b18:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2b1a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2b1c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2b1e:	2a00      	cmp	r2, #0
    2b20:	d1f8      	bne.n	2b14 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b22:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2b24:	7e10      	ldrb	r0, [r2, #24]
    2b26:	0740      	lsls	r0, r0, #29
    2b28:	d5f4      	bpl.n	2b14 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2b2a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d1fc      	bne.n	2b2a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b30:	8b53      	ldrh	r3, [r2, #26]
    2b32:	b2db      	uxtb	r3, r3
	if (error_code) {
    2b34:	0698      	lsls	r0, r3, #26
    2b36:	d01d      	beq.n	2b74 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2b38:	0798      	lsls	r0, r3, #30
    2b3a:	d503      	bpl.n	2b44 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b3c:	2302      	movs	r3, #2
    2b3e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2b40:	3318      	adds	r3, #24
    2b42:	e7e7      	b.n	2b14 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b44:	0758      	lsls	r0, r3, #29
    2b46:	d503      	bpl.n	2b50 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b48:	2304      	movs	r3, #4
    2b4a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2b4c:	331a      	adds	r3, #26
    2b4e:	e7e1      	b.n	2b14 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b50:	07d8      	lsls	r0, r3, #31
    2b52:	d503      	bpl.n	2b5c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b54:	2301      	movs	r3, #1
    2b56:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2b58:	3312      	adds	r3, #18
    2b5a:	e7db      	b.n	2b14 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b5c:	06d8      	lsls	r0, r3, #27
    2b5e:	d503      	bpl.n	2b68 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b60:	2310      	movs	r3, #16
    2b62:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2b64:	3332      	adds	r3, #50	; 0x32
    2b66:	e7d5      	b.n	2b14 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b68:	069b      	lsls	r3, r3, #26
    2b6a:	d503      	bpl.n	2b74 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b6c:	2320      	movs	r3, #32
    2b6e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2b70:	3321      	adds	r3, #33	; 0x21
    2b72:	e7cf      	b.n	2b14 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2b74:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2b76:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2b78:	2300      	movs	r3, #0
    2b7a:	e7cb      	b.n	2b14 <usart_read_wait+0x8>

00002b7c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b7e:	0006      	movs	r6, r0
    2b80:	000c      	movs	r4, r1
    2b82:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b84:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2b86:	4b0a      	ldr	r3, [pc, #40]	; (2bb0 <_usart_write_buffer+0x34>)
    2b88:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2b8a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2b8c:	b29b      	uxth	r3, r3
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d003      	beq.n	2b9a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2b92:	4b08      	ldr	r3, [pc, #32]	; (2bb4 <_usart_write_buffer+0x38>)
    2b94:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2b96:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2b9a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2b9c:	4b05      	ldr	r3, [pc, #20]	; (2bb4 <_usart_write_buffer+0x38>)
    2b9e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2ba0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2ba2:	2205      	movs	r2, #5
    2ba4:	2333      	movs	r3, #51	; 0x33
    2ba6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2ba8:	3b32      	subs	r3, #50	; 0x32
    2baa:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2bac:	2000      	movs	r0, #0
    2bae:	e7f3      	b.n	2b98 <_usart_write_buffer+0x1c>
    2bb0:	000019ad 	.word	0x000019ad
    2bb4:	000019ed 	.word	0x000019ed

00002bb8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bba:	0004      	movs	r4, r0
    2bbc:	000d      	movs	r5, r1
    2bbe:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bc0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2bc2:	4b0f      	ldr	r3, [pc, #60]	; (2c00 <_usart_read_buffer+0x48>)
    2bc4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2bc6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2bc8:	b29b      	uxth	r3, r3
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d003      	beq.n	2bd6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2bce:	4b0d      	ldr	r3, [pc, #52]	; (2c04 <_usart_read_buffer+0x4c>)
    2bd0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2bd2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2bd6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2bd8:	4b0a      	ldr	r3, [pc, #40]	; (2c04 <_usart_read_buffer+0x4c>)
    2bda:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2bdc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2bde:	2205      	movs	r2, #5
    2be0:	2332      	movs	r3, #50	; 0x32
    2be2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2be4:	3b2e      	subs	r3, #46	; 0x2e
    2be6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2be8:	7a23      	ldrb	r3, [r4, #8]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d001      	beq.n	2bf2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2bee:	2320      	movs	r3, #32
    2bf0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2bf2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2bf4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d0ec      	beq.n	2bd4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2bfa:	2308      	movs	r3, #8
    2bfc:	75bb      	strb	r3, [r7, #22]
    2bfe:	e7e9      	b.n	2bd4 <_usart_read_buffer+0x1c>
    2c00:	000019ad 	.word	0x000019ad
    2c04:	000019ed 	.word	0x000019ed

00002c08 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2c08:	1c93      	adds	r3, r2, #2
    2c0a:	009b      	lsls	r3, r3, #2
    2c0c:	18c3      	adds	r3, r0, r3
    2c0e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2c10:	2130      	movs	r1, #48	; 0x30
    2c12:	2301      	movs	r3, #1
    2c14:	4093      	lsls	r3, r2
    2c16:	001a      	movs	r2, r3
    2c18:	5c43      	ldrb	r3, [r0, r1]
    2c1a:	4313      	orrs	r3, r2
    2c1c:	5443      	strb	r3, [r0, r1]
}
    2c1e:	4770      	bx	lr

00002c20 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2c20:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2c22:	2317      	movs	r3, #23
	if (length == 0) {
    2c24:	2a00      	cmp	r2, #0
    2c26:	d101      	bne.n	2c2c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2c28:	0018      	movs	r0, r3
    2c2a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2c2c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2c2e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2c30:	2c00      	cmp	r4, #0
    2c32:	d0f9      	beq.n	2c28 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2c34:	4b01      	ldr	r3, [pc, #4]	; (2c3c <usart_write_buffer_job+0x1c>)
    2c36:	4798      	blx	r3
    2c38:	0003      	movs	r3, r0
    2c3a:	e7f5      	b.n	2c28 <usart_write_buffer_job+0x8>
    2c3c:	00002b7d 	.word	0x00002b7d

00002c40 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2c40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2c42:	2317      	movs	r3, #23
	if (length == 0) {
    2c44:	2a00      	cmp	r2, #0
    2c46:	d101      	bne.n	2c4c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2c48:	0018      	movs	r0, r3
    2c4a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2c4c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2c4e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2c50:	2c00      	cmp	r4, #0
    2c52:	d0f9      	beq.n	2c48 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2c54:	4b01      	ldr	r3, [pc, #4]	; (2c5c <usart_read_buffer_job+0x1c>)
    2c56:	4798      	blx	r3
    2c58:	0003      	movs	r3, r0
    2c5a:	e7f5      	b.n	2c48 <usart_read_buffer_job+0x8>
    2c5c:	00002bb9 	.word	0x00002bb9

00002c60 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2c60:	2900      	cmp	r1, #0
    2c62:	d003      	beq.n	2c6c <usart_get_job_status+0xc>
    2c64:	2901      	cmp	r1, #1
    2c66:	d005      	beq.n	2c74 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2c68:	2017      	movs	r0, #23
    2c6a:	e002      	b.n	2c72 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2c6c:	2332      	movs	r3, #50	; 0x32
    2c6e:	5cc0      	ldrb	r0, [r0, r3]
    2c70:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2c72:	4770      	bx	lr
			status_code = module->tx_status;
    2c74:	2333      	movs	r3, #51	; 0x33
    2c76:	5cc0      	ldrb	r0, [r0, r3]
    2c78:	b2c0      	uxtb	r0, r0
			break;
    2c7a:	e7fa      	b.n	2c72 <usart_get_job_status+0x12>

00002c7c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2c7e:	0080      	lsls	r0, r0, #2
    2c80:	4b62      	ldr	r3, [pc, #392]	; (2e0c <_usart_interrupt_handler+0x190>)
    2c82:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2c84:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c86:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2c88:	2b00      	cmp	r3, #0
    2c8a:	d1fc      	bne.n	2c86 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2c8c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2c8e:	7da6      	ldrb	r6, [r4, #22]
    2c90:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2c92:	2330      	movs	r3, #48	; 0x30
    2c94:	5ceb      	ldrb	r3, [r5, r3]
    2c96:	2231      	movs	r2, #49	; 0x31
    2c98:	5caf      	ldrb	r7, [r5, r2]
    2c9a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2c9c:	07f3      	lsls	r3, r6, #31
    2c9e:	d522      	bpl.n	2ce6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ca0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ca2:	b29b      	uxth	r3, r3
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d01c      	beq.n	2ce2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ca8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2caa:	7813      	ldrb	r3, [r2, #0]
    2cac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2cae:	1c51      	adds	r1, r2, #1
    2cb0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2cb2:	7969      	ldrb	r1, [r5, #5]
    2cb4:	2901      	cmp	r1, #1
    2cb6:	d00e      	beq.n	2cd6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cb8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2cba:	05db      	lsls	r3, r3, #23
    2cbc:	0ddb      	lsrs	r3, r3, #23
    2cbe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2cc0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2cc2:	3b01      	subs	r3, #1
    2cc4:	b29b      	uxth	r3, r3
    2cc6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d10c      	bne.n	2ce6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ccc:	3301      	adds	r3, #1
    2cce:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2cd0:	3301      	adds	r3, #1
    2cd2:	75a3      	strb	r3, [r4, #22]
    2cd4:	e007      	b.n	2ce6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2cd6:	7851      	ldrb	r1, [r2, #1]
    2cd8:	0209      	lsls	r1, r1, #8
    2cda:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2cdc:	3202      	adds	r2, #2
    2cde:	62aa      	str	r2, [r5, #40]	; 0x28
    2ce0:	e7eb      	b.n	2cba <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ce2:	2301      	movs	r3, #1
    2ce4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2ce6:	07b3      	lsls	r3, r6, #30
    2ce8:	d506      	bpl.n	2cf8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2cea:	2302      	movs	r3, #2
    2cec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2cee:	2200      	movs	r2, #0
    2cf0:	3331      	adds	r3, #49	; 0x31
    2cf2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2cf4:	07fb      	lsls	r3, r7, #31
    2cf6:	d41a      	bmi.n	2d2e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2cf8:	0773      	lsls	r3, r6, #29
    2cfa:	d565      	bpl.n	2dc8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2cfc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2cfe:	b29b      	uxth	r3, r3
    2d00:	2b00      	cmp	r3, #0
    2d02:	d05f      	beq.n	2dc4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d04:	8b63      	ldrh	r3, [r4, #26]
    2d06:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2d08:	071a      	lsls	r2, r3, #28
    2d0a:	d414      	bmi.n	2d36 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d0c:	223f      	movs	r2, #63	; 0x3f
    2d0e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2d10:	2b00      	cmp	r3, #0
    2d12:	d034      	beq.n	2d7e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2d14:	079a      	lsls	r2, r3, #30
    2d16:	d511      	bpl.n	2d3c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2d18:	221a      	movs	r2, #26
    2d1a:	2332      	movs	r3, #50	; 0x32
    2d1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2d1e:	3b30      	subs	r3, #48	; 0x30
    2d20:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2d22:	077b      	lsls	r3, r7, #29
    2d24:	d550      	bpl.n	2dc8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2d26:	0028      	movs	r0, r5
    2d28:	696b      	ldr	r3, [r5, #20]
    2d2a:	4798      	blx	r3
    2d2c:	e04c      	b.n	2dc8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2d2e:	0028      	movs	r0, r5
    2d30:	68eb      	ldr	r3, [r5, #12]
    2d32:	4798      	blx	r3
    2d34:	e7e0      	b.n	2cf8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2d36:	2237      	movs	r2, #55	; 0x37
    2d38:	4013      	ands	r3, r2
    2d3a:	e7e9      	b.n	2d10 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2d3c:	075a      	lsls	r2, r3, #29
    2d3e:	d505      	bpl.n	2d4c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2d40:	221e      	movs	r2, #30
    2d42:	2332      	movs	r3, #50	; 0x32
    2d44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2d46:	3b2e      	subs	r3, #46	; 0x2e
    2d48:	8363      	strh	r3, [r4, #26]
    2d4a:	e7ea      	b.n	2d22 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2d4c:	07da      	lsls	r2, r3, #31
    2d4e:	d505      	bpl.n	2d5c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2d50:	2213      	movs	r2, #19
    2d52:	2332      	movs	r3, #50	; 0x32
    2d54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2d56:	3b31      	subs	r3, #49	; 0x31
    2d58:	8363      	strh	r3, [r4, #26]
    2d5a:	e7e2      	b.n	2d22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2d5c:	06da      	lsls	r2, r3, #27
    2d5e:	d505      	bpl.n	2d6c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2d60:	2242      	movs	r2, #66	; 0x42
    2d62:	2332      	movs	r3, #50	; 0x32
    2d64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2d66:	3b22      	subs	r3, #34	; 0x22
    2d68:	8363      	strh	r3, [r4, #26]
    2d6a:	e7da      	b.n	2d22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2d6c:	2220      	movs	r2, #32
    2d6e:	421a      	tst	r2, r3
    2d70:	d0d7      	beq.n	2d22 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2d72:	3221      	adds	r2, #33	; 0x21
    2d74:	2332      	movs	r3, #50	; 0x32
    2d76:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2d78:	3b12      	subs	r3, #18
    2d7a:	8363      	strh	r3, [r4, #26]
    2d7c:	e7d1      	b.n	2d22 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2d7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2d80:	05db      	lsls	r3, r3, #23
    2d82:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2d84:	b2da      	uxtb	r2, r3
    2d86:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2d88:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2d8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2d8c:	1c51      	adds	r1, r2, #1
    2d8e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d90:	7969      	ldrb	r1, [r5, #5]
    2d92:	2901      	cmp	r1, #1
    2d94:	d010      	beq.n	2db8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2d96:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2d98:	3b01      	subs	r3, #1
    2d9a:	b29b      	uxth	r3, r3
    2d9c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d112      	bne.n	2dc8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2da2:	3304      	adds	r3, #4
    2da4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2da6:	2200      	movs	r2, #0
    2da8:	332e      	adds	r3, #46	; 0x2e
    2daa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2dac:	07bb      	lsls	r3, r7, #30
    2dae:	d50b      	bpl.n	2dc8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2db0:	0028      	movs	r0, r5
    2db2:	692b      	ldr	r3, [r5, #16]
    2db4:	4798      	blx	r3
    2db6:	e007      	b.n	2dc8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2db8:	0a1b      	lsrs	r3, r3, #8
    2dba:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2dbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2dbe:	3301      	adds	r3, #1
    2dc0:	626b      	str	r3, [r5, #36]	; 0x24
    2dc2:	e7e8      	b.n	2d96 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2dc4:	2304      	movs	r3, #4
    2dc6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2dc8:	06f3      	lsls	r3, r6, #27
    2dca:	d504      	bpl.n	2dd6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2dcc:	2310      	movs	r3, #16
    2dce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2dd0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2dd2:	06fb      	lsls	r3, r7, #27
    2dd4:	d40e      	bmi.n	2df4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2dd6:	06b3      	lsls	r3, r6, #26
    2dd8:	d504      	bpl.n	2de4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2dda:	2320      	movs	r3, #32
    2ddc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2dde:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2de0:	073b      	lsls	r3, r7, #28
    2de2:	d40b      	bmi.n	2dfc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2de4:	0733      	lsls	r3, r6, #28
    2de6:	d504      	bpl.n	2df2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2de8:	2308      	movs	r3, #8
    2dea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2dec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2dee:	06bb      	lsls	r3, r7, #26
    2df0:	d408      	bmi.n	2e04 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2df4:	0028      	movs	r0, r5
    2df6:	69eb      	ldr	r3, [r5, #28]
    2df8:	4798      	blx	r3
    2dfa:	e7ec      	b.n	2dd6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2dfc:	0028      	movs	r0, r5
    2dfe:	69ab      	ldr	r3, [r5, #24]
    2e00:	4798      	blx	r3
    2e02:	e7ef      	b.n	2de4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2e04:	6a2b      	ldr	r3, [r5, #32]
    2e06:	0028      	movs	r0, r5
    2e08:	4798      	blx	r3
}
    2e0a:	e7f2      	b.n	2df2 <_usart_interrupt_handler+0x176>
    2e0c:	20000a34 	.word	0x20000a34

00002e10 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2e10:	b510      	push	{r4, lr}
	switch (clock_source) {
    2e12:	2808      	cmp	r0, #8
    2e14:	d803      	bhi.n	2e1e <system_clock_source_get_hz+0xe>
    2e16:	0080      	lsls	r0, r0, #2
    2e18:	4b1c      	ldr	r3, [pc, #112]	; (2e8c <system_clock_source_get_hz+0x7c>)
    2e1a:	581b      	ldr	r3, [r3, r0]
    2e1c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2e1e:	2000      	movs	r0, #0
    2e20:	e032      	b.n	2e88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2e22:	4b1b      	ldr	r3, [pc, #108]	; (2e90 <system_clock_source_get_hz+0x80>)
    2e24:	6918      	ldr	r0, [r3, #16]
    2e26:	e02f      	b.n	2e88 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2e28:	4b1a      	ldr	r3, [pc, #104]	; (2e94 <system_clock_source_get_hz+0x84>)
    2e2a:	6a1b      	ldr	r3, [r3, #32]
    2e2c:	059b      	lsls	r3, r3, #22
    2e2e:	0f9b      	lsrs	r3, r3, #30
    2e30:	4819      	ldr	r0, [pc, #100]	; (2e98 <system_clock_source_get_hz+0x88>)
    2e32:	40d8      	lsrs	r0, r3
    2e34:	e028      	b.n	2e88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2e36:	4b16      	ldr	r3, [pc, #88]	; (2e90 <system_clock_source_get_hz+0x80>)
    2e38:	6958      	ldr	r0, [r3, #20]
    2e3a:	e025      	b.n	2e88 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e3c:	4b14      	ldr	r3, [pc, #80]	; (2e90 <system_clock_source_get_hz+0x80>)
    2e3e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2e40:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e42:	079b      	lsls	r3, r3, #30
    2e44:	d520      	bpl.n	2e88 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e46:	4913      	ldr	r1, [pc, #76]	; (2e94 <system_clock_source_get_hz+0x84>)
    2e48:	2210      	movs	r2, #16
    2e4a:	68cb      	ldr	r3, [r1, #12]
    2e4c:	421a      	tst	r2, r3
    2e4e:	d0fc      	beq.n	2e4a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2e50:	4b0f      	ldr	r3, [pc, #60]	; (2e90 <system_clock_source_get_hz+0x80>)
    2e52:	681a      	ldr	r2, [r3, #0]
    2e54:	2324      	movs	r3, #36	; 0x24
    2e56:	4013      	ands	r3, r2
    2e58:	2b04      	cmp	r3, #4
    2e5a:	d001      	beq.n	2e60 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2e5c:	480f      	ldr	r0, [pc, #60]	; (2e9c <system_clock_source_get_hz+0x8c>)
    2e5e:	e013      	b.n	2e88 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e60:	2000      	movs	r0, #0
    2e62:	4b0f      	ldr	r3, [pc, #60]	; (2ea0 <system_clock_source_get_hz+0x90>)
    2e64:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2e66:	4b0a      	ldr	r3, [pc, #40]	; (2e90 <system_clock_source_get_hz+0x80>)
    2e68:	689b      	ldr	r3, [r3, #8]
    2e6a:	041b      	lsls	r3, r3, #16
    2e6c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e6e:	4358      	muls	r0, r3
    2e70:	e00a      	b.n	2e88 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2e72:	2350      	movs	r3, #80	; 0x50
    2e74:	4a07      	ldr	r2, [pc, #28]	; (2e94 <system_clock_source_get_hz+0x84>)
    2e76:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2e78:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2e7a:	075b      	lsls	r3, r3, #29
    2e7c:	d504      	bpl.n	2e88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2e7e:	4b04      	ldr	r3, [pc, #16]	; (2e90 <system_clock_source_get_hz+0x80>)
    2e80:	68d8      	ldr	r0, [r3, #12]
    2e82:	e001      	b.n	2e88 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2e84:	2080      	movs	r0, #128	; 0x80
    2e86:	0200      	lsls	r0, r0, #8
	}
}
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	00007354 	.word	0x00007354
    2e90:	200001a0 	.word	0x200001a0
    2e94:	40000800 	.word	0x40000800
    2e98:	007a1200 	.word	0x007a1200
    2e9c:	02dc6c00 	.word	0x02dc6c00
    2ea0:	00003469 	.word	0x00003469

00002ea4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ea4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ea6:	490c      	ldr	r1, [pc, #48]	; (2ed8 <system_clock_source_osc8m_set_config+0x34>)
    2ea8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2eaa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2eac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2eae:	7840      	ldrb	r0, [r0, #1]
    2eb0:	2201      	movs	r2, #1
    2eb2:	4010      	ands	r0, r2
    2eb4:	0180      	lsls	r0, r0, #6
    2eb6:	2640      	movs	r6, #64	; 0x40
    2eb8:	43b3      	bics	r3, r6
    2eba:	4303      	orrs	r3, r0
    2ebc:	402a      	ands	r2, r5
    2ebe:	01d2      	lsls	r2, r2, #7
    2ec0:	2080      	movs	r0, #128	; 0x80
    2ec2:	4383      	bics	r3, r0
    2ec4:	4313      	orrs	r3, r2
    2ec6:	2203      	movs	r2, #3
    2ec8:	4022      	ands	r2, r4
    2eca:	0212      	lsls	r2, r2, #8
    2ecc:	4803      	ldr	r0, [pc, #12]	; (2edc <system_clock_source_osc8m_set_config+0x38>)
    2ece:	4003      	ands	r3, r0
    2ed0:	4313      	orrs	r3, r2
    2ed2:	620b      	str	r3, [r1, #32]
}
    2ed4:	bd70      	pop	{r4, r5, r6, pc}
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	40000800 	.word	0x40000800
    2edc:	fffffcff 	.word	0xfffffcff

00002ee0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ee2:	46de      	mov	lr, fp
    2ee4:	4657      	mov	r7, sl
    2ee6:	464e      	mov	r6, r9
    2ee8:	4645      	mov	r5, r8
    2eea:	b5e0      	push	{r5, r6, r7, lr}
    2eec:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2eee:	4b26      	ldr	r3, [pc, #152]	; (2f88 <system_clock_source_xosc32k_set_config+0xa8>)
    2ef0:	469b      	mov	fp, r3
    2ef2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2ef4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2ef6:	7800      	ldrb	r0, [r0, #0]
    2ef8:	4242      	negs	r2, r0
    2efa:	4142      	adcs	r2, r0
    2efc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2efe:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2f00:	78ca      	ldrb	r2, [r1, #3]
    2f02:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2f04:	790a      	ldrb	r2, [r1, #4]
    2f06:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2f08:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2f0a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2f0c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2f0e:	688a      	ldr	r2, [r1, #8]
    2f10:	491e      	ldr	r1, [pc, #120]	; (2f8c <system_clock_source_xosc32k_set_config+0xac>)
    2f12:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2f14:	2101      	movs	r1, #1
    2f16:	464a      	mov	r2, r9
    2f18:	0092      	lsls	r2, r2, #2
    2f1a:	4691      	mov	r9, r2
    2f1c:	2204      	movs	r2, #4
    2f1e:	4393      	bics	r3, r2
    2f20:	464a      	mov	r2, r9
    2f22:	4313      	orrs	r3, r2
    2f24:	4642      	mov	r2, r8
    2f26:	400a      	ands	r2, r1
    2f28:	00d2      	lsls	r2, r2, #3
    2f2a:	4690      	mov	r8, r2
    2f2c:	2208      	movs	r2, #8
    2f2e:	4393      	bics	r3, r2
    2f30:	4642      	mov	r2, r8
    2f32:	4313      	orrs	r3, r2
    2f34:	4662      	mov	r2, ip
    2f36:	400a      	ands	r2, r1
    2f38:	0112      	lsls	r2, r2, #4
    2f3a:	4694      	mov	ip, r2
    2f3c:	2210      	movs	r2, #16
    2f3e:	4393      	bics	r3, r2
    2f40:	4662      	mov	r2, ip
    2f42:	4313      	orrs	r3, r2
    2f44:	4008      	ands	r0, r1
    2f46:	0140      	lsls	r0, r0, #5
    2f48:	2220      	movs	r2, #32
    2f4a:	4393      	bics	r3, r2
    2f4c:	4303      	orrs	r3, r0
    2f4e:	400f      	ands	r7, r1
    2f50:	01bf      	lsls	r7, r7, #6
    2f52:	2040      	movs	r0, #64	; 0x40
    2f54:	4383      	bics	r3, r0
    2f56:	433b      	orrs	r3, r7
    2f58:	400e      	ands	r6, r1
    2f5a:	01f6      	lsls	r6, r6, #7
    2f5c:	3040      	adds	r0, #64	; 0x40
    2f5e:	4383      	bics	r3, r0
    2f60:	4333      	orrs	r3, r6
    2f62:	3879      	subs	r0, #121	; 0x79
    2f64:	4005      	ands	r5, r0
    2f66:	022d      	lsls	r5, r5, #8
    2f68:	4809      	ldr	r0, [pc, #36]	; (2f90 <system_clock_source_xosc32k_set_config+0xb0>)
    2f6a:	4003      	ands	r3, r0
    2f6c:	432b      	orrs	r3, r5
    2f6e:	4021      	ands	r1, r4
    2f70:	0309      	lsls	r1, r1, #12
    2f72:	4808      	ldr	r0, [pc, #32]	; (2f94 <system_clock_source_xosc32k_set_config+0xb4>)
    2f74:	4003      	ands	r3, r0
    2f76:	430b      	orrs	r3, r1
    2f78:	465a      	mov	r2, fp
    2f7a:	8293      	strh	r3, [r2, #20]
}
    2f7c:	bc3c      	pop	{r2, r3, r4, r5}
    2f7e:	4690      	mov	r8, r2
    2f80:	4699      	mov	r9, r3
    2f82:	46a2      	mov	sl, r4
    2f84:	46ab      	mov	fp, r5
    2f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f88:	40000800 	.word	0x40000800
    2f8c:	200001a0 	.word	0x200001a0
    2f90:	fffff8ff 	.word	0xfffff8ff
    2f94:	ffffefff 	.word	0xffffefff

00002f98 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2f98:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2f9a:	7a03      	ldrb	r3, [r0, #8]
    2f9c:	069b      	lsls	r3, r3, #26
    2f9e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2fa0:	8942      	ldrh	r2, [r0, #10]
    2fa2:	0592      	lsls	r2, r2, #22
    2fa4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2fa6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2fa8:	4918      	ldr	r1, [pc, #96]	; (300c <system_clock_source_dfll_set_config+0x74>)
    2faa:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2fac:	7983      	ldrb	r3, [r0, #6]
    2fae:	79c2      	ldrb	r2, [r0, #7]
    2fb0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2fb2:	8842      	ldrh	r2, [r0, #2]
    2fb4:	8884      	ldrh	r4, [r0, #4]
    2fb6:	4322      	orrs	r2, r4
    2fb8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2fba:	7842      	ldrb	r2, [r0, #1]
    2fbc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2fbe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2fc0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2fc2:	7803      	ldrb	r3, [r0, #0]
    2fc4:	2b04      	cmp	r3, #4
    2fc6:	d011      	beq.n	2fec <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2fc8:	2b20      	cmp	r3, #32
    2fca:	d10e      	bne.n	2fea <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2fcc:	7b03      	ldrb	r3, [r0, #12]
    2fce:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2fd0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2fd2:	4313      	orrs	r3, r2
    2fd4:	89c2      	ldrh	r2, [r0, #14]
    2fd6:	0412      	lsls	r2, r2, #16
    2fd8:	490d      	ldr	r1, [pc, #52]	; (3010 <system_clock_source_dfll_set_config+0x78>)
    2fda:	400a      	ands	r2, r1
    2fdc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2fde:	4a0b      	ldr	r2, [pc, #44]	; (300c <system_clock_source_dfll_set_config+0x74>)
    2fe0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2fe2:	6811      	ldr	r1, [r2, #0]
    2fe4:	4b0b      	ldr	r3, [pc, #44]	; (3014 <system_clock_source_dfll_set_config+0x7c>)
    2fe6:	430b      	orrs	r3, r1
    2fe8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2fea:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2fec:	7b03      	ldrb	r3, [r0, #12]
    2fee:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ff0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ff2:	4313      	orrs	r3, r2
    2ff4:	89c2      	ldrh	r2, [r0, #14]
    2ff6:	0412      	lsls	r2, r2, #16
    2ff8:	4905      	ldr	r1, [pc, #20]	; (3010 <system_clock_source_dfll_set_config+0x78>)
    2ffa:	400a      	ands	r2, r1
    2ffc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ffe:	4a03      	ldr	r2, [pc, #12]	; (300c <system_clock_source_dfll_set_config+0x74>)
    3000:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3002:	6813      	ldr	r3, [r2, #0]
    3004:	2104      	movs	r1, #4
    3006:	430b      	orrs	r3, r1
    3008:	6013      	str	r3, [r2, #0]
    300a:	e7ee      	b.n	2fea <system_clock_source_dfll_set_config+0x52>
    300c:	200001a0 	.word	0x200001a0
    3010:	03ff0000 	.word	0x03ff0000
    3014:	00000424 	.word	0x00000424

00003018 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3018:	2808      	cmp	r0, #8
    301a:	d803      	bhi.n	3024 <system_clock_source_enable+0xc>
    301c:	0080      	lsls	r0, r0, #2
    301e:	4b25      	ldr	r3, [pc, #148]	; (30b4 <system_clock_source_enable+0x9c>)
    3020:	581b      	ldr	r3, [r3, r0]
    3022:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3024:	2017      	movs	r0, #23
    3026:	e044      	b.n	30b2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3028:	4a23      	ldr	r2, [pc, #140]	; (30b8 <system_clock_source_enable+0xa0>)
    302a:	6a13      	ldr	r3, [r2, #32]
    302c:	2102      	movs	r1, #2
    302e:	430b      	orrs	r3, r1
    3030:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3032:	2000      	movs	r0, #0
    3034:	e03d      	b.n	30b2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3036:	4a20      	ldr	r2, [pc, #128]	; (30b8 <system_clock_source_enable+0xa0>)
    3038:	6993      	ldr	r3, [r2, #24]
    303a:	2102      	movs	r1, #2
    303c:	430b      	orrs	r3, r1
    303e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3040:	2000      	movs	r0, #0
		break;
    3042:	e036      	b.n	30b2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3044:	4a1c      	ldr	r2, [pc, #112]	; (30b8 <system_clock_source_enable+0xa0>)
    3046:	8a13      	ldrh	r3, [r2, #16]
    3048:	2102      	movs	r1, #2
    304a:	430b      	orrs	r3, r1
    304c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    304e:	2000      	movs	r0, #0
		break;
    3050:	e02f      	b.n	30b2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3052:	4a19      	ldr	r2, [pc, #100]	; (30b8 <system_clock_source_enable+0xa0>)
    3054:	8a93      	ldrh	r3, [r2, #20]
    3056:	2102      	movs	r1, #2
    3058:	430b      	orrs	r3, r1
    305a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    305c:	2000      	movs	r0, #0
		break;
    305e:	e028      	b.n	30b2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3060:	4916      	ldr	r1, [pc, #88]	; (30bc <system_clock_source_enable+0xa4>)
    3062:	680b      	ldr	r3, [r1, #0]
    3064:	2202      	movs	r2, #2
    3066:	4313      	orrs	r3, r2
    3068:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    306a:	4b13      	ldr	r3, [pc, #76]	; (30b8 <system_clock_source_enable+0xa0>)
    306c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    306e:	0019      	movs	r1, r3
    3070:	320e      	adds	r2, #14
    3072:	68cb      	ldr	r3, [r1, #12]
    3074:	421a      	tst	r2, r3
    3076:	d0fc      	beq.n	3072 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3078:	4a10      	ldr	r2, [pc, #64]	; (30bc <system_clock_source_enable+0xa4>)
    307a:	6891      	ldr	r1, [r2, #8]
    307c:	4b0e      	ldr	r3, [pc, #56]	; (30b8 <system_clock_source_enable+0xa0>)
    307e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3080:	6852      	ldr	r2, [r2, #4]
    3082:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3084:	2200      	movs	r2, #0
    3086:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3088:	0019      	movs	r1, r3
    308a:	3210      	adds	r2, #16
    308c:	68cb      	ldr	r3, [r1, #12]
    308e:	421a      	tst	r2, r3
    3090:	d0fc      	beq.n	308c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3092:	4b0a      	ldr	r3, [pc, #40]	; (30bc <system_clock_source_enable+0xa4>)
    3094:	681b      	ldr	r3, [r3, #0]
    3096:	b29b      	uxth	r3, r3
    3098:	4a07      	ldr	r2, [pc, #28]	; (30b8 <system_clock_source_enable+0xa0>)
    309a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    309c:	2000      	movs	r0, #0
    309e:	e008      	b.n	30b2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    30a0:	4905      	ldr	r1, [pc, #20]	; (30b8 <system_clock_source_enable+0xa0>)
    30a2:	2244      	movs	r2, #68	; 0x44
    30a4:	5c8b      	ldrb	r3, [r1, r2]
    30a6:	2002      	movs	r0, #2
    30a8:	4303      	orrs	r3, r0
    30aa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    30ac:	2000      	movs	r0, #0
		break;
    30ae:	e000      	b.n	30b2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    30b0:	2000      	movs	r0, #0
}
    30b2:	4770      	bx	lr
    30b4:	00007378 	.word	0x00007378
    30b8:	40000800 	.word	0x40000800
    30bc:	200001a0 	.word	0x200001a0

000030c0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    30c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    30c4:	22c2      	movs	r2, #194	; 0xc2
    30c6:	00d2      	lsls	r2, r2, #3
    30c8:	4b45      	ldr	r3, [pc, #276]	; (31e0 <system_clock_init+0x120>)
    30ca:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    30cc:	4a45      	ldr	r2, [pc, #276]	; (31e4 <system_clock_init+0x124>)
    30ce:	6853      	ldr	r3, [r2, #4]
    30d0:	211e      	movs	r1, #30
    30d2:	438b      	bics	r3, r1
    30d4:	391a      	subs	r1, #26
    30d6:	430b      	orrs	r3, r1
    30d8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    30da:	2202      	movs	r2, #2
    30dc:	ab01      	add	r3, sp, #4
    30de:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    30e0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    30e2:	4d41      	ldr	r5, [pc, #260]	; (31e8 <system_clock_init+0x128>)
    30e4:	b2e0      	uxtb	r0, r4
    30e6:	a901      	add	r1, sp, #4
    30e8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    30ea:	3401      	adds	r4, #1
    30ec:	2c25      	cmp	r4, #37	; 0x25
    30ee:	d1f9      	bne.n	30e4 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    30f0:	a80a      	add	r0, sp, #40	; 0x28
    30f2:	2300      	movs	r3, #0
    30f4:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    30f6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    30f8:	2280      	movs	r2, #128	; 0x80
    30fa:	0212      	lsls	r2, r2, #8
    30fc:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    30fe:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3100:	2201      	movs	r2, #1
    3102:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    3104:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3106:	2106      	movs	r1, #6
    3108:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    310a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    310c:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    310e:	4b37      	ldr	r3, [pc, #220]	; (31ec <system_clock_init+0x12c>)
    3110:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3112:	2005      	movs	r0, #5
    3114:	4b36      	ldr	r3, [pc, #216]	; (31f0 <system_clock_init+0x130>)
    3116:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3118:	4931      	ldr	r1, [pc, #196]	; (31e0 <system_clock_init+0x120>)
    311a:	2202      	movs	r2, #2
    311c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    311e:	421a      	tst	r2, r3
    3120:	d0fc      	beq.n	311c <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3122:	ab05      	add	r3, sp, #20
    3124:	2100      	movs	r1, #0
    3126:	2200      	movs	r2, #0
    3128:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    312a:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    312c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    312e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3130:	313f      	adds	r1, #63	; 0x3f
    3132:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3134:	393b      	subs	r1, #59	; 0x3b
    3136:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3138:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    313a:	4b2e      	ldr	r3, [pc, #184]	; (31f4 <system_clock_init+0x134>)
    313c:	681b      	ldr	r3, [r3, #0]
    313e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3140:	2b3f      	cmp	r3, #63	; 0x3f
    3142:	d04b      	beq.n	31dc <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3144:	a805      	add	r0, sp, #20
    3146:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3148:	23b7      	movs	r3, #183	; 0xb7
    314a:	00db      	lsls	r3, r3, #3
    314c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    314e:	2303      	movs	r3, #3
    3150:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3152:	331c      	adds	r3, #28
    3154:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3156:	4b28      	ldr	r3, [pc, #160]	; (31f8 <system_clock_init+0x138>)
    3158:	4798      	blx	r3
	config->on_demand       = true;
    315a:	a804      	add	r0, sp, #16
    315c:	2501      	movs	r5, #1
    315e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3160:	2600      	movs	r6, #0
    3162:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3164:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3166:	4b25      	ldr	r3, [pc, #148]	; (31fc <system_clock_init+0x13c>)
    3168:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    316a:	2006      	movs	r0, #6
    316c:	4f20      	ldr	r7, [pc, #128]	; (31f0 <system_clock_init+0x130>)
    316e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3170:	4b23      	ldr	r3, [pc, #140]	; (3200 <system_clock_init+0x140>)
    3172:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3174:	ac01      	add	r4, sp, #4
    3176:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    3178:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    317a:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    317c:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    317e:	2305      	movs	r3, #5
    3180:	7023      	strb	r3, [r4, #0]
    3182:	0021      	movs	r1, r4
    3184:	2001      	movs	r0, #1
    3186:	4b1f      	ldr	r3, [pc, #124]	; (3204 <system_clock_init+0x144>)
    3188:	4798      	blx	r3
    318a:	2001      	movs	r0, #1
    318c:	4b1e      	ldr	r3, [pc, #120]	; (3208 <system_clock_init+0x148>)
    318e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3190:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    3192:	0021      	movs	r1, r4
    3194:	2000      	movs	r0, #0
    3196:	4b14      	ldr	r3, [pc, #80]	; (31e8 <system_clock_init+0x128>)
    3198:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    319a:	2000      	movs	r0, #0
    319c:	4b1b      	ldr	r3, [pc, #108]	; (320c <system_clock_init+0x14c>)
    319e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    31a0:	2007      	movs	r0, #7
    31a2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    31a4:	490e      	ldr	r1, [pc, #56]	; (31e0 <system_clock_init+0x120>)
    31a6:	22d0      	movs	r2, #208	; 0xd0
    31a8:	68cb      	ldr	r3, [r1, #12]
    31aa:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    31ac:	2bd0      	cmp	r3, #208	; 0xd0
    31ae:	d1fb      	bne.n	31a8 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    31b0:	4a17      	ldr	r2, [pc, #92]	; (3210 <system_clock_init+0x150>)
    31b2:	2300      	movs	r3, #0
    31b4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    31b6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    31b8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    31ba:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    31bc:	a901      	add	r1, sp, #4
    31be:	2201      	movs	r2, #1
    31c0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    31c2:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    31c4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    31c6:	3307      	adds	r3, #7
    31c8:	700b      	strb	r3, [r1, #0]
    31ca:	720a      	strb	r2, [r1, #8]
    31cc:	2000      	movs	r0, #0
    31ce:	4b0d      	ldr	r3, [pc, #52]	; (3204 <system_clock_init+0x144>)
    31d0:	4798      	blx	r3
    31d2:	2000      	movs	r0, #0
    31d4:	4b0c      	ldr	r3, [pc, #48]	; (3208 <system_clock_init+0x148>)
    31d6:	4798      	blx	r3
#endif
}
    31d8:	b00f      	add	sp, #60	; 0x3c
    31da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    31dc:	3b20      	subs	r3, #32
    31de:	e7b1      	b.n	3144 <system_clock_init+0x84>
    31e0:	40000800 	.word	0x40000800
    31e4:	41004000 	.word	0x41004000
    31e8:	0000344d 	.word	0x0000344d
    31ec:	00002ee1 	.word	0x00002ee1
    31f0:	00003019 	.word	0x00003019
    31f4:	00806024 	.word	0x00806024
    31f8:	00002f99 	.word	0x00002f99
    31fc:	00002ea5 	.word	0x00002ea5
    3200:	00003215 	.word	0x00003215
    3204:	00003239 	.word	0x00003239
    3208:	000032f1 	.word	0x000032f1
    320c:	000033c1 	.word	0x000033c1
    3210:	40000400 	.word	0x40000400

00003214 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3214:	4a06      	ldr	r2, [pc, #24]	; (3230 <system_gclk_init+0x1c>)
    3216:	6993      	ldr	r3, [r2, #24]
    3218:	2108      	movs	r1, #8
    321a:	430b      	orrs	r3, r1
    321c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    321e:	2201      	movs	r2, #1
    3220:	4b04      	ldr	r3, [pc, #16]	; (3234 <system_gclk_init+0x20>)
    3222:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3224:	0019      	movs	r1, r3
    3226:	780b      	ldrb	r3, [r1, #0]
    3228:	4213      	tst	r3, r2
    322a:	d1fc      	bne.n	3226 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    322c:	4770      	bx	lr
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	40000400 	.word	0x40000400
    3234:	40000c00 	.word	0x40000c00

00003238 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3238:	b570      	push	{r4, r5, r6, lr}
    323a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    323c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    323e:	780d      	ldrb	r5, [r1, #0]
    3240:	022d      	lsls	r5, r5, #8
    3242:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3244:	784b      	ldrb	r3, [r1, #1]
    3246:	2b00      	cmp	r3, #0
    3248:	d002      	beq.n	3250 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    324a:	2380      	movs	r3, #128	; 0x80
    324c:	02db      	lsls	r3, r3, #11
    324e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3250:	7a4b      	ldrb	r3, [r1, #9]
    3252:	2b00      	cmp	r3, #0
    3254:	d002      	beq.n	325c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3256:	2380      	movs	r3, #128	; 0x80
    3258:	031b      	lsls	r3, r3, #12
    325a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    325c:	6848      	ldr	r0, [r1, #4]
    325e:	2801      	cmp	r0, #1
    3260:	d910      	bls.n	3284 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3262:	1e43      	subs	r3, r0, #1
    3264:	4218      	tst	r0, r3
    3266:	d134      	bne.n	32d2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3268:	2802      	cmp	r0, #2
    326a:	d930      	bls.n	32ce <system_gclk_gen_set_config+0x96>
    326c:	2302      	movs	r3, #2
    326e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3270:	3201      	adds	r2, #1
						mask <<= 1) {
    3272:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3274:	4298      	cmp	r0, r3
    3276:	d8fb      	bhi.n	3270 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3278:	0212      	lsls	r2, r2, #8
    327a:	4332      	orrs	r2, r6
    327c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    327e:	2380      	movs	r3, #128	; 0x80
    3280:	035b      	lsls	r3, r3, #13
    3282:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3284:	7a0b      	ldrb	r3, [r1, #8]
    3286:	2b00      	cmp	r3, #0
    3288:	d002      	beq.n	3290 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    328a:	2380      	movs	r3, #128	; 0x80
    328c:	039b      	lsls	r3, r3, #14
    328e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3290:	4a13      	ldr	r2, [pc, #76]	; (32e0 <system_gclk_gen_set_config+0xa8>)
    3292:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3294:	b25b      	sxtb	r3, r3
    3296:	2b00      	cmp	r3, #0
    3298:	dbfb      	blt.n	3292 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    329a:	4b12      	ldr	r3, [pc, #72]	; (32e4 <system_gclk_gen_set_config+0xac>)
    329c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    329e:	4b12      	ldr	r3, [pc, #72]	; (32e8 <system_gclk_gen_set_config+0xb0>)
    32a0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32a2:	4a0f      	ldr	r2, [pc, #60]	; (32e0 <system_gclk_gen_set_config+0xa8>)
    32a4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    32a6:	b25b      	sxtb	r3, r3
    32a8:	2b00      	cmp	r3, #0
    32aa:	dbfb      	blt.n	32a4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    32ac:	4b0c      	ldr	r3, [pc, #48]	; (32e0 <system_gclk_gen_set_config+0xa8>)
    32ae:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32b0:	001a      	movs	r2, r3
    32b2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    32b4:	b25b      	sxtb	r3, r3
    32b6:	2b00      	cmp	r3, #0
    32b8:	dbfb      	blt.n	32b2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    32ba:	4a09      	ldr	r2, [pc, #36]	; (32e0 <system_gclk_gen_set_config+0xa8>)
    32bc:	6853      	ldr	r3, [r2, #4]
    32be:	2180      	movs	r1, #128	; 0x80
    32c0:	0249      	lsls	r1, r1, #9
    32c2:	400b      	ands	r3, r1
    32c4:	431d      	orrs	r5, r3
    32c6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    32c8:	4b08      	ldr	r3, [pc, #32]	; (32ec <system_gclk_gen_set_config+0xb4>)
    32ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32cc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    32ce:	2200      	movs	r2, #0
    32d0:	e7d2      	b.n	3278 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    32d2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    32d4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    32d6:	2380      	movs	r3, #128	; 0x80
    32d8:	029b      	lsls	r3, r3, #10
    32da:	431d      	orrs	r5, r3
    32dc:	e7d2      	b.n	3284 <system_gclk_gen_set_config+0x4c>
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	40000c00 	.word	0x40000c00
    32e4:	000019ad 	.word	0x000019ad
    32e8:	40000c08 	.word	0x40000c08
    32ec:	000019ed 	.word	0x000019ed

000032f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    32f0:	b510      	push	{r4, lr}
    32f2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32f4:	4a0b      	ldr	r2, [pc, #44]	; (3324 <system_gclk_gen_enable+0x34>)
    32f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    32f8:	b25b      	sxtb	r3, r3
    32fa:	2b00      	cmp	r3, #0
    32fc:	dbfb      	blt.n	32f6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    32fe:	4b0a      	ldr	r3, [pc, #40]	; (3328 <system_gclk_gen_enable+0x38>)
    3300:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3302:	4b0a      	ldr	r3, [pc, #40]	; (332c <system_gclk_gen_enable+0x3c>)
    3304:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3306:	4a07      	ldr	r2, [pc, #28]	; (3324 <system_gclk_gen_enable+0x34>)
    3308:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    330a:	b25b      	sxtb	r3, r3
    330c:	2b00      	cmp	r3, #0
    330e:	dbfb      	blt.n	3308 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3310:	4a04      	ldr	r2, [pc, #16]	; (3324 <system_gclk_gen_enable+0x34>)
    3312:	6851      	ldr	r1, [r2, #4]
    3314:	2380      	movs	r3, #128	; 0x80
    3316:	025b      	lsls	r3, r3, #9
    3318:	430b      	orrs	r3, r1
    331a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    331c:	4b04      	ldr	r3, [pc, #16]	; (3330 <system_gclk_gen_enable+0x40>)
    331e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3320:	bd10      	pop	{r4, pc}
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	40000c00 	.word	0x40000c00
    3328:	000019ad 	.word	0x000019ad
    332c:	40000c04 	.word	0x40000c04
    3330:	000019ed 	.word	0x000019ed

00003334 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3334:	b570      	push	{r4, r5, r6, lr}
    3336:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3338:	4a1a      	ldr	r2, [pc, #104]	; (33a4 <system_gclk_gen_get_hz+0x70>)
    333a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    333c:	b25b      	sxtb	r3, r3
    333e:	2b00      	cmp	r3, #0
    3340:	dbfb      	blt.n	333a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3342:	4b19      	ldr	r3, [pc, #100]	; (33a8 <system_gclk_gen_get_hz+0x74>)
    3344:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3346:	4b19      	ldr	r3, [pc, #100]	; (33ac <system_gclk_gen_get_hz+0x78>)
    3348:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    334a:	4a16      	ldr	r2, [pc, #88]	; (33a4 <system_gclk_gen_get_hz+0x70>)
    334c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    334e:	b25b      	sxtb	r3, r3
    3350:	2b00      	cmp	r3, #0
    3352:	dbfb      	blt.n	334c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3354:	4e13      	ldr	r6, [pc, #76]	; (33a4 <system_gclk_gen_get_hz+0x70>)
    3356:	6870      	ldr	r0, [r6, #4]
    3358:	04c0      	lsls	r0, r0, #19
    335a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    335c:	4b14      	ldr	r3, [pc, #80]	; (33b0 <system_gclk_gen_get_hz+0x7c>)
    335e:	4798      	blx	r3
    3360:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3362:	4b12      	ldr	r3, [pc, #72]	; (33ac <system_gclk_gen_get_hz+0x78>)
    3364:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3366:	6876      	ldr	r6, [r6, #4]
    3368:	02f6      	lsls	r6, r6, #11
    336a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    336c:	4b11      	ldr	r3, [pc, #68]	; (33b4 <system_gclk_gen_get_hz+0x80>)
    336e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3370:	4a0c      	ldr	r2, [pc, #48]	; (33a4 <system_gclk_gen_get_hz+0x70>)
    3372:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3374:	b25b      	sxtb	r3, r3
    3376:	2b00      	cmp	r3, #0
    3378:	dbfb      	blt.n	3372 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    337a:	4b0a      	ldr	r3, [pc, #40]	; (33a4 <system_gclk_gen_get_hz+0x70>)
    337c:	689c      	ldr	r4, [r3, #8]
    337e:	0224      	lsls	r4, r4, #8
    3380:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3382:	4b0d      	ldr	r3, [pc, #52]	; (33b8 <system_gclk_gen_get_hz+0x84>)
    3384:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3386:	2e00      	cmp	r6, #0
    3388:	d107      	bne.n	339a <system_gclk_gen_get_hz+0x66>
    338a:	2c01      	cmp	r4, #1
    338c:	d907      	bls.n	339e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    338e:	0021      	movs	r1, r4
    3390:	0028      	movs	r0, r5
    3392:	4b0a      	ldr	r3, [pc, #40]	; (33bc <system_gclk_gen_get_hz+0x88>)
    3394:	4798      	blx	r3
    3396:	0005      	movs	r5, r0
    3398:	e001      	b.n	339e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    339a:	3401      	adds	r4, #1
    339c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    339e:	0028      	movs	r0, r5
    33a0:	bd70      	pop	{r4, r5, r6, pc}
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	40000c00 	.word	0x40000c00
    33a8:	000019ad 	.word	0x000019ad
    33ac:	40000c04 	.word	0x40000c04
    33b0:	00002e11 	.word	0x00002e11
    33b4:	40000c08 	.word	0x40000c08
    33b8:	000019ed 	.word	0x000019ed
    33bc:	00005f3d 	.word	0x00005f3d

000033c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    33c0:	b510      	push	{r4, lr}
    33c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    33c4:	4b06      	ldr	r3, [pc, #24]	; (33e0 <system_gclk_chan_enable+0x20>)
    33c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    33c8:	4b06      	ldr	r3, [pc, #24]	; (33e4 <system_gclk_chan_enable+0x24>)
    33ca:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    33cc:	4a06      	ldr	r2, [pc, #24]	; (33e8 <system_gclk_chan_enable+0x28>)
    33ce:	8853      	ldrh	r3, [r2, #2]
    33d0:	2180      	movs	r1, #128	; 0x80
    33d2:	01c9      	lsls	r1, r1, #7
    33d4:	430b      	orrs	r3, r1
    33d6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    33d8:	4b04      	ldr	r3, [pc, #16]	; (33ec <system_gclk_chan_enable+0x2c>)
    33da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33dc:	bd10      	pop	{r4, pc}
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	000019ad 	.word	0x000019ad
    33e4:	40000c02 	.word	0x40000c02
    33e8:	40000c00 	.word	0x40000c00
    33ec:	000019ed 	.word	0x000019ed

000033f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    33f0:	b510      	push	{r4, lr}
    33f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    33f4:	4b0f      	ldr	r3, [pc, #60]	; (3434 <system_gclk_chan_disable+0x44>)
    33f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    33f8:	4b0f      	ldr	r3, [pc, #60]	; (3438 <system_gclk_chan_disable+0x48>)
    33fa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    33fc:	4a0f      	ldr	r2, [pc, #60]	; (343c <system_gclk_chan_disable+0x4c>)
    33fe:	8853      	ldrh	r3, [r2, #2]
    3400:	051b      	lsls	r3, r3, #20
    3402:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3404:	8853      	ldrh	r3, [r2, #2]
    3406:	490e      	ldr	r1, [pc, #56]	; (3440 <system_gclk_chan_disable+0x50>)
    3408:	400b      	ands	r3, r1
    340a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    340c:	8853      	ldrh	r3, [r2, #2]
    340e:	490d      	ldr	r1, [pc, #52]	; (3444 <system_gclk_chan_disable+0x54>)
    3410:	400b      	ands	r3, r1
    3412:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3414:	0011      	movs	r1, r2
    3416:	2280      	movs	r2, #128	; 0x80
    3418:	01d2      	lsls	r2, r2, #7
    341a:	884b      	ldrh	r3, [r1, #2]
    341c:	4213      	tst	r3, r2
    341e:	d1fc      	bne.n	341a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3420:	4906      	ldr	r1, [pc, #24]	; (343c <system_gclk_chan_disable+0x4c>)
    3422:	884a      	ldrh	r2, [r1, #2]
    3424:	0203      	lsls	r3, r0, #8
    3426:	4806      	ldr	r0, [pc, #24]	; (3440 <system_gclk_chan_disable+0x50>)
    3428:	4002      	ands	r2, r0
    342a:	4313      	orrs	r3, r2
    342c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    342e:	4b06      	ldr	r3, [pc, #24]	; (3448 <system_gclk_chan_disable+0x58>)
    3430:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3432:	bd10      	pop	{r4, pc}
    3434:	000019ad 	.word	0x000019ad
    3438:	40000c02 	.word	0x40000c02
    343c:	40000c00 	.word	0x40000c00
    3440:	fffff0ff 	.word	0xfffff0ff
    3444:	ffffbfff 	.word	0xffffbfff
    3448:	000019ed 	.word	0x000019ed

0000344c <system_gclk_chan_set_config>:
{
    344c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    344e:	780c      	ldrb	r4, [r1, #0]
    3450:	0224      	lsls	r4, r4, #8
    3452:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3454:	4b02      	ldr	r3, [pc, #8]	; (3460 <system_gclk_chan_set_config+0x14>)
    3456:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3458:	b2a4      	uxth	r4, r4
    345a:	4b02      	ldr	r3, [pc, #8]	; (3464 <system_gclk_chan_set_config+0x18>)
    345c:	805c      	strh	r4, [r3, #2]
}
    345e:	bd10      	pop	{r4, pc}
    3460:	000033f1 	.word	0x000033f1
    3464:	40000c00 	.word	0x40000c00

00003468 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3468:	b510      	push	{r4, lr}
    346a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    346c:	4b06      	ldr	r3, [pc, #24]	; (3488 <system_gclk_chan_get_hz+0x20>)
    346e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3470:	4b06      	ldr	r3, [pc, #24]	; (348c <system_gclk_chan_get_hz+0x24>)
    3472:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3474:	4b06      	ldr	r3, [pc, #24]	; (3490 <system_gclk_chan_get_hz+0x28>)
    3476:	885c      	ldrh	r4, [r3, #2]
    3478:	0524      	lsls	r4, r4, #20
    347a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    347c:	4b05      	ldr	r3, [pc, #20]	; (3494 <system_gclk_chan_get_hz+0x2c>)
    347e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3480:	0020      	movs	r0, r4
    3482:	4b05      	ldr	r3, [pc, #20]	; (3498 <system_gclk_chan_get_hz+0x30>)
    3484:	4798      	blx	r3
}
    3486:	bd10      	pop	{r4, pc}
    3488:	000019ad 	.word	0x000019ad
    348c:	40000c02 	.word	0x40000c02
    3490:	40000c00 	.word	0x40000c00
    3494:	000019ed 	.word	0x000019ed
    3498:	00003335 	.word	0x00003335

0000349c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    349c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    349e:	78d3      	ldrb	r3, [r2, #3]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d135      	bne.n	3510 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    34a4:	7813      	ldrb	r3, [r2, #0]
    34a6:	2b80      	cmp	r3, #128	; 0x80
    34a8:	d029      	beq.n	34fe <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    34aa:	061b      	lsls	r3, r3, #24
    34ac:	2480      	movs	r4, #128	; 0x80
    34ae:	0264      	lsls	r4, r4, #9
    34b0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    34b2:	7854      	ldrb	r4, [r2, #1]
    34b4:	2502      	movs	r5, #2
    34b6:	43ac      	bics	r4, r5
    34b8:	d106      	bne.n	34c8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    34ba:	7894      	ldrb	r4, [r2, #2]
    34bc:	2c00      	cmp	r4, #0
    34be:	d120      	bne.n	3502 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    34c0:	2480      	movs	r4, #128	; 0x80
    34c2:	02a4      	lsls	r4, r4, #10
    34c4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    34c6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    34c8:	7854      	ldrb	r4, [r2, #1]
    34ca:	3c01      	subs	r4, #1
    34cc:	2c01      	cmp	r4, #1
    34ce:	d91c      	bls.n	350a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    34d0:	040d      	lsls	r5, r1, #16
    34d2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    34d4:	24a0      	movs	r4, #160	; 0xa0
    34d6:	05e4      	lsls	r4, r4, #23
    34d8:	432c      	orrs	r4, r5
    34da:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    34dc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    34de:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    34e0:	24d0      	movs	r4, #208	; 0xd0
    34e2:	0624      	lsls	r4, r4, #24
    34e4:	432c      	orrs	r4, r5
    34e6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    34e8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    34ea:	78d4      	ldrb	r4, [r2, #3]
    34ec:	2c00      	cmp	r4, #0
    34ee:	d122      	bne.n	3536 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    34f0:	035b      	lsls	r3, r3, #13
    34f2:	d51c      	bpl.n	352e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    34f4:	7893      	ldrb	r3, [r2, #2]
    34f6:	2b01      	cmp	r3, #1
    34f8:	d01e      	beq.n	3538 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    34fa:	6141      	str	r1, [r0, #20]
    34fc:	e017      	b.n	352e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    34fe:	2300      	movs	r3, #0
    3500:	e7d7      	b.n	34b2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3502:	24c0      	movs	r4, #192	; 0xc0
    3504:	02e4      	lsls	r4, r4, #11
    3506:	4323      	orrs	r3, r4
    3508:	e7dd      	b.n	34c6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    350a:	4c0d      	ldr	r4, [pc, #52]	; (3540 <_system_pinmux_config+0xa4>)
    350c:	4023      	ands	r3, r4
    350e:	e7df      	b.n	34d0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3510:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3512:	040c      	lsls	r4, r1, #16
    3514:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3516:	23a0      	movs	r3, #160	; 0xa0
    3518:	05db      	lsls	r3, r3, #23
    351a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    351c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    351e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3520:	23d0      	movs	r3, #208	; 0xd0
    3522:	061b      	lsls	r3, r3, #24
    3524:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3526:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3528:	78d3      	ldrb	r3, [r2, #3]
    352a:	2b00      	cmp	r3, #0
    352c:	d103      	bne.n	3536 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    352e:	7853      	ldrb	r3, [r2, #1]
    3530:	3b01      	subs	r3, #1
    3532:	2b01      	cmp	r3, #1
    3534:	d902      	bls.n	353c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3536:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3538:	6181      	str	r1, [r0, #24]
    353a:	e7f8      	b.n	352e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    353c:	6081      	str	r1, [r0, #8]
}
    353e:	e7fa      	b.n	3536 <_system_pinmux_config+0x9a>
    3540:	fffbffff 	.word	0xfffbffff

00003544 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3544:	b510      	push	{r4, lr}
    3546:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3548:	09c1      	lsrs	r1, r0, #7
		return NULL;
    354a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    354c:	2900      	cmp	r1, #0
    354e:	d104      	bne.n	355a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3550:	0943      	lsrs	r3, r0, #5
    3552:	01db      	lsls	r3, r3, #7
    3554:	4905      	ldr	r1, [pc, #20]	; (356c <system_pinmux_pin_set_config+0x28>)
    3556:	468c      	mov	ip, r1
    3558:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    355a:	241f      	movs	r4, #31
    355c:	4020      	ands	r0, r4
    355e:	2101      	movs	r1, #1
    3560:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3562:	0018      	movs	r0, r3
    3564:	4b02      	ldr	r3, [pc, #8]	; (3570 <system_pinmux_pin_set_config+0x2c>)
    3566:	4798      	blx	r3
}
    3568:	bd10      	pop	{r4, pc}
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	41004400 	.word	0x41004400
    3570:	0000349d 	.word	0x0000349d

00003574 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3574:	4770      	bx	lr
	...

00003578 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3578:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    357a:	4b05      	ldr	r3, [pc, #20]	; (3590 <system_init+0x18>)
    357c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    357e:	4b05      	ldr	r3, [pc, #20]	; (3594 <system_init+0x1c>)
    3580:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3582:	4b05      	ldr	r3, [pc, #20]	; (3598 <system_init+0x20>)
    3584:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3586:	4b05      	ldr	r3, [pc, #20]	; (359c <system_init+0x24>)
    3588:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    358a:	4b05      	ldr	r3, [pc, #20]	; (35a0 <system_init+0x28>)
    358c:	4798      	blx	r3
}
    358e:	bd10      	pop	{r4, pc}
    3590:	000030c1 	.word	0x000030c1
    3594:	0000019d 	.word	0x0000019d
    3598:	00003575 	.word	0x00003575
    359c:	00003575 	.word	0x00003575
    35a0:	00003575 	.word	0x00003575

000035a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    35a4:	e7fe      	b.n	35a4 <Dummy_Handler>
	...

000035a8 <Reset_Handler>:
{
    35a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    35aa:	4a2a      	ldr	r2, [pc, #168]	; (3654 <Reset_Handler+0xac>)
    35ac:	4b2a      	ldr	r3, [pc, #168]	; (3658 <Reset_Handler+0xb0>)
    35ae:	429a      	cmp	r2, r3
    35b0:	d011      	beq.n	35d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    35b2:	001a      	movs	r2, r3
    35b4:	4b29      	ldr	r3, [pc, #164]	; (365c <Reset_Handler+0xb4>)
    35b6:	429a      	cmp	r2, r3
    35b8:	d20d      	bcs.n	35d6 <Reset_Handler+0x2e>
    35ba:	4a29      	ldr	r2, [pc, #164]	; (3660 <Reset_Handler+0xb8>)
    35bc:	3303      	adds	r3, #3
    35be:	1a9b      	subs	r3, r3, r2
    35c0:	089b      	lsrs	r3, r3, #2
    35c2:	3301      	adds	r3, #1
    35c4:	009b      	lsls	r3, r3, #2
    35c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    35c8:	4823      	ldr	r0, [pc, #140]	; (3658 <Reset_Handler+0xb0>)
    35ca:	4922      	ldr	r1, [pc, #136]	; (3654 <Reset_Handler+0xac>)
    35cc:	588c      	ldr	r4, [r1, r2]
    35ce:	5084      	str	r4, [r0, r2]
    35d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    35d2:	429a      	cmp	r2, r3
    35d4:	d1fa      	bne.n	35cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    35d6:	4a23      	ldr	r2, [pc, #140]	; (3664 <Reset_Handler+0xbc>)
    35d8:	4b23      	ldr	r3, [pc, #140]	; (3668 <Reset_Handler+0xc0>)
    35da:	429a      	cmp	r2, r3
    35dc:	d20a      	bcs.n	35f4 <Reset_Handler+0x4c>
    35de:	43d3      	mvns	r3, r2
    35e0:	4921      	ldr	r1, [pc, #132]	; (3668 <Reset_Handler+0xc0>)
    35e2:	185b      	adds	r3, r3, r1
    35e4:	2103      	movs	r1, #3
    35e6:	438b      	bics	r3, r1
    35e8:	3304      	adds	r3, #4
    35ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    35ec:	2100      	movs	r1, #0
    35ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    35f0:	4293      	cmp	r3, r2
    35f2:	d1fc      	bne.n	35ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    35f4:	4a1d      	ldr	r2, [pc, #116]	; (366c <Reset_Handler+0xc4>)
    35f6:	21ff      	movs	r1, #255	; 0xff
    35f8:	4b1d      	ldr	r3, [pc, #116]	; (3670 <Reset_Handler+0xc8>)
    35fa:	438b      	bics	r3, r1
    35fc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    35fe:	39fd      	subs	r1, #253	; 0xfd
    3600:	2390      	movs	r3, #144	; 0x90
    3602:	005b      	lsls	r3, r3, #1
    3604:	4a1b      	ldr	r2, [pc, #108]	; (3674 <Reset_Handler+0xcc>)
    3606:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3608:	4a1b      	ldr	r2, [pc, #108]	; (3678 <Reset_Handler+0xd0>)
    360a:	78d3      	ldrb	r3, [r2, #3]
    360c:	2503      	movs	r5, #3
    360e:	43ab      	bics	r3, r5
    3610:	2402      	movs	r4, #2
    3612:	4323      	orrs	r3, r4
    3614:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3616:	78d3      	ldrb	r3, [r2, #3]
    3618:	270c      	movs	r7, #12
    361a:	43bb      	bics	r3, r7
    361c:	2608      	movs	r6, #8
    361e:	4333      	orrs	r3, r6
    3620:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3622:	4b16      	ldr	r3, [pc, #88]	; (367c <Reset_Handler+0xd4>)
    3624:	7b98      	ldrb	r0, [r3, #14]
    3626:	2230      	movs	r2, #48	; 0x30
    3628:	4390      	bics	r0, r2
    362a:	2220      	movs	r2, #32
    362c:	4310      	orrs	r0, r2
    362e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3630:	7b99      	ldrb	r1, [r3, #14]
    3632:	43b9      	bics	r1, r7
    3634:	4331      	orrs	r1, r6
    3636:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3638:	7b9a      	ldrb	r2, [r3, #14]
    363a:	43aa      	bics	r2, r5
    363c:	4322      	orrs	r2, r4
    363e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3640:	4a0f      	ldr	r2, [pc, #60]	; (3680 <Reset_Handler+0xd8>)
    3642:	6853      	ldr	r3, [r2, #4]
    3644:	2180      	movs	r1, #128	; 0x80
    3646:	430b      	orrs	r3, r1
    3648:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    364a:	4b0e      	ldr	r3, [pc, #56]	; (3684 <Reset_Handler+0xdc>)
    364c:	4798      	blx	r3
        main();
    364e:	4b0e      	ldr	r3, [pc, #56]	; (3688 <Reset_Handler+0xe0>)
    3650:	4798      	blx	r3
    3652:	e7fe      	b.n	3652 <Reset_Handler+0xaa>
    3654:	00007cb8 	.word	0x00007cb8
    3658:	20000000 	.word	0x20000000
    365c:	200000d0 	.word	0x200000d0
    3660:	20000004 	.word	0x20000004
    3664:	200000d0 	.word	0x200000d0
    3668:	20000cfc 	.word	0x20000cfc
    366c:	e000ed00 	.word	0xe000ed00
    3670:	00000000 	.word	0x00000000
    3674:	41007000 	.word	0x41007000
    3678:	41005000 	.word	0x41005000
    367c:	41004800 	.word	0x41004800
    3680:	41004000 	.word	0x41004000
    3684:	0000627d 	.word	0x0000627d
    3688:	00005871 	.word	0x00005871

0000368c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    368c:	b5f0      	push	{r4, r5, r6, r7, lr}
    368e:	46c6      	mov	lr, r8
    3690:	b500      	push	{lr}
    3692:	000c      	movs	r4, r1
    3694:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3696:	2800      	cmp	r0, #0
    3698:	d10f      	bne.n	36ba <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    369a:	2a00      	cmp	r2, #0
    369c:	dd11      	ble.n	36c2 <_read+0x36>
    369e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    36a0:	4e09      	ldr	r6, [pc, #36]	; (36c8 <_read+0x3c>)
    36a2:	4d0a      	ldr	r5, [pc, #40]	; (36cc <_read+0x40>)
    36a4:	6830      	ldr	r0, [r6, #0]
    36a6:	0021      	movs	r1, r4
    36a8:	682b      	ldr	r3, [r5, #0]
    36aa:	4798      	blx	r3
		ptr++;
    36ac:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    36ae:	42bc      	cmp	r4, r7
    36b0:	d1f8      	bne.n	36a4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    36b2:	4640      	mov	r0, r8
    36b4:	bc04      	pop	{r2}
    36b6:	4690      	mov	r8, r2
    36b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    36ba:	2301      	movs	r3, #1
    36bc:	425b      	negs	r3, r3
    36be:	4698      	mov	r8, r3
    36c0:	e7f7      	b.n	36b2 <_read+0x26>
	for (; len > 0; --len) {
    36c2:	4680      	mov	r8, r0
    36c4:	e7f5      	b.n	36b2 <_read+0x26>
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	20000a58 	.word	0x20000a58
    36cc:	20000a50 	.word	0x20000a50

000036d0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    36d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d2:	46c6      	mov	lr, r8
    36d4:	b500      	push	{lr}
    36d6:	000e      	movs	r6, r1
    36d8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    36da:	3801      	subs	r0, #1
    36dc:	2802      	cmp	r0, #2
    36de:	d810      	bhi.n	3702 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    36e0:	2a00      	cmp	r2, #0
    36e2:	d011      	beq.n	3708 <_write+0x38>
    36e4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    36e6:	4b0c      	ldr	r3, [pc, #48]	; (3718 <_write+0x48>)
    36e8:	4698      	mov	r8, r3
    36ea:	4f0c      	ldr	r7, [pc, #48]	; (371c <_write+0x4c>)
    36ec:	4643      	mov	r3, r8
    36ee:	6818      	ldr	r0, [r3, #0]
    36f0:	5d31      	ldrb	r1, [r6, r4]
    36f2:	683b      	ldr	r3, [r7, #0]
    36f4:	4798      	blx	r3
    36f6:	2800      	cmp	r0, #0
    36f8:	db08      	blt.n	370c <_write+0x3c>
			return -1;
		}
		++nChars;
    36fa:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    36fc:	42a5      	cmp	r5, r4
    36fe:	d1f5      	bne.n	36ec <_write+0x1c>
    3700:	e006      	b.n	3710 <_write+0x40>
		return -1;
    3702:	2401      	movs	r4, #1
    3704:	4264      	negs	r4, r4
    3706:	e003      	b.n	3710 <_write+0x40>
	for (; len != 0; --len) {
    3708:	0014      	movs	r4, r2
    370a:	e001      	b.n	3710 <_write+0x40>
			return -1;
    370c:	2401      	movs	r4, #1
    370e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3710:	0020      	movs	r0, r4
    3712:	bc04      	pop	{r2}
    3714:	4690      	mov	r8, r2
    3716:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3718:	20000a58 	.word	0x20000a58
    371c:	20000a54 	.word	0x20000a54

00003720 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3720:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3722:	4a06      	ldr	r2, [pc, #24]	; (373c <_sbrk+0x1c>)
    3724:	6812      	ldr	r2, [r2, #0]
    3726:	2a00      	cmp	r2, #0
    3728:	d004      	beq.n	3734 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    372a:	4a04      	ldr	r2, [pc, #16]	; (373c <_sbrk+0x1c>)
    372c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    372e:	18c3      	adds	r3, r0, r3
    3730:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3732:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3734:	4902      	ldr	r1, [pc, #8]	; (3740 <_sbrk+0x20>)
    3736:	4a01      	ldr	r2, [pc, #4]	; (373c <_sbrk+0x1c>)
    3738:	6011      	str	r1, [r2, #0]
    373a:	e7f6      	b.n	372a <_sbrk+0xa>
    373c:	200001b8 	.word	0x200001b8
    3740:	20002d00 	.word	0x20002d00

00003744 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3744:	2001      	movs	r0, #1
    3746:	4240      	negs	r0, r0
    3748:	4770      	bx	lr

0000374a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    374a:	2380      	movs	r3, #128	; 0x80
    374c:	019b      	lsls	r3, r3, #6
    374e:	604b      	str	r3, [r1, #4]

	return 0;
}
    3750:	2000      	movs	r0, #0
    3752:	4770      	bx	lr

00003754 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3754:	2000      	movs	r0, #0
    3756:	4770      	bx	lr

00003758 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3758:	b530      	push	{r4, r5, lr}
    375a:	b087      	sub	sp, #28
    375c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    375e:	aa01      	add	r2, sp, #4
    3760:	23a0      	movs	r3, #160	; 0xa0
    3762:	011b      	lsls	r3, r3, #4
    3764:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3766:	2300      	movs	r3, #0
    3768:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    376a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    376c:	21fa      	movs	r1, #250	; 0xfa
    376e:	00c9      	lsls	r1, r1, #3
    3770:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    3772:	2101      	movs	r1, #1
    3774:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3776:	2004      	movs	r0, #4
    3778:	7210      	strb	r0, [r2, #8]
    377a:	7253      	strb	r3, [r2, #9]
    377c:	7293      	strb	r3, [r2, #10]
    377e:	72d3      	strb	r3, [r2, #11]
    3780:	7311      	strb	r1, [r2, #12]
    3782:	7351      	strb	r1, [r2, #13]
    3784:	4b14      	ldr	r3, [pc, #80]	; (37d8 <disk_initialize+0x80>)
    3786:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3788:	2306      	movs	r3, #6
    378a:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    378c:	4d13      	ldr	r5, [pc, #76]	; (37dc <disk_initialize+0x84>)
    378e:	4914      	ldr	r1, [pc, #80]	; (37e0 <disk_initialize+0x88>)
    3790:	0028      	movs	r0, r5
    3792:	4b14      	ldr	r3, [pc, #80]	; (37e4 <disk_initialize+0x8c>)
    3794:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3796:	0028      	movs	r0, r5
    3798:	4b13      	ldr	r3, [pc, #76]	; (37e8 <disk_initialize+0x90>)
    379a:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    379c:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    379e:	2c01      	cmp	r4, #1
    37a0:	d901      	bls.n	37a6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    37a2:	b007      	add	sp, #28
    37a4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    37a6:	0020      	movs	r0, r4
    37a8:	4b10      	ldr	r3, [pc, #64]	; (37ec <disk_initialize+0x94>)
    37aa:	4798      	blx	r3
    37ac:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    37ae:	2803      	cmp	r0, #3
    37b0:	d106      	bne.n	37c0 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    37b2:	0020      	movs	r0, r4
    37b4:	4b0d      	ldr	r3, [pc, #52]	; (37ec <disk_initialize+0x94>)
    37b6:	4798      	blx	r3
    37b8:	0003      	movs	r3, r0
		return STA_NOINIT;
    37ba:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    37bc:	2b03      	cmp	r3, #3
    37be:	d0f0      	beq.n	37a2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    37c0:	2b00      	cmp	r3, #0
    37c2:	d106      	bne.n	37d2 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    37c4:	0020      	movs	r0, r4
    37c6:	4b0a      	ldr	r3, [pc, #40]	; (37f0 <disk_initialize+0x98>)
    37c8:	4798      	blx	r3
	return 0;
    37ca:	1e43      	subs	r3, r0, #1
    37cc:	4198      	sbcs	r0, r3
    37ce:	0080      	lsls	r0, r0, #2
    37d0:	e7e7      	b.n	37a2 <disk_initialize+0x4a>
		return STA_NOINIT;
    37d2:	2001      	movs	r0, #1
    37d4:	e7e5      	b.n	37a2 <disk_initialize+0x4a>
    37d6:	46c0      	nop			; (mov r8, r8)
    37d8:	000007de 	.word	0x000007de
    37dc:	20000a5c 	.word	0x20000a5c
    37e0:	40001400 	.word	0x40001400
    37e4:	00001b85 	.word	0x00001b85
    37e8:	00001a41 	.word	0x00001a41
    37ec:	00001919 	.word	0x00001919
    37f0:	00001955 	.word	0x00001955

000037f4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    37f4:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    37f6:	4b05      	ldr	r3, [pc, #20]	; (380c <disk_status+0x18>)
    37f8:	4798      	blx	r3
    37fa:	1e03      	subs	r3, r0, #0
    37fc:	d004      	beq.n	3808 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    37fe:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3800:	2b02      	cmp	r3, #2
    3802:	d000      	beq.n	3806 <disk_status+0x12>
	default:
		return STA_NOINIT;
    3804:	3802      	subs	r0, #2
	}
}
    3806:	bd10      	pop	{r4, pc}
		return 0;
    3808:	2000      	movs	r0, #0
    380a:	e7fc      	b.n	3806 <disk_status+0x12>
    380c:	00001919 	.word	0x00001919

00003810 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3810:	b5f0      	push	{r4, r5, r6, r7, lr}
    3812:	46de      	mov	lr, fp
    3814:	464f      	mov	r7, r9
    3816:	4646      	mov	r6, r8
    3818:	b5c0      	push	{r6, r7, lr}
    381a:	b084      	sub	sp, #16
    381c:	9001      	str	r0, [sp, #4]
    381e:	000d      	movs	r5, r1
    3820:	0014      	movs	r4, r2
    3822:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3824:	4b18      	ldr	r3, [pc, #96]	; (3888 <disk_read+0x78>)
    3826:	4798      	blx	r3
    3828:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    382a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    382c:	2e00      	cmp	r6, #0
    382e:	d105      	bne.n	383c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3830:	b004      	add	sp, #16
    3832:	bc1c      	pop	{r2, r3, r4}
    3834:	4690      	mov	r8, r2
    3836:	4699      	mov	r9, r3
    3838:	46a3      	mov	fp, r4
    383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    383c:	a903      	add	r1, sp, #12
    383e:	9801      	ldr	r0, [sp, #4]
    3840:	4b12      	ldr	r3, [pc, #72]	; (388c <disk_read+0x7c>)
    3842:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3844:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3846:	0032      	movs	r2, r6
    3848:	437a      	muls	r2, r7
    384a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    384c:	9b03      	ldr	r3, [sp, #12]
    384e:	3301      	adds	r3, #1
    3850:	4373      	muls	r3, r6
		return RES_PARERR;
    3852:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3854:	429a      	cmp	r2, r3
    3856:	d8eb      	bhi.n	3830 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3858:	2f00      	cmp	r7, #0
    385a:	d011      	beq.n	3880 <disk_read+0x70>
    385c:	0273      	lsls	r3, r6, #9
    385e:	4698      	mov	r8, r3
    3860:	1c7b      	adds	r3, r7, #1
    3862:	469b      	mov	fp, r3
    3864:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3866:	4e0a      	ldr	r6, [pc, #40]	; (3890 <disk_read+0x80>)
    3868:	002a      	movs	r2, r5
    386a:	0021      	movs	r1, r4
    386c:	9801      	ldr	r0, [sp, #4]
    386e:	47b0      	blx	r6
    3870:	2800      	cmp	r0, #0
    3872:	d107      	bne.n	3884 <disk_read+0x74>
    3874:	3701      	adds	r7, #1
    3876:	444c      	add	r4, r9
    3878:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    387a:	455f      	cmp	r7, fp
    387c:	d1f4      	bne.n	3868 <disk_read+0x58>
    387e:	e7d7      	b.n	3830 <disk_read+0x20>
	return RES_OK;
    3880:	2000      	movs	r0, #0
    3882:	e7d5      	b.n	3830 <disk_read+0x20>
			return RES_ERROR;
    3884:	2001      	movs	r0, #1
    3886:	e7d3      	b.n	3830 <disk_read+0x20>
    3888:	0000194d 	.word	0x0000194d
    388c:	00001931 	.word	0x00001931
    3890:	0000196d 	.word	0x0000196d

00003894 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3894:	b5f0      	push	{r4, r5, r6, r7, lr}
    3896:	46de      	mov	lr, fp
    3898:	464f      	mov	r7, r9
    389a:	4646      	mov	r6, r8
    389c:	b5c0      	push	{r6, r7, lr}
    389e:	b084      	sub	sp, #16
    38a0:	9001      	str	r0, [sp, #4]
    38a2:	000d      	movs	r5, r1
    38a4:	0014      	movs	r4, r2
    38a6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    38a8:	4b18      	ldr	r3, [pc, #96]	; (390c <disk_write+0x78>)
    38aa:	4798      	blx	r3
    38ac:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    38ae:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    38b0:	2e00      	cmp	r6, #0
    38b2:	d105      	bne.n	38c0 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    38b4:	b004      	add	sp, #16
    38b6:	bc1c      	pop	{r2, r3, r4}
    38b8:	4690      	mov	r8, r2
    38ba:	4699      	mov	r9, r3
    38bc:	46a3      	mov	fp, r4
    38be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    38c0:	a903      	add	r1, sp, #12
    38c2:	9801      	ldr	r0, [sp, #4]
    38c4:	4b12      	ldr	r3, [pc, #72]	; (3910 <disk_write+0x7c>)
    38c6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    38c8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    38ca:	0032      	movs	r2, r6
    38cc:	437a      	muls	r2, r7
    38ce:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    38d0:	9b03      	ldr	r3, [sp, #12]
    38d2:	3301      	adds	r3, #1
    38d4:	4373      	muls	r3, r6
		return RES_PARERR;
    38d6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    38d8:	429a      	cmp	r2, r3
    38da:	d8eb      	bhi.n	38b4 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    38dc:	2f00      	cmp	r7, #0
    38de:	d011      	beq.n	3904 <disk_write+0x70>
    38e0:	0273      	lsls	r3, r6, #9
    38e2:	4698      	mov	r8, r3
    38e4:	1c7b      	adds	r3, r7, #1
    38e6:	469b      	mov	fp, r3
    38e8:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    38ea:	4e0a      	ldr	r6, [pc, #40]	; (3914 <disk_write+0x80>)
    38ec:	002a      	movs	r2, r5
    38ee:	0021      	movs	r1, r4
    38f0:	9801      	ldr	r0, [sp, #4]
    38f2:	47b0      	blx	r6
    38f4:	2800      	cmp	r0, #0
    38f6:	d107      	bne.n	3908 <disk_write+0x74>
    38f8:	3701      	adds	r7, #1
    38fa:	444c      	add	r4, r9
    38fc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    38fe:	455f      	cmp	r7, fp
    3900:	d1f4      	bne.n	38ec <disk_write+0x58>
    3902:	e7d7      	b.n	38b4 <disk_write+0x20>
	return RES_OK;
    3904:	2000      	movs	r0, #0
    3906:	e7d5      	b.n	38b4 <disk_write+0x20>
			return RES_ERROR;
    3908:	2001      	movs	r0, #1
    390a:	e7d3      	b.n	38b4 <disk_write+0x20>
    390c:	0000194d 	.word	0x0000194d
    3910:	00001931 	.word	0x00001931
    3914:	0000198d 	.word	0x0000198d

00003918 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3918:	b510      	push	{r4, lr}
    391a:	b082      	sub	sp, #8
    391c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    391e:	2901      	cmp	r1, #1
    3920:	d00b      	beq.n	393a <disk_ioctl+0x22>
    3922:	2900      	cmp	r1, #0
    3924:	d020      	beq.n	3968 <disk_ioctl+0x50>
    3926:	2902      	cmp	r1, #2
    3928:	d00f      	beq.n	394a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    392a:	2004      	movs	r0, #4
	switch (ctrl) {
    392c:	2903      	cmp	r1, #3
    392e:	d102      	bne.n	3936 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3930:	2301      	movs	r3, #1
    3932:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3934:	2000      	movs	r0, #0
	}

	return res;
}
    3936:	b002      	add	sp, #8
    3938:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    393a:	a901      	add	r1, sp, #4
    393c:	4b0e      	ldr	r3, [pc, #56]	; (3978 <disk_ioctl+0x60>)
    393e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	3301      	adds	r3, #1
    3944:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3946:	2000      	movs	r0, #0
	break;
    3948:	e7f5      	b.n	3936 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    394a:	4b0c      	ldr	r3, [pc, #48]	; (397c <disk_ioctl+0x64>)
    394c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    394e:	1e43      	subs	r3, r0, #1
    3950:	b2db      	uxtb	r3, r3
    3952:	2b01      	cmp	r3, #1
    3954:	d904      	bls.n	3960 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3956:	1f03      	subs	r3, r0, #4
    3958:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    395a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    395c:	4213      	tst	r3, r2
    395e:	d1ea      	bne.n	3936 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3960:	2300      	movs	r3, #0
    3962:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3964:	2000      	movs	r0, #0
	break;
    3966:	e7e6      	b.n	3936 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3968:	4b05      	ldr	r3, [pc, #20]	; (3980 <disk_ioctl+0x68>)
    396a:	4798      	blx	r3
    396c:	2800      	cmp	r0, #0
    396e:	d001      	beq.n	3974 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3970:	2003      	movs	r0, #3
    3972:	e7e0      	b.n	3936 <disk_ioctl+0x1e>
			res = RES_OK;
    3974:	2000      	movs	r0, #0
    3976:	e7de      	b.n	3936 <disk_ioctl+0x1e>
    3978:	00001931 	.word	0x00001931
    397c:	0000194d 	.word	0x0000194d
    3980:	00001919 	.word	0x00001919

00003984 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3984:	b500      	push	{lr}
    3986:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3988:	4669      	mov	r1, sp
    398a:	480f      	ldr	r0, [pc, #60]	; (39c8 <get_fattime+0x44>)
    398c:	4b0f      	ldr	r3, [pc, #60]	; (39cc <get_fattime+0x48>)
    398e:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    3990:	466b      	mov	r3, sp
    3992:	7958      	ldrb	r0, [r3, #5]
    3994:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    3996:	791b      	ldrb	r3, [r3, #4]
    3998:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    399a:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    399c:	466b      	mov	r3, sp
    399e:	789b      	ldrb	r3, [r3, #2]
    39a0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    39a2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    39a4:	466b      	mov	r3, sp
    39a6:	785b      	ldrb	r3, [r3, #1]
    39a8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    39aa:	4318      	orrs	r0, r3
    39ac:	466b      	mov	r3, sp
    39ae:	781b      	ldrb	r3, [r3, #0]
    39b0:	085b      	lsrs	r3, r3, #1
    39b2:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    39b4:	466b      	mov	r3, sp
    39b6:	88db      	ldrh	r3, [r3, #6]
    39b8:	4a05      	ldr	r2, [pc, #20]	; (39d0 <get_fattime+0x4c>)
    39ba:	4694      	mov	ip, r2
    39bc:	4463      	add	r3, ip
    39be:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    39c0:	4318      	orrs	r0, r3

	return ul_time;
}
    39c2:	b003      	add	sp, #12
    39c4:	bd00      	pop	{pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	20000a5c 	.word	0x20000a5c
    39cc:	00001b0d 	.word	0x00001b0d
    39d0:	fffff844 	.word	0xfffff844

000039d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    39d4:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    39d6:	2a00      	cmp	r2, #0
    39d8:	d005      	beq.n	39e6 <mem_cpy+0x12>
    39da:	2300      	movs	r3, #0
		*d++ = *s++;
    39dc:	5ccc      	ldrb	r4, [r1, r3]
    39de:	54c4      	strb	r4, [r0, r3]
    39e0:	3301      	adds	r3, #1
	while (cnt--)
    39e2:	4293      	cmp	r3, r2
    39e4:	d1fa      	bne.n	39dc <mem_cpy+0x8>
}
    39e6:	bd10      	pop	{r4, pc}

000039e8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    39e8:	2a00      	cmp	r2, #0
    39ea:	d005      	beq.n	39f8 <mem_set+0x10>
    39ec:	0003      	movs	r3, r0
    39ee:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    39f0:	7019      	strb	r1, [r3, #0]
    39f2:	3301      	adds	r3, #1
	while (cnt--)
    39f4:	4293      	cmp	r3, r2
    39f6:	d1fb      	bne.n	39f0 <mem_set+0x8>
}
    39f8:	4770      	bx	lr

000039fa <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    39fa:	0002      	movs	r2, r0
	clst -= 2;
    39fc:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    39fe:	6983      	ldr	r3, [r0, #24]
    3a00:	3b02      	subs	r3, #2
    3a02:	2000      	movs	r0, #0
    3a04:	4299      	cmp	r1, r3
    3a06:	d203      	bcs.n	3a10 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3a08:	7890      	ldrb	r0, [r2, #2]
    3a0a:	4341      	muls	r1, r0
    3a0c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3a0e:	1808      	adds	r0, r1, r0
}
    3a10:	4770      	bx	lr

00003a12 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3a12:	0002      	movs	r2, r0
    3a14:	0001      	movs	r1, r0
    3a16:	310b      	adds	r1, #11
	BYTE sum = 0;
    3a18:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3a1a:	0843      	lsrs	r3, r0, #1
    3a1c:	01c0      	lsls	r0, r0, #7
    3a1e:	4303      	orrs	r3, r0
    3a20:	7810      	ldrb	r0, [r2, #0]
    3a22:	1818      	adds	r0, r3, r0
    3a24:	b2c0      	uxtb	r0, r0
    3a26:	3201      	adds	r2, #1
    3a28:	428a      	cmp	r2, r1
    3a2a:	d1f6      	bne.n	3a1a <sum_sfn+0x8>
	return sum;
}
    3a2c:	4770      	bx	lr
	...

00003a30 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3a30:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3a32:	2800      	cmp	r0, #0
    3a34:	d010      	beq.n	3a58 <validate+0x28>
    3a36:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3a38:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3a3a:	2a00      	cmp	r2, #0
    3a3c:	d101      	bne.n	3a42 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3a3e:	0018      	movs	r0, r3
    3a40:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3a42:	88c2      	ldrh	r2, [r0, #6]
    3a44:	428a      	cmp	r2, r1
    3a46:	d1fa      	bne.n	3a3e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3a48:	7840      	ldrb	r0, [r0, #1]
    3a4a:	4b04      	ldr	r3, [pc, #16]	; (3a5c <validate+0x2c>)
    3a4c:	4798      	blx	r3
		return FR_NOT_READY;
    3a4e:	2303      	movs	r3, #3
	return FR_OK;
    3a50:	07c0      	lsls	r0, r0, #31
    3a52:	17c0      	asrs	r0, r0, #31
    3a54:	4003      	ands	r3, r0
    3a56:	e7f2      	b.n	3a3e <validate+0xe>
		return FR_INVALID_OBJECT;
    3a58:	2309      	movs	r3, #9
    3a5a:	e7f0      	b.n	3a3e <validate+0xe>
    3a5c:	000037f5 	.word	0x000037f5

00003a60 <check_fs>:
{
    3a60:	b570      	push	{r4, r5, r6, lr}
    3a62:	0004      	movs	r4, r0
    3a64:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3a66:	0001      	movs	r1, r0
    3a68:	3130      	adds	r1, #48	; 0x30
    3a6a:	7840      	ldrb	r0, [r0, #1]
    3a6c:	2301      	movs	r3, #1
    3a6e:	4d1f      	ldr	r5, [pc, #124]	; (3aec <check_fs+0x8c>)
    3a70:	47a8      	blx	r5
		return 3;
    3a72:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3a74:	2800      	cmp	r0, #0
    3a76:	d001      	beq.n	3a7c <check_fs+0x1c>
}
    3a78:	0018      	movs	r0, r3
    3a7a:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3a7c:	4b1c      	ldr	r3, [pc, #112]	; (3af0 <check_fs+0x90>)
    3a7e:	5ce3      	ldrb	r3, [r4, r3]
    3a80:	021b      	lsls	r3, r3, #8
    3a82:	4a1c      	ldr	r2, [pc, #112]	; (3af4 <check_fs+0x94>)
    3a84:	5ca2      	ldrb	r2, [r4, r2]
    3a86:	431a      	orrs	r2, r3
    3a88:	491b      	ldr	r1, [pc, #108]	; (3af8 <check_fs+0x98>)
    3a8a:	b212      	sxth	r2, r2
		return 2;
    3a8c:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3a8e:	428a      	cmp	r2, r1
    3a90:	d1f2      	bne.n	3a78 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3a92:	3367      	adds	r3, #103	; 0x67
    3a94:	5ce3      	ldrb	r3, [r4, r3]
    3a96:	061b      	lsls	r3, r3, #24
    3a98:	2268      	movs	r2, #104	; 0x68
    3a9a:	5ca2      	ldrb	r2, [r4, r2]
    3a9c:	0412      	lsls	r2, r2, #16
    3a9e:	4313      	orrs	r3, r2
    3aa0:	2266      	movs	r2, #102	; 0x66
    3aa2:	5ca2      	ldrb	r2, [r4, r2]
    3aa4:	4313      	orrs	r3, r2
    3aa6:	2267      	movs	r2, #103	; 0x67
    3aa8:	5ca2      	ldrb	r2, [r4, r2]
    3aaa:	0212      	lsls	r2, r2, #8
    3aac:	4313      	orrs	r3, r2
    3aae:	021b      	lsls	r3, r3, #8
    3ab0:	0a1b      	lsrs	r3, r3, #8
    3ab2:	4a12      	ldr	r2, [pc, #72]	; (3afc <check_fs+0x9c>)
    3ab4:	4293      	cmp	r3, r2
    3ab6:	d016      	beq.n	3ae6 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3ab8:	2385      	movs	r3, #133	; 0x85
    3aba:	5ce3      	ldrb	r3, [r4, r3]
    3abc:	061b      	lsls	r3, r3, #24
    3abe:	2284      	movs	r2, #132	; 0x84
    3ac0:	5ca2      	ldrb	r2, [r4, r2]
    3ac2:	0412      	lsls	r2, r2, #16
    3ac4:	4313      	orrs	r3, r2
    3ac6:	2282      	movs	r2, #130	; 0x82
    3ac8:	5ca2      	ldrb	r2, [r4, r2]
    3aca:	4313      	orrs	r3, r2
    3acc:	2283      	movs	r2, #131	; 0x83
    3ace:	5ca2      	ldrb	r2, [r4, r2]
    3ad0:	0212      	lsls	r2, r2, #8
    3ad2:	4313      	orrs	r3, r2
    3ad4:	021b      	lsls	r3, r3, #8
    3ad6:	0a1b      	lsrs	r3, r3, #8
    3ad8:	4a09      	ldr	r2, [pc, #36]	; (3b00 <check_fs+0xa0>)
    3ada:	4694      	mov	ip, r2
    3adc:	4463      	add	r3, ip
    3ade:	1e58      	subs	r0, r3, #1
    3ae0:	4183      	sbcs	r3, r0
		return 3;
    3ae2:	b2db      	uxtb	r3, r3
    3ae4:	e7c8      	b.n	3a78 <check_fs+0x18>
		return 0;
    3ae6:	2300      	movs	r3, #0
    3ae8:	e7c6      	b.n	3a78 <check_fs+0x18>
    3aea:	46c0      	nop			; (mov r8, r8)
    3aec:	00003811 	.word	0x00003811
    3af0:	0000022f 	.word	0x0000022f
    3af4:	0000022e 	.word	0x0000022e
    3af8:	ffffaa55 	.word	0xffffaa55
    3afc:	00544146 	.word	0x00544146
    3b00:	ffabbeba 	.word	0xffabbeba

00003b04 <chk_mounted>:
{
    3b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b06:	46d6      	mov	lr, sl
    3b08:	464f      	mov	r7, r9
    3b0a:	4646      	mov	r6, r8
    3b0c:	b5c0      	push	{r6, r7, lr}
    3b0e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3b10:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3b12:	781c      	ldrb	r4, [r3, #0]
    3b14:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3b16:	2c09      	cmp	r4, #9
    3b18:	d80e      	bhi.n	3b38 <chk_mounted+0x34>
    3b1a:	785a      	ldrb	r2, [r3, #1]
    3b1c:	2a3a      	cmp	r2, #58	; 0x3a
    3b1e:	d001      	beq.n	3b24 <chk_mounted+0x20>
    3b20:	2400      	movs	r4, #0
    3b22:	e00a      	b.n	3b3a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3b24:	3302      	adds	r3, #2
    3b26:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3b28:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3b2a:	2c07      	cmp	r4, #7
    3b2c:	d905      	bls.n	3b3a <chk_mounted+0x36>
}
    3b2e:	bc1c      	pop	{r2, r3, r4}
    3b30:	4690      	mov	r8, r2
    3b32:	4699      	mov	r9, r3
    3b34:	46a2      	mov	sl, r4
    3b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b38:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3b3a:	00a3      	lsls	r3, r4, #2
    3b3c:	4ac5      	ldr	r2, [pc, #788]	; (3e54 <chk_mounted+0x350>)
    3b3e:	589e      	ldr	r6, [r3, r2]
    3b40:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3b42:	2e00      	cmp	r6, #0
    3b44:	d100      	bne.n	3b48 <chk_mounted+0x44>
    3b46:	e0e8      	b.n	3d1a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3b48:	7833      	ldrb	r3, [r6, #0]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d00d      	beq.n	3b6a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3b4e:	7870      	ldrb	r0, [r6, #1]
    3b50:	4bc1      	ldr	r3, [pc, #772]	; (3e58 <chk_mounted+0x354>)
    3b52:	4798      	blx	r3
    3b54:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3b56:	07c2      	lsls	r2, r0, #31
    3b58:	d407      	bmi.n	3b6a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3b5a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3b5c:	2d00      	cmp	r5, #0
    3b5e:	d0e6      	beq.n	3b2e <chk_mounted+0x2a>
    3b60:	075b      	lsls	r3, r3, #29
    3b62:	d400      	bmi.n	3b66 <chk_mounted+0x62>
    3b64:	e0db      	b.n	3d1e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3b66:	300a      	adds	r0, #10
    3b68:	e7e1      	b.n	3b2e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3b6a:	2300      	movs	r3, #0
    3b6c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3b6e:	b2e0      	uxtb	r0, r4
    3b70:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3b72:	4bba      	ldr	r3, [pc, #744]	; (3e5c <chk_mounted+0x358>)
    3b74:	4798      	blx	r3
    3b76:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3b78:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3b7a:	07da      	lsls	r2, r3, #31
    3b7c:	d4d7      	bmi.n	3b2e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3b7e:	2d00      	cmp	r5, #0
    3b80:	d002      	beq.n	3b88 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3b82:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3b84:	075b      	lsls	r3, r3, #29
    3b86:	d4d2      	bmi.n	3b2e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3b88:	2100      	movs	r1, #0
    3b8a:	0030      	movs	r0, r6
    3b8c:	4bb4      	ldr	r3, [pc, #720]	; (3e60 <chk_mounted+0x35c>)
    3b8e:	4798      	blx	r3
    3b90:	0003      	movs	r3, r0
    3b92:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3b94:	2801      	cmp	r0, #1
    3b96:	d100      	bne.n	3b9a <chk_mounted+0x96>
    3b98:	e09a      	b.n	3cd0 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    3b9a:	2b03      	cmp	r3, #3
    3b9c:	d100      	bne.n	3ba0 <chk_mounted+0x9c>
    3b9e:	e0c0      	b.n	3d22 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3ba0:	200d      	movs	r0, #13
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d1c3      	bne.n	3b2e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3ba6:	333c      	adds	r3, #60	; 0x3c
    3ba8:	5cf2      	ldrb	r2, [r6, r3]
    3baa:	0212      	lsls	r2, r2, #8
    3bac:	3b01      	subs	r3, #1
    3bae:	5cf3      	ldrb	r3, [r6, r3]
    3bb0:	4313      	orrs	r3, r2
    3bb2:	2280      	movs	r2, #128	; 0x80
    3bb4:	0092      	lsls	r2, r2, #2
    3bb6:	b21b      	sxth	r3, r3
    3bb8:	4293      	cmp	r3, r2
    3bba:	d1b8      	bne.n	3b2e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3bbc:	2347      	movs	r3, #71	; 0x47
    3bbe:	5cf3      	ldrb	r3, [r6, r3]
    3bc0:	021b      	lsls	r3, r3, #8
    3bc2:	3abb      	subs	r2, #187	; 0xbb
    3bc4:	3aff      	subs	r2, #255	; 0xff
    3bc6:	5cb5      	ldrb	r5, [r6, r2]
    3bc8:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3bca:	d10d      	bne.n	3be8 <chk_mounted+0xe4>
    3bcc:	2357      	movs	r3, #87	; 0x57
    3bce:	5cf5      	ldrb	r5, [r6, r3]
    3bd0:	062d      	lsls	r5, r5, #24
    3bd2:	3b01      	subs	r3, #1
    3bd4:	5cf3      	ldrb	r3, [r6, r3]
    3bd6:	041b      	lsls	r3, r3, #16
    3bd8:	431d      	orrs	r5, r3
    3bda:	2354      	movs	r3, #84	; 0x54
    3bdc:	5cf3      	ldrb	r3, [r6, r3]
    3bde:	431d      	orrs	r5, r3
    3be0:	2355      	movs	r3, #85	; 0x55
    3be2:	5cf3      	ldrb	r3, [r6, r3]
    3be4:	021b      	lsls	r3, r3, #8
    3be6:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    3be8:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3bea:	2340      	movs	r3, #64	; 0x40
    3bec:	5cf2      	ldrb	r2, [r6, r3]
    3bee:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3bf0:	1e53      	subs	r3, r2, #1
    3bf2:	200d      	movs	r0, #13
    3bf4:	2b01      	cmp	r3, #1
    3bf6:	d89a      	bhi.n	3b2e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3bf8:	233d      	movs	r3, #61	; 0x3d
    3bfa:	5cf1      	ldrb	r1, [r6, r3]
    3bfc:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3bfe:	2900      	cmp	r1, #0
    3c00:	d095      	beq.n	3b2e <chk_mounted+0x2a>
    3c02:	1e4b      	subs	r3, r1, #1
    3c04:	4219      	tst	r1, r3
    3c06:	d192      	bne.n	3b2e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3c08:	2342      	movs	r3, #66	; 0x42
    3c0a:	5cf3      	ldrb	r3, [r6, r3]
    3c0c:	021b      	lsls	r3, r3, #8
    3c0e:	3034      	adds	r0, #52	; 0x34
    3c10:	5c30      	ldrb	r0, [r6, r0]
    3c12:	4318      	orrs	r0, r3
    3c14:	4680      	mov	r8, r0
    3c16:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3c18:	200d      	movs	r0, #13
    3c1a:	4643      	mov	r3, r8
    3c1c:	071b      	lsls	r3, r3, #28
    3c1e:	d000      	beq.n	3c22 <chk_mounted+0x11e>
    3c20:	e785      	b.n	3b2e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3c22:	2344      	movs	r3, #68	; 0x44
    3c24:	5cf3      	ldrb	r3, [r6, r3]
    3c26:	021b      	lsls	r3, r3, #8
    3c28:	3036      	adds	r0, #54	; 0x36
    3c2a:	5c30      	ldrb	r0, [r6, r0]
    3c2c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3c2e:	d10d      	bne.n	3c4c <chk_mounted+0x148>
    3c30:	3353      	adds	r3, #83	; 0x53
    3c32:	5cf3      	ldrb	r3, [r6, r3]
    3c34:	061b      	lsls	r3, r3, #24
    3c36:	2052      	movs	r0, #82	; 0x52
    3c38:	5c30      	ldrb	r0, [r6, r0]
    3c3a:	0400      	lsls	r0, r0, #16
    3c3c:	4303      	orrs	r3, r0
    3c3e:	2050      	movs	r0, #80	; 0x50
    3c40:	5c30      	ldrb	r0, [r6, r0]
    3c42:	4303      	orrs	r3, r0
    3c44:	2051      	movs	r0, #81	; 0x51
    3c46:	5c30      	ldrb	r0, [r6, r0]
    3c48:	0200      	lsls	r0, r0, #8
    3c4a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3c4c:	203f      	movs	r0, #63	; 0x3f
    3c4e:	5c30      	ldrb	r0, [r6, r0]
    3c50:	0200      	lsls	r0, r0, #8
    3c52:	273e      	movs	r7, #62	; 0x3e
    3c54:	5df7      	ldrb	r7, [r6, r7]
    3c56:	4307      	orrs	r7, r0
    3c58:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3c5a:	200d      	movs	r0, #13
    3c5c:	2f00      	cmp	r7, #0
    3c5e:	d100      	bne.n	3c62 <chk_mounted+0x15e>
    3c60:	e765      	b.n	3b2e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3c62:	436a      	muls	r2, r5
    3c64:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3c66:	4642      	mov	r2, r8
    3c68:	0917      	lsrs	r7, r2, #4
    3c6a:	4457      	add	r7, sl
    3c6c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3c6e:	42bb      	cmp	r3, r7
    3c70:	d200      	bcs.n	3c74 <chk_mounted+0x170>
    3c72:	e75c      	b.n	3b2e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3c74:	1bd8      	subs	r0, r3, r7
    3c76:	4b7b      	ldr	r3, [pc, #492]	; (3e64 <chk_mounted+0x360>)
    3c78:	4798      	blx	r3
    3c7a:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3c7c:	200d      	movs	r0, #13
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d100      	bne.n	3c84 <chk_mounted+0x180>
    3c82:	e754      	b.n	3b2e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3c84:	4a78      	ldr	r2, [pc, #480]	; (3e68 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3c86:	429a      	cmp	r2, r3
    3c88:	4192      	sbcs	r2, r2
    3c8a:	4252      	negs	r2, r2
    3c8c:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3c8e:	4977      	ldr	r1, [pc, #476]	; (3e6c <chk_mounted+0x368>)
    3c90:	428b      	cmp	r3, r1
    3c92:	d848      	bhi.n	3d26 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3c94:	3302      	adds	r3, #2
    3c96:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3c98:	19e7      	adds	r7, r4, r7
    3c9a:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3c9c:	4454      	add	r4, sl
    3c9e:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3ca0:	200d      	movs	r0, #13
    3ca2:	4641      	mov	r1, r8
    3ca4:	2900      	cmp	r1, #0
    3ca6:	d100      	bne.n	3caa <chk_mounted+0x1a6>
    3ca8:	e741      	b.n	3b2e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3caa:	444c      	add	r4, r9
    3cac:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3cae:	2a02      	cmp	r2, #2
    3cb0:	d12c      	bne.n	3d0c <chk_mounted+0x208>
    3cb2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3cb4:	496e      	ldr	r1, [pc, #440]	; (3e70 <chk_mounted+0x36c>)
    3cb6:	468c      	mov	ip, r1
    3cb8:	4463      	add	r3, ip
    3cba:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3cbc:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3cbe:	429d      	cmp	r5, r3
    3cc0:	d200      	bcs.n	3cc4 <chk_mounted+0x1c0>
    3cc2:	e734      	b.n	3b2e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3cc4:	2301      	movs	r3, #1
    3cc6:	425b      	negs	r3, r3
    3cc8:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3cca:	2300      	movs	r3, #0
    3ccc:	60f3      	str	r3, [r6, #12]
    3cce:	e0b6      	b.n	3e3e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3cd0:	33f2      	adds	r3, #242	; 0xf2
    3cd2:	33ff      	adds	r3, #255	; 0xff
    3cd4:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3cd6:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d100      	bne.n	3cde <chk_mounted+0x1da>
    3cdc:	e727      	b.n	3b2e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3cde:	23fa      	movs	r3, #250	; 0xfa
    3ce0:	33ff      	adds	r3, #255	; 0xff
    3ce2:	5cf4      	ldrb	r4, [r6, r3]
    3ce4:	0624      	lsls	r4, r4, #24
    3ce6:	3b01      	subs	r3, #1
    3ce8:	5cf3      	ldrb	r3, [r6, r3]
    3cea:	041b      	lsls	r3, r3, #16
    3cec:	431c      	orrs	r4, r3
    3cee:	23fb      	movs	r3, #251	; 0xfb
    3cf0:	005b      	lsls	r3, r3, #1
    3cf2:	5cf3      	ldrb	r3, [r6, r3]
    3cf4:	431c      	orrs	r4, r3
    3cf6:	23f8      	movs	r3, #248	; 0xf8
    3cf8:	33ff      	adds	r3, #255	; 0xff
    3cfa:	5cf2      	ldrb	r2, [r6, r3]
    3cfc:	0212      	lsls	r2, r2, #8
    3cfe:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3d00:	0021      	movs	r1, r4
    3d02:	0030      	movs	r0, r6
    3d04:	4b56      	ldr	r3, [pc, #344]	; (3e60 <chk_mounted+0x35c>)
    3d06:	4798      	blx	r3
    3d08:	0003      	movs	r3, r0
    3d0a:	e746      	b.n	3b9a <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3d0c:	2103      	movs	r1, #3
    3d0e:	4359      	muls	r1, r3
    3d10:	0849      	lsrs	r1, r1, #1
    3d12:	2001      	movs	r0, #1
    3d14:	4003      	ands	r3, r0
    3d16:	18cb      	adds	r3, r1, r3
    3d18:	e7cc      	b.n	3cb4 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3d1a:	200c      	movs	r0, #12
    3d1c:	e707      	b.n	3b2e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3d1e:	2000      	movs	r0, #0
    3d20:	e705      	b.n	3b2e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3d22:	2001      	movs	r0, #1
    3d24:	e703      	b.n	3b2e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3d26:	3302      	adds	r3, #2
    3d28:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3d2a:	19e7      	adds	r7, r4, r7
    3d2c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3d2e:	4652      	mov	r2, sl
    3d30:	18a2      	adds	r2, r4, r2
    3d32:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3d34:	200d      	movs	r0, #13
    3d36:	4642      	mov	r2, r8
    3d38:	2a00      	cmp	r2, #0
    3d3a:	d000      	beq.n	3d3e <chk_mounted+0x23a>
    3d3c:	e6f7      	b.n	3b2e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3d3e:	225f      	movs	r2, #95	; 0x5f
    3d40:	5cb2      	ldrb	r2, [r6, r2]
    3d42:	0612      	lsls	r2, r2, #24
    3d44:	215e      	movs	r1, #94	; 0x5e
    3d46:	5c71      	ldrb	r1, [r6, r1]
    3d48:	0409      	lsls	r1, r1, #16
    3d4a:	430a      	orrs	r2, r1
    3d4c:	215c      	movs	r1, #92	; 0x5c
    3d4e:	5c71      	ldrb	r1, [r6, r1]
    3d50:	430a      	orrs	r2, r1
    3d52:	215d      	movs	r1, #93	; 0x5d
    3d54:	5c71      	ldrb	r1, [r6, r1]
    3d56:	0209      	lsls	r1, r1, #8
    3d58:	430a      	orrs	r2, r1
    3d5a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3d5c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d5e:	4a44      	ldr	r2, [pc, #272]	; (3e70 <chk_mounted+0x36c>)
    3d60:	4694      	mov	ip, r2
    3d62:	4463      	add	r3, ip
    3d64:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3d66:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d68:	429d      	cmp	r5, r3
    3d6a:	d200      	bcs.n	3d6e <chk_mounted+0x26a>
    3d6c:	e6df      	b.n	3b2e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3d6e:	2301      	movs	r3, #1
    3d70:	425b      	negs	r3, r3
    3d72:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3d74:	2300      	movs	r3, #0
    3d76:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3d78:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3d7a:	3361      	adds	r3, #97	; 0x61
    3d7c:	5cf3      	ldrb	r3, [r6, r3]
    3d7e:	021b      	lsls	r3, r3, #8
    3d80:	2260      	movs	r2, #96	; 0x60
    3d82:	5cb2      	ldrb	r2, [r6, r2]
    3d84:	431a      	orrs	r2, r3
    3d86:	1912      	adds	r2, r2, r4
    3d88:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3d8a:	0031      	movs	r1, r6
    3d8c:	3130      	adds	r1, #48	; 0x30
    3d8e:	7870      	ldrb	r0, [r6, #1]
    3d90:	2301      	movs	r3, #1
    3d92:	4c38      	ldr	r4, [pc, #224]	; (3e74 <chk_mounted+0x370>)
    3d94:	47a0      	blx	r4
    3d96:	2203      	movs	r2, #3
    3d98:	2800      	cmp	r0, #0
    3d9a:	d150      	bne.n	3e3e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3d9c:	4b36      	ldr	r3, [pc, #216]	; (3e78 <chk_mounted+0x374>)
    3d9e:	5cf2      	ldrb	r2, [r6, r3]
    3da0:	0212      	lsls	r2, r2, #8
    3da2:	4b36      	ldr	r3, [pc, #216]	; (3e7c <chk_mounted+0x378>)
    3da4:	5cf3      	ldrb	r3, [r6, r3]
    3da6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3da8:	4935      	ldr	r1, [pc, #212]	; (3e80 <chk_mounted+0x37c>)
    3daa:	b21b      	sxth	r3, r3
    3dac:	2203      	movs	r2, #3
    3dae:	428b      	cmp	r3, r1
    3db0:	d145      	bne.n	3e3e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3db2:	2333      	movs	r3, #51	; 0x33
    3db4:	5cf3      	ldrb	r3, [r6, r3]
    3db6:	061b      	lsls	r3, r3, #24
    3db8:	322f      	adds	r2, #47	; 0x2f
    3dba:	5cb2      	ldrb	r2, [r6, r2]
    3dbc:	0412      	lsls	r2, r2, #16
    3dbe:	4313      	orrs	r3, r2
    3dc0:	2230      	movs	r2, #48	; 0x30
    3dc2:	5cb2      	ldrb	r2, [r6, r2]
    3dc4:	4313      	orrs	r3, r2
    3dc6:	2231      	movs	r2, #49	; 0x31
    3dc8:	5cb2      	ldrb	r2, [r6, r2]
    3dca:	0212      	lsls	r2, r2, #8
    3dcc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3dce:	492d      	ldr	r1, [pc, #180]	; (3e84 <chk_mounted+0x380>)
    3dd0:	2203      	movs	r2, #3
    3dd2:	428b      	cmp	r3, r1
    3dd4:	d133      	bne.n	3e3e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3dd6:	4b2c      	ldr	r3, [pc, #176]	; (3e88 <chk_mounted+0x384>)
    3dd8:	5cf3      	ldrb	r3, [r6, r3]
    3dda:	061b      	lsls	r3, r3, #24
    3ddc:	4a2b      	ldr	r2, [pc, #172]	; (3e8c <chk_mounted+0x388>)
    3dde:	5cb2      	ldrb	r2, [r6, r2]
    3de0:	0412      	lsls	r2, r2, #16
    3de2:	4313      	orrs	r3, r2
    3de4:	2285      	movs	r2, #133	; 0x85
    3de6:	0092      	lsls	r2, r2, #2
    3de8:	5cb2      	ldrb	r2, [r6, r2]
    3dea:	4313      	orrs	r3, r2
    3dec:	4a28      	ldr	r2, [pc, #160]	; (3e90 <chk_mounted+0x38c>)
    3dee:	5cb2      	ldrb	r2, [r6, r2]
    3df0:	0212      	lsls	r2, r2, #8
    3df2:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3df4:	4927      	ldr	r1, [pc, #156]	; (3e94 <chk_mounted+0x390>)
    3df6:	2203      	movs	r2, #3
    3df8:	428b      	cmp	r3, r1
    3dfa:	d120      	bne.n	3e3e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3dfc:	4b26      	ldr	r3, [pc, #152]	; (3e98 <chk_mounted+0x394>)
    3dfe:	5cf3      	ldrb	r3, [r6, r3]
    3e00:	061b      	lsls	r3, r3, #24
    3e02:	4a26      	ldr	r2, [pc, #152]	; (3e9c <chk_mounted+0x398>)
    3e04:	5cb2      	ldrb	r2, [r6, r2]
    3e06:	0412      	lsls	r2, r2, #16
    3e08:	4313      	orrs	r3, r2
    3e0a:	2287      	movs	r2, #135	; 0x87
    3e0c:	0092      	lsls	r2, r2, #2
    3e0e:	5cb2      	ldrb	r2, [r6, r2]
    3e10:	4313      	orrs	r3, r2
    3e12:	4a23      	ldr	r2, [pc, #140]	; (3ea0 <chk_mounted+0x39c>)
    3e14:	5cb2      	ldrb	r2, [r6, r2]
    3e16:	0212      	lsls	r2, r2, #8
    3e18:	4313      	orrs	r3, r2
    3e1a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3e1c:	4b21      	ldr	r3, [pc, #132]	; (3ea4 <chk_mounted+0x3a0>)
    3e1e:	5cf3      	ldrb	r3, [r6, r3]
    3e20:	061b      	lsls	r3, r3, #24
    3e22:	4a21      	ldr	r2, [pc, #132]	; (3ea8 <chk_mounted+0x3a4>)
    3e24:	5cb2      	ldrb	r2, [r6, r2]
    3e26:	0412      	lsls	r2, r2, #16
    3e28:	4313      	orrs	r3, r2
    3e2a:	2286      	movs	r2, #134	; 0x86
    3e2c:	0092      	lsls	r2, r2, #2
    3e2e:	5cb2      	ldrb	r2, [r6, r2]
    3e30:	4313      	orrs	r3, r2
    3e32:	4a1e      	ldr	r2, [pc, #120]	; (3eac <chk_mounted+0x3a8>)
    3e34:	5cb2      	ldrb	r2, [r6, r2]
    3e36:	0212      	lsls	r2, r2, #8
    3e38:	4313      	orrs	r3, r2
    3e3a:	6133      	str	r3, [r6, #16]
    3e3c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3e3e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3e40:	4a1b      	ldr	r2, [pc, #108]	; (3eb0 <chk_mounted+0x3ac>)
    3e42:	8813      	ldrh	r3, [r2, #0]
    3e44:	3301      	adds	r3, #1
    3e46:	b29b      	uxth	r3, r3
    3e48:	8013      	strh	r3, [r2, #0]
    3e4a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3e4c:	2000      	movs	r0, #0
    3e4e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3e50:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3e52:	e66c      	b.n	3b2e <chk_mounted+0x2a>
    3e54:	200001bc 	.word	0x200001bc
    3e58:	000037f5 	.word	0x000037f5
    3e5c:	00003759 	.word	0x00003759
    3e60:	00003a61 	.word	0x00003a61
    3e64:	00005f3d 	.word	0x00005f3d
    3e68:	00000ff5 	.word	0x00000ff5
    3e6c:	0000fff5 	.word	0x0000fff5
    3e70:	000001ff 	.word	0x000001ff
    3e74:	00003811 	.word	0x00003811
    3e78:	0000022f 	.word	0x0000022f
    3e7c:	0000022e 	.word	0x0000022e
    3e80:	ffffaa55 	.word	0xffffaa55
    3e84:	41615252 	.word	0x41615252
    3e88:	00000217 	.word	0x00000217
    3e8c:	00000216 	.word	0x00000216
    3e90:	00000215 	.word	0x00000215
    3e94:	61417272 	.word	0x61417272
    3e98:	0000021f 	.word	0x0000021f
    3e9c:	0000021e 	.word	0x0000021e
    3ea0:	0000021d 	.word	0x0000021d
    3ea4:	0000021b 	.word	0x0000021b
    3ea8:	0000021a 	.word	0x0000021a
    3eac:	00000219 	.word	0x00000219
    3eb0:	200001dc 	.word	0x200001dc

00003eb4 <move_window>:
{
    3eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eb6:	46ce      	mov	lr, r9
    3eb8:	b500      	push	{lr}
    3eba:	b082      	sub	sp, #8
    3ebc:	0004      	movs	r4, r0
    3ebe:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3ec0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3ec2:	428d      	cmp	r5, r1
    3ec4:	d03f      	beq.n	3f46 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3ec6:	7903      	ldrb	r3, [r0, #4]
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d107      	bne.n	3edc <move_window+0x28>
	return FR_OK;
    3ecc:	2300      	movs	r3, #0
		if (sector) {
    3ece:	2f00      	cmp	r7, #0
    3ed0:	d12c      	bne.n	3f2c <move_window+0x78>
}
    3ed2:	0018      	movs	r0, r3
    3ed4:	b002      	add	sp, #8
    3ed6:	bc04      	pop	{r2}
    3ed8:	4691      	mov	r9, r2
    3eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3edc:	2330      	movs	r3, #48	; 0x30
    3ede:	469c      	mov	ip, r3
    3ee0:	4484      	add	ip, r0
    3ee2:	4663      	mov	r3, ip
    3ee4:	4661      	mov	r1, ip
    3ee6:	9301      	str	r3, [sp, #4]
    3ee8:	7840      	ldrb	r0, [r0, #1]
    3eea:	2301      	movs	r3, #1
    3eec:	002a      	movs	r2, r5
    3eee:	4e17      	ldr	r6, [pc, #92]	; (3f4c <move_window+0x98>)
    3ef0:	47b0      	blx	r6
				return FR_DISK_ERR;
    3ef2:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3ef4:	2800      	cmp	r0, #0
    3ef6:	d1ec      	bne.n	3ed2 <move_window+0x1e>
			fs->wflag = 0;
    3ef8:	2300      	movs	r3, #0
    3efa:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3efc:	6a23      	ldr	r3, [r4, #32]
    3efe:	69e2      	ldr	r2, [r4, #28]
    3f00:	4694      	mov	ip, r2
    3f02:	4463      	add	r3, ip
    3f04:	429d      	cmp	r5, r3
    3f06:	d2e1      	bcs.n	3ecc <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f08:	78e6      	ldrb	r6, [r4, #3]
    3f0a:	2e01      	cmp	r6, #1
    3f0c:	d9de      	bls.n	3ecc <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3f0e:	4b0f      	ldr	r3, [pc, #60]	; (3f4c <move_window+0x98>)
    3f10:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3f12:	69e3      	ldr	r3, [r4, #28]
    3f14:	469c      	mov	ip, r3
    3f16:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3f18:	7860      	ldrb	r0, [r4, #1]
    3f1a:	2301      	movs	r3, #1
    3f1c:	002a      	movs	r2, r5
    3f1e:	9901      	ldr	r1, [sp, #4]
    3f20:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f22:	3e01      	subs	r6, #1
    3f24:	b2f6      	uxtb	r6, r6
    3f26:	2e01      	cmp	r6, #1
    3f28:	d1f3      	bne.n	3f12 <move_window+0x5e>
    3f2a:	e7cf      	b.n	3ecc <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3f2c:	0021      	movs	r1, r4
    3f2e:	3130      	adds	r1, #48	; 0x30
    3f30:	7860      	ldrb	r0, [r4, #1]
    3f32:	3301      	adds	r3, #1
    3f34:	003a      	movs	r2, r7
    3f36:	4d06      	ldr	r5, [pc, #24]	; (3f50 <move_window+0x9c>)
    3f38:	47a8      	blx	r5
				return FR_DISK_ERR;
    3f3a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d1c8      	bne.n	3ed2 <move_window+0x1e>
			fs->winsect = sector;
    3f40:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3f42:	2300      	movs	r3, #0
    3f44:	e7c5      	b.n	3ed2 <move_window+0x1e>
    3f46:	2300      	movs	r3, #0
    3f48:	e7c3      	b.n	3ed2 <move_window+0x1e>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	00003895 	.word	0x00003895
    3f50:	00003811 	.word	0x00003811

00003f54 <get_fat>:
{
    3f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f56:	0005      	movs	r5, r0
    3f58:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3f5a:	2901      	cmp	r1, #1
    3f5c:	d974      	bls.n	4048 <get_fat+0xf4>
		return 1;
    3f5e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3f60:	69ab      	ldr	r3, [r5, #24]
    3f62:	4299      	cmp	r1, r3
    3f64:	d271      	bcs.n	404a <get_fat+0xf6>
	switch (fs->fs_type) {
    3f66:	782b      	ldrb	r3, [r5, #0]
    3f68:	2b02      	cmp	r3, #2
    3f6a:	d034      	beq.n	3fd6 <get_fat+0x82>
    3f6c:	2b03      	cmp	r3, #3
    3f6e:	d049      	beq.n	4004 <get_fat+0xb0>
    3f70:	2b01      	cmp	r3, #1
    3f72:	d002      	beq.n	3f7a <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3f74:	2001      	movs	r0, #1
    3f76:	4240      	negs	r0, r0
    3f78:	e067      	b.n	404a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    3f7a:	084e      	lsrs	r6, r1, #1
    3f7c:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3f7e:	0a71      	lsrs	r1, r6, #9
    3f80:	6a2b      	ldr	r3, [r5, #32]
    3f82:	469c      	mov	ip, r3
    3f84:	4461      	add	r1, ip
    3f86:	0028      	movs	r0, r5
    3f88:	4b30      	ldr	r3, [pc, #192]	; (404c <get_fat+0xf8>)
    3f8a:	4798      	blx	r3
    3f8c:	2800      	cmp	r0, #0
    3f8e:	d002      	beq.n	3f96 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3f90:	2001      	movs	r0, #1
    3f92:	4240      	negs	r0, r0
    3f94:	e059      	b.n	404a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    3f96:	05f3      	lsls	r3, r6, #23
    3f98:	0ddb      	lsrs	r3, r3, #23
    3f9a:	18eb      	adds	r3, r5, r3
    3f9c:	3330      	adds	r3, #48	; 0x30
    3f9e:	781f      	ldrb	r7, [r3, #0]
    3fa0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3fa2:	0a71      	lsrs	r1, r6, #9
    3fa4:	6a2b      	ldr	r3, [r5, #32]
    3fa6:	469c      	mov	ip, r3
    3fa8:	4461      	add	r1, ip
    3faa:	0028      	movs	r0, r5
    3fac:	4b27      	ldr	r3, [pc, #156]	; (404c <get_fat+0xf8>)
    3fae:	4798      	blx	r3
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d002      	beq.n	3fba <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3fb4:	2001      	movs	r0, #1
    3fb6:	4240      	negs	r0, r0
    3fb8:	e047      	b.n	404a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    3fba:	05f6      	lsls	r6, r6, #23
    3fbc:	0df6      	lsrs	r6, r6, #23
    3fbe:	19ad      	adds	r5, r5, r6
    3fc0:	3530      	adds	r5, #48	; 0x30
    3fc2:	7828      	ldrb	r0, [r5, #0]
    3fc4:	0200      	lsls	r0, r0, #8
    3fc6:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3fc8:	07e3      	lsls	r3, r4, #31
    3fca:	d501      	bpl.n	3fd0 <get_fat+0x7c>
    3fcc:	0900      	lsrs	r0, r0, #4
    3fce:	e03c      	b.n	404a <get_fat+0xf6>
    3fd0:	0500      	lsls	r0, r0, #20
    3fd2:	0d00      	lsrs	r0, r0, #20
    3fd4:	e039      	b.n	404a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    3fd6:	0a09      	lsrs	r1, r1, #8
    3fd8:	6a2b      	ldr	r3, [r5, #32]
    3fda:	469c      	mov	ip, r3
    3fdc:	4461      	add	r1, ip
    3fde:	0028      	movs	r0, r5
    3fe0:	4b1a      	ldr	r3, [pc, #104]	; (404c <get_fat+0xf8>)
    3fe2:	4798      	blx	r3
    3fe4:	2800      	cmp	r0, #0
    3fe6:	d002      	beq.n	3fee <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3fe8:	2001      	movs	r0, #1
    3fea:	4240      	negs	r0, r0
    3fec:	e02d      	b.n	404a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    3fee:	0064      	lsls	r4, r4, #1
    3ff0:	23ff      	movs	r3, #255	; 0xff
    3ff2:	005b      	lsls	r3, r3, #1
    3ff4:	401c      	ands	r4, r3
		return LD_WORD(p);
    3ff6:	192d      	adds	r5, r5, r4
    3ff8:	3530      	adds	r5, #48	; 0x30
    3ffa:	786b      	ldrb	r3, [r5, #1]
    3ffc:	021b      	lsls	r3, r3, #8
    3ffe:	7828      	ldrb	r0, [r5, #0]
    4000:	4318      	orrs	r0, r3
    4002:	e022      	b.n	404a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4004:	09c9      	lsrs	r1, r1, #7
    4006:	6a2b      	ldr	r3, [r5, #32]
    4008:	469c      	mov	ip, r3
    400a:	4461      	add	r1, ip
    400c:	0028      	movs	r0, r5
    400e:	4b0f      	ldr	r3, [pc, #60]	; (404c <get_fat+0xf8>)
    4010:	4798      	blx	r3
    4012:	2800      	cmp	r0, #0
    4014:	d002      	beq.n	401c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4016:	2001      	movs	r0, #1
    4018:	4240      	negs	r0, r0
    401a:	e016      	b.n	404a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    401c:	00a4      	lsls	r4, r4, #2
    401e:	23fe      	movs	r3, #254	; 0xfe
    4020:	005b      	lsls	r3, r3, #1
    4022:	401c      	ands	r4, r3
    4024:	0023      	movs	r3, r4
    4026:	3330      	adds	r3, #48	; 0x30
    4028:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    402a:	78d8      	ldrb	r0, [r3, #3]
    402c:	0600      	lsls	r0, r0, #24
    402e:	789a      	ldrb	r2, [r3, #2]
    4030:	0412      	lsls	r2, r2, #16
    4032:	4310      	orrs	r0, r2
    4034:	192c      	adds	r4, r5, r4
    4036:	3430      	adds	r4, #48	; 0x30
    4038:	7822      	ldrb	r2, [r4, #0]
    403a:	4310      	orrs	r0, r2
    403c:	785b      	ldrb	r3, [r3, #1]
    403e:	021b      	lsls	r3, r3, #8
    4040:	4318      	orrs	r0, r3
    4042:	0100      	lsls	r0, r0, #4
    4044:	0900      	lsrs	r0, r0, #4
    4046:	e000      	b.n	404a <get_fat+0xf6>
		return 1;
    4048:	2001      	movs	r0, #1
}
    404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    404c:	00003eb5 	.word	0x00003eb5

00004050 <dir_sdi>:
{
    4050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4052:	0004      	movs	r4, r0
    4054:	000d      	movs	r5, r1
	dj->index = idx;
    4056:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    4058:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    405a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    405c:	2901      	cmp	r1, #1
    405e:	d003      	beq.n	4068 <dir_sdi+0x18>
    4060:	6823      	ldr	r3, [r4, #0]
    4062:	699a      	ldr	r2, [r3, #24]
    4064:	4291      	cmp	r1, r2
    4066:	d300      	bcc.n	406a <dir_sdi+0x1a>
}
    4068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    406a:	2900      	cmp	r1, #0
    406c:	d119      	bne.n	40a2 <dir_sdi+0x52>
    406e:	781a      	ldrb	r2, [r3, #0]
    4070:	2a03      	cmp	r2, #3
    4072:	d013      	beq.n	409c <dir_sdi+0x4c>
		dj->clust = clst;
    4074:	2200      	movs	r2, #0
    4076:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4078:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    407a:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    407c:	42aa      	cmp	r2, r5
    407e:	d9f3      	bls.n	4068 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4080:	092a      	lsrs	r2, r5, #4
    4082:	b292      	uxth	r2, r2
    4084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4086:	189b      	adds	r3, r3, r2
    4088:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    408a:	6823      	ldr	r3, [r4, #0]
    408c:	3330      	adds	r3, #48	; 0x30
    408e:	220f      	movs	r2, #15
    4090:	4015      	ands	r5, r2
    4092:	016d      	lsls	r5, r5, #5
    4094:	195d      	adds	r5, r3, r5
    4096:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    4098:	2000      	movs	r0, #0
    409a:	e7e5      	b.n	4068 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    409c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    409e:	2900      	cmp	r1, #0
    40a0:	d0e8      	beq.n	4074 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    40a2:	789e      	ldrb	r6, [r3, #2]
    40a4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    40a6:	42b5      	cmp	r5, r6
    40a8:	d313      	bcc.n	40d2 <dir_sdi+0x82>
    40aa:	1bad      	subs	r5, r5, r6
    40ac:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    40ae:	4f10      	ldr	r7, [pc, #64]	; (40f0 <dir_sdi+0xa0>)
    40b0:	e000      	b.n	40b4 <dir_sdi+0x64>
    40b2:	001d      	movs	r5, r3
    40b4:	6820      	ldr	r0, [r4, #0]
    40b6:	47b8      	blx	r7
    40b8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    40ba:	1c43      	adds	r3, r0, #1
    40bc:	d012      	beq.n	40e4 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    40be:	2801      	cmp	r0, #1
    40c0:	d912      	bls.n	40e8 <dir_sdi+0x98>
    40c2:	6823      	ldr	r3, [r4, #0]
    40c4:	699b      	ldr	r3, [r3, #24]
    40c6:	4298      	cmp	r0, r3
    40c8:	d210      	bcs.n	40ec <dir_sdi+0x9c>
    40ca:	1bab      	subs	r3, r5, r6
    40cc:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    40ce:	42b5      	cmp	r5, r6
    40d0:	d2ef      	bcs.n	40b2 <dir_sdi+0x62>
		dj->clust = clst;
    40d2:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    40d4:	6820      	ldr	r0, [r4, #0]
    40d6:	4b07      	ldr	r3, [pc, #28]	; (40f4 <dir_sdi+0xa4>)
    40d8:	4798      	blx	r3
    40da:	092b      	lsrs	r3, r5, #4
    40dc:	b29b      	uxth	r3, r3
    40de:	1818      	adds	r0, r3, r0
    40e0:	6120      	str	r0, [r4, #16]
    40e2:	e7d2      	b.n	408a <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    40e4:	2001      	movs	r0, #1
    40e6:	e7bf      	b.n	4068 <dir_sdi+0x18>
				return FR_INT_ERR;
    40e8:	2002      	movs	r0, #2
    40ea:	e7bd      	b.n	4068 <dir_sdi+0x18>
    40ec:	2002      	movs	r0, #2
    40ee:	e7bb      	b.n	4068 <dir_sdi+0x18>
    40f0:	00003f55 	.word	0x00003f55
    40f4:	000039fb 	.word	0x000039fb

000040f8 <put_fat>:
{
    40f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40fa:	46c6      	mov	lr, r8
    40fc:	b500      	push	{lr}
    40fe:	0007      	movs	r7, r0
    4100:	000c      	movs	r4, r1
    4102:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    4104:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4106:	2901      	cmp	r1, #1
    4108:	d902      	bls.n	4110 <put_fat+0x18>
    410a:	6983      	ldr	r3, [r0, #24]
    410c:	4299      	cmp	r1, r3
    410e:	d303      	bcc.n	4118 <put_fat+0x20>
}
    4110:	0028      	movs	r0, r5
    4112:	bc04      	pop	{r2}
    4114:	4690      	mov	r8, r2
    4116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    4118:	7803      	ldrb	r3, [r0, #0]
    411a:	2b02      	cmp	r3, #2
    411c:	d053      	beq.n	41c6 <put_fat+0xce>
    411e:	2b03      	cmp	r3, #3
    4120:	d063      	beq.n	41ea <put_fat+0xf2>
			res = FR_INT_ERR;
    4122:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    4124:	2b01      	cmp	r3, #1
    4126:	d002      	beq.n	412e <put_fat+0x36>
		fs->wflag = 1;
    4128:	2301      	movs	r3, #1
    412a:	713b      	strb	r3, [r7, #4]
    412c:	e7f0      	b.n	4110 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    412e:	084b      	lsrs	r3, r1, #1
    4130:	4698      	mov	r8, r3
    4132:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4134:	4643      	mov	r3, r8
    4136:	0a59      	lsrs	r1, r3, #9
    4138:	6a03      	ldr	r3, [r0, #32]
    413a:	469c      	mov	ip, r3
    413c:	4461      	add	r1, ip
    413e:	4b3b      	ldr	r3, [pc, #236]	; (422c <put_fat+0x134>)
    4140:	4798      	blx	r3
    4142:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4144:	d1f0      	bne.n	4128 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    4146:	4643      	mov	r3, r8
    4148:	05db      	lsls	r3, r3, #23
    414a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    414c:	07e2      	lsls	r2, r4, #31
    414e:	d51f      	bpl.n	4190 <put_fat+0x98>
    4150:	18fb      	adds	r3, r7, r3
    4152:	3330      	adds	r3, #48	; 0x30
    4154:	7819      	ldrb	r1, [r3, #0]
    4156:	220f      	movs	r2, #15
    4158:	400a      	ands	r2, r1
    415a:	0131      	lsls	r1, r6, #4
    415c:	20ff      	movs	r0, #255	; 0xff
    415e:	0100      	lsls	r0, r0, #4
    4160:	4001      	ands	r1, r0
    4162:	430a      	orrs	r2, r1
    4164:	701a      	strb	r2, [r3, #0]
			bc++;
    4166:	4644      	mov	r4, r8
    4168:	3401      	adds	r4, #1
			fs->wflag = 1;
    416a:	2301      	movs	r3, #1
    416c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    416e:	0a61      	lsrs	r1, r4, #9
    4170:	6a3b      	ldr	r3, [r7, #32]
    4172:	469c      	mov	ip, r3
    4174:	4461      	add	r1, ip
    4176:	0038      	movs	r0, r7
    4178:	4b2c      	ldr	r3, [pc, #176]	; (422c <put_fat+0x134>)
    417a:	4798      	blx	r3
			if (res != FR_OK) break;
    417c:	2800      	cmp	r0, #0
    417e:	d151      	bne.n	4224 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    4180:	05e4      	lsls	r4, r4, #23
    4182:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4184:	0936      	lsrs	r6, r6, #4
    4186:	b2f6      	uxtb	r6, r6
    4188:	193c      	adds	r4, r7, r4
    418a:	3430      	adds	r4, #48	; 0x30
    418c:	7026      	strb	r6, [r4, #0]
			break;
    418e:	e7cb      	b.n	4128 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4190:	18fb      	adds	r3, r7, r3
    4192:	3330      	adds	r3, #48	; 0x30
    4194:	701e      	strb	r6, [r3, #0]
			bc++;
    4196:	4644      	mov	r4, r8
    4198:	3401      	adds	r4, #1
			fs->wflag = 1;
    419a:	2301      	movs	r3, #1
    419c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    419e:	0a61      	lsrs	r1, r4, #9
    41a0:	6a3b      	ldr	r3, [r7, #32]
    41a2:	469c      	mov	ip, r3
    41a4:	4461      	add	r1, ip
    41a6:	0038      	movs	r0, r7
    41a8:	4b20      	ldr	r3, [pc, #128]	; (422c <put_fat+0x134>)
    41aa:	4798      	blx	r3
			if (res != FR_OK) break;
    41ac:	2800      	cmp	r0, #0
    41ae:	d13b      	bne.n	4228 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    41b0:	05e4      	lsls	r4, r4, #23
    41b2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    41b4:	193b      	adds	r3, r7, r4
    41b6:	3330      	adds	r3, #48	; 0x30
    41b8:	781b      	ldrb	r3, [r3, #0]
    41ba:	220f      	movs	r2, #15
    41bc:	4393      	bics	r3, r2
    41be:	0536      	lsls	r6, r6, #20
    41c0:	0f36      	lsrs	r6, r6, #28
    41c2:	431e      	orrs	r6, r3
    41c4:	e7e0      	b.n	4188 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    41c6:	0a09      	lsrs	r1, r1, #8
    41c8:	6a03      	ldr	r3, [r0, #32]
    41ca:	469c      	mov	ip, r3
    41cc:	4461      	add	r1, ip
    41ce:	4b17      	ldr	r3, [pc, #92]	; (422c <put_fat+0x134>)
    41d0:	4798      	blx	r3
    41d2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    41d4:	d1a8      	bne.n	4128 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    41d6:	0063      	lsls	r3, r4, #1
    41d8:	24ff      	movs	r4, #255	; 0xff
    41da:	0064      	lsls	r4, r4, #1
    41dc:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    41de:	18fb      	adds	r3, r7, r3
    41e0:	3330      	adds	r3, #48	; 0x30
    41e2:	701e      	strb	r6, [r3, #0]
    41e4:	0a36      	lsrs	r6, r6, #8
    41e6:	705e      	strb	r6, [r3, #1]
			break;
    41e8:	e79e      	b.n	4128 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    41ea:	09c9      	lsrs	r1, r1, #7
    41ec:	6a03      	ldr	r3, [r0, #32]
    41ee:	469c      	mov	ip, r3
    41f0:	4461      	add	r1, ip
    41f2:	4b0e      	ldr	r3, [pc, #56]	; (422c <put_fat+0x134>)
    41f4:	4798      	blx	r3
    41f6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    41f8:	d196      	bne.n	4128 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    41fa:	00a4      	lsls	r4, r4, #2
    41fc:	23fe      	movs	r3, #254	; 0xfe
    41fe:	005b      	lsls	r3, r3, #1
    4200:	401c      	ands	r4, r3
    4202:	0022      	movs	r2, r4
    4204:	3230      	adds	r2, #48	; 0x30
    4206:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4208:	78d3      	ldrb	r3, [r2, #3]
    420a:	193c      	adds	r4, r7, r4
    420c:	3430      	adds	r4, #48	; 0x30
    420e:	091b      	lsrs	r3, r3, #4
    4210:	071b      	lsls	r3, r3, #28
    4212:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4214:	7026      	strb	r6, [r4, #0]
    4216:	0a33      	lsrs	r3, r6, #8
    4218:	7053      	strb	r3, [r2, #1]
    421a:	0c33      	lsrs	r3, r6, #16
    421c:	7093      	strb	r3, [r2, #2]
    421e:	0e36      	lsrs	r6, r6, #24
    4220:	70d6      	strb	r6, [r2, #3]
			break;
    4222:	e781      	b.n	4128 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4224:	0005      	movs	r5, r0
    4226:	e77f      	b.n	4128 <put_fat+0x30>
    4228:	0005      	movs	r5, r0
    422a:	e77d      	b.n	4128 <put_fat+0x30>
    422c:	00003eb5 	.word	0x00003eb5

00004230 <create_chain>:
{
    4230:	b5f0      	push	{r4, r5, r6, r7, lr}
    4232:	46c6      	mov	lr, r8
    4234:	b500      	push	{lr}
    4236:	0005      	movs	r5, r0
    4238:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    423a:	2900      	cmp	r1, #0
    423c:	d107      	bne.n	424e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    423e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4240:	2e00      	cmp	r6, #0
    4242:	d00d      	beq.n	4260 <create_chain+0x30>
    4244:	6983      	ldr	r3, [r0, #24]
    4246:	429e      	cmp	r6, r3
    4248:	d30b      	bcc.n	4262 <create_chain+0x32>
    424a:	2601      	movs	r6, #1
    424c:	e009      	b.n	4262 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    424e:	4b26      	ldr	r3, [pc, #152]	; (42e8 <create_chain+0xb8>)
    4250:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4252:	2801      	cmp	r0, #1
    4254:	d93d      	bls.n	42d2 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4256:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    4258:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    425a:	4298      	cmp	r0, r3
    425c:	d201      	bcs.n	4262 <create_chain+0x32>
    425e:	e03d      	b.n	42dc <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4260:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    4262:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4264:	4f20      	ldr	r7, [pc, #128]	; (42e8 <create_chain+0xb8>)
    4266:	e00a      	b.n	427e <create_chain+0x4e>
    4268:	0021      	movs	r1, r4
    426a:	0028      	movs	r0, r5
    426c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    426e:	2800      	cmp	r0, #0
    4270:	d00d      	beq.n	428e <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4272:	1c43      	adds	r3, r0, #1
    4274:	d032      	beq.n	42dc <create_chain+0xac>
    4276:	2801      	cmp	r0, #1
    4278:	d030      	beq.n	42dc <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    427a:	42b4      	cmp	r4, r6
    427c:	d02d      	beq.n	42da <create_chain+0xaa>
		ncl++;							/* Next cluster */
    427e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4280:	69ab      	ldr	r3, [r5, #24]
    4282:	429c      	cmp	r4, r3
    4284:	d3f0      	bcc.n	4268 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    4286:	2e01      	cmp	r6, #1
    4288:	d925      	bls.n	42d6 <create_chain+0xa6>
			ncl = 2;
    428a:	2402      	movs	r4, #2
    428c:	e7ec      	b.n	4268 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    428e:	4a17      	ldr	r2, [pc, #92]	; (42ec <create_chain+0xbc>)
    4290:	0021      	movs	r1, r4
    4292:	0028      	movs	r0, r5
    4294:	4b16      	ldr	r3, [pc, #88]	; (42f0 <create_chain+0xc0>)
    4296:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4298:	2800      	cmp	r0, #0
    429a:	d113      	bne.n	42c4 <create_chain+0x94>
    429c:	4643      	mov	r3, r8
    429e:	2b00      	cmp	r3, #0
    42a0:	d109      	bne.n	42b6 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    42a2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    42a4:	692b      	ldr	r3, [r5, #16]
    42a6:	1c5a      	adds	r2, r3, #1
    42a8:	d01b      	beq.n	42e2 <create_chain+0xb2>
			fs->free_clust--;
    42aa:	3b01      	subs	r3, #1
    42ac:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    42ae:	2301      	movs	r3, #1
    42b0:	716b      	strb	r3, [r5, #5]
    42b2:	0020      	movs	r0, r4
    42b4:	e012      	b.n	42dc <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    42b6:	0022      	movs	r2, r4
    42b8:	4641      	mov	r1, r8
    42ba:	0028      	movs	r0, r5
    42bc:	4b0c      	ldr	r3, [pc, #48]	; (42f0 <create_chain+0xc0>)
    42be:	4798      	blx	r3
	if (res == FR_OK) {
    42c0:	2800      	cmp	r0, #0
    42c2:	d0ee      	beq.n	42a2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    42c4:	3801      	subs	r0, #1
    42c6:	4242      	negs	r2, r0
    42c8:	4142      	adcs	r2, r0
    42ca:	4250      	negs	r0, r2
    42cc:	2301      	movs	r3, #1
    42ce:	4318      	orrs	r0, r3
    42d0:	e004      	b.n	42dc <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    42d2:	2001      	movs	r0, #1
    42d4:	e002      	b.n	42dc <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    42d6:	2000      	movs	r0, #0
    42d8:	e000      	b.n	42dc <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    42da:	2000      	movs	r0, #0
}
    42dc:	bc04      	pop	{r2}
    42de:	4690      	mov	r8, r2
    42e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42e2:	0020      	movs	r0, r4
    42e4:	e7fa      	b.n	42dc <create_chain+0xac>
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	00003f55 	.word	0x00003f55
    42ec:	0fffffff 	.word	0x0fffffff
    42f0:	000040f9 	.word	0x000040f9

000042f4 <remove_chain>:
{
    42f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42f6:	46ce      	mov	lr, r9
    42f8:	4647      	mov	r7, r8
    42fa:	b580      	push	{r7, lr}
    42fc:	0004      	movs	r4, r0
    42fe:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4300:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4302:	2901      	cmp	r1, #1
    4304:	d902      	bls.n	430c <remove_chain+0x18>
    4306:	69a3      	ldr	r3, [r4, #24]
    4308:	4299      	cmp	r1, r3
    430a:	d303      	bcc.n	4314 <remove_chain+0x20>
}
    430c:	bc0c      	pop	{r2, r3}
    430e:	4690      	mov	r8, r2
    4310:	4699      	mov	r9, r3
    4312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4314:	4f13      	ldr	r7, [pc, #76]	; (4364 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4316:	4b14      	ldr	r3, [pc, #80]	; (4368 <remove_chain+0x74>)
    4318:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    431a:	2301      	movs	r3, #1
    431c:	4699      	mov	r9, r3
    431e:	e003      	b.n	4328 <remove_chain+0x34>
    4320:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4322:	69a3      	ldr	r3, [r4, #24]
    4324:	42b3      	cmp	r3, r6
    4326:	d9f1      	bls.n	430c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4328:	0029      	movs	r1, r5
    432a:	0020      	movs	r0, r4
    432c:	47b8      	blx	r7
    432e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    4330:	d011      	beq.n	4356 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4332:	2801      	cmp	r0, #1
    4334:	d011      	beq.n	435a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4336:	1c43      	adds	r3, r0, #1
    4338:	d011      	beq.n	435e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    433a:	2200      	movs	r2, #0
    433c:	0029      	movs	r1, r5
    433e:	0020      	movs	r0, r4
    4340:	47c0      	blx	r8
			if (res != FR_OK) break;
    4342:	2800      	cmp	r0, #0
    4344:	d1e2      	bne.n	430c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4346:	6923      	ldr	r3, [r4, #16]
    4348:	1c5a      	adds	r2, r3, #1
    434a:	d0e9      	beq.n	4320 <remove_chain+0x2c>
				fs->free_clust++;
    434c:	3301      	adds	r3, #1
    434e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4350:	464b      	mov	r3, r9
    4352:	7163      	strb	r3, [r4, #5]
    4354:	e7e4      	b.n	4320 <remove_chain+0x2c>
    4356:	2000      	movs	r0, #0
    4358:	e7d8      	b.n	430c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    435a:	2002      	movs	r0, #2
    435c:	e7d6      	b.n	430c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    435e:	2001      	movs	r0, #1
    4360:	e7d4      	b.n	430c <remove_chain+0x18>
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	00003f55 	.word	0x00003f55
    4368:	000040f9 	.word	0x000040f9

0000436c <dir_next>:
{
    436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    436e:	46d6      	mov	lr, sl
    4370:	4647      	mov	r7, r8
    4372:	b580      	push	{r7, lr}
    4374:	0006      	movs	r6, r0
    4376:	000d      	movs	r5, r1
	i = dj->index + 1;
    4378:	88c4      	ldrh	r4, [r0, #6]
    437a:	3401      	adds	r4, #1
    437c:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    437e:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4380:	2c00      	cmp	r4, #0
    4382:	d103      	bne.n	438c <dir_next+0x20>
}
    4384:	bc0c      	pop	{r2, r3}
    4386:	4690      	mov	r8, r2
    4388:	469a      	mov	sl, r3
    438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    438c:	6933      	ldr	r3, [r6, #16]
    438e:	2b00      	cmp	r3, #0
    4390:	d0f8      	beq.n	4384 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4392:	270f      	movs	r7, #15
    4394:	4027      	ands	r7, r4
    4396:	d10f      	bne.n	43b8 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4398:	3301      	adds	r3, #1
    439a:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    439c:	68f1      	ldr	r1, [r6, #12]
    439e:	2900      	cmp	r1, #0
    43a0:	d104      	bne.n	43ac <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    43a2:	6833      	ldr	r3, [r6, #0]
    43a4:	891b      	ldrh	r3, [r3, #8]
    43a6:	42a3      	cmp	r3, r4
    43a8:	d9ec      	bls.n	4384 <dir_next+0x18>
    43aa:	e005      	b.n	43b8 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    43ac:	6830      	ldr	r0, [r6, #0]
    43ae:	7883      	ldrb	r3, [r0, #2]
    43b0:	3b01      	subs	r3, #1
    43b2:	0922      	lsrs	r2, r4, #4
    43b4:	421a      	tst	r2, r3
    43b6:	d007      	beq.n	43c8 <dir_next+0x5c>
	dj->index = i;
    43b8:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    43ba:	6833      	ldr	r3, [r6, #0]
    43bc:	3330      	adds	r3, #48	; 0x30
    43be:	017f      	lsls	r7, r7, #5
    43c0:	19df      	adds	r7, r3, r7
    43c2:	6177      	str	r7, [r6, #20]
	return FR_OK;
    43c4:	2000      	movs	r0, #0
    43c6:	e7dd      	b.n	4384 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    43c8:	4b2c      	ldr	r3, [pc, #176]	; (447c <dir_next+0x110>)
    43ca:	4798      	blx	r3
    43cc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    43ce:	2002      	movs	r0, #2
    43d0:	4643      	mov	r3, r8
    43d2:	2b01      	cmp	r3, #1
    43d4:	d9d6      	bls.n	4384 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    43d6:	3301      	adds	r3, #1
    43d8:	d04b      	beq.n	4472 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    43da:	6833      	ldr	r3, [r6, #0]
    43dc:	699a      	ldr	r2, [r3, #24]
    43de:	4590      	cmp	r8, r2
    43e0:	d33f      	bcc.n	4462 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    43e2:	3002      	adds	r0, #2
    43e4:	2d00      	cmp	r5, #0
    43e6:	d0cd      	beq.n	4384 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    43e8:	68f1      	ldr	r1, [r6, #12]
    43ea:	0018      	movs	r0, r3
    43ec:	4b24      	ldr	r3, [pc, #144]	; (4480 <dir_next+0x114>)
    43ee:	4798      	blx	r3
    43f0:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    43f2:	2007      	movs	r0, #7
    43f4:	4643      	mov	r3, r8
    43f6:	2b00      	cmp	r3, #0
    43f8:	d0c4      	beq.n	4384 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    43fa:	3805      	subs	r0, #5
    43fc:	2b01      	cmp	r3, #1
    43fe:	d0c1      	beq.n	4384 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4400:	3801      	subs	r0, #1
    4402:	3301      	adds	r3, #1
    4404:	d0be      	beq.n	4384 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4406:	2100      	movs	r1, #0
    4408:	6830      	ldr	r0, [r6, #0]
    440a:	4b1e      	ldr	r3, [pc, #120]	; (4484 <dir_next+0x118>)
    440c:	4798      	blx	r3
    440e:	0003      	movs	r3, r0
    4410:	2001      	movs	r0, #1
    4412:	2b00      	cmp	r3, #0
    4414:	d1b6      	bne.n	4384 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4416:	6830      	ldr	r0, [r6, #0]
    4418:	3030      	adds	r0, #48	; 0x30
    441a:	2280      	movs	r2, #128	; 0x80
    441c:	0092      	lsls	r2, r2, #2
    441e:	2100      	movs	r1, #0
    4420:	4b19      	ldr	r3, [pc, #100]	; (4488 <dir_next+0x11c>)
    4422:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4424:	6835      	ldr	r5, [r6, #0]
    4426:	4641      	mov	r1, r8
    4428:	0028      	movs	r0, r5
    442a:	4b18      	ldr	r3, [pc, #96]	; (448c <dir_next+0x120>)
    442c:	4798      	blx	r3
    442e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4430:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4432:	2301      	movs	r3, #1
    4434:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4436:	6833      	ldr	r3, [r6, #0]
    4438:	789a      	ldrb	r2, [r3, #2]
    443a:	42aa      	cmp	r2, r5
    443c:	d90e      	bls.n	445c <dir_next+0xf0>
						dj->fs->wflag = 1;
    443e:	4652      	mov	r2, sl
    4440:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4442:	2100      	movs	r1, #0
    4444:	6830      	ldr	r0, [r6, #0]
    4446:	4b0f      	ldr	r3, [pc, #60]	; (4484 <dir_next+0x118>)
    4448:	4798      	blx	r3
    444a:	2800      	cmp	r0, #0
    444c:	d113      	bne.n	4476 <dir_next+0x10a>
						dj->fs->winsect++;
    444e:	6832      	ldr	r2, [r6, #0]
    4450:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4452:	3301      	adds	r3, #1
    4454:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4456:	3501      	adds	r5, #1
    4458:	b2ed      	uxtb	r5, r5
    445a:	e7ec      	b.n	4436 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    445e:	1b52      	subs	r2, r2, r5
    4460:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4462:	4643      	mov	r3, r8
    4464:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4466:	4641      	mov	r1, r8
    4468:	6830      	ldr	r0, [r6, #0]
    446a:	4b08      	ldr	r3, [pc, #32]	; (448c <dir_next+0x120>)
    446c:	4798      	blx	r3
    446e:	6130      	str	r0, [r6, #16]
    4470:	e7a2      	b.n	43b8 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4472:	2001      	movs	r0, #1
    4474:	e786      	b.n	4384 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4476:	2001      	movs	r0, #1
    4478:	e784      	b.n	4384 <dir_next+0x18>
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	00003f55 	.word	0x00003f55
    4480:	00004231 	.word	0x00004231
    4484:	00003eb5 	.word	0x00003eb5
    4488:	000039e9 	.word	0x000039e9
    448c:	000039fb 	.word	0x000039fb

00004490 <dir_find>:
{
    4490:	b5f0      	push	{r4, r5, r6, r7, lr}
    4492:	46de      	mov	lr, fp
    4494:	4657      	mov	r7, sl
    4496:	464e      	mov	r6, r9
    4498:	4645      	mov	r5, r8
    449a:	b5e0      	push	{r5, r6, r7, lr}
    449c:	b083      	sub	sp, #12
    449e:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    44a0:	2100      	movs	r1, #0
    44a2:	4b5a      	ldr	r3, [pc, #360]	; (460c <dir_find+0x17c>)
    44a4:	4798      	blx	r3
    44a6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    44a8:	d000      	beq.n	44ac <dir_find+0x1c>
    44aa:	e09e      	b.n	45ea <dir_find+0x15a>
    44ac:	23ff      	movs	r3, #255	; 0xff
    44ae:	4699      	mov	r9, r3
    44b0:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    44b2:	4b57      	ldr	r3, [pc, #348]	; (4610 <dir_find+0x180>)
    44b4:	469b      	mov	fp, r3
    44b6:	e01b      	b.n	44f0 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    44b8:	2b0f      	cmp	r3, #15
    44ba:	d030      	beq.n	451e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    44bc:	4653      	mov	r3, sl
    44be:	2b00      	cmp	r3, #0
    44c0:	d105      	bne.n	44ce <dir_find+0x3e>
    44c2:	0020      	movs	r0, r4
    44c4:	4b53      	ldr	r3, [pc, #332]	; (4614 <dir_find+0x184>)
    44c6:	4798      	blx	r3
    44c8:	4581      	cmp	r9, r0
    44ca:	d100      	bne.n	44ce <dir_find+0x3e>
    44cc:	e08d      	b.n	45ea <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    44ce:	2301      	movs	r3, #1
    44d0:	425b      	negs	r3, r3
    44d2:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    44d4:	69a8      	ldr	r0, [r5, #24]
    44d6:	7ac3      	ldrb	r3, [r0, #11]
    44d8:	07db      	lsls	r3, r3, #31
    44da:	d400      	bmi.n	44de <dir_find+0x4e>
    44dc:	e07d      	b.n	45da <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    44de:	23ff      	movs	r3, #255	; 0xff
    44e0:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    44e2:	2100      	movs	r1, #0
    44e4:	0028      	movs	r0, r5
    44e6:	4b4c      	ldr	r3, [pc, #304]	; (4618 <dir_find+0x188>)
    44e8:	4798      	blx	r3
    44ea:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    44ec:	d000      	beq.n	44f0 <dir_find+0x60>
    44ee:	e07c      	b.n	45ea <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    44f0:	6929      	ldr	r1, [r5, #16]
    44f2:	6828      	ldr	r0, [r5, #0]
    44f4:	47d8      	blx	fp
    44f6:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    44f8:	d177      	bne.n	45ea <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    44fa:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    44fc:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    44fe:	2e00      	cmp	r6, #0
    4500:	d100      	bne.n	4504 <dir_find+0x74>
    4502:	e080      	b.n	4606 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4504:	7ae2      	ldrb	r2, [r4, #11]
    4506:	233f      	movs	r3, #63	; 0x3f
    4508:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    450a:	2ee5      	cmp	r6, #229	; 0xe5
    450c:	d100      	bne.n	4510 <dir_find+0x80>
    450e:	e077      	b.n	4600 <dir_find+0x170>
    4510:	0712      	lsls	r2, r2, #28
    4512:	d5d1      	bpl.n	44b8 <dir_find+0x28>
    4514:	2b0f      	cmp	r3, #15
    4516:	d002      	beq.n	451e <dir_find+0x8e>
			ord = 0xFF;
    4518:	23ff      	movs	r3, #255	; 0xff
    451a:	469a      	mov	sl, r3
    451c:	e7e1      	b.n	44e2 <dir_find+0x52>
				if (dj->lfn) {
    451e:	69ef      	ldr	r7, [r5, #28]
    4520:	2f00      	cmp	r7, #0
    4522:	d0de      	beq.n	44e2 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4524:	0673      	lsls	r3, r6, #25
    4526:	d518      	bpl.n	455a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4528:	7b63      	ldrb	r3, [r4, #13]
    452a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    452c:	2340      	movs	r3, #64	; 0x40
    452e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4530:	88eb      	ldrh	r3, [r5, #6]
    4532:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4534:	7b63      	ldrb	r3, [r4, #13]
    4536:	9300      	str	r3, [sp, #0]
    4538:	22ff      	movs	r2, #255	; 0xff
    453a:	4692      	mov	sl, r2
    453c:	454b      	cmp	r3, r9
    453e:	d1d0      	bne.n	44e2 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4540:	7823      	ldrb	r3, [r4, #0]
    4542:	3abf      	subs	r2, #191	; 0xbf
    4544:	4393      	bics	r3, r2
    4546:	3b01      	subs	r3, #1
    4548:	005a      	lsls	r2, r3, #1
    454a:	18d2      	adds	r2, r2, r3
    454c:	0092      	lsls	r2, r2, #2
    454e:	4692      	mov	sl, r2
    4550:	449a      	add	sl, r3
	s = 0; wc = 1;
    4552:	2201      	movs	r2, #1
    4554:	2300      	movs	r3, #0
    4556:	4699      	mov	r9, r3
    4558:	e01d      	b.n	4596 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    455a:	45b2      	cmp	sl, r6
    455c:	d0ea      	beq.n	4534 <dir_find+0xa4>
    455e:	23ff      	movs	r3, #255	; 0xff
    4560:	469a      	mov	sl, r3
    4562:	e7be      	b.n	44e2 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4564:	4b2d      	ldr	r3, [pc, #180]	; (461c <dir_find+0x18c>)
    4566:	4798      	blx	r3
    4568:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    456a:	4653      	mov	r3, sl
    456c:	2bfe      	cmp	r3, #254	; 0xfe
    456e:	d81f      	bhi.n	45b0 <dir_find+0x120>
    4570:	2301      	movs	r3, #1
    4572:	4453      	add	r3, sl
    4574:	4698      	mov	r8, r3
    4576:	4653      	mov	r3, sl
    4578:	005b      	lsls	r3, r3, #1
    457a:	5bd8      	ldrh	r0, [r3, r7]
    457c:	4b27      	ldr	r3, [pc, #156]	; (461c <dir_find+0x18c>)
    457e:	4798      	blx	r3
    4580:	0002      	movs	r2, r0
    4582:	9b01      	ldr	r3, [sp, #4]
    4584:	4283      	cmp	r3, r0
    4586:	d113      	bne.n	45b0 <dir_find+0x120>
    4588:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    458a:	2301      	movs	r3, #1
    458c:	469c      	mov	ip, r3
    458e:	44e1      	add	r9, ip
    4590:	464b      	mov	r3, r9
    4592:	2b0d      	cmp	r3, #13
    4594:	d011      	beq.n	45ba <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4596:	4b22      	ldr	r3, [pc, #136]	; (4620 <dir_find+0x190>)
    4598:	4649      	mov	r1, r9
    459a:	5cc9      	ldrb	r1, [r1, r3]
    459c:	1863      	adds	r3, r4, r1
    459e:	785b      	ldrb	r3, [r3, #1]
    45a0:	021b      	lsls	r3, r3, #8
    45a2:	5c60      	ldrb	r0, [r4, r1]
    45a4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    45a6:	2a00      	cmp	r2, #0
    45a8:	d1dc      	bne.n	4564 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    45aa:	4b1e      	ldr	r3, [pc, #120]	; (4624 <dir_find+0x194>)
    45ac:	4298      	cmp	r0, r3
    45ae:	d0ec      	beq.n	458a <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    45b0:	9b00      	ldr	r3, [sp, #0]
    45b2:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45b4:	23ff      	movs	r3, #255	; 0xff
    45b6:	469a      	mov	sl, r3
    45b8:	e793      	b.n	44e2 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    45ba:	7823      	ldrb	r3, [r4, #0]
    45bc:	065b      	lsls	r3, r3, #25
    45be:	d506      	bpl.n	45ce <dir_find+0x13e>
    45c0:	2a00      	cmp	r2, #0
    45c2:	d004      	beq.n	45ce <dir_find+0x13e>
    45c4:	4653      	mov	r3, sl
    45c6:	005b      	lsls	r3, r3, #1
    45c8:	5bdb      	ldrh	r3, [r3, r7]
    45ca:	2b00      	cmp	r3, #0
    45cc:	d1f0      	bne.n	45b0 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45ce:	3e01      	subs	r6, #1
    45d0:	b2f3      	uxtb	r3, r6
    45d2:	469a      	mov	sl, r3
    45d4:	9b00      	ldr	r3, [sp, #0]
    45d6:	4699      	mov	r9, r3
    45d8:	e783      	b.n	44e2 <dir_find+0x52>
    45da:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    45dc:	5ce1      	ldrb	r1, [r4, r3]
    45de:	5cc2      	ldrb	r2, [r0, r3]
    45e0:	4291      	cmp	r1, r2
    45e2:	d10a      	bne.n	45fa <dir_find+0x16a>
    45e4:	3301      	adds	r3, #1
    45e6:	2b0b      	cmp	r3, #11
    45e8:	d1f8      	bne.n	45dc <dir_find+0x14c>
}
    45ea:	0038      	movs	r0, r7
    45ec:	b003      	add	sp, #12
    45ee:	bc3c      	pop	{r2, r3, r4, r5}
    45f0:	4690      	mov	r8, r2
    45f2:	4699      	mov	r9, r3
    45f4:	46a2      	mov	sl, r4
    45f6:	46ab      	mov	fp, r5
    45f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    45fa:	23ff      	movs	r3, #255	; 0xff
    45fc:	469a      	mov	sl, r3
    45fe:	e770      	b.n	44e2 <dir_find+0x52>
			ord = 0xFF;
    4600:	23ff      	movs	r3, #255	; 0xff
    4602:	469a      	mov	sl, r3
    4604:	e76d      	b.n	44e2 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4606:	2704      	movs	r7, #4
    4608:	e7ef      	b.n	45ea <dir_find+0x15a>
    460a:	46c0      	nop			; (mov r8, r8)
    460c:	00004051 	.word	0x00004051
    4610:	00003eb5 	.word	0x00003eb5
    4614:	00003a13 	.word	0x00003a13
    4618:	0000436d 	.word	0x0000436d
    461c:	00005835 	.word	0x00005835
    4620:	0000739c 	.word	0x0000739c
    4624:	0000ffff 	.word	0x0000ffff

00004628 <dir_register>:
{
    4628:	b5f0      	push	{r4, r5, r6, r7, lr}
    462a:	46de      	mov	lr, fp
    462c:	4657      	mov	r7, sl
    462e:	464e      	mov	r6, r9
    4630:	4645      	mov	r5, r8
    4632:	b5e0      	push	{r5, r6, r7, lr}
    4634:	b089      	sub	sp, #36	; 0x24
    4636:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4638:	6987      	ldr	r7, [r0, #24]
    463a:	69c3      	ldr	r3, [r0, #28]
    463c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    463e:	ad05      	add	r5, sp, #20
    4640:	220c      	movs	r2, #12
    4642:	0039      	movs	r1, r7
    4644:	0028      	movs	r0, r5
    4646:	4ba7      	ldr	r3, [pc, #668]	; (48e4 <dir_register+0x2bc>)
    4648:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    464a:	7aeb      	ldrb	r3, [r5, #11]
    464c:	07db      	lsls	r3, r3, #31
    464e:	d400      	bmi.n	4652 <dir_register+0x2a>
    4650:	e070      	b.n	4734 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4652:	2300      	movs	r3, #0
    4654:	72fb      	strb	r3, [r7, #11]
    4656:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4658:	220b      	movs	r2, #11
    465a:	a905      	add	r1, sp, #20
    465c:	0038      	movs	r0, r7
    465e:	4ba1      	ldr	r3, [pc, #644]	; (48e4 <dir_register+0x2bc>)
    4660:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4662:	2301      	movs	r3, #1
		ns[i--] = c;
    4664:	ad03      	add	r5, sp, #12
    4666:	001e      	movs	r6, r3
    4668:	46a0      	mov	r8, r4
    466a:	e049      	b.n	4700 <dir_register+0xd8>
    466c:	3801      	subs	r0, #1
    466e:	1829      	adds	r1, r5, r0
    4670:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4672:	091b      	lsrs	r3, r3, #4
    4674:	b29b      	uxth	r3, r3
	} while (seq);
    4676:	2b00      	cmp	r3, #0
    4678:	d007      	beq.n	468a <dir_register+0x62>
		c = (seq % 16) + '0';
    467a:	0021      	movs	r1, r4
    467c:	4019      	ands	r1, r3
    467e:	000a      	movs	r2, r1
    4680:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4682:	2a39      	cmp	r2, #57	; 0x39
    4684:	d9f2      	bls.n	466c <dir_register+0x44>
    4686:	3207      	adds	r2, #7
    4688:	e7f0      	b.n	466c <dir_register+0x44>
	ns[i] = '~';
    468a:	337e      	adds	r3, #126	; 0x7e
    468c:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    468e:	2800      	cmp	r0, #0
    4690:	d00a      	beq.n	46a8 <dir_register+0x80>
    4692:	783b      	ldrb	r3, [r7, #0]
    4694:	2b20      	cmp	r3, #32
    4696:	d009      	beq.n	46ac <dir_register+0x84>
    4698:	2300      	movs	r3, #0
    469a:	3301      	adds	r3, #1
    469c:	4298      	cmp	r0, r3
    469e:	d007      	beq.n	46b0 <dir_register+0x88>
    46a0:	5cfa      	ldrb	r2, [r7, r3]
    46a2:	2a20      	cmp	r2, #32
    46a4:	d1f9      	bne.n	469a <dir_register+0x72>
    46a6:	e009      	b.n	46bc <dir_register+0x94>
    46a8:	0003      	movs	r3, r0
    46aa:	e007      	b.n	46bc <dir_register+0x94>
    46ac:	2300      	movs	r3, #0
    46ae:	e005      	b.n	46bc <dir_register+0x94>
    46b0:	0003      	movs	r3, r0
    46b2:	e003      	b.n	46bc <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    46b4:	54fa      	strb	r2, [r7, r3]
    46b6:	3301      	adds	r3, #1
	} while (j < 8);
    46b8:	2b07      	cmp	r3, #7
    46ba:	d805      	bhi.n	46c8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    46bc:	2220      	movs	r2, #32
    46be:	2807      	cmp	r0, #7
    46c0:	d8f8      	bhi.n	46b4 <dir_register+0x8c>
    46c2:	5c2a      	ldrb	r2, [r5, r0]
    46c4:	3001      	adds	r0, #1
    46c6:	e7f5      	b.n	46b4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    46c8:	4640      	mov	r0, r8
    46ca:	4b87      	ldr	r3, [pc, #540]	; (48e8 <dir_register+0x2c0>)
    46cc:	4798      	blx	r3
			if (res != FR_OK) break;
    46ce:	2800      	cmp	r0, #0
    46d0:	d11c      	bne.n	470c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    46d2:	3601      	adds	r6, #1
    46d4:	b2b6      	uxth	r6, r6
    46d6:	2e64      	cmp	r6, #100	; 0x64
    46d8:	d015      	beq.n	4706 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    46da:	220b      	movs	r2, #11
    46dc:	a905      	add	r1, sp, #20
    46de:	0038      	movs	r0, r7
    46e0:	4b80      	ldr	r3, [pc, #512]	; (48e4 <dir_register+0x2bc>)
    46e2:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    46e4:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    46e6:	2e05      	cmp	r6, #5
    46e8:	d90a      	bls.n	4700 <dir_register+0xd8>
    46ea:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    46ec:	085a      	lsrs	r2, r3, #1
    46ee:	03db      	lsls	r3, r3, #15
    46f0:	4313      	orrs	r3, r2
    46f2:	880a      	ldrh	r2, [r1, #0]
    46f4:	189b      	adds	r3, r3, r2
    46f6:	b29b      	uxth	r3, r3
    46f8:	3102      	adds	r1, #2
    46fa:	880a      	ldrh	r2, [r1, #0]
    46fc:	2a00      	cmp	r2, #0
    46fe:	d1f5      	bne.n	46ec <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4700:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4702:	240f      	movs	r4, #15
    4704:	e7b9      	b.n	467a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4706:	2307      	movs	r3, #7
    4708:	4698      	mov	r8, r3
    470a:	e006      	b.n	471a <dir_register+0xf2>
    470c:	4644      	mov	r4, r8
    470e:	4680      	mov	r8, r0
    4710:	2e64      	cmp	r6, #100	; 0x64
    4712:	d100      	bne.n	4716 <dir_register+0xee>
    4714:	e0a5      	b.n	4862 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4716:	2804      	cmp	r0, #4
    4718:	d007      	beq.n	472a <dir_register+0x102>
}
    471a:	4640      	mov	r0, r8
    471c:	b009      	add	sp, #36	; 0x24
    471e:	bc3c      	pop	{r2, r3, r4, r5}
    4720:	4690      	mov	r8, r2
    4722:	4699      	mov	r9, r3
    4724:	46a2      	mov	sl, r4
    4726:	46ab      	mov	fp, r5
    4728:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    472a:	ab05      	add	r3, sp, #20
    472c:	7adb      	ldrb	r3, [r3, #11]
    472e:	72fb      	strb	r3, [r7, #11]
    4730:	4653      	mov	r3, sl
    4732:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4734:	ab05      	add	r3, sp, #20
    4736:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4738:	2201      	movs	r2, #1
    473a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    473c:	079b      	lsls	r3, r3, #30
    473e:	d511      	bpl.n	4764 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4740:	4653      	mov	r3, sl
    4742:	881b      	ldrh	r3, [r3, #0]
    4744:	2b00      	cmp	r3, #0
    4746:	d01b      	beq.n	4780 <dir_register+0x158>
    4748:	2000      	movs	r0, #0
    474a:	4652      	mov	r2, sl
    474c:	3001      	adds	r0, #1
    474e:	b280      	uxth	r0, r0
    4750:	0043      	lsls	r3, r0, #1
    4752:	5a9b      	ldrh	r3, [r3, r2]
    4754:	2b00      	cmp	r3, #0
    4756:	d1f9      	bne.n	474c <dir_register+0x124>
		ne = (ne + 25) / 13;
    4758:	3019      	adds	r0, #25
    475a:	210d      	movs	r1, #13
    475c:	4b63      	ldr	r3, [pc, #396]	; (48ec <dir_register+0x2c4>)
    475e:	4798      	blx	r3
    4760:	b283      	uxth	r3, r0
    4762:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4764:	2100      	movs	r1, #0
    4766:	0020      	movs	r0, r4
    4768:	4b61      	ldr	r3, [pc, #388]	; (48f0 <dir_register+0x2c8>)
    476a:	4798      	blx	r3
    476c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    476e:	2800      	cmp	r0, #0
    4770:	d1d3      	bne.n	471a <dir_register+0xf2>
    4772:	4682      	mov	sl, r0
    4774:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4776:	4f5f      	ldr	r7, [pc, #380]	; (48f4 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4778:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    477a:	4b5f      	ldr	r3, [pc, #380]	; (48f8 <dir_register+0x2d0>)
    477c:	4699      	mov	r9, r3
    477e:	e00b      	b.n	4798 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4780:	2000      	movs	r0, #0
    4782:	e7e9      	b.n	4758 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4784:	1c6b      	adds	r3, r5, #1
    4786:	b29b      	uxth	r3, r3
    4788:	459b      	cmp	fp, r3
    478a:	d06d      	beq.n	4868 <dir_register+0x240>
    478c:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    478e:	2101      	movs	r1, #1
    4790:	0020      	movs	r0, r4
    4792:	47c8      	blx	r9
	} while (res == FR_OK);
    4794:	2800      	cmp	r0, #0
    4796:	d112      	bne.n	47be <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4798:	6921      	ldr	r1, [r4, #16]
    479a:	6820      	ldr	r0, [r4, #0]
    479c:	47b8      	blx	r7
		if (res != FR_OK) break;
    479e:	2800      	cmp	r0, #0
    47a0:	d000      	beq.n	47a4 <dir_register+0x17c>
    47a2:	e098      	b.n	48d6 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    47a4:	6963      	ldr	r3, [r4, #20]
    47a6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    47a8:	2be5      	cmp	r3, #229	; 0xe5
    47aa:	d001      	beq.n	47b0 <dir_register+0x188>
    47ac:	2b00      	cmp	r3, #0
    47ae:	d104      	bne.n	47ba <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    47b0:	2d00      	cmp	r5, #0
    47b2:	d1e7      	bne.n	4784 <dir_register+0x15c>
    47b4:	88e3      	ldrh	r3, [r4, #6]
    47b6:	469a      	mov	sl, r3
    47b8:	e7e4      	b.n	4784 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    47ba:	0035      	movs	r5, r6
    47bc:	e7e7      	b.n	478e <dir_register+0x166>
    47be:	4680      	mov	r8, r0
    47c0:	e7ab      	b.n	471a <dir_register+0xf2>
		res = dir_sdi(dj, is);
    47c2:	4651      	mov	r1, sl
    47c4:	0020      	movs	r0, r4
    47c6:	4b4a      	ldr	r3, [pc, #296]	; (48f0 <dir_register+0x2c8>)
    47c8:	4798      	blx	r3
    47ca:	4680      	mov	r8, r0
		if (res == FR_OK) {
    47cc:	2800      	cmp	r0, #0
    47ce:	d1a4      	bne.n	471a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    47d0:	69a0      	ldr	r0, [r4, #24]
    47d2:	4b4a      	ldr	r3, [pc, #296]	; (48fc <dir_register+0x2d4>)
    47d4:	4798      	blx	r3
    47d6:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    47d8:	46a8      	mov	r8, r5
    47da:	e01f      	b.n	481c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    47dc:	0022      	movs	r2, r4
    47de:	e067      	b.n	48b0 <dir_register+0x288>
    47e0:	465e      	mov	r6, fp
    47e2:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    47e4:	4946      	ldr	r1, [pc, #280]	; (4900 <dir_register+0x2d8>)
    47e6:	428b      	cmp	r3, r1
    47e8:	d003      	beq.n	47f2 <dir_register+0x1ca>
    47ea:	0052      	lsls	r2, r2, #1
    47ec:	5b93      	ldrh	r3, [r2, r6]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d103      	bne.n	47fa <dir_register+0x1d2>
    47f2:	2340      	movs	r3, #64	; 0x40
    47f4:	464a      	mov	r2, r9
    47f6:	431a      	orrs	r2, r3
    47f8:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    47fa:	464b      	mov	r3, r9
    47fc:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    47fe:	2301      	movs	r3, #1
    4800:	6822      	ldr	r2, [r4, #0]
    4802:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4804:	2100      	movs	r1, #0
    4806:	0020      	movs	r0, r4
    4808:	4b3b      	ldr	r3, [pc, #236]	; (48f8 <dir_register+0x2d0>)
    480a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    480c:	2800      	cmp	r0, #0
    480e:	d166      	bne.n	48de <dir_register+0x2b6>
    4810:	4645      	mov	r5, r8
    4812:	3d01      	subs	r5, #1
    4814:	b2ab      	uxth	r3, r5
    4816:	4698      	mov	r8, r3
    4818:	2b00      	cmp	r3, #0
    481a:	d027      	beq.n	486c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    481c:	6921      	ldr	r1, [r4, #16]
    481e:	6820      	ldr	r0, [r4, #0]
    4820:	4b34      	ldr	r3, [pc, #208]	; (48f4 <dir_register+0x2cc>)
    4822:	4798      	blx	r3
				if (res != FR_OK) break;
    4824:	2800      	cmp	r0, #0
    4826:	d158      	bne.n	48da <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4828:	69e6      	ldr	r6, [r4, #28]
    482a:	6960      	ldr	r0, [r4, #20]
    482c:	4643      	mov	r3, r8
    482e:	466a      	mov	r2, sp
    4830:	70d3      	strb	r3, [r2, #3]
    4832:	78d3      	ldrb	r3, [r2, #3]
    4834:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4836:	7913      	ldrb	r3, [r2, #4]
    4838:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    483a:	230f      	movs	r3, #15
    483c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    483e:	2300      	movs	r3, #0
    4840:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4842:	7683      	strb	r3, [r0, #26]
    4844:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4846:	464b      	mov	r3, r9
    4848:	3b01      	subs	r3, #1
    484a:	005a      	lsls	r2, r3, #1
    484c:	18d2      	adds	r2, r2, r3
    484e:	0092      	lsls	r2, r2, #2
    4850:	18d2      	adds	r2, r2, r3
    4852:	492c      	ldr	r1, [pc, #176]	; (4904 <dir_register+0x2dc>)
    4854:	000d      	movs	r5, r1
    4856:	350d      	adds	r5, #13
	s = wc = 0;
    4858:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    485a:	4f29      	ldr	r7, [pc, #164]	; (4900 <dir_register+0x2d8>)
    485c:	46b3      	mov	fp, r6
    485e:	46a4      	mov	ip, r4
    4860:	e029      	b.n	48b6 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4862:	2307      	movs	r3, #7
    4864:	4698      	mov	r8, r3
    4866:	e758      	b.n	471a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4868:	2b01      	cmp	r3, #1
    486a:	d8aa      	bhi.n	47c2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    486c:	6921      	ldr	r1, [r4, #16]
    486e:	6820      	ldr	r0, [r4, #0]
    4870:	4b20      	ldr	r3, [pc, #128]	; (48f4 <dir_register+0x2cc>)
    4872:	4798      	blx	r3
    4874:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4876:	2800      	cmp	r0, #0
    4878:	d000      	beq.n	487c <dir_register+0x254>
    487a:	e74e      	b.n	471a <dir_register+0xf2>
			dir = dj->dir;
    487c:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    487e:	2220      	movs	r2, #32
    4880:	2100      	movs	r1, #0
    4882:	0028      	movs	r0, r5
    4884:	4b20      	ldr	r3, [pc, #128]	; (4908 <dir_register+0x2e0>)
    4886:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4888:	220b      	movs	r2, #11
    488a:	69a1      	ldr	r1, [r4, #24]
    488c:	0028      	movs	r0, r5
    488e:	4b15      	ldr	r3, [pc, #84]	; (48e4 <dir_register+0x2bc>)
    4890:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    4892:	69a3      	ldr	r3, [r4, #24]
    4894:	7ada      	ldrb	r2, [r3, #11]
    4896:	2318      	movs	r3, #24
    4898:	4013      	ands	r3, r2
    489a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    489c:	6823      	ldr	r3, [r4, #0]
    489e:	2201      	movs	r2, #1
    48a0:	711a      	strb	r2, [r3, #4]
    48a2:	e73a      	b.n	471a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    48a4:	780c      	ldrb	r4, [r1, #0]
    48a6:	26ff      	movs	r6, #255	; 0xff
    48a8:	5506      	strb	r6, [r0, r4]
    48aa:	1904      	adds	r4, r0, r4
    48ac:	26ff      	movs	r6, #255	; 0xff
    48ae:	7066      	strb	r6, [r4, #1]
    48b0:	3101      	adds	r1, #1
	} while (++s < 13);
    48b2:	42a9      	cmp	r1, r5
    48b4:	d094      	beq.n	47e0 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    48b6:	42bb      	cmp	r3, r7
    48b8:	d0f4      	beq.n	48a4 <dir_register+0x27c>
    48ba:	1c54      	adds	r4, r2, #1
    48bc:	0052      	lsls	r2, r2, #1
    48be:	465b      	mov	r3, fp
    48c0:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    48c2:	780a      	ldrb	r2, [r1, #0]
    48c4:	5483      	strb	r3, [r0, r2]
    48c6:	1882      	adds	r2, r0, r2
    48c8:	0a1e      	lsrs	r6, r3, #8
    48ca:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    48cc:	2b00      	cmp	r3, #0
    48ce:	d185      	bne.n	47dc <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    48d0:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    48d2:	003b      	movs	r3, r7
    48d4:	e7ec      	b.n	48b0 <dir_register+0x288>
    48d6:	4680      	mov	r8, r0
    48d8:	e71f      	b.n	471a <dir_register+0xf2>
    48da:	4680      	mov	r8, r0
    48dc:	e71d      	b.n	471a <dir_register+0xf2>
    48de:	4680      	mov	r8, r0
    48e0:	e71b      	b.n	471a <dir_register+0xf2>
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	000039d5 	.word	0x000039d5
    48e8:	00004491 	.word	0x00004491
    48ec:	00006051 	.word	0x00006051
    48f0:	00004051 	.word	0x00004051
    48f4:	00003eb5 	.word	0x00003eb5
    48f8:	0000436d 	.word	0x0000436d
    48fc:	00003a13 	.word	0x00003a13
    4900:	0000ffff 	.word	0x0000ffff
    4904:	0000739c 	.word	0x0000739c
    4908:	000039e9 	.word	0x000039e9

0000490c <dir_read>:
{
    490c:	b5f0      	push	{r4, r5, r6, r7, lr}
    490e:	46de      	mov	lr, fp
    4910:	4657      	mov	r7, sl
    4912:	464e      	mov	r6, r9
    4914:	4645      	mov	r5, r8
    4916:	b5e0      	push	{r5, r6, r7, lr}
    4918:	b083      	sub	sp, #12
    491a:	0005      	movs	r5, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
    491c:	23ff      	movs	r3, #255	; 0xff
    491e:	4699      	mov	r9, r3
    4920:	26ff      	movs	r6, #255	; 0xff
	res = FR_NO_FILE;
    4922:	2404      	movs	r4, #4
		res = move_window(dj->fs, dj->sect);
    4924:	4f44      	ldr	r7, [pc, #272]	; (4a38 <dir_read+0x12c>)
		res = dir_next(dj, 0);				/* Next entry */
    4926:	4b45      	ldr	r3, [pc, #276]	; (4a3c <dir_read+0x130>)
    4928:	4698      	mov	r8, r3
	while (dj->sect) {
    492a:	e05b      	b.n	49e4 <dir_read+0xd8>
			if (a == AM_LFN) {			/* An LFN entry is found */
    492c:	2a0f      	cmp	r2, #15
    492e:	d147      	bne.n	49c0 <dir_read+0xb4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    4930:	065a      	lsls	r2, r3, #25
    4932:	d51a      	bpl.n	496a <dir_read+0x5e>
					sum = dir[LDIR_Chksum];
    4934:	7b42      	ldrb	r2, [r0, #13]
    4936:	4691      	mov	r9, r2
					c &= ~LLE; ord = c;
    4938:	2240      	movs	r2, #64	; 0x40
    493a:	4393      	bics	r3, r2
					dj->lfn_idx = dj->index;
    493c:	88ea      	ldrh	r2, [r5, #6]
    493e:	842a      	strh	r2, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4940:	7b42      	ldrb	r2, [r0, #13]
    4942:	4694      	mov	ip, r2
    4944:	26ff      	movs	r6, #255	; 0xff
    4946:	454a      	cmp	r2, r9
    4948:	d147      	bne.n	49da <dir_read+0xce>
    494a:	69ea      	ldr	r2, [r5, #28]
    494c:	4691      	mov	r9, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    494e:	7802      	ldrb	r2, [r0, #0]
    4950:	243f      	movs	r4, #63	; 0x3f
    4952:	4022      	ands	r2, r4
    4954:	3a01      	subs	r2, #1
    4956:	0054      	lsls	r4, r2, #1
    4958:	18a4      	adds	r4, r4, r2
    495a:	00a4      	lsls	r4, r4, #2
    495c:	18a2      	adds	r2, r4, r2
    495e:	9201      	str	r2, [sp, #4]
	s = 0; wc = 1;
    4960:	3efe      	subs	r6, #254	; 0xfe
    4962:	2100      	movs	r1, #0
			if (uc != 0xFFFF) return 0;		/* Check filler */
    4964:	4a36      	ldr	r2, [pc, #216]	; (4a40 <dir_read+0x134>)
    4966:	4692      	mov	sl, r2
    4968:	e008      	b.n	497c <dir_read+0x70>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    496a:	429e      	cmp	r6, r3
    496c:	d0e8      	beq.n	4940 <dir_read+0x34>
    496e:	26ff      	movs	r6, #255	; 0xff
    4970:	e033      	b.n	49da <dir_read+0xce>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    4972:	4552      	cmp	r2, sl
    4974:	d151      	bne.n	4a1a <dir_read+0x10e>
	} while (++s < 13);						/* Read all character in the entry */
    4976:	3101      	adds	r1, #1
    4978:	290d      	cmp	r1, #13
    497a:	d013      	beq.n	49a4 <dir_read+0x98>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    497c:	4a31      	ldr	r2, [pc, #196]	; (4a44 <dir_read+0x138>)
    497e:	5c8a      	ldrb	r2, [r1, r2]
    4980:	1884      	adds	r4, r0, r2
    4982:	7864      	ldrb	r4, [r4, #1]
    4984:	0224      	lsls	r4, r4, #8
    4986:	5c82      	ldrb	r2, [r0, r2]
    4988:	4322      	orrs	r2, r4
		if (wc) {	/* Last char has not been processed */
    498a:	2e00      	cmp	r6, #0
    498c:	d0f1      	beq.n	4972 <dir_read+0x66>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    498e:	9c01      	ldr	r4, [sp, #4]
    4990:	2cfe      	cmp	r4, #254	; 0xfe
    4992:	d842      	bhi.n	4a1a <dir_read+0x10e>
			lfnbuf[i++] = wc = uc;			/* Store it */
    4994:	0066      	lsls	r6, r4, #1
    4996:	464c      	mov	r4, r9
    4998:	5332      	strh	r2, [r6, r4]
    499a:	0016      	movs	r6, r2
    499c:	9c01      	ldr	r4, [sp, #4]
    499e:	3401      	adds	r4, #1
    49a0:	9401      	str	r4, [sp, #4]
    49a2:	e7e8      	b.n	4976 <dir_read+0x6a>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    49a4:	7802      	ldrb	r2, [r0, #0]
    49a6:	0652      	lsls	r2, r2, #25
    49a8:	d506      	bpl.n	49b8 <dir_read+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    49aa:	9a01      	ldr	r2, [sp, #4]
    49ac:	2afe      	cmp	r2, #254	; 0xfe
    49ae:	d834      	bhi.n	4a1a <dir_read+0x10e>
		lfnbuf[i] = 0;
    49b0:	0054      	lsls	r4, r2, #1
    49b2:	2200      	movs	r2, #0
    49b4:	4649      	mov	r1, r9
    49b6:	5262      	strh	r2, [r4, r1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    49b8:	3b01      	subs	r3, #1
    49ba:	b2de      	uxtb	r6, r3
    49bc:	46e1      	mov	r9, ip
    49be:	e00c      	b.n	49da <dir_read+0xce>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    49c0:	2e00      	cmp	r6, #0
    49c2:	d103      	bne.n	49cc <dir_read+0xc0>
    49c4:	4b20      	ldr	r3, [pc, #128]	; (4a48 <dir_read+0x13c>)
    49c6:	4798      	blx	r3
    49c8:	4581      	cmp	r9, r0
    49ca:	d02c      	beq.n	4a26 <dir_read+0x11a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    49cc:	2301      	movs	r3, #1
    49ce:	425b      	negs	r3, r3
    49d0:	842b      	strh	r3, [r5, #32]
    49d2:	e028      	b.n	4a26 <dir_read+0x11a>
			ord = 0xFF;
    49d4:	26ff      	movs	r6, #255	; 0xff
    49d6:	e000      	b.n	49da <dir_read+0xce>
    49d8:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
    49da:	2100      	movs	r1, #0
    49dc:	0028      	movs	r0, r5
    49de:	47c0      	blx	r8
    49e0:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    49e2:	d11e      	bne.n	4a22 <dir_read+0x116>
	while (dj->sect) {
    49e4:	6929      	ldr	r1, [r5, #16]
    49e6:	2900      	cmp	r1, #0
    49e8:	d014      	beq.n	4a14 <dir_read+0x108>
		res = move_window(dj->fs, dj->sect);
    49ea:	6828      	ldr	r0, [r5, #0]
    49ec:	47b8      	blx	r7
    49ee:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    49f0:	d117      	bne.n	4a22 <dir_read+0x116>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    49f2:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
    49f4:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    49f6:	2b00      	cmp	r3, #0
    49f8:	d012      	beq.n	4a20 <dir_read+0x114>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    49fa:	2be5      	cmp	r3, #229	; 0xe5
    49fc:	d0ea      	beq.n	49d4 <dir_read+0xc8>
    49fe:	2b2e      	cmp	r3, #46	; 0x2e
    4a00:	d0ea      	beq.n	49d8 <dir_read+0xcc>
		a = dir[DIR_Attr] & AM_MASK;
    4a02:	7ac1      	ldrb	r1, [r0, #11]
    4a04:	223f      	movs	r2, #63	; 0x3f
    4a06:	400a      	ands	r2, r1
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4a08:	0709      	lsls	r1, r1, #28
    4a0a:	d58f      	bpl.n	492c <dir_read+0x20>
    4a0c:	2a0f      	cmp	r2, #15
    4a0e:	d08f      	beq.n	4930 <dir_read+0x24>
			ord = 0xFF;
    4a10:	26ff      	movs	r6, #255	; 0xff
    4a12:	e7e2      	b.n	49da <dir_read+0xce>
	if (res != FR_OK) dj->sect = 0;
    4a14:	2c00      	cmp	r4, #0
    4a16:	d006      	beq.n	4a26 <dir_read+0x11a>
    4a18:	e003      	b.n	4a22 <dir_read+0x116>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4a1a:	46e1      	mov	r9, ip
    4a1c:	26ff      	movs	r6, #255	; 0xff
    4a1e:	e7dc      	b.n	49da <dir_read+0xce>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4a20:	2404      	movs	r4, #4
	if (res != FR_OK) dj->sect = 0;
    4a22:	2300      	movs	r3, #0
    4a24:	612b      	str	r3, [r5, #16]
}
    4a26:	0020      	movs	r0, r4
    4a28:	b003      	add	sp, #12
    4a2a:	bc3c      	pop	{r2, r3, r4, r5}
    4a2c:	4690      	mov	r8, r2
    4a2e:	4699      	mov	r9, r3
    4a30:	46a2      	mov	sl, r4
    4a32:	46ab      	mov	fp, r5
    4a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	00003eb5 	.word	0x00003eb5
    4a3c:	0000436d 	.word	0x0000436d
    4a40:	0000ffff 	.word	0x0000ffff
    4a44:	0000739c 	.word	0x0000739c
    4a48:	00003a13 	.word	0x00003a13

00004a4c <dir_remove>:
{
    4a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a4e:	46c6      	mov	lr, r8
    4a50:	b500      	push	{lr}
    4a52:	0004      	movs	r4, r0
	i = dj->index;	/* SFN index */
    4a54:	88c5      	ldrh	r5, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    4a56:	8c01      	ldrh	r1, [r0, #32]
    4a58:	4b12      	ldr	r3, [pc, #72]	; (4aa4 <dir_remove+0x58>)
    4a5a:	4299      	cmp	r1, r3
    4a5c:	d020      	beq.n	4aa0 <dir_remove+0x54>
    4a5e:	0020      	movs	r0, r4
    4a60:	4b11      	ldr	r3, [pc, #68]	; (4aa8 <dir_remove+0x5c>)
    4a62:	4798      	blx	r3
	if (res == FR_OK) {
    4a64:	2800      	cmp	r0, #0
    4a66:	d118      	bne.n	4a9a <dir_remove+0x4e>
			res = move_window(dj->fs, dj->sect);
    4a68:	4e10      	ldr	r6, [pc, #64]	; (4aac <dir_remove+0x60>)
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    4a6a:	27e5      	movs	r7, #229	; 0xe5
			res = dir_next(dj, 0);		/* Next entry */
    4a6c:	4b10      	ldr	r3, [pc, #64]	; (4ab0 <dir_remove+0x64>)
    4a6e:	4698      	mov	r8, r3
			res = move_window(dj->fs, dj->sect);
    4a70:	6921      	ldr	r1, [r4, #16]
    4a72:	6820      	ldr	r0, [r4, #0]
    4a74:	47b0      	blx	r6
			if (res != FR_OK) break;
    4a76:	2800      	cmp	r0, #0
    4a78:	d10c      	bne.n	4a94 <dir_remove+0x48>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    4a7a:	6963      	ldr	r3, [r4, #20]
    4a7c:	701f      	strb	r7, [r3, #0]
			dj->fs->wflag = 1;
    4a7e:	2301      	movs	r3, #1
    4a80:	6822      	ldr	r2, [r4, #0]
    4a82:	7113      	strb	r3, [r2, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    4a84:	88e3      	ldrh	r3, [r4, #6]
    4a86:	42ab      	cmp	r3, r5
    4a88:	d207      	bcs.n	4a9a <dir_remove+0x4e>
			res = dir_next(dj, 0);		/* Next entry */
    4a8a:	2100      	movs	r1, #0
    4a8c:	0020      	movs	r0, r4
    4a8e:	47c0      	blx	r8
		} while (res == FR_OK);
    4a90:	2800      	cmp	r0, #0
    4a92:	d0ed      	beq.n	4a70 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    4a94:	2804      	cmp	r0, #4
    4a96:	d100      	bne.n	4a9a <dir_remove+0x4e>
    4a98:	3802      	subs	r0, #2
}
    4a9a:	bc04      	pop	{r2}
    4a9c:	4690      	mov	r8, r2
    4a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    4aa0:	0029      	movs	r1, r5
    4aa2:	e7dc      	b.n	4a5e <dir_remove+0x12>
    4aa4:	0000ffff 	.word	0x0000ffff
    4aa8:	00004051 	.word	0x00004051
    4aac:	00003eb5 	.word	0x00003eb5
    4ab0:	0000436d 	.word	0x0000436d

00004ab4 <sync>:
{
    4ab4:	b570      	push	{r4, r5, r6, lr}
    4ab6:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4ab8:	2100      	movs	r1, #0
    4aba:	4b2c      	ldr	r3, [pc, #176]	; (4b6c <sync+0xb8>)
    4abc:	4798      	blx	r3
	if (res == FR_OK) {
    4abe:	2800      	cmp	r0, #0
    4ac0:	d10a      	bne.n	4ad8 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4ac2:	7823      	ldrb	r3, [r4, #0]
    4ac4:	2b03      	cmp	r3, #3
    4ac6:	d008      	beq.n	4ada <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4ac8:	7860      	ldrb	r0, [r4, #1]
    4aca:	2200      	movs	r2, #0
    4acc:	2100      	movs	r1, #0
    4ace:	4b28      	ldr	r3, [pc, #160]	; (4b70 <sync+0xbc>)
    4ad0:	4798      	blx	r3
    4ad2:	1e43      	subs	r3, r0, #1
    4ad4:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    4ad6:	b2c0      	uxtb	r0, r0
}
    4ad8:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4ada:	7963      	ldrb	r3, [r4, #5]
    4adc:	2b00      	cmp	r3, #0
    4ade:	d0f3      	beq.n	4ac8 <sync+0x14>
			fs->winsect = 0;
    4ae0:	2600      	movs	r6, #0
    4ae2:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4ae4:	0025      	movs	r5, r4
    4ae6:	3530      	adds	r5, #48	; 0x30
    4ae8:	2280      	movs	r2, #128	; 0x80
    4aea:	0092      	lsls	r2, r2, #2
    4aec:	2100      	movs	r1, #0
    4aee:	0028      	movs	r0, r5
    4af0:	4b20      	ldr	r3, [pc, #128]	; (4b74 <sync+0xc0>)
    4af2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4af4:	2255      	movs	r2, #85	; 0x55
    4af6:	4b20      	ldr	r3, [pc, #128]	; (4b78 <sync+0xc4>)
    4af8:	54e2      	strb	r2, [r4, r3]
    4afa:	3255      	adds	r2, #85	; 0x55
    4afc:	4b1f      	ldr	r3, [pc, #124]	; (4b7c <sync+0xc8>)
    4afe:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4b00:	3bde      	subs	r3, #222	; 0xde
    4b02:	3bff      	subs	r3, #255	; 0xff
    4b04:	3a7a      	subs	r2, #122	; 0x7a
    4b06:	54a3      	strb	r3, [r4, r2]
    4b08:	3201      	adds	r2, #1
    4b0a:	54a3      	strb	r3, [r4, r2]
    4b0c:	330f      	adds	r3, #15
    4b0e:	3201      	adds	r2, #1
    4b10:	54a3      	strb	r3, [r4, r2]
    4b12:	320f      	adds	r2, #15
    4b14:	2133      	movs	r1, #51	; 0x33
    4b16:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4b18:	313f      	adds	r1, #63	; 0x3f
    4b1a:	2085      	movs	r0, #133	; 0x85
    4b1c:	0080      	lsls	r0, r0, #2
    4b1e:	5421      	strb	r1, [r4, r0]
    4b20:	4817      	ldr	r0, [pc, #92]	; (4b80 <sync+0xcc>)
    4b22:	5421      	strb	r1, [r4, r0]
    4b24:	4917      	ldr	r1, [pc, #92]	; (4b84 <sync+0xd0>)
    4b26:	5462      	strb	r2, [r4, r1]
    4b28:	4a17      	ldr	r2, [pc, #92]	; (4b88 <sync+0xd4>)
    4b2a:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4b2c:	6923      	ldr	r3, [r4, #16]
    4b2e:	3201      	adds	r2, #1
    4b30:	54a3      	strb	r3, [r4, r2]
    4b32:	0a19      	lsrs	r1, r3, #8
    4b34:	4a15      	ldr	r2, [pc, #84]	; (4b8c <sync+0xd8>)
    4b36:	54a1      	strb	r1, [r4, r2]
    4b38:	0c19      	lsrs	r1, r3, #16
    4b3a:	4a15      	ldr	r2, [pc, #84]	; (4b90 <sync+0xdc>)
    4b3c:	54a1      	strb	r1, [r4, r2]
    4b3e:	0e1b      	lsrs	r3, r3, #24
    4b40:	4a14      	ldr	r2, [pc, #80]	; (4b94 <sync+0xe0>)
    4b42:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    4b44:	68e3      	ldr	r3, [r4, #12]
    4b46:	3201      	adds	r2, #1
    4b48:	54a3      	strb	r3, [r4, r2]
    4b4a:	0a19      	lsrs	r1, r3, #8
    4b4c:	4a12      	ldr	r2, [pc, #72]	; (4b98 <sync+0xe4>)
    4b4e:	54a1      	strb	r1, [r4, r2]
    4b50:	0c19      	lsrs	r1, r3, #16
    4b52:	4a12      	ldr	r2, [pc, #72]	; (4b9c <sync+0xe8>)
    4b54:	54a1      	strb	r1, [r4, r2]
    4b56:	0e1b      	lsrs	r3, r3, #24
    4b58:	4a11      	ldr	r2, [pc, #68]	; (4ba0 <sync+0xec>)
    4b5a:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4b5c:	7860      	ldrb	r0, [r4, #1]
    4b5e:	2301      	movs	r3, #1
    4b60:	6962      	ldr	r2, [r4, #20]
    4b62:	0029      	movs	r1, r5
    4b64:	4d0f      	ldr	r5, [pc, #60]	; (4ba4 <sync+0xf0>)
    4b66:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4b68:	7166      	strb	r6, [r4, #5]
    4b6a:	e7ad      	b.n	4ac8 <sync+0x14>
    4b6c:	00003eb5 	.word	0x00003eb5
    4b70:	00003919 	.word	0x00003919
    4b74:	000039e9 	.word	0x000039e9
    4b78:	0000022e 	.word	0x0000022e
    4b7c:	0000022f 	.word	0x0000022f
    4b80:	00000215 	.word	0x00000215
    4b84:	00000216 	.word	0x00000216
    4b88:	00000217 	.word	0x00000217
    4b8c:	00000219 	.word	0x00000219
    4b90:	0000021a 	.word	0x0000021a
    4b94:	0000021b 	.word	0x0000021b
    4b98:	0000021d 	.word	0x0000021d
    4b9c:	0000021e 	.word	0x0000021e
    4ba0:	0000021f 	.word	0x0000021f
    4ba4:	00003895 	.word	0x00003895

00004ba8 <follow_path>:
{
    4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4baa:	46de      	mov	lr, fp
    4bac:	4657      	mov	r7, sl
    4bae:	464e      	mov	r6, r9
    4bb0:	4645      	mov	r5, r8
    4bb2:	b5e0      	push	{r5, r6, r7, lr}
    4bb4:	b083      	sub	sp, #12
    4bb6:	4682      	mov	sl, r0
    4bb8:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4bba:	780b      	ldrb	r3, [r1, #0]
    4bbc:	2b2f      	cmp	r3, #47	; 0x2f
    4bbe:	d00f      	beq.n	4be0 <follow_path+0x38>
    4bc0:	2b5c      	cmp	r3, #92	; 0x5c
    4bc2:	d00d      	beq.n	4be0 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4bc4:	2300      	movs	r3, #0
    4bc6:	4652      	mov	r2, sl
    4bc8:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4bca:	782b      	ldrb	r3, [r5, #0]
    4bcc:	4657      	mov	r7, sl
    4bce:	2b1f      	cmp	r3, #31
    4bd0:	d809      	bhi.n	4be6 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4bd2:	2100      	movs	r1, #0
    4bd4:	4650      	mov	r0, sl
    4bd6:	4bb2      	ldr	r3, [pc, #712]	; (4ea0 <follow_path+0x2f8>)
    4bd8:	4798      	blx	r3
		dj->dir = 0;
    4bda:	2300      	movs	r3, #0
    4bdc:	617b      	str	r3, [r7, #20]
    4bde:	e13a      	b.n	4e56 <follow_path+0x2ae>
		path++;
    4be0:	3501      	adds	r5, #1
    4be2:	e7ef      	b.n	4bc4 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4be4:	3501      	adds	r5, #1
    4be6:	7828      	ldrb	r0, [r5, #0]
    4be8:	282f      	cmp	r0, #47	; 0x2f
    4bea:	d0fb      	beq.n	4be4 <follow_path+0x3c>
    4bec:	285c      	cmp	r0, #92	; 0x5c
    4bee:	d0f9      	beq.n	4be4 <follow_path+0x3c>
	lfn = dj->lfn;
    4bf0:	69fb      	ldr	r3, [r7, #28]
    4bf2:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4bf4:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4bf6:	281f      	cmp	r0, #31
    4bf8:	d800      	bhi.n	4bfc <follow_path+0x54>
    4bfa:	e13b      	b.n	4e74 <follow_path+0x2cc>
    4bfc:	282f      	cmp	r0, #47	; 0x2f
    4bfe:	d100      	bne.n	4c02 <follow_path+0x5a>
    4c00:	e13b      	b.n	4e7a <follow_path+0x2d2>
    4c02:	285c      	cmp	r0, #92	; 0x5c
    4c04:	d100      	bne.n	4c08 <follow_path+0x60>
    4c06:	e13b      	b.n	4e80 <follow_path+0x2d8>
    4c08:	1c6e      	adds	r6, r5, #1
    4c0a:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4c0c:	2380      	movs	r3, #128	; 0x80
    4c0e:	005b      	lsls	r3, r3, #1
    4c10:	4698      	mov	r8, r3
    4c12:	46bb      	mov	fp, r7
    4c14:	002b      	movs	r3, r5
    4c16:	0025      	movs	r5, r4
    4c18:	0034      	movs	r4, r6
    4c1a:	4656      	mov	r6, sl
    4c1c:	4699      	mov	r9, r3
    4c1e:	e011      	b.n	4c44 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4c20:	2b00      	cmp	r3, #0
    4c22:	d135      	bne.n	4c90 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4c24:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    4c26:	1c6b      	adds	r3, r5, #1
    4c28:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4c2a:	281f      	cmp	r0, #31
    4c2c:	d91e      	bls.n	4c6c <follow_path+0xc4>
    4c2e:	282f      	cmp	r0, #47	; 0x2f
    4c30:	d100      	bne.n	4c34 <follow_path+0x8c>
    4c32:	e128      	b.n	4e86 <follow_path+0x2de>
    4c34:	285c      	cmp	r0, #92	; 0x5c
    4c36:	d100      	bne.n	4c3a <follow_path+0x92>
    4c38:	e142      	b.n	4ec0 <follow_path+0x318>
    4c3a:	3602      	adds	r6, #2
    4c3c:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4c3e:	4543      	cmp	r3, r8
    4c40:	d026      	beq.n	4c90 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    4c42:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4c44:	2101      	movs	r1, #1
    4c46:	4b97      	ldr	r3, [pc, #604]	; (4ea4 <follow_path+0x2fc>)
    4c48:	4798      	blx	r3
    4c4a:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4c4c:	d020      	beq.n	4c90 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4c4e:	287f      	cmp	r0, #127	; 0x7f
    4c50:	d8e8      	bhi.n	4c24 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    4c52:	2822      	cmp	r0, #34	; 0x22
    4c54:	d100      	bne.n	4c58 <follow_path+0xb0>
    4c56:	e0fd      	b.n	4e54 <follow_path+0x2ac>
    4c58:	232a      	movs	r3, #42	; 0x2a
    4c5a:	4a93      	ldr	r2, [pc, #588]	; (4ea8 <follow_path+0x300>)
    4c5c:	b29f      	uxth	r7, r3
    4c5e:	428f      	cmp	r7, r1
    4c60:	d0de      	beq.n	4c20 <follow_path+0x78>
    4c62:	3201      	adds	r2, #1
    4c64:	7813      	ldrb	r3, [r2, #0]
    4c66:	2b00      	cmp	r3, #0
    4c68:	d1f8      	bne.n	4c5c <follow_path+0xb4>
    4c6a:	e7db      	b.n	4c24 <follow_path+0x7c>
    4c6c:	002c      	movs	r4, r5
    4c6e:	465f      	mov	r7, fp
    4c70:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4c72:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4c74:	2604      	movs	r6, #4
    4c76:	e10b      	b.n	4e90 <follow_path+0x2e8>
		di--;
    4c78:	3c01      	subs	r4, #1
    4c7a:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4c7c:	2c00      	cmp	r4, #0
    4c7e:	d100      	bne.n	4c82 <follow_path+0xda>
    4c80:	e0e8      	b.n	4e54 <follow_path+0x2ac>
		w = lfn[di-1];
    4c82:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4c84:	2a20      	cmp	r2, #32
    4c86:	d0f7      	beq.n	4c78 <follow_path+0xd0>
    4c88:	2a2e      	cmp	r2, #46	; 0x2e
    4c8a:	d0f5      	beq.n	4c78 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4c8c:	2c00      	cmp	r4, #0
    4c8e:	d101      	bne.n	4c94 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4c90:	2006      	movs	r0, #6
	return res;
    4c92:	e0e0      	b.n	4e56 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4c94:	0063      	lsls	r3, r4, #1
    4c96:	4698      	mov	r8, r3
    4c98:	2300      	movs	r3, #0
    4c9a:	4652      	mov	r2, sl
    4c9c:	4641      	mov	r1, r8
    4c9e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4ca0:	220b      	movs	r2, #11
    4ca2:	2120      	movs	r1, #32
    4ca4:	69b8      	ldr	r0, [r7, #24]
    4ca6:	4b81      	ldr	r3, [pc, #516]	; (4eac <follow_path+0x304>)
    4ca8:	4798      	blx	r3
    4caa:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4cac:	2300      	movs	r3, #0
    4cae:	e001      	b.n	4cb4 <follow_path+0x10c>
    4cb0:	3301      	adds	r3, #1
    4cb2:	3202      	adds	r2, #2
    4cb4:	8811      	ldrh	r1, [r2, #0]
    4cb6:	2920      	cmp	r1, #32
    4cb8:	d0fa      	beq.n	4cb0 <follow_path+0x108>
    4cba:	292e      	cmp	r1, #46	; 0x2e
    4cbc:	d0f8      	beq.n	4cb0 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d001      	beq.n	4cc6 <follow_path+0x11e>
    4cc2:	2203      	movs	r2, #3
    4cc4:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4cc6:	4652      	mov	r2, sl
    4cc8:	4442      	add	r2, r8
    4cca:	3a02      	subs	r2, #2
    4ccc:	8812      	ldrh	r2, [r2, #0]
    4cce:	2a2e      	cmp	r2, #46	; 0x2e
    4cd0:	d009      	beq.n	4ce6 <follow_path+0x13e>
    4cd2:	4642      	mov	r2, r8
    4cd4:	3a04      	subs	r2, #4
    4cd6:	4452      	add	r2, sl
    4cd8:	3c01      	subs	r4, #1
    4cda:	2c00      	cmp	r4, #0
    4cdc:	d003      	beq.n	4ce6 <follow_path+0x13e>
    4cde:	3a02      	subs	r2, #2
    4ce0:	8851      	ldrh	r1, [r2, #2]
    4ce2:	292e      	cmp	r1, #46	; 0x2e
    4ce4:	d1f8      	bne.n	4cd8 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4ce6:	2208      	movs	r2, #8
    4ce8:	9201      	str	r2, [sp, #4]
    4cea:	2200      	movs	r2, #0
    4cec:	4693      	mov	fp, r2
    4cee:	4691      	mov	r9, r2
    4cf0:	46a0      	mov	r8, r4
    4cf2:	e006      	b.n	4d02 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4cf4:	4544      	cmp	r4, r8
    4cf6:	d100      	bne.n	4cfa <follow_path+0x152>
    4cf8:	e0e6      	b.n	4ec8 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4cfa:	2303      	movs	r3, #3
    4cfc:	431e      	orrs	r6, r3
    4cfe:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4d00:	0023      	movs	r3, r4
    4d02:	1c5c      	adds	r4, r3, #1
    4d04:	005b      	lsls	r3, r3, #1
    4d06:	4652      	mov	r2, sl
    4d08:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4d0a:	2800      	cmp	r0, #0
    4d0c:	d02c      	beq.n	4d68 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4d0e:	2820      	cmp	r0, #32
    4d10:	d0f3      	beq.n	4cfa <follow_path+0x152>
    4d12:	282e      	cmp	r0, #46	; 0x2e
    4d14:	d0ee      	beq.n	4cf4 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4d16:	9b01      	ldr	r3, [sp, #4]
    4d18:	459b      	cmp	fp, r3
    4d1a:	d219      	bcs.n	4d50 <follow_path+0x1a8>
    4d1c:	4544      	cmp	r4, r8
    4d1e:	d100      	bne.n	4d22 <follow_path+0x17a>
    4d20:	e0d2      	b.n	4ec8 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4d22:	287f      	cmp	r0, #127	; 0x7f
    4d24:	d85e      	bhi.n	4de4 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4d26:	282b      	cmp	r0, #43	; 0x2b
    4d28:	d06e      	beq.n	4e08 <follow_path+0x260>
    4d2a:	232c      	movs	r3, #44	; 0x2c
    4d2c:	4a60      	ldr	r2, [pc, #384]	; (4eb0 <follow_path+0x308>)
    4d2e:	b299      	uxth	r1, r3
    4d30:	4281      	cmp	r1, r0
    4d32:	d067      	beq.n	4e04 <follow_path+0x25c>
    4d34:	3201      	adds	r2, #1
    4d36:	7813      	ldrb	r3, [r2, #0]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d1f8      	bne.n	4d2e <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4d3c:	0003      	movs	r3, r0
    4d3e:	3b41      	subs	r3, #65	; 0x41
    4d40:	b29b      	uxth	r3, r3
    4d42:	2b19      	cmp	r3, #25
    4d44:	d86c      	bhi.n	4e20 <follow_path+0x278>
					b |= 2;
    4d46:	2302      	movs	r3, #2
    4d48:	464a      	mov	r2, r9
    4d4a:	431a      	orrs	r2, r3
    4d4c:	4691      	mov	r9, r2
    4d4e:	e05f      	b.n	4e10 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    4d50:	9b01      	ldr	r3, [sp, #4]
    4d52:	2b0b      	cmp	r3, #11
    4d54:	d03b      	beq.n	4dce <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    4d56:	4544      	cmp	r4, r8
    4d58:	d100      	bne.n	4d5c <follow_path+0x1b4>
    4d5a:	e0b9      	b.n	4ed0 <follow_path+0x328>
    4d5c:	2303      	movs	r3, #3
    4d5e:	431e      	orrs	r6, r3
    4d60:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    4d62:	4544      	cmp	r4, r8
    4d64:	d800      	bhi.n	4d68 <follow_path+0x1c0>
    4d66:	e0b3      	b.n	4ed0 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4d68:	69bb      	ldr	r3, [r7, #24]
    4d6a:	781a      	ldrb	r2, [r3, #0]
    4d6c:	2ae5      	cmp	r2, #229	; 0xe5
    4d6e:	d036      	beq.n	4dde <follow_path+0x236>
	if (ni == 8) b <<= 2;
    4d70:	9b01      	ldr	r3, [sp, #4]
    4d72:	2b08      	cmp	r3, #8
    4d74:	d060      	beq.n	4e38 <follow_path+0x290>
    4d76:	230c      	movs	r3, #12
    4d78:	464a      	mov	r2, r9
    4d7a:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4d7c:	2b0c      	cmp	r3, #12
    4d7e:	d060      	beq.n	4e42 <follow_path+0x29a>
    4d80:	43d2      	mvns	r2, r2
    4d82:	0792      	lsls	r2, r2, #30
    4d84:	d05d      	beq.n	4e42 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4d86:	07b2      	lsls	r2, r6, #30
    4d88:	d406      	bmi.n	4d98 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4d8a:	2203      	movs	r2, #3
    4d8c:	4649      	mov	r1, r9
    4d8e:	400a      	ands	r2, r1
    4d90:	2a01      	cmp	r2, #1
    4d92:	d059      	beq.n	4e48 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4d94:	2b04      	cmp	r3, #4
    4d96:	d05a      	beq.n	4e4e <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    4d98:	69bb      	ldr	r3, [r7, #24]
    4d9a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4d9c:	0038      	movs	r0, r7
    4d9e:	4b45      	ldr	r3, [pc, #276]	; (4eb4 <follow_path+0x30c>)
    4da0:	4798      	blx	r3
			ns = *(dj->fn+NS);
    4da2:	69bb      	ldr	r3, [r7, #24]
    4da4:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4da6:	2800      	cmp	r0, #0
    4da8:	d15c      	bne.n	4e64 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4daa:	075b      	lsls	r3, r3, #29
    4dac:	d453      	bmi.n	4e56 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4dae:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4db0:	7ad3      	ldrb	r3, [r2, #11]
    4db2:	06db      	lsls	r3, r3, #27
    4db4:	d55c      	bpl.n	4e70 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4db6:	7d51      	ldrb	r1, [r2, #21]
    4db8:	0209      	lsls	r1, r1, #8
    4dba:	7d13      	ldrb	r3, [r2, #20]
    4dbc:	430b      	orrs	r3, r1
    4dbe:	041b      	lsls	r3, r3, #16
    4dc0:	7ed1      	ldrb	r1, [r2, #27]
    4dc2:	0209      	lsls	r1, r1, #8
    4dc4:	7e92      	ldrb	r2, [r2, #26]
    4dc6:	430a      	orrs	r2, r1
    4dc8:	4313      	orrs	r3, r2
    4dca:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4dcc:	e70b      	b.n	4be6 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4dce:	2303      	movs	r3, #3
    4dd0:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4dd2:	69bb      	ldr	r3, [r7, #24]
    4dd4:	781a      	ldrb	r2, [r3, #0]
    4dd6:	2ae5      	cmp	r2, #229	; 0xe5
    4dd8:	d1cd      	bne.n	4d76 <follow_path+0x1ce>
    4dda:	220b      	movs	r2, #11
    4ddc:	9201      	str	r2, [sp, #4]
    4dde:	2205      	movs	r2, #5
    4de0:	701a      	strb	r2, [r3, #0]
    4de2:	e7c5      	b.n	4d70 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4de4:	2100      	movs	r1, #0
    4de6:	4b2f      	ldr	r3, [pc, #188]	; (4ea4 <follow_path+0x2fc>)
    4de8:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4dea:	2800      	cmp	r0, #0
    4dec:	d100      	bne.n	4df0 <follow_path+0x248>
    4dee:	e079      	b.n	4ee4 <follow_path+0x33c>
    4df0:	4b31      	ldr	r3, [pc, #196]	; (4eb8 <follow_path+0x310>)
    4df2:	469c      	mov	ip, r3
    4df4:	4460      	add	r0, ip
    4df6:	3880      	subs	r0, #128	; 0x80
    4df8:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4dfa:	2302      	movs	r3, #2
    4dfc:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4dfe:	2800      	cmp	r0, #0
    4e00:	d002      	beq.n	4e08 <follow_path+0x260>
    4e02:	e790      	b.n	4d26 <follow_path+0x17e>
    4e04:	2b00      	cmp	r3, #0
    4e06:	d099      	beq.n	4d3c <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4e08:	2303      	movs	r3, #3
    4e0a:	431e      	orrs	r6, r3
    4e0c:	b2f6      	uxtb	r6, r6
    4e0e:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4e10:	69bb      	ldr	r3, [r7, #24]
    4e12:	465a      	mov	r2, fp
    4e14:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4e16:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    4e18:	2201      	movs	r2, #1
    4e1a:	4694      	mov	ip, r2
    4e1c:	44e3      	add	fp, ip
    4e1e:	e770      	b.n	4d02 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4e20:	0003      	movs	r3, r0
    4e22:	3b61      	subs	r3, #97	; 0x61
    4e24:	b29b      	uxth	r3, r3
    4e26:	2b19      	cmp	r3, #25
    4e28:	d8f2      	bhi.n	4e10 <follow_path+0x268>
						b |= 1; w -= 0x20;
    4e2a:	2301      	movs	r3, #1
    4e2c:	464a      	mov	r2, r9
    4e2e:	431a      	orrs	r2, r3
    4e30:	4691      	mov	r9, r2
    4e32:	3820      	subs	r0, #32
    4e34:	b280      	uxth	r0, r0
    4e36:	e7eb      	b.n	4e10 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    4e38:	464b      	mov	r3, r9
    4e3a:	009b      	lsls	r3, r3, #2
    4e3c:	b2db      	uxtb	r3, r3
    4e3e:	4699      	mov	r9, r3
    4e40:	e799      	b.n	4d76 <follow_path+0x1ce>
		cf |= NS_LFN;
    4e42:	2202      	movs	r2, #2
    4e44:	4316      	orrs	r6, r2
    4e46:	e79e      	b.n	4d86 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4e48:	320f      	adds	r2, #15
    4e4a:	4316      	orrs	r6, r2
    4e4c:	e7a2      	b.n	4d94 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4e4e:	3304      	adds	r3, #4
    4e50:	431e      	orrs	r6, r3
    4e52:	e7a1      	b.n	4d98 <follow_path+0x1f0>
    4e54:	2006      	movs	r0, #6
}
    4e56:	b003      	add	sp, #12
    4e58:	bc3c      	pop	{r2, r3, r4, r5}
    4e5a:	4690      	mov	r8, r2
    4e5c:	4699      	mov	r9, r3
    4e5e:	46a2      	mov	sl, r4
    4e60:	46ab      	mov	fp, r5
    4e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4e64:	2804      	cmp	r0, #4
    4e66:	d1f6      	bne.n	4e56 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4e68:	075b      	lsls	r3, r3, #29
    4e6a:	d4f4      	bmi.n	4e56 <follow_path+0x2ae>
    4e6c:	3001      	adds	r0, #1
    4e6e:	e7f2      	b.n	4e56 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    4e70:	2005      	movs	r0, #5
    4e72:	e7f0      	b.n	4e56 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4e74:	2301      	movs	r3, #1
	si = di = 0;
    4e76:	2400      	movs	r4, #0
    4e78:	e6fb      	b.n	4c72 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4e7a:	2301      	movs	r3, #1
	si = di = 0;
    4e7c:	2400      	movs	r4, #0
    4e7e:	e005      	b.n	4e8c <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    4e80:	2301      	movs	r3, #1
	si = di = 0;
    4e82:	2400      	movs	r4, #0
    4e84:	e002      	b.n	4e8c <follow_path+0x2e4>
    4e86:	002c      	movs	r4, r5
    4e88:	465f      	mov	r7, fp
    4e8a:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4e8c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4e8e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    4e90:	2c00      	cmp	r4, #0
    4e92:	d0df      	beq.n	4e54 <follow_path+0x2ac>
    4e94:	4b09      	ldr	r3, [pc, #36]	; (4ebc <follow_path+0x314>)
    4e96:	18e3      	adds	r3, r4, r3
    4e98:	005b      	lsls	r3, r3, #1
    4e9a:	4453      	add	r3, sl
    4e9c:	e6f1      	b.n	4c82 <follow_path+0xda>
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	00004051 	.word	0x00004051
    4ea4:	000057ed 	.word	0x000057ed
    4ea8:	0000742d 	.word	0x0000742d
    4eac:	000039e9 	.word	0x000039e9
    4eb0:	00007439 	.word	0x00007439
    4eb4:	00004491 	.word	0x00004491
    4eb8:	000073ac 	.word	0x000073ac
    4ebc:	7fffffff 	.word	0x7fffffff
    4ec0:	002c      	movs	r4, r5
    4ec2:	465f      	mov	r7, fp
    4ec4:	464d      	mov	r5, r9
    4ec6:	e7e1      	b.n	4e8c <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4ec8:	9b01      	ldr	r3, [sp, #4]
    4eca:	2b0b      	cmp	r3, #11
    4ecc:	d100      	bne.n	4ed0 <follow_path+0x328>
    4ece:	e77e      	b.n	4dce <follow_path+0x226>
			b <<= 2; continue;
    4ed0:	464b      	mov	r3, r9
    4ed2:	009b      	lsls	r3, r3, #2
    4ed4:	b2db      	uxtb	r3, r3
    4ed6:	4699      	mov	r9, r3
    4ed8:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4eda:	220b      	movs	r2, #11
    4edc:	9201      	str	r2, [sp, #4]
    4ede:	3a03      	subs	r2, #3
    4ee0:	4693      	mov	fp, r2
    4ee2:	e70e      	b.n	4d02 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4ee4:	2302      	movs	r3, #2
    4ee6:	431e      	orrs	r6, r3
    4ee8:	e78e      	b.n	4e08 <follow_path+0x260>
    4eea:	46c0      	nop			; (mov r8, r8)

00004eec <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4eec:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4eee:	2807      	cmp	r0, #7
    4ef0:	d901      	bls.n	4ef6 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4ef2:	0018      	movs	r0, r3
    4ef4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4ef6:	0083      	lsls	r3, r0, #2
    4ef8:	4a07      	ldr	r2, [pc, #28]	; (4f18 <f_mount+0x2c>)
    4efa:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4efc:	2b00      	cmp	r3, #0
    4efe:	d001      	beq.n	4f04 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4f00:	2200      	movs	r2, #0
    4f02:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4f04:	2900      	cmp	r1, #0
    4f06:	d001      	beq.n	4f0c <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4f08:	2300      	movs	r3, #0
    4f0a:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4f0c:	0080      	lsls	r0, r0, #2
    4f0e:	4b02      	ldr	r3, [pc, #8]	; (4f18 <f_mount+0x2c>)
    4f10:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4f12:	2300      	movs	r3, #0
    4f14:	e7ed      	b.n	4ef2 <f_mount+0x6>
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	200001bc 	.word	0x200001bc

00004f1c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f1e:	46c6      	mov	lr, r8
    4f20:	b500      	push	{lr}
    4f22:	4c59      	ldr	r4, [pc, #356]	; (5088 <f_open+0x16c>)
    4f24:	44a5      	add	sp, r4
    4f26:	0005      	movs	r5, r0
    4f28:	9101      	str	r1, [sp, #4]
    4f2a:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4f2c:	2300      	movs	r3, #0
    4f2e:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4f30:	261f      	movs	r6, #31
    4f32:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4f34:	221e      	movs	r2, #30
    4f36:	403a      	ands	r2, r7
    4f38:	a985      	add	r1, sp, #532	; 0x214
    4f3a:	a801      	add	r0, sp, #4
    4f3c:	4b53      	ldr	r3, [pc, #332]	; (508c <f_open+0x170>)
    4f3e:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4f40:	ab82      	add	r3, sp, #520	; 0x208
    4f42:	938b      	str	r3, [sp, #556]	; 0x22c
    4f44:	ab02      	add	r3, sp, #8
    4f46:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4f48:	2800      	cmp	r0, #0
    4f4a:	d006      	beq.n	4f5a <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4f4c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f4e:	231c      	movs	r3, #28
    4f50:	423b      	tst	r3, r7
    4f52:	d145      	bne.n	4fe0 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4f54:	2800      	cmp	r0, #0
    4f56:	d13d      	bne.n	4fd4 <f_open+0xb8>
    4f58:	e00c      	b.n	4f74 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4f5a:	9901      	ldr	r1, [sp, #4]
    4f5c:	a885      	add	r0, sp, #532	; 0x214
    4f5e:	4b4c      	ldr	r3, [pc, #304]	; (5090 <f_open+0x174>)
    4f60:	4798      	blx	r3
	dir = dj.dir;
    4f62:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4f64:	2800      	cmp	r0, #0
    4f66:	d1f2      	bne.n	4f4e <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4f68:	2c00      	cmp	r4, #0
    4f6a:	d100      	bne.n	4f6e <f_open+0x52>
    4f6c:	e086      	b.n	507c <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f6e:	231c      	movs	r3, #28
    4f70:	423b      	tst	r3, r7
    4f72:	d146      	bne.n	5002 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4f74:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4f76:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4f78:	06da      	lsls	r2, r3, #27
    4f7a:	d42b      	bmi.n	4fd4 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4f7c:	07ba      	lsls	r2, r7, #30
    4f7e:	d502      	bpl.n	4f86 <f_open+0x6a>
					res = FR_DENIED;
    4f80:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4f82:	07db      	lsls	r3, r3, #31
    4f84:	d426      	bmi.n	4fd4 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4f86:	073b      	lsls	r3, r7, #28
    4f88:	d501      	bpl.n	4f8e <f_open+0x72>
			mode |= FA__WRITTEN;
    4f8a:	2320      	movs	r3, #32
    4f8c:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4f8e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f92:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4f94:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4f96:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4f98:	7d62      	ldrb	r2, [r4, #21]
    4f9a:	0212      	lsls	r2, r2, #8
    4f9c:	7d23      	ldrb	r3, [r4, #20]
    4f9e:	4313      	orrs	r3, r2
    4fa0:	041b      	lsls	r3, r3, #16
    4fa2:	7ee1      	ldrb	r1, [r4, #27]
    4fa4:	0209      	lsls	r1, r1, #8
    4fa6:	7ea2      	ldrb	r2, [r4, #26]
    4fa8:	430a      	orrs	r2, r1
    4faa:	4313      	orrs	r3, r2
    4fac:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4fae:	7fe3      	ldrb	r3, [r4, #31]
    4fb0:	061b      	lsls	r3, r3, #24
    4fb2:	7fa2      	ldrb	r2, [r4, #30]
    4fb4:	0412      	lsls	r2, r2, #16
    4fb6:	4313      	orrs	r3, r2
    4fb8:	7f22      	ldrb	r2, [r4, #28]
    4fba:	4313      	orrs	r3, r2
    4fbc:	7f62      	ldrb	r2, [r4, #29]
    4fbe:	0212      	lsls	r2, r2, #8
    4fc0:	4313      	orrs	r3, r2
    4fc2:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4fc4:	2300      	movs	r3, #0
    4fc6:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4fc8:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4fca:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4fcc:	602b      	str	r3, [r5, #0]
    4fce:	88db      	ldrh	r3, [r3, #6]
    4fd0:	80ab      	strh	r3, [r5, #4]
    4fd2:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4fd4:	238e      	movs	r3, #142	; 0x8e
    4fd6:	009b      	lsls	r3, r3, #2
    4fd8:	449d      	add	sp, r3
    4fda:	bc04      	pop	{r2}
    4fdc:	4690      	mov	r8, r2
    4fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4fe0:	2804      	cmp	r0, #4
    4fe2:	d005      	beq.n	4ff0 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4fe4:	2308      	movs	r3, #8
    4fe6:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4fe8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4fea:	2800      	cmp	r0, #0
    4fec:	d0d3      	beq.n	4f96 <f_open+0x7a>
    4fee:	e7f1      	b.n	4fd4 <f_open+0xb8>
				res = dir_register(&dj);
    4ff0:	a885      	add	r0, sp, #532	; 0x214
    4ff2:	4b28      	ldr	r3, [pc, #160]	; (5094 <f_open+0x178>)
    4ff4:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4ff6:	2308      	movs	r3, #8
    4ff8:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4ffa:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4ffc:	2800      	cmp	r0, #0
    4ffe:	d008      	beq.n	5012 <f_open+0xf6>
    5000:	e7e8      	b.n	4fd4 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    5002:	7ae3      	ldrb	r3, [r4, #11]
    5004:	2211      	movs	r2, #17
				res = FR_DENIED;
    5006:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    5008:	421a      	tst	r2, r3
    500a:	d1e3      	bne.n	4fd4 <f_open+0xb8>
					res = FR_EXIST;
    500c:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    500e:	077b      	lsls	r3, r7, #29
    5010:	d4e0      	bmi.n	4fd4 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    5012:	0733      	lsls	r3, r6, #28
    5014:	d5bb      	bpl.n	4f8e <f_open+0x72>
			dw = get_fattime();					/* Created time */
    5016:	4b20      	ldr	r3, [pc, #128]	; (5098 <f_open+0x17c>)
    5018:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    501a:	73a0      	strb	r0, [r4, #14]
    501c:	0a03      	lsrs	r3, r0, #8
    501e:	73e3      	strb	r3, [r4, #15]
    5020:	0c03      	lsrs	r3, r0, #16
    5022:	7423      	strb	r3, [r4, #16]
    5024:	0e00      	lsrs	r0, r0, #24
    5026:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    5028:	2300      	movs	r3, #0
    502a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    502c:	7723      	strb	r3, [r4, #28]
    502e:	7763      	strb	r3, [r4, #29]
    5030:	77a3      	strb	r3, [r4, #30]
    5032:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    5034:	7d62      	ldrb	r2, [r4, #21]
    5036:	0212      	lsls	r2, r2, #8
    5038:	7d27      	ldrb	r7, [r4, #20]
    503a:	4317      	orrs	r7, r2
    503c:	043f      	lsls	r7, r7, #16
    503e:	7ee1      	ldrb	r1, [r4, #27]
    5040:	0209      	lsls	r1, r1, #8
    5042:	7ea2      	ldrb	r2, [r4, #26]
    5044:	430a      	orrs	r2, r1
    5046:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    5048:	76a3      	strb	r3, [r4, #26]
    504a:	76e3      	strb	r3, [r4, #27]
    504c:	7523      	strb	r3, [r4, #20]
    504e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    5050:	9885      	ldr	r0, [sp, #532]	; 0x214
    5052:	3301      	adds	r3, #1
    5054:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    5056:	2f00      	cmp	r7, #0
    5058:	d097      	beq.n	4f8a <f_open+0x6e>
				dw = dj.fs->winsect;
    505a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    505c:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    505e:	0039      	movs	r1, r7
    5060:	4b0e      	ldr	r3, [pc, #56]	; (509c <f_open+0x180>)
    5062:	4798      	blx	r3
				if (res == FR_OK) {
    5064:	2800      	cmp	r0, #0
    5066:	d1b5      	bne.n	4fd4 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5068:	9885      	ldr	r0, [sp, #532]	; 0x214
    506a:	3f01      	subs	r7, #1
    506c:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    506e:	4641      	mov	r1, r8
    5070:	4b0b      	ldr	r3, [pc, #44]	; (50a0 <f_open+0x184>)
    5072:	4798      	blx	r3
	if (res == FR_OK) {
    5074:	2800      	cmp	r0, #0
    5076:	d100      	bne.n	507a <f_open+0x15e>
    5078:	e787      	b.n	4f8a <f_open+0x6e>
    507a:	e7ab      	b.n	4fd4 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    507c:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    507e:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5080:	423b      	tst	r3, r7
    5082:	d0b2      	beq.n	4fea <f_open+0xce>
			res = FR_INVALID_NAME;
    5084:	2006      	movs	r0, #6
    5086:	e7ad      	b.n	4fe4 <f_open+0xc8>
    5088:	fffffdc8 	.word	0xfffffdc8
    508c:	00003b05 	.word	0x00003b05
    5090:	00004ba9 	.word	0x00004ba9
    5094:	00004629 	.word	0x00004629
    5098:	00003985 	.word	0x00003985
    509c:	000042f5 	.word	0x000042f5
    50a0:	00003eb5 	.word	0x00003eb5

000050a4 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    50a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a6:	46de      	mov	lr, fp
    50a8:	4657      	mov	r7, sl
    50aa:	464e      	mov	r6, r9
    50ac:	4645      	mov	r5, r8
    50ae:	b5e0      	push	{r5, r6, r7, lr}
    50b0:	b083      	sub	sp, #12
    50b2:	0004      	movs	r4, r0
    50b4:	000f      	movs	r7, r1
    50b6:	0015      	movs	r5, r2
    50b8:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    50ba:	2300      	movs	r3, #0
    50bc:	464a      	mov	r2, r9
    50be:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    50c0:	8881      	ldrh	r1, [r0, #4]
    50c2:	6800      	ldr	r0, [r0, #0]
    50c4:	4b5e      	ldr	r3, [pc, #376]	; (5240 <f_read+0x19c>)
    50c6:	4798      	blx	r3
    50c8:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    50ca:	2800      	cmp	r0, #0
    50cc:	d000      	beq.n	50d0 <f_read+0x2c>
    50ce:	e0af      	b.n	5230 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    50d0:	79a3      	ldrb	r3, [r4, #6]
    50d2:	b25a      	sxtb	r2, r3
    50d4:	2a00      	cmp	r2, #0
    50d6:	da00      	bge.n	50da <f_read+0x36>
    50d8:	e0a8      	b.n	522c <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    50da:	07db      	lsls	r3, r3, #31
    50dc:	d402      	bmi.n	50e4 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    50de:	2307      	movs	r3, #7
    50e0:	9300      	str	r3, [sp, #0]
    50e2:	e0a5      	b.n	5230 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    50e4:	68e3      	ldr	r3, [r4, #12]
    50e6:	68a2      	ldr	r2, [r4, #8]
    50e8:	1a9e      	subs	r6, r3, r2
    50ea:	42ae      	cmp	r6, r5
    50ec:	d900      	bls.n	50f0 <f_read+0x4c>
    50ee:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    50f0:	2e00      	cmp	r6, #0
    50f2:	d153      	bne.n	519c <f_read+0xf8>
    50f4:	e09c      	b.n	5230 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    50f6:	6961      	ldr	r1, [r4, #20]
    50f8:	4b52      	ldr	r3, [pc, #328]	; (5244 <f_read+0x1a0>)
    50fa:	4798      	blx	r3
    50fc:	e05c      	b.n	51b8 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    50fe:	79a2      	ldrb	r2, [r4, #6]
    5100:	2380      	movs	r3, #128	; 0x80
    5102:	425b      	negs	r3, r3
    5104:	4313      	orrs	r3, r2
    5106:	71a3      	strb	r3, [r4, #6]
    5108:	2302      	movs	r3, #2
    510a:	9300      	str	r3, [sp, #0]
    510c:	e090      	b.n	5230 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    510e:	79a2      	ldrb	r2, [r4, #6]
    5110:	2380      	movs	r3, #128	; 0x80
    5112:	425b      	negs	r3, r3
    5114:	4313      	orrs	r3, r2
    5116:	71a3      	strb	r3, [r4, #6]
    5118:	2301      	movs	r3, #1
    511a:	9300      	str	r3, [sp, #0]
    511c:	e088      	b.n	5230 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    511e:	79a2      	ldrb	r2, [r4, #6]
    5120:	2380      	movs	r3, #128	; 0x80
    5122:	425b      	negs	r3, r3
    5124:	4313      	orrs	r3, r2
    5126:	71a3      	strb	r3, [r4, #6]
    5128:	2302      	movs	r3, #2
    512a:	9300      	str	r3, [sp, #0]
    512c:	e080      	b.n	5230 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    512e:	79a2      	ldrb	r2, [r4, #6]
    5130:	2380      	movs	r3, #128	; 0x80
    5132:	425b      	negs	r3, r3
    5134:	4313      	orrs	r3, r2
    5136:	71a3      	strb	r3, [r4, #6]
    5138:	2301      	movs	r3, #1
    513a:	9300      	str	r3, [sp, #0]
    513c:	e078      	b.n	5230 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    513e:	3130      	adds	r1, #48	; 0x30
    5140:	0240      	lsls	r0, r0, #9
    5142:	1838      	adds	r0, r7, r0
    5144:	2280      	movs	r2, #128	; 0x80
    5146:	0092      	lsls	r2, r2, #2
    5148:	4b3f      	ldr	r3, [pc, #252]	; (5248 <f_read+0x1a4>)
    514a:	4798      	blx	r3
    514c:	e063      	b.n	5216 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    514e:	4643      	mov	r3, r8
    5150:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    5152:	68a3      	ldr	r3, [r4, #8]
    5154:	05dd      	lsls	r5, r3, #23
    5156:	0ded      	lsrs	r5, r5, #23
    5158:	2380      	movs	r3, #128	; 0x80
    515a:	009b      	lsls	r3, r3, #2
    515c:	1b5d      	subs	r5, r3, r5
    515e:	42b5      	cmp	r5, r6
    5160:	d900      	bls.n	5164 <f_read+0xc0>
    5162:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    5164:	69a1      	ldr	r1, [r4, #24]
    5166:	6820      	ldr	r0, [r4, #0]
    5168:	4b38      	ldr	r3, [pc, #224]	; (524c <f_read+0x1a8>)
    516a:	4798      	blx	r3
    516c:	2800      	cmp	r0, #0
    516e:	d155      	bne.n	521c <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    5170:	68a3      	ldr	r3, [r4, #8]
    5172:	05d9      	lsls	r1, r3, #23
    5174:	0dc9      	lsrs	r1, r1, #23
    5176:	3130      	adds	r1, #48	; 0x30
    5178:	6823      	ldr	r3, [r4, #0]
    517a:	469c      	mov	ip, r3
    517c:	4461      	add	r1, ip
    517e:	002a      	movs	r2, r5
    5180:	0038      	movs	r0, r7
    5182:	4b31      	ldr	r3, [pc, #196]	; (5248 <f_read+0x1a4>)
    5184:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    5186:	197f      	adds	r7, r7, r5
    5188:	68a3      	ldr	r3, [r4, #8]
    518a:	195b      	adds	r3, r3, r5
    518c:	60a3      	str	r3, [r4, #8]
    518e:	464b      	mov	r3, r9
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	195b      	adds	r3, r3, r5
    5194:	464a      	mov	r2, r9
    5196:	6013      	str	r3, [r2, #0]
    5198:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    519a:	d049      	beq.n	5230 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    519c:	68a3      	ldr	r3, [r4, #8]
    519e:	05da      	lsls	r2, r3, #23
    51a0:	d1d7      	bne.n	5152 <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    51a2:	6820      	ldr	r0, [r4, #0]
    51a4:	7882      	ldrb	r2, [r0, #2]
    51a6:	3a01      	subs	r2, #1
    51a8:	0a5d      	lsrs	r5, r3, #9
    51aa:	4015      	ands	r5, r2
    51ac:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    51ae:	2d00      	cmp	r5, #0
    51b0:	d107      	bne.n	51c2 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    51b2:	2b00      	cmp	r3, #0
    51b4:	d19f      	bne.n	50f6 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    51b6:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    51b8:	2801      	cmp	r0, #1
    51ba:	d9a0      	bls.n	50fe <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    51bc:	1c43      	adds	r3, r0, #1
    51be:	d0a6      	beq.n	510e <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    51c0:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    51c2:	6823      	ldr	r3, [r4, #0]
    51c4:	469a      	mov	sl, r3
    51c6:	6961      	ldr	r1, [r4, #20]
    51c8:	0018      	movs	r0, r3
    51ca:	4b21      	ldr	r3, [pc, #132]	; (5250 <f_read+0x1ac>)
    51cc:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    51ce:	2800      	cmp	r0, #0
    51d0:	d0a5      	beq.n	511e <f_read+0x7a>
			sect += csect;
    51d2:	4680      	mov	r8, r0
    51d4:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    51d6:	0a73      	lsrs	r3, r6, #9
    51d8:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    51da:	d0b8      	beq.n	514e <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    51dc:	4653      	mov	r3, sl
    51de:	789b      	ldrb	r3, [r3, #2]
    51e0:	465a      	mov	r2, fp
    51e2:	18aa      	adds	r2, r5, r2
    51e4:	429a      	cmp	r2, r3
    51e6:	d901      	bls.n	51ec <f_read+0x148>
					cc = fp->fs->csize - csect;
    51e8:	1b5b      	subs	r3, r3, r5
    51ea:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    51ec:	465b      	mov	r3, fp
    51ee:	466a      	mov	r2, sp
    51f0:	71d3      	strb	r3, [r2, #7]
    51f2:	79d3      	ldrb	r3, [r2, #7]
    51f4:	4652      	mov	r2, sl
    51f6:	7850      	ldrb	r0, [r2, #1]
    51f8:	4642      	mov	r2, r8
    51fa:	0039      	movs	r1, r7
    51fc:	4d15      	ldr	r5, [pc, #84]	; (5254 <f_read+0x1b0>)
    51fe:	47a8      	blx	r5
    5200:	2800      	cmp	r0, #0
    5202:	d194      	bne.n	512e <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    5204:	6821      	ldr	r1, [r4, #0]
    5206:	790b      	ldrb	r3, [r1, #4]
    5208:	2b00      	cmp	r3, #0
    520a:	d004      	beq.n	5216 <f_read+0x172>
    520c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    520e:	4642      	mov	r2, r8
    5210:	1a98      	subs	r0, r3, r2
    5212:	4583      	cmp	fp, r0
    5214:	d893      	bhi.n	513e <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    5216:	465b      	mov	r3, fp
    5218:	025d      	lsls	r5, r3, #9
				continue;
    521a:	e7b4      	b.n	5186 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    521c:	79a2      	ldrb	r2, [r4, #6]
    521e:	2380      	movs	r3, #128	; 0x80
    5220:	425b      	negs	r3, r3
    5222:	4313      	orrs	r3, r2
    5224:	71a3      	strb	r3, [r4, #6]
    5226:	2301      	movs	r3, #1
    5228:	9300      	str	r3, [sp, #0]
    522a:	e001      	b.n	5230 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    522c:	2302      	movs	r3, #2
    522e:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    5230:	9800      	ldr	r0, [sp, #0]
    5232:	b003      	add	sp, #12
    5234:	bc3c      	pop	{r2, r3, r4, r5}
    5236:	4690      	mov	r8, r2
    5238:	4699      	mov	r9, r3
    523a:	46a2      	mov	sl, r4
    523c:	46ab      	mov	fp, r5
    523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5240:	00003a31 	.word	0x00003a31
    5244:	00003f55 	.word	0x00003f55
    5248:	000039d5 	.word	0x000039d5
    524c:	00003eb5 	.word	0x00003eb5
    5250:	000039fb 	.word	0x000039fb
    5254:	00003811 	.word	0x00003811

00005258 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    5258:	b5f0      	push	{r4, r5, r6, r7, lr}
    525a:	46de      	mov	lr, fp
    525c:	4657      	mov	r7, sl
    525e:	464e      	mov	r6, r9
    5260:	4645      	mov	r5, r8
    5262:	b5e0      	push	{r5, r6, r7, lr}
    5264:	b083      	sub	sp, #12
    5266:	0004      	movs	r4, r0
    5268:	000d      	movs	r5, r1
    526a:	0016      	movs	r6, r2
    526c:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    526e:	2300      	movs	r3, #0
    5270:	464a      	mov	r2, r9
    5272:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    5274:	8881      	ldrh	r1, [r0, #4]
    5276:	6800      	ldr	r0, [r0, #0]
    5278:	4b7f      	ldr	r3, [pc, #508]	; (5478 <f_write+0x220>)
    527a:	4798      	blx	r3
    527c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    527e:	2800      	cmp	r0, #0
    5280:	d000      	beq.n	5284 <f_write+0x2c>
    5282:	e0f1      	b.n	5468 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    5284:	79a3      	ldrb	r3, [r4, #6]
    5286:	b25a      	sxtb	r2, r3
    5288:	2a00      	cmp	r2, #0
    528a:	da00      	bge.n	528e <f_write+0x36>
    528c:	e0ea      	b.n	5464 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    528e:	079b      	lsls	r3, r3, #30
    5290:	d402      	bmi.n	5298 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    5292:	2307      	movs	r3, #7
    5294:	9300      	str	r3, [sp, #0]
    5296:	e0e7      	b.n	5468 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    5298:	68e3      	ldr	r3, [r4, #12]
    529a:	199a      	adds	r2, r3, r6
    529c:	4293      	cmp	r3, r2
    529e:	d810      	bhi.n	52c2 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    52a0:	2e00      	cmp	r6, #0
    52a2:	d00e      	beq.n	52c2 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    52a4:	002f      	movs	r7, r5
    52a6:	e07b      	b.n	53a0 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    52a8:	2100      	movs	r1, #0
    52aa:	4b74      	ldr	r3, [pc, #464]	; (547c <f_write+0x224>)
    52ac:	4798      	blx	r3
    52ae:	0003      	movs	r3, r0
    52b0:	6120      	str	r0, [r4, #16]
    52b2:	e003      	b.n	52bc <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    52b4:	6961      	ldr	r1, [r4, #20]
    52b6:	4b71      	ldr	r3, [pc, #452]	; (547c <f_write+0x224>)
    52b8:	4798      	blx	r3
    52ba:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    52bc:	2b00      	cmp	r3, #0
    52be:	d000      	beq.n	52c2 <f_write+0x6a>
    52c0:	e080      	b.n	53c4 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    52c2:	68a3      	ldr	r3, [r4, #8]
    52c4:	68e2      	ldr	r2, [r4, #12]
    52c6:	4293      	cmp	r3, r2
    52c8:	d900      	bls.n	52cc <f_write+0x74>
    52ca:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    52cc:	79a3      	ldrb	r3, [r4, #6]
    52ce:	2220      	movs	r2, #32
    52d0:	4313      	orrs	r3, r2
    52d2:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    52d4:	e0c8      	b.n	5468 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    52d6:	79a2      	ldrb	r2, [r4, #6]
    52d8:	3b81      	subs	r3, #129	; 0x81
    52da:	4313      	orrs	r3, r2
    52dc:	71a3      	strb	r3, [r4, #6]
    52de:	2302      	movs	r3, #2
    52e0:	9300      	str	r3, [sp, #0]
    52e2:	e0c1      	b.n	5468 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    52e4:	79a2      	ldrb	r2, [r4, #6]
    52e6:	3b7f      	subs	r3, #127	; 0x7f
    52e8:	4313      	orrs	r3, r2
    52ea:	71a3      	strb	r3, [r4, #6]
    52ec:	2301      	movs	r3, #1
    52ee:	9300      	str	r3, [sp, #0]
    52f0:	e0ba      	b.n	5468 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    52f2:	2100      	movs	r1, #0
    52f4:	4b62      	ldr	r3, [pc, #392]	; (5480 <f_write+0x228>)
    52f6:	4798      	blx	r3
    52f8:	2800      	cmp	r0, #0
    52fa:	d06d      	beq.n	53d8 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    52fc:	79a2      	ldrb	r2, [r4, #6]
    52fe:	2380      	movs	r3, #128	; 0x80
    5300:	425b      	negs	r3, r3
    5302:	4313      	orrs	r3, r2
    5304:	71a3      	strb	r3, [r4, #6]
    5306:	2301      	movs	r3, #1
    5308:	9300      	str	r3, [sp, #0]
    530a:	e0ad      	b.n	5468 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    530c:	79a2      	ldrb	r2, [r4, #6]
    530e:	2380      	movs	r3, #128	; 0x80
    5310:	425b      	negs	r3, r3
    5312:	4313      	orrs	r3, r2
    5314:	71a3      	strb	r3, [r4, #6]
    5316:	2302      	movs	r3, #2
    5318:	9300      	str	r3, [sp, #0]
    531a:	e0a5      	b.n	5468 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    531c:	79a2      	ldrb	r2, [r4, #6]
    531e:	2380      	movs	r3, #128	; 0x80
    5320:	425b      	negs	r3, r3
    5322:	4313      	orrs	r3, r2
    5324:	71a3      	strb	r3, [r4, #6]
    5326:	2301      	movs	r3, #1
    5328:	9300      	str	r3, [sp, #0]
    532a:	e09d      	b.n	5468 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    532c:	0240      	lsls	r0, r0, #9
    532e:	1839      	adds	r1, r7, r0
    5330:	3330      	adds	r3, #48	; 0x30
    5332:	0018      	movs	r0, r3
    5334:	2280      	movs	r2, #128	; 0x80
    5336:	0092      	lsls	r2, r2, #2
    5338:	4b52      	ldr	r3, [pc, #328]	; (5484 <f_write+0x22c>)
    533a:	4798      	blx	r3
					fp->fs->wflag = 0;
    533c:	2300      	movs	r3, #0
    533e:	6822      	ldr	r2, [r4, #0]
    5340:	7113      	strb	r3, [r2, #4]
    5342:	e072      	b.n	542a <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5344:	68a3      	ldr	r3, [r4, #8]
    5346:	68e2      	ldr	r2, [r4, #12]
    5348:	4293      	cmp	r3, r2
    534a:	d271      	bcs.n	5430 <f_write+0x1d8>
			fp->dsect = sect;
    534c:	4643      	mov	r3, r8
    534e:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    5350:	68a3      	ldr	r3, [r4, #8]
    5352:	05dd      	lsls	r5, r3, #23
    5354:	0ded      	lsrs	r5, r5, #23
    5356:	2380      	movs	r3, #128	; 0x80
    5358:	009b      	lsls	r3, r3, #2
    535a:	1b5d      	subs	r5, r3, r5
    535c:	42b5      	cmp	r5, r6
    535e:	d900      	bls.n	5362 <f_write+0x10a>
    5360:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    5362:	69a1      	ldr	r1, [r4, #24]
    5364:	6820      	ldr	r0, [r4, #0]
    5366:	4b46      	ldr	r3, [pc, #280]	; (5480 <f_write+0x228>)
    5368:	4798      	blx	r3
    536a:	2800      	cmp	r0, #0
    536c:	d172      	bne.n	5454 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    536e:	68a3      	ldr	r3, [r4, #8]
    5370:	05d8      	lsls	r0, r3, #23
    5372:	0dc0      	lsrs	r0, r0, #23
    5374:	3030      	adds	r0, #48	; 0x30
    5376:	6823      	ldr	r3, [r4, #0]
    5378:	469c      	mov	ip, r3
    537a:	4460      	add	r0, ip
    537c:	002a      	movs	r2, r5
    537e:	0039      	movs	r1, r7
    5380:	4b40      	ldr	r3, [pc, #256]	; (5484 <f_write+0x22c>)
    5382:	4798      	blx	r3
		fp->fs->wflag = 1;
    5384:	2301      	movs	r3, #1
    5386:	6822      	ldr	r2, [r4, #0]
    5388:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    538a:	197f      	adds	r7, r7, r5
    538c:	68a3      	ldr	r3, [r4, #8]
    538e:	195b      	adds	r3, r3, r5
    5390:	60a3      	str	r3, [r4, #8]
    5392:	464b      	mov	r3, r9
    5394:	681b      	ldr	r3, [r3, #0]
    5396:	195b      	adds	r3, r3, r5
    5398:	464a      	mov	r2, r9
    539a:	6013      	str	r3, [r2, #0]
    539c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    539e:	d090      	beq.n	52c2 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    53a0:	68a3      	ldr	r3, [r4, #8]
    53a2:	05da      	lsls	r2, r3, #23
    53a4:	d1d4      	bne.n	5350 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    53a6:	6820      	ldr	r0, [r4, #0]
    53a8:	7882      	ldrb	r2, [r0, #2]
    53aa:	3a01      	subs	r2, #1
    53ac:	0a5d      	lsrs	r5, r3, #9
    53ae:	4015      	ands	r5, r2
    53b0:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    53b2:	2d00      	cmp	r5, #0
    53b4:	d10b      	bne.n	53ce <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    53b6:	2b00      	cmp	r3, #0
    53b8:	d000      	beq.n	53bc <f_write+0x164>
    53ba:	e77b      	b.n	52b4 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    53bc:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    53be:	2b00      	cmp	r3, #0
    53c0:	d100      	bne.n	53c4 <f_write+0x16c>
    53c2:	e771      	b.n	52a8 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    53c4:	2b01      	cmp	r3, #1
    53c6:	d086      	beq.n	52d6 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    53c8:	1c5a      	adds	r2, r3, #1
    53ca:	d08b      	beq.n	52e4 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    53cc:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    53ce:	6820      	ldr	r0, [r4, #0]
    53d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    53d2:	69a2      	ldr	r2, [r4, #24]
    53d4:	4293      	cmp	r3, r2
    53d6:	d08c      	beq.n	52f2 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    53d8:	6823      	ldr	r3, [r4, #0]
    53da:	469a      	mov	sl, r3
    53dc:	6961      	ldr	r1, [r4, #20]
    53de:	0018      	movs	r0, r3
    53e0:	4b29      	ldr	r3, [pc, #164]	; (5488 <f_write+0x230>)
    53e2:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    53e4:	2800      	cmp	r0, #0
    53e6:	d091      	beq.n	530c <f_write+0xb4>
			sect += csect;
    53e8:	4680      	mov	r8, r0
    53ea:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    53ec:	0a73      	lsrs	r3, r6, #9
    53ee:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    53f0:	d0a8      	beq.n	5344 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    53f2:	4653      	mov	r3, sl
    53f4:	789b      	ldrb	r3, [r3, #2]
    53f6:	465a      	mov	r2, fp
    53f8:	18aa      	adds	r2, r5, r2
    53fa:	429a      	cmp	r2, r3
    53fc:	d901      	bls.n	5402 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    53fe:	1b5b      	subs	r3, r3, r5
    5400:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    5402:	465b      	mov	r3, fp
    5404:	466a      	mov	r2, sp
    5406:	71d3      	strb	r3, [r2, #7]
    5408:	79d3      	ldrb	r3, [r2, #7]
    540a:	4652      	mov	r2, sl
    540c:	7850      	ldrb	r0, [r2, #1]
    540e:	4642      	mov	r2, r8
    5410:	0039      	movs	r1, r7
    5412:	4d1e      	ldr	r5, [pc, #120]	; (548c <f_write+0x234>)
    5414:	47a8      	blx	r5
    5416:	2800      	cmp	r0, #0
    5418:	d000      	beq.n	541c <f_write+0x1c4>
    541a:	e77f      	b.n	531c <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    541c:	6823      	ldr	r3, [r4, #0]
    541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5420:	4641      	mov	r1, r8
    5422:	1a50      	subs	r0, r2, r1
    5424:	4583      	cmp	fp, r0
    5426:	d900      	bls.n	542a <f_write+0x1d2>
    5428:	e780      	b.n	532c <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    542a:	465b      	mov	r3, fp
    542c:	025d      	lsls	r5, r3, #9
				continue;
    542e:	e7ac      	b.n	538a <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5430:	2100      	movs	r1, #0
    5432:	4650      	mov	r0, sl
    5434:	4b12      	ldr	r3, [pc, #72]	; (5480 <f_write+0x228>)
    5436:	4798      	blx	r3
    5438:	2800      	cmp	r0, #0
    543a:	d103      	bne.n	5444 <f_write+0x1ec>
				fp->fs->winsect = sect;
    543c:	6823      	ldr	r3, [r4, #0]
    543e:	4642      	mov	r2, r8
    5440:	62da      	str	r2, [r3, #44]	; 0x2c
    5442:	e783      	b.n	534c <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5444:	79a2      	ldrb	r2, [r4, #6]
    5446:	2380      	movs	r3, #128	; 0x80
    5448:	425b      	negs	r3, r3
    544a:	4313      	orrs	r3, r2
    544c:	71a3      	strb	r3, [r4, #6]
    544e:	2301      	movs	r3, #1
    5450:	9300      	str	r3, [sp, #0]
    5452:	e009      	b.n	5468 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5454:	79a2      	ldrb	r2, [r4, #6]
    5456:	2380      	movs	r3, #128	; 0x80
    5458:	425b      	negs	r3, r3
    545a:	4313      	orrs	r3, r2
    545c:	71a3      	strb	r3, [r4, #6]
    545e:	2301      	movs	r3, #1
    5460:	9300      	str	r3, [sp, #0]
    5462:	e001      	b.n	5468 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5464:	2302      	movs	r3, #2
    5466:	9300      	str	r3, [sp, #0]
}
    5468:	9800      	ldr	r0, [sp, #0]
    546a:	b003      	add	sp, #12
    546c:	bc3c      	pop	{r2, r3, r4, r5}
    546e:	4690      	mov	r8, r2
    5470:	4699      	mov	r9, r3
    5472:	46a2      	mov	sl, r4
    5474:	46ab      	mov	fp, r5
    5476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5478:	00003a31 	.word	0x00003a31
    547c:	00004231 	.word	0x00004231
    5480:	00003eb5 	.word	0x00003eb5
    5484:	000039d5 	.word	0x000039d5
    5488:	000039fb 	.word	0x000039fb
    548c:	00003895 	.word	0x00003895

00005490 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    5490:	b570      	push	{r4, r5, r6, lr}
    5492:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5494:	8881      	ldrh	r1, [r0, #4]
    5496:	6800      	ldr	r0, [r0, #0]
    5498:	4b1c      	ldr	r3, [pc, #112]	; (550c <f_sync+0x7c>)
    549a:	4798      	blx	r3
	if (res == FR_OK) {
    549c:	2800      	cmp	r0, #0
    549e:	d102      	bne.n	54a6 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    54a0:	79a3      	ldrb	r3, [r4, #6]
    54a2:	069b      	lsls	r3, r3, #26
    54a4:	d400      	bmi.n	54a8 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    54a6:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    54a8:	69e1      	ldr	r1, [r4, #28]
    54aa:	6820      	ldr	r0, [r4, #0]
    54ac:	4b18      	ldr	r3, [pc, #96]	; (5510 <f_sync+0x80>)
    54ae:	4798      	blx	r3
			if (res == FR_OK) {
    54b0:	2800      	cmp	r0, #0
    54b2:	d1f8      	bne.n	54a6 <f_sync+0x16>
				dir = fp->dir_ptr;
    54b4:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    54b6:	7aeb      	ldrb	r3, [r5, #11]
    54b8:	2220      	movs	r2, #32
    54ba:	4313      	orrs	r3, r2
    54bc:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    54be:	7b23      	ldrb	r3, [r4, #12]
    54c0:	772b      	strb	r3, [r5, #28]
    54c2:	89a3      	ldrh	r3, [r4, #12]
    54c4:	0a1b      	lsrs	r3, r3, #8
    54c6:	776b      	strb	r3, [r5, #29]
    54c8:	89e3      	ldrh	r3, [r4, #14]
    54ca:	77ab      	strb	r3, [r5, #30]
    54cc:	7be3      	ldrb	r3, [r4, #15]
    54ce:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    54d0:	7c23      	ldrb	r3, [r4, #16]
    54d2:	76ab      	strb	r3, [r5, #26]
    54d4:	8a23      	ldrh	r3, [r4, #16]
    54d6:	0a1b      	lsrs	r3, r3, #8
    54d8:	76eb      	strb	r3, [r5, #27]
    54da:	8a63      	ldrh	r3, [r4, #18]
    54dc:	752b      	strb	r3, [r5, #20]
    54de:	8a63      	ldrh	r3, [r4, #18]
    54e0:	0a1b      	lsrs	r3, r3, #8
    54e2:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    54e4:	4b0b      	ldr	r3, [pc, #44]	; (5514 <f_sync+0x84>)
    54e6:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    54e8:	75a8      	strb	r0, [r5, #22]
    54ea:	0a03      	lsrs	r3, r0, #8
    54ec:	75eb      	strb	r3, [r5, #23]
    54ee:	0c03      	lsrs	r3, r0, #16
    54f0:	762b      	strb	r3, [r5, #24]
    54f2:	0e00      	lsrs	r0, r0, #24
    54f4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    54f6:	79a3      	ldrb	r3, [r4, #6]
    54f8:	2220      	movs	r2, #32
    54fa:	4393      	bics	r3, r2
    54fc:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    54fe:	2301      	movs	r3, #1
    5500:	6822      	ldr	r2, [r4, #0]
    5502:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    5504:	6820      	ldr	r0, [r4, #0]
    5506:	4b04      	ldr	r3, [pc, #16]	; (5518 <f_sync+0x88>)
    5508:	4798      	blx	r3
    550a:	e7cc      	b.n	54a6 <f_sync+0x16>
    550c:	00003a31 	.word	0x00003a31
    5510:	00003eb5 	.word	0x00003eb5
    5514:	00003985 	.word	0x00003985
    5518:	00004ab5 	.word	0x00004ab5

0000551c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    551c:	b510      	push	{r4, lr}
    551e:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5520:	4b03      	ldr	r3, [pc, #12]	; (5530 <f_close+0x14>)
    5522:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5524:	2800      	cmp	r0, #0
    5526:	d101      	bne.n	552c <f_close+0x10>
    5528:	2300      	movs	r3, #0
    552a:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    552c:	bd10      	pop	{r4, pc}
    552e:	46c0      	nop			; (mov r8, r8)
    5530:	00005491 	.word	0x00005491

00005534 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5536:	46de      	mov	lr, fp
    5538:	4657      	mov	r7, sl
    553a:	464e      	mov	r6, r9
    553c:	4645      	mov	r5, r8
    553e:	b5e0      	push	{r5, r6, r7, lr}
    5540:	0004      	movs	r4, r0
    5542:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5544:	8881      	ldrh	r1, [r0, #4]
    5546:	6800      	ldr	r0, [r0, #0]
    5548:	4b57      	ldr	r3, [pc, #348]	; (56a8 <f_lseek+0x174>)
    554a:	4798      	blx	r3
    554c:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    554e:	d000      	beq.n	5552 <f_lseek+0x1e>
    5550:	e0a2      	b.n	5698 <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    5552:	79a3      	ldrb	r3, [r4, #6]
    5554:	b25a      	sxtb	r2, r3
    5556:	2a00      	cmp	r2, #0
    5558:	da00      	bge.n	555c <f_lseek+0x28>
    555a:	e09c      	b.n	5696 <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    555c:	68e2      	ldr	r2, [r4, #12]
    555e:	42b2      	cmp	r2, r6
    5560:	d202      	bcs.n	5568 <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    5562:	079b      	lsls	r3, r3, #30
    5564:	d400      	bmi.n	5568 <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    5566:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    5568:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    556a:	2300      	movs	r3, #0
    556c:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    556e:	2e00      	cmp	r6, #0
    5570:	d100      	bne.n	5574 <f_lseek+0x40>
    5572:	e091      	b.n	5698 <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5574:	6823      	ldr	r3, [r4, #0]
    5576:	4699      	mov	r9, r3
    5578:	789f      	ldrb	r7, [r3, #2]
    557a:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    557c:	2800      	cmp	r0, #0
    557e:	d013      	beq.n	55a8 <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    5580:	1e43      	subs	r3, r0, #1
    5582:	4698      	mov	r8, r3
    5584:	1e70      	subs	r0, r6, #1
    5586:	4b49      	ldr	r3, [pc, #292]	; (56ac <f_lseek+0x178>)
    5588:	469a      	mov	sl, r3
    558a:	0039      	movs	r1, r7
    558c:	4798      	blx	r3
    558e:	4683      	mov	fp, r0
    5590:	0039      	movs	r1, r7
    5592:	4640      	mov	r0, r8
    5594:	47d0      	blx	sl
			if (ifptr > 0 &&
    5596:	4583      	cmp	fp, r0
    5598:	d306      	bcc.n	55a8 <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    559a:	4278      	negs	r0, r7
    559c:	4643      	mov	r3, r8
    559e:	4003      	ands	r3, r0
    55a0:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    55a2:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    55a4:	6960      	ldr	r0, [r4, #20]
    55a6:	e003      	b.n	55b0 <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    55a8:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    55aa:	2800      	cmp	r0, #0
    55ac:	d00b      	beq.n	55c6 <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    55ae:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    55b0:	2800      	cmp	r0, #0
    55b2:	d060      	beq.n	5676 <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    55b4:	42be      	cmp	r6, r7
    55b6:	d93a      	bls.n	562e <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    55b8:	2302      	movs	r3, #2
    55ba:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    55bc:	4b3c      	ldr	r3, [pc, #240]	; (56b0 <f_lseek+0x17c>)
    55be:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    55c0:	4b3c      	ldr	r3, [pc, #240]	; (56b4 <f_lseek+0x180>)
    55c2:	4699      	mov	r9, r3
    55c4:	e029      	b.n	561a <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    55c6:	2100      	movs	r1, #0
    55c8:	4648      	mov	r0, r9
    55ca:	4b39      	ldr	r3, [pc, #228]	; (56b0 <f_lseek+0x17c>)
    55cc:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    55ce:	2801      	cmp	r0, #1
    55d0:	d003      	beq.n	55da <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    55d2:	1c43      	adds	r3, r0, #1
    55d4:	d008      	beq.n	55e8 <f_lseek+0xb4>
					fp->sclust = clst;
    55d6:	6120      	str	r0, [r4, #16]
    55d8:	e7e9      	b.n	55ae <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    55da:	79a2      	ldrb	r2, [r4, #6]
    55dc:	2380      	movs	r3, #128	; 0x80
    55de:	425b      	negs	r3, r3
    55e0:	4313      	orrs	r3, r2
    55e2:	71a3      	strb	r3, [r4, #6]
    55e4:	2502      	movs	r5, #2
    55e6:	e057      	b.n	5698 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    55e8:	79a2      	ldrb	r2, [r4, #6]
    55ea:	2380      	movs	r3, #128	; 0x80
    55ec:	425b      	negs	r3, r3
    55ee:	4313      	orrs	r3, r2
    55f0:	71a3      	strb	r3, [r4, #6]
    55f2:	2501      	movs	r5, #1
    55f4:	e050      	b.n	5698 <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    55f6:	0001      	movs	r1, r0
    55f8:	6820      	ldr	r0, [r4, #0]
    55fa:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    55fc:	1c43      	adds	r3, r0, #1
    55fe:	d028      	beq.n	5652 <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5600:	2801      	cmp	r0, #1
    5602:	d92d      	bls.n	5660 <f_lseek+0x12c>
    5604:	6823      	ldr	r3, [r4, #0]
    5606:	699b      	ldr	r3, [r3, #24]
    5608:	4298      	cmp	r0, r3
    560a:	d229      	bcs.n	5660 <f_lseek+0x12c>
					fp->clust = clst;
    560c:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    560e:	68a3      	ldr	r3, [r4, #8]
    5610:	19db      	adds	r3, r3, r7
    5612:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    5614:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    5616:	42b7      	cmp	r7, r6
    5618:	d209      	bcs.n	562e <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    561a:	79a3      	ldrb	r3, [r4, #6]
    561c:	4642      	mov	r2, r8
    561e:	421a      	tst	r2, r3
    5620:	d0e9      	beq.n	55f6 <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5622:	0001      	movs	r1, r0
    5624:	6820      	ldr	r0, [r4, #0]
    5626:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    5628:	2800      	cmp	r0, #0
    562a:	d1e7      	bne.n	55fc <f_lseek+0xc8>
							ofs = bcs; break;
    562c:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    562e:	68a3      	ldr	r3, [r4, #8]
    5630:	199b      	adds	r3, r3, r6
    5632:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    5634:	05f3      	lsls	r3, r6, #23
    5636:	d01d      	beq.n	5674 <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    5638:	0001      	movs	r1, r0
    563a:	6820      	ldr	r0, [r4, #0]
    563c:	4b1e      	ldr	r3, [pc, #120]	; (56b8 <f_lseek+0x184>)
    563e:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5640:	2800      	cmp	r0, #0
    5642:	d114      	bne.n	566e <f_lseek+0x13a>
    5644:	79a2      	ldrb	r2, [r4, #6]
    5646:	2380      	movs	r3, #128	; 0x80
    5648:	425b      	negs	r3, r3
    564a:	4313      	orrs	r3, r2
    564c:	71a3      	strb	r3, [r4, #6]
    564e:	2502      	movs	r5, #2
    5650:	e022      	b.n	5698 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5652:	79a2      	ldrb	r2, [r4, #6]
    5654:	2380      	movs	r3, #128	; 0x80
    5656:	425b      	negs	r3, r3
    5658:	4313      	orrs	r3, r2
    565a:	71a3      	strb	r3, [r4, #6]
    565c:	2501      	movs	r5, #1
    565e:	e01b      	b.n	5698 <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5660:	79a2      	ldrb	r2, [r4, #6]
    5662:	2380      	movs	r3, #128	; 0x80
    5664:	425b      	negs	r3, r3
    5666:	4313      	orrs	r3, r2
    5668:	71a3      	strb	r3, [r4, #6]
    566a:	2502      	movs	r5, #2
    566c:	e014      	b.n	5698 <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    566e:	0a76      	lsrs	r6, r6, #9
    5670:	1830      	adds	r0, r6, r0
    5672:	e000      	b.n	5676 <f_lseek+0x142>
		fp->fptr = nsect = 0;
    5674:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    5676:	68a3      	ldr	r3, [r4, #8]
    5678:	05da      	lsls	r2, r3, #23
    567a:	d003      	beq.n	5684 <f_lseek+0x150>
    567c:	69a2      	ldr	r2, [r4, #24]
    567e:	4290      	cmp	r0, r2
    5680:	d000      	beq.n	5684 <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    5682:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    5684:	68e2      	ldr	r2, [r4, #12]
    5686:	4293      	cmp	r3, r2
    5688:	d906      	bls.n	5698 <f_lseek+0x164>
			fp->fsize = fp->fptr;
    568a:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    568c:	79a3      	ldrb	r3, [r4, #6]
    568e:	2220      	movs	r2, #32
    5690:	4313      	orrs	r3, r2
    5692:	71a3      	strb	r3, [r4, #6]
    5694:	e000      	b.n	5698 <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5696:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    5698:	0028      	movs	r0, r5
    569a:	bc3c      	pop	{r2, r3, r4, r5}
    569c:	4690      	mov	r8, r2
    569e:	4699      	mov	r9, r3
    56a0:	46a2      	mov	sl, r4
    56a2:	46ab      	mov	fp, r5
    56a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56a6:	46c0      	nop			; (mov r8, r8)
    56a8:	00003a31 	.word	0x00003a31
    56ac:	00005f3d 	.word	0x00005f3d
    56b0:	00004231 	.word	0x00004231
    56b4:	00003f55 	.word	0x00003f55
    56b8:	000039fb 	.word	0x000039fb

000056bc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    56bc:	b510      	push	{r4, lr}
    56be:	4c2c      	ldr	r4, [pc, #176]	; (5770 <f_unlink+0xb4>)
    56c0:	44a5      	add	sp, r4
    56c2:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    56c4:	2201      	movs	r2, #1
    56c6:	a98f      	add	r1, sp, #572	; 0x23c
    56c8:	a801      	add	r0, sp, #4
    56ca:	4b2a      	ldr	r3, [pc, #168]	; (5774 <f_unlink+0xb8>)
    56cc:	4798      	blx	r3
	if (res == FR_OK) {
    56ce:	2800      	cmp	r0, #0
    56d0:	d003      	beq.n	56da <f_unlink+0x1e>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    56d2:	2398      	movs	r3, #152	; 0x98
    56d4:	009b      	lsls	r3, r3, #2
    56d6:	449d      	add	sp, r3
    56d8:	bd10      	pop	{r4, pc}
		INIT_BUF(dj);
    56da:	ab83      	add	r3, sp, #524	; 0x20c
    56dc:	9395      	str	r3, [sp, #596]	; 0x254
    56de:	ab03      	add	r3, sp, #12
    56e0:	9396      	str	r3, [sp, #600]	; 0x258
		res = follow_path(&dj, path);		/* Follow the file path */
    56e2:	9901      	ldr	r1, [sp, #4]
    56e4:	a88f      	add	r0, sp, #572	; 0x23c
    56e6:	4b24      	ldr	r3, [pc, #144]	; (5778 <f_unlink+0xbc>)
    56e8:	4798      	blx	r3
		if (res == FR_OK) {					/* The object is accessible */
    56ea:	2800      	cmp	r0, #0
    56ec:	d1f1      	bne.n	56d2 <f_unlink+0x16>
			dir = dj.dir;
    56ee:	9b94      	ldr	r3, [sp, #592]	; 0x250
			if (!dir) {
    56f0:	2b00      	cmp	r3, #0
    56f2:	d039      	beq.n	5768 <f_unlink+0xac>
				if (dir[DIR_Attr] & AM_RDO)
    56f4:	7ada      	ldrb	r2, [r3, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
    56f6:	3007      	adds	r0, #7
				if (dir[DIR_Attr] & AM_RDO)
    56f8:	07d2      	lsls	r2, r2, #31
    56fa:	d4ea      	bmi.n	56d2 <f_unlink+0x16>
			dclst = LD_CLUST(dir);
    56fc:	7d5a      	ldrb	r2, [r3, #21]
    56fe:	0212      	lsls	r2, r2, #8
    5700:	7d1c      	ldrb	r4, [r3, #20]
    5702:	4314      	orrs	r4, r2
    5704:	0424      	lsls	r4, r4, #16
    5706:	7ed9      	ldrb	r1, [r3, #27]
    5708:	0209      	lsls	r1, r1, #8
    570a:	7e9a      	ldrb	r2, [r3, #26]
    570c:	430a      	orrs	r2, r1
    570e:	4314      	orrs	r4, r2
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    5710:	7adb      	ldrb	r3, [r3, #11]
    5712:	06db      	lsls	r3, r3, #27
    5714:	d40a      	bmi.n	572c <f_unlink+0x70>
				res = dir_remove(&dj);		/* Remove the directory entry */
    5716:	a88f      	add	r0, sp, #572	; 0x23c
    5718:	4b18      	ldr	r3, [pc, #96]	; (577c <f_unlink+0xc0>)
    571a:	4798      	blx	r3
				if (res == FR_OK) {
    571c:	2800      	cmp	r0, #0
    571e:	d1d8      	bne.n	56d2 <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
    5720:	2c00      	cmp	r4, #0
    5722:	d11a      	bne.n	575a <f_unlink+0x9e>
					if (res == FR_OK) res = sync(dj.fs);
    5724:	988f      	ldr	r0, [sp, #572]	; 0x23c
    5726:	4b16      	ldr	r3, [pc, #88]	; (5780 <f_unlink+0xc4>)
    5728:	4798      	blx	r3
    572a:	e7d2      	b.n	56d2 <f_unlink+0x16>
					res = FR_INT_ERR;
    572c:	2002      	movs	r0, #2
				if (dclst < 2) {
    572e:	2c01      	cmp	r4, #1
    5730:	d9cf      	bls.n	56d2 <f_unlink+0x16>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    5732:	2224      	movs	r2, #36	; 0x24
    5734:	a98f      	add	r1, sp, #572	; 0x23c
    5736:	a886      	add	r0, sp, #536	; 0x218
    5738:	4b12      	ldr	r3, [pc, #72]	; (5784 <f_unlink+0xc8>)
    573a:	4798      	blx	r3
					sdj.sclust = dclst;
    573c:	9488      	str	r4, [sp, #544]	; 0x220
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    573e:	2102      	movs	r1, #2
    5740:	a886      	add	r0, sp, #536	; 0x218
    5742:	4b11      	ldr	r3, [pc, #68]	; (5788 <f_unlink+0xcc>)
    5744:	4798      	blx	r3
					if (res == FR_OK) {
    5746:	2800      	cmp	r0, #0
    5748:	d1c3      	bne.n	56d2 <f_unlink+0x16>
						res = dir_read(&sdj);
    574a:	a886      	add	r0, sp, #536	; 0x218
    574c:	4b0f      	ldr	r3, [pc, #60]	; (578c <f_unlink+0xd0>)
    574e:	4798      	blx	r3
						if (res == FR_OK			/* Not empty dir */
    5750:	2800      	cmp	r0, #0
    5752:	d00b      	beq.n	576c <f_unlink+0xb0>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    5754:	2804      	cmp	r0, #4
    5756:	d0de      	beq.n	5716 <f_unlink+0x5a>
    5758:	e7bb      	b.n	56d2 <f_unlink+0x16>
						res = remove_chain(dj.fs, dclst);
    575a:	0021      	movs	r1, r4
    575c:	988f      	ldr	r0, [sp, #572]	; 0x23c
    575e:	4b0c      	ldr	r3, [pc, #48]	; (5790 <f_unlink+0xd4>)
    5760:	4798      	blx	r3
					if (res == FR_OK) res = sync(dj.fs);
    5762:	2800      	cmp	r0, #0
    5764:	d1b5      	bne.n	56d2 <f_unlink+0x16>
    5766:	e7dd      	b.n	5724 <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    5768:	2006      	movs	r0, #6
    576a:	e7b2      	b.n	56d2 <f_unlink+0x16>
						) res = FR_DENIED;
    576c:	2007      	movs	r0, #7
	LEAVE_FF(dj.fs, res);
    576e:	e7b0      	b.n	56d2 <f_unlink+0x16>
    5770:	fffffda0 	.word	0xfffffda0
    5774:	00003b05 	.word	0x00003b05
    5778:	00004ba9 	.word	0x00004ba9
    577c:	00004a4d 	.word	0x00004a4d
    5780:	00004ab5 	.word	0x00004ab5
    5784:	000039d5 	.word	0x000039d5
    5788:	00004051 	.word	0x00004051
    578c:	0000490d 	.word	0x0000490d
    5790:	000042f5 	.word	0x000042f5

00005794 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    5794:	b510      	push	{r4, lr}
    5796:	b082      	sub	sp, #8
    5798:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    579a:	466b      	mov	r3, sp
    579c:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    579e:	ab01      	add	r3, sp, #4
    57a0:	2201      	movs	r2, #1
    57a2:	4669      	mov	r1, sp
    57a4:	0020      	movs	r0, r4
    57a6:	4c05      	ldr	r4, [pc, #20]	; (57bc <f_putc+0x28>)
    57a8:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    57aa:	9b01      	ldr	r3, [sp, #4]
    57ac:	1e58      	subs	r0, r3, #1
    57ae:	1e43      	subs	r3, r0, #1
    57b0:	4198      	sbcs	r0, r3
    57b2:	4240      	negs	r0, r0
    57b4:	2301      	movs	r3, #1
    57b6:	4318      	orrs	r0, r3
}
    57b8:	b002      	add	sp, #8
    57ba:	bd10      	pop	{r4, pc}
    57bc:	00005259 	.word	0x00005259

000057c0 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    57c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57c2:	0006      	movs	r6, r0
    57c4:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    57c6:	7800      	ldrb	r0, [r0, #0]
    57c8:	2800      	cmp	r0, #0
    57ca:	d00b      	beq.n	57e4 <f_puts+0x24>
    57cc:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    57ce:	4f06      	ldr	r7, [pc, #24]	; (57e8 <f_puts+0x28>)
    57d0:	0029      	movs	r1, r5
    57d2:	47b8      	blx	r7
    57d4:	1c43      	adds	r3, r0, #1
    57d6:	d004      	beq.n	57e2 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    57d8:	3401      	adds	r4, #1
    57da:	5d30      	ldrb	r0, [r6, r4]
    57dc:	2800      	cmp	r0, #0
    57de:	d1f7      	bne.n	57d0 <f_puts+0x10>
    57e0:	0020      	movs	r0, r4
	}
	return n;
}
    57e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    57e4:	2000      	movs	r0, #0
    57e6:	e7fc      	b.n	57e2 <f_puts+0x22>
    57e8:	00005795 	.word	0x00005795

000057ec <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    57ec:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    57ee:	287f      	cmp	r0, #127	; 0x7f
    57f0:	d911      	bls.n	5816 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    57f2:	2900      	cmp	r1, #0
    57f4:	d111      	bne.n	581a <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    57f6:	28c7      	cmp	r0, #199	; 0xc7
    57f8:	d017      	beq.n	582a <ff_convert+0x3e>
    57fa:	4a0d      	ldr	r2, [pc, #52]	; (5830 <ff_convert+0x44>)
    57fc:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    57fe:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5800:	8811      	ldrh	r1, [r2, #0]
    5802:	4281      	cmp	r1, r0
    5804:	d004      	beq.n	5810 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    5806:	3301      	adds	r3, #1
    5808:	b29b      	uxth	r3, r3
    580a:	3202      	adds	r2, #2
    580c:	2b80      	cmp	r3, #128	; 0x80
    580e:	d1f7      	bne.n	5800 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5810:	3380      	adds	r3, #128	; 0x80
    5812:	20ff      	movs	r0, #255	; 0xff
    5814:	4003      	ands	r3, r0
		}
	}

	return c;
}
    5816:	0018      	movs	r0, r3
    5818:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    581a:	2300      	movs	r3, #0
    581c:	28ff      	cmp	r0, #255	; 0xff
    581e:	d8fa      	bhi.n	5816 <ff_convert+0x2a>
    5820:	3880      	subs	r0, #128	; 0x80
    5822:	0040      	lsls	r0, r0, #1
    5824:	4b02      	ldr	r3, [pc, #8]	; (5830 <ff_convert+0x44>)
    5826:	5ac3      	ldrh	r3, [r0, r3]
    5828:	e7f5      	b.n	5816 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    582a:	2300      	movs	r3, #0
    582c:	e7f0      	b.n	5810 <ff_convert+0x24>
    582e:	46c0      	nop			; (mov r8, r8)
    5830:	00007440 	.word	0x00007440

00005834 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5834:	2861      	cmp	r0, #97	; 0x61
    5836:	d014      	beq.n	5862 <ff_wtoupper+0x2e>
    5838:	4b0b      	ldr	r3, [pc, #44]	; (5868 <ff_wtoupper+0x34>)
    583a:	3304      	adds	r3, #4
    583c:	2101      	movs	r1, #1
    583e:	2262      	movs	r2, #98	; 0x62
    5840:	4290      	cmp	r0, r2
    5842:	d007      	beq.n	5854 <ff_wtoupper+0x20>
    5844:	3101      	adds	r1, #1
    5846:	3302      	adds	r3, #2
    5848:	1e9a      	subs	r2, r3, #2
    584a:	8812      	ldrh	r2, [r2, #0]
    584c:	2a00      	cmp	r2, #0
    584e:	d1f7      	bne.n	5840 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5850:	0003      	movs	r3, r0
    5852:	e004      	b.n	585e <ff_wtoupper+0x2a>
    5854:	1e03      	subs	r3, r0, #0
    5856:	d002      	beq.n	585e <ff_wtoupper+0x2a>
    5858:	0049      	lsls	r1, r1, #1
    585a:	4b04      	ldr	r3, [pc, #16]	; (586c <ff_wtoupper+0x38>)
    585c:	5acb      	ldrh	r3, [r1, r3]
}
    585e:	0018      	movs	r0, r3
    5860:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5862:	2100      	movs	r1, #0
    5864:	e7f8      	b.n	5858 <ff_wtoupper+0x24>
    5866:	46c0      	nop			; (mov r8, r8)
    5868:	00007540 	.word	0x00007540
    586c:	00007720 	.word	0x00007720

00005870 <main>:
* @return		Unused (ANSI-C compatibility).
* @note			Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    5870:	b5f0      	push	{r4, r5, r6, r7, lr}
    5872:	46de      	mov	lr, fp
    5874:	4657      	mov	r7, sl
    5876:	464e      	mov	r6, r9
    5878:	4645      	mov	r5, r8
    587a:	b5e0      	push	{r5, r6, r7, lr}
    587c:	4cc6      	ldr	r4, [pc, #792]	; (5b98 <main+0x328>)
    587e:	44a5      	add	sp, r4
    5880:	af02      	add	r7, sp, #8

	/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
	system_init();
    5882:	4bc6      	ldr	r3, [pc, #792]	; (5b9c <main+0x32c>)
    5884:	4798      	blx	r3
	delay_init();
    5886:	4bc6      	ldr	r3, [pc, #792]	; (5ba0 <main+0x330>)
    5888:	4798      	blx	r3
	InitializeSerialConsole();
    588a:	4bc6      	ldr	r3, [pc, #792]	; (5ba4 <main+0x334>)
    588c:	4798      	blx	r3
	cpu_irq_enable();
    588e:	4cc6      	ldr	r4, [pc, #792]	; (5ba8 <main+0x338>)
    5890:	2501      	movs	r5, #1
    5892:	7025      	strb	r5, [r4, #0]
    5894:	f3bf 8f5f 	dmb	sy
    5898:	b662      	cpsie	i
	system_interrupt_enable_global();
		
	/* Initialize SD MMC stack */
	sd_mmc_init();
    589a:	4bc4      	ldr	r3, [pc, #784]	; (5bac <main+0x33c>)
    589c:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    589e:	230c      	movs	r3, #12
    58a0:	18fb      	adds	r3, r7, r3
    58a2:	2100      	movs	r1, #0
    58a4:	7019      	strb	r1, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    58a6:	4ac2      	ldr	r2, [pc, #776]	; (5bb0 <main+0x340>)
    58a8:	6852      	ldr	r2, [r2, #4]
    58aa:	06d2      	lsls	r2, r2, #27
    58ac:	0f12      	lsrs	r2, r2, #28
    58ae:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    58b0:	70d9      	strb	r1, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    58b2:	7119      	strb	r1, [r3, #4]
******************************************************************************/
static void configure_nvm(void)
{
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    config_nvm.manual_page_write = false;
    58b4:	7059      	strb	r1, [r3, #1]
    nvm_set_config(&config_nvm);
    58b6:	230c      	movs	r3, #12
    58b8:	18f8      	adds	r0, r7, r3
    58ba:	4bbe      	ldr	r3, [pc, #760]	; (5bb4 <main+0x344>)
    58bc:	4798      	blx	r3
	cpu_irq_enable();
    58be:	7025      	strb	r5, [r4, #0]
    58c0:	f3bf 8f5f 	dmb	sy
    58c4:	b662      	cpsie	i
			PM->APBBMASK.reg |= mask;
    58c6:	4abc      	ldr	r2, [pc, #752]	; (5bb8 <main+0x348>)
    58c8:	69d3      	ldr	r3, [r2, #28]
    58ca:	2102      	movs	r1, #2
    58cc:	430b      	orrs	r3, r1
    58ce:	61d3      	str	r3, [r2, #28]
	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    58d0:	48ba      	ldr	r0, [pc, #744]	; (5bbc <main+0x34c>)
    58d2:	4cbb      	ldr	r4, [pc, #748]	; (5bc0 <main+0x350>)
    58d4:	47a0      	blx	r4
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    58d6:	48bb      	ldr	r0, [pc, #748]	; (5bc4 <main+0x354>)
    58d8:	47a0      	blx	r4
	for(int i = 0; i < 256; i++)
    58da:	2300      	movs	r3, #0
		binbuff[i] = i;
    58dc:	220c      	movs	r2, #12
    58de:	18b9      	adds	r1, r7, r2
	for(int i = 0; i < 256; i++)
    58e0:	32f4      	adds	r2, #244	; 0xf4
		binbuff[i] = i;
    58e2:	545b      	strb	r3, [r3, r1]
	for(int i = 0; i < 256; i++)
    58e4:	3301      	adds	r3, #1
    58e6:	4293      	cmp	r3, r2
    58e8:	d1fb      	bne.n	58e2 <main+0x72>
	Ctrl_status sdStatus= SdCard_Initiate();
    58ea:	4bb7      	ldr	r3, [pc, #732]	; (5bc8 <main+0x358>)
    58ec:	4798      	blx	r3
	if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    58ee:	2800      	cmp	r0, #0
    58f0:	d000      	beq.n	58f4 <main+0x84>
    58f2:	e0fe      	b.n	5af2 <main+0x282>
		SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    58f4:	48b5      	ldr	r0, [pc, #724]	; (5bcc <main+0x35c>)
    58f6:	4cb2      	ldr	r4, [pc, #712]	; (5bc0 <main+0x350>)
    58f8:	47a0      	blx	r4
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    58fa:	48b5      	ldr	r0, [pc, #724]	; (5bd0 <main+0x360>)
    58fc:	47a0      	blx	r4
		memset(&fs, 0, sizeof(FATFS));
    58fe:	4cb5      	ldr	r4, [pc, #724]	; (5bd4 <main+0x364>)
    5900:	228c      	movs	r2, #140	; 0x8c
    5902:	0092      	lsls	r2, r2, #2
    5904:	2100      	movs	r1, #0
    5906:	0020      	movs	r0, r4
    5908:	4bb3      	ldr	r3, [pc, #716]	; (5bd8 <main+0x368>)
    590a:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    590c:	0021      	movs	r1, r4
    590e:	2000      	movs	r0, #0
    5910:	4bb2      	ldr	r3, [pc, #712]	; (5bdc <main+0x36c>)
    5912:	4798      	blx	r3
    5914:	4bb2      	ldr	r3, [pc, #712]	; (5be0 <main+0x370>)
    5916:	7018      	strb	r0, [r3, #0]
		if (FR_INVALID_DRIVE == res)
    5918:	280b      	cmp	r0, #11
    591a:	d018      	beq.n	594e <main+0xde>
		SerialConsoleWriteString("[OK]\r\n");
    591c:	48b1      	ldr	r0, [pc, #708]	; (5be4 <main+0x374>)
    591e:	4ca8      	ldr	r4, [pc, #672]	; (5bc0 <main+0x350>)
    5920:	47a0      	blx	r4
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    5922:	48b1      	ldr	r0, [pc, #708]	; (5be8 <main+0x378>)
    5924:	47a0      	blx	r4
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5926:	49b1      	ldr	r1, [pc, #708]	; (5bec <main+0x37c>)
    5928:	2330      	movs	r3, #48	; 0x30
    592a:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    592c:	220a      	movs	r2, #10
    592e:	48b0      	ldr	r0, [pc, #704]	; (5bf0 <main+0x380>)
    5930:	4bb0      	ldr	r3, [pc, #704]	; (5bf4 <main+0x384>)
    5932:	4798      	blx	r3
    5934:	4baa      	ldr	r3, [pc, #680]	; (5be0 <main+0x370>)
    5936:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK)
    5938:	2800      	cmp	r0, #0
    593a:	d00e      	beq.n	595a <main+0xea>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    593c:	0002      	movs	r2, r0
    593e:	49ae      	ldr	r1, [pc, #696]	; (5bf8 <main+0x388>)
    5940:	2000      	movs	r0, #0
    5942:	4bae      	ldr	r3, [pc, #696]	; (5bfc <main+0x38c>)
    5944:	4798      	blx	r3
		SerialConsoleWriteString("End of Test.\n\r");
    5946:	48ae      	ldr	r0, [pc, #696]	; (5c00 <main+0x390>)
    5948:	4b9d      	ldr	r3, [pc, #628]	; (5bc0 <main+0x350>)
    594a:	4798      	blx	r3
    594c:	e0d4      	b.n	5af8 <main+0x288>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    594e:	220b      	movs	r2, #11
    5950:	49a9      	ldr	r1, [pc, #676]	; (5bf8 <main+0x388>)
    5952:	2000      	movs	r0, #0
    5954:	4ba9      	ldr	r3, [pc, #676]	; (5bfc <main+0x38c>)
    5956:	4798      	blx	r3
    5958:	e7f5      	b.n	5946 <main+0xd6>
		SerialConsoleWriteString("[OK]\r\n");
    595a:	48a2      	ldr	r0, [pc, #648]	; (5be4 <main+0x374>)
    595c:	4c98      	ldr	r4, [pc, #608]	; (5bc0 <main+0x350>)
    595e:	47a0      	blx	r4
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    5960:	48a8      	ldr	r0, [pc, #672]	; (5c04 <main+0x394>)
    5962:	47a0      	blx	r4
		if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    5964:	49a2      	ldr	r1, [pc, #648]	; (5bf0 <main+0x380>)
    5966:	48a8      	ldr	r0, [pc, #672]	; (5c08 <main+0x398>)
    5968:	4ba8      	ldr	r3, [pc, #672]	; (5c0c <main+0x39c>)
    596a:	4798      	blx	r3
    596c:	2800      	cmp	r0, #0
    596e:	d107      	bne.n	5980 <main+0x110>
			f_close(&file_object);
    5970:	489f      	ldr	r0, [pc, #636]	; (5bf0 <main+0x380>)
    5972:	4ba7      	ldr	r3, [pc, #668]	; (5c10 <main+0x3a0>)
    5974:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    5976:	49a7      	ldr	r1, [pc, #668]	; (5c14 <main+0x3a4>)
    5978:	2000      	movs	r0, #0
    597a:	4ba0      	ldr	r3, [pc, #640]	; (5bfc <main+0x38c>)
    597c:	4798      	blx	r3
    597e:	e7e2      	b.n	5946 <main+0xd6>
		SerialConsoleWriteString("[OK]\r\n");
    5980:	4898      	ldr	r0, [pc, #608]	; (5be4 <main+0x374>)
    5982:	4d8f      	ldr	r5, [pc, #572]	; (5bc0 <main+0x350>)
    5984:	47a8      	blx	r5
		f_close(&file_object); //Close file
    5986:	4c9a      	ldr	r4, [pc, #616]	; (5bf0 <main+0x380>)
    5988:	0020      	movs	r0, r4
    598a:	4ba1      	ldr	r3, [pc, #644]	; (5c10 <main+0x3a0>)
    598c:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    598e:	48a2      	ldr	r0, [pc, #648]	; (5c18 <main+0x3a8>)
    5990:	47a8      	blx	r5
		test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5992:	49a2      	ldr	r1, [pc, #648]	; (5c1c <main+0x3ac>)
    5994:	2330      	movs	r3, #48	; 0x30
    5996:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    5998:	220a      	movs	r2, #10
    599a:	0020      	movs	r0, r4
    599c:	4b95      	ldr	r3, [pc, #596]	; (5bf4 <main+0x384>)
    599e:	4798      	blx	r3
    59a0:	4b8f      	ldr	r3, [pc, #572]	; (5be0 <main+0x370>)
    59a2:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK)
    59a4:	2800      	cmp	r0, #0
    59a6:	d009      	beq.n	59bc <main+0x14c>
			SerialConsoleWriteString("Could not open binary file!\r\n");
    59a8:	489d      	ldr	r0, [pc, #628]	; (5c20 <main+0x3b0>)
    59aa:	4b85      	ldr	r3, [pc, #532]	; (5bc0 <main+0x350>)
    59ac:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    59ae:	4b8c      	ldr	r3, [pc, #560]	; (5be0 <main+0x370>)
    59b0:	781a      	ldrb	r2, [r3, #0]
    59b2:	4991      	ldr	r1, [pc, #580]	; (5bf8 <main+0x388>)
    59b4:	2000      	movs	r0, #0
    59b6:	4b91      	ldr	r3, [pc, #580]	; (5bfc <main+0x38c>)
    59b8:	4798      	blx	r3
    59ba:	e7c4      	b.n	5946 <main+0xd6>
		SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    59bc:	4899      	ldr	r0, [pc, #612]	; (5c24 <main+0x3b4>)
    59be:	4b80      	ldr	r3, [pc, #512]	; (5bc0 <main+0x350>)
    59c0:	4798      	blx	r3
		uint32_t varWrite = 0;
    59c2:	2300      	movs	r3, #0
    59c4:	60bb      	str	r3, [r7, #8]
		if (0 != f_write(&file_object, binbuff,256, (UINT*) &varWrite))
    59c6:	3308      	adds	r3, #8
    59c8:	18fb      	adds	r3, r7, r3
    59ca:	2280      	movs	r2, #128	; 0x80
    59cc:	0052      	lsls	r2, r2, #1
    59ce:	210c      	movs	r1, #12
    59d0:	1879      	adds	r1, r7, r1
    59d2:	4887      	ldr	r0, [pc, #540]	; (5bf0 <main+0x380>)
    59d4:	4c94      	ldr	r4, [pc, #592]	; (5c28 <main+0x3b8>)
    59d6:	47a0      	blx	r4
    59d8:	2800      	cmp	r0, #0
    59da:	d007      	beq.n	59ec <main+0x17c>
			f_close(&file_object);
    59dc:	4884      	ldr	r0, [pc, #528]	; (5bf0 <main+0x380>)
    59de:	4b8c      	ldr	r3, [pc, #560]	; (5c10 <main+0x3a0>)
    59e0:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    59e2:	498c      	ldr	r1, [pc, #560]	; (5c14 <main+0x3a4>)
    59e4:	2000      	movs	r0, #0
    59e6:	4b85      	ldr	r3, [pc, #532]	; (5bfc <main+0x38c>)
    59e8:	4798      	blx	r3
    59ea:	e7ac      	b.n	5946 <main+0xd6>
		SerialConsoleWriteString("[OK]\r\n");
    59ec:	487d      	ldr	r0, [pc, #500]	; (5be4 <main+0x374>)
    59ee:	4c74      	ldr	r4, [pc, #464]	; (5bc0 <main+0x350>)
    59f0:	47a0      	blx	r4
		f_close(&file_object); //Close file
    59f2:	4d7f      	ldr	r5, [pc, #508]	; (5bf0 <main+0x380>)
    59f4:	0028      	movs	r0, r5
    59f6:	4b86      	ldr	r3, [pc, #536]	; (5c10 <main+0x3a0>)
    59f8:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    59fa:	4887      	ldr	r0, [pc, #540]	; (5c18 <main+0x3a8>)
    59fc:	47a0      	blx	r4
		SerialConsoleWriteString("End of Test.\n\r");
    59fe:	4880      	ldr	r0, [pc, #512]	; (5c00 <main+0x390>)
    5a00:	47a0      	blx	r4
		SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    5a02:	488a      	ldr	r0, [pc, #552]	; (5c2c <main+0x3bc>)
    5a04:	47a0      	blx	r4
	config->direction  = PORT_PIN_DIR_INPUT;
    5a06:	2395      	movs	r3, #149	; 0x95
    5a08:	009b      	lsls	r3, r3, #2
    5a0a:	2208      	movs	r2, #8
    5a0c:	18ba      	adds	r2, r7, r2
    5a0e:	18d1      	adds	r1, r2, r3
    5a10:	2300      	movs	r3, #0
    5a12:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5a14:	2201      	movs	r2, #1
    5a16:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5a18:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
    5a1a:	2037      	movs	r0, #55	; 0x37
    5a1c:	4b84      	ldr	r3, [pc, #528]	; (5c30 <main+0x3c0>)
    5a1e:	4798      	blx	r3
		flagA[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5a20:	4c84      	ldr	r4, [pc, #528]	; (5c34 <main+0x3c4>)
    5a22:	2330      	movs	r3, #48	; 0x30
    5a24:	7023      	strb	r3, [r4, #0]
		res1 = f_open(&file_object, (char const *)flagA, FA_READ|FA_OPEN_EXISTING);
    5a26:	2201      	movs	r2, #1
    5a28:	0021      	movs	r1, r4
    5a2a:	0028      	movs	r0, r5
    5a2c:	4e71      	ldr	r6, [pc, #452]	; (5bf4 <main+0x384>)
    5a2e:	47b0      	blx	r6
    5a30:	4b81      	ldr	r3, [pc, #516]	; (5c38 <main+0x3c8>)
    5a32:	7018      	strb	r0, [r3, #0]
		flagB[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5a34:	4b81      	ldr	r3, [pc, #516]	; (5c3c <main+0x3cc>)
    5a36:	2230      	movs	r2, #48	; 0x30
    5a38:	701a      	strb	r2, [r3, #0]
		res2 = f_open(&file_object, (char const *)flagA, FA_READ|FA_OPEN_EXISTING);
    5a3a:	2201      	movs	r2, #1
    5a3c:	0021      	movs	r1, r4
    5a3e:	0028      	movs	r0, r5
    5a40:	47b0      	blx	r6
    5a42:	0002      	movs	r2, r0
    5a44:	4b7e      	ldr	r3, [pc, #504]	; (5c40 <main+0x3d0>)
    5a46:	7018      	strb	r0, [r3, #0]
	return (port_base->IN.reg & pin_mask);
    5a48:	4b7e      	ldr	r3, [pc, #504]	; (5c44 <main+0x3d4>)
    5a4a:	6a1b      	ldr	r3, [r3, #32]
	if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE && res1 == FR_OK)
    5a4c:	021b      	lsls	r3, r3, #8
    5a4e:	d561      	bpl.n	5b14 <main+0x2a4>
    5a50:	4b7c      	ldr	r3, [pc, #496]	; (5c44 <main+0x3d4>)
    5a52:	6a1b      	ldr	r3, [r3, #32]
	else if (port_pin_get_input_level(BUTTON_0_PIN)==BUTTON_0_ACTIVE && res2== FR_OK){
    5a54:	021b      	lsls	r3, r3, #8
    5a56:	d401      	bmi.n	5a5c <main+0x1ec>
    5a58:	2a00      	cmp	r2, #0
    5a5a:	d068      	beq.n	5b2e <main+0x2be>
		SerialConsoleWriteString("Default\r\n");
    5a5c:	487a      	ldr	r0, [pc, #488]	; (5c48 <main+0x3d8>)
    5a5e:	4b58      	ldr	r3, [pc, #352]	; (5bc0 <main+0x350>)
    5a60:	4798      	blx	r3
	taskFlag=2;
    5a62:	2202      	movs	r2, #2
    5a64:	4b79      	ldr	r3, [pc, #484]	; (5c4c <main+0x3dc>)
    5a66:	601a      	str	r2, [r3, #0]
		A_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5a68:	4979      	ldr	r1, [pc, #484]	; (5c50 <main+0x3e0>)
    5a6a:	2330      	movs	r3, #48	; 0x30
    5a6c:	700b      	strb	r3, [r1, #0]
		res3 = f_open(&file_object, (char const *)A_bin_file, FA_READ|FA_OPEN_EXISTING);
    5a6e:	4e60      	ldr	r6, [pc, #384]	; (5bf0 <main+0x380>)
    5a70:	2201      	movs	r2, #1
    5a72:	0030      	movs	r0, r6
    5a74:	4d5f      	ldr	r5, [pc, #380]	; (5bf4 <main+0x384>)
    5a76:	47a8      	blx	r5
    5a78:	4c76      	ldr	r4, [pc, #472]	; (5c54 <main+0x3e4>)
    5a7a:	7020      	strb	r0, [r4, #0]
		B_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5a7c:	4976      	ldr	r1, [pc, #472]	; (5c58 <main+0x3e8>)
    5a7e:	2330      	movs	r3, #48	; 0x30
    5a80:	700b      	strb	r3, [r1, #0]
		res4 = f_open(&file_object, (char const *)B_bin_file, FA_READ|FA_OPEN_EXISTING);
    5a82:	2201      	movs	r2, #1
    5a84:	0030      	movs	r0, r6
    5a86:	47a8      	blx	r5
    5a88:	4b74      	ldr	r3, [pc, #464]	; (5c5c <main+0x3ec>)
    5a8a:	7018      	strb	r0, [r3, #0]
		if(res3 == FR_OK){
    5a8c:	7823      	ldrb	r3, [r4, #0]
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d156      	bne.n	5b40 <main+0x2d0>
			taskFlag = 1;
    5a92:	2201      	movs	r2, #1
    5a94:	4b6d      	ldr	r3, [pc, #436]	; (5c4c <main+0x3dc>)
    5a96:	601a      	str	r2, [r3, #0]
	nvm_get_parameters (&parameters); //Get NVM parameters
    5a98:	2392      	movs	r3, #146	; 0x92
    5a9a:	009b      	lsls	r3, r3, #2
    5a9c:	2208      	movs	r2, #8
    5a9e:	18ba      	adds	r2, r7, r2
    5aa0:	18d4      	adds	r4, r2, r3
    5aa2:	0020      	movs	r0, r4
    5aa4:	4b6e      	ldr	r3, [pc, #440]	; (5c60 <main+0x3f0>)
    5aa6:	4798      	blx	r3
	snprintf(helpStr, 63,"NVM Info: Number of Pages %d. Size of a page: %d bytes. \r\n", parameters.nvm_number_of_pages, parameters.page_size);
    5aa8:	8863      	ldrh	r3, [r4, #2]
    5aaa:	7822      	ldrb	r2, [r4, #0]
    5aac:	9200      	str	r2, [sp, #0]
    5aae:	4a6d      	ldr	r2, [pc, #436]	; (5c64 <main+0x3f4>)
    5ab0:	213f      	movs	r1, #63	; 0x3f
    5ab2:	2082      	movs	r0, #130	; 0x82
    5ab4:	0080      	lsls	r0, r0, #2
    5ab6:	2408      	movs	r4, #8
    5ab8:	46a4      	mov	ip, r4
    5aba:	44bc      	add	ip, r7
    5abc:	4460      	add	r0, ip
    5abe:	4c6a      	ldr	r4, [pc, #424]	; (5c68 <main+0x3f8>)
    5ac0:	47a0      	blx	r4
	SerialConsoleWriteString(helpStr);
    5ac2:	2382      	movs	r3, #130	; 0x82
    5ac4:	009b      	lsls	r3, r3, #2
    5ac6:	2208      	movs	r2, #8
    5ac8:	18ba      	adds	r2, r7, r2
    5aca:	18d0      	adds	r0, r2, r3
    5acc:	4b3c      	ldr	r3, [pc, #240]	; (5bc0 <main+0x350>)
    5ace:	4798      	blx	r3
	uint32_t numBytesRead = 0;
    5ad0:	2300      	movs	r3, #0
    5ad2:	2286      	movs	r2, #134	; 0x86
    5ad4:	0052      	lsls	r2, r2, #1
    5ad6:	18ba      	adds	r2, r7, r2
    5ad8:	6013      	str	r3, [r2, #0]
    5ada:	4d64      	ldr	r5, [pc, #400]	; (5c6c <main+0x3fc>)
    5adc:	4b64      	ldr	r3, [pc, #400]	; (5c70 <main+0x400>)
    5ade:	469a      	mov	sl, r3
    5ae0:	4b64      	ldr	r3, [pc, #400]	; (5c74 <main+0x404>)
    5ae2:	469b      	mov	fp, r3
    5ae4:	2490      	movs	r4, #144	; 0x90
    5ae6:	0264      	lsls	r4, r4, #9
	for (int k = 0; k < 170000; k += 256)
    5ae8:	2300      	movs	r3, #0
    5aea:	4698      	mov	r8, r3
		if (taskFlag == 1)
    5aec:	4b57      	ldr	r3, [pc, #348]	; (5c4c <main+0x3dc>)
    5aee:	4699      	mov	r9, r3
    5af0:	e1a3      	b.n	5e3a <main+0x5ca>
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    5af2:	4861      	ldr	r0, [pc, #388]	; (5c78 <main+0x408>)
    5af4:	4b32      	ldr	r3, [pc, #200]	; (5bc0 <main+0x350>)
    5af6:	4798      	blx	r3
		SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    5af8:	4860      	ldr	r0, [pc, #384]	; (5c7c <main+0x40c>)
    5afa:	4b31      	ldr	r3, [pc, #196]	; (5bc0 <main+0x350>)
    5afc:	4798      	blx	r3
		delay_cycles_ms(5000);
    5afe:	4860      	ldr	r0, [pc, #384]	; (5c80 <main+0x410>)
    5b00:	4b60      	ldr	r3, [pc, #384]	; (5c84 <main+0x414>)
    5b02:	4798      	blx	r3
  __ASM volatile ("dsb");
    5b04:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    5b08:	4a5f      	ldr	r2, [pc, #380]	; (5c88 <main+0x418>)
    5b0a:	4b60      	ldr	r3, [pc, #384]	; (5c8c <main+0x41c>)
    5b0c:	60da      	str	r2, [r3, #12]
    5b0e:	f3bf 8f4f 	dsb	sy
    5b12:	e7fe      	b.n	5b12 <main+0x2a2>
	if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE && res1 == FR_OK)
    5b14:	4b48      	ldr	r3, [pc, #288]	; (5c38 <main+0x3c8>)
    5b16:	781b      	ldrb	r3, [r3, #0]
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d199      	bne.n	5a50 <main+0x1e0>
	taskFlag = 0;
    5b1c:	2200      	movs	r2, #0
    5b1e:	4b4b      	ldr	r3, [pc, #300]	; (5c4c <main+0x3dc>)
    5b20:	601a      	str	r2, [r3, #0]
	res = f_unlink((char const *)flagB);
    5b22:	4846      	ldr	r0, [pc, #280]	; (5c3c <main+0x3cc>)
    5b24:	4b5a      	ldr	r3, [pc, #360]	; (5c90 <main+0x420>)
    5b26:	4798      	blx	r3
    5b28:	4b2d      	ldr	r3, [pc, #180]	; (5be0 <main+0x370>)
    5b2a:	7018      	strb	r0, [r3, #0]
    5b2c:	e79c      	b.n	5a68 <main+0x1f8>
	taskFlag = 1; /* Assume Flag A is detected */
    5b2e:	3201      	adds	r2, #1
    5b30:	4b46      	ldr	r3, [pc, #280]	; (5c4c <main+0x3dc>)
    5b32:	601a      	str	r2, [r3, #0]
	res = f_unlink((char const *)flagA);
    5b34:	483f      	ldr	r0, [pc, #252]	; (5c34 <main+0x3c4>)
    5b36:	4b56      	ldr	r3, [pc, #344]	; (5c90 <main+0x420>)
    5b38:	4798      	blx	r3
    5b3a:	4b29      	ldr	r3, [pc, #164]	; (5be0 <main+0x370>)
    5b3c:	7018      	strb	r0, [r3, #0]
    5b3e:	e793      	b.n	5a68 <main+0x1f8>
		else if(res4 == FR_OK){
    5b40:	2800      	cmp	r0, #0
    5b42:	d102      	bne.n	5b4a <main+0x2da>
			taskFlag = 0;
    5b44:	4b41      	ldr	r3, [pc, #260]	; (5c4c <main+0x3dc>)
    5b46:	6018      	str	r0, [r3, #0]
    5b48:	e7a6      	b.n	5a98 <main+0x228>
			taskFlag = 2;
    5b4a:	2202      	movs	r2, #2
    5b4c:	4b3f      	ldr	r3, [pc, #252]	; (5c4c <main+0x3dc>)
    5b4e:	601a      	str	r2, [r3, #0]
    5b50:	e7a2      	b.n	5a98 <main+0x228>
			enum status_code nvmError = nvm_erase_row(APP_START_ADDRESS + k);
    5b52:	4643      	mov	r3, r8
    5b54:	607b      	str	r3, [r7, #4]
    5b56:	0020      	movs	r0, r4
    5b58:	4b4e      	ldr	r3, [pc, #312]	; (5c94 <main+0x424>)
    5b5a:	4798      	blx	r3
			if(nvmError != STATUS_OK)
    5b5c:	2800      	cmp	r0, #0
    5b5e:	d117      	bne.n	5b90 <main+0x320>
				if(*a != 0xFF)
    5b60:	7823      	ldrb	r3, [r4, #0]
    5b62:	2bff      	cmp	r3, #255	; 0xff
    5b64:	d000      	beq.n	5b68 <main+0x2f8>
    5b66:	e09e      	b.n	5ca6 <main+0x436>
    5b68:	687a      	ldr	r2, [r7, #4]
    5b6a:	0013      	movs	r3, r2
    5b6c:	484a      	ldr	r0, [pc, #296]	; (5c98 <main+0x428>)
    5b6e:	4684      	mov	ip, r0
    5b70:	4463      	add	r3, ip
    5b72:	0019      	movs	r1, r3
    5b74:	0010      	movs	r0, r2
    5b76:	0013      	movs	r3, r2
    5b78:	4e48      	ldr	r6, [pc, #288]	; (5c9c <main+0x42c>)
    5b7a:	46b4      	mov	ip, r6
    5b7c:	4463      	add	r3, ip
    5b7e:	781a      	ldrb	r2, [r3, #0]
    5b80:	2aff      	cmp	r2, #255	; 0xff
    5b82:	d000      	beq.n	5b86 <main+0x316>
    5b84:	e08e      	b.n	5ca4 <main+0x434>
    5b86:	3301      	adds	r3, #1
			for(int iter = 0; iter < 256; iter++)
    5b88:	428b      	cmp	r3, r1
    5b8a:	d1f8      	bne.n	5b7e <main+0x30e>
    5b8c:	6078      	str	r0, [r7, #4]
    5b8e:	e08d      	b.n	5cac <main+0x43c>
				SerialConsoleWriteString("Erase error");
    5b90:	4843      	ldr	r0, [pc, #268]	; (5ca0 <main+0x430>)
    5b92:	4b0b      	ldr	r3, [pc, #44]	; (5bc0 <main+0x350>)
    5b94:	4798      	blx	r3
    5b96:	e7e3      	b.n	5b60 <main+0x2f0>
    5b98:	fffffd94 	.word	0xfffffd94
    5b9c:	00003579 	.word	0x00003579
    5ba0:	00000115 	.word	0x00000115
    5ba4:	000005d9 	.word	0x000005d9
    5ba8:	20000009 	.word	0x20000009
    5bac:	0000096d 	.word	0x0000096d
    5bb0:	41004000 	.word	0x41004000
    5bb4:	000001d5 	.word	0x000001d5
    5bb8:	40000400 	.word	0x40000400
    5bbc:	00007900 	.word	0x00007900
    5bc0:	00000779 	.word	0x00000779
    5bc4:	0000791c 	.word	0x0000791c
    5bc8:	00000459 	.word	0x00000459
    5bcc:	00007944 	.word	0x00007944
    5bd0:	00007964 	.word	0x00007964
    5bd4:	20000a68 	.word	0x20000a68
    5bd8:	000062d9 	.word	0x000062d9
    5bdc:	00004eed 	.word	0x00004eed
    5be0:	20000cf5 	.word	0x20000cf5
    5be4:	00007990 	.word	0x00007990
    5be8:	00007998 	.word	0x00007998
    5bec:	20000058 	.word	0x20000058
    5bf0:	20000c98 	.word	0x20000c98
    5bf4:	00004f1d 	.word	0x00004f1d
    5bf8:	00007980 	.word	0x00007980
    5bfc:	00000841 	.word	0x00000841
    5c00:	00007a54 	.word	0x00007a54
    5c04:	000079b4 	.word	0x000079b4
    5c08:	000079d8 	.word	0x000079d8
    5c0c:	000057c1 	.word	0x000057c1
    5c10:	0000551d 	.word	0x0000551d
    5c14:	000079ec 	.word	0x000079ec
    5c18:	000079f8 	.word	0x000079f8
    5c1c:	20000048 	.word	0x20000048
    5c20:	00007a10 	.word	0x00007a10
    5c24:	00007a30 	.word	0x00007a30
    5c28:	00005259 	.word	0x00005259
    5c2c:	00007a64 	.word	0x00007a64
    5c30:	00001a1d 	.word	0x00001a1d
    5c34:	20000030 	.word	0x20000030
    5c38:	20000cbc 	.word	0x20000cbc
    5c3c:	2000003c 	.word	0x2000003c
    5c40:	20000a65 	.word	0x20000a65
    5c44:	41004480 	.word	0x41004480
    5c48:	00007b14 	.word	0x00007b14
    5c4c:	200001e0 	.word	0x200001e0
    5c50:	2000000c 	.word	0x2000000c
    5c54:	20000cf4 	.word	0x20000cf4
    5c58:	20000024 	.word	0x20000024
    5c5c:	20000a64 	.word	0x20000a64
    5c60:	00000401 	.word	0x00000401
    5c64:	00007b20 	.word	0x00007b20
    5c68:	000065c9 	.word	0x000065c9
    5c6c:	000120c0 	.word	0x000120c0
    5c70:	00012080 	.word	0x00012080
    5c74:	00012040 	.word	0x00012040
    5c78:	00007a98 	.word	0x00007a98
    5c7c:	00007ac8 	.word	0x00007ac8
    5c80:	00001388 	.word	0x00001388
    5c84:	00000155 	.word	0x00000155
    5c88:	05fa0004 	.word	0x05fa0004
    5c8c:	e000ed00 	.word	0xe000ed00
    5c90:	000056bd 	.word	0x000056bd
    5c94:	000003a5 	.word	0x000003a5
    5c98:	00012100 	.word	0x00012100
    5c9c:	00012001 	.word	0x00012001
    5ca0:	00007b5c 	.word	0x00007b5c
    5ca4:	6078      	str	r0, [r7, #4]
					SerialConsoleWriteString("Error - test page is not erased!");
    5ca6:	488c      	ldr	r0, [pc, #560]	; (5ed8 <main+0x668>)
    5ca8:	4b8c      	ldr	r3, [pc, #560]	; (5edc <main+0x66c>)
    5caa:	4798      	blx	r3
			A_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5cac:	2330      	movs	r3, #48	; 0x30
    5cae:	4a8c      	ldr	r2, [pc, #560]	; (5ee0 <main+0x670>)
    5cb0:	7013      	strb	r3, [r2, #0]
			res = f_open(&file_object, (char const *)A_bin_file, FA_READ);
    5cb2:	2201      	movs	r2, #1
    5cb4:	498a      	ldr	r1, [pc, #552]	; (5ee0 <main+0x670>)
    5cb6:	488b      	ldr	r0, [pc, #556]	; (5ee4 <main+0x674>)
    5cb8:	4b8b      	ldr	r3, [pc, #556]	; (5ee8 <main+0x678>)
    5cba:	4798      	blx	r3
    5cbc:	4b8b      	ldr	r3, [pc, #556]	; (5eec <main+0x67c>)
    5cbe:	7018      	strb	r0, [r3, #0]
					if (res != FR_OK)
    5cc0:	2800      	cmp	r0, #0
    5cc2:	d14a      	bne.n	5d5a <main+0x4ea>
					numBytesRead = 0;
    5cc4:	2300      	movs	r3, #0
    5cc6:	2286      	movs	r2, #134	; 0x86
    5cc8:	0052      	lsls	r2, r2, #1
    5cca:	18ba      	adds	r2, r7, r2
    5ccc:	6013      	str	r3, [r2, #0]
					res = f_lseek(&file_object, k);
    5cce:	4e85      	ldr	r6, [pc, #532]	; (5ee4 <main+0x674>)
    5cd0:	6879      	ldr	r1, [r7, #4]
    5cd2:	0030      	movs	r0, r6
    5cd4:	4b86      	ldr	r3, [pc, #536]	; (5ef0 <main+0x680>)
    5cd6:	4798      	blx	r3
    5cd8:	4b84      	ldr	r3, [pc, #528]	; (5eec <main+0x67c>)
    5cda:	7018      	strb	r0, [r3, #0]
						res = f_read(&file_object, &readBuffer[numberBytesTotal], numBytesLeft, &numBytesRead); //Question to students: What is numBytesRead? What are we doing here? //Answer in document submission
    5cdc:	2386      	movs	r3, #134	; 0x86
    5cde:	005b      	lsls	r3, r3, #1
    5ce0:	18fb      	adds	r3, r7, r3
    5ce2:	2280      	movs	r2, #128	; 0x80
    5ce4:	0052      	lsls	r2, r2, #1
    5ce6:	2184      	movs	r1, #132	; 0x84
    5ce8:	0049      	lsls	r1, r1, #1
    5cea:	2008      	movs	r0, #8
    5cec:	4684      	mov	ip, r0
    5cee:	44bc      	add	ip, r7
    5cf0:	4461      	add	r1, ip
    5cf2:	0030      	movs	r0, r6
    5cf4:	4e7f      	ldr	r6, [pc, #508]	; (5ef4 <main+0x684>)
    5cf6:	47b0      	blx	r6
    5cf8:	4b7c      	ldr	r3, [pc, #496]	; (5eec <main+0x67c>)
    5cfa:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k, &readBuffer[0], 64);
    5cfc:	2240      	movs	r2, #64	; 0x40
    5cfe:	2384      	movs	r3, #132	; 0x84
    5d00:	005b      	lsls	r3, r3, #1
    5d02:	2108      	movs	r1, #8
    5d04:	1879      	adds	r1, r7, r1
    5d06:	18c9      	adds	r1, r1, r3
    5d08:	0020      	movs	r0, r4
    5d0a:	4e7b      	ldr	r6, [pc, #492]	; (5ef8 <main+0x688>)
    5d0c:	47b0      	blx	r6
    5d0e:	4b77      	ldr	r3, [pc, #476]	; (5eec <main+0x67c>)
    5d10:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k + 64, &readBuffer[64], 64);
    5d12:	2240      	movs	r2, #64	; 0x40
    5d14:	23a4      	movs	r3, #164	; 0xa4
    5d16:	005b      	lsls	r3, r3, #1
    5d18:	2108      	movs	r1, #8
    5d1a:	1879      	adds	r1, r7, r1
    5d1c:	18c9      	adds	r1, r1, r3
    5d1e:	4658      	mov	r0, fp
    5d20:	47b0      	blx	r6
    5d22:	4b72      	ldr	r3, [pc, #456]	; (5eec <main+0x67c>)
    5d24:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k + 128, &readBuffer[128], 64);
    5d26:	2240      	movs	r2, #64	; 0x40
    5d28:	23c4      	movs	r3, #196	; 0xc4
    5d2a:	005b      	lsls	r3, r3, #1
    5d2c:	2108      	movs	r1, #8
    5d2e:	1879      	adds	r1, r7, r1
    5d30:	18c9      	adds	r1, r1, r3
    5d32:	4650      	mov	r0, sl
    5d34:	47b0      	blx	r6
    5d36:	4b6d      	ldr	r3, [pc, #436]	; (5eec <main+0x67c>)
    5d38:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k + 192, &readBuffer[192], 64);
    5d3a:	2240      	movs	r2, #64	; 0x40
    5d3c:	23e4      	movs	r3, #228	; 0xe4
    5d3e:	005b      	lsls	r3, r3, #1
    5d40:	2108      	movs	r1, #8
    5d42:	1879      	adds	r1, r7, r1
    5d44:	18c9      	adds	r1, r1, r3
    5d46:	0028      	movs	r0, r5
    5d48:	47b0      	blx	r6
    5d4a:	4b68      	ldr	r3, [pc, #416]	; (5eec <main+0x67c>)
    5d4c:	7018      	strb	r0, [r3, #0]
					if (res != FR_OK)
    5d4e:	2800      	cmp	r0, #0
    5d50:	d007      	beq.n	5d62 <main+0x4f2>
						SerialConsoleWriteString("Test write to NVM failed!\r\n");
    5d52:	486a      	ldr	r0, [pc, #424]	; (5efc <main+0x68c>)
    5d54:	4b61      	ldr	r3, [pc, #388]	; (5edc <main+0x66c>)
    5d56:	4798      	blx	r3
    5d58:	e074      	b.n	5e44 <main+0x5d4>
						SerialConsoleWriteString("Could not open test file!\r\n");
    5d5a:	4869      	ldr	r0, [pc, #420]	; (5f00 <main+0x690>)
    5d5c:	4b5f      	ldr	r3, [pc, #380]	; (5edc <main+0x66c>)
    5d5e:	4798      	blx	r3
    5d60:	e7b0      	b.n	5cc4 <main+0x454>
						SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
    5d62:	4868      	ldr	r0, [pc, #416]	; (5f04 <main+0x694>)
    5d64:	4b5d      	ldr	r3, [pc, #372]	; (5edc <main+0x66c>)
    5d66:	4798      	blx	r3
    5d68:	e06c      	b.n	5e44 <main+0x5d4>
				SerialConsoleWriteString("Erase error");
    5d6a:	4867      	ldr	r0, [pc, #412]	; (5f08 <main+0x698>)
    5d6c:	4b5b      	ldr	r3, [pc, #364]	; (5edc <main+0x66c>)
    5d6e:	4798      	blx	r3
    5d70:	e073      	b.n	5e5a <main+0x5ea>
    5d72:	6078      	str	r0, [r7, #4]
					SerialConsoleWriteString("Error - test page is not erased!");
    5d74:	4858      	ldr	r0, [pc, #352]	; (5ed8 <main+0x668>)
    5d76:	4b59      	ldr	r3, [pc, #356]	; (5edc <main+0x66c>)
    5d78:	4798      	blx	r3
			B_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5d7a:	4964      	ldr	r1, [pc, #400]	; (5f0c <main+0x69c>)
    5d7c:	2330      	movs	r3, #48	; 0x30
    5d7e:	700b      	strb	r3, [r1, #0]
			res = f_open(&file_object, (char const *)B_bin_file, FA_READ);
    5d80:	2201      	movs	r2, #1
    5d82:	4858      	ldr	r0, [pc, #352]	; (5ee4 <main+0x674>)
    5d84:	4b58      	ldr	r3, [pc, #352]	; (5ee8 <main+0x678>)
    5d86:	4798      	blx	r3
    5d88:	4b58      	ldr	r3, [pc, #352]	; (5eec <main+0x67c>)
    5d8a:	7018      	strb	r0, [r3, #0]
					if (res != FR_OK)
    5d8c:	2800      	cmp	r0, #0
    5d8e:	d17b      	bne.n	5e88 <main+0x618>
					numBytesRead = 0;
    5d90:	2300      	movs	r3, #0
    5d92:	2286      	movs	r2, #134	; 0x86
    5d94:	0052      	lsls	r2, r2, #1
    5d96:	18ba      	adds	r2, r7, r2
    5d98:	6013      	str	r3, [r2, #0]
					res = f_lseek(&file_object, k);
    5d9a:	4e52      	ldr	r6, [pc, #328]	; (5ee4 <main+0x674>)
    5d9c:	6879      	ldr	r1, [r7, #4]
    5d9e:	0030      	movs	r0, r6
    5da0:	4b53      	ldr	r3, [pc, #332]	; (5ef0 <main+0x680>)
    5da2:	4798      	blx	r3
    5da4:	4b51      	ldr	r3, [pc, #324]	; (5eec <main+0x67c>)
    5da6:	7018      	strb	r0, [r3, #0]
						res = f_read(&file_object, &readBuffer[numberBytesTotal], numBytesLeft, &numBytesRead); //Question to students: What is numBytesRead? What are we doing here? //Answer in document submission
    5da8:	2386      	movs	r3, #134	; 0x86
    5daa:	005b      	lsls	r3, r3, #1
    5dac:	18fb      	adds	r3, r7, r3
    5dae:	2280      	movs	r2, #128	; 0x80
    5db0:	0052      	lsls	r2, r2, #1
    5db2:	2184      	movs	r1, #132	; 0x84
    5db4:	0049      	lsls	r1, r1, #1
    5db6:	2008      	movs	r0, #8
    5db8:	4684      	mov	ip, r0
    5dba:	44bc      	add	ip, r7
    5dbc:	4461      	add	r1, ip
    5dbe:	0030      	movs	r0, r6
    5dc0:	4e4c      	ldr	r6, [pc, #304]	; (5ef4 <main+0x684>)
    5dc2:	47b0      	blx	r6
    5dc4:	4b49      	ldr	r3, [pc, #292]	; (5eec <main+0x67c>)
    5dc6:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k, &readBuffer[0], 64);
    5dc8:	2240      	movs	r2, #64	; 0x40
    5dca:	2384      	movs	r3, #132	; 0x84
    5dcc:	005b      	lsls	r3, r3, #1
    5dce:	2108      	movs	r1, #8
    5dd0:	1879      	adds	r1, r7, r1
    5dd2:	18c9      	adds	r1, r1, r3
    5dd4:	0020      	movs	r0, r4
    5dd6:	4e48      	ldr	r6, [pc, #288]	; (5ef8 <main+0x688>)
    5dd8:	47b0      	blx	r6
    5dda:	4b44      	ldr	r3, [pc, #272]	; (5eec <main+0x67c>)
    5ddc:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k + 64, &readBuffer[64], 64);
    5dde:	2240      	movs	r2, #64	; 0x40
    5de0:	23a4      	movs	r3, #164	; 0xa4
    5de2:	005b      	lsls	r3, r3, #1
    5de4:	2108      	movs	r1, #8
    5de6:	1879      	adds	r1, r7, r1
    5de8:	18c9      	adds	r1, r1, r3
    5dea:	4658      	mov	r0, fp
    5dec:	47b0      	blx	r6
    5dee:	4b3f      	ldr	r3, [pc, #252]	; (5eec <main+0x67c>)
    5df0:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k + 128, &readBuffer[128], 64);
    5df2:	2240      	movs	r2, #64	; 0x40
    5df4:	23c4      	movs	r3, #196	; 0xc4
    5df6:	005b      	lsls	r3, r3, #1
    5df8:	2108      	movs	r1, #8
    5dfa:	1879      	adds	r1, r7, r1
    5dfc:	18c9      	adds	r1, r1, r3
    5dfe:	4650      	mov	r0, sl
    5e00:	47b0      	blx	r6
    5e02:	4b3a      	ldr	r3, [pc, #232]	; (5eec <main+0x67c>)
    5e04:	7018      	strb	r0, [r3, #0]
					res = nvm_write_buffer (APP_START_ADDRESS + k + 192, &readBuffer[192], 64);
    5e06:	2240      	movs	r2, #64	; 0x40
    5e08:	23e4      	movs	r3, #228	; 0xe4
    5e0a:	005b      	lsls	r3, r3, #1
    5e0c:	2108      	movs	r1, #8
    5e0e:	1879      	adds	r1, r7, r1
    5e10:	18c9      	adds	r1, r1, r3
    5e12:	0028      	movs	r0, r5
    5e14:	47b0      	blx	r6
    5e16:	4b35      	ldr	r3, [pc, #212]	; (5eec <main+0x67c>)
    5e18:	7018      	strb	r0, [r3, #0]
					if (res != FR_OK)
    5e1a:	2800      	cmp	r0, #0
    5e1c:	d038      	beq.n	5e90 <main+0x620>
						SerialConsoleWriteString("Test write to NVM failed!\r\n");
    5e1e:	4837      	ldr	r0, [pc, #220]	; (5efc <main+0x68c>)
    5e20:	4b2e      	ldr	r3, [pc, #184]	; (5edc <main+0x66c>)
    5e22:	4798      	blx	r3
	for (int k = 0; k < 170000; k += 256)
    5e24:	2380      	movs	r3, #128	; 0x80
    5e26:	005b      	lsls	r3, r3, #1
    5e28:	469c      	mov	ip, r3
    5e2a:	44e0      	add	r8, ip
    5e2c:	18e4      	adds	r4, r4, r3
    5e2e:	44e3      	add	fp, ip
    5e30:	44e2      	add	sl, ip
    5e32:	18ed      	adds	r5, r5, r3
    5e34:	4b36      	ldr	r3, [pc, #216]	; (5f10 <main+0x6a0>)
    5e36:	4598      	cmp	r8, r3
    5e38:	d02e      	beq.n	5e98 <main+0x628>
		if (taskFlag == 1)
    5e3a:	464b      	mov	r3, r9
    5e3c:	681b      	ldr	r3, [r3, #0]
    5e3e:	2b01      	cmp	r3, #1
    5e40:	d100      	bne.n	5e44 <main+0x5d4>
    5e42:	e686      	b.n	5b52 <main+0x2e2>
		if (taskFlag == 0)
    5e44:	4b33      	ldr	r3, [pc, #204]	; (5f14 <main+0x6a4>)
    5e46:	681b      	ldr	r3, [r3, #0]
    5e48:	2b00      	cmp	r3, #0
    5e4a:	d1eb      	bne.n	5e24 <main+0x5b4>
			enum status_code nvmError = nvm_erase_row(APP_START_ADDRESS + k);
    5e4c:	4643      	mov	r3, r8
    5e4e:	607b      	str	r3, [r7, #4]
    5e50:	0020      	movs	r0, r4
    5e52:	4b31      	ldr	r3, [pc, #196]	; (5f18 <main+0x6a8>)
    5e54:	4798      	blx	r3
			if(nvmError != STATUS_OK)
    5e56:	2800      	cmp	r0, #0
    5e58:	d187      	bne.n	5d6a <main+0x4fa>
				if(*a != 0xFF)
    5e5a:	7823      	ldrb	r3, [r4, #0]
    5e5c:	2bff      	cmp	r3, #255	; 0xff
    5e5e:	d189      	bne.n	5d74 <main+0x504>
    5e60:	687a      	ldr	r2, [r7, #4]
    5e62:	0013      	movs	r3, r2
    5e64:	482d      	ldr	r0, [pc, #180]	; (5f1c <main+0x6ac>)
    5e66:	4684      	mov	ip, r0
    5e68:	4463      	add	r3, ip
    5e6a:	0019      	movs	r1, r3
    5e6c:	0010      	movs	r0, r2
    5e6e:	0013      	movs	r3, r2
    5e70:	4e2b      	ldr	r6, [pc, #172]	; (5f20 <main+0x6b0>)
    5e72:	46b4      	mov	ip, r6
    5e74:	4463      	add	r3, ip
    5e76:	781a      	ldrb	r2, [r3, #0]
    5e78:	2aff      	cmp	r2, #255	; 0xff
    5e7a:	d000      	beq.n	5e7e <main+0x60e>
    5e7c:	e779      	b.n	5d72 <main+0x502>
    5e7e:	3301      	adds	r3, #1
			for(int iter = 0; iter < 256; iter++)
    5e80:	428b      	cmp	r3, r1
    5e82:	d1f8      	bne.n	5e76 <main+0x606>
    5e84:	6078      	str	r0, [r7, #4]
    5e86:	e778      	b.n	5d7a <main+0x50a>
						SerialConsoleWriteString("Could not open test file!\r\n");
    5e88:	481d      	ldr	r0, [pc, #116]	; (5f00 <main+0x690>)
    5e8a:	4b14      	ldr	r3, [pc, #80]	; (5edc <main+0x66c>)
    5e8c:	4798      	blx	r3
    5e8e:	e77f      	b.n	5d90 <main+0x520>
						SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
    5e90:	481c      	ldr	r0, [pc, #112]	; (5f04 <main+0x694>)
    5e92:	4b12      	ldr	r3, [pc, #72]	; (5edc <main+0x66c>)
    5e94:	4798      	blx	r3
    5e96:	e7c5      	b.n	5e24 <main+0x5b4>
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    5e98:	4822      	ldr	r0, [pc, #136]	; (5f24 <main+0x6b4>)
    5e9a:	4b10      	ldr	r3, [pc, #64]	; (5edc <main+0x66c>)
    5e9c:	4798      	blx	r3
	delay_cycles_ms(100); //Delay to allow print
    5e9e:	2064      	movs	r0, #100	; 0x64
    5ea0:	4b21      	ldr	r3, [pc, #132]	; (5f28 <main+0x6b8>)
    5ea2:	4798      	blx	r3
		DeinitializeSerialConsole(); //Deinitializes UART
    5ea4:	4b21      	ldr	r3, [pc, #132]	; (5f2c <main+0x6bc>)
    5ea6:	4798      	blx	r3
		sd_mmc_deinit(); //Deinitialize SD CARD
    5ea8:	4b21      	ldr	r3, [pc, #132]	; (5f30 <main+0x6c0>)
    5eaa:	4798      	blx	r3
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    5eac:	2390      	movs	r3, #144	; 0x90
    5eae:	025b      	lsls	r3, r3, #9
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    5eb0:	681a      	ldr	r2, [r3, #0]
    5eb2:	f382 8808 	msr	MSP, r2
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    5eb6:	4a1f      	ldr	r2, [pc, #124]	; (5f34 <main+0x6c4>)
    5eb8:	6093      	str	r3, [r2, #8]
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    5eba:	4b1f      	ldr	r3, [pc, #124]	; (5f38 <main+0x6c8>)
applicationCodeEntry();
    5ebc:	681b      	ldr	r3, [r3, #0]
    5ebe:	4798      	blx	r3
}
    5ec0:	2000      	movs	r0, #0
    5ec2:	46bd      	mov	sp, r7
    5ec4:	2399      	movs	r3, #153	; 0x99
    5ec6:	009b      	lsls	r3, r3, #2
    5ec8:	449d      	add	sp, r3
    5eca:	bc3c      	pop	{r2, r3, r4, r5}
    5ecc:	4690      	mov	r8, r2
    5ece:	4699      	mov	r9, r3
    5ed0:	46a2      	mov	sl, r4
    5ed2:	46ab      	mov	fp, r5
    5ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ed6:	46c0      	nop			; (mov r8, r8)
    5ed8:	00007b68 	.word	0x00007b68
    5edc:	00000779 	.word	0x00000779
    5ee0:	2000000c 	.word	0x2000000c
    5ee4:	20000c98 	.word	0x20000c98
    5ee8:	00004f1d 	.word	0x00004f1d
    5eec:	20000cf5 	.word	0x20000cf5
    5ef0:	00005535 	.word	0x00005535
    5ef4:	000050a5 	.word	0x000050a5
    5ef8:	000002fd 	.word	0x000002fd
    5efc:	00007ba8 	.word	0x00007ba8
    5f00:	00007b8c 	.word	0x00007b8c
    5f04:	00007bc4 	.word	0x00007bc4
    5f08:	00007b5c 	.word	0x00007b5c
    5f0c:	20000024 	.word	0x20000024
    5f10:	00029900 	.word	0x00029900
    5f14:	200001e0 	.word	0x200001e0
    5f18:	000003a5 	.word	0x000003a5
    5f1c:	00012100 	.word	0x00012100
    5f20:	00012001 	.word	0x00012001
    5f24:	00007be4 	.word	0x00007be4
    5f28:	00000155 	.word	0x00000155
    5f2c:	00000741 	.word	0x00000741
    5f30:	000013f1 	.word	0x000013f1
    5f34:	e000ed00 	.word	0xe000ed00
    5f38:	00012004 	.word	0x00012004

00005f3c <__udivsi3>:
    5f3c:	2200      	movs	r2, #0
    5f3e:	0843      	lsrs	r3, r0, #1
    5f40:	428b      	cmp	r3, r1
    5f42:	d374      	bcc.n	602e <__udivsi3+0xf2>
    5f44:	0903      	lsrs	r3, r0, #4
    5f46:	428b      	cmp	r3, r1
    5f48:	d35f      	bcc.n	600a <__udivsi3+0xce>
    5f4a:	0a03      	lsrs	r3, r0, #8
    5f4c:	428b      	cmp	r3, r1
    5f4e:	d344      	bcc.n	5fda <__udivsi3+0x9e>
    5f50:	0b03      	lsrs	r3, r0, #12
    5f52:	428b      	cmp	r3, r1
    5f54:	d328      	bcc.n	5fa8 <__udivsi3+0x6c>
    5f56:	0c03      	lsrs	r3, r0, #16
    5f58:	428b      	cmp	r3, r1
    5f5a:	d30d      	bcc.n	5f78 <__udivsi3+0x3c>
    5f5c:	22ff      	movs	r2, #255	; 0xff
    5f5e:	0209      	lsls	r1, r1, #8
    5f60:	ba12      	rev	r2, r2
    5f62:	0c03      	lsrs	r3, r0, #16
    5f64:	428b      	cmp	r3, r1
    5f66:	d302      	bcc.n	5f6e <__udivsi3+0x32>
    5f68:	1212      	asrs	r2, r2, #8
    5f6a:	0209      	lsls	r1, r1, #8
    5f6c:	d065      	beq.n	603a <__udivsi3+0xfe>
    5f6e:	0b03      	lsrs	r3, r0, #12
    5f70:	428b      	cmp	r3, r1
    5f72:	d319      	bcc.n	5fa8 <__udivsi3+0x6c>
    5f74:	e000      	b.n	5f78 <__udivsi3+0x3c>
    5f76:	0a09      	lsrs	r1, r1, #8
    5f78:	0bc3      	lsrs	r3, r0, #15
    5f7a:	428b      	cmp	r3, r1
    5f7c:	d301      	bcc.n	5f82 <__udivsi3+0x46>
    5f7e:	03cb      	lsls	r3, r1, #15
    5f80:	1ac0      	subs	r0, r0, r3
    5f82:	4152      	adcs	r2, r2
    5f84:	0b83      	lsrs	r3, r0, #14
    5f86:	428b      	cmp	r3, r1
    5f88:	d301      	bcc.n	5f8e <__udivsi3+0x52>
    5f8a:	038b      	lsls	r3, r1, #14
    5f8c:	1ac0      	subs	r0, r0, r3
    5f8e:	4152      	adcs	r2, r2
    5f90:	0b43      	lsrs	r3, r0, #13
    5f92:	428b      	cmp	r3, r1
    5f94:	d301      	bcc.n	5f9a <__udivsi3+0x5e>
    5f96:	034b      	lsls	r3, r1, #13
    5f98:	1ac0      	subs	r0, r0, r3
    5f9a:	4152      	adcs	r2, r2
    5f9c:	0b03      	lsrs	r3, r0, #12
    5f9e:	428b      	cmp	r3, r1
    5fa0:	d301      	bcc.n	5fa6 <__udivsi3+0x6a>
    5fa2:	030b      	lsls	r3, r1, #12
    5fa4:	1ac0      	subs	r0, r0, r3
    5fa6:	4152      	adcs	r2, r2
    5fa8:	0ac3      	lsrs	r3, r0, #11
    5faa:	428b      	cmp	r3, r1
    5fac:	d301      	bcc.n	5fb2 <__udivsi3+0x76>
    5fae:	02cb      	lsls	r3, r1, #11
    5fb0:	1ac0      	subs	r0, r0, r3
    5fb2:	4152      	adcs	r2, r2
    5fb4:	0a83      	lsrs	r3, r0, #10
    5fb6:	428b      	cmp	r3, r1
    5fb8:	d301      	bcc.n	5fbe <__udivsi3+0x82>
    5fba:	028b      	lsls	r3, r1, #10
    5fbc:	1ac0      	subs	r0, r0, r3
    5fbe:	4152      	adcs	r2, r2
    5fc0:	0a43      	lsrs	r3, r0, #9
    5fc2:	428b      	cmp	r3, r1
    5fc4:	d301      	bcc.n	5fca <__udivsi3+0x8e>
    5fc6:	024b      	lsls	r3, r1, #9
    5fc8:	1ac0      	subs	r0, r0, r3
    5fca:	4152      	adcs	r2, r2
    5fcc:	0a03      	lsrs	r3, r0, #8
    5fce:	428b      	cmp	r3, r1
    5fd0:	d301      	bcc.n	5fd6 <__udivsi3+0x9a>
    5fd2:	020b      	lsls	r3, r1, #8
    5fd4:	1ac0      	subs	r0, r0, r3
    5fd6:	4152      	adcs	r2, r2
    5fd8:	d2cd      	bcs.n	5f76 <__udivsi3+0x3a>
    5fda:	09c3      	lsrs	r3, r0, #7
    5fdc:	428b      	cmp	r3, r1
    5fde:	d301      	bcc.n	5fe4 <__udivsi3+0xa8>
    5fe0:	01cb      	lsls	r3, r1, #7
    5fe2:	1ac0      	subs	r0, r0, r3
    5fe4:	4152      	adcs	r2, r2
    5fe6:	0983      	lsrs	r3, r0, #6
    5fe8:	428b      	cmp	r3, r1
    5fea:	d301      	bcc.n	5ff0 <__udivsi3+0xb4>
    5fec:	018b      	lsls	r3, r1, #6
    5fee:	1ac0      	subs	r0, r0, r3
    5ff0:	4152      	adcs	r2, r2
    5ff2:	0943      	lsrs	r3, r0, #5
    5ff4:	428b      	cmp	r3, r1
    5ff6:	d301      	bcc.n	5ffc <__udivsi3+0xc0>
    5ff8:	014b      	lsls	r3, r1, #5
    5ffa:	1ac0      	subs	r0, r0, r3
    5ffc:	4152      	adcs	r2, r2
    5ffe:	0903      	lsrs	r3, r0, #4
    6000:	428b      	cmp	r3, r1
    6002:	d301      	bcc.n	6008 <__udivsi3+0xcc>
    6004:	010b      	lsls	r3, r1, #4
    6006:	1ac0      	subs	r0, r0, r3
    6008:	4152      	adcs	r2, r2
    600a:	08c3      	lsrs	r3, r0, #3
    600c:	428b      	cmp	r3, r1
    600e:	d301      	bcc.n	6014 <__udivsi3+0xd8>
    6010:	00cb      	lsls	r3, r1, #3
    6012:	1ac0      	subs	r0, r0, r3
    6014:	4152      	adcs	r2, r2
    6016:	0883      	lsrs	r3, r0, #2
    6018:	428b      	cmp	r3, r1
    601a:	d301      	bcc.n	6020 <__udivsi3+0xe4>
    601c:	008b      	lsls	r3, r1, #2
    601e:	1ac0      	subs	r0, r0, r3
    6020:	4152      	adcs	r2, r2
    6022:	0843      	lsrs	r3, r0, #1
    6024:	428b      	cmp	r3, r1
    6026:	d301      	bcc.n	602c <__udivsi3+0xf0>
    6028:	004b      	lsls	r3, r1, #1
    602a:	1ac0      	subs	r0, r0, r3
    602c:	4152      	adcs	r2, r2
    602e:	1a41      	subs	r1, r0, r1
    6030:	d200      	bcs.n	6034 <__udivsi3+0xf8>
    6032:	4601      	mov	r1, r0
    6034:	4152      	adcs	r2, r2
    6036:	4610      	mov	r0, r2
    6038:	4770      	bx	lr
    603a:	e7ff      	b.n	603c <__udivsi3+0x100>
    603c:	b501      	push	{r0, lr}
    603e:	2000      	movs	r0, #0
    6040:	f000 f8f0 	bl	6224 <__aeabi_idiv0>
    6044:	bd02      	pop	{r1, pc}
    6046:	46c0      	nop			; (mov r8, r8)

00006048 <__aeabi_uidivmod>:
    6048:	2900      	cmp	r1, #0
    604a:	d0f7      	beq.n	603c <__udivsi3+0x100>
    604c:	e776      	b.n	5f3c <__udivsi3>
    604e:	4770      	bx	lr

00006050 <__divsi3>:
    6050:	4603      	mov	r3, r0
    6052:	430b      	orrs	r3, r1
    6054:	d47f      	bmi.n	6156 <__divsi3+0x106>
    6056:	2200      	movs	r2, #0
    6058:	0843      	lsrs	r3, r0, #1
    605a:	428b      	cmp	r3, r1
    605c:	d374      	bcc.n	6148 <__divsi3+0xf8>
    605e:	0903      	lsrs	r3, r0, #4
    6060:	428b      	cmp	r3, r1
    6062:	d35f      	bcc.n	6124 <__divsi3+0xd4>
    6064:	0a03      	lsrs	r3, r0, #8
    6066:	428b      	cmp	r3, r1
    6068:	d344      	bcc.n	60f4 <__divsi3+0xa4>
    606a:	0b03      	lsrs	r3, r0, #12
    606c:	428b      	cmp	r3, r1
    606e:	d328      	bcc.n	60c2 <__divsi3+0x72>
    6070:	0c03      	lsrs	r3, r0, #16
    6072:	428b      	cmp	r3, r1
    6074:	d30d      	bcc.n	6092 <__divsi3+0x42>
    6076:	22ff      	movs	r2, #255	; 0xff
    6078:	0209      	lsls	r1, r1, #8
    607a:	ba12      	rev	r2, r2
    607c:	0c03      	lsrs	r3, r0, #16
    607e:	428b      	cmp	r3, r1
    6080:	d302      	bcc.n	6088 <__divsi3+0x38>
    6082:	1212      	asrs	r2, r2, #8
    6084:	0209      	lsls	r1, r1, #8
    6086:	d065      	beq.n	6154 <__divsi3+0x104>
    6088:	0b03      	lsrs	r3, r0, #12
    608a:	428b      	cmp	r3, r1
    608c:	d319      	bcc.n	60c2 <__divsi3+0x72>
    608e:	e000      	b.n	6092 <__divsi3+0x42>
    6090:	0a09      	lsrs	r1, r1, #8
    6092:	0bc3      	lsrs	r3, r0, #15
    6094:	428b      	cmp	r3, r1
    6096:	d301      	bcc.n	609c <__divsi3+0x4c>
    6098:	03cb      	lsls	r3, r1, #15
    609a:	1ac0      	subs	r0, r0, r3
    609c:	4152      	adcs	r2, r2
    609e:	0b83      	lsrs	r3, r0, #14
    60a0:	428b      	cmp	r3, r1
    60a2:	d301      	bcc.n	60a8 <__divsi3+0x58>
    60a4:	038b      	lsls	r3, r1, #14
    60a6:	1ac0      	subs	r0, r0, r3
    60a8:	4152      	adcs	r2, r2
    60aa:	0b43      	lsrs	r3, r0, #13
    60ac:	428b      	cmp	r3, r1
    60ae:	d301      	bcc.n	60b4 <__divsi3+0x64>
    60b0:	034b      	lsls	r3, r1, #13
    60b2:	1ac0      	subs	r0, r0, r3
    60b4:	4152      	adcs	r2, r2
    60b6:	0b03      	lsrs	r3, r0, #12
    60b8:	428b      	cmp	r3, r1
    60ba:	d301      	bcc.n	60c0 <__divsi3+0x70>
    60bc:	030b      	lsls	r3, r1, #12
    60be:	1ac0      	subs	r0, r0, r3
    60c0:	4152      	adcs	r2, r2
    60c2:	0ac3      	lsrs	r3, r0, #11
    60c4:	428b      	cmp	r3, r1
    60c6:	d301      	bcc.n	60cc <__divsi3+0x7c>
    60c8:	02cb      	lsls	r3, r1, #11
    60ca:	1ac0      	subs	r0, r0, r3
    60cc:	4152      	adcs	r2, r2
    60ce:	0a83      	lsrs	r3, r0, #10
    60d0:	428b      	cmp	r3, r1
    60d2:	d301      	bcc.n	60d8 <__divsi3+0x88>
    60d4:	028b      	lsls	r3, r1, #10
    60d6:	1ac0      	subs	r0, r0, r3
    60d8:	4152      	adcs	r2, r2
    60da:	0a43      	lsrs	r3, r0, #9
    60dc:	428b      	cmp	r3, r1
    60de:	d301      	bcc.n	60e4 <__divsi3+0x94>
    60e0:	024b      	lsls	r3, r1, #9
    60e2:	1ac0      	subs	r0, r0, r3
    60e4:	4152      	adcs	r2, r2
    60e6:	0a03      	lsrs	r3, r0, #8
    60e8:	428b      	cmp	r3, r1
    60ea:	d301      	bcc.n	60f0 <__divsi3+0xa0>
    60ec:	020b      	lsls	r3, r1, #8
    60ee:	1ac0      	subs	r0, r0, r3
    60f0:	4152      	adcs	r2, r2
    60f2:	d2cd      	bcs.n	6090 <__divsi3+0x40>
    60f4:	09c3      	lsrs	r3, r0, #7
    60f6:	428b      	cmp	r3, r1
    60f8:	d301      	bcc.n	60fe <__divsi3+0xae>
    60fa:	01cb      	lsls	r3, r1, #7
    60fc:	1ac0      	subs	r0, r0, r3
    60fe:	4152      	adcs	r2, r2
    6100:	0983      	lsrs	r3, r0, #6
    6102:	428b      	cmp	r3, r1
    6104:	d301      	bcc.n	610a <__divsi3+0xba>
    6106:	018b      	lsls	r3, r1, #6
    6108:	1ac0      	subs	r0, r0, r3
    610a:	4152      	adcs	r2, r2
    610c:	0943      	lsrs	r3, r0, #5
    610e:	428b      	cmp	r3, r1
    6110:	d301      	bcc.n	6116 <__divsi3+0xc6>
    6112:	014b      	lsls	r3, r1, #5
    6114:	1ac0      	subs	r0, r0, r3
    6116:	4152      	adcs	r2, r2
    6118:	0903      	lsrs	r3, r0, #4
    611a:	428b      	cmp	r3, r1
    611c:	d301      	bcc.n	6122 <__divsi3+0xd2>
    611e:	010b      	lsls	r3, r1, #4
    6120:	1ac0      	subs	r0, r0, r3
    6122:	4152      	adcs	r2, r2
    6124:	08c3      	lsrs	r3, r0, #3
    6126:	428b      	cmp	r3, r1
    6128:	d301      	bcc.n	612e <__divsi3+0xde>
    612a:	00cb      	lsls	r3, r1, #3
    612c:	1ac0      	subs	r0, r0, r3
    612e:	4152      	adcs	r2, r2
    6130:	0883      	lsrs	r3, r0, #2
    6132:	428b      	cmp	r3, r1
    6134:	d301      	bcc.n	613a <__divsi3+0xea>
    6136:	008b      	lsls	r3, r1, #2
    6138:	1ac0      	subs	r0, r0, r3
    613a:	4152      	adcs	r2, r2
    613c:	0843      	lsrs	r3, r0, #1
    613e:	428b      	cmp	r3, r1
    6140:	d301      	bcc.n	6146 <__divsi3+0xf6>
    6142:	004b      	lsls	r3, r1, #1
    6144:	1ac0      	subs	r0, r0, r3
    6146:	4152      	adcs	r2, r2
    6148:	1a41      	subs	r1, r0, r1
    614a:	d200      	bcs.n	614e <__divsi3+0xfe>
    614c:	4601      	mov	r1, r0
    614e:	4152      	adcs	r2, r2
    6150:	4610      	mov	r0, r2
    6152:	4770      	bx	lr
    6154:	e05d      	b.n	6212 <__divsi3+0x1c2>
    6156:	0fca      	lsrs	r2, r1, #31
    6158:	d000      	beq.n	615c <__divsi3+0x10c>
    615a:	4249      	negs	r1, r1
    615c:	1003      	asrs	r3, r0, #32
    615e:	d300      	bcc.n	6162 <__divsi3+0x112>
    6160:	4240      	negs	r0, r0
    6162:	4053      	eors	r3, r2
    6164:	2200      	movs	r2, #0
    6166:	469c      	mov	ip, r3
    6168:	0903      	lsrs	r3, r0, #4
    616a:	428b      	cmp	r3, r1
    616c:	d32d      	bcc.n	61ca <__divsi3+0x17a>
    616e:	0a03      	lsrs	r3, r0, #8
    6170:	428b      	cmp	r3, r1
    6172:	d312      	bcc.n	619a <__divsi3+0x14a>
    6174:	22fc      	movs	r2, #252	; 0xfc
    6176:	0189      	lsls	r1, r1, #6
    6178:	ba12      	rev	r2, r2
    617a:	0a03      	lsrs	r3, r0, #8
    617c:	428b      	cmp	r3, r1
    617e:	d30c      	bcc.n	619a <__divsi3+0x14a>
    6180:	0189      	lsls	r1, r1, #6
    6182:	1192      	asrs	r2, r2, #6
    6184:	428b      	cmp	r3, r1
    6186:	d308      	bcc.n	619a <__divsi3+0x14a>
    6188:	0189      	lsls	r1, r1, #6
    618a:	1192      	asrs	r2, r2, #6
    618c:	428b      	cmp	r3, r1
    618e:	d304      	bcc.n	619a <__divsi3+0x14a>
    6190:	0189      	lsls	r1, r1, #6
    6192:	d03a      	beq.n	620a <__divsi3+0x1ba>
    6194:	1192      	asrs	r2, r2, #6
    6196:	e000      	b.n	619a <__divsi3+0x14a>
    6198:	0989      	lsrs	r1, r1, #6
    619a:	09c3      	lsrs	r3, r0, #7
    619c:	428b      	cmp	r3, r1
    619e:	d301      	bcc.n	61a4 <__divsi3+0x154>
    61a0:	01cb      	lsls	r3, r1, #7
    61a2:	1ac0      	subs	r0, r0, r3
    61a4:	4152      	adcs	r2, r2
    61a6:	0983      	lsrs	r3, r0, #6
    61a8:	428b      	cmp	r3, r1
    61aa:	d301      	bcc.n	61b0 <__divsi3+0x160>
    61ac:	018b      	lsls	r3, r1, #6
    61ae:	1ac0      	subs	r0, r0, r3
    61b0:	4152      	adcs	r2, r2
    61b2:	0943      	lsrs	r3, r0, #5
    61b4:	428b      	cmp	r3, r1
    61b6:	d301      	bcc.n	61bc <__divsi3+0x16c>
    61b8:	014b      	lsls	r3, r1, #5
    61ba:	1ac0      	subs	r0, r0, r3
    61bc:	4152      	adcs	r2, r2
    61be:	0903      	lsrs	r3, r0, #4
    61c0:	428b      	cmp	r3, r1
    61c2:	d301      	bcc.n	61c8 <__divsi3+0x178>
    61c4:	010b      	lsls	r3, r1, #4
    61c6:	1ac0      	subs	r0, r0, r3
    61c8:	4152      	adcs	r2, r2
    61ca:	08c3      	lsrs	r3, r0, #3
    61cc:	428b      	cmp	r3, r1
    61ce:	d301      	bcc.n	61d4 <__divsi3+0x184>
    61d0:	00cb      	lsls	r3, r1, #3
    61d2:	1ac0      	subs	r0, r0, r3
    61d4:	4152      	adcs	r2, r2
    61d6:	0883      	lsrs	r3, r0, #2
    61d8:	428b      	cmp	r3, r1
    61da:	d301      	bcc.n	61e0 <__divsi3+0x190>
    61dc:	008b      	lsls	r3, r1, #2
    61de:	1ac0      	subs	r0, r0, r3
    61e0:	4152      	adcs	r2, r2
    61e2:	d2d9      	bcs.n	6198 <__divsi3+0x148>
    61e4:	0843      	lsrs	r3, r0, #1
    61e6:	428b      	cmp	r3, r1
    61e8:	d301      	bcc.n	61ee <__divsi3+0x19e>
    61ea:	004b      	lsls	r3, r1, #1
    61ec:	1ac0      	subs	r0, r0, r3
    61ee:	4152      	adcs	r2, r2
    61f0:	1a41      	subs	r1, r0, r1
    61f2:	d200      	bcs.n	61f6 <__divsi3+0x1a6>
    61f4:	4601      	mov	r1, r0
    61f6:	4663      	mov	r3, ip
    61f8:	4152      	adcs	r2, r2
    61fa:	105b      	asrs	r3, r3, #1
    61fc:	4610      	mov	r0, r2
    61fe:	d301      	bcc.n	6204 <__divsi3+0x1b4>
    6200:	4240      	negs	r0, r0
    6202:	2b00      	cmp	r3, #0
    6204:	d500      	bpl.n	6208 <__divsi3+0x1b8>
    6206:	4249      	negs	r1, r1
    6208:	4770      	bx	lr
    620a:	4663      	mov	r3, ip
    620c:	105b      	asrs	r3, r3, #1
    620e:	d300      	bcc.n	6212 <__divsi3+0x1c2>
    6210:	4240      	negs	r0, r0
    6212:	b501      	push	{r0, lr}
    6214:	2000      	movs	r0, #0
    6216:	f000 f805 	bl	6224 <__aeabi_idiv0>
    621a:	bd02      	pop	{r1, pc}

0000621c <__aeabi_idivmod>:
    621c:	2900      	cmp	r1, #0
    621e:	d0f8      	beq.n	6212 <__divsi3+0x1c2>
    6220:	e716      	b.n	6050 <__divsi3>
    6222:	4770      	bx	lr

00006224 <__aeabi_idiv0>:
    6224:	4770      	bx	lr
    6226:	46c0      	nop			; (mov r8, r8)

00006228 <__aeabi_lmul>:
    6228:	b5f0      	push	{r4, r5, r6, r7, lr}
    622a:	46ce      	mov	lr, r9
    622c:	4647      	mov	r7, r8
    622e:	0415      	lsls	r5, r2, #16
    6230:	0c2d      	lsrs	r5, r5, #16
    6232:	002e      	movs	r6, r5
    6234:	b580      	push	{r7, lr}
    6236:	0407      	lsls	r7, r0, #16
    6238:	0c14      	lsrs	r4, r2, #16
    623a:	0c3f      	lsrs	r7, r7, #16
    623c:	4699      	mov	r9, r3
    623e:	0c03      	lsrs	r3, r0, #16
    6240:	437e      	muls	r6, r7
    6242:	435d      	muls	r5, r3
    6244:	4367      	muls	r7, r4
    6246:	4363      	muls	r3, r4
    6248:	197f      	adds	r7, r7, r5
    624a:	0c34      	lsrs	r4, r6, #16
    624c:	19e4      	adds	r4, r4, r7
    624e:	469c      	mov	ip, r3
    6250:	42a5      	cmp	r5, r4
    6252:	d903      	bls.n	625c <__aeabi_lmul+0x34>
    6254:	2380      	movs	r3, #128	; 0x80
    6256:	025b      	lsls	r3, r3, #9
    6258:	4698      	mov	r8, r3
    625a:	44c4      	add	ip, r8
    625c:	464b      	mov	r3, r9
    625e:	4351      	muls	r1, r2
    6260:	4343      	muls	r3, r0
    6262:	0436      	lsls	r6, r6, #16
    6264:	0c36      	lsrs	r6, r6, #16
    6266:	0c25      	lsrs	r5, r4, #16
    6268:	0424      	lsls	r4, r4, #16
    626a:	4465      	add	r5, ip
    626c:	19a4      	adds	r4, r4, r6
    626e:	1859      	adds	r1, r3, r1
    6270:	1949      	adds	r1, r1, r5
    6272:	0020      	movs	r0, r4
    6274:	bc0c      	pop	{r2, r3}
    6276:	4690      	mov	r8, r2
    6278:	4699      	mov	r9, r3
    627a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000627c <__libc_init_array>:
    627c:	b570      	push	{r4, r5, r6, lr}
    627e:	2600      	movs	r6, #0
    6280:	4d0c      	ldr	r5, [pc, #48]	; (62b4 <__libc_init_array+0x38>)
    6282:	4c0d      	ldr	r4, [pc, #52]	; (62b8 <__libc_init_array+0x3c>)
    6284:	1b64      	subs	r4, r4, r5
    6286:	10a4      	asrs	r4, r4, #2
    6288:	42a6      	cmp	r6, r4
    628a:	d109      	bne.n	62a0 <__libc_init_array+0x24>
    628c:	2600      	movs	r6, #0
    628e:	f001 fd03 	bl	7c98 <_init>
    6292:	4d0a      	ldr	r5, [pc, #40]	; (62bc <__libc_init_array+0x40>)
    6294:	4c0a      	ldr	r4, [pc, #40]	; (62c0 <__libc_init_array+0x44>)
    6296:	1b64      	subs	r4, r4, r5
    6298:	10a4      	asrs	r4, r4, #2
    629a:	42a6      	cmp	r6, r4
    629c:	d105      	bne.n	62aa <__libc_init_array+0x2e>
    629e:	bd70      	pop	{r4, r5, r6, pc}
    62a0:	00b3      	lsls	r3, r6, #2
    62a2:	58eb      	ldr	r3, [r5, r3]
    62a4:	4798      	blx	r3
    62a6:	3601      	adds	r6, #1
    62a8:	e7ee      	b.n	6288 <__libc_init_array+0xc>
    62aa:	00b3      	lsls	r3, r6, #2
    62ac:	58eb      	ldr	r3, [r5, r3]
    62ae:	4798      	blx	r3
    62b0:	3601      	adds	r6, #1
    62b2:	e7f2      	b.n	629a <__libc_init_array+0x1e>
    62b4:	00007ca4 	.word	0x00007ca4
    62b8:	00007ca4 	.word	0x00007ca4
    62bc:	00007ca4 	.word	0x00007ca4
    62c0:	00007ca8 	.word	0x00007ca8

000062c4 <malloc>:
    62c4:	b510      	push	{r4, lr}
    62c6:	4b03      	ldr	r3, [pc, #12]	; (62d4 <malloc+0x10>)
    62c8:	0001      	movs	r1, r0
    62ca:	6818      	ldr	r0, [r3, #0]
    62cc:	f000 f856 	bl	637c <_malloc_r>
    62d0:	bd10      	pop	{r4, pc}
    62d2:	46c0      	nop			; (mov r8, r8)
    62d4:	2000006c 	.word	0x2000006c

000062d8 <memset>:
    62d8:	0003      	movs	r3, r0
    62da:	1882      	adds	r2, r0, r2
    62dc:	4293      	cmp	r3, r2
    62de:	d100      	bne.n	62e2 <memset+0xa>
    62e0:	4770      	bx	lr
    62e2:	7019      	strb	r1, [r3, #0]
    62e4:	3301      	adds	r3, #1
    62e6:	e7f9      	b.n	62dc <memset+0x4>

000062e8 <_free_r>:
    62e8:	b570      	push	{r4, r5, r6, lr}
    62ea:	0005      	movs	r5, r0
    62ec:	2900      	cmp	r1, #0
    62ee:	d010      	beq.n	6312 <_free_r+0x2a>
    62f0:	1f0c      	subs	r4, r1, #4
    62f2:	6823      	ldr	r3, [r4, #0]
    62f4:	2b00      	cmp	r3, #0
    62f6:	da00      	bge.n	62fa <_free_r+0x12>
    62f8:	18e4      	adds	r4, r4, r3
    62fa:	0028      	movs	r0, r5
    62fc:	f000 fb54 	bl	69a8 <__malloc_lock>
    6300:	4a1d      	ldr	r2, [pc, #116]	; (6378 <_free_r+0x90>)
    6302:	6813      	ldr	r3, [r2, #0]
    6304:	2b00      	cmp	r3, #0
    6306:	d105      	bne.n	6314 <_free_r+0x2c>
    6308:	6063      	str	r3, [r4, #4]
    630a:	6014      	str	r4, [r2, #0]
    630c:	0028      	movs	r0, r5
    630e:	f000 fb4c 	bl	69aa <__malloc_unlock>
    6312:	bd70      	pop	{r4, r5, r6, pc}
    6314:	42a3      	cmp	r3, r4
    6316:	d909      	bls.n	632c <_free_r+0x44>
    6318:	6821      	ldr	r1, [r4, #0]
    631a:	1860      	adds	r0, r4, r1
    631c:	4283      	cmp	r3, r0
    631e:	d1f3      	bne.n	6308 <_free_r+0x20>
    6320:	6818      	ldr	r0, [r3, #0]
    6322:	685b      	ldr	r3, [r3, #4]
    6324:	1841      	adds	r1, r0, r1
    6326:	6021      	str	r1, [r4, #0]
    6328:	e7ee      	b.n	6308 <_free_r+0x20>
    632a:	0013      	movs	r3, r2
    632c:	685a      	ldr	r2, [r3, #4]
    632e:	2a00      	cmp	r2, #0
    6330:	d001      	beq.n	6336 <_free_r+0x4e>
    6332:	42a2      	cmp	r2, r4
    6334:	d9f9      	bls.n	632a <_free_r+0x42>
    6336:	6819      	ldr	r1, [r3, #0]
    6338:	1858      	adds	r0, r3, r1
    633a:	42a0      	cmp	r0, r4
    633c:	d10b      	bne.n	6356 <_free_r+0x6e>
    633e:	6820      	ldr	r0, [r4, #0]
    6340:	1809      	adds	r1, r1, r0
    6342:	1858      	adds	r0, r3, r1
    6344:	6019      	str	r1, [r3, #0]
    6346:	4282      	cmp	r2, r0
    6348:	d1e0      	bne.n	630c <_free_r+0x24>
    634a:	6810      	ldr	r0, [r2, #0]
    634c:	6852      	ldr	r2, [r2, #4]
    634e:	1841      	adds	r1, r0, r1
    6350:	6019      	str	r1, [r3, #0]
    6352:	605a      	str	r2, [r3, #4]
    6354:	e7da      	b.n	630c <_free_r+0x24>
    6356:	42a0      	cmp	r0, r4
    6358:	d902      	bls.n	6360 <_free_r+0x78>
    635a:	230c      	movs	r3, #12
    635c:	602b      	str	r3, [r5, #0]
    635e:	e7d5      	b.n	630c <_free_r+0x24>
    6360:	6821      	ldr	r1, [r4, #0]
    6362:	1860      	adds	r0, r4, r1
    6364:	4282      	cmp	r2, r0
    6366:	d103      	bne.n	6370 <_free_r+0x88>
    6368:	6810      	ldr	r0, [r2, #0]
    636a:	6852      	ldr	r2, [r2, #4]
    636c:	1841      	adds	r1, r0, r1
    636e:	6021      	str	r1, [r4, #0]
    6370:	6062      	str	r2, [r4, #4]
    6372:	605c      	str	r4, [r3, #4]
    6374:	e7ca      	b.n	630c <_free_r+0x24>
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	200001e4 	.word	0x200001e4

0000637c <_malloc_r>:
    637c:	2303      	movs	r3, #3
    637e:	b570      	push	{r4, r5, r6, lr}
    6380:	1ccd      	adds	r5, r1, #3
    6382:	439d      	bics	r5, r3
    6384:	3508      	adds	r5, #8
    6386:	0006      	movs	r6, r0
    6388:	2d0c      	cmp	r5, #12
    638a:	d21e      	bcs.n	63ca <_malloc_r+0x4e>
    638c:	250c      	movs	r5, #12
    638e:	42a9      	cmp	r1, r5
    6390:	d81d      	bhi.n	63ce <_malloc_r+0x52>
    6392:	0030      	movs	r0, r6
    6394:	f000 fb08 	bl	69a8 <__malloc_lock>
    6398:	4a25      	ldr	r2, [pc, #148]	; (6430 <_malloc_r+0xb4>)
    639a:	6814      	ldr	r4, [r2, #0]
    639c:	0021      	movs	r1, r4
    639e:	2900      	cmp	r1, #0
    63a0:	d119      	bne.n	63d6 <_malloc_r+0x5a>
    63a2:	4c24      	ldr	r4, [pc, #144]	; (6434 <_malloc_r+0xb8>)
    63a4:	6823      	ldr	r3, [r4, #0]
    63a6:	2b00      	cmp	r3, #0
    63a8:	d103      	bne.n	63b2 <_malloc_r+0x36>
    63aa:	0030      	movs	r0, r6
    63ac:	f000 f844 	bl	6438 <_sbrk_r>
    63b0:	6020      	str	r0, [r4, #0]
    63b2:	0029      	movs	r1, r5
    63b4:	0030      	movs	r0, r6
    63b6:	f000 f83f 	bl	6438 <_sbrk_r>
    63ba:	1c43      	adds	r3, r0, #1
    63bc:	d12c      	bne.n	6418 <_malloc_r+0x9c>
    63be:	230c      	movs	r3, #12
    63c0:	0030      	movs	r0, r6
    63c2:	6033      	str	r3, [r6, #0]
    63c4:	f000 faf1 	bl	69aa <__malloc_unlock>
    63c8:	e003      	b.n	63d2 <_malloc_r+0x56>
    63ca:	2d00      	cmp	r5, #0
    63cc:	dadf      	bge.n	638e <_malloc_r+0x12>
    63ce:	230c      	movs	r3, #12
    63d0:	6033      	str	r3, [r6, #0]
    63d2:	2000      	movs	r0, #0
    63d4:	bd70      	pop	{r4, r5, r6, pc}
    63d6:	680b      	ldr	r3, [r1, #0]
    63d8:	1b5b      	subs	r3, r3, r5
    63da:	d41a      	bmi.n	6412 <_malloc_r+0x96>
    63dc:	2b0b      	cmp	r3, #11
    63de:	d903      	bls.n	63e8 <_malloc_r+0x6c>
    63e0:	600b      	str	r3, [r1, #0]
    63e2:	18cc      	adds	r4, r1, r3
    63e4:	6025      	str	r5, [r4, #0]
    63e6:	e003      	b.n	63f0 <_malloc_r+0x74>
    63e8:	428c      	cmp	r4, r1
    63ea:	d10e      	bne.n	640a <_malloc_r+0x8e>
    63ec:	6863      	ldr	r3, [r4, #4]
    63ee:	6013      	str	r3, [r2, #0]
    63f0:	0030      	movs	r0, r6
    63f2:	f000 fada 	bl	69aa <__malloc_unlock>
    63f6:	0020      	movs	r0, r4
    63f8:	2207      	movs	r2, #7
    63fa:	300b      	adds	r0, #11
    63fc:	1d23      	adds	r3, r4, #4
    63fe:	4390      	bics	r0, r2
    6400:	1ac3      	subs	r3, r0, r3
    6402:	d0e7      	beq.n	63d4 <_malloc_r+0x58>
    6404:	425a      	negs	r2, r3
    6406:	50e2      	str	r2, [r4, r3]
    6408:	e7e4      	b.n	63d4 <_malloc_r+0x58>
    640a:	684b      	ldr	r3, [r1, #4]
    640c:	6063      	str	r3, [r4, #4]
    640e:	000c      	movs	r4, r1
    6410:	e7ee      	b.n	63f0 <_malloc_r+0x74>
    6412:	000c      	movs	r4, r1
    6414:	6849      	ldr	r1, [r1, #4]
    6416:	e7c2      	b.n	639e <_malloc_r+0x22>
    6418:	2303      	movs	r3, #3
    641a:	1cc4      	adds	r4, r0, #3
    641c:	439c      	bics	r4, r3
    641e:	42a0      	cmp	r0, r4
    6420:	d0e0      	beq.n	63e4 <_malloc_r+0x68>
    6422:	1a21      	subs	r1, r4, r0
    6424:	0030      	movs	r0, r6
    6426:	f000 f807 	bl	6438 <_sbrk_r>
    642a:	1c43      	adds	r3, r0, #1
    642c:	d1da      	bne.n	63e4 <_malloc_r+0x68>
    642e:	e7c6      	b.n	63be <_malloc_r+0x42>
    6430:	200001e4 	.word	0x200001e4
    6434:	200001e8 	.word	0x200001e8

00006438 <_sbrk_r>:
    6438:	2300      	movs	r3, #0
    643a:	b570      	push	{r4, r5, r6, lr}
    643c:	4c06      	ldr	r4, [pc, #24]	; (6458 <_sbrk_r+0x20>)
    643e:	0005      	movs	r5, r0
    6440:	0008      	movs	r0, r1
    6442:	6023      	str	r3, [r4, #0]
    6444:	f7fd f96c 	bl	3720 <_sbrk>
    6448:	1c43      	adds	r3, r0, #1
    644a:	d103      	bne.n	6454 <_sbrk_r+0x1c>
    644c:	6823      	ldr	r3, [r4, #0]
    644e:	2b00      	cmp	r3, #0
    6450:	d000      	beq.n	6454 <_sbrk_r+0x1c>
    6452:	602b      	str	r3, [r5, #0]
    6454:	bd70      	pop	{r4, r5, r6, pc}
    6456:	46c0      	nop			; (mov r8, r8)
    6458:	20000cf8 	.word	0x20000cf8

0000645c <setbuf>:
    645c:	424a      	negs	r2, r1
    645e:	414a      	adcs	r2, r1
    6460:	2380      	movs	r3, #128	; 0x80
    6462:	b510      	push	{r4, lr}
    6464:	0052      	lsls	r2, r2, #1
    6466:	00db      	lsls	r3, r3, #3
    6468:	f000 f802 	bl	6470 <setvbuf>
    646c:	bd10      	pop	{r4, pc}
	...

00006470 <setvbuf>:
    6470:	b5f0      	push	{r4, r5, r6, r7, lr}
    6472:	001d      	movs	r5, r3
    6474:	4b4f      	ldr	r3, [pc, #316]	; (65b4 <setvbuf+0x144>)
    6476:	b085      	sub	sp, #20
    6478:	681e      	ldr	r6, [r3, #0]
    647a:	0004      	movs	r4, r0
    647c:	000f      	movs	r7, r1
    647e:	9200      	str	r2, [sp, #0]
    6480:	2e00      	cmp	r6, #0
    6482:	d005      	beq.n	6490 <setvbuf+0x20>
    6484:	69b3      	ldr	r3, [r6, #24]
    6486:	2b00      	cmp	r3, #0
    6488:	d102      	bne.n	6490 <setvbuf+0x20>
    648a:	0030      	movs	r0, r6
    648c:	f000 f9ce 	bl	682c <__sinit>
    6490:	4b49      	ldr	r3, [pc, #292]	; (65b8 <setvbuf+0x148>)
    6492:	429c      	cmp	r4, r3
    6494:	d150      	bne.n	6538 <setvbuf+0xc8>
    6496:	6874      	ldr	r4, [r6, #4]
    6498:	9b00      	ldr	r3, [sp, #0]
    649a:	2b02      	cmp	r3, #2
    649c:	d005      	beq.n	64aa <setvbuf+0x3a>
    649e:	2b01      	cmp	r3, #1
    64a0:	d900      	bls.n	64a4 <setvbuf+0x34>
    64a2:	e084      	b.n	65ae <setvbuf+0x13e>
    64a4:	2d00      	cmp	r5, #0
    64a6:	da00      	bge.n	64aa <setvbuf+0x3a>
    64a8:	e081      	b.n	65ae <setvbuf+0x13e>
    64aa:	0021      	movs	r1, r4
    64ac:	0030      	movs	r0, r6
    64ae:	f000 f94f 	bl	6750 <_fflush_r>
    64b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    64b4:	2900      	cmp	r1, #0
    64b6:	d008      	beq.n	64ca <setvbuf+0x5a>
    64b8:	0023      	movs	r3, r4
    64ba:	3344      	adds	r3, #68	; 0x44
    64bc:	4299      	cmp	r1, r3
    64be:	d002      	beq.n	64c6 <setvbuf+0x56>
    64c0:	0030      	movs	r0, r6
    64c2:	f7ff ff11 	bl	62e8 <_free_r>
    64c6:	2300      	movs	r3, #0
    64c8:	6363      	str	r3, [r4, #52]	; 0x34
    64ca:	2300      	movs	r3, #0
    64cc:	61a3      	str	r3, [r4, #24]
    64ce:	6063      	str	r3, [r4, #4]
    64d0:	89a3      	ldrh	r3, [r4, #12]
    64d2:	061b      	lsls	r3, r3, #24
    64d4:	d503      	bpl.n	64de <setvbuf+0x6e>
    64d6:	6921      	ldr	r1, [r4, #16]
    64d8:	0030      	movs	r0, r6
    64da:	f7ff ff05 	bl	62e8 <_free_r>
    64de:	89a3      	ldrh	r3, [r4, #12]
    64e0:	4a36      	ldr	r2, [pc, #216]	; (65bc <setvbuf+0x14c>)
    64e2:	4013      	ands	r3, r2
    64e4:	81a3      	strh	r3, [r4, #12]
    64e6:	9b00      	ldr	r3, [sp, #0]
    64e8:	2b02      	cmp	r3, #2
    64ea:	d05a      	beq.n	65a2 <setvbuf+0x132>
    64ec:	ab03      	add	r3, sp, #12
    64ee:	aa02      	add	r2, sp, #8
    64f0:	0021      	movs	r1, r4
    64f2:	0030      	movs	r0, r6
    64f4:	f000 fa30 	bl	6958 <__swhatbuf_r>
    64f8:	89a3      	ldrh	r3, [r4, #12]
    64fa:	4318      	orrs	r0, r3
    64fc:	81a0      	strh	r0, [r4, #12]
    64fe:	2d00      	cmp	r5, #0
    6500:	d124      	bne.n	654c <setvbuf+0xdc>
    6502:	9d02      	ldr	r5, [sp, #8]
    6504:	0028      	movs	r0, r5
    6506:	f7ff fedd 	bl	62c4 <malloc>
    650a:	9501      	str	r5, [sp, #4]
    650c:	1e07      	subs	r7, r0, #0
    650e:	d142      	bne.n	6596 <setvbuf+0x126>
    6510:	9b02      	ldr	r3, [sp, #8]
    6512:	9301      	str	r3, [sp, #4]
    6514:	42ab      	cmp	r3, r5
    6516:	d139      	bne.n	658c <setvbuf+0x11c>
    6518:	2001      	movs	r0, #1
    651a:	4240      	negs	r0, r0
    651c:	2302      	movs	r3, #2
    651e:	89a2      	ldrh	r2, [r4, #12]
    6520:	4313      	orrs	r3, r2
    6522:	81a3      	strh	r3, [r4, #12]
    6524:	2300      	movs	r3, #0
    6526:	60a3      	str	r3, [r4, #8]
    6528:	0023      	movs	r3, r4
    652a:	3347      	adds	r3, #71	; 0x47
    652c:	6023      	str	r3, [r4, #0]
    652e:	6123      	str	r3, [r4, #16]
    6530:	2301      	movs	r3, #1
    6532:	6163      	str	r3, [r4, #20]
    6534:	b005      	add	sp, #20
    6536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6538:	4b21      	ldr	r3, [pc, #132]	; (65c0 <setvbuf+0x150>)
    653a:	429c      	cmp	r4, r3
    653c:	d101      	bne.n	6542 <setvbuf+0xd2>
    653e:	68b4      	ldr	r4, [r6, #8]
    6540:	e7aa      	b.n	6498 <setvbuf+0x28>
    6542:	4b20      	ldr	r3, [pc, #128]	; (65c4 <setvbuf+0x154>)
    6544:	429c      	cmp	r4, r3
    6546:	d1a7      	bne.n	6498 <setvbuf+0x28>
    6548:	68f4      	ldr	r4, [r6, #12]
    654a:	e7a5      	b.n	6498 <setvbuf+0x28>
    654c:	2f00      	cmp	r7, #0
    654e:	d0d9      	beq.n	6504 <setvbuf+0x94>
    6550:	69b3      	ldr	r3, [r6, #24]
    6552:	2b00      	cmp	r3, #0
    6554:	d102      	bne.n	655c <setvbuf+0xec>
    6556:	0030      	movs	r0, r6
    6558:	f000 f968 	bl	682c <__sinit>
    655c:	9b00      	ldr	r3, [sp, #0]
    655e:	2b01      	cmp	r3, #1
    6560:	d103      	bne.n	656a <setvbuf+0xfa>
    6562:	89a3      	ldrh	r3, [r4, #12]
    6564:	9a00      	ldr	r2, [sp, #0]
    6566:	431a      	orrs	r2, r3
    6568:	81a2      	strh	r2, [r4, #12]
    656a:	2008      	movs	r0, #8
    656c:	89a3      	ldrh	r3, [r4, #12]
    656e:	6027      	str	r7, [r4, #0]
    6570:	6127      	str	r7, [r4, #16]
    6572:	6165      	str	r5, [r4, #20]
    6574:	4018      	ands	r0, r3
    6576:	d018      	beq.n	65aa <setvbuf+0x13a>
    6578:	2001      	movs	r0, #1
    657a:	4018      	ands	r0, r3
    657c:	2300      	movs	r3, #0
    657e:	4298      	cmp	r0, r3
    6580:	d011      	beq.n	65a6 <setvbuf+0x136>
    6582:	426d      	negs	r5, r5
    6584:	60a3      	str	r3, [r4, #8]
    6586:	61a5      	str	r5, [r4, #24]
    6588:	0018      	movs	r0, r3
    658a:	e7d3      	b.n	6534 <setvbuf+0xc4>
    658c:	9801      	ldr	r0, [sp, #4]
    658e:	f7ff fe99 	bl	62c4 <malloc>
    6592:	1e07      	subs	r7, r0, #0
    6594:	d0c0      	beq.n	6518 <setvbuf+0xa8>
    6596:	2380      	movs	r3, #128	; 0x80
    6598:	89a2      	ldrh	r2, [r4, #12]
    659a:	9d01      	ldr	r5, [sp, #4]
    659c:	4313      	orrs	r3, r2
    659e:	81a3      	strh	r3, [r4, #12]
    65a0:	e7d6      	b.n	6550 <setvbuf+0xe0>
    65a2:	2000      	movs	r0, #0
    65a4:	e7ba      	b.n	651c <setvbuf+0xac>
    65a6:	60a5      	str	r5, [r4, #8]
    65a8:	e7c4      	b.n	6534 <setvbuf+0xc4>
    65aa:	60a0      	str	r0, [r4, #8]
    65ac:	e7c2      	b.n	6534 <setvbuf+0xc4>
    65ae:	2001      	movs	r0, #1
    65b0:	4240      	negs	r0, r0
    65b2:	e7bf      	b.n	6534 <setvbuf+0xc4>
    65b4:	2000006c 	.word	0x2000006c
    65b8:	00007c24 	.word	0x00007c24
    65bc:	fffff35c 	.word	0xfffff35c
    65c0:	00007c44 	.word	0x00007c44
    65c4:	00007c04 	.word	0x00007c04

000065c8 <sniprintf>:
    65c8:	b40c      	push	{r2, r3}
    65ca:	b530      	push	{r4, r5, lr}
    65cc:	4b16      	ldr	r3, [pc, #88]	; (6628 <sniprintf+0x60>)
    65ce:	b09d      	sub	sp, #116	; 0x74
    65d0:	1e0c      	subs	r4, r1, #0
    65d2:	681d      	ldr	r5, [r3, #0]
    65d4:	da08      	bge.n	65e8 <sniprintf+0x20>
    65d6:	238b      	movs	r3, #139	; 0x8b
    65d8:	2001      	movs	r0, #1
    65da:	602b      	str	r3, [r5, #0]
    65dc:	4240      	negs	r0, r0
    65de:	b01d      	add	sp, #116	; 0x74
    65e0:	bc30      	pop	{r4, r5}
    65e2:	bc08      	pop	{r3}
    65e4:	b002      	add	sp, #8
    65e6:	4718      	bx	r3
    65e8:	2382      	movs	r3, #130	; 0x82
    65ea:	a902      	add	r1, sp, #8
    65ec:	009b      	lsls	r3, r3, #2
    65ee:	818b      	strh	r3, [r1, #12]
    65f0:	2300      	movs	r3, #0
    65f2:	9002      	str	r0, [sp, #8]
    65f4:	6108      	str	r0, [r1, #16]
    65f6:	429c      	cmp	r4, r3
    65f8:	d000      	beq.n	65fc <sniprintf+0x34>
    65fa:	1e63      	subs	r3, r4, #1
    65fc:	608b      	str	r3, [r1, #8]
    65fe:	614b      	str	r3, [r1, #20]
    6600:	2301      	movs	r3, #1
    6602:	425b      	negs	r3, r3
    6604:	81cb      	strh	r3, [r1, #14]
    6606:	9a20      	ldr	r2, [sp, #128]	; 0x80
    6608:	ab21      	add	r3, sp, #132	; 0x84
    660a:	0028      	movs	r0, r5
    660c:	9301      	str	r3, [sp, #4]
    660e:	f000 fa2f 	bl	6a70 <_svfiprintf_r>
    6612:	1c43      	adds	r3, r0, #1
    6614:	da01      	bge.n	661a <sniprintf+0x52>
    6616:	238b      	movs	r3, #139	; 0x8b
    6618:	602b      	str	r3, [r5, #0]
    661a:	2c00      	cmp	r4, #0
    661c:	d0df      	beq.n	65de <sniprintf+0x16>
    661e:	2300      	movs	r3, #0
    6620:	9a02      	ldr	r2, [sp, #8]
    6622:	7013      	strb	r3, [r2, #0]
    6624:	e7db      	b.n	65de <sniprintf+0x16>
    6626:	46c0      	nop			; (mov r8, r8)
    6628:	2000006c 	.word	0x2000006c

0000662c <strlen>:
    662c:	2300      	movs	r3, #0
    662e:	5cc2      	ldrb	r2, [r0, r3]
    6630:	3301      	adds	r3, #1
    6632:	2a00      	cmp	r2, #0
    6634:	d1fb      	bne.n	662e <strlen+0x2>
    6636:	1e58      	subs	r0, r3, #1
    6638:	4770      	bx	lr
	...

0000663c <__sflush_r>:
    663c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    663e:	898a      	ldrh	r2, [r1, #12]
    6640:	0005      	movs	r5, r0
    6642:	000c      	movs	r4, r1
    6644:	0713      	lsls	r3, r2, #28
    6646:	d460      	bmi.n	670a <__sflush_r+0xce>
    6648:	684b      	ldr	r3, [r1, #4]
    664a:	2b00      	cmp	r3, #0
    664c:	dc04      	bgt.n	6658 <__sflush_r+0x1c>
    664e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6650:	2b00      	cmp	r3, #0
    6652:	dc01      	bgt.n	6658 <__sflush_r+0x1c>
    6654:	2000      	movs	r0, #0
    6656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6658:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    665a:	2f00      	cmp	r7, #0
    665c:	d0fa      	beq.n	6654 <__sflush_r+0x18>
    665e:	2300      	movs	r3, #0
    6660:	682e      	ldr	r6, [r5, #0]
    6662:	602b      	str	r3, [r5, #0]
    6664:	2380      	movs	r3, #128	; 0x80
    6666:	015b      	lsls	r3, r3, #5
    6668:	401a      	ands	r2, r3
    666a:	d034      	beq.n	66d6 <__sflush_r+0x9a>
    666c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    666e:	89a3      	ldrh	r3, [r4, #12]
    6670:	075b      	lsls	r3, r3, #29
    6672:	d506      	bpl.n	6682 <__sflush_r+0x46>
    6674:	6863      	ldr	r3, [r4, #4]
    6676:	1ac0      	subs	r0, r0, r3
    6678:	6b63      	ldr	r3, [r4, #52]	; 0x34
    667a:	2b00      	cmp	r3, #0
    667c:	d001      	beq.n	6682 <__sflush_r+0x46>
    667e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6680:	1ac0      	subs	r0, r0, r3
    6682:	0002      	movs	r2, r0
    6684:	6a21      	ldr	r1, [r4, #32]
    6686:	2300      	movs	r3, #0
    6688:	0028      	movs	r0, r5
    668a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    668c:	47b8      	blx	r7
    668e:	89a1      	ldrh	r1, [r4, #12]
    6690:	1c43      	adds	r3, r0, #1
    6692:	d106      	bne.n	66a2 <__sflush_r+0x66>
    6694:	682b      	ldr	r3, [r5, #0]
    6696:	2b1d      	cmp	r3, #29
    6698:	d831      	bhi.n	66fe <__sflush_r+0xc2>
    669a:	4a2c      	ldr	r2, [pc, #176]	; (674c <__sflush_r+0x110>)
    669c:	40da      	lsrs	r2, r3
    669e:	07d3      	lsls	r3, r2, #31
    66a0:	d52d      	bpl.n	66fe <__sflush_r+0xc2>
    66a2:	2300      	movs	r3, #0
    66a4:	6063      	str	r3, [r4, #4]
    66a6:	6923      	ldr	r3, [r4, #16]
    66a8:	6023      	str	r3, [r4, #0]
    66aa:	04cb      	lsls	r3, r1, #19
    66ac:	d505      	bpl.n	66ba <__sflush_r+0x7e>
    66ae:	1c43      	adds	r3, r0, #1
    66b0:	d102      	bne.n	66b8 <__sflush_r+0x7c>
    66b2:	682b      	ldr	r3, [r5, #0]
    66b4:	2b00      	cmp	r3, #0
    66b6:	d100      	bne.n	66ba <__sflush_r+0x7e>
    66b8:	6560      	str	r0, [r4, #84]	; 0x54
    66ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    66bc:	602e      	str	r6, [r5, #0]
    66be:	2900      	cmp	r1, #0
    66c0:	d0c8      	beq.n	6654 <__sflush_r+0x18>
    66c2:	0023      	movs	r3, r4
    66c4:	3344      	adds	r3, #68	; 0x44
    66c6:	4299      	cmp	r1, r3
    66c8:	d002      	beq.n	66d0 <__sflush_r+0x94>
    66ca:	0028      	movs	r0, r5
    66cc:	f7ff fe0c 	bl	62e8 <_free_r>
    66d0:	2000      	movs	r0, #0
    66d2:	6360      	str	r0, [r4, #52]	; 0x34
    66d4:	e7bf      	b.n	6656 <__sflush_r+0x1a>
    66d6:	2301      	movs	r3, #1
    66d8:	6a21      	ldr	r1, [r4, #32]
    66da:	0028      	movs	r0, r5
    66dc:	47b8      	blx	r7
    66de:	1c43      	adds	r3, r0, #1
    66e0:	d1c5      	bne.n	666e <__sflush_r+0x32>
    66e2:	682b      	ldr	r3, [r5, #0]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d0c2      	beq.n	666e <__sflush_r+0x32>
    66e8:	2b1d      	cmp	r3, #29
    66ea:	d001      	beq.n	66f0 <__sflush_r+0xb4>
    66ec:	2b16      	cmp	r3, #22
    66ee:	d101      	bne.n	66f4 <__sflush_r+0xb8>
    66f0:	602e      	str	r6, [r5, #0]
    66f2:	e7af      	b.n	6654 <__sflush_r+0x18>
    66f4:	2340      	movs	r3, #64	; 0x40
    66f6:	89a2      	ldrh	r2, [r4, #12]
    66f8:	4313      	orrs	r3, r2
    66fa:	81a3      	strh	r3, [r4, #12]
    66fc:	e7ab      	b.n	6656 <__sflush_r+0x1a>
    66fe:	2340      	movs	r3, #64	; 0x40
    6700:	430b      	orrs	r3, r1
    6702:	2001      	movs	r0, #1
    6704:	81a3      	strh	r3, [r4, #12]
    6706:	4240      	negs	r0, r0
    6708:	e7a5      	b.n	6656 <__sflush_r+0x1a>
    670a:	690f      	ldr	r7, [r1, #16]
    670c:	2f00      	cmp	r7, #0
    670e:	d0a1      	beq.n	6654 <__sflush_r+0x18>
    6710:	680b      	ldr	r3, [r1, #0]
    6712:	600f      	str	r7, [r1, #0]
    6714:	1bdb      	subs	r3, r3, r7
    6716:	9301      	str	r3, [sp, #4]
    6718:	2300      	movs	r3, #0
    671a:	0792      	lsls	r2, r2, #30
    671c:	d100      	bne.n	6720 <__sflush_r+0xe4>
    671e:	694b      	ldr	r3, [r1, #20]
    6720:	60a3      	str	r3, [r4, #8]
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	2b00      	cmp	r3, #0
    6726:	dc00      	bgt.n	672a <__sflush_r+0xee>
    6728:	e794      	b.n	6654 <__sflush_r+0x18>
    672a:	9b01      	ldr	r3, [sp, #4]
    672c:	003a      	movs	r2, r7
    672e:	6a21      	ldr	r1, [r4, #32]
    6730:	0028      	movs	r0, r5
    6732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6734:	47b0      	blx	r6
    6736:	2800      	cmp	r0, #0
    6738:	dc03      	bgt.n	6742 <__sflush_r+0x106>
    673a:	2340      	movs	r3, #64	; 0x40
    673c:	89a2      	ldrh	r2, [r4, #12]
    673e:	4313      	orrs	r3, r2
    6740:	e7df      	b.n	6702 <__sflush_r+0xc6>
    6742:	9b01      	ldr	r3, [sp, #4]
    6744:	183f      	adds	r7, r7, r0
    6746:	1a1b      	subs	r3, r3, r0
    6748:	9301      	str	r3, [sp, #4]
    674a:	e7ea      	b.n	6722 <__sflush_r+0xe6>
    674c:	20400001 	.word	0x20400001

00006750 <_fflush_r>:
    6750:	690b      	ldr	r3, [r1, #16]
    6752:	b570      	push	{r4, r5, r6, lr}
    6754:	0005      	movs	r5, r0
    6756:	000c      	movs	r4, r1
    6758:	2b00      	cmp	r3, #0
    675a:	d101      	bne.n	6760 <_fflush_r+0x10>
    675c:	2000      	movs	r0, #0
    675e:	bd70      	pop	{r4, r5, r6, pc}
    6760:	2800      	cmp	r0, #0
    6762:	d004      	beq.n	676e <_fflush_r+0x1e>
    6764:	6983      	ldr	r3, [r0, #24]
    6766:	2b00      	cmp	r3, #0
    6768:	d101      	bne.n	676e <_fflush_r+0x1e>
    676a:	f000 f85f 	bl	682c <__sinit>
    676e:	4b0b      	ldr	r3, [pc, #44]	; (679c <_fflush_r+0x4c>)
    6770:	429c      	cmp	r4, r3
    6772:	d109      	bne.n	6788 <_fflush_r+0x38>
    6774:	686c      	ldr	r4, [r5, #4]
    6776:	220c      	movs	r2, #12
    6778:	5ea3      	ldrsh	r3, [r4, r2]
    677a:	2b00      	cmp	r3, #0
    677c:	d0ee      	beq.n	675c <_fflush_r+0xc>
    677e:	0021      	movs	r1, r4
    6780:	0028      	movs	r0, r5
    6782:	f7ff ff5b 	bl	663c <__sflush_r>
    6786:	e7ea      	b.n	675e <_fflush_r+0xe>
    6788:	4b05      	ldr	r3, [pc, #20]	; (67a0 <_fflush_r+0x50>)
    678a:	429c      	cmp	r4, r3
    678c:	d101      	bne.n	6792 <_fflush_r+0x42>
    678e:	68ac      	ldr	r4, [r5, #8]
    6790:	e7f1      	b.n	6776 <_fflush_r+0x26>
    6792:	4b04      	ldr	r3, [pc, #16]	; (67a4 <_fflush_r+0x54>)
    6794:	429c      	cmp	r4, r3
    6796:	d1ee      	bne.n	6776 <_fflush_r+0x26>
    6798:	68ec      	ldr	r4, [r5, #12]
    679a:	e7ec      	b.n	6776 <_fflush_r+0x26>
    679c:	00007c24 	.word	0x00007c24
    67a0:	00007c44 	.word	0x00007c44
    67a4:	00007c04 	.word	0x00007c04

000067a8 <_cleanup_r>:
    67a8:	b510      	push	{r4, lr}
    67aa:	4902      	ldr	r1, [pc, #8]	; (67b4 <_cleanup_r+0xc>)
    67ac:	f000 f8b2 	bl	6914 <_fwalk_reent>
    67b0:	bd10      	pop	{r4, pc}
    67b2:	46c0      	nop			; (mov r8, r8)
    67b4:	00006751 	.word	0x00006751

000067b8 <std.isra.0>:
    67b8:	2300      	movs	r3, #0
    67ba:	b510      	push	{r4, lr}
    67bc:	0004      	movs	r4, r0
    67be:	6003      	str	r3, [r0, #0]
    67c0:	6043      	str	r3, [r0, #4]
    67c2:	6083      	str	r3, [r0, #8]
    67c4:	8181      	strh	r1, [r0, #12]
    67c6:	6643      	str	r3, [r0, #100]	; 0x64
    67c8:	81c2      	strh	r2, [r0, #14]
    67ca:	6103      	str	r3, [r0, #16]
    67cc:	6143      	str	r3, [r0, #20]
    67ce:	6183      	str	r3, [r0, #24]
    67d0:	0019      	movs	r1, r3
    67d2:	2208      	movs	r2, #8
    67d4:	305c      	adds	r0, #92	; 0x5c
    67d6:	f7ff fd7f 	bl	62d8 <memset>
    67da:	4b05      	ldr	r3, [pc, #20]	; (67f0 <std.isra.0+0x38>)
    67dc:	6224      	str	r4, [r4, #32]
    67de:	6263      	str	r3, [r4, #36]	; 0x24
    67e0:	4b04      	ldr	r3, [pc, #16]	; (67f4 <std.isra.0+0x3c>)
    67e2:	62a3      	str	r3, [r4, #40]	; 0x28
    67e4:	4b04      	ldr	r3, [pc, #16]	; (67f8 <std.isra.0+0x40>)
    67e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    67e8:	4b04      	ldr	r3, [pc, #16]	; (67fc <std.isra.0+0x44>)
    67ea:	6323      	str	r3, [r4, #48]	; 0x30
    67ec:	bd10      	pop	{r4, pc}
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	00006f89 	.word	0x00006f89
    67f4:	00006fb1 	.word	0x00006fb1
    67f8:	00006fe9 	.word	0x00006fe9
    67fc:	00007015 	.word	0x00007015

00006800 <__sfmoreglue>:
    6800:	b570      	push	{r4, r5, r6, lr}
    6802:	2568      	movs	r5, #104	; 0x68
    6804:	1e4a      	subs	r2, r1, #1
    6806:	4355      	muls	r5, r2
    6808:	000e      	movs	r6, r1
    680a:	0029      	movs	r1, r5
    680c:	3174      	adds	r1, #116	; 0x74
    680e:	f7ff fdb5 	bl	637c <_malloc_r>
    6812:	1e04      	subs	r4, r0, #0
    6814:	d008      	beq.n	6828 <__sfmoreglue+0x28>
    6816:	2100      	movs	r1, #0
    6818:	002a      	movs	r2, r5
    681a:	6001      	str	r1, [r0, #0]
    681c:	6046      	str	r6, [r0, #4]
    681e:	300c      	adds	r0, #12
    6820:	60a0      	str	r0, [r4, #8]
    6822:	3268      	adds	r2, #104	; 0x68
    6824:	f7ff fd58 	bl	62d8 <memset>
    6828:	0020      	movs	r0, r4
    682a:	bd70      	pop	{r4, r5, r6, pc}

0000682c <__sinit>:
    682c:	6983      	ldr	r3, [r0, #24]
    682e:	b513      	push	{r0, r1, r4, lr}
    6830:	0004      	movs	r4, r0
    6832:	2b00      	cmp	r3, #0
    6834:	d128      	bne.n	6888 <__sinit+0x5c>
    6836:	6483      	str	r3, [r0, #72]	; 0x48
    6838:	64c3      	str	r3, [r0, #76]	; 0x4c
    683a:	6503      	str	r3, [r0, #80]	; 0x50
    683c:	4b13      	ldr	r3, [pc, #76]	; (688c <__sinit+0x60>)
    683e:	4a14      	ldr	r2, [pc, #80]	; (6890 <__sinit+0x64>)
    6840:	681b      	ldr	r3, [r3, #0]
    6842:	6282      	str	r2, [r0, #40]	; 0x28
    6844:	9301      	str	r3, [sp, #4]
    6846:	4298      	cmp	r0, r3
    6848:	d101      	bne.n	684e <__sinit+0x22>
    684a:	2301      	movs	r3, #1
    684c:	6183      	str	r3, [r0, #24]
    684e:	0020      	movs	r0, r4
    6850:	f000 f820 	bl	6894 <__sfp>
    6854:	6060      	str	r0, [r4, #4]
    6856:	0020      	movs	r0, r4
    6858:	f000 f81c 	bl	6894 <__sfp>
    685c:	60a0      	str	r0, [r4, #8]
    685e:	0020      	movs	r0, r4
    6860:	f000 f818 	bl	6894 <__sfp>
    6864:	2200      	movs	r2, #0
    6866:	60e0      	str	r0, [r4, #12]
    6868:	2104      	movs	r1, #4
    686a:	6860      	ldr	r0, [r4, #4]
    686c:	f7ff ffa4 	bl	67b8 <std.isra.0>
    6870:	2201      	movs	r2, #1
    6872:	2109      	movs	r1, #9
    6874:	68a0      	ldr	r0, [r4, #8]
    6876:	f7ff ff9f 	bl	67b8 <std.isra.0>
    687a:	2202      	movs	r2, #2
    687c:	2112      	movs	r1, #18
    687e:	68e0      	ldr	r0, [r4, #12]
    6880:	f7ff ff9a 	bl	67b8 <std.isra.0>
    6884:	2301      	movs	r3, #1
    6886:	61a3      	str	r3, [r4, #24]
    6888:	bd13      	pop	{r0, r1, r4, pc}
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	00007c00 	.word	0x00007c00
    6890:	000067a9 	.word	0x000067a9

00006894 <__sfp>:
    6894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6896:	4b1e      	ldr	r3, [pc, #120]	; (6910 <__sfp+0x7c>)
    6898:	0007      	movs	r7, r0
    689a:	681e      	ldr	r6, [r3, #0]
    689c:	69b3      	ldr	r3, [r6, #24]
    689e:	2b00      	cmp	r3, #0
    68a0:	d102      	bne.n	68a8 <__sfp+0x14>
    68a2:	0030      	movs	r0, r6
    68a4:	f7ff ffc2 	bl	682c <__sinit>
    68a8:	3648      	adds	r6, #72	; 0x48
    68aa:	68b4      	ldr	r4, [r6, #8]
    68ac:	6873      	ldr	r3, [r6, #4]
    68ae:	3b01      	subs	r3, #1
    68b0:	d504      	bpl.n	68bc <__sfp+0x28>
    68b2:	6833      	ldr	r3, [r6, #0]
    68b4:	2b00      	cmp	r3, #0
    68b6:	d007      	beq.n	68c8 <__sfp+0x34>
    68b8:	6836      	ldr	r6, [r6, #0]
    68ba:	e7f6      	b.n	68aa <__sfp+0x16>
    68bc:	220c      	movs	r2, #12
    68be:	5ea5      	ldrsh	r5, [r4, r2]
    68c0:	2d00      	cmp	r5, #0
    68c2:	d00d      	beq.n	68e0 <__sfp+0x4c>
    68c4:	3468      	adds	r4, #104	; 0x68
    68c6:	e7f2      	b.n	68ae <__sfp+0x1a>
    68c8:	2104      	movs	r1, #4
    68ca:	0038      	movs	r0, r7
    68cc:	f7ff ff98 	bl	6800 <__sfmoreglue>
    68d0:	6030      	str	r0, [r6, #0]
    68d2:	2800      	cmp	r0, #0
    68d4:	d1f0      	bne.n	68b8 <__sfp+0x24>
    68d6:	230c      	movs	r3, #12
    68d8:	0004      	movs	r4, r0
    68da:	603b      	str	r3, [r7, #0]
    68dc:	0020      	movs	r0, r4
    68de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68e0:	2301      	movs	r3, #1
    68e2:	0020      	movs	r0, r4
    68e4:	425b      	negs	r3, r3
    68e6:	81e3      	strh	r3, [r4, #14]
    68e8:	3302      	adds	r3, #2
    68ea:	81a3      	strh	r3, [r4, #12]
    68ec:	6665      	str	r5, [r4, #100]	; 0x64
    68ee:	6025      	str	r5, [r4, #0]
    68f0:	60a5      	str	r5, [r4, #8]
    68f2:	6065      	str	r5, [r4, #4]
    68f4:	6125      	str	r5, [r4, #16]
    68f6:	6165      	str	r5, [r4, #20]
    68f8:	61a5      	str	r5, [r4, #24]
    68fa:	2208      	movs	r2, #8
    68fc:	0029      	movs	r1, r5
    68fe:	305c      	adds	r0, #92	; 0x5c
    6900:	f7ff fcea 	bl	62d8 <memset>
    6904:	6365      	str	r5, [r4, #52]	; 0x34
    6906:	63a5      	str	r5, [r4, #56]	; 0x38
    6908:	64a5      	str	r5, [r4, #72]	; 0x48
    690a:	64e5      	str	r5, [r4, #76]	; 0x4c
    690c:	e7e6      	b.n	68dc <__sfp+0x48>
    690e:	46c0      	nop			; (mov r8, r8)
    6910:	00007c00 	.word	0x00007c00

00006914 <_fwalk_reent>:
    6914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6916:	0004      	movs	r4, r0
    6918:	0007      	movs	r7, r0
    691a:	2600      	movs	r6, #0
    691c:	9101      	str	r1, [sp, #4]
    691e:	3448      	adds	r4, #72	; 0x48
    6920:	2c00      	cmp	r4, #0
    6922:	d101      	bne.n	6928 <_fwalk_reent+0x14>
    6924:	0030      	movs	r0, r6
    6926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6928:	6863      	ldr	r3, [r4, #4]
    692a:	68a5      	ldr	r5, [r4, #8]
    692c:	9300      	str	r3, [sp, #0]
    692e:	9b00      	ldr	r3, [sp, #0]
    6930:	3b01      	subs	r3, #1
    6932:	9300      	str	r3, [sp, #0]
    6934:	d501      	bpl.n	693a <_fwalk_reent+0x26>
    6936:	6824      	ldr	r4, [r4, #0]
    6938:	e7f2      	b.n	6920 <_fwalk_reent+0xc>
    693a:	89ab      	ldrh	r3, [r5, #12]
    693c:	2b01      	cmp	r3, #1
    693e:	d908      	bls.n	6952 <_fwalk_reent+0x3e>
    6940:	220e      	movs	r2, #14
    6942:	5eab      	ldrsh	r3, [r5, r2]
    6944:	3301      	adds	r3, #1
    6946:	d004      	beq.n	6952 <_fwalk_reent+0x3e>
    6948:	0029      	movs	r1, r5
    694a:	0038      	movs	r0, r7
    694c:	9b01      	ldr	r3, [sp, #4]
    694e:	4798      	blx	r3
    6950:	4306      	orrs	r6, r0
    6952:	3568      	adds	r5, #104	; 0x68
    6954:	e7eb      	b.n	692e <_fwalk_reent+0x1a>
	...

00006958 <__swhatbuf_r>:
    6958:	b570      	push	{r4, r5, r6, lr}
    695a:	000e      	movs	r6, r1
    695c:	001d      	movs	r5, r3
    695e:	230e      	movs	r3, #14
    6960:	5ec9      	ldrsh	r1, [r1, r3]
    6962:	b090      	sub	sp, #64	; 0x40
    6964:	0014      	movs	r4, r2
    6966:	2900      	cmp	r1, #0
    6968:	da07      	bge.n	697a <__swhatbuf_r+0x22>
    696a:	2300      	movs	r3, #0
    696c:	602b      	str	r3, [r5, #0]
    696e:	89b3      	ldrh	r3, [r6, #12]
    6970:	061b      	lsls	r3, r3, #24
    6972:	d411      	bmi.n	6998 <__swhatbuf_r+0x40>
    6974:	2380      	movs	r3, #128	; 0x80
    6976:	00db      	lsls	r3, r3, #3
    6978:	e00f      	b.n	699a <__swhatbuf_r+0x42>
    697a:	aa01      	add	r2, sp, #4
    697c:	f000 fb76 	bl	706c <_fstat_r>
    6980:	2800      	cmp	r0, #0
    6982:	dbf2      	blt.n	696a <__swhatbuf_r+0x12>
    6984:	22f0      	movs	r2, #240	; 0xf0
    6986:	9b02      	ldr	r3, [sp, #8]
    6988:	0212      	lsls	r2, r2, #8
    698a:	4013      	ands	r3, r2
    698c:	4a05      	ldr	r2, [pc, #20]	; (69a4 <__swhatbuf_r+0x4c>)
    698e:	189b      	adds	r3, r3, r2
    6990:	425a      	negs	r2, r3
    6992:	4153      	adcs	r3, r2
    6994:	602b      	str	r3, [r5, #0]
    6996:	e7ed      	b.n	6974 <__swhatbuf_r+0x1c>
    6998:	2340      	movs	r3, #64	; 0x40
    699a:	2000      	movs	r0, #0
    699c:	6023      	str	r3, [r4, #0]
    699e:	b010      	add	sp, #64	; 0x40
    69a0:	bd70      	pop	{r4, r5, r6, pc}
    69a2:	46c0      	nop			; (mov r8, r8)
    69a4:	ffffe000 	.word	0xffffe000

000069a8 <__malloc_lock>:
    69a8:	4770      	bx	lr

000069aa <__malloc_unlock>:
    69aa:	4770      	bx	lr

000069ac <__ssputs_r>:
    69ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    69ae:	688e      	ldr	r6, [r1, #8]
    69b0:	b085      	sub	sp, #20
    69b2:	0007      	movs	r7, r0
    69b4:	000c      	movs	r4, r1
    69b6:	9203      	str	r2, [sp, #12]
    69b8:	9301      	str	r3, [sp, #4]
    69ba:	429e      	cmp	r6, r3
    69bc:	d839      	bhi.n	6a32 <__ssputs_r+0x86>
    69be:	2390      	movs	r3, #144	; 0x90
    69c0:	898a      	ldrh	r2, [r1, #12]
    69c2:	00db      	lsls	r3, r3, #3
    69c4:	421a      	tst	r2, r3
    69c6:	d034      	beq.n	6a32 <__ssputs_r+0x86>
    69c8:	2503      	movs	r5, #3
    69ca:	6909      	ldr	r1, [r1, #16]
    69cc:	6823      	ldr	r3, [r4, #0]
    69ce:	1a5b      	subs	r3, r3, r1
    69d0:	9302      	str	r3, [sp, #8]
    69d2:	6963      	ldr	r3, [r4, #20]
    69d4:	9802      	ldr	r0, [sp, #8]
    69d6:	435d      	muls	r5, r3
    69d8:	0feb      	lsrs	r3, r5, #31
    69da:	195d      	adds	r5, r3, r5
    69dc:	9b01      	ldr	r3, [sp, #4]
    69de:	106d      	asrs	r5, r5, #1
    69e0:	3301      	adds	r3, #1
    69e2:	181b      	adds	r3, r3, r0
    69e4:	42ab      	cmp	r3, r5
    69e6:	d900      	bls.n	69ea <__ssputs_r+0x3e>
    69e8:	001d      	movs	r5, r3
    69ea:	0553      	lsls	r3, r2, #21
    69ec:	d532      	bpl.n	6a54 <__ssputs_r+0xa8>
    69ee:	0029      	movs	r1, r5
    69f0:	0038      	movs	r0, r7
    69f2:	f7ff fcc3 	bl	637c <_malloc_r>
    69f6:	1e06      	subs	r6, r0, #0
    69f8:	d109      	bne.n	6a0e <__ssputs_r+0x62>
    69fa:	230c      	movs	r3, #12
    69fc:	603b      	str	r3, [r7, #0]
    69fe:	2340      	movs	r3, #64	; 0x40
    6a00:	2001      	movs	r0, #1
    6a02:	89a2      	ldrh	r2, [r4, #12]
    6a04:	4240      	negs	r0, r0
    6a06:	4313      	orrs	r3, r2
    6a08:	81a3      	strh	r3, [r4, #12]
    6a0a:	b005      	add	sp, #20
    6a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a0e:	9a02      	ldr	r2, [sp, #8]
    6a10:	6921      	ldr	r1, [r4, #16]
    6a12:	f000 fb5c 	bl	70ce <memcpy>
    6a16:	89a3      	ldrh	r3, [r4, #12]
    6a18:	4a14      	ldr	r2, [pc, #80]	; (6a6c <__ssputs_r+0xc0>)
    6a1a:	401a      	ands	r2, r3
    6a1c:	2380      	movs	r3, #128	; 0x80
    6a1e:	4313      	orrs	r3, r2
    6a20:	81a3      	strh	r3, [r4, #12]
    6a22:	9b02      	ldr	r3, [sp, #8]
    6a24:	6126      	str	r6, [r4, #16]
    6a26:	18f6      	adds	r6, r6, r3
    6a28:	6026      	str	r6, [r4, #0]
    6a2a:	6165      	str	r5, [r4, #20]
    6a2c:	9e01      	ldr	r6, [sp, #4]
    6a2e:	1aed      	subs	r5, r5, r3
    6a30:	60a5      	str	r5, [r4, #8]
    6a32:	9b01      	ldr	r3, [sp, #4]
    6a34:	42b3      	cmp	r3, r6
    6a36:	d200      	bcs.n	6a3a <__ssputs_r+0x8e>
    6a38:	001e      	movs	r6, r3
    6a3a:	0032      	movs	r2, r6
    6a3c:	9903      	ldr	r1, [sp, #12]
    6a3e:	6820      	ldr	r0, [r4, #0]
    6a40:	f000 fb4e 	bl	70e0 <memmove>
    6a44:	68a3      	ldr	r3, [r4, #8]
    6a46:	2000      	movs	r0, #0
    6a48:	1b9b      	subs	r3, r3, r6
    6a4a:	60a3      	str	r3, [r4, #8]
    6a4c:	6823      	ldr	r3, [r4, #0]
    6a4e:	199e      	adds	r6, r3, r6
    6a50:	6026      	str	r6, [r4, #0]
    6a52:	e7da      	b.n	6a0a <__ssputs_r+0x5e>
    6a54:	002a      	movs	r2, r5
    6a56:	0038      	movs	r0, r7
    6a58:	f000 fb54 	bl	7104 <_realloc_r>
    6a5c:	1e06      	subs	r6, r0, #0
    6a5e:	d1e0      	bne.n	6a22 <__ssputs_r+0x76>
    6a60:	6921      	ldr	r1, [r4, #16]
    6a62:	0038      	movs	r0, r7
    6a64:	f7ff fc40 	bl	62e8 <_free_r>
    6a68:	e7c7      	b.n	69fa <__ssputs_r+0x4e>
    6a6a:	46c0      	nop			; (mov r8, r8)
    6a6c:	fffffb7f 	.word	0xfffffb7f

00006a70 <_svfiprintf_r>:
    6a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a72:	b09f      	sub	sp, #124	; 0x7c
    6a74:	9002      	str	r0, [sp, #8]
    6a76:	9305      	str	r3, [sp, #20]
    6a78:	898b      	ldrh	r3, [r1, #12]
    6a7a:	000f      	movs	r7, r1
    6a7c:	0016      	movs	r6, r2
    6a7e:	061b      	lsls	r3, r3, #24
    6a80:	d511      	bpl.n	6aa6 <_svfiprintf_r+0x36>
    6a82:	690b      	ldr	r3, [r1, #16]
    6a84:	2b00      	cmp	r3, #0
    6a86:	d10e      	bne.n	6aa6 <_svfiprintf_r+0x36>
    6a88:	2140      	movs	r1, #64	; 0x40
    6a8a:	f7ff fc77 	bl	637c <_malloc_r>
    6a8e:	6038      	str	r0, [r7, #0]
    6a90:	6138      	str	r0, [r7, #16]
    6a92:	2800      	cmp	r0, #0
    6a94:	d105      	bne.n	6aa2 <_svfiprintf_r+0x32>
    6a96:	230c      	movs	r3, #12
    6a98:	9a02      	ldr	r2, [sp, #8]
    6a9a:	3801      	subs	r0, #1
    6a9c:	6013      	str	r3, [r2, #0]
    6a9e:	b01f      	add	sp, #124	; 0x7c
    6aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aa2:	2340      	movs	r3, #64	; 0x40
    6aa4:	617b      	str	r3, [r7, #20]
    6aa6:	2300      	movs	r3, #0
    6aa8:	ad06      	add	r5, sp, #24
    6aaa:	616b      	str	r3, [r5, #20]
    6aac:	3320      	adds	r3, #32
    6aae:	766b      	strb	r3, [r5, #25]
    6ab0:	3310      	adds	r3, #16
    6ab2:	76ab      	strb	r3, [r5, #26]
    6ab4:	0034      	movs	r4, r6
    6ab6:	7823      	ldrb	r3, [r4, #0]
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d147      	bne.n	6b4c <_svfiprintf_r+0xdc>
    6abc:	1ba3      	subs	r3, r4, r6
    6abe:	9304      	str	r3, [sp, #16]
    6ac0:	d00d      	beq.n	6ade <_svfiprintf_r+0x6e>
    6ac2:	1ba3      	subs	r3, r4, r6
    6ac4:	0032      	movs	r2, r6
    6ac6:	0039      	movs	r1, r7
    6ac8:	9802      	ldr	r0, [sp, #8]
    6aca:	f7ff ff6f 	bl	69ac <__ssputs_r>
    6ace:	1c43      	adds	r3, r0, #1
    6ad0:	d100      	bne.n	6ad4 <_svfiprintf_r+0x64>
    6ad2:	e0b5      	b.n	6c40 <_svfiprintf_r+0x1d0>
    6ad4:	696a      	ldr	r2, [r5, #20]
    6ad6:	9b04      	ldr	r3, [sp, #16]
    6ad8:	4694      	mov	ip, r2
    6ada:	4463      	add	r3, ip
    6adc:	616b      	str	r3, [r5, #20]
    6ade:	7823      	ldrb	r3, [r4, #0]
    6ae0:	2b00      	cmp	r3, #0
    6ae2:	d100      	bne.n	6ae6 <_svfiprintf_r+0x76>
    6ae4:	e0ac      	b.n	6c40 <_svfiprintf_r+0x1d0>
    6ae6:	2201      	movs	r2, #1
    6ae8:	2300      	movs	r3, #0
    6aea:	4252      	negs	r2, r2
    6aec:	606a      	str	r2, [r5, #4]
    6aee:	a902      	add	r1, sp, #8
    6af0:	3254      	adds	r2, #84	; 0x54
    6af2:	1852      	adds	r2, r2, r1
    6af4:	3401      	adds	r4, #1
    6af6:	602b      	str	r3, [r5, #0]
    6af8:	60eb      	str	r3, [r5, #12]
    6afa:	60ab      	str	r3, [r5, #8]
    6afc:	7013      	strb	r3, [r2, #0]
    6afe:	65ab      	str	r3, [r5, #88]	; 0x58
    6b00:	4e58      	ldr	r6, [pc, #352]	; (6c64 <_svfiprintf_r+0x1f4>)
    6b02:	2205      	movs	r2, #5
    6b04:	7821      	ldrb	r1, [r4, #0]
    6b06:	0030      	movs	r0, r6
    6b08:	f000 fad6 	bl	70b8 <memchr>
    6b0c:	1c62      	adds	r2, r4, #1
    6b0e:	2800      	cmp	r0, #0
    6b10:	d120      	bne.n	6b54 <_svfiprintf_r+0xe4>
    6b12:	6829      	ldr	r1, [r5, #0]
    6b14:	06cb      	lsls	r3, r1, #27
    6b16:	d504      	bpl.n	6b22 <_svfiprintf_r+0xb2>
    6b18:	2353      	movs	r3, #83	; 0x53
    6b1a:	ae02      	add	r6, sp, #8
    6b1c:	3020      	adds	r0, #32
    6b1e:	199b      	adds	r3, r3, r6
    6b20:	7018      	strb	r0, [r3, #0]
    6b22:	070b      	lsls	r3, r1, #28
    6b24:	d504      	bpl.n	6b30 <_svfiprintf_r+0xc0>
    6b26:	2353      	movs	r3, #83	; 0x53
    6b28:	202b      	movs	r0, #43	; 0x2b
    6b2a:	ae02      	add	r6, sp, #8
    6b2c:	199b      	adds	r3, r3, r6
    6b2e:	7018      	strb	r0, [r3, #0]
    6b30:	7823      	ldrb	r3, [r4, #0]
    6b32:	2b2a      	cmp	r3, #42	; 0x2a
    6b34:	d016      	beq.n	6b64 <_svfiprintf_r+0xf4>
    6b36:	2000      	movs	r0, #0
    6b38:	210a      	movs	r1, #10
    6b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b3c:	7822      	ldrb	r2, [r4, #0]
    6b3e:	3a30      	subs	r2, #48	; 0x30
    6b40:	2a09      	cmp	r2, #9
    6b42:	d955      	bls.n	6bf0 <_svfiprintf_r+0x180>
    6b44:	2800      	cmp	r0, #0
    6b46:	d015      	beq.n	6b74 <_svfiprintf_r+0x104>
    6b48:	9309      	str	r3, [sp, #36]	; 0x24
    6b4a:	e013      	b.n	6b74 <_svfiprintf_r+0x104>
    6b4c:	2b25      	cmp	r3, #37	; 0x25
    6b4e:	d0b5      	beq.n	6abc <_svfiprintf_r+0x4c>
    6b50:	3401      	adds	r4, #1
    6b52:	e7b0      	b.n	6ab6 <_svfiprintf_r+0x46>
    6b54:	2301      	movs	r3, #1
    6b56:	1b80      	subs	r0, r0, r6
    6b58:	4083      	lsls	r3, r0
    6b5a:	6829      	ldr	r1, [r5, #0]
    6b5c:	0014      	movs	r4, r2
    6b5e:	430b      	orrs	r3, r1
    6b60:	602b      	str	r3, [r5, #0]
    6b62:	e7cd      	b.n	6b00 <_svfiprintf_r+0x90>
    6b64:	9b05      	ldr	r3, [sp, #20]
    6b66:	1d18      	adds	r0, r3, #4
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	9005      	str	r0, [sp, #20]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	db39      	blt.n	6be4 <_svfiprintf_r+0x174>
    6b70:	9309      	str	r3, [sp, #36]	; 0x24
    6b72:	0014      	movs	r4, r2
    6b74:	7823      	ldrb	r3, [r4, #0]
    6b76:	2b2e      	cmp	r3, #46	; 0x2e
    6b78:	d10b      	bne.n	6b92 <_svfiprintf_r+0x122>
    6b7a:	7863      	ldrb	r3, [r4, #1]
    6b7c:	1c62      	adds	r2, r4, #1
    6b7e:	2b2a      	cmp	r3, #42	; 0x2a
    6b80:	d13e      	bne.n	6c00 <_svfiprintf_r+0x190>
    6b82:	9b05      	ldr	r3, [sp, #20]
    6b84:	3402      	adds	r4, #2
    6b86:	1d1a      	adds	r2, r3, #4
    6b88:	681b      	ldr	r3, [r3, #0]
    6b8a:	9205      	str	r2, [sp, #20]
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	db34      	blt.n	6bfa <_svfiprintf_r+0x18a>
    6b90:	9307      	str	r3, [sp, #28]
    6b92:	4e35      	ldr	r6, [pc, #212]	; (6c68 <_svfiprintf_r+0x1f8>)
    6b94:	7821      	ldrb	r1, [r4, #0]
    6b96:	2203      	movs	r2, #3
    6b98:	0030      	movs	r0, r6
    6b9a:	f000 fa8d 	bl	70b8 <memchr>
    6b9e:	2800      	cmp	r0, #0
    6ba0:	d006      	beq.n	6bb0 <_svfiprintf_r+0x140>
    6ba2:	2340      	movs	r3, #64	; 0x40
    6ba4:	1b80      	subs	r0, r0, r6
    6ba6:	4083      	lsls	r3, r0
    6ba8:	682a      	ldr	r2, [r5, #0]
    6baa:	3401      	adds	r4, #1
    6bac:	4313      	orrs	r3, r2
    6bae:	602b      	str	r3, [r5, #0]
    6bb0:	7821      	ldrb	r1, [r4, #0]
    6bb2:	2206      	movs	r2, #6
    6bb4:	482d      	ldr	r0, [pc, #180]	; (6c6c <_svfiprintf_r+0x1fc>)
    6bb6:	1c66      	adds	r6, r4, #1
    6bb8:	7629      	strb	r1, [r5, #24]
    6bba:	f000 fa7d 	bl	70b8 <memchr>
    6bbe:	2800      	cmp	r0, #0
    6bc0:	d046      	beq.n	6c50 <_svfiprintf_r+0x1e0>
    6bc2:	4b2b      	ldr	r3, [pc, #172]	; (6c70 <_svfiprintf_r+0x200>)
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	d12f      	bne.n	6c28 <_svfiprintf_r+0x1b8>
    6bc8:	6829      	ldr	r1, [r5, #0]
    6bca:	9b05      	ldr	r3, [sp, #20]
    6bcc:	2207      	movs	r2, #7
    6bce:	05c9      	lsls	r1, r1, #23
    6bd0:	d528      	bpl.n	6c24 <_svfiprintf_r+0x1b4>
    6bd2:	189b      	adds	r3, r3, r2
    6bd4:	4393      	bics	r3, r2
    6bd6:	3308      	adds	r3, #8
    6bd8:	9305      	str	r3, [sp, #20]
    6bda:	696b      	ldr	r3, [r5, #20]
    6bdc:	9a03      	ldr	r2, [sp, #12]
    6bde:	189b      	adds	r3, r3, r2
    6be0:	616b      	str	r3, [r5, #20]
    6be2:	e767      	b.n	6ab4 <_svfiprintf_r+0x44>
    6be4:	425b      	negs	r3, r3
    6be6:	60eb      	str	r3, [r5, #12]
    6be8:	2302      	movs	r3, #2
    6bea:	430b      	orrs	r3, r1
    6bec:	602b      	str	r3, [r5, #0]
    6bee:	e7c0      	b.n	6b72 <_svfiprintf_r+0x102>
    6bf0:	434b      	muls	r3, r1
    6bf2:	3401      	adds	r4, #1
    6bf4:	189b      	adds	r3, r3, r2
    6bf6:	2001      	movs	r0, #1
    6bf8:	e7a0      	b.n	6b3c <_svfiprintf_r+0xcc>
    6bfa:	2301      	movs	r3, #1
    6bfc:	425b      	negs	r3, r3
    6bfe:	e7c7      	b.n	6b90 <_svfiprintf_r+0x120>
    6c00:	2300      	movs	r3, #0
    6c02:	0014      	movs	r4, r2
    6c04:	200a      	movs	r0, #10
    6c06:	001a      	movs	r2, r3
    6c08:	606b      	str	r3, [r5, #4]
    6c0a:	7821      	ldrb	r1, [r4, #0]
    6c0c:	3930      	subs	r1, #48	; 0x30
    6c0e:	2909      	cmp	r1, #9
    6c10:	d903      	bls.n	6c1a <_svfiprintf_r+0x1aa>
    6c12:	2b00      	cmp	r3, #0
    6c14:	d0bd      	beq.n	6b92 <_svfiprintf_r+0x122>
    6c16:	9207      	str	r2, [sp, #28]
    6c18:	e7bb      	b.n	6b92 <_svfiprintf_r+0x122>
    6c1a:	4342      	muls	r2, r0
    6c1c:	3401      	adds	r4, #1
    6c1e:	1852      	adds	r2, r2, r1
    6c20:	2301      	movs	r3, #1
    6c22:	e7f2      	b.n	6c0a <_svfiprintf_r+0x19a>
    6c24:	3307      	adds	r3, #7
    6c26:	e7d5      	b.n	6bd4 <_svfiprintf_r+0x164>
    6c28:	ab05      	add	r3, sp, #20
    6c2a:	9300      	str	r3, [sp, #0]
    6c2c:	003a      	movs	r2, r7
    6c2e:	4b11      	ldr	r3, [pc, #68]	; (6c74 <_svfiprintf_r+0x204>)
    6c30:	0029      	movs	r1, r5
    6c32:	9802      	ldr	r0, [sp, #8]
    6c34:	e000      	b.n	6c38 <_svfiprintf_r+0x1c8>
    6c36:	bf00      	nop
    6c38:	9003      	str	r0, [sp, #12]
    6c3a:	9b03      	ldr	r3, [sp, #12]
    6c3c:	3301      	adds	r3, #1
    6c3e:	d1cc      	bne.n	6bda <_svfiprintf_r+0x16a>
    6c40:	89bb      	ldrh	r3, [r7, #12]
    6c42:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6c44:	065b      	lsls	r3, r3, #25
    6c46:	d400      	bmi.n	6c4a <_svfiprintf_r+0x1da>
    6c48:	e729      	b.n	6a9e <_svfiprintf_r+0x2e>
    6c4a:	2001      	movs	r0, #1
    6c4c:	4240      	negs	r0, r0
    6c4e:	e726      	b.n	6a9e <_svfiprintf_r+0x2e>
    6c50:	ab05      	add	r3, sp, #20
    6c52:	9300      	str	r3, [sp, #0]
    6c54:	003a      	movs	r2, r7
    6c56:	4b07      	ldr	r3, [pc, #28]	; (6c74 <_svfiprintf_r+0x204>)
    6c58:	0029      	movs	r1, r5
    6c5a:	9802      	ldr	r0, [sp, #8]
    6c5c:	f000 f87a 	bl	6d54 <_printf_i>
    6c60:	e7ea      	b.n	6c38 <_svfiprintf_r+0x1c8>
    6c62:	46c0      	nop			; (mov r8, r8)
    6c64:	00007c64 	.word	0x00007c64
    6c68:	00007c6a 	.word	0x00007c6a
    6c6c:	00007c6e 	.word	0x00007c6e
    6c70:	00000000 	.word	0x00000000
    6c74:	000069ad 	.word	0x000069ad

00006c78 <_printf_common>:
    6c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c7a:	0015      	movs	r5, r2
    6c7c:	9301      	str	r3, [sp, #4]
    6c7e:	688a      	ldr	r2, [r1, #8]
    6c80:	690b      	ldr	r3, [r1, #16]
    6c82:	9000      	str	r0, [sp, #0]
    6c84:	000c      	movs	r4, r1
    6c86:	4293      	cmp	r3, r2
    6c88:	da00      	bge.n	6c8c <_printf_common+0x14>
    6c8a:	0013      	movs	r3, r2
    6c8c:	0022      	movs	r2, r4
    6c8e:	602b      	str	r3, [r5, #0]
    6c90:	3243      	adds	r2, #67	; 0x43
    6c92:	7812      	ldrb	r2, [r2, #0]
    6c94:	2a00      	cmp	r2, #0
    6c96:	d001      	beq.n	6c9c <_printf_common+0x24>
    6c98:	3301      	adds	r3, #1
    6c9a:	602b      	str	r3, [r5, #0]
    6c9c:	6823      	ldr	r3, [r4, #0]
    6c9e:	069b      	lsls	r3, r3, #26
    6ca0:	d502      	bpl.n	6ca8 <_printf_common+0x30>
    6ca2:	682b      	ldr	r3, [r5, #0]
    6ca4:	3302      	adds	r3, #2
    6ca6:	602b      	str	r3, [r5, #0]
    6ca8:	2706      	movs	r7, #6
    6caa:	6823      	ldr	r3, [r4, #0]
    6cac:	401f      	ands	r7, r3
    6cae:	d027      	beq.n	6d00 <_printf_common+0x88>
    6cb0:	0023      	movs	r3, r4
    6cb2:	3343      	adds	r3, #67	; 0x43
    6cb4:	781b      	ldrb	r3, [r3, #0]
    6cb6:	1e5a      	subs	r2, r3, #1
    6cb8:	4193      	sbcs	r3, r2
    6cba:	6822      	ldr	r2, [r4, #0]
    6cbc:	0692      	lsls	r2, r2, #26
    6cbe:	d430      	bmi.n	6d22 <_printf_common+0xaa>
    6cc0:	0022      	movs	r2, r4
    6cc2:	9901      	ldr	r1, [sp, #4]
    6cc4:	3243      	adds	r2, #67	; 0x43
    6cc6:	9800      	ldr	r0, [sp, #0]
    6cc8:	9e08      	ldr	r6, [sp, #32]
    6cca:	47b0      	blx	r6
    6ccc:	1c43      	adds	r3, r0, #1
    6cce:	d025      	beq.n	6d1c <_printf_common+0xa4>
    6cd0:	2306      	movs	r3, #6
    6cd2:	6820      	ldr	r0, [r4, #0]
    6cd4:	682a      	ldr	r2, [r5, #0]
    6cd6:	68e1      	ldr	r1, [r4, #12]
    6cd8:	4003      	ands	r3, r0
    6cda:	2500      	movs	r5, #0
    6cdc:	2b04      	cmp	r3, #4
    6cde:	d103      	bne.n	6ce8 <_printf_common+0x70>
    6ce0:	1a8d      	subs	r5, r1, r2
    6ce2:	43eb      	mvns	r3, r5
    6ce4:	17db      	asrs	r3, r3, #31
    6ce6:	401d      	ands	r5, r3
    6ce8:	68a3      	ldr	r3, [r4, #8]
    6cea:	6922      	ldr	r2, [r4, #16]
    6cec:	4293      	cmp	r3, r2
    6cee:	dd01      	ble.n	6cf4 <_printf_common+0x7c>
    6cf0:	1a9b      	subs	r3, r3, r2
    6cf2:	18ed      	adds	r5, r5, r3
    6cf4:	2700      	movs	r7, #0
    6cf6:	42bd      	cmp	r5, r7
    6cf8:	d120      	bne.n	6d3c <_printf_common+0xc4>
    6cfa:	2000      	movs	r0, #0
    6cfc:	e010      	b.n	6d20 <_printf_common+0xa8>
    6cfe:	3701      	adds	r7, #1
    6d00:	68e3      	ldr	r3, [r4, #12]
    6d02:	682a      	ldr	r2, [r5, #0]
    6d04:	1a9b      	subs	r3, r3, r2
    6d06:	429f      	cmp	r7, r3
    6d08:	dad2      	bge.n	6cb0 <_printf_common+0x38>
    6d0a:	0022      	movs	r2, r4
    6d0c:	2301      	movs	r3, #1
    6d0e:	3219      	adds	r2, #25
    6d10:	9901      	ldr	r1, [sp, #4]
    6d12:	9800      	ldr	r0, [sp, #0]
    6d14:	9e08      	ldr	r6, [sp, #32]
    6d16:	47b0      	blx	r6
    6d18:	1c43      	adds	r3, r0, #1
    6d1a:	d1f0      	bne.n	6cfe <_printf_common+0x86>
    6d1c:	2001      	movs	r0, #1
    6d1e:	4240      	negs	r0, r0
    6d20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d22:	2030      	movs	r0, #48	; 0x30
    6d24:	18e1      	adds	r1, r4, r3
    6d26:	3143      	adds	r1, #67	; 0x43
    6d28:	7008      	strb	r0, [r1, #0]
    6d2a:	0021      	movs	r1, r4
    6d2c:	1c5a      	adds	r2, r3, #1
    6d2e:	3145      	adds	r1, #69	; 0x45
    6d30:	7809      	ldrb	r1, [r1, #0]
    6d32:	18a2      	adds	r2, r4, r2
    6d34:	3243      	adds	r2, #67	; 0x43
    6d36:	3302      	adds	r3, #2
    6d38:	7011      	strb	r1, [r2, #0]
    6d3a:	e7c1      	b.n	6cc0 <_printf_common+0x48>
    6d3c:	0022      	movs	r2, r4
    6d3e:	2301      	movs	r3, #1
    6d40:	321a      	adds	r2, #26
    6d42:	9901      	ldr	r1, [sp, #4]
    6d44:	9800      	ldr	r0, [sp, #0]
    6d46:	9e08      	ldr	r6, [sp, #32]
    6d48:	47b0      	blx	r6
    6d4a:	1c43      	adds	r3, r0, #1
    6d4c:	d0e6      	beq.n	6d1c <_printf_common+0xa4>
    6d4e:	3701      	adds	r7, #1
    6d50:	e7d1      	b.n	6cf6 <_printf_common+0x7e>
	...

00006d54 <_printf_i>:
    6d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d56:	b08b      	sub	sp, #44	; 0x2c
    6d58:	9206      	str	r2, [sp, #24]
    6d5a:	000a      	movs	r2, r1
    6d5c:	3243      	adds	r2, #67	; 0x43
    6d5e:	9307      	str	r3, [sp, #28]
    6d60:	9005      	str	r0, [sp, #20]
    6d62:	9204      	str	r2, [sp, #16]
    6d64:	7e0a      	ldrb	r2, [r1, #24]
    6d66:	000c      	movs	r4, r1
    6d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d6a:	2a6e      	cmp	r2, #110	; 0x6e
    6d6c:	d100      	bne.n	6d70 <_printf_i+0x1c>
    6d6e:	e08f      	b.n	6e90 <_printf_i+0x13c>
    6d70:	d817      	bhi.n	6da2 <_printf_i+0x4e>
    6d72:	2a63      	cmp	r2, #99	; 0x63
    6d74:	d02c      	beq.n	6dd0 <_printf_i+0x7c>
    6d76:	d808      	bhi.n	6d8a <_printf_i+0x36>
    6d78:	2a00      	cmp	r2, #0
    6d7a:	d100      	bne.n	6d7e <_printf_i+0x2a>
    6d7c:	e099      	b.n	6eb2 <_printf_i+0x15e>
    6d7e:	2a58      	cmp	r2, #88	; 0x58
    6d80:	d054      	beq.n	6e2c <_printf_i+0xd8>
    6d82:	0026      	movs	r6, r4
    6d84:	3642      	adds	r6, #66	; 0x42
    6d86:	7032      	strb	r2, [r6, #0]
    6d88:	e029      	b.n	6dde <_printf_i+0x8a>
    6d8a:	2a64      	cmp	r2, #100	; 0x64
    6d8c:	d001      	beq.n	6d92 <_printf_i+0x3e>
    6d8e:	2a69      	cmp	r2, #105	; 0x69
    6d90:	d1f7      	bne.n	6d82 <_printf_i+0x2e>
    6d92:	6821      	ldr	r1, [r4, #0]
    6d94:	681a      	ldr	r2, [r3, #0]
    6d96:	0608      	lsls	r0, r1, #24
    6d98:	d523      	bpl.n	6de2 <_printf_i+0x8e>
    6d9a:	1d11      	adds	r1, r2, #4
    6d9c:	6019      	str	r1, [r3, #0]
    6d9e:	6815      	ldr	r5, [r2, #0]
    6da0:	e025      	b.n	6dee <_printf_i+0x9a>
    6da2:	2a73      	cmp	r2, #115	; 0x73
    6da4:	d100      	bne.n	6da8 <_printf_i+0x54>
    6da6:	e088      	b.n	6eba <_printf_i+0x166>
    6da8:	d808      	bhi.n	6dbc <_printf_i+0x68>
    6daa:	2a6f      	cmp	r2, #111	; 0x6f
    6dac:	d029      	beq.n	6e02 <_printf_i+0xae>
    6dae:	2a70      	cmp	r2, #112	; 0x70
    6db0:	d1e7      	bne.n	6d82 <_printf_i+0x2e>
    6db2:	2220      	movs	r2, #32
    6db4:	6809      	ldr	r1, [r1, #0]
    6db6:	430a      	orrs	r2, r1
    6db8:	6022      	str	r2, [r4, #0]
    6dba:	e003      	b.n	6dc4 <_printf_i+0x70>
    6dbc:	2a75      	cmp	r2, #117	; 0x75
    6dbe:	d020      	beq.n	6e02 <_printf_i+0xae>
    6dc0:	2a78      	cmp	r2, #120	; 0x78
    6dc2:	d1de      	bne.n	6d82 <_printf_i+0x2e>
    6dc4:	0022      	movs	r2, r4
    6dc6:	2178      	movs	r1, #120	; 0x78
    6dc8:	3245      	adds	r2, #69	; 0x45
    6dca:	7011      	strb	r1, [r2, #0]
    6dcc:	4a6c      	ldr	r2, [pc, #432]	; (6f80 <_printf_i+0x22c>)
    6dce:	e030      	b.n	6e32 <_printf_i+0xde>
    6dd0:	000e      	movs	r6, r1
    6dd2:	681a      	ldr	r2, [r3, #0]
    6dd4:	3642      	adds	r6, #66	; 0x42
    6dd6:	1d11      	adds	r1, r2, #4
    6dd8:	6019      	str	r1, [r3, #0]
    6dda:	6813      	ldr	r3, [r2, #0]
    6ddc:	7033      	strb	r3, [r6, #0]
    6dde:	2301      	movs	r3, #1
    6de0:	e079      	b.n	6ed6 <_printf_i+0x182>
    6de2:	0649      	lsls	r1, r1, #25
    6de4:	d5d9      	bpl.n	6d9a <_printf_i+0x46>
    6de6:	1d11      	adds	r1, r2, #4
    6de8:	6019      	str	r1, [r3, #0]
    6dea:	2300      	movs	r3, #0
    6dec:	5ed5      	ldrsh	r5, [r2, r3]
    6dee:	2d00      	cmp	r5, #0
    6df0:	da03      	bge.n	6dfa <_printf_i+0xa6>
    6df2:	232d      	movs	r3, #45	; 0x2d
    6df4:	9a04      	ldr	r2, [sp, #16]
    6df6:	426d      	negs	r5, r5
    6df8:	7013      	strb	r3, [r2, #0]
    6dfa:	4b62      	ldr	r3, [pc, #392]	; (6f84 <_printf_i+0x230>)
    6dfc:	270a      	movs	r7, #10
    6dfe:	9303      	str	r3, [sp, #12]
    6e00:	e02f      	b.n	6e62 <_printf_i+0x10e>
    6e02:	6820      	ldr	r0, [r4, #0]
    6e04:	6819      	ldr	r1, [r3, #0]
    6e06:	0605      	lsls	r5, r0, #24
    6e08:	d503      	bpl.n	6e12 <_printf_i+0xbe>
    6e0a:	1d08      	adds	r0, r1, #4
    6e0c:	6018      	str	r0, [r3, #0]
    6e0e:	680d      	ldr	r5, [r1, #0]
    6e10:	e005      	b.n	6e1e <_printf_i+0xca>
    6e12:	0640      	lsls	r0, r0, #25
    6e14:	d5f9      	bpl.n	6e0a <_printf_i+0xb6>
    6e16:	680d      	ldr	r5, [r1, #0]
    6e18:	1d08      	adds	r0, r1, #4
    6e1a:	6018      	str	r0, [r3, #0]
    6e1c:	b2ad      	uxth	r5, r5
    6e1e:	4b59      	ldr	r3, [pc, #356]	; (6f84 <_printf_i+0x230>)
    6e20:	2708      	movs	r7, #8
    6e22:	9303      	str	r3, [sp, #12]
    6e24:	2a6f      	cmp	r2, #111	; 0x6f
    6e26:	d018      	beq.n	6e5a <_printf_i+0x106>
    6e28:	270a      	movs	r7, #10
    6e2a:	e016      	b.n	6e5a <_printf_i+0x106>
    6e2c:	3145      	adds	r1, #69	; 0x45
    6e2e:	700a      	strb	r2, [r1, #0]
    6e30:	4a54      	ldr	r2, [pc, #336]	; (6f84 <_printf_i+0x230>)
    6e32:	9203      	str	r2, [sp, #12]
    6e34:	681a      	ldr	r2, [r3, #0]
    6e36:	6821      	ldr	r1, [r4, #0]
    6e38:	1d10      	adds	r0, r2, #4
    6e3a:	6018      	str	r0, [r3, #0]
    6e3c:	6815      	ldr	r5, [r2, #0]
    6e3e:	0608      	lsls	r0, r1, #24
    6e40:	d522      	bpl.n	6e88 <_printf_i+0x134>
    6e42:	07cb      	lsls	r3, r1, #31
    6e44:	d502      	bpl.n	6e4c <_printf_i+0xf8>
    6e46:	2320      	movs	r3, #32
    6e48:	4319      	orrs	r1, r3
    6e4a:	6021      	str	r1, [r4, #0]
    6e4c:	2710      	movs	r7, #16
    6e4e:	2d00      	cmp	r5, #0
    6e50:	d103      	bne.n	6e5a <_printf_i+0x106>
    6e52:	2320      	movs	r3, #32
    6e54:	6822      	ldr	r2, [r4, #0]
    6e56:	439a      	bics	r2, r3
    6e58:	6022      	str	r2, [r4, #0]
    6e5a:	0023      	movs	r3, r4
    6e5c:	2200      	movs	r2, #0
    6e5e:	3343      	adds	r3, #67	; 0x43
    6e60:	701a      	strb	r2, [r3, #0]
    6e62:	6863      	ldr	r3, [r4, #4]
    6e64:	60a3      	str	r3, [r4, #8]
    6e66:	2b00      	cmp	r3, #0
    6e68:	db5c      	blt.n	6f24 <_printf_i+0x1d0>
    6e6a:	2204      	movs	r2, #4
    6e6c:	6821      	ldr	r1, [r4, #0]
    6e6e:	4391      	bics	r1, r2
    6e70:	6021      	str	r1, [r4, #0]
    6e72:	2d00      	cmp	r5, #0
    6e74:	d158      	bne.n	6f28 <_printf_i+0x1d4>
    6e76:	9e04      	ldr	r6, [sp, #16]
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d064      	beq.n	6f46 <_printf_i+0x1f2>
    6e7c:	0026      	movs	r6, r4
    6e7e:	9b03      	ldr	r3, [sp, #12]
    6e80:	3642      	adds	r6, #66	; 0x42
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	7033      	strb	r3, [r6, #0]
    6e86:	e05e      	b.n	6f46 <_printf_i+0x1f2>
    6e88:	0648      	lsls	r0, r1, #25
    6e8a:	d5da      	bpl.n	6e42 <_printf_i+0xee>
    6e8c:	b2ad      	uxth	r5, r5
    6e8e:	e7d8      	b.n	6e42 <_printf_i+0xee>
    6e90:	6809      	ldr	r1, [r1, #0]
    6e92:	681a      	ldr	r2, [r3, #0]
    6e94:	0608      	lsls	r0, r1, #24
    6e96:	d505      	bpl.n	6ea4 <_printf_i+0x150>
    6e98:	1d11      	adds	r1, r2, #4
    6e9a:	6019      	str	r1, [r3, #0]
    6e9c:	6813      	ldr	r3, [r2, #0]
    6e9e:	6962      	ldr	r2, [r4, #20]
    6ea0:	601a      	str	r2, [r3, #0]
    6ea2:	e006      	b.n	6eb2 <_printf_i+0x15e>
    6ea4:	0649      	lsls	r1, r1, #25
    6ea6:	d5f7      	bpl.n	6e98 <_printf_i+0x144>
    6ea8:	1d11      	adds	r1, r2, #4
    6eaa:	6019      	str	r1, [r3, #0]
    6eac:	6813      	ldr	r3, [r2, #0]
    6eae:	8aa2      	ldrh	r2, [r4, #20]
    6eb0:	801a      	strh	r2, [r3, #0]
    6eb2:	2300      	movs	r3, #0
    6eb4:	9e04      	ldr	r6, [sp, #16]
    6eb6:	6123      	str	r3, [r4, #16]
    6eb8:	e054      	b.n	6f64 <_printf_i+0x210>
    6eba:	681a      	ldr	r2, [r3, #0]
    6ebc:	1d11      	adds	r1, r2, #4
    6ebe:	6019      	str	r1, [r3, #0]
    6ec0:	6816      	ldr	r6, [r2, #0]
    6ec2:	2100      	movs	r1, #0
    6ec4:	6862      	ldr	r2, [r4, #4]
    6ec6:	0030      	movs	r0, r6
    6ec8:	f000 f8f6 	bl	70b8 <memchr>
    6ecc:	2800      	cmp	r0, #0
    6ece:	d001      	beq.n	6ed4 <_printf_i+0x180>
    6ed0:	1b80      	subs	r0, r0, r6
    6ed2:	6060      	str	r0, [r4, #4]
    6ed4:	6863      	ldr	r3, [r4, #4]
    6ed6:	6123      	str	r3, [r4, #16]
    6ed8:	2300      	movs	r3, #0
    6eda:	9a04      	ldr	r2, [sp, #16]
    6edc:	7013      	strb	r3, [r2, #0]
    6ede:	e041      	b.n	6f64 <_printf_i+0x210>
    6ee0:	6923      	ldr	r3, [r4, #16]
    6ee2:	0032      	movs	r2, r6
    6ee4:	9906      	ldr	r1, [sp, #24]
    6ee6:	9805      	ldr	r0, [sp, #20]
    6ee8:	9d07      	ldr	r5, [sp, #28]
    6eea:	47a8      	blx	r5
    6eec:	1c43      	adds	r3, r0, #1
    6eee:	d043      	beq.n	6f78 <_printf_i+0x224>
    6ef0:	6823      	ldr	r3, [r4, #0]
    6ef2:	2500      	movs	r5, #0
    6ef4:	079b      	lsls	r3, r3, #30
    6ef6:	d40f      	bmi.n	6f18 <_printf_i+0x1c4>
    6ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6efa:	68e0      	ldr	r0, [r4, #12]
    6efc:	4298      	cmp	r0, r3
    6efe:	da3d      	bge.n	6f7c <_printf_i+0x228>
    6f00:	0018      	movs	r0, r3
    6f02:	e03b      	b.n	6f7c <_printf_i+0x228>
    6f04:	0022      	movs	r2, r4
    6f06:	2301      	movs	r3, #1
    6f08:	3219      	adds	r2, #25
    6f0a:	9906      	ldr	r1, [sp, #24]
    6f0c:	9805      	ldr	r0, [sp, #20]
    6f0e:	9e07      	ldr	r6, [sp, #28]
    6f10:	47b0      	blx	r6
    6f12:	1c43      	adds	r3, r0, #1
    6f14:	d030      	beq.n	6f78 <_printf_i+0x224>
    6f16:	3501      	adds	r5, #1
    6f18:	68e3      	ldr	r3, [r4, #12]
    6f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f1c:	1a9b      	subs	r3, r3, r2
    6f1e:	429d      	cmp	r5, r3
    6f20:	dbf0      	blt.n	6f04 <_printf_i+0x1b0>
    6f22:	e7e9      	b.n	6ef8 <_printf_i+0x1a4>
    6f24:	2d00      	cmp	r5, #0
    6f26:	d0a9      	beq.n	6e7c <_printf_i+0x128>
    6f28:	9e04      	ldr	r6, [sp, #16]
    6f2a:	0028      	movs	r0, r5
    6f2c:	0039      	movs	r1, r7
    6f2e:	f7ff f88b 	bl	6048 <__aeabi_uidivmod>
    6f32:	9b03      	ldr	r3, [sp, #12]
    6f34:	3e01      	subs	r6, #1
    6f36:	5c5b      	ldrb	r3, [r3, r1]
    6f38:	0028      	movs	r0, r5
    6f3a:	7033      	strb	r3, [r6, #0]
    6f3c:	0039      	movs	r1, r7
    6f3e:	f7fe fffd 	bl	5f3c <__udivsi3>
    6f42:	1e05      	subs	r5, r0, #0
    6f44:	d1f1      	bne.n	6f2a <_printf_i+0x1d6>
    6f46:	2f08      	cmp	r7, #8
    6f48:	d109      	bne.n	6f5e <_printf_i+0x20a>
    6f4a:	6823      	ldr	r3, [r4, #0]
    6f4c:	07db      	lsls	r3, r3, #31
    6f4e:	d506      	bpl.n	6f5e <_printf_i+0x20a>
    6f50:	6863      	ldr	r3, [r4, #4]
    6f52:	6922      	ldr	r2, [r4, #16]
    6f54:	4293      	cmp	r3, r2
    6f56:	dc02      	bgt.n	6f5e <_printf_i+0x20a>
    6f58:	2330      	movs	r3, #48	; 0x30
    6f5a:	3e01      	subs	r6, #1
    6f5c:	7033      	strb	r3, [r6, #0]
    6f5e:	9b04      	ldr	r3, [sp, #16]
    6f60:	1b9b      	subs	r3, r3, r6
    6f62:	6123      	str	r3, [r4, #16]
    6f64:	9b07      	ldr	r3, [sp, #28]
    6f66:	aa09      	add	r2, sp, #36	; 0x24
    6f68:	9300      	str	r3, [sp, #0]
    6f6a:	0021      	movs	r1, r4
    6f6c:	9b06      	ldr	r3, [sp, #24]
    6f6e:	9805      	ldr	r0, [sp, #20]
    6f70:	f7ff fe82 	bl	6c78 <_printf_common>
    6f74:	1c43      	adds	r3, r0, #1
    6f76:	d1b3      	bne.n	6ee0 <_printf_i+0x18c>
    6f78:	2001      	movs	r0, #1
    6f7a:	4240      	negs	r0, r0
    6f7c:	b00b      	add	sp, #44	; 0x2c
    6f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f80:	00007c86 	.word	0x00007c86
    6f84:	00007c75 	.word	0x00007c75

00006f88 <__sread>:
    6f88:	b570      	push	{r4, r5, r6, lr}
    6f8a:	000c      	movs	r4, r1
    6f8c:	250e      	movs	r5, #14
    6f8e:	5f49      	ldrsh	r1, [r1, r5]
    6f90:	f000 f8de 	bl	7150 <_read_r>
    6f94:	2800      	cmp	r0, #0
    6f96:	db03      	blt.n	6fa0 <__sread+0x18>
    6f98:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6f9a:	181b      	adds	r3, r3, r0
    6f9c:	6563      	str	r3, [r4, #84]	; 0x54
    6f9e:	bd70      	pop	{r4, r5, r6, pc}
    6fa0:	89a3      	ldrh	r3, [r4, #12]
    6fa2:	4a02      	ldr	r2, [pc, #8]	; (6fac <__sread+0x24>)
    6fa4:	4013      	ands	r3, r2
    6fa6:	81a3      	strh	r3, [r4, #12]
    6fa8:	e7f9      	b.n	6f9e <__sread+0x16>
    6faa:	46c0      	nop			; (mov r8, r8)
    6fac:	ffffefff 	.word	0xffffefff

00006fb0 <__swrite>:
    6fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fb2:	001f      	movs	r7, r3
    6fb4:	898b      	ldrh	r3, [r1, #12]
    6fb6:	0005      	movs	r5, r0
    6fb8:	000c      	movs	r4, r1
    6fba:	0016      	movs	r6, r2
    6fbc:	05db      	lsls	r3, r3, #23
    6fbe:	d505      	bpl.n	6fcc <__swrite+0x1c>
    6fc0:	230e      	movs	r3, #14
    6fc2:	5ec9      	ldrsh	r1, [r1, r3]
    6fc4:	2200      	movs	r2, #0
    6fc6:	2302      	movs	r3, #2
    6fc8:	f000 f862 	bl	7090 <_lseek_r>
    6fcc:	89a3      	ldrh	r3, [r4, #12]
    6fce:	4a05      	ldr	r2, [pc, #20]	; (6fe4 <__swrite+0x34>)
    6fd0:	0028      	movs	r0, r5
    6fd2:	4013      	ands	r3, r2
    6fd4:	81a3      	strh	r3, [r4, #12]
    6fd6:	0032      	movs	r2, r6
    6fd8:	230e      	movs	r3, #14
    6fda:	5ee1      	ldrsh	r1, [r4, r3]
    6fdc:	003b      	movs	r3, r7
    6fde:	f000 f81f 	bl	7020 <_write_r>
    6fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fe4:	ffffefff 	.word	0xffffefff

00006fe8 <__sseek>:
    6fe8:	b570      	push	{r4, r5, r6, lr}
    6fea:	000c      	movs	r4, r1
    6fec:	250e      	movs	r5, #14
    6fee:	5f49      	ldrsh	r1, [r1, r5]
    6ff0:	f000 f84e 	bl	7090 <_lseek_r>
    6ff4:	89a3      	ldrh	r3, [r4, #12]
    6ff6:	1c42      	adds	r2, r0, #1
    6ff8:	d103      	bne.n	7002 <__sseek+0x1a>
    6ffa:	4a05      	ldr	r2, [pc, #20]	; (7010 <__sseek+0x28>)
    6ffc:	4013      	ands	r3, r2
    6ffe:	81a3      	strh	r3, [r4, #12]
    7000:	bd70      	pop	{r4, r5, r6, pc}
    7002:	2280      	movs	r2, #128	; 0x80
    7004:	0152      	lsls	r2, r2, #5
    7006:	4313      	orrs	r3, r2
    7008:	81a3      	strh	r3, [r4, #12]
    700a:	6560      	str	r0, [r4, #84]	; 0x54
    700c:	e7f8      	b.n	7000 <__sseek+0x18>
    700e:	46c0      	nop			; (mov r8, r8)
    7010:	ffffefff 	.word	0xffffefff

00007014 <__sclose>:
    7014:	b510      	push	{r4, lr}
    7016:	230e      	movs	r3, #14
    7018:	5ec9      	ldrsh	r1, [r1, r3]
    701a:	f000 f815 	bl	7048 <_close_r>
    701e:	bd10      	pop	{r4, pc}

00007020 <_write_r>:
    7020:	b570      	push	{r4, r5, r6, lr}
    7022:	0005      	movs	r5, r0
    7024:	0008      	movs	r0, r1
    7026:	0011      	movs	r1, r2
    7028:	2200      	movs	r2, #0
    702a:	4c06      	ldr	r4, [pc, #24]	; (7044 <_write_r+0x24>)
    702c:	6022      	str	r2, [r4, #0]
    702e:	001a      	movs	r2, r3
    7030:	f7fc fb4e 	bl	36d0 <_write>
    7034:	1c43      	adds	r3, r0, #1
    7036:	d103      	bne.n	7040 <_write_r+0x20>
    7038:	6823      	ldr	r3, [r4, #0]
    703a:	2b00      	cmp	r3, #0
    703c:	d000      	beq.n	7040 <_write_r+0x20>
    703e:	602b      	str	r3, [r5, #0]
    7040:	bd70      	pop	{r4, r5, r6, pc}
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	20000cf8 	.word	0x20000cf8

00007048 <_close_r>:
    7048:	2300      	movs	r3, #0
    704a:	b570      	push	{r4, r5, r6, lr}
    704c:	4c06      	ldr	r4, [pc, #24]	; (7068 <_close_r+0x20>)
    704e:	0005      	movs	r5, r0
    7050:	0008      	movs	r0, r1
    7052:	6023      	str	r3, [r4, #0]
    7054:	f7fc fb76 	bl	3744 <_close>
    7058:	1c43      	adds	r3, r0, #1
    705a:	d103      	bne.n	7064 <_close_r+0x1c>
    705c:	6823      	ldr	r3, [r4, #0]
    705e:	2b00      	cmp	r3, #0
    7060:	d000      	beq.n	7064 <_close_r+0x1c>
    7062:	602b      	str	r3, [r5, #0]
    7064:	bd70      	pop	{r4, r5, r6, pc}
    7066:	46c0      	nop			; (mov r8, r8)
    7068:	20000cf8 	.word	0x20000cf8

0000706c <_fstat_r>:
    706c:	2300      	movs	r3, #0
    706e:	b570      	push	{r4, r5, r6, lr}
    7070:	4c06      	ldr	r4, [pc, #24]	; (708c <_fstat_r+0x20>)
    7072:	0005      	movs	r5, r0
    7074:	0008      	movs	r0, r1
    7076:	0011      	movs	r1, r2
    7078:	6023      	str	r3, [r4, #0]
    707a:	f7fc fb66 	bl	374a <_fstat>
    707e:	1c43      	adds	r3, r0, #1
    7080:	d103      	bne.n	708a <_fstat_r+0x1e>
    7082:	6823      	ldr	r3, [r4, #0]
    7084:	2b00      	cmp	r3, #0
    7086:	d000      	beq.n	708a <_fstat_r+0x1e>
    7088:	602b      	str	r3, [r5, #0]
    708a:	bd70      	pop	{r4, r5, r6, pc}
    708c:	20000cf8 	.word	0x20000cf8

00007090 <_lseek_r>:
    7090:	b570      	push	{r4, r5, r6, lr}
    7092:	0005      	movs	r5, r0
    7094:	0008      	movs	r0, r1
    7096:	0011      	movs	r1, r2
    7098:	2200      	movs	r2, #0
    709a:	4c06      	ldr	r4, [pc, #24]	; (70b4 <_lseek_r+0x24>)
    709c:	6022      	str	r2, [r4, #0]
    709e:	001a      	movs	r2, r3
    70a0:	f7fc fb58 	bl	3754 <_lseek>
    70a4:	1c43      	adds	r3, r0, #1
    70a6:	d103      	bne.n	70b0 <_lseek_r+0x20>
    70a8:	6823      	ldr	r3, [r4, #0]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d000      	beq.n	70b0 <_lseek_r+0x20>
    70ae:	602b      	str	r3, [r5, #0]
    70b0:	bd70      	pop	{r4, r5, r6, pc}
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	20000cf8 	.word	0x20000cf8

000070b8 <memchr>:
    70b8:	b2c9      	uxtb	r1, r1
    70ba:	1882      	adds	r2, r0, r2
    70bc:	4290      	cmp	r0, r2
    70be:	d101      	bne.n	70c4 <memchr+0xc>
    70c0:	2000      	movs	r0, #0
    70c2:	4770      	bx	lr
    70c4:	7803      	ldrb	r3, [r0, #0]
    70c6:	428b      	cmp	r3, r1
    70c8:	d0fb      	beq.n	70c2 <memchr+0xa>
    70ca:	3001      	adds	r0, #1
    70cc:	e7f6      	b.n	70bc <memchr+0x4>

000070ce <memcpy>:
    70ce:	2300      	movs	r3, #0
    70d0:	b510      	push	{r4, lr}
    70d2:	429a      	cmp	r2, r3
    70d4:	d100      	bne.n	70d8 <memcpy+0xa>
    70d6:	bd10      	pop	{r4, pc}
    70d8:	5ccc      	ldrb	r4, [r1, r3]
    70da:	54c4      	strb	r4, [r0, r3]
    70dc:	3301      	adds	r3, #1
    70de:	e7f8      	b.n	70d2 <memcpy+0x4>

000070e0 <memmove>:
    70e0:	b510      	push	{r4, lr}
    70e2:	4288      	cmp	r0, r1
    70e4:	d902      	bls.n	70ec <memmove+0xc>
    70e6:	188b      	adds	r3, r1, r2
    70e8:	4298      	cmp	r0, r3
    70ea:	d308      	bcc.n	70fe <memmove+0x1e>
    70ec:	2300      	movs	r3, #0
    70ee:	429a      	cmp	r2, r3
    70f0:	d007      	beq.n	7102 <memmove+0x22>
    70f2:	5ccc      	ldrb	r4, [r1, r3]
    70f4:	54c4      	strb	r4, [r0, r3]
    70f6:	3301      	adds	r3, #1
    70f8:	e7f9      	b.n	70ee <memmove+0xe>
    70fa:	5c8b      	ldrb	r3, [r1, r2]
    70fc:	5483      	strb	r3, [r0, r2]
    70fe:	3a01      	subs	r2, #1
    7100:	d2fb      	bcs.n	70fa <memmove+0x1a>
    7102:	bd10      	pop	{r4, pc}

00007104 <_realloc_r>:
    7104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7106:	0007      	movs	r7, r0
    7108:	000d      	movs	r5, r1
    710a:	0016      	movs	r6, r2
    710c:	2900      	cmp	r1, #0
    710e:	d105      	bne.n	711c <_realloc_r+0x18>
    7110:	0011      	movs	r1, r2
    7112:	f7ff f933 	bl	637c <_malloc_r>
    7116:	0004      	movs	r4, r0
    7118:	0020      	movs	r0, r4
    711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    711c:	2a00      	cmp	r2, #0
    711e:	d103      	bne.n	7128 <_realloc_r+0x24>
    7120:	f7ff f8e2 	bl	62e8 <_free_r>
    7124:	0034      	movs	r4, r6
    7126:	e7f7      	b.n	7118 <_realloc_r+0x14>
    7128:	f000 f826 	bl	7178 <_malloc_usable_size_r>
    712c:	002c      	movs	r4, r5
    712e:	4286      	cmp	r6, r0
    7130:	d9f2      	bls.n	7118 <_realloc_r+0x14>
    7132:	0031      	movs	r1, r6
    7134:	0038      	movs	r0, r7
    7136:	f7ff f921 	bl	637c <_malloc_r>
    713a:	1e04      	subs	r4, r0, #0
    713c:	d0ec      	beq.n	7118 <_realloc_r+0x14>
    713e:	0029      	movs	r1, r5
    7140:	0032      	movs	r2, r6
    7142:	f7ff ffc4 	bl	70ce <memcpy>
    7146:	0029      	movs	r1, r5
    7148:	0038      	movs	r0, r7
    714a:	f7ff f8cd 	bl	62e8 <_free_r>
    714e:	e7e3      	b.n	7118 <_realloc_r+0x14>

00007150 <_read_r>:
    7150:	b570      	push	{r4, r5, r6, lr}
    7152:	0005      	movs	r5, r0
    7154:	0008      	movs	r0, r1
    7156:	0011      	movs	r1, r2
    7158:	2200      	movs	r2, #0
    715a:	4c06      	ldr	r4, [pc, #24]	; (7174 <_read_r+0x24>)
    715c:	6022      	str	r2, [r4, #0]
    715e:	001a      	movs	r2, r3
    7160:	f7fc fa94 	bl	368c <_read>
    7164:	1c43      	adds	r3, r0, #1
    7166:	d103      	bne.n	7170 <_read_r+0x20>
    7168:	6823      	ldr	r3, [r4, #0]
    716a:	2b00      	cmp	r3, #0
    716c:	d000      	beq.n	7170 <_read_r+0x20>
    716e:	602b      	str	r3, [r5, #0]
    7170:	bd70      	pop	{r4, r5, r6, pc}
    7172:	46c0      	nop			; (mov r8, r8)
    7174:	20000cf8 	.word	0x20000cf8

00007178 <_malloc_usable_size_r>:
    7178:	1f0b      	subs	r3, r1, #4
    717a:	681b      	ldr	r3, [r3, #0]
    717c:	1f18      	subs	r0, r3, #4
    717e:	2b00      	cmp	r3, #0
    7180:	da01      	bge.n	7186 <_malloc_usable_size_r+0xe>
    7182:	580b      	ldr	r3, [r1, r0]
    7184:	18c0      	adds	r0, r0, r3
    7186:	4770      	bx	lr
    7188:	000002e4 	.word	0x000002e4
    718c:	000002e4 	.word	0x000002e4
    7190:	000002c0 	.word	0x000002c0
    7194:	000002e4 	.word	0x000002e4
    7198:	000002c0 	.word	0x000002c0
    719c:	000002a6 	.word	0x000002a6
    71a0:	000002a6 	.word	0x000002a6
    71a4:	000002e4 	.word	0x000002e4
    71a8:	000002e4 	.word	0x000002e4
    71ac:	000002e4 	.word	0x000002e4
    71b0:	000002e4 	.word	0x000002e4
    71b4:	000002e4 	.word	0x000002e4
    71b8:	000002e4 	.word	0x000002e4
    71bc:	000002e4 	.word	0x000002e4
    71c0:	000002e4 	.word	0x000002e4
    71c4:	000002e4 	.word	0x000002e4
    71c8:	000002e4 	.word	0x000002e4
    71cc:	000002e4 	.word	0x000002e4
    71d0:	000002e4 	.word	0x000002e4
    71d4:	000002e4 	.word	0x000002e4
    71d8:	000002e4 	.word	0x000002e4
    71dc:	000002e4 	.word	0x000002e4
    71e0:	000002e4 	.word	0x000002e4
    71e4:	000002e4 	.word	0x000002e4
    71e8:	000002e4 	.word	0x000002e4
    71ec:	000002e4 	.word	0x000002e4
    71f0:	000002e4 	.word	0x000002e4
    71f4:	000002e4 	.word	0x000002e4
    71f8:	000002e4 	.word	0x000002e4
    71fc:	000002e4 	.word	0x000002e4
    7200:	000002e4 	.word	0x000002e4
    7204:	000002e4 	.word	0x000002e4
    7208:	000002e4 	.word	0x000002e4
    720c:	000002e4 	.word	0x000002e4
    7210:	000002e4 	.word	0x000002e4
    7214:	000002e4 	.word	0x000002e4
    7218:	000002e4 	.word	0x000002e4
    721c:	000002e4 	.word	0x000002e4
    7220:	000002e4 	.word	0x000002e4
    7224:	000002e4 	.word	0x000002e4
    7228:	000002e4 	.word	0x000002e4
    722c:	000002e4 	.word	0x000002e4
    7230:	000002e4 	.word	0x000002e4
    7234:	000002e4 	.word	0x000002e4
    7238:	000002e4 	.word	0x000002e4
    723c:	000002e4 	.word	0x000002e4
    7240:	000002e4 	.word	0x000002e4
    7244:	000002e4 	.word	0x000002e4
    7248:	000002e4 	.word	0x000002e4
    724c:	000002e4 	.word	0x000002e4
    7250:	000002e4 	.word	0x000002e4
    7254:	000002e4 	.word	0x000002e4
    7258:	000002e4 	.word	0x000002e4
    725c:	000002e4 	.word	0x000002e4
    7260:	000002e4 	.word	0x000002e4
    7264:	000002e4 	.word	0x000002e4
    7268:	000002e4 	.word	0x000002e4
    726c:	000002e4 	.word	0x000002e4
    7270:	000002e4 	.word	0x000002e4
    7274:	000002e4 	.word	0x000002e4
    7278:	000002e4 	.word	0x000002e4
    727c:	000002e4 	.word	0x000002e4
    7280:	000002e4 	.word	0x000002e4
    7284:	000002e4 	.word	0x000002e4
    7288:	000002c0 	.word	0x000002c0
    728c:	000002c0 	.word	0x000002c0
    7290:	000002c8 	.word	0x000002c8
    7294:	000002c8 	.word	0x000002c8
    7298:	000002c8 	.word	0x000002c8
    729c:	000002c8 	.word	0x000002c8

000072a0 <mmc_trans_multipliers>:
    72a0:	00000000 0000000a 0000000c 0000000d     ................
    72b0:	0000000f 00000014 0000001a 0000001e     ................
    72c0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    72d0:	00000037 0000003c 00000046 00000050     7...<...F...P...

000072e0 <sd_mmc_trans_units>:
    72e0:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000072fc <sd_trans_multipliers>:
    72fc:	00000000 0000000a 0000000c 0000000d     ................
    730c:	0000000f 00000014 00000019 0000001e     ................
    731c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    732c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    733c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    734c:	42001800 42001c00 00002e22 00002e1e     ...B...B".......
    735c:	00002e1e 00002e84 00002e84 00002e36     ............6...
    736c:	00002e28 00002e3c 00002e72 00003044     (...<...r...D0..
    737c:	00003024 00003024 000030b0 00003036     $0..$0...0..60..
    738c:	00003052 00003028 00003060 000030a0     R0..(0..`0...0..

0000739c <LfnOfs>:
    739c:	07050301 12100e09 1c181614 0000001e     ................

000073ac <excvt.4558>:
    73ac:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    73bc:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    73cc:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    73dc:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    73ec:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    73fc:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    740c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    741c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    742c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    743c:	00005d5b                                []..

00007440 <Tbl>:
    7440:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    7450:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    7460:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    7470:	00d600ff 00f800dc 00d800a3 019200d7     ................
    7480:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    7490:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    74a0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    74b0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    74c0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    74d0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    74e0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    74f0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    7500:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    7510:	00da00de 00d900db 00dd00fd 00b400af     ................
    7520:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    7530:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00007540 <tbl_lower.4308>:
    7540:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    7550:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    7560:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    7570:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    7580:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    7590:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    75a0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    75b0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    75c0:	01050103 01090107 010d010b 0111010f     ................
    75d0:	01150113 01190117 011d011b 0121011f     ..............!.
    75e0:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    75f0:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    7600:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    7610:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    7620:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    7630:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    7640:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    7650:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    7660:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    7670:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    7680:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    7690:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    76a0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    76b0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    76c0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    76d0:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    76e0:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    76f0:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    7700:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    7710:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00007720 <tbl_upper.4309>:
    7720:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    7730:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7740:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    7750:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    7760:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    7770:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    7780:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    7790:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    77a0:	01040102 01080106 010c010a 0110010e     ................
    77b0:	01140112 01180116 011c011a 0120011e     .............. .
    77c0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    77d0:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    77e0:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    77f0:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    7800:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    7810:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    7820:	03940393 03960395 03980397 039a0399     ................
    7830:	039c039b 039e039d 03a0039f 03a303a1     ................
    7840:	03a503a4 03a703a6 03a903a8 041003aa     ................
    7850:	04120411 04140413 04160415 04180417     ................
    7860:	041a0419 041c041b 041e041d 0420041f     .............. .
    7870:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    7880:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    7890:	04030402 04050404 04070406 04090408     ................
    78a0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    78b0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    78c0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    78d0:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    78e0:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    78f0:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    7900:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    7910:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    7920:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    7930:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    7940:	000d0a2d 43204453 20647261 74696e69     -...SD Card init
    7950:	65746169 6f632064 63657272 21796c74     iated correctly!
    7960:	00000d0a 6e756f4d 69642074 28206b73     ....Mount disk (
    7970:	6f6d5f66 29746e75 0d2e2e2e 0000000a     f_mount)........
    7980:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
    7990:	5d4b4f5b 00000a0d 61657243 61206574     [OK]....Create a
    79a0:	6c696620 66282065 65706f5f 2e2e296e      file (f_open)..
    79b0:	000a0d2e 74697257 6f742065 73657420     ....Write to tes
    79c0:	69662074 2820656c 75705f66 2e297374     t file (f_puts).
    79d0:	0a0d2e2e 00000000 74736554 2f445320     ........Test SD/
    79e0:	20434d4d 63617473 00000a6b 4941465b     MMC stack...[FAI
    79f0:	0a0d5d4c 00000000 74736554 20736920     L]......Test is 
    7a00:	63637573 66737365 0a2e6c75 0000000d     successful......
    7a10:	6c756f43 6f6e2064 706f2074 62206e65     Could not open b
    7a20:	72616e69 69662079 0d21656c 0000000a     inary file!.....
    7a30:	74697257 6f742065 73657420 69662074     Write to test fi
    7a40:	2820656c 72775f66 29657469 0d2e2e2e     le (f_write)....
    7a50:	0000000a 20646e45 5420666f 2e747365     ....End of Test.
    7a60:	00000d0a 43204453 20445241 6e756f6d     ....SD CARD moun
    7a70:	75732074 73656363 46202173 73656c69     t success! Files
    7a80:	65747379 6c61206d 6d206f73 746e756f     ystem also mount
    7a90:	202e6465 00000a0d 43204453 20647261     ed. ....SD Card 
    7aa0:	6c696166 69206465 6974696e 6f697461     failed initiatio
    7ab0:	4320216e 6b636568 6e6f6320 7463656e     n! Check connect
    7ac0:	736e6f69 000d0a21 43204453 20445241     ions!...SD CARD 
    7ad0:	6c696166 20216465 63656843 6f79206b     failed! Check yo
    7ae0:	63207275 656e6e6f 6f697463 202e736e     ur connections. 
    7af0:	74737953 77206d65 206c6c69 74736572     System will rest
    7b00:	20747261 35206e69 63657320 73646e6f     art in 5 seconds
    7b10:	002e2e2e 61666544 0d746c75 0000000a     ....Default.....
    7b20:	204d564e 6f666e49 754e203a 7265626d     NVM Info: Number
    7b30:	20666f20 65676150 64252073 6953202e      of Pages %d. Si
    7b40:	6f20657a 20612066 65676170 6425203a     ze of a page: %d
    7b50:	74796220 202e7365 00000a0d 73617245      bytes. ....Eras
    7b60:	72652065 00726f72 6f727245 202d2072     e error.Error - 
    7b70:	74736574 67617020 73692065 746f6e20     test page is not
    7b80:	61726520 21646573 00000000 6c756f43      erased!....Coul
    7b90:	6f6e2064 706f2074 74206e65 20747365     d not open test 
    7ba0:	656c6966 000a0d21 74736554 69727720     file!...Test wri
    7bb0:	74206574 564e206f 6166204d 64656c69     te to NVM failed
    7bc0:	000a0d21 74736554 69727720 74206574     !...Test write t
    7bd0:	564e206f 7573204d 65656363 21646564     o NVM succeeded!
    7be0:	00000a0d 35455345 2d203631 49584520     ....ESE516 - EXI
    7bf0:	4f422054 4f4c544f 52454441 00000000     T BOOTLOADER....

00007c00 <_global_impure_ptr>:
    7c00:	20000070                                p.. 

00007c04 <__sf_fake_stderr>:
	...

00007c24 <__sf_fake_stdin>:
	...

00007c44 <__sf_fake_stdout>:
	...
    7c64:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7c74:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7c84:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7c94:	00006665                                ef..

00007c98 <_init>:
    7c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c9a:	46c0      	nop			; (mov r8, r8)
    7c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7c9e:	bc08      	pop	{r3}
    7ca0:	469e      	mov	lr, r3
    7ca2:	4770      	bx	lr

00007ca4 <__init_array_start>:
    7ca4:	000000dd 	.word	0x000000dd

00007ca8 <_fini>:
    7ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7caa:	46c0      	nop			; (mov r8, r8)
    7cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7cae:	bc08      	pop	{r3}
    7cb0:	469e      	mov	lr, r3
    7cb2:	4770      	bx	lr

00007cb4 <__fini_array_start>:
    7cb4:	000000b5 	.word	0x000000b5
